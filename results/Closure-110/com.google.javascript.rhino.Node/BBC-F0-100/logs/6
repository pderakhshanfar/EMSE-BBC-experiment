* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19305
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2318449153
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 12:59:45.593 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 12:59:48.577 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 12:59:48.579 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 12:59:48.699 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch in context: com.google.javascript.rhino.Node:getParent()Lcom/google/javascript/rhino/Node;
[MASTER] 13:00:08.322 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:00:49.421 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 308,0,0| Number of FF evals: 814
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 774,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 774,0,0| Number of FF evals: 1110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 10489,8983,0| Number of FF evals: 7837
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 382,0,0| Number of FF evals: 1005
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 448,0,0| Number of FF evals: 1356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 412,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 369,0,0| Number of FF evals: 769
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 3581,2408,0| Number of FF evals: 18443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 119,0,0| Number of FF evals: 1118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 455,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 3399,2893,167| Number of FF evals: 22039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 18153,14995,0| Number of FF evals: 17630
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 455,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 455,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 2617,33,0| Number of FF evals: 2400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 455,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 181,0,0| Number of FF evals: 491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 308,0,0| Number of FF evals: 462
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 1648,145,0| Number of FF evals: 2561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 2513,1484,0| Number of FF evals: 8759
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 455,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 216,0,0| Number of FF evals: 131
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 774,0,0| Number of FF evals: 1110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 2127,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 8988,5590,0| Number of FF evals: 9311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 13,0,0| Number of FF evals: 772
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 2127,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 124,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 15753,14374,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 412,0,0| Number of FF evals: 269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 308,0,0| Number of FF evals: 742
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 412,0,0| Number of FF evals: 1087
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 4677,4116,970| Number of FF evals: 22781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 5402,0,0| Number of FF evals: 1466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 319,0,0| Number of FF evals: 1745
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 218,0,0| Number of FF evals: 352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 860,0,0| Number of FF evals: 2325
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 308,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 108,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 14930,13471,231| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 308,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 99,0,0| Number of FF evals: 788
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2571,1303,134| Number of FF evals: 9383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 3242,2018,164| Number of FF evals: 5254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 95,0,0| Number of FF evals: 831
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 232,0,0| Number of FF evals: 523
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 788,267,0| Number of FF evals: 3723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 1488,0,0| Number of FF evals: 1144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 94,0,0| Number of FF evals: 424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 124,0,0| Number of FF evals: 495
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 216,0,0| Number of FF evals: 143
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 788,0,0| Number of FF evals: 545
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 51,0,0| Number of FF evals: 279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 41,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 2388,0,0| Number of FF evals: 1690
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 41,0,0| Number of FF evals: 575
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 25377,24831,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 567,0,0| Number of FF evals: 336
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2504,1922,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 17707,15300,101| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 95,0,0| Number of FF evals: 569
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 1032,0,0| Number of FF evals: 978
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 124,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2684,2320,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 471,179,63| Number of FF evals: 3786
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 41,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 4758,3382,212| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 308,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 6511,4294,0| Number of FF evals: 5747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 2067,1316,0| Number of FF evals: 5703
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 308,0,0| Number of FF evals: 729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 7417,6613,2290| Number of FF evals: 22781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 41,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 46104,36128,0| Number of FF evals: 11260
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 95,0,0| Number of FF evals: 427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 1033,0,0| Number of FF evals: 975
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 1033,0,0| Number of FF evals: 976
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 2807,1612,6| Number of FF evals: 13643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 101,0,0| Number of FF evals: 672
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 41,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 3332,3038,20| Number of FF evals: 19549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 41,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 774,0,0| Number of FF evals: 1110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 7688,3420,0| Number of FF evals: 8573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 26910,23752,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 41,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 41,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 252,0,0| Number of FF evals: 259
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 3105,0,0| Number of FF evals: 1007
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 41,0,0| Number of FF evals: 979
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 21856,20245,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 5,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 5,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 525,0,0| Number of FF evals: 258
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 5,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 124,0,0| Number of FF evals: 240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 3452,0,0| Number of FF evals: 1390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 4525,2262,950| Number of FF evals: 4218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 103,0,0| Number of FF evals: 224
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 217,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 75598,65622,0| Number of FF evals: 20245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 4139,0,0| Number of FF evals: 1149
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 1166,166,10| Number of FF evals: 2790
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 30790,30107,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 39333,33030,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 48,0,0| Number of FF evals: 231
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 4837,3327,0| Number of FF evals: 11770
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 83865,73889,50650| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 21824,11848,0| Number of FF evals: 5039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 232,0,0| Number of FF evals: 523
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 1794,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 83865,73889,50451| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 4730,3462,135| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 525,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 4334,3139,25| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1272,74,0| Number of FF evals: 2686
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 231,0,0| Number of FF evals: 936
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2548,1375,2| Number of FF evals: 12479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 707,0,0| Number of FF evals: 1460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 774,0,0| Number of FF evals: 1107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 14321,8907,0| Number of FF evals: 14611
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 124,0,0| Number of FF evals: 328
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 124,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 85,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 41,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 589,0,0| Number of FF evals: 1015
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 16385,13121,0| Number of FF evals: 14448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 4985,0,0| Number of FF evals: 2180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 13691,8845,0| Number of FF evals: 7075
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 1962,0,0| Number of FF evals: 682
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 163,0,0| Number of FF evals: 258
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 41,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2271,1082,11| Number of FF evals: 9700
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 774,0,0| Number of FF evals: 1110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 291,0,0| Number of FF evals: 1315
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2962,1694,19| Number of FF evals: 14426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 308,0,0| Number of FF evals: 177
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: root-Branch: 41,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 1665,1029,24| Number of FF evals: 7556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 3,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 774,0,0| Number of FF evals: 1110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 119,0,0| Number of FF evals: 1027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 6631,6068,2303| Number of FF evals: 22882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 78470,68494,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 160,0,0| Number of FF evals: 1732
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 308,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 319,0,0| Number of FF evals: 1745
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 75598,65622,0| Number of FF evals: 20269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 3842,0,0| Number of FF evals: 1500
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 49,0,0| Number of FF evals: 289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 4394,3817,205| Number of FF evals: 22883
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 83865,74075,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 83865,74075,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 646,0,0| Number of FF evals: 318
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 105,0,0| Number of FF evals: 574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 41,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 525,0,0| Number of FF evals: 281
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 525,0,0| Number of FF evals: 281
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1836,0,0| Number of FF evals: 858
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 5927,3455,0| Number of FF evals: 4893
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 4815,3547,136| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - true: 472,0,0| Number of FF evals: 683
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 103,0,0| Number of FF evals: 256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 308,0,0| Number of FF evals: 667
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 4682,534,0| Number of FF evals: 2774
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 1048,0,0| Number of FF evals: 554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 41,0,0| Number of FF evals: 56
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 2314,214,0| Number of FF evals: 2747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 14395,12295,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 525,0,0| Number of FF evals: 259
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 5402,0,0| Number of FF evals: 2031
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 10899,5019,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 4185,1749,4| Number of FF evals: 3400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 6959,5733,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 75598,65622,0| Number of FF evals: 20269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 308,0,0| Number of FF evals: 719
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 75598,65622,0| Number of FF evals: 20269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 4673,0,0| Number of FF evals: 1304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 99,0,0| Number of FF evals: 257
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 41,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 78470,68680,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 909,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 2127,0,0| Number of FF evals: 1387
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 308,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 83865,73889,50707| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 75598,65808,0| Number of FF evals: 20269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 163,0,0| Number of FF evals: 258
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 412,0,0| Number of FF evals: 336
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 16733,11505,0| Number of FF evals: 12422
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 412,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 25125,19227,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 41,0,0| Number of FF evals: 637
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 1962,0,0| Number of FF evals: 1641
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 163,0,0| Number of FF evals: 258
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 4139,0,0| Number of FF evals: 1635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 136,0,0| Number of FF evals: 686
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 638,0,0| Number of FF evals: 2058
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 6416,3625,0| Number of FF evals: 14807
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 5402,0,0| Number of FF evals: 1564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 2269,1001,18| Number of FF evals: 9974
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 2127,0,0| Number of FF evals: 834
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 369,0,0| Number of FF evals: 775
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 412,0,0| Number of FF evals: 854
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 46104,36314,0| Number of FF evals: 11260
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 279,0,0| Number of FF evals: 721
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 412,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 14697,13267,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 1048,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 5627,0,0| Number of FF evals: 1587
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 3370,920,0| Number of FF evals: 3378
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 3452,0,0| Number of FF evals: 1022
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 5673,3093,0| Number of FF evals: 6313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 3452,0,0| Number of FF evals: 1022
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 2947,1821,0| Number of FF evals: 8596
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 774,0,0| Number of FF evals: 1110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 412,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 216,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 2332,0,0| Number of FF evals: 1694
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 2601,0,0| Number of FF evals: 958
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 774,0,0| Number of FF evals: 1108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 4350,3089,21| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 41,0,0| Number of FF evals: 545
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 2134,939,5| Number of FF evals: 9041
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 774,0,0| Number of FF evals: 1028
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 146,0,0| Number of FF evals: 673
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 273,0,0| Number of FF evals: 793
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 3142,0,0| Number of FF evals: 1186
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 924,0,0| Number of FF evals: 990
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 669: 41,0,0| Number of FF evals: 82
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 128,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1556,319,0| Number of FF evals: 3187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 8791,6856,0| Number of FF evals: 12244
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 6,0,0| Number of FF evals: 190
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 61,0,0| Number of FF evals: 556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 83865,74075,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 774,0,0| Number of FF evals: 571
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 120,0,0| Number of FF evals: 282
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 7712,6644,0| Number of FF evals: 22886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 29583,24931,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 3281,1759,0| Number of FF evals: 6024
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 1189,510,0| Number of FF evals: 4360
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 1,0,0| Number of FF evals: 435
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 41,0,0| Number of FF evals: 82
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 7712,6644,0| Number of FF evals: 22886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 41,0,0| Number of FF evals: 82
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 525,0,0| Number of FF evals: 243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 83865,74075,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3674,3342,165| Number of FF evals: 22781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 146,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 412,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 20,0,0| Number of FF evals: 157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 3010,787,0| Number of FF evals: 3375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 691,0,0| Number of FF evals: 1358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 41,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 2601,0,0| Number of FF evals: 813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 214,0,0| Number of FF evals: 769
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 160,0,0| Number of FF evals: 1732
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 136,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 308,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 146,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 124,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 539,0,0| Number of FF evals: 1756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 124,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 41,0,0| Number of FF evals: 56
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 124,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 7678,2134,0| Number of FF evals: 3371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 389,0,0| Number of FF evals: 455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 41,0,0| Number of FF evals: 56
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 124,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 774,0,0| Number of FF evals: 439
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 124,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 774,0,0| Number of FF evals: 1093
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 124,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 41,0,0| Number of FF evals: 56
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 877,0,0| Number of FF evals: 444
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 308,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 1723,1471,0| Number of FF evals: 11924
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 2840,2155,0| Number of FF evals: 9187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 308,0,0| Number of FF evals: 628
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 293,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 5402,0,0| Number of FF evals: 1466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 293,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 293,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 30077,26980,0| Number of FF evals: 20660
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 293,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 3679,3200,0| Number of FF evals: 6428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 4382,3121,36| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 61,0,0| Number of FF evals: 587
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 646,0,0| Number of FF evals: 739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 4345,3150,181| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 8873,7926,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 27,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 41,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 1048,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 16457,15127,29| Number of FF evals: 22688
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 1637,0,0| Number of FF evals: 594
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 4888,3141,0| Number of FF evals: 7469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 1058,509,0| Number of FF evals: 3306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 10662,4793,0| Number of FF evals: 8046
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 41,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 4493,0,0| Number of FF evals: 1623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 41,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 308,0,0| Number of FF evals: 174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 774,0,0| Number of FF evals: 1107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 41,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 1684,0,0| Number of FF evals: 812
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 41,0,0| Number of FF evals: 56
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1653,0,0| Number of FF evals: 968
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 308,0,0| Number of FF evals: 324
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 124,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 633,106,0| Number of FF evals: 3326
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 1326,137,1| Number of FF evals: 3295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1167,88,0| Number of FF evals: 2673
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 75598,65622,0| Number of FF evals: 20245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 1637,0,0| Number of FF evals: 810
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 216,0,0| Number of FF evals: 158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 308,0,0| Number of FF evals: 168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 5753,5030,0| Number of FF evals: 8431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 13,0,0| Number of FF evals: 1154
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 1794,0,0| Number of FF evals: 640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 905,0,0| Number of FF evals: 1745
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 15502,14038,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 1794,0,0| Number of FF evals: 640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 149,0,0| Number of FF evals: 1115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 180,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 23,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 6126,5383,0| Number of FF evals: 18174
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 774,0,0| Number of FF evals: 1094
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 286,0,0| Number of FF evals: 919
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 41,0,0| Number of FF evals: 82
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 308,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 403,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 41,0,0| Number of FF evals: 45
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 3452,0,0| Number of FF evals: 1008
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 3355,0,0| Number of FF evals: 2107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 3086,1734,0| Number of FF evals: 4703
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 774,0,0| Number of FF evals: 348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 41,0,0| Number of FF evals: 1316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 127,0,0| Number of FF evals: 602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 1370,0,0| Number of FF evals: 2112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 17563,15152,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 308,0,0| Number of FF evals: 381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 41,0,0| Number of FF evals: 786
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 20842,18513,10292| Number of FF evals: 22067
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 11476,5088,0| Number of FF evals: 9720
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 1794,0,0| Number of FF evals: 969
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 160,0,0| Number of FF evals: 279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 94,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1437,260,0| Number of FF evals: 3084
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 112,0,0| Number of FF evals: 319
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 17568,14938,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 2937,0,0| Number of FF evals: 1282
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 4276,1587,0| Number of FF evals: 5730
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 2289,0,0| Number of FF evals: 1039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 412,0,0| Number of FF evals: 336
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 83865,73889,50369| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 18,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 41,0,0| Number of FF evals: 618
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 1655,0,0| Number of FF evals: 1893
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 3452,0,0| Number of FF evals: 1096
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 15093,13601,361| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 231,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 12,0,0| Number of FF evals: 356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 2490,0,0| Number of FF evals: 925
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 4664,4070,966| Number of FF evals: 22610
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 15679,11808,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 278,0,0| Number of FF evals: 646
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 4664,4070,959| Number of FF evals: 22610
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 2142,265,0| Number of FF evals: 2869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 13,0,0| Number of FF evals: 776
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 4477,2148,918| Number of FF evals: 4144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 774,0,0| Number of FF evals: 1027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 4493,0,0| Number of FF evals: 1266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 525,0,0| Number of FF evals: 375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 2314,214,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 774,0,0| Number of FF evals: 964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 1637,0,0| Number of FF evals: 906
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 2314,214,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 1,0,0| Number of FF evals: 378
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 2314,214,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 2501,1992,0| Number of FF evals: 6999
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 41,0,0| Number of FF evals: 45
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 774,0,0| Number of FF evals: 602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 2314,214,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 24165,19987,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 2314,214,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 2314,214,0| Number of FF evals: 2679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 216,0,0| Number of FF evals: 157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 141,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 412,0,0| Number of FF evals: 240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 909,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 6326,5900,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 6326,5900,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 6,0,0| Number of FF evals: 692
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 13,0,0| Number of FF evals: 773
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 2127,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 16999,15411,40| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 11,0,0| Number of FF evals: 1856
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 41,0,0| Number of FF evals: 168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 1655,0,0| Number of FF evals: 1949
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 2303,214,0| Number of FF evals: 2747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 2142,0,0| Number of FF evals: 2275
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 774,0,0| Number of FF evals: 328
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3098,2230,0| Number of FF evals: 6785
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 774,0,0| Number of FF evals: 1109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 646,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 3399,2893,167| Number of FF evals: 22039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 646,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 41,0,0| Number of FF evals: 510
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 1794,0,0| Number of FF evals: 656
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2066,0,0| Number of FF evals: 869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 2962,1767,4| Number of FF evals: 14356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 3554,3048,167| Number of FF evals: 22781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 22953,21580,0| Number of FF evals: 21373
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 7863,0,0| Number of FF evals: 1939
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 646,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 61,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 216,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 337,0,0| Number of FF evals: 738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 124,0,0| Number of FF evals: 622
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 774,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 394,0,0| Number of FF evals: 888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 7890,6811,0| Number of FF evals: 22886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 1052,0,0| Number of FF evals: 948
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 442,0,0| Number of FF evals: 1076
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 33546,31233,32| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 4921,3842,0| Number of FF evals: 13399
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 1684,0,0| Number of FF evals: 793
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 1819,0,0| Number of FF evals: 1843
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 1684,0,0| Number of FF evals: 793
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - false: 12,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 308,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 1616,0,0| Number of FF evals: 1638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 1655,0,0| Number of FF evals: 2018
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 633,106,0| Number of FF evals: 3326
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 646,0,0| Number of FF evals: 457
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 14986,13542,276| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 2143,0,0| Number of FF evals: 860
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 32977,27932,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 455,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 1794,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 412,0,0| Number of FF evals: 224
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 291,0,0| Number of FF evals: 1366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2873,2642,53| Number of FF evals: 22571
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 1987,919,0| Number of FF evals: 4868
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 811,0,0| Number of FF evals: 1751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 15795,14474,0| Number of FF evals: 14230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 5010,1629,0| Number of FF evals: 3763
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 156,0,0| Number of FF evals: 237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2107: 41,0,0| Number of FF evals: 56
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 4625,3357,160| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 4664,4070,961| Number of FF evals: 22610
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 29460,28911,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 41,0,0| Number of FF evals: 1053
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 17617,15236,37| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2106: 41,0,0| Number of FF evals: 56
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 41,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 1962,0,0| Number of FF evals: 676
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 3674,3168,323| Number of FF evals: 22781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 22954,21425,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 1811,0,0| Number of FF evals: 1085
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 41,0,0| Number of FF evals: 925
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 2937,0,0| Number of FF evals: 876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 1048,0,0| Number of FF evals: 442
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 574,55,0| Number of FF evals: 2573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 90,0,0| Number of FF evals: 405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 2289,0,0| Number of FF evals: 747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 2289,0,0| Number of FF evals: 747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 15037,13336,0| Number of FF evals: 20269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 4685,3609,0| Number of FF evals: 12612
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 2289,0,0| Number of FF evals: 747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 18,0,0| Number of FF evals: 215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 774,0,0| Number of FF evals: 1095
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 442,0,0| Number of FF evals: 1617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 1686,519,0| Number of FF evals: 5557
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 4673,0,0| Number of FF evals: 1515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 412,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 25503,23280,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1486,291,3| Number of FF evals: 4394
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 412,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 5225,4632,1102| Number of FF evals: 21671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 412,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 412,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 412,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 412,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 8925,6702,0| Number of FF evals: 7722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 412,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 2139,944,11| Number of FF evals: 8948
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 1374,781,9| Number of FF evals: 6446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 412,0,0| Number of FF evals: 235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 774,0,0| Number of FF evals: 1078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 800,0,0| Number of FF evals: 1429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 37,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 164,0,0| Number of FF evals: 672
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 348,0,0| Number of FF evals: 771
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 216,0,0| Number of FF evals: 136
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 4751,3483,152| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 646,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 8365,6939,0| Number of FF evals: 20243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 30,0,0| Number of FF evals: 149
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 27688,24536,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 774,0,0| Number of FF evals: 1111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 19194,13302,0| Number of FF evals: 12586
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 124,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1706: 41,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 1488,0,0| Number of FF evals: 573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 1033,0,0| Number of FF evals: 846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1703: 41,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 1033,0,0| Number of FF evals: 846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 12573,10824,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1709: 41,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1708: 41,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1707: 41,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1713: 41,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1712: 41,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 12573,10824,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 15246,13386,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 75598,65808,0| Number of FF evals: 20245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 15439,13455,109| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 41,0,0| Number of FF evals: 988
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 525,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 1794,0,0| Number of FF evals: 630
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 153,0,0| Number of FF evals: 285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 2143,0,0| Number of FF evals: 769
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 1048,0,0| Number of FF evals: 736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 2605,0,0| Number of FF evals: 1237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 372,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 31372,27944,428| Number of FF evals: 22879
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 41,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 1488,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 216,0,0| Number of FF evals: 288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 41,0,0| Number of FF evals: 228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 12635,10983,2485| Number of FF evals: 22882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 21824,11848,0| Number of FF evals: 5039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 774,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 308,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 12635,10983,2467| Number of FF evals: 22882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 21711,19057,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 4107,1253,0| Number of FF evals: 3152
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 124,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 5625,3361,0| Number of FF evals: 6345
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1058,509,0| Number of FF evals: 3312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 308,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 216,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 308,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 8985,8308,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 18268,16970,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 774,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 216,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 2156,1153,397| Number of FF evals: 5040
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 216,0,0| Number of FF evals: 132
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 1962,0,0| Number of FF evals: 756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 5621,3523,0| Number of FF evals: 4782
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 2604,0,0| Number of FF evals: 1081
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 3355,2928,91| Number of FF evals: 22781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 525,0,0| Number of FF evals: 253
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 1088,80,0| Number of FF evals: 2579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 455,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 15578,13849,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 41,0,0| Number of FF evals: 297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 525,0,0| Number of FF evals: 780
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 17352,13183,0| Number of FF evals: 9649
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 646,0,0| Number of FF evals: 598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 27303,26041,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 1048,0,0| Number of FF evals: 1386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 1048,0,0| Number of FF evals: 448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 763,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 293,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 3621,0,0| Number of FF evals: 1061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 1637,0,0| Number of FF evals: 592
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 1048,0,0| Number of FF evals: 448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 10222,9097,0| Number of FF evals: 9205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 1107,0,0| Number of FF evals: 1591
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 525,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 29313,28425,6| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 3105,0,0| Number of FF evals: 909
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 282,0,0| Number of FF evals: 756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 12635,10983,2468| Number of FF evals: 22882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 11578,3346,0| Number of FF evals: 8690
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 774,0,0| Number of FF evals: 1100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 2841,1652,7| Number of FF evals: 14400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 774,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 1048,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 22528,19909,0| Number of FF evals: 22424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 83865,73889,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 1048,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - true: 11,0,0| Number of FF evals: 1856
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 412,0,0| Number of FF evals: 784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 41,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 774,0,0| Number of FF evals: 1066
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 41,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 175,0,0| Number of FF evals: 800
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 41,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 41,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 41,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 14683,7745,0| Number of FF evals: 11639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 3621,0,0| Number of FF evals: 1114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 2513,1252,133| Number of FF evals: 9052
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 774,0,0| Number of FF evals: 1101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 83865,74075,0| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 2132,959,1| Number of FF evals: 9694
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 774,0,0| Number of FF evals: 1110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 7863,0,0| Number of FF evals: 2060
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 22528,19909,0| Number of FF evals: 22424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 73,0,0| Number of FF evals: 481
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 286,0,0| Number of FF evals: 552
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 83865,73889,50566| Number of FF evals: 22878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 3958,3431,20| Number of FF evals: 22610
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 23,0,0| Number of FF evals: 366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 124,0,0| Number of FF evals: 179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 57,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 41,0,0| Number of FF evals: 907
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 774,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 308,0,0| Number of FF evals: 172
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 308,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 1488,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 41,0,0| Number of FF evals: 56
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 79,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 526,0,0| Number of FF evals: 508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 3137,0,0| Number of FF evals: 1068
* Search finished after 605s and 526 generations, 232785 statements, best individual has fitness: 2615.0
* Minimizing test suite
[MASTER] 13:11:19.476 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 795
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 621
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 89%
* Total number of goals: 530
* Number of covered goals: 473
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 54%
* Total number of goals: 4536
* Number of covered goals: 2438
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 580
* Generated 843 tests with total length 11376
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:12:35.530 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6830166666666667% of time used, but only 33/843 tests minimized), falling back to using all assertions
[MASTER] 13:12:54.567 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 13:13:07.910 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 13:13:18.494 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_60_1628255598266/com/google/javascript/rhino/Node_60_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_60_1628255598266/com/google/javascript/rhino/Node_60_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:18.494 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:18.494 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:18.498 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 403
[MASTER] 13:13:18.500 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_60_1628255598266/com/google/javascript/rhino/Node_60_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_60_tmp__ESTest extends Node_60_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2827));
22:       assertNotNull(node0);
23:       assertFalse(node0.isCase());
24:       assertFalse(node0.isSwitch());
25:       assertFalse(node0.isThrow());
26:       assertFalse(node0.isEmpty());
27:       assertFalse(node0.isDelProp());
28:       assertFalse(node0.isBreak());
29:       assertFalse(node0.isIf());
30:       assertFalse(node0.isTrue());
31:       assertFalse(node0.isNE());
32:       assertFalse(node0.isInc());
33:       assertFalse(node0.isIn());
34:       assertFalse(node0.isObjectLit());
35:       assertFalse(node0.isAnd());
36:       assertFalse(node0.isVoid());
37:       assertFalse(node0.isExprResult());
38:       assertFalse(node0.isComma());
39:       assertEquals(Integer.MAX_VALUE, node0.getType());
40:       assertFalse(node0.isFunction());
41:       assertFalse(node0.isFalse());
42:       assertFalse(node0.isCast());
43:       assertFalse(node0.isDebugger());
44:       assertEquals((-1), node0.getSourcePosition());
45:       assertFalse(node0.isGetProp());
46:       assertFalse(node0.isString());
47:       assertFalse(node0.isNot());
48:       assertFalse(node0.isContinue());
49:       assertFalse(node0.isWhile());
50:       assertEquals((-1), node0.getLineno());
51:       assertFalse(node0.isDo());
52:       assertFalse(node0.isAssignAdd());
53:       assertFalse(node0.isBlock());
54:       assertFalse(node0.isLabel());
55:       assertFalse(node0.isReturn());
56:       assertFalse(node0.hasChildren());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isDec());
59:       assertFalse(node0.isTypeOf());
60:       assertFalse(node0.hasMoreThanOneChild());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isVar());
63:       assertFalse(node0.isGetElem());
64:       assertFalse(node0.isName());
65:       assertFalse(node0.isNew());
66:       assertFalse(node0.isAdd());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isSetterDef());
69:       assertFalse(node0.isOr());
70:       assertFalse(node0.isCatch());
71:       assertFalse(node0.isDefaultCase());
72:       assertFalse(node0.isThis());
73:       assertFalse(node0.isInstanceOf());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isRegExp());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isArrayLit());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isTry());
83:       assertFalse(node0.isLabelName());
84:       assertFalse(node0.isParamList());
85:       assertEquals((-1), node0.getCharno());
86:       assertFalse(node0.isScript());
87:       assertFalse(node0.isGetterDef());
88:       assertFalse(node0.isNumber());
89:       assertEquals(48, Node.DIRECTIVES);
90:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
91:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(8, Node.FLAG_NO_THROWS);
95:       assertEquals(39, Node.EMPTY_BLOCK);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(53, Node.INPUT_ID);
98:       assertEquals(52, Node.LENGTH);
99:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
100:       assertEquals(36, Node.QUOTED_PROP);
101:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(49, Node.DIRECT_EVAL);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
106:       assertEquals(4095, Node.COLUMN_MASK);
107:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
108:       assertEquals(51, Node.STATIC_SOURCE_FILE);
109:       assertEquals(32, Node.INCRDECR_PROP);
110:       assertEquals(56, Node.CHANGE_TIME);
111:       assertEquals(47, Node.IS_DISPATCHER);
112:       assertEquals(12, Node.COLUMN_BITS);
113:       assertEquals(46, Node.IS_NAMESPACE);
114:       assertEquals(57, Node.LAST_PROP);
115:       assertEquals(1, Node.DECR_FLAG);
116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
117:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(43, Node.IS_CONSTANT_NAME);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(2, Node.POST_FLAG);
124:       assertEquals(40, Node.ORIGINALNAME_PROP);
125:       
126:       boolean boolean0 = node0.isParamList();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isCase());
129:       assertFalse(node0.isSwitch());
130:       assertFalse(node0.isThrow());
131:       assertFalse(node0.isEmpty());
132:       assertFalse(node0.isDelProp());
133:       assertFalse(node0.isBreak());
134:       assertFalse(node0.isIf());
135:       assertFalse(node0.isTrue());
136:       assertFalse(node0.isNE());
137:       assertFalse(node0.isInc());
138:       assertFalse(node0.isIn());
139:       assertFalse(node0.isObjectLit());
140:       assertFalse(node0.isAnd());
141:       assertFalse(node0.isVoid());
142:       assertFalse(node0.isExprResult());
143:       assertFalse(node0.isComma());
144:       assertEquals(Integer.MAX_VALUE, node0.getType());
145:       assertFalse(node0.isFunction());
146:       assertFalse(node0.isFalse());
147:       assertFalse(node0.isCast());
148:       assertFalse(node0.isDebugger());
149:       assertEquals((-1), node0.getSourcePosition());
150:       assertFalse(node0.isGetProp());
151:       assertFalse(node0.isString());
152:       assertFalse(node0.isNot());
153:       assertFalse(node0.isContinue());
154:       assertFalse(node0.isWhile());
155:       assertEquals((-1), node0.getLineno());
156:       assertFalse(node0.isDo());
157:       assertFalse(node0.isAssignAdd());
158:       assertFalse(node0.isBlock());
159:       assertFalse(node0.isLabel());
160:       assertFalse(node0.isReturn());
161:       assertFalse(node0.hasChildren());
162:       assertFalse(node0.isAssign());
163:       assertFalse(node0.isDec());
164:       assertFalse(node0.isTypeOf());
165:       assertFalse(node0.hasMoreThanOneChild());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.isVar());
168:       assertFalse(node0.isGetElem());
169:       assertFalse(node0.isName());
170:       assertFalse(node0.isNew());
171:       assertFalse(node0.isAdd());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isOr());
175:       assertFalse(node0.isCatch());
176:       assertFalse(node0.isDefaultCase());
177:       assertFalse(node0.isThis());
178:       assertFalse(node0.isInstanceOf());
179:       assertEquals(0, node0.getChildCount());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isWith());
182:       assertFalse(node0.isStringKey());
183:       assertFalse(node0.isArrayLit());
184:       assertFalse(node0.isFor());
185:       assertFalse(node0.isHook());
186:       assertFalse(node0.hasOneChild());
187:       assertFalse(node0.isTry());
188:       assertFalse(node0.isLabelName());
189:       assertFalse(node0.isParamList());
190:       assertEquals((-1), node0.getCharno());
191:       assertFalse(node0.isScript());
192:       assertFalse(node0.isGetterDef());
193:       assertFalse(node0.isNumber());
194:       assertEquals(48, Node.DIRECTIVES);
195:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
196:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(8, Node.FLAG_NO_THROWS);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
202:       assertEquals(53, Node.INPUT_ID);
203:       assertEquals(52, Node.LENGTH);
204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
205:       assertEquals(36, Node.QUOTED_PROP);
206:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(49, Node.DIRECT_EVAL);
209:       assertEquals(37, Node.OPT_ARG_NAME);
210:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
214:       assertEquals(32, Node.INCRDECR_PROP);
215:       assertEquals(56, Node.CHANGE_TIME);
216:       assertEquals(47, Node.IS_DISPATCHER);
217:       assertEquals(12, Node.COLUMN_BITS);
218:       assertEquals(46, Node.IS_NAMESPACE);
219:       assertEquals(57, Node.LAST_PROP);
220:       assertEquals(1, Node.DECR_FLAG);
221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
222:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(29, Node.JSDOC_INFO_PROP);
225:       assertEquals(43, Node.IS_CONSTANT_NAME);
226:       assertEquals(54, Node.SLASH_V);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(2, Node.POST_FLAG);
229:       assertEquals(40, Node.ORIGINALNAME_PROP);
230:       
231:       node0.setType(5044);
232:       assertFalse(node0.isCase());
233:       assertFalse(node0.isSwitch());
234:       assertFalse(node0.isThrow());
235:       assertFalse(node0.isEmpty());
236:       assertFalse(node0.isDelProp());
237:       assertFalse(node0.isBreak());
238:       assertFalse(node0.isIf());
239:       assertFalse(node0.isTrue());
240:       assertFalse(node0.isNE());
241:       assertFalse(node0.isInc());
242:       assertFalse(node0.isIn());
243:       assertFalse(node0.isObjectLit());
244:       assertFalse(node0.isAnd());
245:       assertFalse(node0.isVoid());
246:       assertFalse(node0.isExprResult());
247:       assertFalse(node0.isComma());
248:       assertFalse(node0.isFunction());
249:       assertFalse(node0.isFalse());
250:       assertFalse(node0.isCast());
251:       assertFalse(node0.isDebugger());
252:       assertEquals((-1), node0.getSourcePosition());
253:       assertFalse(node0.isGetProp());
254:       assertFalse(node0.isString());
255:       assertFalse(node0.isNot());
256:       assertFalse(node0.isContinue());
257:       assertFalse(node0.isWhile());
258:       assertEquals((-1), node0.getLineno());
259:       assertFalse(node0.isDo());
260:       assertFalse(node0.isAssignAdd());
261:       assertFalse(node0.isBlock());
262:       assertFalse(node0.isLabel());
263:       assertFalse(node0.isReturn());
264:       assertFalse(node0.hasChildren());
265:       assertFalse(node0.isAssign());
266:       assertFalse(node0.isDec());
267:       assertFalse(node0.isTypeOf());
268:       assertFalse(node0.hasMoreThanOneChild());
269:       assertFalse(node0.isCall());
270:       assertFalse(node0.isVar());
271:       assertFalse(node0.isGetElem());
272:       assertFalse(node0.isName());
273:       assertFalse(node0.isNew());
274:       assertFalse(node0.isAdd());
275:       assertFalse(node0.isNull());
276:       assertFalse(node0.isSetterDef());
277:       assertEquals(5044, node0.getType());
278:       assertFalse(node0.isOr());
279:       assertFalse(node0.isCatch());
280:       assertFalse(node0.isDefaultCase());
281:       assertFalse(node0.isThis());
282:       assertFalse(node0.isInstanceOf());
283:       assertEquals(0, node0.getChildCount());
284:       assertFalse(node0.isRegExp());
285:       assertFalse(node0.isWith());
286:       assertFalse(node0.isStringKey());
287:       assertFalse(node0.isArrayLit());
288:       assertFalse(node0.isFor());
289:       assertFalse(node0.isHook());
290:       assertFalse(node0.hasOneChild());
291:       assertFalse(node0.isTry());
292:       assertFalse(node0.isLabelName());
293:       assertFalse(node0.isParamList());
294:       assertEquals((-1), node0.getCharno());
295:       assertFalse(node0.isScript());
296:       assertFalse(node0.isGetterDef());
297:       assertFalse(node0.isNumber());
298:       assertEquals(48, Node.DIRECTIVES);
299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
300:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
301:       assertEquals(50, Node.FREE_CALL);
302:       assertEquals(55, Node.INFERRED_FUNCTION);
303:       assertEquals(8, Node.FLAG_NO_THROWS);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
306:       assertEquals(53, Node.INPUT_ID);
307:       assertEquals(52, Node.LENGTH);
308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
309:       assertEquals(36, Node.QUOTED_PROP);
310:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
311:       assertEquals(57, Node.REFLECTED_OBJECT);
312:       assertEquals(49, Node.DIRECT_EVAL);
313:       assertEquals(37, Node.OPT_ARG_NAME);
314:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
315:       assertEquals(4095, Node.COLUMN_MASK);
316:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
317:       assertEquals(51, Node.STATIC_SOURCE_FILE);
318:       assertEquals(32, Node.INCRDECR_PROP);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(47, Node.IS_DISPATCHER);
321:       assertEquals(12, Node.COLUMN_BITS);
322:       assertEquals(46, Node.IS_NAMESPACE);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(1, Node.DECR_FLAG);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(43, Node.IS_CONSTANT_NAME);
330:       assertEquals(54, Node.SLASH_V);
331:       assertEquals(30, Node.VAR_ARGS_NAME);
332:       assertEquals(2, Node.POST_FLAG);
333:       assertEquals(40, Node.ORIGINALNAME_PROP);
334:       
335:       Iterable<Node> iterable0 = node0.children();
336:       assertNotNull(iterable0);
337:       assertFalse(node0.isCase());
338:       assertFalse(node0.isSwitch());
339:       assertFalse(node0.isThrow());
340:       assertFalse(node0.isEmpty());
341:       assertFalse(node0.isDelProp());
342:       assertFalse(node0.isBreak());
343:       assertFalse(node0.isIf());
344:       assertFalse(node0.isTrue());
345:       assertFalse(node0.isNE());
346:       assertFalse(node0.isInc());
347:       assertFalse(node0.isIn());
348:       assertFalse(node0.isObjectLit());
349:       assertFalse(node0.isAnd());
350:       assertFalse(node0.isVoid());
351:       assertFalse(node0.isExprResult());
352:       assertFalse(node0.isComma());
353:       assertFalse(node0.isFunction());
354:       assertFalse(node0.isFalse());
355:       assertFalse(node0.isCast());
356:       assertFalse(node0.isDebugger());
357:       assertEquals((-1), node0.getSourcePosition());
358:       assertFalse(node0.isGetProp());
359:       assertFalse(node0.isString());
360:       assertFalse(node0.isNot());
361:       assertFalse(node0.isContinue());
362:       assertFalse(node0.isWhile());
363:       assertEquals((-1), node0.getLineno());
364:       assertFalse(node0.isDo());
365:       assertFalse(node0.isAssignAdd());
366:       assertFalse(node0.isBlock());
367:       assertFalse(node0.isLabel());
368:       assertFalse(node0.isReturn());
369:       assertFalse(node0.hasChildren());
370:       assertFalse(node0.isAssign());
371:       assertFalse(node0.isDec());
372:       assertFalse(node0.isTypeOf());
373:       assertFalse(node0.hasMoreThanOneChild());
374:       assertFalse(node0.isCall());
375:       assertFalse(node0.isVar());
376:       assertFalse(node0.isGetElem());
377:       assertFalse(node0.isName());
378:       assertFalse(node0.isNew());
379:       assertFalse(node0.isAdd());
380:       assertFalse(node0.isNull());
381:       assertFalse(node0.isSetterDef());
382:       assertEquals(5044, node0.getType());
383:       assertFalse(node0.isOr());
384:       assertFalse(node0.isCatch());
385:       assertFalse(node0.isDefaultCase());
386:       assertFalse(node0.isThis());
387:       assertFalse(node0.isInstanceOf());
388:       assertEquals(0, node0.getChildCount());
389:       assertFalse(node0.isRegExp());
390:       assertFalse(node0.isWith());
391:       assertFalse(node0.isStringKey());
392:       assertFalse(node0.isArrayLit());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isHook());
395:       assertFalse(node0.hasOneChild());
396:       assertFalse(node0.isTry());
397:       assertFalse(node0.isLabelName());
398:       assertFalse(node0.isParamList());
399:       assertEquals((-1), node0.getCharno());
400:       assertFalse(node0.isScript());
401:       assertFalse(node0.isGetterDef());
402:       assertFalse(node0.isNumber());
403:       assertFalse(iterable0.contains(node0));
404:       assertEquals(48, Node.DIRECTIVES);
405:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
406:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
407:       assertEquals(50, Node.FREE_CALL);
408:       assertEquals(55, Node.INFERRED_FUNCTION);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(39, Node.EMPTY_BLOCK);
411:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
412:       assertEquals(53, Node.INPUT_ID);
413:       assertEquals(52, Node.LENGTH);
414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
415:       assertEquals(36, Node.QUOTED_PROP);
416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(49, Node.DIRECT_EVAL);
419:       assertEquals(37, Node.OPT_ARG_NAME);
420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
421:       assertEquals(4095, Node.COLUMN_MASK);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(51, Node.STATIC_SOURCE_FILE);
424:       assertEquals(32, Node.INCRDECR_PROP);
425:       assertEquals(56, Node.CHANGE_TIME);
426:       assertEquals(47, Node.IS_DISPATCHER);
427:       assertEquals(12, Node.COLUMN_BITS);
428:       assertEquals(46, Node.IS_NAMESPACE);
429:       assertEquals(57, Node.LAST_PROP);
430:       assertEquals(1, Node.DECR_FLAG);
431:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
432:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(29, Node.JSDOC_INFO_PROP);
435:       assertEquals(43, Node.IS_CONSTANT_NAME);
436:       assertEquals(54, Node.SLASH_V);
437:       assertEquals(30, Node.VAR_ARGS_NAME);
438:       assertEquals(2, Node.POST_FLAG);
439:       assertEquals(40, Node.ORIGINALNAME_PROP);
440:       
441:       Node node1 = node0.getAncestor(0);
442:       assertSame(node0, node1);
443:       assertSame(node1, node0);
444:       assertNotNull(node1);
445:       assertFalse(node0.isCase());
446:       assertFalse(node0.isSwitch());
447:       assertFalse(node0.isThrow());
448:       assertFalse(node0.isEmpty());
449:       assertFalse(node0.isDelProp());
450:       assertFalse(node0.isBreak());
451:       assertFalse(node0.isIf());
452:       assertFalse(node0.isTrue());
453:       assertFalse(node0.isNE());
454:       assertFalse(node0.isInc());
455:       assertFalse(node0.isIn());
456:       assertFalse(node0.isObjectLit());
457:       assertFalse(node0.isAnd());
458:       assertFalse(node0.isVoid());
459:       assertFalse(node0.isExprResult());
460:       assertFalse(node0.isComma());
461:       assertFalse(node0.isFunction());
462:       assertFalse(node0.isFalse());
463:       assertFalse(node0.isCast());
464:       assertFalse(node0.isDebugger());
465:       assertEquals((-1), node0.getSourcePosition());
466:       assertFalse(node0.isGetProp());
467:       assertFalse(node0.isString());
468:       assertFalse(node0.isNot());
469:       assertFalse(node0.isContinue());
470:       assertFalse(node0.isWhile());
471:       assertEquals((-1), node0.getLineno());
472:       assertFalse(node0.isDo());
473:       assertFalse(node0.isAssignAdd());
474:       assertFalse(node0.isBlock());
475:       assertFalse(node0.isLabel());
476:       assertFalse(node0.isReturn());
477:       assertFalse(node0.hasChildren());
478:       assertFalse(node0.isAssign());
479:       assertFalse(node0.isDec());
480:       assertFalse(node0.isTypeOf());
481:       assertFalse(node0.hasMoreThanOneChild());
482:       assertFalse(node0.isCall());
483:       assertFalse(node0.isVar());
484:       assertFalse(node0.isGetElem());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isNew());
487:       assertFalse(node0.isAdd());
488:       assertFalse(node0.isNull());
489:       assertFalse(node0.isSetterDef());
490:       assertEquals(5044, node0.getType());
491:       assertFalse(node0.isOr());
492:       assertFalse(node0.isCatch());
493:       assertFalse(node0.isDefaultCase());
494:       assertFalse(node0.isThis());
495:       assertFalse(node0.isInstanceOf());
496:       assertEquals(0, node0.getChildCount());
497:       assertFalse(node0.isRegExp());
498:       assertFalse(node0.isWith());
499:       assertFalse(node0.isStringKey());
500:       assertFalse(node0.isArrayLit());
501:       assertFalse(node0.isFor());
502:       assertFalse(node0.isHook());
503:       assertFalse(node0.hasOneChild());
504:       assertFalse(node0.isTry());
505:       assertFalse(node0.isLabelName());
506:       assertFalse(node0.isParamList());
507:       assertEquals((-1), node0.getCharno());
508:       assertFalse(node0.isScript());
509:       assertFalse(node0.isGetterDef());
510:       assertFalse(node0.isNumber());
511:       assertFalse(node1.isOr());
512:       assertFalse(node1.isAssignAdd());
513:       assertFalse(node1.isNumber());
514:       assertEquals((-1), node1.getSourcePosition());
515:       assertFalse(node1.isDec());
516:       assertFalse(node1.isTypeOf());
517:       assertFalse(node1.isReturn());
518:       assertFalse(node1.isLabel());
519:       assertFalse(node1.hasChildren());
520:       assertFalse(node1.isGetElem());
521:       assertFalse(node1.isLabelName());
522:       assertFalse(node1.isAssign());
523:       assertFalse(node1.hasMoreThanOneChild());
524:       assertFalse(node1.isContinue());
525:       assertFalse(node1.isCast());
526:       assertEquals((-1), node1.getLineno());
527:       assertFalse(node1.isBlock());
528:       assertFalse(node1.isObjectLit());
529:       assertFalse(node1.isNot());
530:       assertFalse(node1.isWhile());
531:       assertFalse(node1.hasOneChild());
532:       assertFalse(node1.isScript());
533:       assertFalse(node1.isParamList());
534:       assertFalse(node1.isNull());
535:       assertEquals(0, node1.getChildCount());
536:       assertFalse(node1.isComma());
537:       assertFalse(node1.isStringKey());
538:       assertFalse(node1.isName());
539:       assertFalse(node1.isExprResult());
540:       assertFalse(node1.isCall());
541:       assertFalse(node1.isBreak());
542:       assertFalse(node1.isNew());
543:       assertFalse(node1.isVoid());
544:       assertFalse(node1.isAdd());
545:       assertFalse(node1.isVar());
546:       assertFalse(node1.isTrue());
547:       assertFalse(node1.isEmpty());
548:       assertFalse(node1.isDo());
549:       assertFalse(node1.isDefaultCase());
550:       assertFalse(node1.isIn());
551:       assertFalse(node1.isGetterDef());
552:       assertFalse(node1.isNE());
553:       assertFalse(node1.isIf());
554:       assertFalse(node1.isDelProp());
555:       assertFalse(node1.isArrayLit());
556:       assertFalse(node1.isTry());
557:       assertFalse(node1.isSwitch());
558:       assertFalse(node1.isHook());
559:       assertFalse(node1.isRegExp());
560:       assertFalse(node1.isDebugger());
561:       assertEquals((-1), node1.getCharno());
562:       assertFalse(node1.isCase());
563:       assertFalse(node1.isFor());
564:       assertFalse(node1.isString());
565:       assertFalse(node1.isGetProp());
566:       assertFalse(node1.isThis());
567:       assertFalse(node1.isFalse());
568:       assertFalse(node1.isCatch());
569:       assertFalse(node1.isWith());
570:       assertFalse(node1.isAnd());
571:       assertFalse(node1.isInstanceOf());
572:       assertFalse(node1.isFunction());
573:       assertFalse(node1.isThrow());
574:       assertEquals(5044, node1.getType());
575:       assertFalse(node1.isSetterDef());
576:       assertFalse(node1.isInc());
577:       assertEquals(48, Node.DIRECTIVES);
578:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
579:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
580:       assertEquals(50, Node.FREE_CALL);
581:       assertEquals(55, Node.INFERRED_FUNCTION);
582:       assertEquals(8, Node.FLAG_NO_THROWS);
583:       assertEquals(39, Node.EMPTY_BLOCK);
584:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
585:       assertEquals(53, Node.INPUT_ID);
586:       assertEquals(52, Node.LENGTH);
587:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
588:       assertEquals(36, Node.QUOTED_PROP);
589:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(49, Node.DIRECT_EVAL);
592:       assertEquals(37, Node.OPT_ARG_NAME);
593:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
594:       assertEquals(4095, Node.COLUMN_MASK);
595:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
596:       assertEquals(51, Node.STATIC_SOURCE_FILE);
597:       assertEquals(32, Node.INCRDECR_PROP);
598:       assertEquals(56, Node.CHANGE_TIME);
599:       assertEquals(47, Node.IS_DISPATCHER);
600:       assertEquals(12, Node.COLUMN_BITS);
601:       assertEquals(46, Node.IS_NAMESPACE);
602:       assertEquals(57, Node.LAST_PROP);
603:       assertEquals(1, Node.DECR_FLAG);
604:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
605:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
606:       assertEquals(15, Node.NO_SIDE_EFFECTS);
607:       assertEquals(29, Node.JSDOC_INFO_PROP);
608:       assertEquals(43, Node.IS_CONSTANT_NAME);
609:       assertEquals(54, Node.SLASH_V);
610:       assertEquals(30, Node.VAR_ARGS_NAME);
611:       assertEquals(2, Node.POST_FLAG);
612:       assertEquals(40, Node.ORIGINALNAME_PROP);
613:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
614:       assertEquals(39, Node.EMPTY_BLOCK);
615:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
616:       assertEquals(50, Node.FREE_CALL);
617:       assertEquals(8, Node.FLAG_NO_THROWS);
618:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
619:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
620:       assertEquals(57, Node.LAST_PROP);
621:       assertEquals(43, Node.IS_CONSTANT_NAME);
622:       assertEquals(30, Node.VAR_ARGS_NAME);
623:       assertEquals(46, Node.IS_NAMESPACE);
624:       assertEquals(51, Node.STATIC_SOURCE_FILE);
625:       assertEquals(40, Node.ORIGINALNAME_PROP);
626:       assertEquals(54, Node.SLASH_V);
627:       assertEquals(47, Node.IS_DISPATCHER);
628:       assertEquals(56, Node.CHANGE_TIME);
629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
630:       assertEquals(29, Node.JSDOC_INFO_PROP);
631:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
632:       assertEquals(2, Node.POST_FLAG);
633:       assertEquals(32, Node.INCRDECR_PROP);
634:       assertEquals(12, Node.COLUMN_BITS);
635:       assertEquals(53, Node.INPUT_ID);
636:       assertEquals(1, Node.DECR_FLAG);
637:       assertEquals(36, Node.QUOTED_PROP);
638:       assertEquals(15, Node.NO_SIDE_EFFECTS);
639:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
640:       assertEquals(55, Node.INFERRED_FUNCTION);
641:       assertEquals(4095, Node.COLUMN_MASK);
642:       assertEquals(52, Node.LENGTH);
643:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
644:       assertEquals(57, Node.REFLECTED_OBJECT);
645:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
646:       assertEquals(48, Node.DIRECTIVES);
647:       assertEquals(37, Node.OPT_ARG_NAME);
648:       assertEquals(49, Node.DIRECT_EVAL);
649:       
650:       boolean boolean1 = node1.isQualifiedName();
651:       assertSame(node0, node1);
652:       assertSame(node1, node0);
653:       assertTrue(boolean1 == boolean0);
654:       assertFalse(boolean1);
655:       assertFalse(node0.isCase());
656:       assertFalse(node0.isSwitch());
657:       assertFalse(node0.isThrow());
658:       assertFalse(node0.isEmpty());
659:       assertFalse(node0.isDelProp());
660:       assertFalse(node0.isBreak());
661:       assertFalse(node0.isIf());
662:       assertFalse(node0.isTrue());
663:       assertFalse(node0.isNE());
664:       assertFalse(node0.isInc());
665:       assertFalse(node0.isIn());
666:       assertFalse(node0.isObjectLit());
667:       assertFalse(node0.isAnd());
668:       assertFalse(node0.isVoid());
669:       assertFalse(node0.isExprResult());
670:       assertFalse(node0.isComma());
671:       assertFalse(node0.isFunction());
672:       assertFalse(node0.isFalse());
673:       assertFalse(node0.isCast());
674:       assertFalse(node0.isDebugger());
675:       assertEquals((-1), node0.getSourcePosition());
676:       assertFalse(node0.isGetProp());
677:       assertFalse(node0.isString());
678:       assertFalse(node0.isNot());
679:       assertFalse(node0.isContinue());
680:       assertFalse(node0.isWhile());
681:       assertEquals((-1), node0.getLineno());
682:       assertFalse(node0.isDo());
683:       assertFalse(node0.isAssignAdd());
684:       assertFalse(node0.isBlock());
685:       assertFalse(node0.isLabel());
686:       assertFalse(node0.isReturn());
687:       assertFalse(node0.hasChildren());
688:       assertFalse(node0.isAssign());
689:       assertFalse(node0.isDec());
690:       assertFalse(node0.isTypeOf());
691:       assertFalse(node0.hasMoreThanOneChild());
692:       assertFalse(node0.isCall());
693:       assertFalse(node0.isVar());
694:       assertFalse(node0.isGetElem());
695:       assertFalse(node0.isName());
696:       assertFalse(node0.isNew());
697:       assertFalse(node0.isAdd());
698:       assertFalse(node0.isNull());
699:       assertFalse(node0.isSetterDef());
700:       assertEquals(5044, node0.getType());
701:       assertFalse(node0.isOr());
702:       assertFalse(node0.isCatch());
703:       assertFalse(node0.isDefaultCase());
704:       assertFalse(node0.isThis());
705:       assertFalse(node0.isInstanceOf());
706:       assertEquals(0, node0.getChildCount());
707:       assertFalse(node0.isRegExp());
708:       assertFalse(node0.isWith());
709:       assertFalse(node0.isStringKey());
710:       assertFalse(node0.isArrayLit());
711:       assertFalse(node0.isFor());
712:       assertFalse(node0.isHook());
713:       assertFalse(node0.hasOneChild());
714:       assertFalse(node0.isTry());
715:       assertFalse(node0.isLabelName());
716:       assertFalse(node0.isParamList());
717:       assertEquals((-1), node0.getCharno());
718:       assertFalse(node0.isScript());
719:       assertFalse(node0.isGetterDef());
720:       assertFalse(node0.isNumber());
721:       assertFalse(node1.isOr());
722:       assertFalse(node1.isAssignAdd());
723:       assertFalse(node1.isNumber());
724:       assertEquals((-1), node1.getSourcePosition());
725:       assertFalse(node1.isDec());
726:       assertFalse(node1.isTypeOf());
727:       assertFalse(node1.isReturn());
728:       assertFalse(node1.isLabel());
729:       assertFalse(node1.hasChildren());
730:       assertFalse(node1.isGetElem());
731:       assertFalse(node1.isLabelName());
732:       assertFalse(node1.isAssign());
733:       assertFalse(node1.hasMoreThanOneChild());
734:       assertFalse(node1.isContinue());
735:       assertFalse(node1.isCast());
736:       assertEquals((-1), node1.getLineno());
737:       assertFalse(node1.isBlock());
738:       assertFalse(node1.isObjectLit());
739:       assertFalse(node1.isNot());
740:       assertFalse(node1.isWhile());
741:       assertFalse(node1.hasOneChild());
742:       assertFalse(node1.isScript());
743:       assertFalse(node1.isParamList());
744:       assertFalse(node1.isNull());
745:       assertEquals(0, node1.getChildCount());
746:       assertFalse(node1.isComma());
747:       assertFalse(node1.isStringKey());
748:       assertFalse(node1.isName());
749:       assertFalse(node1.isExprResult());
750:       assertFalse(node1.isCall());
751:       assertFalse(node1.isBreak());
752:       assertFalse(node1.isNew());
753:       assertFalse(node1.isVoid());
754:       assertFalse(node1.isAdd());
755:       assertFalse(node1.isVar());
756:       assertFalse(node1.isTrue());
757:       assertFalse(node1.isEmpty());
758:       assertFalse(node1.isDo());
759:       assertFalse(node1.isDefaultCase());
760:       assertFalse(node1.isIn());
761:       assertFalse(node1.isGetterDef());
762:       assertFalse(node1.isNE());
763:       assertFalse(node1.isIf());
764:       assertFalse(node1.isDelProp());
765:       assertFalse(node1.isArrayLit());
766:       assertFalse(node1.isTry());
767:       assertFalse(node1.isSwitch());
768:       assertFalse(node1.isHook());
769:       assertFalse(node1.isRegExp());
770:       assertFalse(node1.isDebugger());
771:       assertEquals((-1), node1.getCharno());
772:       assertFalse(node1.isCase());
773:       assertFalse(node1.isFor());
774:       assertFalse(node1.isString());
775:       assertFalse(node1.isGetProp());
776:       assertFalse(node1.isThis());
777:       assertFalse(node1.isFalse());
778:       assertFalse(node1.isCatch());
779:       assertFalse(node1.isWith());
780:       assertFalse(node1.isAnd());
781:       assertFalse(node1.isInstanceOf());
782:       assertFalse(node1.isFunction());
783:       assertFalse(node1.isThrow());
784:       assertEquals(5044, node1.getType());
785:       assertFalse(node1.isSetterDef());
786:       assertFalse(node1.isInc());
787:       assertEquals(48, Node.DIRECTIVES);
788:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
789:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
790:       assertEquals(50, Node.FREE_CALL);
791:       assertEquals(55, Node.INFERRED_FUNCTION);
792:       assertEquals(8, Node.FLAG_NO_THROWS);
793:       assertEquals(39, Node.EMPTY_BLOCK);
794:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
795:       assertEquals(53, Node.INPUT_ID);
796:       assertEquals(52, Node.LENGTH);
797:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
798:       assertEquals(36, Node.QUOTED_PROP);
799:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
800:       assertEquals(57, Node.REFLECTED_OBJECT);
801:       assertEquals(49, Node.DIRECT_EVAL);
802:       assertEquals(37, Node.OPT_ARG_NAME);
803:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
804:       assertEquals(4095, Node.COLUMN_MASK);
805:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
806:       assertEquals(51, Node.STATIC_SOURCE_FILE);
807:       assertEquals(32, Node.INCRDECR_PROP);
808:       assertEquals(56, Node.CHANGE_TIME);
809:       assertEquals(47, Node.IS_DISPATCHER);
810:       assertEquals(12, Node.COLUMN_BITS);
811:       assertEquals(46, Node.IS_NAMESPACE);
812:       assertEquals(57, Node.LAST_PROP);
813:       assertEquals(1, Node.DECR_FLAG);
814:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
815:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
816:       assertEquals(15, Node.NO_SIDE_EFFECTS);
817:       assertEquals(29, Node.JSDOC_INFO_PROP);
818:       assertEquals(43, Node.IS_CONSTANT_NAME);
819:       assertEquals(54, Node.SLASH_V);
820:       assertEquals(30, Node.VAR_ARGS_NAME);
821:       assertEquals(2, Node.POST_FLAG);
822:       assertEquals(40, Node.ORIGINALNAME_PROP);
823:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
824:       assertEquals(39, Node.EMPTY_BLOCK);
825:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
826:       assertEquals(50, Node.FREE_CALL);
827:       assertEquals(8, Node.FLAG_NO_THROWS);
828:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
829:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
830:       assertEquals(57, Node.LAST_PROP);
831:       assertEquals(43, Node.IS_CONSTANT_NAME);
832:       assertEquals(30, Node.VAR_ARGS_NAME);
833:       assertEquals(46, Node.IS_NAMESPACE);
834:       assertEquals(51, Node.STATIC_SOURCE_FILE);
835:       assertEquals(40, Node.ORIGINALNAME_PROP);
836:       assertEquals(54, Node.SLASH_V);
837:       assertEquals(47, Node.IS_DISPATCHER);
838:       assertEquals(56, Node.CHANGE_TIME);
839:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
840:       assertEquals(29, Node.JSDOC_INFO_PROP);
841:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
842:       assertEquals(2, Node.POST_FLAG);
843:       assertEquals(32, Node.INCRDECR_PROP);
844:       assertEquals(12, Node.COLUMN_BITS);
845:       assertEquals(53, Node.INPUT_ID);
846:       assertEquals(1, Node.DECR_FLAG);
847:       assertEquals(36, Node.QUOTED_PROP);
848:       assertEquals(15, Node.NO_SIDE_EFFECTS);
849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
850:       assertEquals(55, Node.INFERRED_FUNCTION);
851:       assertEquals(4095, Node.COLUMN_MASK);
852:       assertEquals(52, Node.LENGTH);
853:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
854:       assertEquals(57, Node.REFLECTED_OBJECT);
855:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
856:       assertEquals(48, Node.DIRECTIVES);
857:       assertEquals(37, Node.OPT_ARG_NAME);
858:       assertEquals(49, Node.DIRECT_EVAL);
859:       
860:       boolean boolean2 = node0.wasEmptyNode();
861:       assertSame(node0, node1);
862:       assertTrue(boolean2 == boolean1);
863:       assertTrue(boolean2 == boolean0);
864:       assertFalse(boolean2);
865:       assertFalse(node0.isCase());
866:       assertFalse(node0.isSwitch());
867:       assertFalse(node0.isThrow());
868:       assertFalse(node0.isEmpty());
869:       assertFalse(node0.isDelProp());
870:       assertFalse(node0.isBreak());
871:       assertFalse(node0.isIf());
872:       assertFalse(node0.isTrue());
873:       assertFalse(node0.isNE());
874:       assertFalse(node0.isInc());
875:       assertFalse(node0.isIn());
876:       assertFalse(node0.isObjectLit());
877:       assertFalse(node0.isAnd());
878:       assertFalse(node0.isVoid());
879:       assertFalse(node0.isExprResult());
880:       assertFalse(node0.isComma());
881:       assertFalse(node0.isFunction());
882:       assertFalse(node0.isFalse());
883:       assertFalse(node0.isCast());
884:       assertFalse(node0.isDebugger());
885:       assertEquals((-1), node0.getSourcePosition());
886:       assertFalse(node0.isGetProp());
887:       assertFalse(node0.isString());
888:       assertFalse(node0.isNot());
889:       assertFalse(node0.isContinue());
890:       assertFalse(node0.isWhile());
891:       assertEquals((-1), node0.getLineno());
892:       assertFalse(node0.isDo());
893:       assertFalse(node0.isAssignAdd());
894:       assertFalse(node0.isBlock());
895:       assertFalse(node0.isLabel());
896:       assertFalse(node0.isReturn());
897:       assertFalse(node0.hasChildren());
898:       assertFalse(node0.isAssign());
899:       assertFalse(node0.isDec());
900:       assertFalse(node0.isTypeOf());
901:       assertFalse(node0.hasMoreThanOneChild());
902:       assertFalse(node0.isCall());
903:       assertFalse(node0.isVar());
904:       assertFalse(node0.isGetElem());
905:       assertFalse(node0.isName());
906:       assertFalse(node0.isNew());
907:       assertFalse(node0.isAdd());
908:       assertFalse(node0.isNull());
909:       assertFalse(node0.isSetterDef());
910:       assertEquals(5044, node0.getType());
911:       assertFalse(node0.isOr());
912:       assertFalse(node0.isCatch());
913:       assertFalse(node0.isDefaultCase());
914:       assertFalse(node0.isThis());
915:       assertFalse(node0.isInstanceOf());
916:       assertEquals(0, node0.getChildCount());
917:       assertFalse(node0.isRegExp());
918:       assertFalse(node0.isWith());
919:       assertFalse(node0.isStringKey());
920:       assertFalse(node0.isArrayLit());
921:       assertFalse(node0.isFor());
922:       assertFalse(node0.isHook());
923:       assertFalse(node0.hasOneChild());
924:       assertFalse(node0.isTry());
925:       assertFalse(node0.isLabelName());
926:       assertFalse(node0.isParamList());
927:       assertEquals((-1), node0.getCharno());
928:       assertFalse(node0.isScript());
929:       assertFalse(node0.isGetterDef());
930:       assertFalse(node0.isNumber());
931:       assertEquals(48, Node.DIRECTIVES);
932:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
933:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
934:       assertEquals(50, Node.FREE_CALL);
935:       assertEquals(55, Node.INFERRED_FUNCTION);
936:       assertEquals(8, Node.FLAG_NO_THROWS);
937:       assertEquals(39, Node.EMPTY_BLOCK);
938:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
939:       assertEquals(53, Node.INPUT_ID);
940:       assertEquals(52, Node.LENGTH);
941:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
942:       assertEquals(36, Node.QUOTED_PROP);
943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
944:       assertEquals(57, Node.REFLECTED_OBJECT);
945:       assertEquals(49, Node.DIRECT_EVAL);
946:       assertEquals(37, Node.OPT_ARG_NAME);
947:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
948:       assertEquals(4095, Node.COLUMN_MASK);
949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
950:       assertEquals(51, Node.STATIC_SOURCE_FILE);
951:       assertEquals(32, Node.INCRDECR_PROP);
952:       assertEquals(56, Node.CHANGE_TIME);
953:       assertEquals(47, Node.IS_DISPATCHER);
954:       assertEquals(12, Node.COLUMN_BITS);
955:       assertEquals(46, Node.IS_NAMESPACE);
956:       assertEquals(57, Node.LAST_PROP);
957:       assertEquals(1, Node.DECR_FLAG);
958:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
959:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
960:       assertEquals(15, Node.NO_SIDE_EFFECTS);
961:       assertEquals(29, Node.JSDOC_INFO_PROP);
962:       assertEquals(43, Node.IS_CONSTANT_NAME);
963:       assertEquals(54, Node.SLASH_V);
964:       assertEquals(30, Node.VAR_ARGS_NAME);
965:       assertEquals(2, Node.POST_FLAG);
966:       assertEquals(40, Node.ORIGINALNAME_PROP);
967:       
968:       int int0 = node1.getType();
969:       assertSame(node0, node1);
970:       assertSame(node1, node0);
971:       assertEquals(5044, int0);
972:       assertFalse(node0.isCase());
973:       assertFalse(node0.isSwitch());
974:       assertFalse(node0.isThrow());
975:       assertFalse(node0.isEmpty());
976:       assertFalse(node0.isDelProp());
977:       assertFalse(node0.isBreak());
978:       assertFalse(node0.isIf());
979:       assertFalse(node0.isTrue());
980:       assertFalse(node0.isNE());
981:       assertFalse(node0.isInc());
982:       assertFalse(node0.isIn());
983:       assertFalse(node0.isObjectLit());
984:       assertFalse(node0.isAnd());
985:       assertFalse(node0.isVoid());
986:       assertFalse(node0.isExprResult());
987:       assertFalse(node0.isComma());
988:       assertFalse(node0.isFunction());
989:       assertFalse(node0.isFalse());
990:       assertFalse(node0.isCast());
991:       assertFalse(node0.isDebugger());
992:       assertEquals((-1), node0.getSourcePosition());
993:       assertFalse(node0.isGetProp());
994:       assertFalse(node0.isString());
995:       assertFalse(node0.isNot());
996:       assertFalse(node0.isContinue());
997:       assertFalse(node0.isWhile());
998:       assertEquals((-1), node0.getLineno());
999:       assertFalse(node0.isDo());
1000:       assertFalse(node0.isAssignAdd());
1001:       assertFalse(node0.isBlock());
1002:       assertFalse(node0.isLabel());
1003:       assertFalse(node0.isReturn());
1004:       assertFalse(node0.hasChildren());
1005:       assertFalse(node0.isAssign());
1006:       assertFalse(node0.isDec());
1007:       assertFalse(node0.isTypeOf());
1008:       assertFalse(node0.hasMoreThanOneChild());
1009:       assertFalse(node0.isCall());
1010:       assertFalse(node0.isVar());
1011:       assertFalse(node0.isGetElem());
1012:       assertFalse(node0.isName());
1013:       assertFalse(node0.isNew());
1014:       assertFalse(node0.isAdd());
1015:       assertFalse(node0.isNull());
1016:       assertFalse(node0.isSetterDef());
1017:       assertEquals(5044, node0.getType());
1018:       assertFalse(node0.isOr());
1019:       assertFalse(node0.isCatch());
1020:       assertFalse(node0.isDefaultCase());
1021:       assertFalse(node0.isThis());
1022:       assertFalse(node0.isInstanceOf());
1023:       assertEquals(0, node0.getChildCount());
1024:       assertFalse(node0.isRegExp());
1025:       assertFalse(node0.isWith());
1026:       assertFalse(node0.isStringKey());
1027:       assertFalse(node0.isArrayLit());
1028:       assertFalse(node0.isFor());
1029:       assertFalse(node0.isHook());
1030:       assertFalse(node0.hasOneChild());
1031:       assertFalse(node0.isTry());
1032:       assertFalse(node0.isLabelName());
1033:       assertFalse(node0.isParamList());
1034:       assertEquals((-1), node0.getCharno());
1035:       assertFalse(node0.isScript());
1036:       assertFalse(node0.isGetterDef());
1037:       assertFalse(node0.isNumber());
1038:       assertFalse(node1.isOr());
1039:       assertFalse(node1.isAssignAdd());
1040:       assertFalse(node1.isNumber());
1041:       assertEquals((-1), node1.getSourcePosition());
1042:       assertFalse(node1.isDec());
1043:       assertFalse(node1.isTypeOf());
1044:       assertFalse(node1.isReturn());
1045:       assertFalse(node1.isLabel());
1046:       assertFalse(node1.hasChildren());
1047:       assertFalse(node1.isGetElem());
1048:       assertFalse(node1.isLabelName());
1049:       assertFalse(node1.isAssign());
1050:       assertFalse(node1.hasMoreThanOneChild());
1051:       assertFalse(node1.isContinue());
1052:       assertFalse(node1.isCast());
1053:       assertEquals((-1), node1.getLineno());
1054:       assertFalse(node1.isBlock());
1055:       assertFalse(node1.isObjectLit());
1056:       assertFalse(node1.isNot());
1057:       assertFalse(node1.isWhile());
1058:       assertFalse(node1.hasOneChild());
1059:       assertFalse(node1.isScript());
1060:       assertFalse(node1.isParamList());
1061:       assertFalse(node1.isNull());
1062:       assertEquals(0, node1.getChildCount());
1063:       assertFalse(node1.isComma());
1064:       assertFalse(node1.isStringKey());
1065:       assertFalse(node1.isName());
1066:       assertFalse(node1.isExprResult());
1067:       assertFalse(node1.isCall());
1068:       assertFalse(node1.isBreak());
1069:       assertFalse(node1.isNew());
1070:       assertFalse(node1.isVoid());
1071:       assertFalse(node1.isAdd());
1072:       assertFalse(node1.isVar());
1073:       assertFalse(node1.isTrue());
1074:       assertFalse(node1.isEmpty());
1075:       assertFalse(node1.isDo());
1076:       assertFalse(node1.isDefaultCase());
1077:       assertFalse(node1.isIn());
1078:       assertFalse(node1.isGetterDef());
1079:       assertFalse(node1.isNE());
1080:       assertFalse(node1.isIf());
1081:       assertFalse(node1.isDelProp());
1082:       assertFalse(node1.isArrayLit());
1083:       assertFalse(node1.isTry());
1084:       assertFalse(node1.isSwitch());
1085:       assertFalse(node1.isHook());
1086:       assertFalse(node1.isRegExp());
1087:       assertFalse(node1.isDebugger());
1088:       assertEquals((-1), node1.getCharno());
1089:       assertFalse(node1.isCase());
1090:       assertFalse(node1.isFor());
1091:       assertFalse(node1.isString());
1092:       assertFalse(node1.isGetProp());
1093:       assertFalse(node1.isThis());
1094:       assertFalse(node1.isFalse());
1095:       assertFalse(node1.isCatch());
1096:       assertFalse(node1.isWith());
1097:       assertFalse(node1.isAnd());
1098:       assertFalse(node1.isInstanceOf());
1099:       assertFalse(node1.isFunction());
1100:       assertFalse(node1.isThrow());
1101:       assertEquals(5044, node1.getType());
1102:       assertFalse(node1.isSetterDef());
1103:       assertFalse(node1.isInc());
1104:       assertEquals(48, Node.DIRECTIVES);
1105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1107:       assertEquals(50, Node.FREE_CALL);
1108:       assertEquals(55, Node.INFERRED_FUNCTION);
1109:       assertEquals(8, Node.FLAG_NO_THROWS);
1110:       assertEquals(39, Node.EMPTY_BLOCK);
1111:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1112:       assertEquals(53, Node.INPUT_ID);
1113:       assertEquals(52, Node.LENGTH);
1114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1115:       assertEquals(36, Node.QUOTED_PROP);
1116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1117:       assertEquals(57, Node.REFLECTED_OBJECT);
1118:       assertEquals(49, Node.DIRECT_EVAL);
1119:       assertEquals(37, Node.OPT_ARG_NAME);
1120:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1121:       assertEquals(4095, Node.COLUMN_MASK);
1122:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1123:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1124:       assertEquals(32, Node.INCRDECR_PROP);
1125:       assertEquals(56, Node.CHANGE_TIME);
1126:       assertEquals(47, Node.IS_DISPATCHER);
1127:       assertEquals(12, Node.COLUMN_BITS);
1128:       assertEquals(46, Node.IS_NAMESPACE);
1129:       assertEquals(57, Node.LAST_PROP);
1130:       assertEquals(1, Node.DECR_FLAG);
1131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1133:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1134:       assertEquals(29, Node.JSDOC_INFO_PROP);
1135:       assertEquals(43, Node.IS_CONSTANT_NAME);
1136:       assertEquals(54, Node.SLASH_V);
1137:       assertEquals(30, Node.VAR_ARGS_NAME);
1138:       assertEquals(2, Node.POST_FLAG);
1139:       assertEquals(40, Node.ORIGINALNAME_PROP);
1140:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1141:       assertEquals(39, Node.EMPTY_BLOCK);
1142:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1143:       assertEquals(50, Node.FREE_CALL);
1144:       assertEquals(8, Node.FLAG_NO_THROWS);
1145:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1147:       assertEquals(57, Node.LAST_PROP);
1148:       assertEquals(43, Node.IS_CONSTANT_NAME);
1149:       assertEquals(30, Node.VAR_ARGS_NAME);
1150:       assertEquals(46, Node.IS_NAMESPACE);
1151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1152:       assertEquals(40, Node.ORIGINALNAME_PROP);
1153:       assertEquals(54, Node.SLASH_V);
1154:       assertEquals(47, Node.IS_DISPATCHER);
1155:       assertEquals(56, Node.CHANGE_TIME);
1156:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1157:       assertEquals(29, Node.JSDOC_INFO_PROP);
1158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1159:       assertEquals(2, Node.POST_FLAG);
1160:       assertEquals(32, Node.INCRDECR_PROP);
1161:       assertEquals(12, Node.COLUMN_BITS);
1162:       assertEquals(53, Node.INPUT_ID);
1163:       assertEquals(1, Node.DECR_FLAG);
1164:       assertEquals(36, Node.QUOTED_PROP);
1165:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1166:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1167:       assertEquals(55, Node.INFERRED_FUNCTION);
1168:       assertEquals(4095, Node.COLUMN_MASK);
1169:       assertEquals(52, Node.LENGTH);
1170:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1171:       assertEquals(57, Node.REFLECTED_OBJECT);
1172:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1173:       assertEquals(48, Node.DIRECTIVES);
1174:       assertEquals(37, Node.OPT_ARG_NAME);
1175:       assertEquals(49, Node.DIRECT_EVAL);
1176:       
1177:       Node[] nodeArray0 = new Node[6];
1178:       nodeArray0[0] = node0;
1179:       nodeArray0[1] = node0;
1180:       nodeArray0[2] = node0;
1181:       nodeArray0[3] = node0;
1182:       Node node2 = new Node(77, node0, node0);
1183:       assertNotNull(node2);
1184:       assertFalse(node2.equals((Object)node1));
1185:       assertFalse(node2.equals((Object)node0));
1186:       assertFalse(node0.isCase());
1187:       assertFalse(node0.isSwitch());
1188:       assertFalse(node0.isThrow());
1189:       assertFalse(node0.isEmpty());
1190:       assertFalse(node0.isDelProp());
1191:       assertFalse(node0.isBreak());
1192:       assertFalse(node0.isIf());
1193:       assertFalse(node0.isTrue());
1194:       assertFalse(node0.isNE());
1195:       assertFalse(node0.isInc());
1196:       assertFalse(node0.isIn());
1197:       assertFalse(node0.isObjectLit());
1198:       assertFalse(node0.isAnd());
1199:       assertFalse(node0.isVoid());
1200:       assertFalse(node0.isExprResult());
1201:       assertFalse(node0.isComma());
1202:       assertFalse(node0.isFunction());
1203:       assertFalse(node0.isFalse());
1204:       assertFalse(node0.isCast());
1205:       assertFalse(node0.isDebugger());
1206:       assertEquals((-1), node0.getSourcePosition());
1207:       assertFalse(node0.isGetProp());
1208:       assertFalse(node0.isString());
1209:       assertFalse(node0.isNot());
1210:       assertFalse(node0.isContinue());
1211:       assertFalse(node0.isWhile());
1212:       assertEquals((-1), node0.getLineno());
1213:       assertFalse(node0.isDo());
1214:       assertFalse(node0.isAssignAdd());
1215:       assertFalse(node0.isBlock());
1216:       assertFalse(node0.isLabel());
1217:       assertFalse(node0.isReturn());
1218:       assertFalse(node0.hasChildren());
1219:       assertFalse(node0.isAssign());
1220:       assertFalse(node0.isDec());
1221:       assertFalse(node0.isTypeOf());
1222:       assertFalse(node0.hasMoreThanOneChild());
1223:       assertFalse(node0.isCall());
1224:       assertFalse(node0.isVar());
1225:       assertFalse(node0.isGetElem());
1226:       assertFalse(node0.isName());
1227:       assertFalse(node0.isNew());
1228:       assertFalse(node0.isAdd());
1229:       assertFalse(node0.isNull());
1230:       assertFalse(node0.isSetterDef());
1231:       assertEquals(5044, node0.getType());
1232:       assertFalse(node0.isOr());
1233:       assertFalse(node0.isCatch());
1234:       assertFalse(node0.isDefaultCase());
1235:       assertFalse(node0.isThis());
1236:       assertFalse(node0.isInstanceOf());
1237:       assertEquals(0, node0.getChildCount());
1238:       assertFalse(node0.isRegExp());
1239:       assertFalse(node0.isWith());
1240:       assertFalse(node0.isStringKey());
1241:       assertFalse(node0.isArrayLit());
1242:       assertFalse(node0.isFor());
1243:       assertFalse(node0.isHook());
1244:       assertFalse(node0.hasOneChild());
1245:       assertFalse(node0.isTry());
1246:       assertFalse(node0.isLabelName());
1247:       assertFalse(node0.isParamList());
1248:       assertEquals((-1), node0.getCharno());
1249:       assertFalse(node0.isScript());
1250:       assertFalse(node0.isGetterDef());
1251:       assertFalse(node0.isNumber());
1252:       assertFalse(node2.isDefaultCase());
1253:       assertFalse(node2.isFunction());
1254:       assertFalse(node2.isRegExp());
1255:       assertFalse(node2.isVoid());
1256:       assertFalse(node2.isCatch());
1257:       assertFalse(node2.isArrayLit());
1258:       assertFalse(node2.isDebugger());
1259:       assertFalse(node2.isParamList());
1260:       assertFalse(node2.isTrue());
1261:       assertFalse(node2.isNull());
1262:       assertFalse(node2.isGetterDef());
1263:       assertFalse(node2.isIf());
1264:       assertFalse(node2.isDelProp());
1265:       assertFalse(node2.isName());
1266:       assertTrue(node2.hasChildren());
1267:       assertFalse(node2.isCall());
1268:       assertEquals(1, node2.getChildCount());
1269:       assertFalse(node2.isFor());
1270:       assertFalse(node2.isBlock());
1271:       assertTrue(node2.hasOneChild());
1272:       assertFalse(node2.isWhile());
1273:       assertFalse(node2.isString());
1274:       assertFalse(node2.isContinue());
1275:       assertFalse(node2.isInc());
1276:       assertFalse(node2.isIn());
1277:       assertEquals((-1), node2.getLineno());
1278:       assertFalse(node2.isNE());
1279:       assertFalse(node2.isFalse());
1280:       assertFalse(node2.isCast());
1281:       assertFalse(node2.isSetterDef());
1282:       assertEquals(77, node2.getType());
1283:       assertFalse(node2.isThrow());
1284:       assertFalse(node2.isWith());
1285:       assertFalse(node2.isNot());
1286:       assertFalse(node2.isScript());
1287:       assertFalse(node2.isExprResult());
1288:       assertFalse(node2.isObjectLit());
1289:       assertFalse(node2.isAnd());
1290:       assertFalse(node2.isBreak());
1291:       assertEquals((-1), node2.getSourcePosition());
1292:       assertFalse(node2.isDec());
1293:       assertFalse(node2.isAssign());
1294:       assertFalse(node2.isNumber());
1295:       assertFalse(node2.isTypeOf());
1296:       assertFalse(node2.isGetProp());
1297:       assertFalse(node2.isGetElem());
1298:       assertFalse(node2.isInstanceOf());
1299:       assertFalse(node2.hasMoreThanOneChild());
1300:       assertTrue(node2.isTry());
1301:       assertFalse(node2.isComma());
1302:       assertFalse(node2.isThis());
1303:       assertFalse(node2.isHook());
1304:       assertFalse(node2.isReturn());
1305:       assertFalse(node2.isSwitch());
1306:       assertFalse(node2.isDo());
1307:       assertFalse(node2.isCase());
1308:       assertFalse(node2.isNew());
1309:       assertFalse(node2.isAdd());
1310:       assertFalse(node2.isOr());
1311:       assertEquals((-1), node2.getCharno());
1312:       assertFalse(node2.isStringKey());
1313:       assertFalse(node2.isLabelName());
1314:       assertFalse(node2.isEmpty());
1315:       assertFalse(node2.isAssignAdd());
1316:       assertFalse(node2.isVar());
1317:       assertFalse(node2.isLabel());
1318:       assertEquals(48, Node.DIRECTIVES);
1319:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1320:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1321:       assertEquals(50, Node.FREE_CALL);
1322:       assertEquals(55, Node.INFERRED_FUNCTION);
1323:       assertEquals(8, Node.FLAG_NO_THROWS);
1324:       assertEquals(39, Node.EMPTY_BLOCK);
1325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1326:       assertEquals(53, Node.INPUT_ID);
1327:       assertEquals(52, Node.LENGTH);
1328:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1329:       assertEquals(36, Node.QUOTED_PROP);
1330:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1331:       assertEquals(57, Node.REFLECTED_OBJECT);
1332:       assertEquals(49, Node.DIRECT_EVAL);
1333:       assertEquals(37, Node.OPT_ARG_NAME);
1334:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1335:       assertEquals(4095, Node.COLUMN_MASK);
1336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1338:       assertEquals(32, Node.INCRDECR_PROP);
1339:       assertEquals(56, Node.CHANGE_TIME);
1340:       assertEquals(47, Node.IS_DISPATCHER);
1341:       assertEquals(12, Node.COLUMN_BITS);
1342:       assertEquals(46, Node.IS_NAMESPACE);
1343:       assertEquals(57, Node.LAST_PROP);
1344:       assertEquals(1, Node.DECR_FLAG);
1345:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1348:       assertEquals(29, Node.JSDOC_INFO_PROP);
1349:       assertEquals(43, Node.IS_CONSTANT_NAME);
1350:       assertEquals(54, Node.SLASH_V);
1351:       assertEquals(30, Node.VAR_ARGS_NAME);
1352:       assertEquals(2, Node.POST_FLAG);
1353:       assertEquals(40, Node.ORIGINALNAME_PROP);
1354:       assertEquals(12, Node.COLUMN_BITS);
1355:       assertEquals(46, Node.IS_NAMESPACE);
1356:       assertEquals(32, Node.INCRDECR_PROP);
1357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1358:       assertEquals(57, Node.LAST_PROP);
1359:       assertEquals(49, Node.DIRECT_EVAL);
1360:       assertEquals(1, Node.DECR_FLAG);
1361:       assertEquals(37, Node.OPT_ARG_NAME);
1362:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1363:       assertEquals(47, Node.IS_DISPATCHER);
1364:       assertEquals(2, Node.POST_FLAG);
1365:       assertEquals(30, Node.VAR_ARGS_NAME);
1366:       assertEquals(40, Node.ORIGINALNAME_PROP);
1367:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1369:       assertEquals(43, Node.IS_CONSTANT_NAME);
1370:       assertEquals(54, Node.SLASH_V);
1371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1372:       assertEquals(50, Node.FREE_CALL);
1373:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1374:       assertEquals(4095, Node.COLUMN_MASK);
1375:       assertEquals(55, Node.INFERRED_FUNCTION);
1376:       assertEquals(48, Node.DIRECTIVES);
1377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1379:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1380:       assertEquals(57, Node.REFLECTED_OBJECT);
1381:       assertEquals(29, Node.JSDOC_INFO_PROP);
1382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1383:       assertEquals(8, Node.FLAG_NO_THROWS);
1384:       assertEquals(39, Node.EMPTY_BLOCK);
1385:       assertEquals(56, Node.CHANGE_TIME);
1386:       assertEquals(53, Node.INPUT_ID);
1387:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1388:       assertEquals(52, Node.LENGTH);
1389:       assertEquals(36, Node.QUOTED_PROP);
1390:       
1391:       nodeArray0[4] = node2;
1392:       nodeArray0[5] = node0;
1393:       Node node3 = null;
1394:       try {
1395:         node3 = new Node(48, nodeArray0, 37, 118);
1396:         fail("Expecting exception: IllegalArgumentException");
1397:       
1398:       } catch(IllegalArgumentException e) {
1399:          //
1400:          // no message in exception (getMessage() returned null)
1401:          //
1402:          verifyException("com.google.common.base.Preconditions", e);
1403:       }
1404:   }
1405: }
RegularFileObject[/tmp/EvoSuite_60_1628255598266/com/google/javascript/rhino/Node_60_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_60_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_60_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_60_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.common.collect.ImmutableSet",
340:       "com.google.common.collect.EmptyImmutableSet",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.common.collect.Sets",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.TemplatizedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractMultimap$Values",
351:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
352:       "com.google.common.collect.AbstractMapBasedMultimap$1",
353:       "com.google.common.collect.Multimaps$Entries",
354:       "com.google.common.collect.AbstractMultimap$Entries",
355:       "com.google.common.collect.AbstractMapBasedMultimap$2",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Sets$ImprovedAbstractSet",
365:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
366:       "com.google.common.collect.Hashing",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 13:13:18.591 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2827));
assertNotNull(node0);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertEquals(Integer.MAX_VALUE, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node0.isParamList();
assertFalse(boolean0);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertEquals(Integer.MAX_VALUE, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.setType(5044);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(5044, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(5044, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(iterable0.contains(node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = node0.getAncestor(0);
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(5044, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertEquals(5044, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean1 = node1.isQualifiedName();
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(5044, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertEquals(5044, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean2 = node0.wasEmptyNode();
assertSame(node0, node1);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(5044, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

int int0 = node1.getType();
assertSame(node0, node1);
assertSame(node1, node0);
assertEquals(5044, int0);
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(5044, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isWhile());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFunction());
assertFalse(node1.isThrow());
assertEquals(5044, node1.getType());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);

Node[] nodeArray0 = new Node[6];
nodeArray0[0] = node0;
nodeArray0[1] = node0;
nodeArray0[2] = node0;
nodeArray0[3] = node0;
Node node2 = new Node(77, node0, node0);
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isIf());
assertFalse(node0.isTrue());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isContinue());
assertFalse(node0.isWhile());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCall());
assertFalse(node0.isVar());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(5044, node0.getType());
assertFalse(node0.isOr());
assertFalse(node0.isCatch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDebugger());
assertFalse(node2.isParamList());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertTrue(node2.hasChildren());
assertFalse(node2.isCall());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isFor());
assertFalse(node2.isBlock());
assertTrue(node2.hasOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNE());
assertFalse(node2.isFalse());
assertFalse(node2.isCast());
assertFalse(node2.isSetterDef());
assertEquals(77, node2.getType());
assertFalse(node2.isThrow());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertTrue(node2.isTry());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isReturn());
assertFalse(node2.isSwitch());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);

nodeArray0[4] = node2;
nodeArray0[5] = node0;
Node node3 = new Node(48, nodeArray0, 37, 118);

[MASTER] 13:13:20.612 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_73_1628255600577/com/google/javascript/rhino/Node_73_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_73_1628255600577/com/google/javascript/rhino/Node_73_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:20.612 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:20.612 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:20.613 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 405
[MASTER] 13:13:20.614 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_73_1628255600577/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_73_tmp__ESTest extends Node_73_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       int int0 = (-1807);
22:       Node node0 = new Node(3681, (-1807), (-2827));
23:       assertNotNull(node0);
24:       assertFalse(node0.isIf());
25:       assertFalse(node0.isGetterDef());
26:       assertFalse(node0.isDelProp());
27:       assertFalse(node0.isNE());
28:       assertFalse(node0.isFor());
29:       assertFalse(node0.isIn());
30:       assertFalse(node0.isTry());
31:       assertFalse(node0.isEmpty());
32:       assertFalse(node0.isCase());
33:       assertFalse(node0.isRegExp());
34:       assertFalse(node0.isTrue());
35:       assertFalse(node0.isVoid());
36:       assertFalse(node0.isCatch());
37:       assertFalse(node0.isFalse());
38:       assertFalse(node0.isComma());
39:       assertFalse(node0.isThrow());
40:       assertFalse(node0.isSetterDef());
41:       assertFalse(node0.isInc());
42:       assertFalse(node0.isGetProp());
43:       assertFalse(node0.isString());
44:       assertFalse(node0.isObjectLit());
45:       assertFalse(node0.isNot());
46:       assertFalse(node0.isDebugger());
47:       assertFalse(node0.isAnd());
48:       assertFalse(node0.isFunction());
49:       assertFalse(node0.isCast());
50:       assertFalse(node0.isContinue());
51:       assertFalse(node0.hasChildren());
52:       assertFalse(node0.isNumber());
53:       assertEquals((-1), node0.getSourcePosition());
54:       assertFalse(node0.isDec());
55:       assertFalse(node0.isLabelName());
56:       assertFalse(node0.isTypeOf());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isAssignAdd());
59:       assertFalse(node0.hasOneChild());
60:       assertFalse(node0.isOr());
61:       assertFalse(node0.isScript());
62:       assertFalse(node0.isWith());
63:       assertFalse(node0.isWhile());
64:       assertFalse(node0.isBlock());
65:       assertEquals((-1), node0.getLineno());
66:       assertFalse(node0.isReturn());
67:       assertEquals(3681, node0.getType());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isInstanceOf());
70:       assertFalse(node0.isGetElem());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isCall());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isName());
75:       assertFalse(node0.isParamList());
76:       assertFalse(node0.isThis());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isHook());
79:       assertFalse(node0.isVar());
80:       assertFalse(node0.isNull());
81:       assertFalse(node0.isNew());
82:       assertFalse(node0.isAdd());
83:       assertFalse(node0.isDefaultCase());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isSwitch());
86:       assertEquals((-1), node0.getCharno());
87:       assertFalse(node0.isLabel());
88:       assertEquals(0, node0.getChildCount());
89:       assertFalse(node0.isArrayLit());
90:       assertEquals(40, Node.ORIGINALNAME_PROP);
91:       assertEquals(57, Node.REFLECTED_OBJECT);
92:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(52, Node.LENGTH);
95:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
96:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
97:       assertEquals(54, Node.SLASH_V);
98:       assertEquals(49, Node.DIRECT_EVAL);
99:       assertEquals(48, Node.DIRECTIVES);
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(4095, Node.COLUMN_MASK);
102:       assertEquals(46, Node.IS_NAMESPACE);
103:       assertEquals(51, Node.STATIC_SOURCE_FILE);
104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
105:       assertEquals(32, Node.INCRDECR_PROP);
106:       assertEquals(1, Node.DECR_FLAG);
107:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
109:       assertEquals(2, Node.POST_FLAG);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(37, Node.OPT_ARG_NAME);
114:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
115:       assertEquals(55, Node.INFERRED_FUNCTION);
116:       assertEquals(30, Node.VAR_ARGS_NAME);
117:       assertEquals(36, Node.QUOTED_PROP);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(8, Node.FLAG_NO_THROWS);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(57, Node.LAST_PROP);
123:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
124:       assertEquals(29, Node.JSDOC_INFO_PROP);
125:       assertEquals(53, Node.INPUT_ID);
126:       
127:       boolean boolean0 = node0.isDo();
128:       assertFalse(boolean0);
129:       assertFalse(node0.isIf());
130:       assertFalse(node0.isGetterDef());
131:       assertFalse(node0.isDelProp());
132:       assertFalse(node0.isNE());
133:       assertFalse(node0.isFor());
134:       assertFalse(node0.isIn());
135:       assertFalse(node0.isTry());
136:       assertFalse(node0.isEmpty());
137:       assertFalse(node0.isCase());
138:       assertFalse(node0.isRegExp());
139:       assertFalse(node0.isTrue());
140:       assertFalse(node0.isVoid());
141:       assertFalse(node0.isCatch());
142:       assertFalse(node0.isFalse());
143:       assertFalse(node0.isComma());
144:       assertFalse(node0.isThrow());
145:       assertFalse(node0.isSetterDef());
146:       assertFalse(node0.isInc());
147:       assertFalse(node0.isGetProp());
148:       assertFalse(node0.isString());
149:       assertFalse(node0.isObjectLit());
150:       assertFalse(node0.isNot());
151:       assertFalse(node0.isDebugger());
152:       assertFalse(node0.isAnd());
153:       assertFalse(node0.isFunction());
154:       assertFalse(node0.isCast());
155:       assertFalse(node0.isContinue());
156:       assertFalse(node0.hasChildren());
157:       assertFalse(node0.isNumber());
158:       assertEquals((-1), node0.getSourcePosition());
159:       assertFalse(node0.isDec());
160:       assertFalse(node0.isLabelName());
161:       assertFalse(node0.isTypeOf());
162:       assertFalse(node0.isAssign());
163:       assertFalse(node0.isAssignAdd());
164:       assertFalse(node0.hasOneChild());
165:       assertFalse(node0.isOr());
166:       assertFalse(node0.isScript());
167:       assertFalse(node0.isWith());
168:       assertFalse(node0.isWhile());
169:       assertFalse(node0.isBlock());
170:       assertEquals((-1), node0.getLineno());
171:       assertFalse(node0.isReturn());
172:       assertEquals(3681, node0.getType());
173:       assertFalse(node0.hasMoreThanOneChild());
174:       assertFalse(node0.isInstanceOf());
175:       assertFalse(node0.isGetElem());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isName());
180:       assertFalse(node0.isParamList());
181:       assertFalse(node0.isThis());
182:       assertFalse(node0.isStringKey());
183:       assertFalse(node0.isHook());
184:       assertFalse(node0.isVar());
185:       assertFalse(node0.isNull());
186:       assertFalse(node0.isNew());
187:       assertFalse(node0.isAdd());
188:       assertFalse(node0.isDefaultCase());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isSwitch());
191:       assertEquals((-1), node0.getCharno());
192:       assertFalse(node0.isLabel());
193:       assertEquals(0, node0.getChildCount());
194:       assertFalse(node0.isArrayLit());
195:       assertEquals(40, Node.ORIGINALNAME_PROP);
196:       assertEquals(57, Node.REFLECTED_OBJECT);
197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
198:       assertEquals(50, Node.FREE_CALL);
199:       assertEquals(52, Node.LENGTH);
200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
201:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
202:       assertEquals(54, Node.SLASH_V);
203:       assertEquals(49, Node.DIRECT_EVAL);
204:       assertEquals(48, Node.DIRECTIVES);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(4095, Node.COLUMN_MASK);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(51, Node.STATIC_SOURCE_FILE);
209:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
210:       assertEquals(32, Node.INCRDECR_PROP);
211:       assertEquals(1, Node.DECR_FLAG);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(2, Node.POST_FLAG);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(43, Node.IS_CONSTANT_NAME);
217:       assertEquals(56, Node.CHANGE_TIME);
218:       assertEquals(37, Node.OPT_ARG_NAME);
219:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
220:       assertEquals(55, Node.INFERRED_FUNCTION);
221:       assertEquals(30, Node.VAR_ARGS_NAME);
222:       assertEquals(36, Node.QUOTED_PROP);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(8, Node.FLAG_NO_THROWS);
225:       assertEquals(39, Node.EMPTY_BLOCK);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(57, Node.LAST_PROP);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(29, Node.JSDOC_INFO_PROP);
230:       assertEquals(53, Node.INPUT_ID);
231:       
232:       int int1 = 5044;
233:       node0.setType((-1001));
234:       assertFalse(node0.isIf());
235:       assertFalse(node0.isGetterDef());
236:       assertFalse(node0.isDelProp());
237:       assertFalse(node0.isNE());
238:       assertFalse(node0.isFor());
239:       assertFalse(node0.isIn());
240:       assertFalse(node0.isTry());
241:       assertFalse(node0.isEmpty());
242:       assertFalse(node0.isCase());
243:       assertFalse(node0.isRegExp());
244:       assertFalse(node0.isTrue());
245:       assertFalse(node0.isVoid());
246:       assertFalse(node0.isCatch());
247:       assertEquals((-1001), node0.getType());
248:       assertFalse(node0.isFalse());
249:       assertFalse(node0.isComma());
250:       assertFalse(node0.isThrow());
251:       assertFalse(node0.isSetterDef());
252:       assertFalse(node0.isInc());
253:       assertFalse(node0.isGetProp());
254:       assertFalse(node0.isString());
255:       assertFalse(node0.isObjectLit());
256:       assertFalse(node0.isNot());
257:       assertFalse(node0.isDebugger());
258:       assertFalse(node0.isAnd());
259:       assertFalse(node0.isFunction());
260:       assertFalse(node0.isCast());
261:       assertFalse(node0.isContinue());
262:       assertFalse(node0.hasChildren());
263:       assertFalse(node0.isNumber());
264:       assertEquals((-1), node0.getSourcePosition());
265:       assertFalse(node0.isDec());
266:       assertFalse(node0.isLabelName());
267:       assertFalse(node0.isTypeOf());
268:       assertFalse(node0.isAssign());
269:       assertFalse(node0.isAssignAdd());
270:       assertFalse(node0.hasOneChild());
271:       assertFalse(node0.isOr());
272:       assertFalse(node0.isScript());
273:       assertFalse(node0.isWith());
274:       assertFalse(node0.isWhile());
275:       assertFalse(node0.isBlock());
276:       assertEquals((-1), node0.getLineno());
277:       assertFalse(node0.isReturn());
278:       assertFalse(node0.hasMoreThanOneChild());
279:       assertFalse(node0.isInstanceOf());
280:       assertFalse(node0.isGetElem());
281:       assertFalse(node0.isExprResult());
282:       assertFalse(node0.isCall());
283:       assertFalse(node0.isBreak());
284:       assertFalse(node0.isName());
285:       assertFalse(node0.isParamList());
286:       assertFalse(node0.isThis());
287:       assertFalse(node0.isStringKey());
288:       assertFalse(node0.isHook());
289:       assertFalse(node0.isVar());
290:       assertFalse(node0.isNull());
291:       assertFalse(node0.isNew());
292:       assertFalse(node0.isAdd());
293:       assertFalse(node0.isDefaultCase());
294:       assertFalse(node0.isDo());
295:       assertFalse(node0.isSwitch());
296:       assertEquals((-1), node0.getCharno());
297:       assertFalse(node0.isLabel());
298:       assertEquals(0, node0.getChildCount());
299:       assertFalse(node0.isArrayLit());
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(57, Node.REFLECTED_OBJECT);
302:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(52, Node.LENGTH);
305:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
307:       assertEquals(54, Node.SLASH_V);
308:       assertEquals(49, Node.DIRECT_EVAL);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(12, Node.COLUMN_BITS);
311:       assertEquals(4095, Node.COLUMN_MASK);
312:       assertEquals(46, Node.IS_NAMESPACE);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
315:       assertEquals(32, Node.INCRDECR_PROP);
316:       assertEquals(1, Node.DECR_FLAG);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
321:       assertEquals(43, Node.IS_CONSTANT_NAME);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(37, Node.OPT_ARG_NAME);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(30, Node.VAR_ARGS_NAME);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(47, Node.IS_DISPATCHER);
332:       assertEquals(57, Node.LAST_PROP);
333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
334:       assertEquals(29, Node.JSDOC_INFO_PROP);
335:       assertEquals(53, Node.INPUT_ID);
336:       
337:       Iterable<Node> iterable0 = node0.children();
338:       assertNotNull(iterable0);
339:       assertFalse(node0.isIf());
340:       assertFalse(node0.isGetterDef());
341:       assertFalse(node0.isDelProp());
342:       assertFalse(node0.isNE());
343:       assertFalse(node0.isFor());
344:       assertFalse(node0.isIn());
345:       assertFalse(node0.isTry());
346:       assertFalse(node0.isEmpty());
347:       assertFalse(node0.isCase());
348:       assertFalse(node0.isRegExp());
349:       assertFalse(node0.isTrue());
350:       assertFalse(node0.isVoid());
351:       assertFalse(node0.isCatch());
352:       assertEquals((-1001), node0.getType());
353:       assertFalse(node0.isFalse());
354:       assertFalse(node0.isComma());
355:       assertFalse(node0.isThrow());
356:       assertFalse(node0.isSetterDef());
357:       assertFalse(node0.isInc());
358:       assertFalse(node0.isGetProp());
359:       assertFalse(node0.isString());
360:       assertFalse(node0.isObjectLit());
361:       assertFalse(node0.isNot());
362:       assertFalse(node0.isDebugger());
363:       assertFalse(node0.isAnd());
364:       assertFalse(node0.isFunction());
365:       assertFalse(node0.isCast());
366:       assertFalse(node0.isContinue());
367:       assertFalse(node0.hasChildren());
368:       assertFalse(node0.isNumber());
369:       assertEquals((-1), node0.getSourcePosition());
370:       assertFalse(node0.isDec());
371:       assertFalse(node0.isLabelName());
372:       assertFalse(node0.isTypeOf());
373:       assertFalse(node0.isAssign());
374:       assertFalse(node0.isAssignAdd());
375:       assertFalse(node0.hasOneChild());
376:       assertFalse(node0.isOr());
377:       assertFalse(node0.isScript());
378:       assertFalse(node0.isWith());
379:       assertFalse(node0.isWhile());
380:       assertFalse(node0.isBlock());
381:       assertEquals((-1), node0.getLineno());
382:       assertFalse(node0.isReturn());
383:       assertFalse(node0.hasMoreThanOneChild());
384:       assertFalse(node0.isInstanceOf());
385:       assertFalse(node0.isGetElem());
386:       assertFalse(node0.isExprResult());
387:       assertFalse(node0.isCall());
388:       assertFalse(node0.isBreak());
389:       assertFalse(node0.isName());
390:       assertFalse(node0.isParamList());
391:       assertFalse(node0.isThis());
392:       assertFalse(node0.isStringKey());
393:       assertFalse(node0.isHook());
394:       assertFalse(node0.isVar());
395:       assertFalse(node0.isNull());
396:       assertFalse(node0.isNew());
397:       assertFalse(node0.isAdd());
398:       assertFalse(node0.isDefaultCase());
399:       assertFalse(node0.isDo());
400:       assertFalse(node0.isSwitch());
401:       assertEquals((-1), node0.getCharno());
402:       assertFalse(node0.isLabel());
403:       assertEquals(0, node0.getChildCount());
404:       assertFalse(node0.isArrayLit());
405:       assertFalse(iterable0.contains(node0));
406:       assertEquals(40, Node.ORIGINALNAME_PROP);
407:       assertEquals(57, Node.REFLECTED_OBJECT);
408:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
409:       assertEquals(50, Node.FREE_CALL);
410:       assertEquals(52, Node.LENGTH);
411:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
413:       assertEquals(54, Node.SLASH_V);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(48, Node.DIRECTIVES);
416:       assertEquals(12, Node.COLUMN_BITS);
417:       assertEquals(4095, Node.COLUMN_MASK);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(51, Node.STATIC_SOURCE_FILE);
420:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
421:       assertEquals(32, Node.INCRDECR_PROP);
422:       assertEquals(1, Node.DECR_FLAG);
423:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
424:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(37, Node.OPT_ARG_NAME);
430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(36, Node.QUOTED_PROP);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(8, Node.FLAG_NO_THROWS);
436:       assertEquals(39, Node.EMPTY_BLOCK);
437:       assertEquals(47, Node.IS_DISPATCHER);
438:       assertEquals(57, Node.LAST_PROP);
439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
440:       assertEquals(29, Node.JSDOC_INFO_PROP);
441:       assertEquals(53, Node.INPUT_ID);
442:       
443:       // Undeclared exception!
444:       try { 
445:         node0.getAncestor((-192));
446:         fail("Expecting exception: IllegalArgumentException");
447:       
448:       } catch(IllegalArgumentException e) {
449:          //
450:          // no message in exception (getMessage() returned null)
451:          //
452:          verifyException("com.google.common.base.Preconditions", e);
453:       }
454:   }
455: }
RegularFileObject[/tmp/EvoSuite_73_1628255600577/com/google/javascript/rhino/Node_73_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_73_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_73_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_73_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.common.collect.ImmutableSet",
340:       "com.google.common.collect.EmptyImmutableSet",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.common.collect.Sets",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.TemplatizedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractMultimap$Values",
351:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
352:       "com.google.common.collect.AbstractMapBasedMultimap$1",
353:       "com.google.common.collect.Multimaps$Entries",
354:       "com.google.common.collect.AbstractMultimap$Entries",
355:       "com.google.common.collect.AbstractMapBasedMultimap$2",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Sets$ImprovedAbstractSet",
365:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
366:       "com.google.common.collect.Hashing",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 13:13:20.618 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int int0 = (-1807);
Node node0 = new Node(3681, (-1807), (-2827));
assertNotNull(node0);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals(3681, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean0 = node0.isDo();
assertFalse(boolean0);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertEquals(3681, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

int int1 = 5044;
node0.setType((-1001));
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertEquals((-1001), node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertEquals((-1001), node0.getType());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isLabelName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isStringKey());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(iterable0.contains(node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

node0.getAncestor((-192));

[MASTER] 13:13:21.292 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_76_1628255600979/com/google/javascript/rhino/Node_76_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_76_1628255600979/com/google/javascript/rhino/Node_76_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:21.292 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:21.292 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:21.293 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 402
[MASTER] 13:13:21.295 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_76_1628255600979/com/google/javascript/rhino/Node_76_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_76_tmp__ESTest extends Node_76_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2827));
21:       assertNotNull(node0);
22:       assertFalse(node0.isSetterDef());
23:       assertFalse(node0.isParamList());
24:       assertFalse(node0.isStringKey());
25:       assertFalse(node0.isNull());
26:       assertFalse(node0.isDebugger());
27:       assertEquals(Integer.MAX_VALUE, node0.getType());
28:       assertFalse(node0.isNew());
29:       assertFalse(node0.isAdd());
30:       assertFalse(node0.isVar());
31:       assertFalse(node0.isArrayLit());
32:       assertFalse(node0.isDefaultCase());
33:       assertEquals(0, node0.getChildCount());
34:       assertFalse(node0.isContinue());
35:       assertFalse(node0.isFunction());
36:       assertFalse(node0.isAssignAdd());
37:       assertFalse(node0.isLabel());
38:       assertFalse(node0.isOr());
39:       assertFalse(node0.isReturn());
40:       assertFalse(node0.isDelProp());
41:       assertFalse(node0.isEmpty());
42:       assertFalse(node0.isDo());
43:       assertFalse(node0.isString());
44:       assertEquals((-1), node0.getSourcePosition());
45:       assertFalse(node0.isTrue());
46:       assertFalse(node0.isExprResult());
47:       assertFalse(node0.isVoid());
48:       assertFalse(node0.isName());
49:       assertFalse(node0.isAssign());
50:       assertFalse(node0.isWhile());
51:       assertFalse(node0.isBreak());
52:       assertFalse(node0.hasChildren());
53:       assertFalse(node0.isGetElem());
54:       assertFalse(node0.isCall());
55:       assertFalse(node0.isComma());
56:       assertFalse(node0.isDec());
57:       assertFalse(node0.isTypeOf());
58:       assertFalse(node0.isGetProp());
59:       assertFalse(node0.isThis());
60:       assertFalse(node0.isAnd());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isScript());
63:       assertFalse(node0.isObjectLit());
64:       assertEquals((-1), node0.getCharno());
65:       assertFalse(node0.isInc());
66:       assertFalse(node0.isSwitch());
67:       assertFalse(node0.isLabelName());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isCast());
70:       assertFalse(node0.isFalse());
71:       assertEquals((-1), node0.getLineno());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isCase());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isIn());
77:       assertFalse(node0.isNumber());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.hasOneChild());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isFor());
84:       assertFalse(node0.hasMoreThanOneChild());
85:       assertFalse(node0.isCatch());
86:       assertFalse(node0.isInstanceOf());
87:       assertFalse(node0.isRegExp());
88:       assertEquals(56, Node.CHANGE_TIME);
89:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
90:       assertEquals(47, Node.IS_DISPATCHER);
91:       assertEquals(37, Node.OPT_ARG_NAME);
92:       assertEquals(2, Node.POST_FLAG);
93:       assertEquals(46, Node.IS_NAMESPACE);
94:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
95:       assertEquals(12, Node.COLUMN_BITS);
96:       assertEquals(36, Node.QUOTED_PROP);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(57, Node.LAST_PROP);
99:       assertEquals(30, Node.VAR_ARGS_NAME);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
102:       assertEquals(57, Node.REFLECTED_OBJECT);
103:       assertEquals(53, Node.INPUT_ID);
104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
105:       assertEquals(52, Node.LENGTH);
106:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
107:       assertEquals(55, Node.INFERRED_FUNCTION);
108:       assertEquals(29, Node.JSDOC_INFO_PROP);
109:       assertEquals(8, Node.FLAG_NO_THROWS);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(48, Node.DIRECTIVES);
112:       assertEquals(50, Node.FREE_CALL);
113:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
114:       assertEquals(4095, Node.COLUMN_MASK);
115:       assertEquals(40, Node.ORIGINALNAME_PROP);
116:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
119:       assertEquals(54, Node.SLASH_V);
120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
121:       assertEquals(32, Node.INCRDECR_PROP);
122:       assertEquals(1, Node.DECR_FLAG);
123:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
124:       
125:       boolean boolean0 = node0.isOr();
126:       assertFalse(boolean0);
127:       assertFalse(node0.isSetterDef());
128:       assertFalse(node0.isParamList());
129:       assertFalse(node0.isStringKey());
130:       assertFalse(node0.isNull());
131:       assertFalse(node0.isDebugger());
132:       assertEquals(Integer.MAX_VALUE, node0.getType());
133:       assertFalse(node0.isNew());
134:       assertFalse(node0.isAdd());
135:       assertFalse(node0.isVar());
136:       assertFalse(node0.isArrayLit());
137:       assertFalse(node0.isDefaultCase());
138:       assertEquals(0, node0.getChildCount());
139:       assertFalse(node0.isContinue());
140:       assertFalse(node0.isFunction());
141:       assertFalse(node0.isAssignAdd());
142:       assertFalse(node0.isLabel());
143:       assertFalse(node0.isOr());
144:       assertFalse(node0.isReturn());
145:       assertFalse(node0.isDelProp());
146:       assertFalse(node0.isEmpty());
147:       assertFalse(node0.isDo());
148:       assertFalse(node0.isString());
149:       assertEquals((-1), node0.getSourcePosition());
150:       assertFalse(node0.isTrue());
151:       assertFalse(node0.isExprResult());
152:       assertFalse(node0.isVoid());
153:       assertFalse(node0.isName());
154:       assertFalse(node0.isAssign());
155:       assertFalse(node0.isWhile());
156:       assertFalse(node0.isBreak());
157:       assertFalse(node0.hasChildren());
158:       assertFalse(node0.isGetElem());
159:       assertFalse(node0.isCall());
160:       assertFalse(node0.isComma());
161:       assertFalse(node0.isDec());
162:       assertFalse(node0.isTypeOf());
163:       assertFalse(node0.isGetProp());
164:       assertFalse(node0.isThis());
165:       assertFalse(node0.isAnd());
166:       assertFalse(node0.isNot());
167:       assertFalse(node0.isScript());
168:       assertFalse(node0.isObjectLit());
169:       assertEquals((-1), node0.getCharno());
170:       assertFalse(node0.isInc());
171:       assertFalse(node0.isSwitch());
172:       assertFalse(node0.isLabelName());
173:       assertFalse(node0.isThrow());
174:       assertFalse(node0.isCast());
175:       assertFalse(node0.isFalse());
176:       assertEquals((-1), node0.getLineno());
177:       assertFalse(node0.isNE());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isCase());
180:       assertFalse(node0.isGetterDef());
181:       assertFalse(node0.isIn());
182:       assertFalse(node0.isNumber());
183:       assertFalse(node0.isTry());
184:       assertFalse(node0.isHook());
185:       assertFalse(node0.isBlock());
186:       assertFalse(node0.hasOneChild());
187:       assertFalse(node0.isWith());
188:       assertFalse(node0.isFor());
189:       assertFalse(node0.hasMoreThanOneChild());
190:       assertFalse(node0.isCatch());
191:       assertFalse(node0.isInstanceOf());
192:       assertFalse(node0.isRegExp());
193:       assertEquals(56, Node.CHANGE_TIME);
194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
195:       assertEquals(47, Node.IS_DISPATCHER);
196:       assertEquals(37, Node.OPT_ARG_NAME);
197:       assertEquals(2, Node.POST_FLAG);
198:       assertEquals(46, Node.IS_NAMESPACE);
199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
200:       assertEquals(12, Node.COLUMN_BITS);
201:       assertEquals(36, Node.QUOTED_PROP);
202:       assertEquals(15, Node.NO_SIDE_EFFECTS);
203:       assertEquals(57, Node.LAST_PROP);
204:       assertEquals(30, Node.VAR_ARGS_NAME);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
207:       assertEquals(57, Node.REFLECTED_OBJECT);
208:       assertEquals(53, Node.INPUT_ID);
209:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
210:       assertEquals(52, Node.LENGTH);
211:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
212:       assertEquals(55, Node.INFERRED_FUNCTION);
213:       assertEquals(29, Node.JSDOC_INFO_PROP);
214:       assertEquals(8, Node.FLAG_NO_THROWS);
215:       assertEquals(39, Node.EMPTY_BLOCK);
216:       assertEquals(48, Node.DIRECTIVES);
217:       assertEquals(50, Node.FREE_CALL);
218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
219:       assertEquals(4095, Node.COLUMN_MASK);
220:       assertEquals(40, Node.ORIGINALNAME_PROP);
221:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
222:       assertEquals(43, Node.IS_CONSTANT_NAME);
223:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
224:       assertEquals(54, Node.SLASH_V);
225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
226:       assertEquals(32, Node.INCRDECR_PROP);
227:       assertEquals(1, Node.DECR_FLAG);
228:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
229:       
230:       node0.setType(5036);
231:       assertEquals(5036, node0.getType());
232:       assertFalse(node0.isSetterDef());
233:       assertFalse(node0.isParamList());
234:       assertFalse(node0.isStringKey());
235:       assertFalse(node0.isNull());
236:       assertFalse(node0.isDebugger());
237:       assertFalse(node0.isNew());
238:       assertFalse(node0.isAdd());
239:       assertFalse(node0.isVar());
240:       assertFalse(node0.isArrayLit());
241:       assertFalse(node0.isDefaultCase());
242:       assertEquals(0, node0.getChildCount());
243:       assertFalse(node0.isContinue());
244:       assertFalse(node0.isFunction());
245:       assertFalse(node0.isAssignAdd());
246:       assertFalse(node0.isLabel());
247:       assertFalse(node0.isOr());
248:       assertFalse(node0.isReturn());
249:       assertFalse(node0.isDelProp());
250:       assertFalse(node0.isEmpty());
251:       assertFalse(node0.isDo());
252:       assertFalse(node0.isString());
253:       assertEquals((-1), node0.getSourcePosition());
254:       assertFalse(node0.isTrue());
255:       assertFalse(node0.isExprResult());
256:       assertFalse(node0.isVoid());
257:       assertFalse(node0.isName());
258:       assertFalse(node0.isAssign());
259:       assertFalse(node0.isWhile());
260:       assertFalse(node0.isBreak());
261:       assertFalse(node0.hasChildren());
262:       assertFalse(node0.isGetElem());
263:       assertFalse(node0.isCall());
264:       assertFalse(node0.isComma());
265:       assertFalse(node0.isDec());
266:       assertFalse(node0.isTypeOf());
267:       assertFalse(node0.isGetProp());
268:       assertFalse(node0.isThis());
269:       assertFalse(node0.isAnd());
270:       assertFalse(node0.isNot());
271:       assertFalse(node0.isScript());
272:       assertFalse(node0.isObjectLit());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isInc());
275:       assertFalse(node0.isSwitch());
276:       assertFalse(node0.isLabelName());
277:       assertFalse(node0.isThrow());
278:       assertFalse(node0.isCast());
279:       assertFalse(node0.isFalse());
280:       assertEquals((-1), node0.getLineno());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isIf());
283:       assertFalse(node0.isCase());
284:       assertFalse(node0.isGetterDef());
285:       assertFalse(node0.isIn());
286:       assertFalse(node0.isNumber());
287:       assertFalse(node0.isTry());
288:       assertFalse(node0.isHook());
289:       assertFalse(node0.isBlock());
290:       assertFalse(node0.hasOneChild());
291:       assertFalse(node0.isWith());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.hasMoreThanOneChild());
294:       assertFalse(node0.isCatch());
295:       assertFalse(node0.isInstanceOf());
296:       assertFalse(node0.isRegExp());
297:       assertEquals(56, Node.CHANGE_TIME);
298:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
299:       assertEquals(47, Node.IS_DISPATCHER);
300:       assertEquals(37, Node.OPT_ARG_NAME);
301:       assertEquals(2, Node.POST_FLAG);
302:       assertEquals(46, Node.IS_NAMESPACE);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(12, Node.COLUMN_BITS);
305:       assertEquals(36, Node.QUOTED_PROP);
306:       assertEquals(15, Node.NO_SIDE_EFFECTS);
307:       assertEquals(57, Node.LAST_PROP);
308:       assertEquals(30, Node.VAR_ARGS_NAME);
309:       assertEquals(49, Node.DIRECT_EVAL);
310:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
311:       assertEquals(57, Node.REFLECTED_OBJECT);
312:       assertEquals(53, Node.INPUT_ID);
313:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(55, Node.INFERRED_FUNCTION);
317:       assertEquals(29, Node.JSDOC_INFO_PROP);
318:       assertEquals(8, Node.FLAG_NO_THROWS);
319:       assertEquals(39, Node.EMPTY_BLOCK);
320:       assertEquals(48, Node.DIRECTIVES);
321:       assertEquals(50, Node.FREE_CALL);
322:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
323:       assertEquals(4095, Node.COLUMN_MASK);
324:       assertEquals(40, Node.ORIGINALNAME_PROP);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(43, Node.IS_CONSTANT_NAME);
327:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
328:       assertEquals(54, Node.SLASH_V);
329:       assertEquals(51, Node.STATIC_SOURCE_FILE);
330:       assertEquals(32, Node.INCRDECR_PROP);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
333:       
334:       Iterable<Node> iterable0 = node0.children();
335:       assertNotNull(iterable0);
336:       assertEquals(5036, node0.getType());
337:       assertFalse(node0.isSetterDef());
338:       assertFalse(node0.isParamList());
339:       assertFalse(node0.isStringKey());
340:       assertFalse(node0.isNull());
341:       assertFalse(node0.isDebugger());
342:       assertFalse(node0.isNew());
343:       assertFalse(node0.isAdd());
344:       assertFalse(node0.isVar());
345:       assertFalse(node0.isArrayLit());
346:       assertFalse(node0.isDefaultCase());
347:       assertEquals(0, node0.getChildCount());
348:       assertFalse(node0.isContinue());
349:       assertFalse(node0.isFunction());
350:       assertFalse(node0.isAssignAdd());
351:       assertFalse(node0.isLabel());
352:       assertFalse(node0.isOr());
353:       assertFalse(node0.isReturn());
354:       assertFalse(node0.isDelProp());
355:       assertFalse(node0.isEmpty());
356:       assertFalse(node0.isDo());
357:       assertFalse(node0.isString());
358:       assertEquals((-1), node0.getSourcePosition());
359:       assertFalse(node0.isTrue());
360:       assertFalse(node0.isExprResult());
361:       assertFalse(node0.isVoid());
362:       assertFalse(node0.isName());
363:       assertFalse(node0.isAssign());
364:       assertFalse(node0.isWhile());
365:       assertFalse(node0.isBreak());
366:       assertFalse(node0.hasChildren());
367:       assertFalse(node0.isGetElem());
368:       assertFalse(node0.isCall());
369:       assertFalse(node0.isComma());
370:       assertFalse(node0.isDec());
371:       assertFalse(node0.isTypeOf());
372:       assertFalse(node0.isGetProp());
373:       assertFalse(node0.isThis());
374:       assertFalse(node0.isAnd());
375:       assertFalse(node0.isNot());
376:       assertFalse(node0.isScript());
377:       assertFalse(node0.isObjectLit());
378:       assertEquals((-1), node0.getCharno());
379:       assertFalse(node0.isInc());
380:       assertFalse(node0.isSwitch());
381:       assertFalse(node0.isLabelName());
382:       assertFalse(node0.isThrow());
383:       assertFalse(node0.isCast());
384:       assertFalse(node0.isFalse());
385:       assertEquals((-1), node0.getLineno());
386:       assertFalse(node0.isNE());
387:       assertFalse(node0.isIf());
388:       assertFalse(node0.isCase());
389:       assertFalse(node0.isGetterDef());
390:       assertFalse(node0.isIn());
391:       assertFalse(node0.isNumber());
392:       assertFalse(node0.isTry());
393:       assertFalse(node0.isHook());
394:       assertFalse(node0.isBlock());
395:       assertFalse(node0.hasOneChild());
396:       assertFalse(node0.isWith());
397:       assertFalse(node0.isFor());
398:       assertFalse(node0.hasMoreThanOneChild());
399:       assertFalse(node0.isCatch());
400:       assertFalse(node0.isInstanceOf());
401:       assertFalse(node0.isRegExp());
402:       assertFalse(iterable0.contains(node0));
403:       assertEquals(56, Node.CHANGE_TIME);
404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
405:       assertEquals(47, Node.IS_DISPATCHER);
406:       assertEquals(37, Node.OPT_ARG_NAME);
407:       assertEquals(2, Node.POST_FLAG);
408:       assertEquals(46, Node.IS_NAMESPACE);
409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
410:       assertEquals(12, Node.COLUMN_BITS);
411:       assertEquals(36, Node.QUOTED_PROP);
412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
413:       assertEquals(57, Node.LAST_PROP);
414:       assertEquals(30, Node.VAR_ARGS_NAME);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
417:       assertEquals(57, Node.REFLECTED_OBJECT);
418:       assertEquals(53, Node.INPUT_ID);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(52, Node.LENGTH);
421:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
422:       assertEquals(55, Node.INFERRED_FUNCTION);
423:       assertEquals(29, Node.JSDOC_INFO_PROP);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(48, Node.DIRECTIVES);
427:       assertEquals(50, Node.FREE_CALL);
428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
429:       assertEquals(4095, Node.COLUMN_MASK);
430:       assertEquals(40, Node.ORIGINALNAME_PROP);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(43, Node.IS_CONSTANT_NAME);
433:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
434:       assertEquals(54, Node.SLASH_V);
435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
436:       assertEquals(32, Node.INCRDECR_PROP);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       
440:       Node node1 = node0.getAncestor(0);
441:       assertSame(node0, node1);
442:       assertSame(node1, node0);
443:       assertNotNull(node1);
444:       assertEquals(5036, node0.getType());
445:       assertFalse(node0.isSetterDef());
446:       assertFalse(node0.isParamList());
447:       assertFalse(node0.isStringKey());
448:       assertFalse(node0.isNull());
449:       assertFalse(node0.isDebugger());
450:       assertFalse(node0.isNew());
451:       assertFalse(node0.isAdd());
452:       assertFalse(node0.isVar());
453:       assertFalse(node0.isArrayLit());
454:       assertFalse(node0.isDefaultCase());
455:       assertEquals(0, node0.getChildCount());
456:       assertFalse(node0.isContinue());
457:       assertFalse(node0.isFunction());
458:       assertFalse(node0.isAssignAdd());
459:       assertFalse(node0.isLabel());
460:       assertFalse(node0.isOr());
461:       assertFalse(node0.isReturn());
462:       assertFalse(node0.isDelProp());
463:       assertFalse(node0.isEmpty());
464:       assertFalse(node0.isDo());
465:       assertFalse(node0.isString());
466:       assertEquals((-1), node0.getSourcePosition());
467:       assertFalse(node0.isTrue());
468:       assertFalse(node0.isExprResult());
469:       assertFalse(node0.isVoid());
470:       assertFalse(node0.isName());
471:       assertFalse(node0.isAssign());
472:       assertFalse(node0.isWhile());
473:       assertFalse(node0.isBreak());
474:       assertFalse(node0.hasChildren());
475:       assertFalse(node0.isGetElem());
476:       assertFalse(node0.isCall());
477:       assertFalse(node0.isComma());
478:       assertFalse(node0.isDec());
479:       assertFalse(node0.isTypeOf());
480:       assertFalse(node0.isGetProp());
481:       assertFalse(node0.isThis());
482:       assertFalse(node0.isAnd());
483:       assertFalse(node0.isNot());
484:       assertFalse(node0.isScript());
485:       assertFalse(node0.isObjectLit());
486:       assertEquals((-1), node0.getCharno());
487:       assertFalse(node0.isInc());
488:       assertFalse(node0.isSwitch());
489:       assertFalse(node0.isLabelName());
490:       assertFalse(node0.isThrow());
491:       assertFalse(node0.isCast());
492:       assertFalse(node0.isFalse());
493:       assertEquals((-1), node0.getLineno());
494:       assertFalse(node0.isNE());
495:       assertFalse(node0.isIf());
496:       assertFalse(node0.isCase());
497:       assertFalse(node0.isGetterDef());
498:       assertFalse(node0.isIn());
499:       assertFalse(node0.isNumber());
500:       assertFalse(node0.isTry());
501:       assertFalse(node0.isHook());
502:       assertFalse(node0.isBlock());
503:       assertFalse(node0.hasOneChild());
504:       assertFalse(node0.isWith());
505:       assertFalse(node0.isFor());
506:       assertFalse(node0.hasMoreThanOneChild());
507:       assertFalse(node0.isCatch());
508:       assertFalse(node0.isInstanceOf());
509:       assertFalse(node0.isRegExp());
510:       assertFalse(node1.isNew());
511:       assertFalse(node1.isWhile());
512:       assertFalse(node1.isVar());
513:       assertFalse(node1.isBlock());
514:       assertFalse(node1.isContinue());
515:       assertFalse(node1.isCall());
516:       assertFalse(node1.isStringKey());
517:       assertFalse(node1.isName());
518:       assertFalse(node1.hasMoreThanOneChild());
519:       assertEquals((-1), node1.getLineno());
520:       assertFalse(node1.isParamList());
521:       assertFalse(node1.isTypeOf());
522:       assertFalse(node1.isNumber());
523:       assertFalse(node1.hasChildren());
524:       assertEquals((-1), node1.getSourcePosition());
525:       assertFalse(node1.isDec());
526:       assertFalse(node1.isReturn());
527:       assertFalse(node1.hasOneChild());
528:       assertFalse(node1.isTrue());
529:       assertFalse(node1.isVoid());
530:       assertFalse(node1.isExprResult());
531:       assertFalse(node1.isDefaultCase());
532:       assertFalse(node1.isLabelName());
533:       assertFalse(node1.isAssign());
534:       assertFalse(node1.isDelProp());
535:       assertFalse(node1.isArrayLit());
536:       assertFalse(node1.isGetElem());
537:       assertFalse(node1.isAssignAdd());
538:       assertFalse(node1.isOr());
539:       assertEquals(0, node1.getChildCount());
540:       assertFalse(node1.isLabel());
541:       assertFalse(node1.isNull());
542:       assertFalse(node1.isDo());
543:       assertFalse(node1.isEmpty());
544:       assertFalse(node1.isAdd());
545:       assertEquals((-1), node1.getCharno());
546:       assertFalse(node1.isSwitch());
547:       assertFalse(node1.isHook());
548:       assertFalse(node1.isFalse());
549:       assertFalse(node1.isBreak());
550:       assertFalse(node1.isComma());
551:       assertFalse(node1.isGetterDef());
552:       assertFalse(node1.isFor());
553:       assertFalse(node1.isThis());
554:       assertFalse(node1.isObjectLit());
555:       assertFalse(node1.isNot());
556:       assertFalse(node1.isString());
557:       assertFalse(node1.isCase());
558:       assertFalse(node1.isScript());
559:       assertFalse(node1.isGetProp());
560:       assertFalse(node1.isDebugger());
561:       assertFalse(node1.isRegExp());
562:       assertFalse(node1.isTry());
563:       assertFalse(node1.isFunction());
564:       assertFalse(node1.isAnd());
565:       assertFalse(node1.isCatch());
566:       assertFalse(node1.isCast());
567:       assertFalse(node1.isWith());
568:       assertFalse(node1.isInstanceOf());
569:       assertFalse(node1.isIf());
570:       assertEquals(5036, node1.getType());
571:       assertFalse(node1.isNE());
572:       assertFalse(node1.isThrow());
573:       assertFalse(node1.isIn());
574:       assertFalse(node1.isSetterDef());
575:       assertFalse(node1.isInc());
576:       assertEquals(56, Node.CHANGE_TIME);
577:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
578:       assertEquals(47, Node.IS_DISPATCHER);
579:       assertEquals(37, Node.OPT_ARG_NAME);
580:       assertEquals(2, Node.POST_FLAG);
581:       assertEquals(46, Node.IS_NAMESPACE);
582:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
583:       assertEquals(12, Node.COLUMN_BITS);
584:       assertEquals(36, Node.QUOTED_PROP);
585:       assertEquals(15, Node.NO_SIDE_EFFECTS);
586:       assertEquals(57, Node.LAST_PROP);
587:       assertEquals(30, Node.VAR_ARGS_NAME);
588:       assertEquals(49, Node.DIRECT_EVAL);
589:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
590:       assertEquals(57, Node.REFLECTED_OBJECT);
591:       assertEquals(53, Node.INPUT_ID);
592:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
593:       assertEquals(52, Node.LENGTH);
594:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
595:       assertEquals(55, Node.INFERRED_FUNCTION);
596:       assertEquals(29, Node.JSDOC_INFO_PROP);
597:       assertEquals(8, Node.FLAG_NO_THROWS);
598:       assertEquals(39, Node.EMPTY_BLOCK);
599:       assertEquals(48, Node.DIRECTIVES);
600:       assertEquals(50, Node.FREE_CALL);
601:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
602:       assertEquals(4095, Node.COLUMN_MASK);
603:       assertEquals(40, Node.ORIGINALNAME_PROP);
604:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
605:       assertEquals(43, Node.IS_CONSTANT_NAME);
606:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
607:       assertEquals(54, Node.SLASH_V);
608:       assertEquals(51, Node.STATIC_SOURCE_FILE);
609:       assertEquals(32, Node.INCRDECR_PROP);
610:       assertEquals(1, Node.DECR_FLAG);
611:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
612:       assertEquals(43, Node.IS_CONSTANT_NAME);
613:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
614:       assertEquals(55, Node.INFERRED_FUNCTION);
615:       assertEquals(4095, Node.COLUMN_MASK);
616:       assertEquals(36, Node.QUOTED_PROP);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
619:       assertEquals(39, Node.EMPTY_BLOCK);
620:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
621:       assertEquals(47, Node.IS_DISPATCHER);
622:       assertEquals(2, Node.POST_FLAG);
623:       assertEquals(50, Node.FREE_CALL);
624:       assertEquals(46, Node.IS_NAMESPACE);
625:       assertEquals(54, Node.SLASH_V);
626:       assertEquals(40, Node.ORIGINALNAME_PROP);
627:       assertEquals(30, Node.VAR_ARGS_NAME);
628:       assertEquals(57, Node.LAST_PROP);
629:       assertEquals(15, Node.NO_SIDE_EFFECTS);
630:       assertEquals(51, Node.STATIC_SOURCE_FILE);
631:       assertEquals(52, Node.LENGTH);
632:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
633:       assertEquals(12, Node.COLUMN_BITS);
634:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
635:       assertEquals(1, Node.DECR_FLAG);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
638:       assertEquals(56, Node.CHANGE_TIME);
639:       assertEquals(29, Node.JSDOC_INFO_PROP);
640:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
641:       assertEquals(8, Node.FLAG_NO_THROWS);
642:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
643:       assertEquals(57, Node.REFLECTED_OBJECT);
644:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(48, Node.DIRECTIVES);
647:       assertEquals(49, Node.DIRECT_EVAL);
648:       
649:       boolean boolean1 = node1.isQualifiedName();
650:       assertSame(node0, node1);
651:       assertSame(node1, node0);
652:       assertTrue(boolean1 == boolean0);
653:       assertFalse(boolean1);
654:       assertEquals(5036, node0.getType());
655:       assertFalse(node0.isSetterDef());
656:       assertFalse(node0.isParamList());
657:       assertFalse(node0.isStringKey());
658:       assertFalse(node0.isNull());
659:       assertFalse(node0.isDebugger());
660:       assertFalse(node0.isNew());
661:       assertFalse(node0.isAdd());
662:       assertFalse(node0.isVar());
663:       assertFalse(node0.isArrayLit());
664:       assertFalse(node0.isDefaultCase());
665:       assertEquals(0, node0.getChildCount());
666:       assertFalse(node0.isContinue());
667:       assertFalse(node0.isFunction());
668:       assertFalse(node0.isAssignAdd());
669:       assertFalse(node0.isLabel());
670:       assertFalse(node0.isOr());
671:       assertFalse(node0.isReturn());
672:       assertFalse(node0.isDelProp());
673:       assertFalse(node0.isEmpty());
674:       assertFalse(node0.isDo());
675:       assertFalse(node0.isString());
676:       assertEquals((-1), node0.getSourcePosition());
677:       assertFalse(node0.isTrue());
678:       assertFalse(node0.isExprResult());
679:       assertFalse(node0.isVoid());
680:       assertFalse(node0.isName());
681:       assertFalse(node0.isAssign());
682:       assertFalse(node0.isWhile());
683:       assertFalse(node0.isBreak());
684:       assertFalse(node0.hasChildren());
685:       assertFalse(node0.isGetElem());
686:       assertFalse(node0.isCall());
687:       assertFalse(node0.isComma());
688:       assertFalse(node0.isDec());
689:       assertFalse(node0.isTypeOf());
690:       assertFalse(node0.isGetProp());
691:       assertFalse(node0.isThis());
692:       assertFalse(node0.isAnd());
693:       assertFalse(node0.isNot());
694:       assertFalse(node0.isScript());
695:       assertFalse(node0.isObjectLit());
696:       assertEquals((-1), node0.getCharno());
697:       assertFalse(node0.isInc());
698:       assertFalse(node0.isSwitch());
699:       assertFalse(node0.isLabelName());
700:       assertFalse(node0.isThrow());
701:       assertFalse(node0.isCast());
702:       assertFalse(node0.isFalse());
703:       assertEquals((-1), node0.getLineno());
704:       assertFalse(node0.isNE());
705:       assertFalse(node0.isIf());
706:       assertFalse(node0.isCase());
707:       assertFalse(node0.isGetterDef());
708:       assertFalse(node0.isIn());
709:       assertFalse(node0.isNumber());
710:       assertFalse(node0.isTry());
711:       assertFalse(node0.isHook());
712:       assertFalse(node0.isBlock());
713:       assertFalse(node0.hasOneChild());
714:       assertFalse(node0.isWith());
715:       assertFalse(node0.isFor());
716:       assertFalse(node0.hasMoreThanOneChild());
717:       assertFalse(node0.isCatch());
718:       assertFalse(node0.isInstanceOf());
719:       assertFalse(node0.isRegExp());
720:       assertFalse(node1.isNew());
721:       assertFalse(node1.isWhile());
722:       assertFalse(node1.isVar());
723:       assertFalse(node1.isBlock());
724:       assertFalse(node1.isContinue());
725:       assertFalse(node1.isCall());
726:       assertFalse(node1.isStringKey());
727:       assertFalse(node1.isName());
728:       assertFalse(node1.hasMoreThanOneChild());
729:       assertEquals((-1), node1.getLineno());
730:       assertFalse(node1.isParamList());
731:       assertFalse(node1.isTypeOf());
732:       assertFalse(node1.isNumber());
733:       assertFalse(node1.hasChildren());
734:       assertEquals((-1), node1.getSourcePosition());
735:       assertFalse(node1.isDec());
736:       assertFalse(node1.isReturn());
737:       assertFalse(node1.hasOneChild());
738:       assertFalse(node1.isTrue());
739:       assertFalse(node1.isVoid());
740:       assertFalse(node1.isExprResult());
741:       assertFalse(node1.isDefaultCase());
742:       assertFalse(node1.isLabelName());
743:       assertFalse(node1.isAssign());
744:       assertFalse(node1.isDelProp());
745:       assertFalse(node1.isArrayLit());
746:       assertFalse(node1.isGetElem());
747:       assertFalse(node1.isAssignAdd());
748:       assertFalse(node1.isOr());
749:       assertEquals(0, node1.getChildCount());
750:       assertFalse(node1.isLabel());
751:       assertFalse(node1.isNull());
752:       assertFalse(node1.isDo());
753:       assertFalse(node1.isEmpty());
754:       assertFalse(node1.isAdd());
755:       assertEquals((-1), node1.getCharno());
756:       assertFalse(node1.isSwitch());
757:       assertFalse(node1.isHook());
758:       assertFalse(node1.isFalse());
759:       assertFalse(node1.isBreak());
760:       assertFalse(node1.isComma());
761:       assertFalse(node1.isGetterDef());
762:       assertFalse(node1.isFor());
763:       assertFalse(node1.isThis());
764:       assertFalse(node1.isObjectLit());
765:       assertFalse(node1.isNot());
766:       assertFalse(node1.isString());
767:       assertFalse(node1.isCase());
768:       assertFalse(node1.isScript());
769:       assertFalse(node1.isGetProp());
770:       assertFalse(node1.isDebugger());
771:       assertFalse(node1.isRegExp());
772:       assertFalse(node1.isTry());
773:       assertFalse(node1.isFunction());
774:       assertFalse(node1.isAnd());
775:       assertFalse(node1.isCatch());
776:       assertFalse(node1.isCast());
777:       assertFalse(node1.isWith());
778:       assertFalse(node1.isInstanceOf());
779:       assertFalse(node1.isIf());
780:       assertEquals(5036, node1.getType());
781:       assertFalse(node1.isNE());
782:       assertFalse(node1.isThrow());
783:       assertFalse(node1.isIn());
784:       assertFalse(node1.isSetterDef());
785:       assertFalse(node1.isInc());
786:       assertEquals(56, Node.CHANGE_TIME);
787:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
788:       assertEquals(47, Node.IS_DISPATCHER);
789:       assertEquals(37, Node.OPT_ARG_NAME);
790:       assertEquals(2, Node.POST_FLAG);
791:       assertEquals(46, Node.IS_NAMESPACE);
792:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
793:       assertEquals(12, Node.COLUMN_BITS);
794:       assertEquals(36, Node.QUOTED_PROP);
795:       assertEquals(15, Node.NO_SIDE_EFFECTS);
796:       assertEquals(57, Node.LAST_PROP);
797:       assertEquals(30, Node.VAR_ARGS_NAME);
798:       assertEquals(49, Node.DIRECT_EVAL);
799:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
800:       assertEquals(57, Node.REFLECTED_OBJECT);
801:       assertEquals(53, Node.INPUT_ID);
802:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
803:       assertEquals(52, Node.LENGTH);
804:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
805:       assertEquals(55, Node.INFERRED_FUNCTION);
806:       assertEquals(29, Node.JSDOC_INFO_PROP);
807:       assertEquals(8, Node.FLAG_NO_THROWS);
808:       assertEquals(39, Node.EMPTY_BLOCK);
809:       assertEquals(48, Node.DIRECTIVES);
810:       assertEquals(50, Node.FREE_CALL);
811:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
812:       assertEquals(4095, Node.COLUMN_MASK);
813:       assertEquals(40, Node.ORIGINALNAME_PROP);
814:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
815:       assertEquals(43, Node.IS_CONSTANT_NAME);
816:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
817:       assertEquals(54, Node.SLASH_V);
818:       assertEquals(51, Node.STATIC_SOURCE_FILE);
819:       assertEquals(32, Node.INCRDECR_PROP);
820:       assertEquals(1, Node.DECR_FLAG);
821:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
822:       assertEquals(43, Node.IS_CONSTANT_NAME);
823:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
824:       assertEquals(55, Node.INFERRED_FUNCTION);
825:       assertEquals(4095, Node.COLUMN_MASK);
826:       assertEquals(36, Node.QUOTED_PROP);
827:       assertEquals(53, Node.INPUT_ID);
828:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
829:       assertEquals(39, Node.EMPTY_BLOCK);
830:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
831:       assertEquals(47, Node.IS_DISPATCHER);
832:       assertEquals(2, Node.POST_FLAG);
833:       assertEquals(50, Node.FREE_CALL);
834:       assertEquals(46, Node.IS_NAMESPACE);
835:       assertEquals(54, Node.SLASH_V);
836:       assertEquals(40, Node.ORIGINALNAME_PROP);
837:       assertEquals(30, Node.VAR_ARGS_NAME);
838:       assertEquals(57, Node.LAST_PROP);
839:       assertEquals(15, Node.NO_SIDE_EFFECTS);
840:       assertEquals(51, Node.STATIC_SOURCE_FILE);
841:       assertEquals(52, Node.LENGTH);
842:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
843:       assertEquals(12, Node.COLUMN_BITS);
844:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
845:       assertEquals(1, Node.DECR_FLAG);
846:       assertEquals(32, Node.INCRDECR_PROP);
847:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
848:       assertEquals(56, Node.CHANGE_TIME);
849:       assertEquals(29, Node.JSDOC_INFO_PROP);
850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
851:       assertEquals(8, Node.FLAG_NO_THROWS);
852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
853:       assertEquals(57, Node.REFLECTED_OBJECT);
854:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
855:       assertEquals(37, Node.OPT_ARG_NAME);
856:       assertEquals(48, Node.DIRECTIVES);
857:       assertEquals(49, Node.DIRECT_EVAL);
858:       
859:       boolean boolean2 = node0.wasEmptyNode();
860:       assertSame(node0, node1);
861:       assertTrue(boolean2 == boolean1);
862:       assertTrue(boolean2 == boolean0);
863:       assertFalse(boolean2);
864:       assertEquals(5036, node0.getType());
865:       assertFalse(node0.isSetterDef());
866:       assertFalse(node0.isParamList());
867:       assertFalse(node0.isStringKey());
868:       assertFalse(node0.isNull());
869:       assertFalse(node0.isDebugger());
870:       assertFalse(node0.isNew());
871:       assertFalse(node0.isAdd());
872:       assertFalse(node0.isVar());
873:       assertFalse(node0.isArrayLit());
874:       assertFalse(node0.isDefaultCase());
875:       assertEquals(0, node0.getChildCount());
876:       assertFalse(node0.isContinue());
877:       assertFalse(node0.isFunction());
878:       assertFalse(node0.isAssignAdd());
879:       assertFalse(node0.isLabel());
880:       assertFalse(node0.isOr());
881:       assertFalse(node0.isReturn());
882:       assertFalse(node0.isDelProp());
883:       assertFalse(node0.isEmpty());
884:       assertFalse(node0.isDo());
885:       assertFalse(node0.isString());
886:       assertEquals((-1), node0.getSourcePosition());
887:       assertFalse(node0.isTrue());
888:       assertFalse(node0.isExprResult());
889:       assertFalse(node0.isVoid());
890:       assertFalse(node0.isName());
891:       assertFalse(node0.isAssign());
892:       assertFalse(node0.isWhile());
893:       assertFalse(node0.isBreak());
894:       assertFalse(node0.hasChildren());
895:       assertFalse(node0.isGetElem());
896:       assertFalse(node0.isCall());
897:       assertFalse(node0.isComma());
898:       assertFalse(node0.isDec());
899:       assertFalse(node0.isTypeOf());
900:       assertFalse(node0.isGetProp());
901:       assertFalse(node0.isThis());
902:       assertFalse(node0.isAnd());
903:       assertFalse(node0.isNot());
904:       assertFalse(node0.isScript());
905:       assertFalse(node0.isObjectLit());
906:       assertEquals((-1), node0.getCharno());
907:       assertFalse(node0.isInc());
908:       assertFalse(node0.isSwitch());
909:       assertFalse(node0.isLabelName());
910:       assertFalse(node0.isThrow());
911:       assertFalse(node0.isCast());
912:       assertFalse(node0.isFalse());
913:       assertEquals((-1), node0.getLineno());
914:       assertFalse(node0.isNE());
915:       assertFalse(node0.isIf());
916:       assertFalse(node0.isCase());
917:       assertFalse(node0.isGetterDef());
918:       assertFalse(node0.isIn());
919:       assertFalse(node0.isNumber());
920:       assertFalse(node0.isTry());
921:       assertFalse(node0.isHook());
922:       assertFalse(node0.isBlock());
923:       assertFalse(node0.hasOneChild());
924:       assertFalse(node0.isWith());
925:       assertFalse(node0.isFor());
926:       assertFalse(node0.hasMoreThanOneChild());
927:       assertFalse(node0.isCatch());
928:       assertFalse(node0.isInstanceOf());
929:       assertFalse(node0.isRegExp());
930:       assertEquals(56, Node.CHANGE_TIME);
931:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
932:       assertEquals(47, Node.IS_DISPATCHER);
933:       assertEquals(37, Node.OPT_ARG_NAME);
934:       assertEquals(2, Node.POST_FLAG);
935:       assertEquals(46, Node.IS_NAMESPACE);
936:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
937:       assertEquals(12, Node.COLUMN_BITS);
938:       assertEquals(36, Node.QUOTED_PROP);
939:       assertEquals(15, Node.NO_SIDE_EFFECTS);
940:       assertEquals(57, Node.LAST_PROP);
941:       assertEquals(30, Node.VAR_ARGS_NAME);
942:       assertEquals(49, Node.DIRECT_EVAL);
943:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
944:       assertEquals(57, Node.REFLECTED_OBJECT);
945:       assertEquals(53, Node.INPUT_ID);
946:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
947:       assertEquals(52, Node.LENGTH);
948:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
949:       assertEquals(55, Node.INFERRED_FUNCTION);
950:       assertEquals(29, Node.JSDOC_INFO_PROP);
951:       assertEquals(8, Node.FLAG_NO_THROWS);
952:       assertEquals(39, Node.EMPTY_BLOCK);
953:       assertEquals(48, Node.DIRECTIVES);
954:       assertEquals(50, Node.FREE_CALL);
955:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
956:       assertEquals(4095, Node.COLUMN_MASK);
957:       assertEquals(40, Node.ORIGINALNAME_PROP);
958:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
959:       assertEquals(43, Node.IS_CONSTANT_NAME);
960:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
961:       assertEquals(54, Node.SLASH_V);
962:       assertEquals(51, Node.STATIC_SOURCE_FILE);
963:       assertEquals(32, Node.INCRDECR_PROP);
964:       assertEquals(1, Node.DECR_FLAG);
965:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
966:       
967:       boolean boolean3 = node0.isThrow();
968:       assertSame(node0, node1);
969:       assertTrue(boolean3 == boolean1);
970:       assertTrue(boolean3 == boolean0);
971:       assertTrue(boolean3 == boolean2);
972:       assertFalse(boolean3);
973:       assertEquals(5036, node0.getType());
974:       assertFalse(node0.isSetterDef());
975:       assertFalse(node0.isParamList());
976:       assertFalse(node0.isStringKey());
977:       assertFalse(node0.isNull());
978:       assertFalse(node0.isDebugger());
979:       assertFalse(node0.isNew());
980:       assertFalse(node0.isAdd());
981:       assertFalse(node0.isVar());
982:       assertFalse(node0.isArrayLit());
983:       assertFalse(node0.isDefaultCase());
984:       assertEquals(0, node0.getChildCount());
985:       assertFalse(node0.isContinue());
986:       assertFalse(node0.isFunction());
987:       assertFalse(node0.isAssignAdd());
988:       assertFalse(node0.isLabel());
989:       assertFalse(node0.isOr());
990:       assertFalse(node0.isReturn());
991:       assertFalse(node0.isDelProp());
992:       assertFalse(node0.isEmpty());
993:       assertFalse(node0.isDo());
994:       assertFalse(node0.isString());
995:       assertEquals((-1), node0.getSourcePosition());
996:       assertFalse(node0.isTrue());
997:       assertFalse(node0.isExprResult());
998:       assertFalse(node0.isVoid());
999:       assertFalse(node0.isName());
1000:       assertFalse(node0.isAssign());
1001:       assertFalse(node0.isWhile());
1002:       assertFalse(node0.isBreak());
1003:       assertFalse(node0.hasChildren());
1004:       assertFalse(node0.isGetElem());
1005:       assertFalse(node0.isCall());
1006:       assertFalse(node0.isComma());
1007:       assertFalse(node0.isDec());
1008:       assertFalse(node0.isTypeOf());
1009:       assertFalse(node0.isGetProp());
1010:       assertFalse(node0.isThis());
1011:       assertFalse(node0.isAnd());
1012:       assertFalse(node0.isNot());
1013:       assertFalse(node0.isScript());
1014:       assertFalse(node0.isObjectLit());
1015:       assertEquals((-1), node0.getCharno());
1016:       assertFalse(node0.isInc());
1017:       assertFalse(node0.isSwitch());
1018:       assertFalse(node0.isLabelName());
1019:       assertFalse(node0.isThrow());
1020:       assertFalse(node0.isCast());
1021:       assertFalse(node0.isFalse());
1022:       assertEquals((-1), node0.getLineno());
1023:       assertFalse(node0.isNE());
1024:       assertFalse(node0.isIf());
1025:       assertFalse(node0.isCase());
1026:       assertFalse(node0.isGetterDef());
1027:       assertFalse(node0.isIn());
1028:       assertFalse(node0.isNumber());
1029:       assertFalse(node0.isTry());
1030:       assertFalse(node0.isHook());
1031:       assertFalse(node0.isBlock());
1032:       assertFalse(node0.hasOneChild());
1033:       assertFalse(node0.isWith());
1034:       assertFalse(node0.isFor());
1035:       assertFalse(node0.hasMoreThanOneChild());
1036:       assertFalse(node0.isCatch());
1037:       assertFalse(node0.isInstanceOf());
1038:       assertFalse(node0.isRegExp());
1039:       assertEquals(56, Node.CHANGE_TIME);
1040:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1041:       assertEquals(47, Node.IS_DISPATCHER);
1042:       assertEquals(37, Node.OPT_ARG_NAME);
1043:       assertEquals(2, Node.POST_FLAG);
1044:       assertEquals(46, Node.IS_NAMESPACE);
1045:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1046:       assertEquals(12, Node.COLUMN_BITS);
1047:       assertEquals(36, Node.QUOTED_PROP);
1048:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1049:       assertEquals(57, Node.LAST_PROP);
1050:       assertEquals(30, Node.VAR_ARGS_NAME);
1051:       assertEquals(49, Node.DIRECT_EVAL);
1052:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1053:       assertEquals(57, Node.REFLECTED_OBJECT);
1054:       assertEquals(53, Node.INPUT_ID);
1055:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1056:       assertEquals(52, Node.LENGTH);
1057:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1058:       assertEquals(55, Node.INFERRED_FUNCTION);
1059:       assertEquals(29, Node.JSDOC_INFO_PROP);
1060:       assertEquals(8, Node.FLAG_NO_THROWS);
1061:       assertEquals(39, Node.EMPTY_BLOCK);
1062:       assertEquals(48, Node.DIRECTIVES);
1063:       assertEquals(50, Node.FREE_CALL);
1064:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1065:       assertEquals(4095, Node.COLUMN_MASK);
1066:       assertEquals(40, Node.ORIGINALNAME_PROP);
1067:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1068:       assertEquals(43, Node.IS_CONSTANT_NAME);
1069:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1070:       assertEquals(54, Node.SLASH_V);
1071:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1072:       assertEquals(32, Node.INCRDECR_PROP);
1073:       assertEquals(1, Node.DECR_FLAG);
1074:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1075:       
1076:       node1.setCharno(46);
1077:       assertSame(node0, node1);
1078:       assertSame(node1, node0);
1079:       assertEquals(5036, node0.getType());
1080:       assertFalse(node0.isSetterDef());
1081:       assertFalse(node0.isParamList());
1082:       assertFalse(node0.isStringKey());
1083:       assertFalse(node0.isNull());
1084:       assertFalse(node0.isDebugger());
1085:       assertFalse(node0.isNew());
1086:       assertFalse(node0.isAdd());
1087:       assertFalse(node0.isVar());
1088:       assertFalse(node0.isArrayLit());
1089:       assertFalse(node0.isDefaultCase());
1090:       assertEquals(0, node0.getChildCount());
1091:       assertFalse(node0.isContinue());
1092:       assertFalse(node0.isFunction());
1093:       assertFalse(node0.isAssignAdd());
1094:       assertFalse(node0.isLabel());
1095:       assertFalse(node0.isOr());
1096:       assertFalse(node0.isReturn());
1097:       assertFalse(node0.isDelProp());
1098:       assertFalse(node0.isEmpty());
1099:       assertFalse(node0.isDo());
1100:       assertFalse(node0.isString());
1101:       assertEquals((-1), node0.getSourcePosition());
1102:       assertFalse(node0.isTrue());
1103:       assertFalse(node0.isExprResult());
1104:       assertFalse(node0.isVoid());
1105:       assertFalse(node0.isName());
1106:       assertFalse(node0.isAssign());
1107:       assertFalse(node0.isWhile());
1108:       assertFalse(node0.isBreak());
1109:       assertFalse(node0.hasChildren());
1110:       assertFalse(node0.isGetElem());
1111:       assertFalse(node0.isCall());
1112:       assertFalse(node0.isComma());
1113:       assertFalse(node0.isDec());
1114:       assertFalse(node0.isTypeOf());
1115:       assertFalse(node0.isGetProp());
1116:       assertFalse(node0.isThis());
1117:       assertFalse(node0.isAnd());
1118:       assertFalse(node0.isNot());
1119:       assertFalse(node0.isScript());
1120:       assertFalse(node0.isObjectLit());
1121:       assertEquals((-1), node0.getCharno());
1122:       assertFalse(node0.isInc());
1123:       assertFalse(node0.isSwitch());
1124:       assertFalse(node0.isLabelName());
1125:       assertFalse(node0.isThrow());
1126:       assertFalse(node0.isCast());
1127:       assertFalse(node0.isFalse());
1128:       assertEquals((-1), node0.getLineno());
1129:       assertFalse(node0.isNE());
1130:       assertFalse(node0.isIf());
1131:       assertFalse(node0.isCase());
1132:       assertFalse(node0.isGetterDef());
1133:       assertFalse(node0.isIn());
1134:       assertFalse(node0.isNumber());
1135:       assertFalse(node0.isTry());
1136:       assertFalse(node0.isHook());
1137:       assertFalse(node0.isBlock());
1138:       assertFalse(node0.hasOneChild());
1139:       assertFalse(node0.isWith());
1140:       assertFalse(node0.isFor());
1141:       assertFalse(node0.hasMoreThanOneChild());
1142:       assertFalse(node0.isCatch());
1143:       assertFalse(node0.isInstanceOf());
1144:       assertFalse(node0.isRegExp());
1145:       assertFalse(node1.isNew());
1146:       assertFalse(node1.isWhile());
1147:       assertFalse(node1.isVar());
1148:       assertFalse(node1.isBlock());
1149:       assertFalse(node1.isContinue());
1150:       assertFalse(node1.isCall());
1151:       assertFalse(node1.isStringKey());
1152:       assertFalse(node1.isName());
1153:       assertFalse(node1.hasMoreThanOneChild());
1154:       assertEquals((-1), node1.getLineno());
1155:       assertFalse(node1.isParamList());
1156:       assertFalse(node1.isTypeOf());
1157:       assertFalse(node1.isNumber());
1158:       assertFalse(node1.hasChildren());
1159:       assertEquals((-1), node1.getSourcePosition());
1160:       assertFalse(node1.isDec());
1161:       assertFalse(node1.isReturn());
1162:       assertFalse(node1.hasOneChild());
1163:       assertFalse(node1.isTrue());
1164:       assertFalse(node1.isVoid());
1165:       assertFalse(node1.isExprResult());
1166:       assertFalse(node1.isDefaultCase());
1167:       assertFalse(node1.isLabelName());
1168:       assertFalse(node1.isAssign());
1169:       assertFalse(node1.isDelProp());
1170:       assertFalse(node1.isArrayLit());
1171:       assertFalse(node1.isGetElem());
1172:       assertFalse(node1.isAssignAdd());
1173:       assertFalse(node1.isOr());
1174:       assertEquals(0, node1.getChildCount());
1175:       assertFalse(node1.isLabel());
1176:       assertFalse(node1.isNull());
1177:       assertFalse(node1.isDo());
1178:       assertFalse(node1.isEmpty());
1179:       assertFalse(node1.isAdd());
1180:       assertEquals((-1), node1.getCharno());
1181:       assertFalse(node1.isSwitch());
1182:       assertFalse(node1.isHook());
1183:       assertFalse(node1.isFalse());
1184:       assertFalse(node1.isBreak());
1185:       assertFalse(node1.isComma());
1186:       assertFalse(node1.isGetterDef());
1187:       assertFalse(node1.isFor());
1188:       assertFalse(node1.isThis());
1189:       assertFalse(node1.isObjectLit());
1190:       assertFalse(node1.isNot());
1191:       assertFalse(node1.isString());
1192:       assertFalse(node1.isCase());
1193:       assertFalse(node1.isScript());
1194:       assertFalse(node1.isGetProp());
1195:       assertFalse(node1.isDebugger());
1196:       assertFalse(node1.isRegExp());
1197:       assertFalse(node1.isTry());
1198:       assertFalse(node1.isFunction());
1199:       assertFalse(node1.isAnd());
1200:       assertFalse(node1.isCatch());
1201:       assertFalse(node1.isCast());
1202:       assertFalse(node1.isWith());
1203:       assertFalse(node1.isInstanceOf());
1204:       assertFalse(node1.isIf());
1205:       assertEquals(5036, node1.getType());
1206:       assertFalse(node1.isNE());
1207:       assertFalse(node1.isThrow());
1208:       assertFalse(node1.isIn());
1209:       assertFalse(node1.isSetterDef());
1210:       assertFalse(node1.isInc());
1211:       assertEquals(56, Node.CHANGE_TIME);
1212:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1213:       assertEquals(47, Node.IS_DISPATCHER);
1214:       assertEquals(37, Node.OPT_ARG_NAME);
1215:       assertEquals(2, Node.POST_FLAG);
1216:       assertEquals(46, Node.IS_NAMESPACE);
1217:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1218:       assertEquals(12, Node.COLUMN_BITS);
1219:       assertEquals(36, Node.QUOTED_PROP);
1220:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1221:       assertEquals(57, Node.LAST_PROP);
1222:       assertEquals(30, Node.VAR_ARGS_NAME);
1223:       assertEquals(49, Node.DIRECT_EVAL);
1224:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1225:       assertEquals(57, Node.REFLECTED_OBJECT);
1226:       assertEquals(53, Node.INPUT_ID);
1227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1228:       assertEquals(52, Node.LENGTH);
1229:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1230:       assertEquals(55, Node.INFERRED_FUNCTION);
1231:       assertEquals(29, Node.JSDOC_INFO_PROP);
1232:       assertEquals(8, Node.FLAG_NO_THROWS);
1233:       assertEquals(39, Node.EMPTY_BLOCK);
1234:       assertEquals(48, Node.DIRECTIVES);
1235:       assertEquals(50, Node.FREE_CALL);
1236:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1237:       assertEquals(4095, Node.COLUMN_MASK);
1238:       assertEquals(40, Node.ORIGINALNAME_PROP);
1239:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1240:       assertEquals(43, Node.IS_CONSTANT_NAME);
1241:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1242:       assertEquals(54, Node.SLASH_V);
1243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1244:       assertEquals(32, Node.INCRDECR_PROP);
1245:       assertEquals(1, Node.DECR_FLAG);
1246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1247:       assertEquals(43, Node.IS_CONSTANT_NAME);
1248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1249:       assertEquals(55, Node.INFERRED_FUNCTION);
1250:       assertEquals(4095, Node.COLUMN_MASK);
1251:       assertEquals(36, Node.QUOTED_PROP);
1252:       assertEquals(53, Node.INPUT_ID);
1253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1254:       assertEquals(39, Node.EMPTY_BLOCK);
1255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1256:       assertEquals(47, Node.IS_DISPATCHER);
1257:       assertEquals(2, Node.POST_FLAG);
1258:       assertEquals(50, Node.FREE_CALL);
1259:       assertEquals(46, Node.IS_NAMESPACE);
1260:       assertEquals(54, Node.SLASH_V);
1261:       assertEquals(40, Node.ORIGINALNAME_PROP);
1262:       assertEquals(30, Node.VAR_ARGS_NAME);
1263:       assertEquals(57, Node.LAST_PROP);
1264:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1266:       assertEquals(52, Node.LENGTH);
1267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1268:       assertEquals(12, Node.COLUMN_BITS);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(1, Node.DECR_FLAG);
1271:       assertEquals(32, Node.INCRDECR_PROP);
1272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1273:       assertEquals(56, Node.CHANGE_TIME);
1274:       assertEquals(29, Node.JSDOC_INFO_PROP);
1275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1276:       assertEquals(8, Node.FLAG_NO_THROWS);
1277:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1278:       assertEquals(57, Node.REFLECTED_OBJECT);
1279:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1280:       assertEquals(37, Node.OPT_ARG_NAME);
1281:       assertEquals(48, Node.DIRECTIVES);
1282:       assertEquals(49, Node.DIRECT_EVAL);
1283:       
1284:       node0.type = 832;
1285:       assertFalse(node0.isSetterDef());
1286:       assertFalse(node0.isParamList());
1287:       assertFalse(node0.isStringKey());
1288:       assertFalse(node0.isNull());
1289:       assertFalse(node0.isDebugger());
1290:       assertFalse(node0.isNew());
1291:       assertFalse(node0.isAdd());
1292:       assertFalse(node0.isVar());
1293:       assertFalse(node0.isArrayLit());
1294:       assertFalse(node0.isDefaultCase());
1295:       assertEquals(0, node0.getChildCount());
1296:       assertFalse(node0.isContinue());
1297:       assertFalse(node0.isFunction());
1298:       assertFalse(node0.isAssignAdd());
1299:       assertFalse(node0.isLabel());
1300:       assertFalse(node0.isOr());
1301:       assertFalse(node0.isReturn());
1302:       assertFalse(node0.isDelProp());
1303:       assertFalse(node0.isEmpty());
1304:       assertFalse(node0.isDo());
1305:       assertFalse(node0.isString());
1306:       assertEquals((-1), node0.getSourcePosition());
1307:       assertFalse(node0.isTrue());
1308:       assertFalse(node0.isExprResult());
1309:       assertFalse(node0.isVoid());
1310:       assertFalse(node0.isName());
1311:       assertFalse(node0.isAssign());
1312:       assertFalse(node0.isWhile());
1313:       assertFalse(node0.isBreak());
1314:       assertFalse(node0.hasChildren());
1315:       assertFalse(node0.isGetElem());
1316:       assertFalse(node0.isCall());
1317:       assertFalse(node0.isComma());
1318:       assertFalse(node0.isDec());
1319:       assertFalse(node0.isTypeOf());
1320:       assertFalse(node0.isGetProp());
1321:       assertFalse(node0.isThis());
1322:       assertFalse(node0.isAnd());
1323:       assertFalse(node0.isNot());
1324:       assertFalse(node0.isScript());
1325:       assertFalse(node0.isObjectLit());
1326:       assertEquals((-1), node0.getCharno());
1327:       assertFalse(node0.isInc());
1328:       assertFalse(node0.isSwitch());
1329:       assertFalse(node0.isLabelName());
1330:       assertFalse(node0.isThrow());
1331:       assertFalse(node0.isCast());
1332:       assertFalse(node0.isFalse());
1333:       assertEquals((-1), node0.getLineno());
1334:       assertFalse(node0.isNE());
1335:       assertFalse(node0.isIf());
1336:       assertFalse(node0.isCase());
1337:       assertFalse(node0.isGetterDef());
1338:       assertFalse(node0.isIn());
1339:       assertFalse(node0.isNumber());
1340:       assertFalse(node0.isTry());
1341:       assertEquals(832, node0.getType());
1342:       assertFalse(node0.isHook());
1343:       assertFalse(node0.isBlock());
1344:       assertFalse(node0.hasOneChild());
1345:       assertFalse(node0.isWith());
1346:       assertFalse(node0.isFor());
1347:       assertFalse(node0.hasMoreThanOneChild());
1348:       assertFalse(node0.isCatch());
1349:       assertFalse(node0.isInstanceOf());
1350:       assertFalse(node0.isRegExp());
1351:       
1352:       node0.setType(51);
1353:       assertSame(node0, node1);
1354:       assertFalse(node0.isSetterDef());
1355:       assertFalse(node0.isParamList());
1356:       assertFalse(node0.isStringKey());
1357:       assertFalse(node0.isNull());
1358:       assertFalse(node0.isDebugger());
1359:       assertFalse(node0.isNew());
1360:       assertFalse(node0.isAdd());
1361:       assertFalse(node0.isVar());
1362:       assertFalse(node0.isArrayLit());
1363:       assertFalse(node0.isDefaultCase());
1364:       assertEquals(0, node0.getChildCount());
1365:       assertFalse(node0.isContinue());
1366:       assertFalse(node0.isFunction());
1367:       assertFalse(node0.isAssignAdd());
1368:       assertFalse(node0.isLabel());
1369:       assertFalse(node0.isOr());
1370:       assertFalse(node0.isReturn());
1371:       assertFalse(node0.isDelProp());
1372:       assertFalse(node0.isEmpty());
1373:       assertTrue(node0.isIn());
1374:       assertFalse(node0.isDo());
1375:       assertFalse(node0.isString());
1376:       assertEquals((-1), node0.getSourcePosition());
1377:       assertFalse(node0.isTrue());
1378:       assertFalse(node0.isExprResult());
1379:       assertFalse(node0.isVoid());
1380:       assertFalse(node0.isName());
1381:       assertFalse(node0.isAssign());
1382:       assertFalse(node0.isWhile());
1383:       assertFalse(node0.isBreak());
1384:       assertFalse(node0.hasChildren());
1385:       assertFalse(node0.isGetElem());
1386:       assertFalse(node0.isCall());
1387:       assertFalse(node0.isComma());
1388:       assertFalse(node0.isDec());
1389:       assertFalse(node0.isTypeOf());
1390:       assertFalse(node0.isGetProp());
1391:       assertFalse(node0.isThis());
1392:       assertFalse(node0.isAnd());
1393:       assertFalse(node0.isNot());
1394:       assertFalse(node0.isScript());
1395:       assertFalse(node0.isObjectLit());
1396:       assertEquals((-1), node0.getCharno());
1397:       assertFalse(node0.isInc());
1398:       assertFalse(node0.isSwitch());
1399:       assertFalse(node0.isLabelName());
1400:       assertFalse(node0.isThrow());
1401:       assertFalse(node0.isCast());
1402:       assertFalse(node0.isFalse());
1403:       assertEquals((-1), node0.getLineno());
1404:       assertFalse(node0.isNE());
1405:       assertFalse(node0.isIf());
1406:       assertFalse(node0.isCase());
1407:       assertEquals(51, node0.getType());
1408:       assertFalse(node0.isGetterDef());
1409:       assertFalse(node0.isNumber());
1410:       assertFalse(node0.isTry());
1411:       assertFalse(node0.isHook());
1412:       assertFalse(node0.isBlock());
1413:       assertFalse(node0.hasOneChild());
1414:       assertFalse(node0.isWith());
1415:       assertFalse(node0.isFor());
1416:       assertFalse(node0.hasMoreThanOneChild());
1417:       assertFalse(node0.isCatch());
1418:       assertFalse(node0.isInstanceOf());
1419:       assertFalse(node0.isRegExp());
1420:       assertEquals(56, Node.CHANGE_TIME);
1421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1422:       assertEquals(47, Node.IS_DISPATCHER);
1423:       assertEquals(37, Node.OPT_ARG_NAME);
1424:       assertEquals(2, Node.POST_FLAG);
1425:       assertEquals(46, Node.IS_NAMESPACE);
1426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1427:       assertEquals(12, Node.COLUMN_BITS);
1428:       assertEquals(36, Node.QUOTED_PROP);
1429:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1430:       assertEquals(57, Node.LAST_PROP);
1431:       assertEquals(30, Node.VAR_ARGS_NAME);
1432:       assertEquals(49, Node.DIRECT_EVAL);
1433:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1434:       assertEquals(57, Node.REFLECTED_OBJECT);
1435:       assertEquals(53, Node.INPUT_ID);
1436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1437:       assertEquals(52, Node.LENGTH);
1438:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1439:       assertEquals(55, Node.INFERRED_FUNCTION);
1440:       assertEquals(29, Node.JSDOC_INFO_PROP);
1441:       assertEquals(8, Node.FLAG_NO_THROWS);
1442:       assertEquals(39, Node.EMPTY_BLOCK);
1443:       assertEquals(48, Node.DIRECTIVES);
1444:       assertEquals(50, Node.FREE_CALL);
1445:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1446:       assertEquals(4095, Node.COLUMN_MASK);
1447:       assertEquals(40, Node.ORIGINALNAME_PROP);
1448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1449:       assertEquals(43, Node.IS_CONSTANT_NAME);
1450:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1451:       assertEquals(54, Node.SLASH_V);
1452:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1453:       assertEquals(32, Node.INCRDECR_PROP);
1454:       assertEquals(1, Node.DECR_FLAG);
1455:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1456:       
1457:       Node node2 = Node.newString(91, "");
1458:       assertNotNull(node2);
1459:       assertFalse(node2.equals((Object)node0));
1460:       assertFalse(node2.equals((Object)node1));
1461:       assertFalse(node2.isAssignAdd());
1462:       assertFalse(node2.hasChildren());
1463:       assertFalse(node2.isNumber());
1464:       assertFalse(node2.isReturn());
1465:       assertFalse(node2.isLabel());
1466:       assertFalse(node2.isOr());
1467:       assertFalse(node2.isTypeOf());
1468:       assertFalse(node2.isAssign());
1469:       assertEquals((-1), node2.getSourcePosition());
1470:       assertFalse(node2.isDec());
1471:       assertFalse(node2.isContinue());
1472:       assertFalse(node2.hasMoreThanOneChild());
1473:       assertFalse(node2.isGetElem());
1474:       assertFalse(node2.isCast());
1475:       assertFalse(node2.isLabelName());
1476:       assertEquals((-1), node2.getLineno());
1477:       assertFalse(node2.isAdd());
1478:       assertFalse(node2.isVar());
1479:       assertFalse(node2.isDo());
1480:       assertFalse(node2.isNew());
1481:       assertFalse(node2.isGetProp());
1482:       assertFalse(node2.isNull());
1483:       assertFalse(node2.isComma());
1484:       assertFalse(node2.isAnd());
1485:       assertFalse(node2.isCall());
1486:       assertFalse(node2.isFalse());
1487:       assertEquals(91, node2.getType());
1488:       assertFalse(node2.isBreak());
1489:       assertFalse(node2.isName());
1490:       assertFalse(node2.isDebugger());
1491:       assertFalse(node2.isExprResult());
1492:       assertFalse(node2.isNot());
1493:       assertFalse(node2.isObjectLit());
1494:       assertFalse(node2.isWhile());
1495:       assertFalse(node2.isString());
1496:       assertFalse(node2.isNE());
1497:       assertFalse(node2.isGetterDef());
1498:       assertFalse(node2.isIn());
1499:       assertFalse(node2.isIf());
1500:       assertFalse(node2.isDelProp());
1501:       assertFalse(node2.isArrayLit());
1502:       assertFalse(node2.isVoid());
1503:       assertFalse(node2.isFunction());
1504:       assertFalse(node2.isTrue());
1505:       assertFalse(node2.isInc());
1506:       assertFalse(node2.isThrow());
1507:       assertFalse(node2.isEmpty());
1508:       assertFalse(node2.isDefaultCase());
1509:       assertFalse(node2.isSetterDef());
1510:       assertFalse(node2.isThis());
1511:       assertFalse(node2.isParamList());
1512:       assertEquals(0, node2.getChildCount());
1513:       assertFalse(node2.isStringKey());
1514:       assertFalse(node2.isCatch());
1515:       assertFalse(node2.isInstanceOf());
1516:       assertEquals((-1), node2.getCharno());
1517:       assertFalse(node2.isSwitch());
1518:       assertFalse(node2.isBlock());
1519:       assertFalse(node2.isScript());
1520:       assertFalse(node2.isHook());
1521:       assertFalse(node2.isWith());
1522:       assertFalse(node2.isRegExp());
1523:       assertFalse(node2.isFor());
1524:       assertFalse(node2.isTry());
1525:       assertFalse(node2.isCase());
1526:       assertFalse(node2.hasOneChild());
1527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1528:       assertEquals(50, Node.FREE_CALL);
1529:       assertEquals(40, Node.ORIGINALNAME_PROP);
1530:       assertEquals(8, Node.FLAG_NO_THROWS);
1531:       assertEquals(39, Node.EMPTY_BLOCK);
1532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1534:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1535:       assertEquals(57, Node.LAST_PROP);
1536:       assertEquals(49, Node.DIRECT_EVAL);
1537:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1538:       assertEquals(36, Node.QUOTED_PROP);
1539:       assertEquals(55, Node.INFERRED_FUNCTION);
1540:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1541:       assertEquals(4095, Node.COLUMN_MASK);
1542:       assertEquals(52, Node.LENGTH);
1543:       assertEquals(57, Node.REFLECTED_OBJECT);
1544:       assertEquals(37, Node.OPT_ARG_NAME);
1545:       assertEquals(48, Node.DIRECTIVES);
1546:       assertEquals(56, Node.CHANGE_TIME);
1547:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1548:       assertEquals(29, Node.JSDOC_INFO_PROP);
1549:       assertEquals(47, Node.IS_DISPATCHER);
1550:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1551:       assertEquals(2, Node.POST_FLAG);
1552:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1553:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1554:       assertEquals(32, Node.INCRDECR_PROP);
1555:       assertEquals(53, Node.INPUT_ID);
1556:       assertEquals(12, Node.COLUMN_BITS);
1557:       assertEquals(30, Node.VAR_ARGS_NAME);
1558:       assertEquals(1, Node.DECR_FLAG);
1559:       assertEquals(46, Node.IS_NAMESPACE);
1560:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1561:       assertEquals(54, Node.SLASH_V);
1562:       assertEquals(43, Node.IS_CONSTANT_NAME);
1563:       
1564:       boolean boolean4 = node1.isCast();
1565:       assertSame(node0, node1);
1566:       assertSame(node1, node0);
1567:       assertFalse(node0.equals((Object)node2));
1568:       assertFalse(node1.equals((Object)node2));
1569:       assertTrue(boolean4 == boolean0);
1570:       assertTrue(boolean4 == boolean2);
1571:       assertTrue(boolean4 == boolean3);
1572:       assertTrue(boolean4 == boolean1);
1573:       assertFalse(boolean4);
1574:       assertFalse(node0.isSetterDef());
1575:       assertFalse(node0.isParamList());
1576:       assertFalse(node0.isStringKey());
1577:       assertFalse(node0.isNull());
1578:       assertFalse(node0.isDebugger());
1579:       assertFalse(node0.isNew());
1580:       assertFalse(node0.isAdd());
1581:       assertFalse(node0.isVar());
1582:       assertFalse(node0.isArrayLit());
1583:       assertFalse(node0.isDefaultCase());
1584:       assertEquals(0, node0.getChildCount());
1585:       assertFalse(node0.isContinue());
1586:       assertFalse(node0.isFunction());
1587:       assertFalse(node0.isAssignAdd());
1588:       assertFalse(node0.isLabel());
1589:       assertFalse(node0.isOr());
1590:       assertFalse(node0.isReturn());
1591:       assertFalse(node0.isDelProp());
1592:       assertFalse(node0.isEmpty());
1593:       assertTrue(node0.isIn());
1594:       assertFalse(node0.isDo());
1595:       assertFalse(node0.isString());
1596:       assertEquals((-1), node0.getSourcePosition());
1597:       assertFalse(node0.isTrue());
1598:       assertFalse(node0.isExprResult());
1599:       assertFalse(node0.isVoid());
1600:       assertFalse(node0.isName());
1601:       assertFalse(node0.isAssign());
1602:       assertFalse(node0.isWhile());
1603:       assertFalse(node0.isBreak());
1604:       assertFalse(node0.hasChildren());
1605:       assertFalse(node0.isGetElem());
1606:       assertFalse(node0.isCall());
1607:       assertFalse(node0.isComma());
1608:       assertFalse(node0.isDec());
1609:       assertFalse(node0.isTypeOf());
1610:       assertFalse(node0.isGetProp());
1611:       assertFalse(node0.isThis());
1612:       assertFalse(node0.isAnd());
1613:       assertFalse(node0.isNot());
1614:       assertFalse(node0.isScript());
1615:       assertFalse(node0.isObjectLit());
1616:       assertEquals((-1), node0.getCharno());
1617:       assertFalse(node0.isInc());
1618:       assertFalse(node0.isSwitch());
1619:       assertFalse(node0.isLabelName());
1620:       assertFalse(node0.isThrow());
1621:       assertFalse(node0.isCast());
1622:       assertFalse(node0.isFalse());
1623:       assertEquals((-1), node0.getLineno());
1624:       assertFalse(node0.isNE());
1625:       assertFalse(node0.isIf());
1626:       assertFalse(node0.isCase());
1627:       assertEquals(51, node0.getType());
1628:       assertFalse(node0.isGetterDef());
1629:       assertFalse(node0.isNumber());
1630:       assertFalse(node0.isTry());
1631:       assertFalse(node0.isHook());
1632:       assertFalse(node0.isBlock());
1633:       assertFalse(node0.hasOneChild());
1634:       assertFalse(node0.isWith());
1635:       assertFalse(node0.isFor());
1636:       assertFalse(node0.hasMoreThanOneChild());
1637:       assertFalse(node0.isCatch());
1638:       assertFalse(node0.isInstanceOf());
1639:       assertFalse(node0.isRegExp());
1640:       assertFalse(node1.isNew());
1641:       assertFalse(node1.isWhile());
1642:       assertFalse(node1.isVar());
1643:       assertFalse(node1.isBlock());
1644:       assertFalse(node1.isContinue());
1645:       assertFalse(node1.isCall());
1646:       assertFalse(node1.isStringKey());
1647:       assertFalse(node1.isName());
1648:       assertFalse(node1.hasMoreThanOneChild());
1649:       assertEquals((-1), node1.getLineno());
1650:       assertFalse(node1.isParamList());
1651:       assertEquals(51, node1.getType());
1652:       assertFalse(node1.isTypeOf());
1653:       assertFalse(node1.isNumber());
1654:       assertFalse(node1.hasChildren());
1655:       assertEquals((-1), node1.getSourcePosition());
1656:       assertFalse(node1.isDec());
1657:       assertFalse(node1.isReturn());
1658:       assertFalse(node1.hasOneChild());
1659:       assertFalse(node1.isTrue());
1660:       assertFalse(node1.isVoid());
1661:       assertFalse(node1.isExprResult());
1662:       assertFalse(node1.isDefaultCase());
1663:       assertFalse(node1.isLabelName());
1664:       assertFalse(node1.isAssign());
1665:       assertFalse(node1.isDelProp());
1666:       assertFalse(node1.isArrayLit());
1667:       assertFalse(node1.isGetElem());
1668:       assertFalse(node1.isAssignAdd());
1669:       assertFalse(node1.isOr());
1670:       assertEquals(0, node1.getChildCount());
1671:       assertFalse(node1.isLabel());
1672:       assertFalse(node1.isNull());
1673:       assertTrue(node1.isIn());
1674:       assertFalse(node1.isDo());
1675:       assertFalse(node1.isEmpty());
1676:       assertFalse(node1.isAdd());
1677:       assertEquals((-1), node1.getCharno());
1678:       assertFalse(node1.isSwitch());
1679:       assertFalse(node1.isHook());
1680:       assertFalse(node1.isFalse());
1681:       assertFalse(node1.isBreak());
1682:       assertFalse(node1.isComma());
1683:       assertFalse(node1.isGetterDef());
1684:       assertFalse(node1.isFor());
1685:       assertFalse(node1.isThis());
1686:       assertFalse(node1.isObjectLit());
1687:       assertFalse(node1.isNot());
1688:       assertFalse(node1.isString());
1689:       assertFalse(node1.isCase());
1690:       assertFalse(node1.isScript());
1691:       assertFalse(node1.isGetProp());
1692:       assertFalse(node1.isDebugger());
1693:       assertFalse(node1.isRegExp());
1694:       assertFalse(node1.isTry());
1695:       assertFalse(node1.isFunction());
1696:       assertFalse(node1.isAnd());
1697:       assertFalse(node1.isCatch());
1698:       assertFalse(node1.isCast());
1699:       assertFalse(node1.isWith());
1700:       assertFalse(node1.isInstanceOf());
1701:       assertFalse(node1.isIf());
1702:       assertFalse(node1.isNE());
1703:       assertFalse(node1.isThrow());
1704:       assertFalse(node1.isSetterDef());
1705:       assertFalse(node1.isInc());
1706:       assertEquals(56, Node.CHANGE_TIME);
1707:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1708:       assertEquals(47, Node.IS_DISPATCHER);
1709:       assertEquals(37, Node.OPT_ARG_NAME);
1710:       assertEquals(2, Node.POST_FLAG);
1711:       assertEquals(46, Node.IS_NAMESPACE);
1712:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1713:       assertEquals(12, Node.COLUMN_BITS);
1714:       assertEquals(36, Node.QUOTED_PROP);
1715:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1716:       assertEquals(57, Node.LAST_PROP);
1717:       assertEquals(30, Node.VAR_ARGS_NAME);
1718:       assertEquals(49, Node.DIRECT_EVAL);
1719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1720:       assertEquals(57, Node.REFLECTED_OBJECT);
1721:       assertEquals(53, Node.INPUT_ID);
1722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1723:       assertEquals(52, Node.LENGTH);
1724:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1725:       assertEquals(55, Node.INFERRED_FUNCTION);
1726:       assertEquals(29, Node.JSDOC_INFO_PROP);
1727:       assertEquals(8, Node.FLAG_NO_THROWS);
1728:       assertEquals(39, Node.EMPTY_BLOCK);
1729:       assertEquals(48, Node.DIRECTIVES);
1730:       assertEquals(50, Node.FREE_CALL);
1731:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1732:       assertEquals(4095, Node.COLUMN_MASK);
1733:       assertEquals(40, Node.ORIGINALNAME_PROP);
1734:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1735:       assertEquals(43, Node.IS_CONSTANT_NAME);
1736:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1737:       assertEquals(54, Node.SLASH_V);
1738:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1739:       assertEquals(32, Node.INCRDECR_PROP);
1740:       assertEquals(1, Node.DECR_FLAG);
1741:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1742:       assertEquals(43, Node.IS_CONSTANT_NAME);
1743:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1744:       assertEquals(55, Node.INFERRED_FUNCTION);
1745:       assertEquals(4095, Node.COLUMN_MASK);
1746:       assertEquals(36, Node.QUOTED_PROP);
1747:       assertEquals(53, Node.INPUT_ID);
1748:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1749:       assertEquals(39, Node.EMPTY_BLOCK);
1750:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1751:       assertEquals(47, Node.IS_DISPATCHER);
1752:       assertEquals(2, Node.POST_FLAG);
1753:       assertEquals(50, Node.FREE_CALL);
1754:       assertEquals(46, Node.IS_NAMESPACE);
1755:       assertEquals(54, Node.SLASH_V);
1756:       assertEquals(40, Node.ORIGINALNAME_PROP);
1757:       assertEquals(30, Node.VAR_ARGS_NAME);
1758:       assertEquals(57, Node.LAST_PROP);
1759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1760:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1761:       assertEquals(52, Node.LENGTH);
1762:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1763:       assertEquals(12, Node.COLUMN_BITS);
1764:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1765:       assertEquals(1, Node.DECR_FLAG);
1766:       assertEquals(32, Node.INCRDECR_PROP);
1767:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1768:       assertEquals(56, Node.CHANGE_TIME);
1769:       assertEquals(29, Node.JSDOC_INFO_PROP);
1770:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1771:       assertEquals(8, Node.FLAG_NO_THROWS);
1772:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1773:       assertEquals(57, Node.REFLECTED_OBJECT);
1774:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1775:       assertEquals(37, Node.OPT_ARG_NAME);
1776:       assertEquals(48, Node.DIRECTIVES);
1777:       assertEquals(49, Node.DIRECT_EVAL);
1778:   }
1779: }
RegularFileObject[/tmp/EvoSuite_76_1628255600979/com/google/javascript/rhino/Node_76_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:21 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_76_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_76_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_76_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.common.collect.ImmutableSet",
340:       "com.google.common.collect.EmptyImmutableSet",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.common.collect.Sets",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.TemplatizedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractMultimap$Values",
351:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
352:       "com.google.common.collect.AbstractMapBasedMultimap$1",
353:       "com.google.common.collect.Multimaps$Entries",
354:       "com.google.common.collect.AbstractMultimap$Entries",
355:       "com.google.common.collect.AbstractMapBasedMultimap$2",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Sets$ImprovedAbstractSet",
365:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
366:       "com.google.common.collect.Hashing",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 13:13:21.410 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2827));
assertNotNull(node0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(Integer.MAX_VALUE, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertEquals(Integer.MAX_VALUE, node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node0.setType(5036);
assertEquals(5036, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertEquals(5036, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(iterable0.contains(node0));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node1 = node0.getAncestor(0);
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);
assertEquals(5036, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertEquals(5036, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean1 = node1.isQualifiedName();
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertEquals(5036, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertEquals(5036, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean2 = node0.wasEmptyNode();
assertSame(node0, node1);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertEquals(5036, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean3 = node0.isThrow();
assertSame(node0, node1);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3);
assertEquals(5036, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node1.setCharno(46);
assertSame(node0, node1);
assertSame(node1, node0);
assertEquals(5036, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertEquals(5036, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

node0.type = 832;
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertEquals(832, node0.getType());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());

node0.setType(51);
assertSame(node0, node1);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isIn());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertEquals(51, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node2 = Node.newString(91, "");
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasChildren());
assertFalse(node2.isNumber());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isComma());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isFalse());
assertEquals(91, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWhile());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isStringKey());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isHook());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isFor());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

boolean boolean4 = node1.isCast();
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertFalse(boolean4);
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDebugger());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertTrue(node0.isIn());
assertFalse(node0.isDo());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertEquals(51, node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isParamList());
assertEquals(51, node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNumber());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);


[MASTER] 13:13:27.397 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_102_1628255607050/com/google/javascript/rhino/Node_102_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_102_1628255607050/com/google/javascript/rhino/Node_102_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:27.397 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:27.397 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:27.398 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 403
[MASTER] 13:13:27.399 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_102_1628255607050/com/google/javascript/rhino/Node_102_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:27 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_102_tmp__ESTest extends Node_102_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2827));
22:       assertNotNull(node0);
23:       assertFalse(node0.isCatch());
24:       assertEquals(0, node0.getChildCount());
25:       assertFalse(node0.isSetterDef());
26:       assertFalse(node0.isDefaultCase());
27:       assertFalse(node0.isFunction());
28:       assertFalse(node0.isRegExp());
29:       assertFalse(node0.isVar());
30:       assertFalse(node0.isName());
31:       assertFalse(node0.isEmpty());
32:       assertFalse(node0.isAdd());
33:       assertFalse(node0.isNew());
34:       assertFalse(node0.isCall());
35:       assertFalse(node0.isNE());
36:       assertFalse(node0.isVoid());
37:       assertFalse(node0.isIf());
38:       assertFalse(node0.isDelProp());
39:       assertFalse(node0.isTrue());
40:       assertFalse(node0.isNull());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertFalse(node0.isDo());
43:       assertFalse(node0.isCase());
44:       assertEquals((-1), node0.getLineno());
45:       assertFalse(node0.isFor());
46:       assertFalse(node0.isAssignAdd());
47:       assertFalse(node0.isLabel());
48:       assertFalse(node0.isHook());
49:       assertFalse(node0.isBlock());
50:       assertFalse(node0.isArrayLit());
51:       assertFalse(node0.hasOneChild());
52:       assertFalse(node0.isTry());
53:       assertFalse(node0.isLabelName());
54:       assertFalse(node0.isSwitch());
55:       assertFalse(node0.isScript());
56:       assertFalse(node0.isParamList());
57:       assertFalse(node0.isGetterDef());
58:       assertFalse(node0.isNumber());
59:       assertFalse(node0.isStringKey());
60:       assertEquals((-1), node0.getCharno());
61:       assertFalse(node0.isInstanceOf());
62:       assertFalse(node0.isAnd());
63:       assertFalse(node0.isObjectLit());
64:       assertFalse(node0.isWith());
65:       assertFalse(node0.isGetProp());
66:       assertFalse(node0.isComma());
67:       assertFalse(node0.isThrow());
68:       assertFalse(node0.isThis());
69:       assertFalse(node0.isBreak());
70:       assertFalse(node0.isInc());
71:       assertFalse(node0.isExprResult());
72:       assertFalse(node0.isGetElem());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isIn());
75:       assertFalse(node0.isContinue());
76:       assertFalse(node0.isString());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isTypeOf());
79:       assertFalse(node0.isAssign());
80:       assertFalse(node0.isWhile());
81:       assertFalse(node0.hasChildren());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.isFalse());
85:       assertEquals(Integer.MAX_VALUE, node0.getType());
86:       assertFalse(node0.isDebugger());
87:       assertEquals((-1), node0.getSourcePosition());
88:       assertFalse(node0.isNot());
89:       assertEquals(46, Node.IS_NAMESPACE);
90:       assertEquals(56, Node.CHANGE_TIME);
91:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
92:       assertEquals(37, Node.OPT_ARG_NAME);
93:       assertEquals(32, Node.INCRDECR_PROP);
94:       assertEquals(1, Node.DECR_FLAG);
95:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
96:       assertEquals(29, Node.JSDOC_INFO_PROP);
97:       assertEquals(51, Node.STATIC_SOURCE_FILE);
98:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
99:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
100:       assertEquals(49, Node.DIRECT_EVAL);
101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(4095, Node.COLUMN_MASK);
105:       assertEquals(39, Node.EMPTY_BLOCK);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(48, Node.DIRECTIVES);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
110:       assertEquals(55, Node.INFERRED_FUNCTION);
111:       assertEquals(36, Node.QUOTED_PROP);
112:       assertEquals(57, Node.REFLECTED_OBJECT);
113:       assertEquals(8, Node.FLAG_NO_THROWS);
114:       assertEquals(50, Node.FREE_CALL);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(54, Node.SLASH_V);
118:       assertEquals(43, Node.IS_CONSTANT_NAME);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(57, Node.LAST_PROP);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(47, Node.IS_DISPATCHER);
123:       assertEquals(2, Node.POST_FLAG);
124:       assertEquals(30, Node.VAR_ARGS_NAME);
125:       
126:       boolean boolean0 = node0.isOr();
127:       assertFalse(boolean0);
128:       assertFalse(node0.isCatch());
129:       assertEquals(0, node0.getChildCount());
130:       assertFalse(node0.isSetterDef());
131:       assertFalse(node0.isDefaultCase());
132:       assertFalse(node0.isFunction());
133:       assertFalse(node0.isRegExp());
134:       assertFalse(node0.isVar());
135:       assertFalse(node0.isName());
136:       assertFalse(node0.isEmpty());
137:       assertFalse(node0.isAdd());
138:       assertFalse(node0.isNew());
139:       assertFalse(node0.isCall());
140:       assertFalse(node0.isNE());
141:       assertFalse(node0.isVoid());
142:       assertFalse(node0.isIf());
143:       assertFalse(node0.isDelProp());
144:       assertFalse(node0.isTrue());
145:       assertFalse(node0.isNull());
146:       assertFalse(node0.hasMoreThanOneChild());
147:       assertFalse(node0.isDo());
148:       assertFalse(node0.isCase());
149:       assertEquals((-1), node0.getLineno());
150:       assertFalse(node0.isFor());
151:       assertFalse(node0.isAssignAdd());
152:       assertFalse(node0.isLabel());
153:       assertFalse(node0.isHook());
154:       assertFalse(node0.isBlock());
155:       assertFalse(node0.isArrayLit());
156:       assertFalse(node0.hasOneChild());
157:       assertFalse(node0.isTry());
158:       assertFalse(node0.isLabelName());
159:       assertFalse(node0.isSwitch());
160:       assertFalse(node0.isScript());
161:       assertFalse(node0.isParamList());
162:       assertFalse(node0.isGetterDef());
163:       assertFalse(node0.isNumber());
164:       assertFalse(node0.isStringKey());
165:       assertEquals((-1), node0.getCharno());
166:       assertFalse(node0.isInstanceOf());
167:       assertFalse(node0.isAnd());
168:       assertFalse(node0.isObjectLit());
169:       assertFalse(node0.isWith());
170:       assertFalse(node0.isGetProp());
171:       assertFalse(node0.isComma());
172:       assertFalse(node0.isThrow());
173:       assertFalse(node0.isThis());
174:       assertFalse(node0.isBreak());
175:       assertFalse(node0.isInc());
176:       assertFalse(node0.isExprResult());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isOr());
179:       assertFalse(node0.isIn());
180:       assertFalse(node0.isContinue());
181:       assertFalse(node0.isString());
182:       assertFalse(node0.isDec());
183:       assertFalse(node0.isTypeOf());
184:       assertFalse(node0.isAssign());
185:       assertFalse(node0.isWhile());
186:       assertFalse(node0.hasChildren());
187:       assertFalse(node0.isReturn());
188:       assertFalse(node0.isCast());
189:       assertFalse(node0.isFalse());
190:       assertEquals(Integer.MAX_VALUE, node0.getType());
191:       assertFalse(node0.isDebugger());
192:       assertEquals((-1), node0.getSourcePosition());
193:       assertFalse(node0.isNot());
194:       assertEquals(46, Node.IS_NAMESPACE);
195:       assertEquals(56, Node.CHANGE_TIME);
196:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
197:       assertEquals(37, Node.OPT_ARG_NAME);
198:       assertEquals(32, Node.INCRDECR_PROP);
199:       assertEquals(1, Node.DECR_FLAG);
200:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
201:       assertEquals(29, Node.JSDOC_INFO_PROP);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
204:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
205:       assertEquals(49, Node.DIRECT_EVAL);
206:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(4095, Node.COLUMN_MASK);
210:       assertEquals(39, Node.EMPTY_BLOCK);
211:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
214:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(36, Node.QUOTED_PROP);
217:       assertEquals(57, Node.REFLECTED_OBJECT);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(54, Node.SLASH_V);
223:       assertEquals(43, Node.IS_CONSTANT_NAME);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(47, Node.IS_DISPATCHER);
228:       assertEquals(2, Node.POST_FLAG);
229:       assertEquals(30, Node.VAR_ARGS_NAME);
230:       
231:       node0.setType(5036);
232:       assertFalse(node0.isCatch());
233:       assertEquals(0, node0.getChildCount());
234:       assertFalse(node0.isSetterDef());
235:       assertFalse(node0.isDefaultCase());
236:       assertFalse(node0.isFunction());
237:       assertFalse(node0.isRegExp());
238:       assertEquals(5036, node0.getType());
239:       assertFalse(node0.isVar());
240:       assertFalse(node0.isName());
241:       assertFalse(node0.isEmpty());
242:       assertFalse(node0.isAdd());
243:       assertFalse(node0.isNew());
244:       assertFalse(node0.isCall());
245:       assertFalse(node0.isNE());
246:       assertFalse(node0.isVoid());
247:       assertFalse(node0.isIf());
248:       assertFalse(node0.isDelProp());
249:       assertFalse(node0.isTrue());
250:       assertFalse(node0.isNull());
251:       assertFalse(node0.hasMoreThanOneChild());
252:       assertFalse(node0.isDo());
253:       assertFalse(node0.isCase());
254:       assertEquals((-1), node0.getLineno());
255:       assertFalse(node0.isFor());
256:       assertFalse(node0.isAssignAdd());
257:       assertFalse(node0.isLabel());
258:       assertFalse(node0.isHook());
259:       assertFalse(node0.isBlock());
260:       assertFalse(node0.isArrayLit());
261:       assertFalse(node0.hasOneChild());
262:       assertFalse(node0.isTry());
263:       assertFalse(node0.isLabelName());
264:       assertFalse(node0.isSwitch());
265:       assertFalse(node0.isScript());
266:       assertFalse(node0.isParamList());
267:       assertFalse(node0.isGetterDef());
268:       assertFalse(node0.isNumber());
269:       assertFalse(node0.isStringKey());
270:       assertEquals((-1), node0.getCharno());
271:       assertFalse(node0.isInstanceOf());
272:       assertFalse(node0.isAnd());
273:       assertFalse(node0.isObjectLit());
274:       assertFalse(node0.isWith());
275:       assertFalse(node0.isGetProp());
276:       assertFalse(node0.isComma());
277:       assertFalse(node0.isThrow());
278:       assertFalse(node0.isThis());
279:       assertFalse(node0.isBreak());
280:       assertFalse(node0.isInc());
281:       assertFalse(node0.isExprResult());
282:       assertFalse(node0.isGetElem());
283:       assertFalse(node0.isOr());
284:       assertFalse(node0.isIn());
285:       assertFalse(node0.isContinue());
286:       assertFalse(node0.isString());
287:       assertFalse(node0.isDec());
288:       assertFalse(node0.isTypeOf());
289:       assertFalse(node0.isAssign());
290:       assertFalse(node0.isWhile());
291:       assertFalse(node0.hasChildren());
292:       assertFalse(node0.isReturn());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.isFalse());
295:       assertFalse(node0.isDebugger());
296:       assertEquals((-1), node0.getSourcePosition());
297:       assertFalse(node0.isNot());
298:       assertEquals(46, Node.IS_NAMESPACE);
299:       assertEquals(56, Node.CHANGE_TIME);
300:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
301:       assertEquals(37, Node.OPT_ARG_NAME);
302:       assertEquals(32, Node.INCRDECR_PROP);
303:       assertEquals(1, Node.DECR_FLAG);
304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
305:       assertEquals(29, Node.JSDOC_INFO_PROP);
306:       assertEquals(51, Node.STATIC_SOURCE_FILE);
307:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
309:       assertEquals(49, Node.DIRECT_EVAL);
310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
312:       assertEquals(12, Node.COLUMN_BITS);
313:       assertEquals(4095, Node.COLUMN_MASK);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
316:       assertEquals(48, Node.DIRECTIVES);
317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
318:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
319:       assertEquals(55, Node.INFERRED_FUNCTION);
320:       assertEquals(36, Node.QUOTED_PROP);
321:       assertEquals(57, Node.REFLECTED_OBJECT);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(50, Node.FREE_CALL);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(52, Node.LENGTH);
326:       assertEquals(54, Node.SLASH_V);
327:       assertEquals(43, Node.IS_CONSTANT_NAME);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(57, Node.LAST_PROP);
330:       assertEquals(40, Node.ORIGINALNAME_PROP);
331:       assertEquals(47, Node.IS_DISPATCHER);
332:       assertEquals(2, Node.POST_FLAG);
333:       assertEquals(30, Node.VAR_ARGS_NAME);
334:       
335:       Iterable<Node> iterable0 = node0.children();
336:       assertNotNull(iterable0);
337:       assertFalse(node0.isCatch());
338:       assertEquals(0, node0.getChildCount());
339:       assertFalse(node0.isSetterDef());
340:       assertFalse(node0.isDefaultCase());
341:       assertFalse(node0.isFunction());
342:       assertFalse(node0.isRegExp());
343:       assertEquals(5036, node0.getType());
344:       assertFalse(node0.isVar());
345:       assertFalse(node0.isName());
346:       assertFalse(node0.isEmpty());
347:       assertFalse(node0.isAdd());
348:       assertFalse(node0.isNew());
349:       assertFalse(node0.isCall());
350:       assertFalse(node0.isNE());
351:       assertFalse(node0.isVoid());
352:       assertFalse(node0.isIf());
353:       assertFalse(node0.isDelProp());
354:       assertFalse(node0.isTrue());
355:       assertFalse(node0.isNull());
356:       assertFalse(node0.hasMoreThanOneChild());
357:       assertFalse(node0.isDo());
358:       assertFalse(node0.isCase());
359:       assertEquals((-1), node0.getLineno());
360:       assertFalse(node0.isFor());
361:       assertFalse(node0.isAssignAdd());
362:       assertFalse(node0.isLabel());
363:       assertFalse(node0.isHook());
364:       assertFalse(node0.isBlock());
365:       assertFalse(node0.isArrayLit());
366:       assertFalse(node0.hasOneChild());
367:       assertFalse(node0.isTry());
368:       assertFalse(node0.isLabelName());
369:       assertFalse(node0.isSwitch());
370:       assertFalse(node0.isScript());
371:       assertFalse(node0.isParamList());
372:       assertFalse(node0.isGetterDef());
373:       assertFalse(node0.isNumber());
374:       assertFalse(node0.isStringKey());
375:       assertEquals((-1), node0.getCharno());
376:       assertFalse(node0.isInstanceOf());
377:       assertFalse(node0.isAnd());
378:       assertFalse(node0.isObjectLit());
379:       assertFalse(node0.isWith());
380:       assertFalse(node0.isGetProp());
381:       assertFalse(node0.isComma());
382:       assertFalse(node0.isThrow());
383:       assertFalse(node0.isThis());
384:       assertFalse(node0.isBreak());
385:       assertFalse(node0.isInc());
386:       assertFalse(node0.isExprResult());
387:       assertFalse(node0.isGetElem());
388:       assertFalse(node0.isOr());
389:       assertFalse(node0.isIn());
390:       assertFalse(node0.isContinue());
391:       assertFalse(node0.isString());
392:       assertFalse(node0.isDec());
393:       assertFalse(node0.isTypeOf());
394:       assertFalse(node0.isAssign());
395:       assertFalse(node0.isWhile());
396:       assertFalse(node0.hasChildren());
397:       assertFalse(node0.isReturn());
398:       assertFalse(node0.isCast());
399:       assertFalse(node0.isFalse());
400:       assertFalse(node0.isDebugger());
401:       assertEquals((-1), node0.getSourcePosition());
402:       assertFalse(node0.isNot());
403:       assertFalse(iterable0.contains(node0));
404:       assertEquals(46, Node.IS_NAMESPACE);
405:       assertEquals(56, Node.CHANGE_TIME);
406:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
407:       assertEquals(37, Node.OPT_ARG_NAME);
408:       assertEquals(32, Node.INCRDECR_PROP);
409:       assertEquals(1, Node.DECR_FLAG);
410:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
411:       assertEquals(29, Node.JSDOC_INFO_PROP);
412:       assertEquals(51, Node.STATIC_SOURCE_FILE);
413:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
414:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
417:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
418:       assertEquals(12, Node.COLUMN_BITS);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(39, Node.EMPTY_BLOCK);
421:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
422:       assertEquals(48, Node.DIRECTIVES);
423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
424:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
425:       assertEquals(55, Node.INFERRED_FUNCTION);
426:       assertEquals(36, Node.QUOTED_PROP);
427:       assertEquals(57, Node.REFLECTED_OBJECT);
428:       assertEquals(8, Node.FLAG_NO_THROWS);
429:       assertEquals(50, Node.FREE_CALL);
430:       assertEquals(53, Node.INPUT_ID);
431:       assertEquals(52, Node.LENGTH);
432:       assertEquals(54, Node.SLASH_V);
433:       assertEquals(43, Node.IS_CONSTANT_NAME);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(57, Node.LAST_PROP);
436:       assertEquals(40, Node.ORIGINALNAME_PROP);
437:       assertEquals(47, Node.IS_DISPATCHER);
438:       assertEquals(2, Node.POST_FLAG);
439:       assertEquals(30, Node.VAR_ARGS_NAME);
440:       
441:       Node node1 = node0.getAncestor(0);
442:       assertSame(node0, node1);
443:       assertSame(node1, node0);
444:       assertNotNull(node1);
445:       assertFalse(node0.isCatch());
446:       assertEquals(0, node0.getChildCount());
447:       assertFalse(node0.isSetterDef());
448:       assertFalse(node0.isDefaultCase());
449:       assertFalse(node0.isFunction());
450:       assertFalse(node0.isRegExp());
451:       assertEquals(5036, node0.getType());
452:       assertFalse(node0.isVar());
453:       assertFalse(node0.isName());
454:       assertFalse(node0.isEmpty());
455:       assertFalse(node0.isAdd());
456:       assertFalse(node0.isNew());
457:       assertFalse(node0.isCall());
458:       assertFalse(node0.isNE());
459:       assertFalse(node0.isVoid());
460:       assertFalse(node0.isIf());
461:       assertFalse(node0.isDelProp());
462:       assertFalse(node0.isTrue());
463:       assertFalse(node0.isNull());
464:       assertFalse(node0.hasMoreThanOneChild());
465:       assertFalse(node0.isDo());
466:       assertFalse(node0.isCase());
467:       assertEquals((-1), node0.getLineno());
468:       assertFalse(node0.isFor());
469:       assertFalse(node0.isAssignAdd());
470:       assertFalse(node0.isLabel());
471:       assertFalse(node0.isHook());
472:       assertFalse(node0.isBlock());
473:       assertFalse(node0.isArrayLit());
474:       assertFalse(node0.hasOneChild());
475:       assertFalse(node0.isTry());
476:       assertFalse(node0.isLabelName());
477:       assertFalse(node0.isSwitch());
478:       assertFalse(node0.isScript());
479:       assertFalse(node0.isParamList());
480:       assertFalse(node0.isGetterDef());
481:       assertFalse(node0.isNumber());
482:       assertFalse(node0.isStringKey());
483:       assertEquals((-1), node0.getCharno());
484:       assertFalse(node0.isInstanceOf());
485:       assertFalse(node0.isAnd());
486:       assertFalse(node0.isObjectLit());
487:       assertFalse(node0.isWith());
488:       assertFalse(node0.isGetProp());
489:       assertFalse(node0.isComma());
490:       assertFalse(node0.isThrow());
491:       assertFalse(node0.isThis());
492:       assertFalse(node0.isBreak());
493:       assertFalse(node0.isInc());
494:       assertFalse(node0.isExprResult());
495:       assertFalse(node0.isGetElem());
496:       assertFalse(node0.isOr());
497:       assertFalse(node0.isIn());
498:       assertFalse(node0.isContinue());
499:       assertFalse(node0.isString());
500:       assertFalse(node0.isDec());
501:       assertFalse(node0.isTypeOf());
502:       assertFalse(node0.isAssign());
503:       assertFalse(node0.isWhile());
504:       assertFalse(node0.hasChildren());
505:       assertFalse(node0.isReturn());
506:       assertFalse(node0.isCast());
507:       assertFalse(node0.isFalse());
508:       assertFalse(node0.isDebugger());
509:       assertEquals((-1), node0.getSourcePosition());
510:       assertFalse(node0.isNot());
511:       assertFalse(node1.isName());
512:       assertFalse(node1.isStringKey());
513:       assertFalse(node1.isParamList());
514:       assertFalse(node1.isVar());
515:       assertFalse(node1.isNull());
516:       assertEquals(5036, node1.getType());
517:       assertFalse(node1.isAdd());
518:       assertFalse(node1.isSetterDef());
519:       assertFalse(node1.isNew());
520:       assertFalse(node1.isWhile());
521:       assertFalse(node1.hasMoreThanOneChild());
522:       assertFalse(node1.isRegExp());
523:       assertFalse(node1.isTrue());
524:       assertFalse(node1.isBlock());
525:       assertEquals((-1), node1.getLineno());
526:       assertFalse(node1.isCatch());
527:       assertFalse(node1.isVoid());
528:       assertFalse(node1.isCall());
529:       assertFalse(node1.isAssign());
530:       assertFalse(node1.isIf());
531:       assertFalse(node1.isNE());
532:       assertFalse(node1.isTypeOf());
533:       assertEquals((-1), node1.getSourcePosition());
534:       assertFalse(node1.isDec());
535:       assertFalse(node1.hasChildren());
536:       assertFalse(node1.isReturn());
537:       assertFalse(node1.isIn());
538:       assertFalse(node1.isNot());
539:       assertFalse(node1.isAnd());
540:       assertFalse(node1.isContinue());
541:       assertFalse(node1.isString());
542:       assertFalse(node1.isFunction());
543:       assertFalse(node1.isObjectLit());
544:       assertFalse(node1.isDebugger());
545:       assertFalse(node1.isCast());
546:       assertFalse(node1.isThrow());
547:       assertFalse(node1.isFalse());
548:       assertFalse(node1.isThis());
549:       assertFalse(node1.isComma());
550:       assertFalse(node1.isHook());
551:       assertFalse(node1.isInc());
552:       assertFalse(node1.isGetProp());
553:       assertFalse(node1.isWith());
554:       assertFalse(node1.isInstanceOf());
555:       assertFalse(node1.isExprResult());
556:       assertFalse(node1.isGetElem());
557:       assertFalse(node1.isBreak());
558:       assertFalse(node1.isGetterDef());
559:       assertFalse(node1.isEmpty());
560:       assertFalse(node1.isFor());
561:       assertFalse(node1.isLabelName());
562:       assertFalse(node1.isDelProp());
563:       assertFalse(node1.isNumber());
564:       assertFalse(node1.isLabel());
565:       assertFalse(node1.isTry());
566:       assertFalse(node1.isOr());
567:       assertFalse(node1.isAssignAdd());
568:       assertFalse(node1.isScript());
569:       assertFalse(node1.hasOneChild());
570:       assertFalse(node1.isCase());
571:       assertFalse(node1.isDo());
572:       assertFalse(node1.isDefaultCase());
573:       assertEquals(0, node1.getChildCount());
574:       assertEquals((-1), node1.getCharno());
575:       assertFalse(node1.isSwitch());
576:       assertFalse(node1.isArrayLit());
577:       assertEquals(46, Node.IS_NAMESPACE);
578:       assertEquals(56, Node.CHANGE_TIME);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(37, Node.OPT_ARG_NAME);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(1, Node.DECR_FLAG);
583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
584:       assertEquals(29, Node.JSDOC_INFO_PROP);
585:       assertEquals(51, Node.STATIC_SOURCE_FILE);
586:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
587:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
588:       assertEquals(49, Node.DIRECT_EVAL);
589:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
590:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
591:       assertEquals(12, Node.COLUMN_BITS);
592:       assertEquals(4095, Node.COLUMN_MASK);
593:       assertEquals(39, Node.EMPTY_BLOCK);
594:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
595:       assertEquals(48, Node.DIRECTIVES);
596:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
597:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
598:       assertEquals(55, Node.INFERRED_FUNCTION);
599:       assertEquals(36, Node.QUOTED_PROP);
600:       assertEquals(57, Node.REFLECTED_OBJECT);
601:       assertEquals(8, Node.FLAG_NO_THROWS);
602:       assertEquals(50, Node.FREE_CALL);
603:       assertEquals(53, Node.INPUT_ID);
604:       assertEquals(52, Node.LENGTH);
605:       assertEquals(54, Node.SLASH_V);
606:       assertEquals(43, Node.IS_CONSTANT_NAME);
607:       assertEquals(15, Node.NO_SIDE_EFFECTS);
608:       assertEquals(57, Node.LAST_PROP);
609:       assertEquals(40, Node.ORIGINALNAME_PROP);
610:       assertEquals(47, Node.IS_DISPATCHER);
611:       assertEquals(2, Node.POST_FLAG);
612:       assertEquals(30, Node.VAR_ARGS_NAME);
613:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
614:       assertEquals(29, Node.JSDOC_INFO_PROP);
615:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
616:       assertEquals(43, Node.IS_CONSTANT_NAME);
617:       assertEquals(56, Node.CHANGE_TIME);
618:       assertEquals(36, Node.QUOTED_PROP);
619:       assertEquals(37, Node.OPT_ARG_NAME);
620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
621:       assertEquals(12, Node.COLUMN_BITS);
622:       assertEquals(4095, Node.COLUMN_MASK);
623:       assertEquals(51, Node.STATIC_SOURCE_FILE);
624:       assertEquals(46, Node.IS_NAMESPACE);
625:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
626:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(32, Node.INCRDECR_PROP);
629:       assertEquals(40, Node.ORIGINALNAME_PROP);
630:       assertEquals(57, Node.REFLECTED_OBJECT);
631:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
632:       assertEquals(50, Node.FREE_CALL);
633:       assertEquals(52, Node.LENGTH);
634:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
635:       assertEquals(54, Node.SLASH_V);
636:       assertEquals(49, Node.DIRECT_EVAL);
637:       assertEquals(48, Node.DIRECTIVES);
638:       assertEquals(55, Node.INFERRED_FUNCTION);
639:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
640:       assertEquals(30, Node.VAR_ARGS_NAME);
641:       assertEquals(8, Node.FLAG_NO_THROWS);
642:       assertEquals(2, Node.POST_FLAG);
643:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
645:       assertEquals(39, Node.EMPTY_BLOCK);
646:       assertEquals(47, Node.IS_DISPATCHER);
647:       assertEquals(53, Node.INPUT_ID);
648:       assertEquals(57, Node.LAST_PROP);
649:       
650:       boolean boolean1 = node1.isQualifiedName();
651:       assertSame(node0, node1);
652:       assertSame(node1, node0);
653:       assertTrue(boolean1 == boolean0);
654:       assertFalse(boolean1);
655:       assertFalse(node0.isCatch());
656:       assertEquals(0, node0.getChildCount());
657:       assertFalse(node0.isSetterDef());
658:       assertFalse(node0.isDefaultCase());
659:       assertFalse(node0.isFunction());
660:       assertFalse(node0.isRegExp());
661:       assertEquals(5036, node0.getType());
662:       assertFalse(node0.isVar());
663:       assertFalse(node0.isName());
664:       assertFalse(node0.isEmpty());
665:       assertFalse(node0.isAdd());
666:       assertFalse(node0.isNew());
667:       assertFalse(node0.isCall());
668:       assertFalse(node0.isNE());
669:       assertFalse(node0.isVoid());
670:       assertFalse(node0.isIf());
671:       assertFalse(node0.isDelProp());
672:       assertFalse(node0.isTrue());
673:       assertFalse(node0.isNull());
674:       assertFalse(node0.hasMoreThanOneChild());
675:       assertFalse(node0.isDo());
676:       assertFalse(node0.isCase());
677:       assertEquals((-1), node0.getLineno());
678:       assertFalse(node0.isFor());
679:       assertFalse(node0.isAssignAdd());
680:       assertFalse(node0.isLabel());
681:       assertFalse(node0.isHook());
682:       assertFalse(node0.isBlock());
683:       assertFalse(node0.isArrayLit());
684:       assertFalse(node0.hasOneChild());
685:       assertFalse(node0.isTry());
686:       assertFalse(node0.isLabelName());
687:       assertFalse(node0.isSwitch());
688:       assertFalse(node0.isScript());
689:       assertFalse(node0.isParamList());
690:       assertFalse(node0.isGetterDef());
691:       assertFalse(node0.isNumber());
692:       assertFalse(node0.isStringKey());
693:       assertEquals((-1), node0.getCharno());
694:       assertFalse(node0.isInstanceOf());
695:       assertFalse(node0.isAnd());
696:       assertFalse(node0.isObjectLit());
697:       assertFalse(node0.isWith());
698:       assertFalse(node0.isGetProp());
699:       assertFalse(node0.isComma());
700:       assertFalse(node0.isThrow());
701:       assertFalse(node0.isThis());
702:       assertFalse(node0.isBreak());
703:       assertFalse(node0.isInc());
704:       assertFalse(node0.isExprResult());
705:       assertFalse(node0.isGetElem());
706:       assertFalse(node0.isOr());
707:       assertFalse(node0.isIn());
708:       assertFalse(node0.isContinue());
709:       assertFalse(node0.isString());
710:       assertFalse(node0.isDec());
711:       assertFalse(node0.isTypeOf());
712:       assertFalse(node0.isAssign());
713:       assertFalse(node0.isWhile());
714:       assertFalse(node0.hasChildren());
715:       assertFalse(node0.isReturn());
716:       assertFalse(node0.isCast());
717:       assertFalse(node0.isFalse());
718:       assertFalse(node0.isDebugger());
719:       assertEquals((-1), node0.getSourcePosition());
720:       assertFalse(node0.isNot());
721:       assertFalse(node1.isName());
722:       assertFalse(node1.isStringKey());
723:       assertFalse(node1.isParamList());
724:       assertFalse(node1.isVar());
725:       assertFalse(node1.isNull());
726:       assertEquals(5036, node1.getType());
727:       assertFalse(node1.isAdd());
728:       assertFalse(node1.isSetterDef());
729:       assertFalse(node1.isNew());
730:       assertFalse(node1.isWhile());
731:       assertFalse(node1.hasMoreThanOneChild());
732:       assertFalse(node1.isRegExp());
733:       assertFalse(node1.isTrue());
734:       assertFalse(node1.isBlock());
735:       assertEquals((-1), node1.getLineno());
736:       assertFalse(node1.isCatch());
737:       assertFalse(node1.isVoid());
738:       assertFalse(node1.isCall());
739:       assertFalse(node1.isAssign());
740:       assertFalse(node1.isIf());
741:       assertFalse(node1.isNE());
742:       assertFalse(node1.isTypeOf());
743:       assertEquals((-1), node1.getSourcePosition());
744:       assertFalse(node1.isDec());
745:       assertFalse(node1.hasChildren());
746:       assertFalse(node1.isReturn());
747:       assertFalse(node1.isIn());
748:       assertFalse(node1.isNot());
749:       assertFalse(node1.isAnd());
750:       assertFalse(node1.isContinue());
751:       assertFalse(node1.isString());
752:       assertFalse(node1.isFunction());
753:       assertFalse(node1.isObjectLit());
754:       assertFalse(node1.isDebugger());
755:       assertFalse(node1.isCast());
756:       assertFalse(node1.isThrow());
757:       assertFalse(node1.isFalse());
758:       assertFalse(node1.isThis());
759:       assertFalse(node1.isComma());
760:       assertFalse(node1.isHook());
761:       assertFalse(node1.isInc());
762:       assertFalse(node1.isGetProp());
763:       assertFalse(node1.isWith());
764:       assertFalse(node1.isInstanceOf());
765:       assertFalse(node1.isExprResult());
766:       assertFalse(node1.isGetElem());
767:       assertFalse(node1.isBreak());
768:       assertFalse(node1.isGetterDef());
769:       assertFalse(node1.isEmpty());
770:       assertFalse(node1.isFor());
771:       assertFalse(node1.isLabelName());
772:       assertFalse(node1.isDelProp());
773:       assertFalse(node1.isNumber());
774:       assertFalse(node1.isLabel());
775:       assertFalse(node1.isTry());
776:       assertFalse(node1.isOr());
777:       assertFalse(node1.isAssignAdd());
778:       assertFalse(node1.isScript());
779:       assertFalse(node1.hasOneChild());
780:       assertFalse(node1.isCase());
781:       assertFalse(node1.isDo());
782:       assertFalse(node1.isDefaultCase());
783:       assertEquals(0, node1.getChildCount());
784:       assertEquals((-1), node1.getCharno());
785:       assertFalse(node1.isSwitch());
786:       assertFalse(node1.isArrayLit());
787:       assertEquals(46, Node.IS_NAMESPACE);
788:       assertEquals(56, Node.CHANGE_TIME);
789:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
790:       assertEquals(37, Node.OPT_ARG_NAME);
791:       assertEquals(32, Node.INCRDECR_PROP);
792:       assertEquals(1, Node.DECR_FLAG);
793:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
794:       assertEquals(29, Node.JSDOC_INFO_PROP);
795:       assertEquals(51, Node.STATIC_SOURCE_FILE);
796:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
797:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
798:       assertEquals(49, Node.DIRECT_EVAL);
799:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
800:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
801:       assertEquals(12, Node.COLUMN_BITS);
802:       assertEquals(4095, Node.COLUMN_MASK);
803:       assertEquals(39, Node.EMPTY_BLOCK);
804:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
805:       assertEquals(48, Node.DIRECTIVES);
806:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
807:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
808:       assertEquals(55, Node.INFERRED_FUNCTION);
809:       assertEquals(36, Node.QUOTED_PROP);
810:       assertEquals(57, Node.REFLECTED_OBJECT);
811:       assertEquals(8, Node.FLAG_NO_THROWS);
812:       assertEquals(50, Node.FREE_CALL);
813:       assertEquals(53, Node.INPUT_ID);
814:       assertEquals(52, Node.LENGTH);
815:       assertEquals(54, Node.SLASH_V);
816:       assertEquals(43, Node.IS_CONSTANT_NAME);
817:       assertEquals(15, Node.NO_SIDE_EFFECTS);
818:       assertEquals(57, Node.LAST_PROP);
819:       assertEquals(40, Node.ORIGINALNAME_PROP);
820:       assertEquals(47, Node.IS_DISPATCHER);
821:       assertEquals(2, Node.POST_FLAG);
822:       assertEquals(30, Node.VAR_ARGS_NAME);
823:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
824:       assertEquals(29, Node.JSDOC_INFO_PROP);
825:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
826:       assertEquals(43, Node.IS_CONSTANT_NAME);
827:       assertEquals(56, Node.CHANGE_TIME);
828:       assertEquals(36, Node.QUOTED_PROP);
829:       assertEquals(37, Node.OPT_ARG_NAME);
830:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
831:       assertEquals(12, Node.COLUMN_BITS);
832:       assertEquals(4095, Node.COLUMN_MASK);
833:       assertEquals(51, Node.STATIC_SOURCE_FILE);
834:       assertEquals(46, Node.IS_NAMESPACE);
835:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
836:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
837:       assertEquals(1, Node.DECR_FLAG);
838:       assertEquals(32, Node.INCRDECR_PROP);
839:       assertEquals(40, Node.ORIGINALNAME_PROP);
840:       assertEquals(57, Node.REFLECTED_OBJECT);
841:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
842:       assertEquals(50, Node.FREE_CALL);
843:       assertEquals(52, Node.LENGTH);
844:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
845:       assertEquals(54, Node.SLASH_V);
846:       assertEquals(49, Node.DIRECT_EVAL);
847:       assertEquals(48, Node.DIRECTIVES);
848:       assertEquals(55, Node.INFERRED_FUNCTION);
849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
850:       assertEquals(30, Node.VAR_ARGS_NAME);
851:       assertEquals(8, Node.FLAG_NO_THROWS);
852:       assertEquals(2, Node.POST_FLAG);
853:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
854:       assertEquals(15, Node.NO_SIDE_EFFECTS);
855:       assertEquals(39, Node.EMPTY_BLOCK);
856:       assertEquals(47, Node.IS_DISPATCHER);
857:       assertEquals(53, Node.INPUT_ID);
858:       assertEquals(57, Node.LAST_PROP);
859:       
860:       boolean boolean2 = node0.wasEmptyNode();
861:       assertSame(node0, node1);
862:       assertTrue(boolean2 == boolean1);
863:       assertTrue(boolean2 == boolean0);
864:       assertFalse(boolean2);
865:       assertFalse(node0.isCatch());
866:       assertEquals(0, node0.getChildCount());
867:       assertFalse(node0.isSetterDef());
868:       assertFalse(node0.isDefaultCase());
869:       assertFalse(node0.isFunction());
870:       assertFalse(node0.isRegExp());
871:       assertEquals(5036, node0.getType());
872:       assertFalse(node0.isVar());
873:       assertFalse(node0.isName());
874:       assertFalse(node0.isEmpty());
875:       assertFalse(node0.isAdd());
876:       assertFalse(node0.isNew());
877:       assertFalse(node0.isCall());
878:       assertFalse(node0.isNE());
879:       assertFalse(node0.isVoid());
880:       assertFalse(node0.isIf());
881:       assertFalse(node0.isDelProp());
882:       assertFalse(node0.isTrue());
883:       assertFalse(node0.isNull());
884:       assertFalse(node0.hasMoreThanOneChild());
885:       assertFalse(node0.isDo());
886:       assertFalse(node0.isCase());
887:       assertEquals((-1), node0.getLineno());
888:       assertFalse(node0.isFor());
889:       assertFalse(node0.isAssignAdd());
890:       assertFalse(node0.isLabel());
891:       assertFalse(node0.isHook());
892:       assertFalse(node0.isBlock());
893:       assertFalse(node0.isArrayLit());
894:       assertFalse(node0.hasOneChild());
895:       assertFalse(node0.isTry());
896:       assertFalse(node0.isLabelName());
897:       assertFalse(node0.isSwitch());
898:       assertFalse(node0.isScript());
899:       assertFalse(node0.isParamList());
900:       assertFalse(node0.isGetterDef());
901:       assertFalse(node0.isNumber());
902:       assertFalse(node0.isStringKey());
903:       assertEquals((-1), node0.getCharno());
904:       assertFalse(node0.isInstanceOf());
905:       assertFalse(node0.isAnd());
906:       assertFalse(node0.isObjectLit());
907:       assertFalse(node0.isWith());
908:       assertFalse(node0.isGetProp());
909:       assertFalse(node0.isComma());
910:       assertFalse(node0.isThrow());
911:       assertFalse(node0.isThis());
912:       assertFalse(node0.isBreak());
913:       assertFalse(node0.isInc());
914:       assertFalse(node0.isExprResult());
915:       assertFalse(node0.isGetElem());
916:       assertFalse(node0.isOr());
917:       assertFalse(node0.isIn());
918:       assertFalse(node0.isContinue());
919:       assertFalse(node0.isString());
920:       assertFalse(node0.isDec());
921:       assertFalse(node0.isTypeOf());
922:       assertFalse(node0.isAssign());
923:       assertFalse(node0.isWhile());
924:       assertFalse(node0.hasChildren());
925:       assertFalse(node0.isReturn());
926:       assertFalse(node0.isCast());
927:       assertFalse(node0.isFalse());
928:       assertFalse(node0.isDebugger());
929:       assertEquals((-1), node0.getSourcePosition());
930:       assertFalse(node0.isNot());
931:       assertEquals(46, Node.IS_NAMESPACE);
932:       assertEquals(56, Node.CHANGE_TIME);
933:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
934:       assertEquals(37, Node.OPT_ARG_NAME);
935:       assertEquals(32, Node.INCRDECR_PROP);
936:       assertEquals(1, Node.DECR_FLAG);
937:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
938:       assertEquals(29, Node.JSDOC_INFO_PROP);
939:       assertEquals(51, Node.STATIC_SOURCE_FILE);
940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
941:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
942:       assertEquals(49, Node.DIRECT_EVAL);
943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
944:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
945:       assertEquals(12, Node.COLUMN_BITS);
946:       assertEquals(4095, Node.COLUMN_MASK);
947:       assertEquals(39, Node.EMPTY_BLOCK);
948:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
949:       assertEquals(48, Node.DIRECTIVES);
950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
951:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
952:       assertEquals(55, Node.INFERRED_FUNCTION);
953:       assertEquals(36, Node.QUOTED_PROP);
954:       assertEquals(57, Node.REFLECTED_OBJECT);
955:       assertEquals(8, Node.FLAG_NO_THROWS);
956:       assertEquals(50, Node.FREE_CALL);
957:       assertEquals(53, Node.INPUT_ID);
958:       assertEquals(52, Node.LENGTH);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(43, Node.IS_CONSTANT_NAME);
961:       assertEquals(15, Node.NO_SIDE_EFFECTS);
962:       assertEquals(57, Node.LAST_PROP);
963:       assertEquals(40, Node.ORIGINALNAME_PROP);
964:       assertEquals(47, Node.IS_DISPATCHER);
965:       assertEquals(2, Node.POST_FLAG);
966:       assertEquals(30, Node.VAR_ARGS_NAME);
967:       
968:       boolean boolean3 = node0.isThrow();
969:       assertSame(node0, node1);
970:       assertTrue(boolean3 == boolean2);
971:       assertTrue(boolean3 == boolean1);
972:       assertTrue(boolean3 == boolean0);
973:       assertFalse(boolean3);
974:       assertFalse(node0.isCatch());
975:       assertEquals(0, node0.getChildCount());
976:       assertFalse(node0.isSetterDef());
977:       assertFalse(node0.isDefaultCase());
978:       assertFalse(node0.isFunction());
979:       assertFalse(node0.isRegExp());
980:       assertEquals(5036, node0.getType());
981:       assertFalse(node0.isVar());
982:       assertFalse(node0.isName());
983:       assertFalse(node0.isEmpty());
984:       assertFalse(node0.isAdd());
985:       assertFalse(node0.isNew());
986:       assertFalse(node0.isCall());
987:       assertFalse(node0.isNE());
988:       assertFalse(node0.isVoid());
989:       assertFalse(node0.isIf());
990:       assertFalse(node0.isDelProp());
991:       assertFalse(node0.isTrue());
992:       assertFalse(node0.isNull());
993:       assertFalse(node0.hasMoreThanOneChild());
994:       assertFalse(node0.isDo());
995:       assertFalse(node0.isCase());
996:       assertEquals((-1), node0.getLineno());
997:       assertFalse(node0.isFor());
998:       assertFalse(node0.isAssignAdd());
999:       assertFalse(node0.isLabel());
1000:       assertFalse(node0.isHook());
1001:       assertFalse(node0.isBlock());
1002:       assertFalse(node0.isArrayLit());
1003:       assertFalse(node0.hasOneChild());
1004:       assertFalse(node0.isTry());
1005:       assertFalse(node0.isLabelName());
1006:       assertFalse(node0.isSwitch());
1007:       assertFalse(node0.isScript());
1008:       assertFalse(node0.isParamList());
1009:       assertFalse(node0.isGetterDef());
1010:       assertFalse(node0.isNumber());
1011:       assertFalse(node0.isStringKey());
1012:       assertEquals((-1), node0.getCharno());
1013:       assertFalse(node0.isInstanceOf());
1014:       assertFalse(node0.isAnd());
1015:       assertFalse(node0.isObjectLit());
1016:       assertFalse(node0.isWith());
1017:       assertFalse(node0.isGetProp());
1018:       assertFalse(node0.isComma());
1019:       assertFalse(node0.isThrow());
1020:       assertFalse(node0.isThis());
1021:       assertFalse(node0.isBreak());
1022:       assertFalse(node0.isInc());
1023:       assertFalse(node0.isExprResult());
1024:       assertFalse(node0.isGetElem());
1025:       assertFalse(node0.isOr());
1026:       assertFalse(node0.isIn());
1027:       assertFalse(node0.isContinue());
1028:       assertFalse(node0.isString());
1029:       assertFalse(node0.isDec());
1030:       assertFalse(node0.isTypeOf());
1031:       assertFalse(node0.isAssign());
1032:       assertFalse(node0.isWhile());
1033:       assertFalse(node0.hasChildren());
1034:       assertFalse(node0.isReturn());
1035:       assertFalse(node0.isCast());
1036:       assertFalse(node0.isFalse());
1037:       assertFalse(node0.isDebugger());
1038:       assertEquals((-1), node0.getSourcePosition());
1039:       assertFalse(node0.isNot());
1040:       assertEquals(46, Node.IS_NAMESPACE);
1041:       assertEquals(56, Node.CHANGE_TIME);
1042:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1043:       assertEquals(37, Node.OPT_ARG_NAME);
1044:       assertEquals(32, Node.INCRDECR_PROP);
1045:       assertEquals(1, Node.DECR_FLAG);
1046:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1047:       assertEquals(29, Node.JSDOC_INFO_PROP);
1048:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1049:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1050:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1051:       assertEquals(49, Node.DIRECT_EVAL);
1052:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1053:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(4095, Node.COLUMN_MASK);
1056:       assertEquals(39, Node.EMPTY_BLOCK);
1057:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1058:       assertEquals(48, Node.DIRECTIVES);
1059:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1060:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1061:       assertEquals(55, Node.INFERRED_FUNCTION);
1062:       assertEquals(36, Node.QUOTED_PROP);
1063:       assertEquals(57, Node.REFLECTED_OBJECT);
1064:       assertEquals(8, Node.FLAG_NO_THROWS);
1065:       assertEquals(50, Node.FREE_CALL);
1066:       assertEquals(53, Node.INPUT_ID);
1067:       assertEquals(52, Node.LENGTH);
1068:       assertEquals(54, Node.SLASH_V);
1069:       assertEquals(43, Node.IS_CONSTANT_NAME);
1070:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1071:       assertEquals(57, Node.LAST_PROP);
1072:       assertEquals(40, Node.ORIGINALNAME_PROP);
1073:       assertEquals(47, Node.IS_DISPATCHER);
1074:       assertEquals(2, Node.POST_FLAG);
1075:       assertEquals(30, Node.VAR_ARGS_NAME);
1076:       
1077:       node1.setCharno(46);
1078:       assertSame(node0, node1);
1079:       assertSame(node1, node0);
1080:       assertFalse(node0.isCatch());
1081:       assertEquals(0, node0.getChildCount());
1082:       assertFalse(node0.isSetterDef());
1083:       assertFalse(node0.isDefaultCase());
1084:       assertFalse(node0.isFunction());
1085:       assertFalse(node0.isRegExp());
1086:       assertEquals(5036, node0.getType());
1087:       assertFalse(node0.isVar());
1088:       assertFalse(node0.isName());
1089:       assertFalse(node0.isEmpty());
1090:       assertFalse(node0.isAdd());
1091:       assertFalse(node0.isNew());
1092:       assertFalse(node0.isCall());
1093:       assertFalse(node0.isNE());
1094:       assertFalse(node0.isVoid());
1095:       assertFalse(node0.isIf());
1096:       assertFalse(node0.isDelProp());
1097:       assertFalse(node0.isTrue());
1098:       assertFalse(node0.isNull());
1099:       assertFalse(node0.hasMoreThanOneChild());
1100:       assertFalse(node0.isDo());
1101:       assertFalse(node0.isCase());
1102:       assertEquals((-1), node0.getLineno());
1103:       assertFalse(node0.isFor());
1104:       assertFalse(node0.isAssignAdd());
1105:       assertFalse(node0.isLabel());
1106:       assertFalse(node0.isHook());
1107:       assertFalse(node0.isBlock());
1108:       assertFalse(node0.isArrayLit());
1109:       assertFalse(node0.hasOneChild());
1110:       assertFalse(node0.isTry());
1111:       assertFalse(node0.isLabelName());
1112:       assertFalse(node0.isSwitch());
1113:       assertFalse(node0.isScript());
1114:       assertFalse(node0.isParamList());
1115:       assertFalse(node0.isGetterDef());
1116:       assertFalse(node0.isNumber());
1117:       assertFalse(node0.isStringKey());
1118:       assertEquals((-1), node0.getCharno());
1119:       assertFalse(node0.isInstanceOf());
1120:       assertFalse(node0.isAnd());
1121:       assertFalse(node0.isObjectLit());
1122:       assertFalse(node0.isWith());
1123:       assertFalse(node0.isGetProp());
1124:       assertFalse(node0.isComma());
1125:       assertFalse(node0.isThrow());
1126:       assertFalse(node0.isThis());
1127:       assertFalse(node0.isBreak());
1128:       assertFalse(node0.isInc());
1129:       assertFalse(node0.isExprResult());
1130:       assertFalse(node0.isGetElem());
1131:       assertFalse(node0.isOr());
1132:       assertFalse(node0.isIn());
1133:       assertFalse(node0.isContinue());
1134:       assertFalse(node0.isString());
1135:       assertFalse(node0.isDec());
1136:       assertFalse(node0.isTypeOf());
1137:       assertFalse(node0.isAssign());
1138:       assertFalse(node0.isWhile());
1139:       assertFalse(node0.hasChildren());
1140:       assertFalse(node0.isReturn());
1141:       assertFalse(node0.isCast());
1142:       assertFalse(node0.isFalse());
1143:       assertFalse(node0.isDebugger());
1144:       assertEquals((-1), node0.getSourcePosition());
1145:       assertFalse(node0.isNot());
1146:       assertFalse(node1.isName());
1147:       assertFalse(node1.isStringKey());
1148:       assertFalse(node1.isParamList());
1149:       assertFalse(node1.isVar());
1150:       assertFalse(node1.isNull());
1151:       assertEquals(5036, node1.getType());
1152:       assertFalse(node1.isAdd());
1153:       assertFalse(node1.isSetterDef());
1154:       assertFalse(node1.isNew());
1155:       assertFalse(node1.isWhile());
1156:       assertFalse(node1.hasMoreThanOneChild());
1157:       assertFalse(node1.isRegExp());
1158:       assertFalse(node1.isTrue());
1159:       assertFalse(node1.isBlock());
1160:       assertEquals((-1), node1.getLineno());
1161:       assertFalse(node1.isCatch());
1162:       assertFalse(node1.isVoid());
1163:       assertFalse(node1.isCall());
1164:       assertFalse(node1.isAssign());
1165:       assertFalse(node1.isIf());
1166:       assertFalse(node1.isNE());
1167:       assertFalse(node1.isTypeOf());
1168:       assertEquals((-1), node1.getSourcePosition());
1169:       assertFalse(node1.isDec());
1170:       assertFalse(node1.hasChildren());
1171:       assertFalse(node1.isReturn());
1172:       assertFalse(node1.isIn());
1173:       assertFalse(node1.isNot());
1174:       assertFalse(node1.isAnd());
1175:       assertFalse(node1.isContinue());
1176:       assertFalse(node1.isString());
1177:       assertFalse(node1.isFunction());
1178:       assertFalse(node1.isObjectLit());
1179:       assertFalse(node1.isDebugger());
1180:       assertFalse(node1.isCast());
1181:       assertFalse(node1.isThrow());
1182:       assertFalse(node1.isFalse());
1183:       assertFalse(node1.isThis());
1184:       assertFalse(node1.isComma());
1185:       assertFalse(node1.isHook());
1186:       assertFalse(node1.isInc());
1187:       assertFalse(node1.isGetProp());
1188:       assertFalse(node1.isWith());
1189:       assertFalse(node1.isInstanceOf());
1190:       assertFalse(node1.isExprResult());
1191:       assertFalse(node1.isGetElem());
1192:       assertFalse(node1.isBreak());
1193:       assertFalse(node1.isGetterDef());
1194:       assertFalse(node1.isEmpty());
1195:       assertFalse(node1.isFor());
1196:       assertFalse(node1.isLabelName());
1197:       assertFalse(node1.isDelProp());
1198:       assertFalse(node1.isNumber());
1199:       assertFalse(node1.isLabel());
1200:       assertFalse(node1.isTry());
1201:       assertFalse(node1.isOr());
1202:       assertFalse(node1.isAssignAdd());
1203:       assertFalse(node1.isScript());
1204:       assertFalse(node1.hasOneChild());
1205:       assertFalse(node1.isCase());
1206:       assertFalse(node1.isDo());
1207:       assertFalse(node1.isDefaultCase());
1208:       assertEquals(0, node1.getChildCount());
1209:       assertEquals((-1), node1.getCharno());
1210:       assertFalse(node1.isSwitch());
1211:       assertFalse(node1.isArrayLit());
1212:       assertEquals(46, Node.IS_NAMESPACE);
1213:       assertEquals(56, Node.CHANGE_TIME);
1214:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1215:       assertEquals(37, Node.OPT_ARG_NAME);
1216:       assertEquals(32, Node.INCRDECR_PROP);
1217:       assertEquals(1, Node.DECR_FLAG);
1218:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1219:       assertEquals(29, Node.JSDOC_INFO_PROP);
1220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1223:       assertEquals(49, Node.DIRECT_EVAL);
1224:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1225:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1226:       assertEquals(12, Node.COLUMN_BITS);
1227:       assertEquals(4095, Node.COLUMN_MASK);
1228:       assertEquals(39, Node.EMPTY_BLOCK);
1229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1230:       assertEquals(48, Node.DIRECTIVES);
1231:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1232:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1233:       assertEquals(55, Node.INFERRED_FUNCTION);
1234:       assertEquals(36, Node.QUOTED_PROP);
1235:       assertEquals(57, Node.REFLECTED_OBJECT);
1236:       assertEquals(8, Node.FLAG_NO_THROWS);
1237:       assertEquals(50, Node.FREE_CALL);
1238:       assertEquals(53, Node.INPUT_ID);
1239:       assertEquals(52, Node.LENGTH);
1240:       assertEquals(54, Node.SLASH_V);
1241:       assertEquals(43, Node.IS_CONSTANT_NAME);
1242:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1243:       assertEquals(57, Node.LAST_PROP);
1244:       assertEquals(40, Node.ORIGINALNAME_PROP);
1245:       assertEquals(47, Node.IS_DISPATCHER);
1246:       assertEquals(2, Node.POST_FLAG);
1247:       assertEquals(30, Node.VAR_ARGS_NAME);
1248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1249:       assertEquals(29, Node.JSDOC_INFO_PROP);
1250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1251:       assertEquals(43, Node.IS_CONSTANT_NAME);
1252:       assertEquals(56, Node.CHANGE_TIME);
1253:       assertEquals(36, Node.QUOTED_PROP);
1254:       assertEquals(37, Node.OPT_ARG_NAME);
1255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1256:       assertEquals(12, Node.COLUMN_BITS);
1257:       assertEquals(4095, Node.COLUMN_MASK);
1258:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1259:       assertEquals(46, Node.IS_NAMESPACE);
1260:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1261:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1262:       assertEquals(1, Node.DECR_FLAG);
1263:       assertEquals(32, Node.INCRDECR_PROP);
1264:       assertEquals(40, Node.ORIGINALNAME_PROP);
1265:       assertEquals(57, Node.REFLECTED_OBJECT);
1266:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1267:       assertEquals(50, Node.FREE_CALL);
1268:       assertEquals(52, Node.LENGTH);
1269:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1270:       assertEquals(54, Node.SLASH_V);
1271:       assertEquals(49, Node.DIRECT_EVAL);
1272:       assertEquals(48, Node.DIRECTIVES);
1273:       assertEquals(55, Node.INFERRED_FUNCTION);
1274:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1275:       assertEquals(30, Node.VAR_ARGS_NAME);
1276:       assertEquals(8, Node.FLAG_NO_THROWS);
1277:       assertEquals(2, Node.POST_FLAG);
1278:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1279:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1280:       assertEquals(39, Node.EMPTY_BLOCK);
1281:       assertEquals(47, Node.IS_DISPATCHER);
1282:       assertEquals(53, Node.INPUT_ID);
1283:       assertEquals(57, Node.LAST_PROP);
1284:       
1285:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1286:       assertNotNull(node_SideEffectFlags0);
1287:       assertEquals(0, node_SideEffectFlags0.valueOf());
1288:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1289:       
1290:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
1291:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1292:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1293:       assertNotNull(node_SideEffectFlags1);
1294:       assertEquals(0, node_SideEffectFlags0.valueOf());
1295:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1296:       assertEquals(0, node_SideEffectFlags1.valueOf());
1297:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1298:       
1299:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
1300:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1301:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1302:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1303:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1304:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1305:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1306:       assertNotNull(node_SideEffectFlags2);
1307:       assertEquals(0, node_SideEffectFlags0.valueOf());
1308:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1309:       assertEquals(0, node_SideEffectFlags1.valueOf());
1310:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1311:       assertEquals(0, node_SideEffectFlags2.valueOf());
1312:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1313:       
1314:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
1315:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1316:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1317:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1318:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1319:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1320:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1321:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1322:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1323:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1324:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1325:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1326:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1327:       assertNotNull(node_SideEffectFlags3);
1328:       assertEquals(0, node_SideEffectFlags0.valueOf());
1329:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1330:       assertEquals(0, node_SideEffectFlags1.valueOf());
1331:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1332:       assertEquals(0, node_SideEffectFlags2.valueOf());
1333:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1334:       assertEquals(0, node_SideEffectFlags3.valueOf());
1335:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1336:       
1337:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
1338:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1339:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1340:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1341:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1342:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1343:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1344:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1345:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1346:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1347:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1348:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1349:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1350:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1351:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1352:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1353:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1354:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1355:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1356:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1357:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1358:       assertNotNull(node_SideEffectFlags4);
1359:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1360:       assertEquals(31, node_SideEffectFlags0.valueOf());
1361:       assertEquals(31, node_SideEffectFlags1.valueOf());
1362:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1363:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1364:       assertEquals(31, node_SideEffectFlags2.valueOf());
1365:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1366:       assertEquals(31, node_SideEffectFlags3.valueOf());
1367:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
1368:       assertEquals(31, node_SideEffectFlags4.valueOf());
1369:       
1370:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
1371:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1372:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1373:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1374:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1375:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1376:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1377:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1378:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1379:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1380:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1381:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1382:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1383:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1384:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1385:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1386:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1387:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1388:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1389:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1390:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1391:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1392:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1393:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1394:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1395:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1396:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1397:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1398:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1399:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1400:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1401:       assertNotNull(node_SideEffectFlags5);
1402:       assertEquals(0, node_SideEffectFlags0.valueOf());
1403:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1404:       assertEquals(0, node_SideEffectFlags1.valueOf());
1405:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1406:       assertEquals(0, node_SideEffectFlags2.valueOf());
1407:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1408:       assertEquals(0, node_SideEffectFlags3.valueOf());
1409:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1410:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1411:       assertEquals(0, node_SideEffectFlags4.valueOf());
1412:       assertEquals(0, node_SideEffectFlags5.valueOf());
1413:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1414:       
1415:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
1416:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1417:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1418:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1419:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1420:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1421:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1422:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1423:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1424:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1425:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1426:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1427:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1428:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1429:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1430:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1431:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1432:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1433:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1434:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1435:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1436:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1437:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1438:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1439:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1440:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1441:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1442:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1443:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1444:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1445:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1446:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1447:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1448:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1449:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1450:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1451:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
1452:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1453:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1454:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1455:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1456:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1457:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1458:       assertNotNull(node_SideEffectFlags6);
1459:       assertEquals(0, node_SideEffectFlags0.valueOf());
1460:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1461:       assertEquals(0, node_SideEffectFlags1.valueOf());
1462:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1463:       assertEquals(0, node_SideEffectFlags2.valueOf());
1464:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1465:       assertEquals(0, node_SideEffectFlags3.valueOf());
1466:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1467:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1468:       assertEquals(0, node_SideEffectFlags4.valueOf());
1469:       assertEquals(0, node_SideEffectFlags5.valueOf());
1470:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1471:       assertEquals(0, node_SideEffectFlags6.valueOf());
1472:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1473:       
1474:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setMutatesGlobalState();
1475:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1476:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1477:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1478:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1479:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1480:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1481:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1482:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1483:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1484:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1485:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1486:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1487:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1488:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1489:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1490:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1491:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1492:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1493:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1494:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1495:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1496:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1497:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1498:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1499:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1500:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1501:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1502:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1503:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1504:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1505:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1506:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1507:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1508:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1509:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1510:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1511:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1512:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1513:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1514:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1515:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1516:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1517:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1518:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1519:       assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
1520:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1521:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1522:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1523:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
1524:       assertNotNull(node_SideEffectFlags7);
1525:       assertEquals(0, node_SideEffectFlags7.valueOf());
1526:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
1527:       assertEquals(0, node_SideEffectFlags0.valueOf());
1528:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1529:       assertEquals(0, node_SideEffectFlags1.valueOf());
1530:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1531:       assertEquals(0, node_SideEffectFlags2.valueOf());
1532:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1533:       assertEquals(0, node_SideEffectFlags3.valueOf());
1534:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1535:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1536:       assertEquals(0, node_SideEffectFlags4.valueOf());
1537:       assertEquals(0, node_SideEffectFlags5.valueOf());
1538:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1539:       
1540:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.clearAllFlags();
1541:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
1542:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
1543:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
1544:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
1545:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
1546:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
1547:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
1548:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
1549:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1550:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1551:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1552:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1553:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1554:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1555:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1556:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1557:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1558:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1559:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1560:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1561:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1562:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1563:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1564:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1565:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1566:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
1567:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1568:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1569:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1570:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1571:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1572:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1573:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1574:       assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
1575:       assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
1576:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1577:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1578:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
1579:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1580:       assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
1581:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1582:       assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
1583:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1584:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1585:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
1586:       assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
1587:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1588:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1589:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1590:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1591:       assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
1592:       assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
1593:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1594:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1595:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1596:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
1597:       assertNotNull(node_SideEffectFlags8);
1598:       assertEquals(31, node_SideEffectFlags8.valueOf());
1599:       assertFalse(node_SideEffectFlags8.areAllFlagsSet());
1600:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1601:       assertEquals(31, node_SideEffectFlags0.valueOf());
1602:       assertEquals(31, node_SideEffectFlags1.valueOf());
1603:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1604:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1605:       assertEquals(31, node_SideEffectFlags2.valueOf());
1606:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1607:       assertEquals(31, node_SideEffectFlags3.valueOf());
1608:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
1609:       assertEquals(31, node_SideEffectFlags4.valueOf());
1610:       assertEquals(31, node_SideEffectFlags5.valueOf());
1611:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
1612:       
1613:       int int0 = node_SideEffectFlags2.valueOf();
1614:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1615:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1616:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1617:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1618:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
1619:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1620:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1621:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1622:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
1623:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1624:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1625:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1626:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1627:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1628:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1629:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1630:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1631:       assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
1632:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1633:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1634:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1635:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1636:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1637:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1638:       assertEquals(31, int0);
1639:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1640:       assertEquals(31, node_SideEffectFlags0.valueOf());
1641:       assertEquals(31, node_SideEffectFlags1.valueOf());
1642:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1643:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1644:       assertEquals(31, node_SideEffectFlags2.valueOf());
1645:       
1646:       boolean boolean4 = node1.isBlock();
1647:       assertSame(node0, node1);
1648:       assertSame(node1, node0);
1649:       assertTrue(boolean4 == boolean2);
1650:       assertTrue(boolean4 == boolean3);
1651:       assertTrue(boolean4 == boolean0);
1652:       assertTrue(boolean4 == boolean1);
1653:       assertFalse(boolean4);
1654:       assertFalse(node0.isCatch());
1655:       assertEquals(0, node0.getChildCount());
1656:       assertFalse(node0.isSetterDef());
1657:       assertFalse(node0.isDefaultCase());
1658:       assertFalse(node0.isFunction());
1659:       assertFalse(node0.isRegExp());
1660:       assertEquals(5036, node0.getType());
1661:       assertFalse(node0.isVar());
1662:       assertFalse(node0.isName());
1663:       assertFalse(node0.isEmpty());
1664:       assertFalse(node0.isAdd());
1665:       assertFalse(node0.isNew());
1666:       assertFalse(node0.isCall());
1667:       assertFalse(node0.isNE());
1668:       assertFalse(node0.isVoid());
1669:       assertFalse(node0.isIf());
1670:       assertFalse(node0.isDelProp());
1671:       assertFalse(node0.isTrue());
1672:       assertFalse(node0.isNull());
1673:       assertFalse(node0.hasMoreThanOneChild());
1674:       assertFalse(node0.isDo());
1675:       assertFalse(node0.isCase());
1676:       assertEquals((-1), node0.getLineno());
1677:       assertFalse(node0.isFor());
1678:       assertFalse(node0.isAssignAdd());
1679:       assertFalse(node0.isLabel());
1680:       assertFalse(node0.isHook());
1681:       assertFalse(node0.isBlock());
1682:       assertFalse(node0.isArrayLit());
1683:       assertFalse(node0.hasOneChild());
1684:       assertFalse(node0.isTry());
1685:       assertFalse(node0.isLabelName());
1686:       assertFalse(node0.isSwitch());
1687:       assertFalse(node0.isScript());
1688:       assertFalse(node0.isParamList());
1689:       assertFalse(node0.isGetterDef());
1690:       assertFalse(node0.isNumber());
1691:       assertFalse(node0.isStringKey());
1692:       assertEquals((-1), node0.getCharno());
1693:       assertFalse(node0.isInstanceOf());
1694:       assertFalse(node0.isAnd());
1695:       assertFalse(node0.isObjectLit());
1696:       assertFalse(node0.isWith());
1697:       assertFalse(node0.isGetProp());
1698:       assertFalse(node0.isComma());
1699:       assertFalse(node0.isThrow());
1700:       assertFalse(node0.isThis());
1701:       assertFalse(node0.isBreak());
1702:       assertFalse(node0.isInc());
1703:       assertFalse(node0.isExprResult());
1704:       assertFalse(node0.isGetElem());
1705:       assertFalse(node0.isOr());
1706:       assertFalse(node0.isIn());
1707:       assertFalse(node0.isContinue());
1708:       assertFalse(node0.isString());
1709:       assertFalse(node0.isDec());
1710:       assertFalse(node0.isTypeOf());
1711:       assertFalse(node0.isAssign());
1712:       assertFalse(node0.isWhile());
1713:       assertFalse(node0.hasChildren());
1714:       assertFalse(node0.isReturn());
1715:       assertFalse(node0.isCast());
1716:       assertFalse(node0.isFalse());
1717:       assertFalse(node0.isDebugger());
1718:       assertEquals((-1), node0.getSourcePosition());
1719:       assertFalse(node0.isNot());
1720:       assertFalse(node1.isName());
1721:       assertFalse(node1.isStringKey());
1722:       assertFalse(node1.isParamList());
1723:       assertFalse(node1.isVar());
1724:       assertFalse(node1.isNull());
1725:       assertEquals(5036, node1.getType());
1726:       assertFalse(node1.isAdd());
1727:       assertFalse(node1.isSetterDef());
1728:       assertFalse(node1.isNew());
1729:       assertFalse(node1.isWhile());
1730:       assertFalse(node1.hasMoreThanOneChild());
1731:       assertFalse(node1.isRegExp());
1732:       assertFalse(node1.isTrue());
1733:       assertFalse(node1.isBlock());
1734:       assertEquals((-1), node1.getLineno());
1735:       assertFalse(node1.isCatch());
1736:       assertFalse(node1.isVoid());
1737:       assertFalse(node1.isCall());
1738:       assertFalse(node1.isAssign());
1739:       assertFalse(node1.isIf());
1740:       assertFalse(node1.isNE());
1741:       assertFalse(node1.isTypeOf());
1742:       assertEquals((-1), node1.getSourcePosition());
1743:       assertFalse(node1.isDec());
1744:       assertFalse(node1.hasChildren());
1745:       assertFalse(node1.isReturn());
1746:       assertFalse(node1.isIn());
1747:       assertFalse(node1.isNot());
1748:       assertFalse(node1.isAnd());
1749:       assertFalse(node1.isContinue());
1750:       assertFalse(node1.isString());
1751:       assertFalse(node1.isFunction());
1752:       assertFalse(node1.isObjectLit());
1753:       assertFalse(node1.isDebugger());
1754:       assertFalse(node1.isCast());
1755:       assertFalse(node1.isThrow());
1756:       assertFalse(node1.isFalse());
1757:       assertFalse(node1.isThis());
1758:       assertFalse(node1.isComma());
1759:       assertFalse(node1.isHook());
1760:       assertFalse(node1.isInc());
1761:       assertFalse(node1.isGetProp());
1762:       assertFalse(node1.isWith());
1763:       assertFalse(node1.isInstanceOf());
1764:       assertFalse(node1.isExprResult());
1765:       assertFalse(node1.isGetElem());
1766:       assertFalse(node1.isBreak());
1767:       assertFalse(node1.isGetterDef());
1768:       assertFalse(node1.isEmpty());
1769:       assertFalse(node1.isFor());
1770:       assertFalse(node1.isLabelName());
1771:       assertFalse(node1.isDelProp());
1772:       assertFalse(node1.isNumber());
1773:       assertFalse(node1.isLabel());
1774:       assertFalse(node1.isTry());
1775:       assertFalse(node1.isOr());
1776:       assertFalse(node1.isAssignAdd());
1777:       assertFalse(node1.isScript());
1778:       assertFalse(node1.hasOneChild());
1779:       assertFalse(node1.isCase());
1780:       assertFalse(node1.isDo());
1781:       assertFalse(node1.isDefaultCase());
1782:       assertEquals(0, node1.getChildCount());
1783:       assertEquals((-1), node1.getCharno());
1784:       assertFalse(node1.isSwitch());
1785:       assertFalse(node1.isArrayLit());
1786:       assertEquals(46, Node.IS_NAMESPACE);
1787:       assertEquals(56, Node.CHANGE_TIME);
1788:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1789:       assertEquals(37, Node.OPT_ARG_NAME);
1790:       assertEquals(32, Node.INCRDECR_PROP);
1791:       assertEquals(1, Node.DECR_FLAG);
1792:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1793:       assertEquals(29, Node.JSDOC_INFO_PROP);
1794:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1795:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1796:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1797:       assertEquals(49, Node.DIRECT_EVAL);
1798:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1799:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1800:       assertEquals(12, Node.COLUMN_BITS);
1801:       assertEquals(4095, Node.COLUMN_MASK);
1802:       assertEquals(39, Node.EMPTY_BLOCK);
1803:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1804:       assertEquals(48, Node.DIRECTIVES);
1805:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1806:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1807:       assertEquals(55, Node.INFERRED_FUNCTION);
1808:       assertEquals(36, Node.QUOTED_PROP);
1809:       assertEquals(57, Node.REFLECTED_OBJECT);
1810:       assertEquals(8, Node.FLAG_NO_THROWS);
1811:       assertEquals(50, Node.FREE_CALL);
1812:       assertEquals(53, Node.INPUT_ID);
1813:       assertEquals(52, Node.LENGTH);
1814:       assertEquals(54, Node.SLASH_V);
1815:       assertEquals(43, Node.IS_CONSTANT_NAME);
1816:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1817:       assertEquals(57, Node.LAST_PROP);
1818:       assertEquals(40, Node.ORIGINALNAME_PROP);
1819:       assertEquals(47, Node.IS_DISPATCHER);
1820:       assertEquals(2, Node.POST_FLAG);
1821:       assertEquals(30, Node.VAR_ARGS_NAME);
1822:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1823:       assertEquals(29, Node.JSDOC_INFO_PROP);
1824:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1825:       assertEquals(43, Node.IS_CONSTANT_NAME);
1826:       assertEquals(56, Node.CHANGE_TIME);
1827:       assertEquals(36, Node.QUOTED_PROP);
1828:       assertEquals(37, Node.OPT_ARG_NAME);
1829:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1830:       assertEquals(12, Node.COLUMN_BITS);
1831:       assertEquals(4095, Node.COLUMN_MASK);
1832:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1833:       assertEquals(46, Node.IS_NAMESPACE);
1834:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1835:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1836:       assertEquals(1, Node.DECR_FLAG);
1837:       assertEquals(32, Node.INCRDECR_PROP);
1838:       assertEquals(40, Node.ORIGINALNAME_PROP);
1839:       assertEquals(57, Node.REFLECTED_OBJECT);
1840:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1841:       assertEquals(50, Node.FREE_CALL);
1842:       assertEquals(52, Node.LENGTH);
1843:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1844:       assertEquals(54, Node.SLASH_V);
1845:       assertEquals(49, Node.DIRECT_EVAL);
1846:       assertEquals(48, Node.DIRECTIVES);
1847:       assertEquals(55, Node.INFERRED_FUNCTION);
1848:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1849:       assertEquals(30, Node.VAR_ARGS_NAME);
1850:       assertEquals(8, Node.FLAG_NO_THROWS);
1851:       assertEquals(2, Node.POST_FLAG);
1852:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1854:       assertEquals(39, Node.EMPTY_BLOCK);
1855:       assertEquals(47, Node.IS_DISPATCHER);
1856:       assertEquals(53, Node.INPUT_ID);
1857:       assertEquals(57, Node.LAST_PROP);
1858:       
1859:       // Undeclared exception!
1860:       try { 
1861:         node1.toString();
1862:         fail("Expecting exception: IllegalStateException");
1863:       
1864:       } catch(IllegalStateException e) {
1865:          //
1866:          // 5036
1867:          //
1868:          verifyException("com.google.javascript.rhino.Token", e);
1869:       }
1870:   }
1871: }
RegularFileObject[/tmp/EvoSuite_102_1628255607050/com/google/javascript/rhino/Node_102_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:27 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_102_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_102_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_102_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.common.collect.ImmutableSet",
340:       "com.google.common.collect.EmptyImmutableSet",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.common.collect.Sets",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.TemplatizedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractMultimap$Values",
351:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
352:       "com.google.common.collect.AbstractMapBasedMultimap$1",
353:       "com.google.common.collect.Multimaps$Entries",
354:       "com.google.common.collect.AbstractMultimap$Entries",
355:       "com.google.common.collect.AbstractMapBasedMultimap$2",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Sets$ImprovedAbstractSet",
365:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
366:       "com.google.common.collect.Hashing",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 13:13:27.524 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2827));
assertNotNull(node0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(Integer.MAX_VALUE, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertEquals(Integer.MAX_VALUE, node0.getType());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node0.setType(5036);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(5036, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(5036, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(iterable0.contains(node0));
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node1 = node0.getAncestor(0);
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(5036, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertEquals(5036, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isTry());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);

boolean boolean1 = node1.isQualifiedName();
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(5036, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertEquals(5036, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isTry());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);

boolean boolean2 = node0.wasEmptyNode();
assertSame(node0, node1);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(5036, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean3 = node0.isThrow();
assertSame(node0, node1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(5036, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node1.setCharno(46);
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(5036, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertEquals(5036, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isTry());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertNotNull(node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags3);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertNotNull(node_SideEffectFlags4);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags4.valueOf());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags5);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags6);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags5.setMutatesGlobalState();
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertNotNull(node_SideEffectFlags7);
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.clearAllFlags();
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags8);
assertSame(node_SideEffectFlags3, node_SideEffectFlags6);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags8);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertNotNull(node_SideEffectFlags8);
assertEquals(31, node_SideEffectFlags8.valueOf());
assertFalse(node_SideEffectFlags8.areAllFlagsSet());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags4.valueOf());
assertEquals(31, node_SideEffectFlags5.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());

int int0 = node_SideEffectFlags2.valueOf();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags8);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertEquals(31, int0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());

boolean boolean4 = node1.isBlock();
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean1);
assertFalse(boolean4);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(5036, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isFalse());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertEquals(5036, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isFunction());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isCast());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNumber());
assertFalse(node1.isLabel());
assertFalse(node1.isTry());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);

node1.toString();

[MASTER] 13:13:28.111 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_104_1628255607755/com/google/javascript/rhino/Node_104_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_104_1628255607755/com/google/javascript/rhino/Node_104_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:28.111 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:28.111 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:28.112 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 403
[MASTER] 13:13:28.114 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_104_1628255607755/com/google/javascript/rhino/Node_104_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:27 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_104_tmp__ESTest extends Node_104_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2827));
22:       assertNotNull(node0);
23:       assertFalse(node0.hasOneChild());
24:       assertFalse(node0.isLabelName());
25:       assertFalse(node0.isAssign());
26:       assertFalse(node0.isNumber());
27:       assertFalse(node0.isGetElem());
28:       assertFalse(node0.isCast());
29:       assertFalse(node0.isExprResult());
30:       assertEquals((-1), node0.getSourcePosition());
31:       assertFalse(node0.isOr());
32:       assertFalse(node0.isObjectLit());
33:       assertFalse(node0.hasMoreThanOneChild());
34:       assertFalse(node0.isNot());
35:       assertEquals((-1), node0.getLineno());
36:       assertFalse(node0.isWith());
37:       assertFalse(node0.isScript());
38:       assertFalse(node0.isInstanceOf());
39:       assertFalse(node0.isThis());
40:       assertFalse(node0.isGetProp());
41:       assertFalse(node0.isTypeOf());
42:       assertFalse(node0.isDec());
43:       assertFalse(node0.isComma());
44:       assertFalse(node0.isWhile());
45:       assertFalse(node0.isReturn());
46:       assertFalse(node0.hasChildren());
47:       assertFalse(node0.isBlock());
48:       assertFalse(node0.isCall());
49:       assertFalse(node0.isName());
50:       assertFalse(node0.isBreak());
51:       assertFalse(node0.isAdd());
52:       assertFalse(node0.isParamList());
53:       assertEquals((-1), node0.getCharno());
54:       assertFalse(node0.isSwitch());
55:       assertFalse(node0.isNull());
56:       assertFalse(node0.isStringKey());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isDo());
59:       assertFalse(node0.isLabel());
60:       assertFalse(node0.isNew());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isAssignAdd());
63:       assertFalse(node0.isVar());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isGetterDef());
66:       assertEquals(Integer.MAX_VALUE, node0.getType());
67:       assertFalse(node0.isEmpty());
68:       assertFalse(node0.isTrue());
69:       assertFalse(node0.isVoid());
70:       assertFalse(node0.isDebugger());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isIf());
73:       assertFalse(node0.isNE());
74:       assertFalse(node0.isCase());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isCatch());
77:       assertFalse(node0.isRegExp());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isHook());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isFalse());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isContinue());
84:       assertFalse(node0.isIn());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isSetterDef());
88:       assertFalse(node0.isThrow());
89:       assertEquals(52, Node.LENGTH);
90:       assertEquals(40, Node.ORIGINALNAME_PROP);
91:       assertEquals(15, Node.NO_SIDE_EFFECTS);
92:       assertEquals(30, Node.VAR_ARGS_NAME);
93:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
94:       assertEquals(57, Node.LAST_PROP);
95:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
96:       assertEquals(12, Node.COLUMN_BITS);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(32, Node.INCRDECR_PROP);
99:       assertEquals(46, Node.IS_NAMESPACE);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
102:       assertEquals(50, Node.FREE_CALL);
103:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
104:       assertEquals(43, Node.IS_CONSTANT_NAME);
105:       assertEquals(54, Node.SLASH_V);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(53, Node.INPUT_ID);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
110:       assertEquals(2, Node.POST_FLAG);
111:       assertEquals(47, Node.IS_DISPATCHER);
112:       assertEquals(4095, Node.COLUMN_MASK);
113:       assertEquals(55, Node.INFERRED_FUNCTION);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(48, Node.DIRECTIVES);
117:       assertEquals(37, Node.OPT_ARG_NAME);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(56, Node.CHANGE_TIME);
122:       assertEquals(8, Node.FLAG_NO_THROWS);
123:       assertEquals(57, Node.REFLECTED_OBJECT);
124:       assertEquals(36, Node.QUOTED_PROP);
125:       
126:       boolean boolean0 = node0.isOr();
127:       assertFalse(boolean0);
128:       assertFalse(node0.hasOneChild());
129:       assertFalse(node0.isLabelName());
130:       assertFalse(node0.isAssign());
131:       assertFalse(node0.isNumber());
132:       assertFalse(node0.isGetElem());
133:       assertFalse(node0.isCast());
134:       assertFalse(node0.isExprResult());
135:       assertEquals((-1), node0.getSourcePosition());
136:       assertFalse(node0.isOr());
137:       assertFalse(node0.isObjectLit());
138:       assertFalse(node0.hasMoreThanOneChild());
139:       assertFalse(node0.isNot());
140:       assertEquals((-1), node0.getLineno());
141:       assertFalse(node0.isWith());
142:       assertFalse(node0.isScript());
143:       assertFalse(node0.isInstanceOf());
144:       assertFalse(node0.isThis());
145:       assertFalse(node0.isGetProp());
146:       assertFalse(node0.isTypeOf());
147:       assertFalse(node0.isDec());
148:       assertFalse(node0.isComma());
149:       assertFalse(node0.isWhile());
150:       assertFalse(node0.isReturn());
151:       assertFalse(node0.hasChildren());
152:       assertFalse(node0.isBlock());
153:       assertFalse(node0.isCall());
154:       assertFalse(node0.isName());
155:       assertFalse(node0.isBreak());
156:       assertFalse(node0.isAdd());
157:       assertFalse(node0.isParamList());
158:       assertEquals((-1), node0.getCharno());
159:       assertFalse(node0.isSwitch());
160:       assertFalse(node0.isNull());
161:       assertFalse(node0.isStringKey());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isDo());
164:       assertFalse(node0.isLabel());
165:       assertFalse(node0.isNew());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isAssignAdd());
168:       assertFalse(node0.isVar());
169:       assertFalse(node0.isArrayLit());
170:       assertFalse(node0.isGetterDef());
171:       assertEquals(Integer.MAX_VALUE, node0.getType());
172:       assertFalse(node0.isEmpty());
173:       assertFalse(node0.isTrue());
174:       assertFalse(node0.isVoid());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isIf());
178:       assertFalse(node0.isNE());
179:       assertFalse(node0.isCase());
180:       assertFalse(node0.isString());
181:       assertFalse(node0.isCatch());
182:       assertFalse(node0.isRegExp());
183:       assertFalse(node0.isTry());
184:       assertFalse(node0.isHook());
185:       assertFalse(node0.isFor());
186:       assertFalse(node0.isFalse());
187:       assertFalse(node0.isAnd());
188:       assertFalse(node0.isContinue());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isInc());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isThrow());
194:       assertEquals(52, Node.LENGTH);
195:       assertEquals(40, Node.ORIGINALNAME_PROP);
196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
197:       assertEquals(30, Node.VAR_ARGS_NAME);
198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
199:       assertEquals(57, Node.LAST_PROP);
200:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
201:       assertEquals(12, Node.COLUMN_BITS);
202:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
203:       assertEquals(32, Node.INCRDECR_PROP);
204:       assertEquals(46, Node.IS_NAMESPACE);
205:       assertEquals(1, Node.DECR_FLAG);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(50, Node.FREE_CALL);
208:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
209:       assertEquals(43, Node.IS_CONSTANT_NAME);
210:       assertEquals(54, Node.SLASH_V);
211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
212:       assertEquals(53, Node.INPUT_ID);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
215:       assertEquals(2, Node.POST_FLAG);
216:       assertEquals(47, Node.IS_DISPATCHER);
217:       assertEquals(4095, Node.COLUMN_MASK);
218:       assertEquals(55, Node.INFERRED_FUNCTION);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
221:       assertEquals(48, Node.DIRECTIVES);
222:       assertEquals(37, Node.OPT_ARG_NAME);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(29, Node.JSDOC_INFO_PROP);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(56, Node.CHANGE_TIME);
227:       assertEquals(8, Node.FLAG_NO_THROWS);
228:       assertEquals(57, Node.REFLECTED_OBJECT);
229:       assertEquals(36, Node.QUOTED_PROP);
230:       
231:       node0.setType(5036);
232:       assertFalse(node0.hasOneChild());
233:       assertFalse(node0.isLabelName());
234:       assertFalse(node0.isAssign());
235:       assertFalse(node0.isNumber());
236:       assertFalse(node0.isGetElem());
237:       assertFalse(node0.isCast());
238:       assertFalse(node0.isExprResult());
239:       assertEquals((-1), node0.getSourcePosition());
240:       assertFalse(node0.isOr());
241:       assertFalse(node0.isObjectLit());
242:       assertFalse(node0.hasMoreThanOneChild());
243:       assertFalse(node0.isNot());
244:       assertEquals((-1), node0.getLineno());
245:       assertFalse(node0.isWith());
246:       assertFalse(node0.isScript());
247:       assertFalse(node0.isInstanceOf());
248:       assertFalse(node0.isThis());
249:       assertFalse(node0.isGetProp());
250:       assertFalse(node0.isTypeOf());
251:       assertFalse(node0.isDec());
252:       assertFalse(node0.isComma());
253:       assertFalse(node0.isWhile());
254:       assertFalse(node0.isReturn());
255:       assertFalse(node0.hasChildren());
256:       assertFalse(node0.isBlock());
257:       assertFalse(node0.isCall());
258:       assertFalse(node0.isName());
259:       assertFalse(node0.isBreak());
260:       assertFalse(node0.isAdd());
261:       assertFalse(node0.isParamList());
262:       assertEquals((-1), node0.getCharno());
263:       assertFalse(node0.isSwitch());
264:       assertFalse(node0.isNull());
265:       assertFalse(node0.isStringKey());
266:       assertEquals(0, node0.getChildCount());
267:       assertFalse(node0.isDo());
268:       assertFalse(node0.isLabel());
269:       assertFalse(node0.isNew());
270:       assertFalse(node0.isDefaultCase());
271:       assertFalse(node0.isAssignAdd());
272:       assertFalse(node0.isVar());
273:       assertFalse(node0.isArrayLit());
274:       assertFalse(node0.isGetterDef());
275:       assertFalse(node0.isEmpty());
276:       assertFalse(node0.isTrue());
277:       assertFalse(node0.isVoid());
278:       assertFalse(node0.isDebugger());
279:       assertFalse(node0.isDelProp());
280:       assertFalse(node0.isIf());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isCase());
283:       assertFalse(node0.isString());
284:       assertFalse(node0.isCatch());
285:       assertFalse(node0.isRegExp());
286:       assertFalse(node0.isTry());
287:       assertFalse(node0.isHook());
288:       assertFalse(node0.isFor());
289:       assertFalse(node0.isFalse());
290:       assertFalse(node0.isAnd());
291:       assertFalse(node0.isContinue());
292:       assertFalse(node0.isIn());
293:       assertFalse(node0.isFunction());
294:       assertFalse(node0.isInc());
295:       assertFalse(node0.isSetterDef());
296:       assertEquals(5036, node0.getType());
297:       assertFalse(node0.isThrow());
298:       assertEquals(52, Node.LENGTH);
299:       assertEquals(40, Node.ORIGINALNAME_PROP);
300:       assertEquals(15, Node.NO_SIDE_EFFECTS);
301:       assertEquals(30, Node.VAR_ARGS_NAME);
302:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
303:       assertEquals(57, Node.LAST_PROP);
304:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
305:       assertEquals(12, Node.COLUMN_BITS);
306:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(46, Node.IS_NAMESPACE);
309:       assertEquals(1, Node.DECR_FLAG);
310:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
311:       assertEquals(50, Node.FREE_CALL);
312:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
313:       assertEquals(43, Node.IS_CONSTANT_NAME);
314:       assertEquals(54, Node.SLASH_V);
315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
316:       assertEquals(53, Node.INPUT_ID);
317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(2, Node.POST_FLAG);
320:       assertEquals(47, Node.IS_DISPATCHER);
321:       assertEquals(4095, Node.COLUMN_MASK);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(39, Node.EMPTY_BLOCK);
324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
325:       assertEquals(48, Node.DIRECTIVES);
326:       assertEquals(37, Node.OPT_ARG_NAME);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(49, Node.DIRECT_EVAL);
330:       assertEquals(56, Node.CHANGE_TIME);
331:       assertEquals(8, Node.FLAG_NO_THROWS);
332:       assertEquals(57, Node.REFLECTED_OBJECT);
333:       assertEquals(36, Node.QUOTED_PROP);
334:       
335:       Iterable<Node> iterable0 = node0.children();
336:       assertNotNull(iterable0);
337:       assertFalse(node0.hasOneChild());
338:       assertFalse(node0.isLabelName());
339:       assertFalse(node0.isAssign());
340:       assertFalse(node0.isNumber());
341:       assertFalse(node0.isGetElem());
342:       assertFalse(node0.isCast());
343:       assertFalse(node0.isExprResult());
344:       assertEquals((-1), node0.getSourcePosition());
345:       assertFalse(node0.isOr());
346:       assertFalse(node0.isObjectLit());
347:       assertFalse(node0.hasMoreThanOneChild());
348:       assertFalse(node0.isNot());
349:       assertEquals((-1), node0.getLineno());
350:       assertFalse(node0.isWith());
351:       assertFalse(node0.isScript());
352:       assertFalse(node0.isInstanceOf());
353:       assertFalse(node0.isThis());
354:       assertFalse(node0.isGetProp());
355:       assertFalse(node0.isTypeOf());
356:       assertFalse(node0.isDec());
357:       assertFalse(node0.isComma());
358:       assertFalse(node0.isWhile());
359:       assertFalse(node0.isReturn());
360:       assertFalse(node0.hasChildren());
361:       assertFalse(node0.isBlock());
362:       assertFalse(node0.isCall());
363:       assertFalse(node0.isName());
364:       assertFalse(node0.isBreak());
365:       assertFalse(node0.isAdd());
366:       assertFalse(node0.isParamList());
367:       assertEquals((-1), node0.getCharno());
368:       assertFalse(node0.isSwitch());
369:       assertFalse(node0.isNull());
370:       assertFalse(node0.isStringKey());
371:       assertEquals(0, node0.getChildCount());
372:       assertFalse(node0.isDo());
373:       assertFalse(node0.isLabel());
374:       assertFalse(node0.isNew());
375:       assertFalse(node0.isDefaultCase());
376:       assertFalse(node0.isAssignAdd());
377:       assertFalse(node0.isVar());
378:       assertFalse(node0.isArrayLit());
379:       assertFalse(node0.isGetterDef());
380:       assertFalse(node0.isEmpty());
381:       assertFalse(node0.isTrue());
382:       assertFalse(node0.isVoid());
383:       assertFalse(node0.isDebugger());
384:       assertFalse(node0.isDelProp());
385:       assertFalse(node0.isIf());
386:       assertFalse(node0.isNE());
387:       assertFalse(node0.isCase());
388:       assertFalse(node0.isString());
389:       assertFalse(node0.isCatch());
390:       assertFalse(node0.isRegExp());
391:       assertFalse(node0.isTry());
392:       assertFalse(node0.isHook());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isFalse());
395:       assertFalse(node0.isAnd());
396:       assertFalse(node0.isContinue());
397:       assertFalse(node0.isIn());
398:       assertFalse(node0.isFunction());
399:       assertFalse(node0.isInc());
400:       assertFalse(node0.isSetterDef());
401:       assertEquals(5036, node0.getType());
402:       assertFalse(node0.isThrow());
403:       assertFalse(iterable0.contains(node0));
404:       assertEquals(52, Node.LENGTH);
405:       assertEquals(40, Node.ORIGINALNAME_PROP);
406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
409:       assertEquals(57, Node.LAST_PROP);
410:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
411:       assertEquals(12, Node.COLUMN_BITS);
412:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
413:       assertEquals(32, Node.INCRDECR_PROP);
414:       assertEquals(46, Node.IS_NAMESPACE);
415:       assertEquals(1, Node.DECR_FLAG);
416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
417:       assertEquals(50, Node.FREE_CALL);
418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
419:       assertEquals(43, Node.IS_CONSTANT_NAME);
420:       assertEquals(54, Node.SLASH_V);
421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
422:       assertEquals(53, Node.INPUT_ID);
423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(2, Node.POST_FLAG);
426:       assertEquals(47, Node.IS_DISPATCHER);
427:       assertEquals(4095, Node.COLUMN_MASK);
428:       assertEquals(55, Node.INFERRED_FUNCTION);
429:       assertEquals(39, Node.EMPTY_BLOCK);
430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
431:       assertEquals(48, Node.DIRECTIVES);
432:       assertEquals(37, Node.OPT_ARG_NAME);
433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
434:       assertEquals(29, Node.JSDOC_INFO_PROP);
435:       assertEquals(49, Node.DIRECT_EVAL);
436:       assertEquals(56, Node.CHANGE_TIME);
437:       assertEquals(8, Node.FLAG_NO_THROWS);
438:       assertEquals(57, Node.REFLECTED_OBJECT);
439:       assertEquals(36, Node.QUOTED_PROP);
440:       
441:       Node node1 = node0.getAncestor(0);
442:       assertSame(node0, node1);
443:       assertSame(node1, node0);
444:       assertNotNull(node1);
445:       assertFalse(node0.hasOneChild());
446:       assertFalse(node0.isLabelName());
447:       assertFalse(node0.isAssign());
448:       assertFalse(node0.isNumber());
449:       assertFalse(node0.isGetElem());
450:       assertFalse(node0.isCast());
451:       assertFalse(node0.isExprResult());
452:       assertEquals((-1), node0.getSourcePosition());
453:       assertFalse(node0.isOr());
454:       assertFalse(node0.isObjectLit());
455:       assertFalse(node0.hasMoreThanOneChild());
456:       assertFalse(node0.isNot());
457:       assertEquals((-1), node0.getLineno());
458:       assertFalse(node0.isWith());
459:       assertFalse(node0.isScript());
460:       assertFalse(node0.isInstanceOf());
461:       assertFalse(node0.isThis());
462:       assertFalse(node0.isGetProp());
463:       assertFalse(node0.isTypeOf());
464:       assertFalse(node0.isDec());
465:       assertFalse(node0.isComma());
466:       assertFalse(node0.isWhile());
467:       assertFalse(node0.isReturn());
468:       assertFalse(node0.hasChildren());
469:       assertFalse(node0.isBlock());
470:       assertFalse(node0.isCall());
471:       assertFalse(node0.isName());
472:       assertFalse(node0.isBreak());
473:       assertFalse(node0.isAdd());
474:       assertFalse(node0.isParamList());
475:       assertEquals((-1), node0.getCharno());
476:       assertFalse(node0.isSwitch());
477:       assertFalse(node0.isNull());
478:       assertFalse(node0.isStringKey());
479:       assertEquals(0, node0.getChildCount());
480:       assertFalse(node0.isDo());
481:       assertFalse(node0.isLabel());
482:       assertFalse(node0.isNew());
483:       assertFalse(node0.isDefaultCase());
484:       assertFalse(node0.isAssignAdd());
485:       assertFalse(node0.isVar());
486:       assertFalse(node0.isArrayLit());
487:       assertFalse(node0.isGetterDef());
488:       assertFalse(node0.isEmpty());
489:       assertFalse(node0.isTrue());
490:       assertFalse(node0.isVoid());
491:       assertFalse(node0.isDebugger());
492:       assertFalse(node0.isDelProp());
493:       assertFalse(node0.isIf());
494:       assertFalse(node0.isNE());
495:       assertFalse(node0.isCase());
496:       assertFalse(node0.isString());
497:       assertFalse(node0.isCatch());
498:       assertFalse(node0.isRegExp());
499:       assertFalse(node0.isTry());
500:       assertFalse(node0.isHook());
501:       assertFalse(node0.isFor());
502:       assertFalse(node0.isFalse());
503:       assertFalse(node0.isAnd());
504:       assertFalse(node0.isContinue());
505:       assertFalse(node0.isIn());
506:       assertFalse(node0.isFunction());
507:       assertFalse(node0.isInc());
508:       assertFalse(node0.isSetterDef());
509:       assertEquals(5036, node0.getType());
510:       assertFalse(node0.isThrow());
511:       assertFalse(node1.isScript());
512:       assertFalse(node1.isNot());
513:       assertFalse(node1.isAnd());
514:       assertFalse(node1.hasOneChild());
515:       assertFalse(node1.isGetProp());
516:       assertFalse(node1.isObjectLit());
517:       assertFalse(node1.isNumber());
518:       assertFalse(node1.isLabelName());
519:       assertEquals((-1), node1.getSourcePosition());
520:       assertFalse(node1.isThrow());
521:       assertFalse(node1.isAssignAdd());
522:       assertFalse(node1.isLabel());
523:       assertFalse(node1.isFalse());
524:       assertFalse(node1.isCast());
525:       assertFalse(node1.isContinue());
526:       assertFalse(node1.isDo());
527:       assertFalse(node1.isWhile());
528:       assertFalse(node1.isOr());
529:       assertFalse(node1.isNew());
530:       assertFalse(node1.isAdd());
531:       assertFalse(node1.isString());
532:       assertFalse(node1.isBreak());
533:       assertFalse(node1.isDec());
534:       assertFalse(node1.hasChildren());
535:       assertFalse(node1.isTypeOf());
536:       assertFalse(node1.isNull());
537:       assertFalse(node1.isDelProp());
538:       assertFalse(node1.isAssign());
539:       assertFalse(node1.isComma());
540:       assertFalse(node1.isName());
541:       assertFalse(node1.isReturn());
542:       assertFalse(node1.isExprResult());
543:       assertFalse(node1.isGetElem());
544:       assertFalse(node1.isCall());
545:       assertFalse(node1.isDefaultCase());
546:       assertFalse(node1.isRegExp());
547:       assertFalse(node1.isDebugger());
548:       assertFalse(node1.isVoid());
549:       assertFalse(node1.isTrue());
550:       assertFalse(node1.isTry());
551:       assertFalse(node1.isEmpty());
552:       assertFalse(node1.isGetterDef());
553:       assertFalse(node1.isSetterDef());
554:       assertFalse(node1.isStringKey());
555:       assertFalse(node1.isVar());
556:       assertFalse(node1.isParamList());
557:       assertEquals(5036, node1.getType());
558:       assertEquals(0, node1.getChildCount());
559:       assertFalse(node1.isArrayLit());
560:       assertFalse(node1.isFunction());
561:       assertFalse(node1.isCase());
562:       assertEquals((-1), node1.getCharno());
563:       assertFalse(node1.isBlock());
564:       assertFalse(node1.isSwitch());
565:       assertFalse(node1.isIn());
566:       assertFalse(node1.isInc());
567:       assertFalse(node1.isIf());
568:       assertFalse(node1.isThis());
569:       assertFalse(node1.isFor());
570:       assertFalse(node1.isNE());
571:       assertFalse(node1.isHook());
572:       assertFalse(node1.isInstanceOf());
573:       assertEquals((-1), node1.getLineno());
574:       assertFalse(node1.hasMoreThanOneChild());
575:       assertFalse(node1.isCatch());
576:       assertFalse(node1.isWith());
577:       assertEquals(52, Node.LENGTH);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(15, Node.NO_SIDE_EFFECTS);
580:       assertEquals(30, Node.VAR_ARGS_NAME);
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(57, Node.LAST_PROP);
583:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
584:       assertEquals(12, Node.COLUMN_BITS);
585:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
586:       assertEquals(32, Node.INCRDECR_PROP);
587:       assertEquals(46, Node.IS_NAMESPACE);
588:       assertEquals(1, Node.DECR_FLAG);
589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
590:       assertEquals(50, Node.FREE_CALL);
591:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
592:       assertEquals(43, Node.IS_CONSTANT_NAME);
593:       assertEquals(54, Node.SLASH_V);
594:       assertEquals(51, Node.STATIC_SOURCE_FILE);
595:       assertEquals(53, Node.INPUT_ID);
596:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
597:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
598:       assertEquals(2, Node.POST_FLAG);
599:       assertEquals(47, Node.IS_DISPATCHER);
600:       assertEquals(4095, Node.COLUMN_MASK);
601:       assertEquals(55, Node.INFERRED_FUNCTION);
602:       assertEquals(39, Node.EMPTY_BLOCK);
603:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
604:       assertEquals(48, Node.DIRECTIVES);
605:       assertEquals(37, Node.OPT_ARG_NAME);
606:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
607:       assertEquals(29, Node.JSDOC_INFO_PROP);
608:       assertEquals(49, Node.DIRECT_EVAL);
609:       assertEquals(56, Node.CHANGE_TIME);
610:       assertEquals(8, Node.FLAG_NO_THROWS);
611:       assertEquals(57, Node.REFLECTED_OBJECT);
612:       assertEquals(36, Node.QUOTED_PROP);
613:       assertEquals(1, Node.DECR_FLAG);
614:       assertEquals(46, Node.IS_NAMESPACE);
615:       assertEquals(30, Node.VAR_ARGS_NAME);
616:       assertEquals(51, Node.STATIC_SOURCE_FILE);
617:       assertEquals(12, Node.COLUMN_BITS);
618:       assertEquals(37, Node.OPT_ARG_NAME);
619:       assertEquals(54, Node.SLASH_V);
620:       assertEquals(2, Node.POST_FLAG);
621:       assertEquals(49, Node.DIRECT_EVAL);
622:       assertEquals(40, Node.ORIGINALNAME_PROP);
623:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
624:       assertEquals(56, Node.CHANGE_TIME);
625:       assertEquals(57, Node.REFLECTED_OBJECT);
626:       assertEquals(47, Node.IS_DISPATCHER);
627:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
628:       assertEquals(52, Node.LENGTH);
629:       assertEquals(8, Node.FLAG_NO_THROWS);
630:       assertEquals(57, Node.LAST_PROP);
631:       assertEquals(29, Node.JSDOC_INFO_PROP);
632:       assertEquals(53, Node.INPUT_ID);
633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(4095, Node.COLUMN_MASK);
638:       assertEquals(36, Node.QUOTED_PROP);
639:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
640:       assertEquals(48, Node.DIRECTIVES);
641:       assertEquals(43, Node.IS_CONSTANT_NAME);
642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
643:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
645:       assertEquals(50, Node.FREE_CALL);
646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
647:       assertEquals(32, Node.INCRDECR_PROP);
648:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
649:       
650:       boolean boolean1 = node1.isQualifiedName();
651:       assertSame(node0, node1);
652:       assertSame(node1, node0);
653:       assertTrue(boolean1 == boolean0);
654:       assertFalse(boolean1);
655:       assertFalse(node0.hasOneChild());
656:       assertFalse(node0.isLabelName());
657:       assertFalse(node0.isAssign());
658:       assertFalse(node0.isNumber());
659:       assertFalse(node0.isGetElem());
660:       assertFalse(node0.isCast());
661:       assertFalse(node0.isExprResult());
662:       assertEquals((-1), node0.getSourcePosition());
663:       assertFalse(node0.isOr());
664:       assertFalse(node0.isObjectLit());
665:       assertFalse(node0.hasMoreThanOneChild());
666:       assertFalse(node0.isNot());
667:       assertEquals((-1), node0.getLineno());
668:       assertFalse(node0.isWith());
669:       assertFalse(node0.isScript());
670:       assertFalse(node0.isInstanceOf());
671:       assertFalse(node0.isThis());
672:       assertFalse(node0.isGetProp());
673:       assertFalse(node0.isTypeOf());
674:       assertFalse(node0.isDec());
675:       assertFalse(node0.isComma());
676:       assertFalse(node0.isWhile());
677:       assertFalse(node0.isReturn());
678:       assertFalse(node0.hasChildren());
679:       assertFalse(node0.isBlock());
680:       assertFalse(node0.isCall());
681:       assertFalse(node0.isName());
682:       assertFalse(node0.isBreak());
683:       assertFalse(node0.isAdd());
684:       assertFalse(node0.isParamList());
685:       assertEquals((-1), node0.getCharno());
686:       assertFalse(node0.isSwitch());
687:       assertFalse(node0.isNull());
688:       assertFalse(node0.isStringKey());
689:       assertEquals(0, node0.getChildCount());
690:       assertFalse(node0.isDo());
691:       assertFalse(node0.isLabel());
692:       assertFalse(node0.isNew());
693:       assertFalse(node0.isDefaultCase());
694:       assertFalse(node0.isAssignAdd());
695:       assertFalse(node0.isVar());
696:       assertFalse(node0.isArrayLit());
697:       assertFalse(node0.isGetterDef());
698:       assertFalse(node0.isEmpty());
699:       assertFalse(node0.isTrue());
700:       assertFalse(node0.isVoid());
701:       assertFalse(node0.isDebugger());
702:       assertFalse(node0.isDelProp());
703:       assertFalse(node0.isIf());
704:       assertFalse(node0.isNE());
705:       assertFalse(node0.isCase());
706:       assertFalse(node0.isString());
707:       assertFalse(node0.isCatch());
708:       assertFalse(node0.isRegExp());
709:       assertFalse(node0.isTry());
710:       assertFalse(node0.isHook());
711:       assertFalse(node0.isFor());
712:       assertFalse(node0.isFalse());
713:       assertFalse(node0.isAnd());
714:       assertFalse(node0.isContinue());
715:       assertFalse(node0.isIn());
716:       assertFalse(node0.isFunction());
717:       assertFalse(node0.isInc());
718:       assertFalse(node0.isSetterDef());
719:       assertEquals(5036, node0.getType());
720:       assertFalse(node0.isThrow());
721:       assertFalse(node1.isScript());
722:       assertFalse(node1.isNot());
723:       assertFalse(node1.isAnd());
724:       assertFalse(node1.hasOneChild());
725:       assertFalse(node1.isGetProp());
726:       assertFalse(node1.isObjectLit());
727:       assertFalse(node1.isNumber());
728:       assertFalse(node1.isLabelName());
729:       assertEquals((-1), node1.getSourcePosition());
730:       assertFalse(node1.isThrow());
731:       assertFalse(node1.isAssignAdd());
732:       assertFalse(node1.isLabel());
733:       assertFalse(node1.isFalse());
734:       assertFalse(node1.isCast());
735:       assertFalse(node1.isContinue());
736:       assertFalse(node1.isDo());
737:       assertFalse(node1.isWhile());
738:       assertFalse(node1.isOr());
739:       assertFalse(node1.isNew());
740:       assertFalse(node1.isAdd());
741:       assertFalse(node1.isString());
742:       assertFalse(node1.isBreak());
743:       assertFalse(node1.isDec());
744:       assertFalse(node1.hasChildren());
745:       assertFalse(node1.isTypeOf());
746:       assertFalse(node1.isNull());
747:       assertFalse(node1.isDelProp());
748:       assertFalse(node1.isAssign());
749:       assertFalse(node1.isComma());
750:       assertFalse(node1.isName());
751:       assertFalse(node1.isReturn());
752:       assertFalse(node1.isExprResult());
753:       assertFalse(node1.isGetElem());
754:       assertFalse(node1.isCall());
755:       assertFalse(node1.isDefaultCase());
756:       assertFalse(node1.isRegExp());
757:       assertFalse(node1.isDebugger());
758:       assertFalse(node1.isVoid());
759:       assertFalse(node1.isTrue());
760:       assertFalse(node1.isTry());
761:       assertFalse(node1.isEmpty());
762:       assertFalse(node1.isGetterDef());
763:       assertFalse(node1.isSetterDef());
764:       assertFalse(node1.isStringKey());
765:       assertFalse(node1.isVar());
766:       assertFalse(node1.isParamList());
767:       assertEquals(5036, node1.getType());
768:       assertEquals(0, node1.getChildCount());
769:       assertFalse(node1.isArrayLit());
770:       assertFalse(node1.isFunction());
771:       assertFalse(node1.isCase());
772:       assertEquals((-1), node1.getCharno());
773:       assertFalse(node1.isBlock());
774:       assertFalse(node1.isSwitch());
775:       assertFalse(node1.isIn());
776:       assertFalse(node1.isInc());
777:       assertFalse(node1.isIf());
778:       assertFalse(node1.isThis());
779:       assertFalse(node1.isFor());
780:       assertFalse(node1.isNE());
781:       assertFalse(node1.isHook());
782:       assertFalse(node1.isInstanceOf());
783:       assertEquals((-1), node1.getLineno());
784:       assertFalse(node1.hasMoreThanOneChild());
785:       assertFalse(node1.isCatch());
786:       assertFalse(node1.isWith());
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(40, Node.ORIGINALNAME_PROP);
789:       assertEquals(15, Node.NO_SIDE_EFFECTS);
790:       assertEquals(30, Node.VAR_ARGS_NAME);
791:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
792:       assertEquals(57, Node.LAST_PROP);
793:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
794:       assertEquals(12, Node.COLUMN_BITS);
795:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
796:       assertEquals(32, Node.INCRDECR_PROP);
797:       assertEquals(46, Node.IS_NAMESPACE);
798:       assertEquals(1, Node.DECR_FLAG);
799:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
800:       assertEquals(50, Node.FREE_CALL);
801:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
802:       assertEquals(43, Node.IS_CONSTANT_NAME);
803:       assertEquals(54, Node.SLASH_V);
804:       assertEquals(51, Node.STATIC_SOURCE_FILE);
805:       assertEquals(53, Node.INPUT_ID);
806:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
807:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
808:       assertEquals(2, Node.POST_FLAG);
809:       assertEquals(47, Node.IS_DISPATCHER);
810:       assertEquals(4095, Node.COLUMN_MASK);
811:       assertEquals(55, Node.INFERRED_FUNCTION);
812:       assertEquals(39, Node.EMPTY_BLOCK);
813:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
814:       assertEquals(48, Node.DIRECTIVES);
815:       assertEquals(37, Node.OPT_ARG_NAME);
816:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
817:       assertEquals(29, Node.JSDOC_INFO_PROP);
818:       assertEquals(49, Node.DIRECT_EVAL);
819:       assertEquals(56, Node.CHANGE_TIME);
820:       assertEquals(8, Node.FLAG_NO_THROWS);
821:       assertEquals(57, Node.REFLECTED_OBJECT);
822:       assertEquals(36, Node.QUOTED_PROP);
823:       assertEquals(1, Node.DECR_FLAG);
824:       assertEquals(46, Node.IS_NAMESPACE);
825:       assertEquals(30, Node.VAR_ARGS_NAME);
826:       assertEquals(51, Node.STATIC_SOURCE_FILE);
827:       assertEquals(12, Node.COLUMN_BITS);
828:       assertEquals(37, Node.OPT_ARG_NAME);
829:       assertEquals(54, Node.SLASH_V);
830:       assertEquals(2, Node.POST_FLAG);
831:       assertEquals(49, Node.DIRECT_EVAL);
832:       assertEquals(40, Node.ORIGINALNAME_PROP);
833:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
834:       assertEquals(56, Node.CHANGE_TIME);
835:       assertEquals(57, Node.REFLECTED_OBJECT);
836:       assertEquals(47, Node.IS_DISPATCHER);
837:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
838:       assertEquals(52, Node.LENGTH);
839:       assertEquals(8, Node.FLAG_NO_THROWS);
840:       assertEquals(57, Node.LAST_PROP);
841:       assertEquals(29, Node.JSDOC_INFO_PROP);
842:       assertEquals(53, Node.INPUT_ID);
843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
844:       assertEquals(39, Node.EMPTY_BLOCK);
845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
846:       assertEquals(55, Node.INFERRED_FUNCTION);
847:       assertEquals(4095, Node.COLUMN_MASK);
848:       assertEquals(36, Node.QUOTED_PROP);
849:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
850:       assertEquals(48, Node.DIRECTIVES);
851:       assertEquals(43, Node.IS_CONSTANT_NAME);
852:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
853:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
854:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
855:       assertEquals(50, Node.FREE_CALL);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       assertEquals(32, Node.INCRDECR_PROP);
858:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
859:       
860:       boolean boolean2 = node0.wasEmptyNode();
861:       assertSame(node0, node1);
862:       assertTrue(boolean2 == boolean1);
863:       assertTrue(boolean2 == boolean0);
864:       assertFalse(boolean2);
865:       assertFalse(node0.hasOneChild());
866:       assertFalse(node0.isLabelName());
867:       assertFalse(node0.isAssign());
868:       assertFalse(node0.isNumber());
869:       assertFalse(node0.isGetElem());
870:       assertFalse(node0.isCast());
871:       assertFalse(node0.isExprResult());
872:       assertEquals((-1), node0.getSourcePosition());
873:       assertFalse(node0.isOr());
874:       assertFalse(node0.isObjectLit());
875:       assertFalse(node0.hasMoreThanOneChild());
876:       assertFalse(node0.isNot());
877:       assertEquals((-1), node0.getLineno());
878:       assertFalse(node0.isWith());
879:       assertFalse(node0.isScript());
880:       assertFalse(node0.isInstanceOf());
881:       assertFalse(node0.isThis());
882:       assertFalse(node0.isGetProp());
883:       assertFalse(node0.isTypeOf());
884:       assertFalse(node0.isDec());
885:       assertFalse(node0.isComma());
886:       assertFalse(node0.isWhile());
887:       assertFalse(node0.isReturn());
888:       assertFalse(node0.hasChildren());
889:       assertFalse(node0.isBlock());
890:       assertFalse(node0.isCall());
891:       assertFalse(node0.isName());
892:       assertFalse(node0.isBreak());
893:       assertFalse(node0.isAdd());
894:       assertFalse(node0.isParamList());
895:       assertEquals((-1), node0.getCharno());
896:       assertFalse(node0.isSwitch());
897:       assertFalse(node0.isNull());
898:       assertFalse(node0.isStringKey());
899:       assertEquals(0, node0.getChildCount());
900:       assertFalse(node0.isDo());
901:       assertFalse(node0.isLabel());
902:       assertFalse(node0.isNew());
903:       assertFalse(node0.isDefaultCase());
904:       assertFalse(node0.isAssignAdd());
905:       assertFalse(node0.isVar());
906:       assertFalse(node0.isArrayLit());
907:       assertFalse(node0.isGetterDef());
908:       assertFalse(node0.isEmpty());
909:       assertFalse(node0.isTrue());
910:       assertFalse(node0.isVoid());
911:       assertFalse(node0.isDebugger());
912:       assertFalse(node0.isDelProp());
913:       assertFalse(node0.isIf());
914:       assertFalse(node0.isNE());
915:       assertFalse(node0.isCase());
916:       assertFalse(node0.isString());
917:       assertFalse(node0.isCatch());
918:       assertFalse(node0.isRegExp());
919:       assertFalse(node0.isTry());
920:       assertFalse(node0.isHook());
921:       assertFalse(node0.isFor());
922:       assertFalse(node0.isFalse());
923:       assertFalse(node0.isAnd());
924:       assertFalse(node0.isContinue());
925:       assertFalse(node0.isIn());
926:       assertFalse(node0.isFunction());
927:       assertFalse(node0.isInc());
928:       assertFalse(node0.isSetterDef());
929:       assertEquals(5036, node0.getType());
930:       assertFalse(node0.isThrow());
931:       assertEquals(52, Node.LENGTH);
932:       assertEquals(40, Node.ORIGINALNAME_PROP);
933:       assertEquals(15, Node.NO_SIDE_EFFECTS);
934:       assertEquals(30, Node.VAR_ARGS_NAME);
935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
936:       assertEquals(57, Node.LAST_PROP);
937:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
938:       assertEquals(12, Node.COLUMN_BITS);
939:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
940:       assertEquals(32, Node.INCRDECR_PROP);
941:       assertEquals(46, Node.IS_NAMESPACE);
942:       assertEquals(1, Node.DECR_FLAG);
943:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
944:       assertEquals(50, Node.FREE_CALL);
945:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
946:       assertEquals(43, Node.IS_CONSTANT_NAME);
947:       assertEquals(54, Node.SLASH_V);
948:       assertEquals(51, Node.STATIC_SOURCE_FILE);
949:       assertEquals(53, Node.INPUT_ID);
950:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
951:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
952:       assertEquals(2, Node.POST_FLAG);
953:       assertEquals(47, Node.IS_DISPATCHER);
954:       assertEquals(4095, Node.COLUMN_MASK);
955:       assertEquals(55, Node.INFERRED_FUNCTION);
956:       assertEquals(39, Node.EMPTY_BLOCK);
957:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
958:       assertEquals(48, Node.DIRECTIVES);
959:       assertEquals(37, Node.OPT_ARG_NAME);
960:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
961:       assertEquals(29, Node.JSDOC_INFO_PROP);
962:       assertEquals(49, Node.DIRECT_EVAL);
963:       assertEquals(56, Node.CHANGE_TIME);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(57, Node.REFLECTED_OBJECT);
966:       assertEquals(36, Node.QUOTED_PROP);
967:       
968:       boolean boolean3 = node0.isThrow();
969:       assertSame(node0, node1);
970:       assertTrue(boolean3 == boolean1);
971:       assertTrue(boolean3 == boolean2);
972:       assertTrue(boolean3 == boolean0);
973:       assertFalse(boolean3);
974:       assertFalse(node0.hasOneChild());
975:       assertFalse(node0.isLabelName());
976:       assertFalse(node0.isAssign());
977:       assertFalse(node0.isNumber());
978:       assertFalse(node0.isGetElem());
979:       assertFalse(node0.isCast());
980:       assertFalse(node0.isExprResult());
981:       assertEquals((-1), node0.getSourcePosition());
982:       assertFalse(node0.isOr());
983:       assertFalse(node0.isObjectLit());
984:       assertFalse(node0.hasMoreThanOneChild());
985:       assertFalse(node0.isNot());
986:       assertEquals((-1), node0.getLineno());
987:       assertFalse(node0.isWith());
988:       assertFalse(node0.isScript());
989:       assertFalse(node0.isInstanceOf());
990:       assertFalse(node0.isThis());
991:       assertFalse(node0.isGetProp());
992:       assertFalse(node0.isTypeOf());
993:       assertFalse(node0.isDec());
994:       assertFalse(node0.isComma());
995:       assertFalse(node0.isWhile());
996:       assertFalse(node0.isReturn());
997:       assertFalse(node0.hasChildren());
998:       assertFalse(node0.isBlock());
999:       assertFalse(node0.isCall());
1000:       assertFalse(node0.isName());
1001:       assertFalse(node0.isBreak());
1002:       assertFalse(node0.isAdd());
1003:       assertFalse(node0.isParamList());
1004:       assertEquals((-1), node0.getCharno());
1005:       assertFalse(node0.isSwitch());
1006:       assertFalse(node0.isNull());
1007:       assertFalse(node0.isStringKey());
1008:       assertEquals(0, node0.getChildCount());
1009:       assertFalse(node0.isDo());
1010:       assertFalse(node0.isLabel());
1011:       assertFalse(node0.isNew());
1012:       assertFalse(node0.isDefaultCase());
1013:       assertFalse(node0.isAssignAdd());
1014:       assertFalse(node0.isVar());
1015:       assertFalse(node0.isArrayLit());
1016:       assertFalse(node0.isGetterDef());
1017:       assertFalse(node0.isEmpty());
1018:       assertFalse(node0.isTrue());
1019:       assertFalse(node0.isVoid());
1020:       assertFalse(node0.isDebugger());
1021:       assertFalse(node0.isDelProp());
1022:       assertFalse(node0.isIf());
1023:       assertFalse(node0.isNE());
1024:       assertFalse(node0.isCase());
1025:       assertFalse(node0.isString());
1026:       assertFalse(node0.isCatch());
1027:       assertFalse(node0.isRegExp());
1028:       assertFalse(node0.isTry());
1029:       assertFalse(node0.isHook());
1030:       assertFalse(node0.isFor());
1031:       assertFalse(node0.isFalse());
1032:       assertFalse(node0.isAnd());
1033:       assertFalse(node0.isContinue());
1034:       assertFalse(node0.isIn());
1035:       assertFalse(node0.isFunction());
1036:       assertFalse(node0.isInc());
1037:       assertFalse(node0.isSetterDef());
1038:       assertEquals(5036, node0.getType());
1039:       assertFalse(node0.isThrow());
1040:       assertEquals(52, Node.LENGTH);
1041:       assertEquals(40, Node.ORIGINALNAME_PROP);
1042:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1043:       assertEquals(30, Node.VAR_ARGS_NAME);
1044:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1045:       assertEquals(57, Node.LAST_PROP);
1046:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1047:       assertEquals(12, Node.COLUMN_BITS);
1048:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1049:       assertEquals(32, Node.INCRDECR_PROP);
1050:       assertEquals(46, Node.IS_NAMESPACE);
1051:       assertEquals(1, Node.DECR_FLAG);
1052:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1053:       assertEquals(50, Node.FREE_CALL);
1054:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1055:       assertEquals(43, Node.IS_CONSTANT_NAME);
1056:       assertEquals(54, Node.SLASH_V);
1057:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1058:       assertEquals(53, Node.INPUT_ID);
1059:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1060:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1061:       assertEquals(2, Node.POST_FLAG);
1062:       assertEquals(47, Node.IS_DISPATCHER);
1063:       assertEquals(4095, Node.COLUMN_MASK);
1064:       assertEquals(55, Node.INFERRED_FUNCTION);
1065:       assertEquals(39, Node.EMPTY_BLOCK);
1066:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1067:       assertEquals(48, Node.DIRECTIVES);
1068:       assertEquals(37, Node.OPT_ARG_NAME);
1069:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1070:       assertEquals(29, Node.JSDOC_INFO_PROP);
1071:       assertEquals(49, Node.DIRECT_EVAL);
1072:       assertEquals(56, Node.CHANGE_TIME);
1073:       assertEquals(8, Node.FLAG_NO_THROWS);
1074:       assertEquals(57, Node.REFLECTED_OBJECT);
1075:       assertEquals(36, Node.QUOTED_PROP);
1076:       
1077:       node1.setCharno(46);
1078:       assertSame(node0, node1);
1079:       assertSame(node1, node0);
1080:       assertFalse(node0.hasOneChild());
1081:       assertFalse(node0.isLabelName());
1082:       assertFalse(node0.isAssign());
1083:       assertFalse(node0.isNumber());
1084:       assertFalse(node0.isGetElem());
1085:       assertFalse(node0.isCast());
1086:       assertFalse(node0.isExprResult());
1087:       assertEquals((-1), node0.getSourcePosition());
1088:       assertFalse(node0.isOr());
1089:       assertFalse(node0.isObjectLit());
1090:       assertFalse(node0.hasMoreThanOneChild());
1091:       assertFalse(node0.isNot());
1092:       assertEquals((-1), node0.getLineno());
1093:       assertFalse(node0.isWith());
1094:       assertFalse(node0.isScript());
1095:       assertFalse(node0.isInstanceOf());
1096:       assertFalse(node0.isThis());
1097:       assertFalse(node0.isGetProp());
1098:       assertFalse(node0.isTypeOf());
1099:       assertFalse(node0.isDec());
1100:       assertFalse(node0.isComma());
1101:       assertFalse(node0.isWhile());
1102:       assertFalse(node0.isReturn());
1103:       assertFalse(node0.hasChildren());
1104:       assertFalse(node0.isBlock());
1105:       assertFalse(node0.isCall());
1106:       assertFalse(node0.isName());
1107:       assertFalse(node0.isBreak());
1108:       assertFalse(node0.isAdd());
1109:       assertFalse(node0.isParamList());
1110:       assertEquals((-1), node0.getCharno());
1111:       assertFalse(node0.isSwitch());
1112:       assertFalse(node0.isNull());
1113:       assertFalse(node0.isStringKey());
1114:       assertEquals(0, node0.getChildCount());
1115:       assertFalse(node0.isDo());
1116:       assertFalse(node0.isLabel());
1117:       assertFalse(node0.isNew());
1118:       assertFalse(node0.isDefaultCase());
1119:       assertFalse(node0.isAssignAdd());
1120:       assertFalse(node0.isVar());
1121:       assertFalse(node0.isArrayLit());
1122:       assertFalse(node0.isGetterDef());
1123:       assertFalse(node0.isEmpty());
1124:       assertFalse(node0.isTrue());
1125:       assertFalse(node0.isVoid());
1126:       assertFalse(node0.isDebugger());
1127:       assertFalse(node0.isDelProp());
1128:       assertFalse(node0.isIf());
1129:       assertFalse(node0.isNE());
1130:       assertFalse(node0.isCase());
1131:       assertFalse(node0.isString());
1132:       assertFalse(node0.isCatch());
1133:       assertFalse(node0.isRegExp());
1134:       assertFalse(node0.isTry());
1135:       assertFalse(node0.isHook());
1136:       assertFalse(node0.isFor());
1137:       assertFalse(node0.isFalse());
1138:       assertFalse(node0.isAnd());
1139:       assertFalse(node0.isContinue());
1140:       assertFalse(node0.isIn());
1141:       assertFalse(node0.isFunction());
1142:       assertFalse(node0.isInc());
1143:       assertFalse(node0.isSetterDef());
1144:       assertEquals(5036, node0.getType());
1145:       assertFalse(node0.isThrow());
1146:       assertFalse(node1.isScript());
1147:       assertFalse(node1.isNot());
1148:       assertFalse(node1.isAnd());
1149:       assertFalse(node1.hasOneChild());
1150:       assertFalse(node1.isGetProp());
1151:       assertFalse(node1.isObjectLit());
1152:       assertFalse(node1.isNumber());
1153:       assertFalse(node1.isLabelName());
1154:       assertEquals((-1), node1.getSourcePosition());
1155:       assertFalse(node1.isThrow());
1156:       assertFalse(node1.isAssignAdd());
1157:       assertFalse(node1.isLabel());
1158:       assertFalse(node1.isFalse());
1159:       assertFalse(node1.isCast());
1160:       assertFalse(node1.isContinue());
1161:       assertFalse(node1.isDo());
1162:       assertFalse(node1.isWhile());
1163:       assertFalse(node1.isOr());
1164:       assertFalse(node1.isNew());
1165:       assertFalse(node1.isAdd());
1166:       assertFalse(node1.isString());
1167:       assertFalse(node1.isBreak());
1168:       assertFalse(node1.isDec());
1169:       assertFalse(node1.hasChildren());
1170:       assertFalse(node1.isTypeOf());
1171:       assertFalse(node1.isNull());
1172:       assertFalse(node1.isDelProp());
1173:       assertFalse(node1.isAssign());
1174:       assertFalse(node1.isComma());
1175:       assertFalse(node1.isName());
1176:       assertFalse(node1.isReturn());
1177:       assertFalse(node1.isExprResult());
1178:       assertFalse(node1.isGetElem());
1179:       assertFalse(node1.isCall());
1180:       assertFalse(node1.isDefaultCase());
1181:       assertFalse(node1.isRegExp());
1182:       assertFalse(node1.isDebugger());
1183:       assertFalse(node1.isVoid());
1184:       assertFalse(node1.isTrue());
1185:       assertFalse(node1.isTry());
1186:       assertFalse(node1.isEmpty());
1187:       assertFalse(node1.isGetterDef());
1188:       assertFalse(node1.isSetterDef());
1189:       assertFalse(node1.isStringKey());
1190:       assertFalse(node1.isVar());
1191:       assertFalse(node1.isParamList());
1192:       assertEquals(5036, node1.getType());
1193:       assertEquals(0, node1.getChildCount());
1194:       assertFalse(node1.isArrayLit());
1195:       assertFalse(node1.isFunction());
1196:       assertFalse(node1.isCase());
1197:       assertEquals((-1), node1.getCharno());
1198:       assertFalse(node1.isBlock());
1199:       assertFalse(node1.isSwitch());
1200:       assertFalse(node1.isIn());
1201:       assertFalse(node1.isInc());
1202:       assertFalse(node1.isIf());
1203:       assertFalse(node1.isThis());
1204:       assertFalse(node1.isFor());
1205:       assertFalse(node1.isNE());
1206:       assertFalse(node1.isHook());
1207:       assertFalse(node1.isInstanceOf());
1208:       assertEquals((-1), node1.getLineno());
1209:       assertFalse(node1.hasMoreThanOneChild());
1210:       assertFalse(node1.isCatch());
1211:       assertFalse(node1.isWith());
1212:       assertEquals(52, Node.LENGTH);
1213:       assertEquals(40, Node.ORIGINALNAME_PROP);
1214:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1215:       assertEquals(30, Node.VAR_ARGS_NAME);
1216:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1217:       assertEquals(57, Node.LAST_PROP);
1218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1219:       assertEquals(12, Node.COLUMN_BITS);
1220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1221:       assertEquals(32, Node.INCRDECR_PROP);
1222:       assertEquals(46, Node.IS_NAMESPACE);
1223:       assertEquals(1, Node.DECR_FLAG);
1224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1225:       assertEquals(50, Node.FREE_CALL);
1226:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1227:       assertEquals(43, Node.IS_CONSTANT_NAME);
1228:       assertEquals(54, Node.SLASH_V);
1229:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1230:       assertEquals(53, Node.INPUT_ID);
1231:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1232:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1233:       assertEquals(2, Node.POST_FLAG);
1234:       assertEquals(47, Node.IS_DISPATCHER);
1235:       assertEquals(4095, Node.COLUMN_MASK);
1236:       assertEquals(55, Node.INFERRED_FUNCTION);
1237:       assertEquals(39, Node.EMPTY_BLOCK);
1238:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1239:       assertEquals(48, Node.DIRECTIVES);
1240:       assertEquals(37, Node.OPT_ARG_NAME);
1241:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1242:       assertEquals(29, Node.JSDOC_INFO_PROP);
1243:       assertEquals(49, Node.DIRECT_EVAL);
1244:       assertEquals(56, Node.CHANGE_TIME);
1245:       assertEquals(8, Node.FLAG_NO_THROWS);
1246:       assertEquals(57, Node.REFLECTED_OBJECT);
1247:       assertEquals(36, Node.QUOTED_PROP);
1248:       assertEquals(1, Node.DECR_FLAG);
1249:       assertEquals(46, Node.IS_NAMESPACE);
1250:       assertEquals(30, Node.VAR_ARGS_NAME);
1251:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1252:       assertEquals(12, Node.COLUMN_BITS);
1253:       assertEquals(37, Node.OPT_ARG_NAME);
1254:       assertEquals(54, Node.SLASH_V);
1255:       assertEquals(2, Node.POST_FLAG);
1256:       assertEquals(49, Node.DIRECT_EVAL);
1257:       assertEquals(40, Node.ORIGINALNAME_PROP);
1258:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1259:       assertEquals(56, Node.CHANGE_TIME);
1260:       assertEquals(57, Node.REFLECTED_OBJECT);
1261:       assertEquals(47, Node.IS_DISPATCHER);
1262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1263:       assertEquals(52, Node.LENGTH);
1264:       assertEquals(8, Node.FLAG_NO_THROWS);
1265:       assertEquals(57, Node.LAST_PROP);
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(53, Node.INPUT_ID);
1268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1269:       assertEquals(39, Node.EMPTY_BLOCK);
1270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1271:       assertEquals(55, Node.INFERRED_FUNCTION);
1272:       assertEquals(4095, Node.COLUMN_MASK);
1273:       assertEquals(36, Node.QUOTED_PROP);
1274:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1275:       assertEquals(48, Node.DIRECTIVES);
1276:       assertEquals(43, Node.IS_CONSTANT_NAME);
1277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1278:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1279:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1280:       assertEquals(50, Node.FREE_CALL);
1281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1282:       assertEquals(32, Node.INCRDECR_PROP);
1283:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1284:       
1285:       node0.type = 861;
1286:       assertFalse(node0.hasOneChild());
1287:       assertFalse(node0.isLabelName());
1288:       assertFalse(node0.isAssign());
1289:       assertFalse(node0.isNumber());
1290:       assertFalse(node0.isGetElem());
1291:       assertFalse(node0.isCast());
1292:       assertFalse(node0.isExprResult());
1293:       assertEquals((-1), node0.getSourcePosition());
1294:       assertFalse(node0.isOr());
1295:       assertFalse(node0.isObjectLit());
1296:       assertFalse(node0.hasMoreThanOneChild());
1297:       assertFalse(node0.isNot());
1298:       assertEquals((-1), node0.getLineno());
1299:       assertFalse(node0.isWith());
1300:       assertFalse(node0.isScript());
1301:       assertFalse(node0.isInstanceOf());
1302:       assertFalse(node0.isThis());
1303:       assertFalse(node0.isGetProp());
1304:       assertFalse(node0.isTypeOf());
1305:       assertFalse(node0.isDec());
1306:       assertFalse(node0.isComma());
1307:       assertFalse(node0.isWhile());
1308:       assertFalse(node0.isReturn());
1309:       assertFalse(node0.hasChildren());
1310:       assertFalse(node0.isBlock());
1311:       assertFalse(node0.isCall());
1312:       assertFalse(node0.isName());
1313:       assertFalse(node0.isBreak());
1314:       assertFalse(node0.isAdd());
1315:       assertFalse(node0.isParamList());
1316:       assertEquals((-1), node0.getCharno());
1317:       assertFalse(node0.isSwitch());
1318:       assertFalse(node0.isNull());
1319:       assertFalse(node0.isStringKey());
1320:       assertEquals(0, node0.getChildCount());
1321:       assertFalse(node0.isDo());
1322:       assertFalse(node0.isLabel());
1323:       assertFalse(node0.isNew());
1324:       assertFalse(node0.isDefaultCase());
1325:       assertFalse(node0.isAssignAdd());
1326:       assertFalse(node0.isVar());
1327:       assertFalse(node0.isArrayLit());
1328:       assertFalse(node0.isGetterDef());
1329:       assertFalse(node0.isEmpty());
1330:       assertFalse(node0.isTrue());
1331:       assertFalse(node0.isVoid());
1332:       assertFalse(node0.isDebugger());
1333:       assertFalse(node0.isDelProp());
1334:       assertFalse(node0.isIf());
1335:       assertFalse(node0.isNE());
1336:       assertFalse(node0.isCase());
1337:       assertFalse(node0.isString());
1338:       assertFalse(node0.isCatch());
1339:       assertFalse(node0.isRegExp());
1340:       assertFalse(node0.isTry());
1341:       assertFalse(node0.isHook());
1342:       assertFalse(node0.isFor());
1343:       assertFalse(node0.isFalse());
1344:       assertEquals(861, node0.getType());
1345:       assertFalse(node0.isAnd());
1346:       assertFalse(node0.isContinue());
1347:       assertFalse(node0.isIn());
1348:       assertFalse(node0.isFunction());
1349:       assertFalse(node0.isInc());
1350:       assertFalse(node0.isSetterDef());
1351:       assertFalse(node0.isThrow());
1352:       
1353:       node0.setType(51);
1354:       assertSame(node0, node1);
1355:       assertFalse(node0.hasOneChild());
1356:       assertFalse(node0.isLabelName());
1357:       assertFalse(node0.isAssign());
1358:       assertFalse(node0.isNumber());
1359:       assertFalse(node0.isGetElem());
1360:       assertFalse(node0.isCast());
1361:       assertFalse(node0.isExprResult());
1362:       assertEquals(51, node0.getType());
1363:       assertEquals((-1), node0.getSourcePosition());
1364:       assertFalse(node0.isOr());
1365:       assertFalse(node0.isObjectLit());
1366:       assertFalse(node0.hasMoreThanOneChild());
1367:       assertFalse(node0.isNot());
1368:       assertEquals((-1), node0.getLineno());
1369:       assertFalse(node0.isWith());
1370:       assertFalse(node0.isScript());
1371:       assertFalse(node0.isInstanceOf());
1372:       assertFalse(node0.isThis());
1373:       assertFalse(node0.isGetProp());
1374:       assertFalse(node0.isTypeOf());
1375:       assertFalse(node0.isDec());
1376:       assertFalse(node0.isComma());
1377:       assertFalse(node0.isWhile());
1378:       assertFalse(node0.isReturn());
1379:       assertFalse(node0.hasChildren());
1380:       assertFalse(node0.isBlock());
1381:       assertFalse(node0.isCall());
1382:       assertFalse(node0.isName());
1383:       assertFalse(node0.isBreak());
1384:       assertFalse(node0.isAdd());
1385:       assertFalse(node0.isParamList());
1386:       assertEquals((-1), node0.getCharno());
1387:       assertFalse(node0.isSwitch());
1388:       assertFalse(node0.isNull());
1389:       assertFalse(node0.isStringKey());
1390:       assertTrue(node0.isIn());
1391:       assertEquals(0, node0.getChildCount());
1392:       assertFalse(node0.isDo());
1393:       assertFalse(node0.isLabel());
1394:       assertFalse(node0.isNew());
1395:       assertFalse(node0.isDefaultCase());
1396:       assertFalse(node0.isAssignAdd());
1397:       assertFalse(node0.isVar());
1398:       assertFalse(node0.isArrayLit());
1399:       assertFalse(node0.isGetterDef());
1400:       assertFalse(node0.isEmpty());
1401:       assertFalse(node0.isTrue());
1402:       assertFalse(node0.isVoid());
1403:       assertFalse(node0.isDebugger());
1404:       assertFalse(node0.isDelProp());
1405:       assertFalse(node0.isIf());
1406:       assertFalse(node0.isNE());
1407:       assertFalse(node0.isCase());
1408:       assertFalse(node0.isString());
1409:       assertFalse(node0.isCatch());
1410:       assertFalse(node0.isRegExp());
1411:       assertFalse(node0.isTry());
1412:       assertFalse(node0.isHook());
1413:       assertFalse(node0.isFor());
1414:       assertFalse(node0.isFalse());
1415:       assertFalse(node0.isAnd());
1416:       assertFalse(node0.isContinue());
1417:       assertFalse(node0.isFunction());
1418:       assertFalse(node0.isInc());
1419:       assertFalse(node0.isSetterDef());
1420:       assertFalse(node0.isThrow());
1421:       assertEquals(52, Node.LENGTH);
1422:       assertEquals(40, Node.ORIGINALNAME_PROP);
1423:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1424:       assertEquals(30, Node.VAR_ARGS_NAME);
1425:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1426:       assertEquals(57, Node.LAST_PROP);
1427:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1428:       assertEquals(12, Node.COLUMN_BITS);
1429:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1430:       assertEquals(32, Node.INCRDECR_PROP);
1431:       assertEquals(46, Node.IS_NAMESPACE);
1432:       assertEquals(1, Node.DECR_FLAG);
1433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1434:       assertEquals(50, Node.FREE_CALL);
1435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1436:       assertEquals(43, Node.IS_CONSTANT_NAME);
1437:       assertEquals(54, Node.SLASH_V);
1438:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1439:       assertEquals(53, Node.INPUT_ID);
1440:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1441:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1442:       assertEquals(2, Node.POST_FLAG);
1443:       assertEquals(47, Node.IS_DISPATCHER);
1444:       assertEquals(4095, Node.COLUMN_MASK);
1445:       assertEquals(55, Node.INFERRED_FUNCTION);
1446:       assertEquals(39, Node.EMPTY_BLOCK);
1447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1448:       assertEquals(48, Node.DIRECTIVES);
1449:       assertEquals(37, Node.OPT_ARG_NAME);
1450:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1451:       assertEquals(29, Node.JSDOC_INFO_PROP);
1452:       assertEquals(49, Node.DIRECT_EVAL);
1453:       assertEquals(56, Node.CHANGE_TIME);
1454:       assertEquals(8, Node.FLAG_NO_THROWS);
1455:       assertEquals(57, Node.REFLECTED_OBJECT);
1456:       assertEquals(36, Node.QUOTED_PROP);
1457:       
1458:       Node node2 = new Node(1, node0, node0, node1, node1);
1459:       assertNotNull(node2);
1460:       assertFalse(node2.equals((Object)node0));
1461:       assertFalse(node2.equals((Object)node1));
1462:       assertFalse(node0.hasOneChild());
1463:       assertFalse(node0.isLabelName());
1464:       assertFalse(node0.isAssign());
1465:       assertFalse(node0.isNumber());
1466:       assertFalse(node0.isGetElem());
1467:       assertFalse(node0.isCast());
1468:       assertFalse(node0.isExprResult());
1469:       assertEquals(51, node0.getType());
1470:       assertEquals((-1), node0.getSourcePosition());
1471:       assertFalse(node0.isOr());
1472:       assertFalse(node0.isObjectLit());
1473:       assertFalse(node0.hasMoreThanOneChild());
1474:       assertFalse(node0.isNot());
1475:       assertEquals((-1), node0.getLineno());
1476:       assertFalse(node0.isWith());
1477:       assertFalse(node0.isScript());
1478:       assertFalse(node0.isInstanceOf());
1479:       assertFalse(node0.isThis());
1480:       assertFalse(node0.isGetProp());
1481:       assertFalse(node0.isTypeOf());
1482:       assertFalse(node0.isDec());
1483:       assertFalse(node0.isComma());
1484:       assertFalse(node0.isWhile());
1485:       assertFalse(node0.isReturn());
1486:       assertFalse(node0.hasChildren());
1487:       assertFalse(node0.isBlock());
1488:       assertFalse(node0.isCall());
1489:       assertFalse(node0.isName());
1490:       assertFalse(node0.isBreak());
1491:       assertFalse(node0.isAdd());
1492:       assertFalse(node0.isParamList());
1493:       assertEquals((-1), node0.getCharno());
1494:       assertFalse(node0.isSwitch());
1495:       assertFalse(node0.isNull());
1496:       assertFalse(node0.isStringKey());
1497:       assertTrue(node0.isIn());
1498:       assertEquals(0, node0.getChildCount());
1499:       assertFalse(node0.isDo());
1500:       assertFalse(node0.isLabel());
1501:       assertFalse(node0.isNew());
1502:       assertFalse(node0.isDefaultCase());
1503:       assertFalse(node0.isAssignAdd());
1504:       assertFalse(node0.isVar());
1505:       assertFalse(node0.isArrayLit());
1506:       assertFalse(node0.isGetterDef());
1507:       assertFalse(node0.isEmpty());
1508:       assertFalse(node0.isTrue());
1509:       assertFalse(node0.isVoid());
1510:       assertFalse(node0.isDebugger());
1511:       assertFalse(node0.isDelProp());
1512:       assertFalse(node0.isIf());
1513:       assertFalse(node0.isNE());
1514:       assertFalse(node0.isCase());
1515:       assertFalse(node0.isString());
1516:       assertFalse(node0.isCatch());
1517:       assertFalse(node0.isRegExp());
1518:       assertFalse(node0.isTry());
1519:       assertFalse(node0.isHook());
1520:       assertFalse(node0.isFor());
1521:       assertFalse(node0.isFalse());
1522:       assertFalse(node0.isAnd());
1523:       assertFalse(node0.isContinue());
1524:       assertFalse(node0.isFunction());
1525:       assertFalse(node0.isInc());
1526:       assertFalse(node0.isSetterDef());
1527:       assertFalse(node0.isThrow());
1528:       assertFalse(node1.isScript());
1529:       assertFalse(node1.isNot());
1530:       assertFalse(node1.isAnd());
1531:       assertFalse(node1.hasOneChild());
1532:       assertFalse(node1.isGetProp());
1533:       assertFalse(node1.isObjectLit());
1534:       assertFalse(node1.isNumber());
1535:       assertFalse(node1.isLabelName());
1536:       assertEquals((-1), node1.getSourcePosition());
1537:       assertFalse(node1.isThrow());
1538:       assertFalse(node1.isAssignAdd());
1539:       assertFalse(node1.isLabel());
1540:       assertFalse(node1.isFalse());
1541:       assertFalse(node1.isCast());
1542:       assertFalse(node1.isContinue());
1543:       assertTrue(node1.isIn());
1544:       assertFalse(node1.isDo());
1545:       assertFalse(node1.isWhile());
1546:       assertFalse(node1.isOr());
1547:       assertFalse(node1.isNew());
1548:       assertFalse(node1.isAdd());
1549:       assertFalse(node1.isString());
1550:       assertFalse(node1.isBreak());
1551:       assertFalse(node1.isDec());
1552:       assertFalse(node1.hasChildren());
1553:       assertFalse(node1.isTypeOf());
1554:       assertFalse(node1.isNull());
1555:       assertFalse(node1.isDelProp());
1556:       assertFalse(node1.isAssign());
1557:       assertFalse(node1.isComma());
1558:       assertFalse(node1.isName());
1559:       assertFalse(node1.isReturn());
1560:       assertFalse(node1.isExprResult());
1561:       assertFalse(node1.isGetElem());
1562:       assertFalse(node1.isCall());
1563:       assertFalse(node1.isDefaultCase());
1564:       assertFalse(node1.isRegExp());
1565:       assertFalse(node1.isDebugger());
1566:       assertFalse(node1.isVoid());
1567:       assertFalse(node1.isTrue());
1568:       assertFalse(node1.isTry());
1569:       assertFalse(node1.isEmpty());
1570:       assertFalse(node1.isGetterDef());
1571:       assertFalse(node1.isSetterDef());
1572:       assertFalse(node1.isStringKey());
1573:       assertFalse(node1.isVar());
1574:       assertFalse(node1.isParamList());
1575:       assertEquals(0, node1.getChildCount());
1576:       assertFalse(node1.isArrayLit());
1577:       assertFalse(node1.isFunction());
1578:       assertFalse(node1.isCase());
1579:       assertEquals((-1), node1.getCharno());
1580:       assertFalse(node1.isBlock());
1581:       assertFalse(node1.isSwitch());
1582:       assertFalse(node1.isInc());
1583:       assertEquals(51, node1.getType());
1584:       assertFalse(node1.isIf());
1585:       assertFalse(node1.isThis());
1586:       assertFalse(node1.isFor());
1587:       assertFalse(node1.isNE());
1588:       assertFalse(node1.isHook());
1589:       assertFalse(node1.isInstanceOf());
1590:       assertEquals((-1), node1.getLineno());
1591:       assertFalse(node1.hasMoreThanOneChild());
1592:       assertFalse(node1.isCatch());
1593:       assertFalse(node1.isWith());
1594:       assertFalse(node2.isBreak());
1595:       assertFalse(node2.isThis());
1596:       assertFalse(node2.isComma());
1597:       assertFalse(node2.isFalse());
1598:       assertFalse(node2.isInstanceOf());
1599:       assertFalse(node2.isAnd());
1600:       assertFalse(node2.isSwitch());
1601:       assertFalse(node2.isString());
1602:       assertFalse(node2.isScript());
1603:       assertFalse(node2.isExprResult());
1604:       assertEquals((-1), node2.getCharno());
1605:       assertFalse(node2.isWith());
1606:       assertFalse(node2.isNot());
1607:       assertFalse(node2.isObjectLit());
1608:       assertEquals(1, node2.getChildCount());
1609:       assertFalse(node2.isHook());
1610:       assertFalse(node2.isGetProp());
1611:       assertFalse(node2.isCase());
1612:       assertFalse(node2.isIf());
1613:       assertEquals((-1), node2.getSourcePosition());
1614:       assertFalse(node2.isNE());
1615:       assertFalse(node2.isFor());
1616:       assertEquals((-1), node2.getLineno());
1617:       assertFalse(node2.isCast());
1618:       assertTrue(node2.hasChildren());
1619:       assertFalse(node2.isInc());
1620:       assertFalse(node2.isContinue());
1621:       assertFalse(node2.isFunction());
1622:       assertFalse(node2.isIn());
1623:       assertFalse(node2.isThrow());
1624:       assertFalse(node2.isSetterDef());
1625:       assertFalse(node2.isNull());
1626:       assertFalse(node2.isCatch());
1627:       assertFalse(node2.isCall());
1628:       assertFalse(node2.isParamList());
1629:       assertFalse(node2.isStringKey());
1630:       assertFalse(node2.isName());
1631:       assertFalse(node2.isWhile());
1632:       assertFalse(node2.isDebugger());
1633:       assertFalse(node2.hasMoreThanOneChild());
1634:       assertFalse(node2.isRegExp());
1635:       assertFalse(node2.isBlock());
1636:       assertFalse(node2.isReturn());
1637:       assertFalse(node2.isTry());
1638:       assertFalse(node2.isGetterDef());
1639:       assertFalse(node2.isDelProp());
1640:       assertFalse(node2.isDec());
1641:       assertFalse(node2.isEmpty());
1642:       assertTrue(node2.hasOneChild());
1643:       assertFalse(node2.isGetElem());
1644:       assertFalse(node2.isOr());
1645:       assertFalse(node2.isAssign());
1646:       assertFalse(node2.isNumber());
1647:       assertFalse(node2.isTypeOf());
1648:       assertFalse(node2.isArrayLit());
1649:       assertFalse(node2.isVoid());
1650:       assertFalse(node2.isLabelName());
1651:       assertFalse(node2.isDefaultCase());
1652:       assertFalse(node2.isTrue());
1653:       assertEquals(1, node2.getType());
1654:       assertFalse(node2.isVar());
1655:       assertFalse(node2.isLabel());
1656:       assertFalse(node2.isAdd());
1657:       assertFalse(node2.isNew());
1658:       assertFalse(node2.isAssignAdd());
1659:       assertFalse(node2.isDo());
1660:       assertEquals(52, Node.LENGTH);
1661:       assertEquals(40, Node.ORIGINALNAME_PROP);
1662:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1663:       assertEquals(30, Node.VAR_ARGS_NAME);
1664:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1665:       assertEquals(57, Node.LAST_PROP);
1666:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1667:       assertEquals(12, Node.COLUMN_BITS);
1668:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1669:       assertEquals(32, Node.INCRDECR_PROP);
1670:       assertEquals(46, Node.IS_NAMESPACE);
1671:       assertEquals(1, Node.DECR_FLAG);
1672:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1673:       assertEquals(50, Node.FREE_CALL);
1674:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1675:       assertEquals(43, Node.IS_CONSTANT_NAME);
1676:       assertEquals(54, Node.SLASH_V);
1677:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1678:       assertEquals(53, Node.INPUT_ID);
1679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1681:       assertEquals(2, Node.POST_FLAG);
1682:       assertEquals(47, Node.IS_DISPATCHER);
1683:       assertEquals(4095, Node.COLUMN_MASK);
1684:       assertEquals(55, Node.INFERRED_FUNCTION);
1685:       assertEquals(39, Node.EMPTY_BLOCK);
1686:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1687:       assertEquals(48, Node.DIRECTIVES);
1688:       assertEquals(37, Node.OPT_ARG_NAME);
1689:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1690:       assertEquals(29, Node.JSDOC_INFO_PROP);
1691:       assertEquals(49, Node.DIRECT_EVAL);
1692:       assertEquals(56, Node.CHANGE_TIME);
1693:       assertEquals(8, Node.FLAG_NO_THROWS);
1694:       assertEquals(57, Node.REFLECTED_OBJECT);
1695:       assertEquals(36, Node.QUOTED_PROP);
1696:       assertEquals(1, Node.DECR_FLAG);
1697:       assertEquals(46, Node.IS_NAMESPACE);
1698:       assertEquals(30, Node.VAR_ARGS_NAME);
1699:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1700:       assertEquals(12, Node.COLUMN_BITS);
1701:       assertEquals(37, Node.OPT_ARG_NAME);
1702:       assertEquals(54, Node.SLASH_V);
1703:       assertEquals(2, Node.POST_FLAG);
1704:       assertEquals(49, Node.DIRECT_EVAL);
1705:       assertEquals(40, Node.ORIGINALNAME_PROP);
1706:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1707:       assertEquals(56, Node.CHANGE_TIME);
1708:       assertEquals(57, Node.REFLECTED_OBJECT);
1709:       assertEquals(47, Node.IS_DISPATCHER);
1710:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1711:       assertEquals(52, Node.LENGTH);
1712:       assertEquals(8, Node.FLAG_NO_THROWS);
1713:       assertEquals(57, Node.LAST_PROP);
1714:       assertEquals(29, Node.JSDOC_INFO_PROP);
1715:       assertEquals(53, Node.INPUT_ID);
1716:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1717:       assertEquals(39, Node.EMPTY_BLOCK);
1718:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1719:       assertEquals(55, Node.INFERRED_FUNCTION);
1720:       assertEquals(4095, Node.COLUMN_MASK);
1721:       assertEquals(36, Node.QUOTED_PROP);
1722:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1723:       assertEquals(48, Node.DIRECTIVES);
1724:       assertEquals(43, Node.IS_CONSTANT_NAME);
1725:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1726:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1727:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1728:       assertEquals(50, Node.FREE_CALL);
1729:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1730:       assertEquals(32, Node.INCRDECR_PROP);
1731:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1732:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1733:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1734:       assertEquals(53, Node.INPUT_ID);
1735:       assertEquals(29, Node.JSDOC_INFO_PROP);
1736:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1737:       assertEquals(2, Node.POST_FLAG);
1738:       assertEquals(32, Node.INCRDECR_PROP);
1739:       assertEquals(47, Node.IS_DISPATCHER);
1740:       assertEquals(12, Node.COLUMN_BITS);
1741:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1742:       assertEquals(30, Node.VAR_ARGS_NAME);
1743:       assertEquals(1, Node.DECR_FLAG);
1744:       assertEquals(43, Node.IS_CONSTANT_NAME);
1745:       assertEquals(46, Node.IS_NAMESPACE);
1746:       assertEquals(54, Node.SLASH_V);
1747:       assertEquals(40, Node.ORIGINALNAME_PROP);
1748:       assertEquals(50, Node.FREE_CALL);
1749:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1750:       assertEquals(52, Node.LENGTH);
1751:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1752:       assertEquals(39, Node.EMPTY_BLOCK);
1753:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1754:       assertEquals(57, Node.LAST_PROP);
1755:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1756:       assertEquals(4095, Node.COLUMN_MASK);
1757:       assertEquals(49, Node.DIRECT_EVAL);
1758:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1759:       assertEquals(55, Node.INFERRED_FUNCTION);
1760:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1761:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1762:       assertEquals(37, Node.OPT_ARG_NAME);
1763:       assertEquals(8, Node.FLAG_NO_THROWS);
1764:       assertEquals(36, Node.QUOTED_PROP);
1765:       assertEquals(48, Node.DIRECTIVES);
1766:       assertEquals(56, Node.CHANGE_TIME);
1767:       assertEquals(57, Node.REFLECTED_OBJECT);
1768:       
1769:       // Undeclared exception!
1770:       try { 
1771:         node2.addChildrenAfter(node1, node1);
1772:         fail("Expecting exception: IllegalArgumentException");
1773:       
1774:       } catch(IllegalArgumentException e) {
1775:          //
1776:          // no message in exception (getMessage() returned null)
1777:          //
1778:          verifyException("com.google.common.base.Preconditions", e);
1779:       }
1780:   }
1781: }
RegularFileObject[/tmp/EvoSuite_104_1628255607755/com/google/javascript/rhino/Node_104_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:28 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_104_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_104_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.javascript.rhino.JSDocInfo$1",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
185:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
186:       "com.google.javascript.rhino.jstype.EnumElementType",
187:       "com.google.javascript.rhino.jstype.UnionType",
188:       "com.google.common.base.Objects",
189:       "com.google.javascript.rhino.Node$NumberNode",
190:       "com.google.common.collect.SingletonImmutableList",
191:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
192:       "com.google.common.collect.ImmutableCollection$Builder",
193:       "com.google.javascript.rhino.jstype.StaticSlot",
194:       "com.google.common.collect.Iterators$6",
195:       "com.google.common.collect.BiMap",
196:       "com.google.common.collect.Iterators$7",
197:       "com.google.common.collect.AbstractSetMultimap",
198:       "com.google.common.base.Function",
199:       "com.google.common.collect.ImmutableSet",
200:       "com.google.common.collect.Lists$AbstractListWrapper",
201:       "com.google.common.collect.ImmutableMap",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.common.collect.Maps$1",
205:       "com.google.javascript.rhino.jstype.EnumType",
206:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.Maps$ImprovedAbstractMap",
226:       "com.google.common.collect.ImmutableBiMap",
227:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_104_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.Token",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.JSDocInfo",
339:       "com.google.common.collect.ImmutableSet",
340:       "com.google.common.collect.EmptyImmutableSet",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.jstype.EnumType",
344:       "com.google.javascript.rhino.jstype.EnumElementType",
345:       "com.google.common.collect.Sets",
346:       "com.google.javascript.rhino.InputId",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.javascript.rhino.jstype.TemplatizedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.AbstractMultimap$Values",
351:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
352:       "com.google.common.collect.AbstractMapBasedMultimap$1",
353:       "com.google.common.collect.Multimaps$Entries",
354:       "com.google.common.collect.AbstractMultimap$Entries",
355:       "com.google.common.collect.AbstractMapBasedMultimap$2",
356:       "com.google.javascript.rhino.JSTypeExpression",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.Platform",
360:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
361:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
362:       "com.google.javascript.rhino.jstype.NamedType",
363:       "com.google.common.collect.Iterators$12",
364:       "com.google.common.collect.Sets$ImprovedAbstractSet",
365:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
366:       "com.google.common.collect.Hashing",
367:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
368:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
370:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
371:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
374:     );
375:   }
376: }

[MASTER] 13:13:28.197 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(Integer.MAX_VALUE, Integer.MAX_VALUE, (-2827));
assertNotNull(node0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertEquals(Integer.MAX_VALUE, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean0 = node0.isOr();
assertFalse(boolean0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertEquals(Integer.MAX_VALUE, node0.getType());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

node0.setType(5036);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(5036, node0.getType());
assertFalse(node0.isThrow());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

Iterable<Node> iterable0 = node0.children();
assertNotNull(iterable0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(5036, node0.getType());
assertFalse(node0.isThrow());
assertFalse(iterable0.contains(node0));
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

Node node1 = node0.getAncestor(0);
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(5036, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals(5036, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean1 = node1.isQualifiedName();
assertSame(node0, node1);
assertSame(node1, node0);
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(5036, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals(5036, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean2 = node0.wasEmptyNode();
assertSame(node0, node1);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(5036, node0.getType());
assertFalse(node0.isThrow());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean3 = node0.isThrow();
assertSame(node0, node1);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(5036, node0.getType());
assertFalse(node0.isThrow());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

node1.setCharno(46);
assertSame(node0, node1);
assertSame(node1, node0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(5036, node0.getType());
assertFalse(node0.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals(5036, node1.getType());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.type = 861;
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertEquals(861, node0.getType());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());

node0.setType(51);
assertSame(node0, node1);
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals(51, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertTrue(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

Node node2 = new Node(1, node0, node0, node1, node1);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertEquals(51, node0.getType());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNot());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isAdd());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertTrue(node0.isIn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNumber());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isThrow());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertTrue(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isBreak());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isSwitch());
assertFalse(node1.isInc());
assertEquals(51, node1.getType());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isScript());
assertFalse(node2.isExprResult());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isHook());
assertFalse(node2.isGetProp());
assertFalse(node2.isCase());
assertFalse(node2.isIf());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isCast());
assertTrue(node2.hasChildren());
assertFalse(node2.isInc());
assertFalse(node2.isContinue());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isWhile());
assertFalse(node2.isDebugger());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isRegExp());
assertFalse(node2.isBlock());
assertFalse(node2.isReturn());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isDec());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isOr());
assertFalse(node2.isAssign());
assertFalse(node2.isNumber());
assertFalse(node2.isTypeOf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVoid());
assertFalse(node2.isLabelName());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isTrue());
assertEquals(1, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isLabel());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);

node2.addChildrenAfter(node1, node1);

* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/6
* Done!

* Computation finished
