* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 12451
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2493073771
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:03:16.769 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:03:19.032 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;
[MASTER] 13:03:19.034 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true
[MASTER] 13:03:19.035 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false
[MASTER] 13:03:26.161 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:06:10.059 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 219,0,0| Number of FF evals: 408
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 1491,0,0| Number of FF evals: 1670
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 44,0,0| Number of FF evals: 379
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 219,0,0| Number of FF evals: 422
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 1864,1052,0| Number of FF evals: 4550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 296,0,0| Number of FF evals: 540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 60,0,0| Number of FF evals: 383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 308,0,0| Number of FF evals: 534
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1179,765,5| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 44,0,0| Number of FF evals: 1169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 22,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 54,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 722,609,66| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 14336,11825,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 54,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 54,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 7564,4910,0| Number of FF evals: 5879
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 54,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 5850,4508,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 219,0,0| Number of FF evals: 676
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 8237,6511,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 15299,10784,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 44,0,0| Number of FF evals: 1478
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 44,0,0| Number of FF evals: 488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 2938,0,0| Number of FF evals: 1272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 219,0,0| Number of FF evals: 678
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 6158,4097,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 406,0,0| Number of FF evals: 383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 44,0,0| Number of FF evals: 232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 7426,6658,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 857,0,0| Number of FF evals: 921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1708,1483,515| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 128,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 1132,0,0| Number of FF evals: 488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 55,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 926,0,0| Number of FF evals: 1591
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 3447,2365,8| Number of FF evals: 10852
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 219,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 44,0,0| Number of FF evals: 802
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 9788,7866,15| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 44,0,0| Number of FF evals: 297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 219,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 414,0,0| Number of FF evals: 1841
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 7920,6926,1843| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 112,0,0| Number of FF evals: 704
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 4623,4088,0| Number of FF evals: 13219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 3627,0,0| Number of FF evals: 1209
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 1533,1394,369| Number of FF evals: 11881
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 406,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 4184,0,0| Number of FF evals: 1236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 468,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 1135,0,0| Number of FF evals: 725
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 308,0,0| Number of FF evals: 205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 323,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 1992,0,0| Number of FF evals: 918
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 20356,17878,0| Number of FF evals: 12275
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 3204,615,0| Number of FF evals: 2443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 133,68,0| Number of FF evals: 6309
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 11842,10272,208| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 13,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 990,0,0| Number of FF evals: 1047
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 219,0,0| Number of FF evals: 472
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2349,139,0| Number of FF evals: 5371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 375,0,0| Number of FF evals: 2006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 406,0,0| Number of FF evals: 700
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1239,814,35| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 516,0,0| Number of FF evals: 263
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 13438,11067,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 24254,16529,0| Number of FF evals: 13190
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 747,0,0| Number of FF evals: 735
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 5235,4405,1752| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1356: 406,0,0| Number of FF evals: 225
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 7,0,0| Number of FF evals: 980
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 990,0,0| Number of FF evals: 1046
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 516,0,0| Number of FF evals: 269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 7571,0,0| Number of FF evals: 2218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 516,0,0| Number of FF evals: 269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 1100,0,0| Number of FF evals: 1132
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1266,763,25| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 406,0,0| Number of FF evals: 595
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 516,0,0| Number of FF evals: 269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 338,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 871,0,0| Number of FF evals: 510
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 4666,3955,5| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 406,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 12257,10520,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 990,0,0| Number of FF evals: 898
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1358: 406,0,0| Number of FF evals: 225
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1357: 406,0,0| Number of FF evals: 225
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 3296,0,0| Number of FF evals: 1316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 96,0,0| Number of FF evals: 205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 96,0,0| Number of FF evals: 205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 128,0,0| Number of FF evals: 1246
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 20543,16636,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 110,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 110,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 3268,0,0| Number of FF evals: 1009
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 110,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 8496,6268,0| Number of FF evals: 6184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 308,0,0| Number of FF evals: 454
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 406,0,0| Number of FF evals: 592
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 3917,3216,1549| Number of FF evals: 9818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 9178,6950,0| Number of FF evals: 6471
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 5287,3591,0| Number of FF evals: 6924
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 8496,6268,0| Number of FF evals: 6184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 219,0,0| Number of FF evals: 160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5944,4599,91| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 2455,0,0| Number of FF evals: 1114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 6031,5194,395| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 128,0,0| Number of FF evals: 870
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 13150,10213,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1413,0,0| Number of FF evals: 944
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 6384,4523,0| Number of FF evals: 9204
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 56203,48448,38867| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 3103,0,0| Number of FF evals: 981
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 112,0,0| Number of FF evals: 704
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 747,0,0| Number of FF evals: 354
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 56203,48448,38925| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1148,746,1| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 23,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 128,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 590,103,0| Number of FF evals: 3450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 2313,1754,0| Number of FF evals: 8169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 44,0,0| Number of FF evals: 1324
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 6,0,0| Number of FF evals: 664
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 404,15,0| Number of FF evals: 2189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 2418,0,0| Number of FF evals: 1491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 23,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 219,0,0| Number of FF evals: 711
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 7324,1616,0| Number of FF evals: 3872
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 871,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 2148,0,0| Number of FF evals: 1102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 308,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 152,0,0| Number of FF evals: 831
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 406,0,0| Number of FF evals: 225
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 43,0,0| Number of FF evals: 134
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 12329,9252,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 5931,4792,0| Number of FF evals: 13286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 624,0,0| Number of FF evals: 290
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 45,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 16311,14112,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 44,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 128,0,0| Number of FF evals: 98
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 4538,1110,0| Number of FF evals: 3482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 1698,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1209,722,25| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 1698,0,0| Number of FF evals: 623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 360,0,0| Number of FF evals: 1605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1249,814,35| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 219,0,0| Number of FF evals: 131
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 690,286,112| Number of FF evals: 4799
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 22,0,0| Number of FF evals: 652
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 3513,2986,1075| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 458,230,38| Number of FF evals: 7954
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 55,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 13198,11650,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 7571,0,0| Number of FF evals: 1913
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 128,0,0| Number of FF evals: 543
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 5487,0,0| Number of FF evals: 1814
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 4892,4167,96| Number of FF evals: 13429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 633,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 4366,0,0| Number of FF evals: 1289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 128,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 15,0,0| Number of FF evals: 197
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 516,0,0| Number of FF evals: 302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1877,0,0| Number of FF evals: 839
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 1698,0,0| Number of FF evals: 796
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 24827,22599,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 44,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 1221,787,26| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 9178,6950,0| Number of FF evals: 6507
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 871,0,0| Number of FF evals: 424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 6540,2492,0| Number of FF evals: 5112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 1555,0,0| Number of FF evals: 673
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 219,0,0| Number of FF evals: 151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 4234,416,0| Number of FF evals: 2491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 10037,6219,0| Number of FF evals: 10863
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 406,0,0| Number of FF evals: 242
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 1132,0,0| Number of FF evals: 1228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 8491,6216,0| Number of FF evals: 6244
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 3189,1669,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 21372,19144,12| Number of FF evals: 11714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 4092,3309,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 8496,6268,0| Number of FF evals: 6202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 8496,6268,0| Number of FF evals: 6238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 747,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 9155,6927,0| Number of FF evals: 6508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 219,0,0| Number of FF evals: 200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 406,0,0| Number of FF evals: 784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 128,0,0| Number of FF evals: 388
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1132,0,0| Number of FF evals: 1025
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 747,0,0| Number of FF evals: 702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 56203,48448,38623| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 2682,1212,0| Number of FF evals: 3482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 2613,0,0| Number of FF evals: 861
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 7767,5197,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 116,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 128,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 10878,9034,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 44,0,0| Number of FF evals: 65
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 128,0,0| Number of FF evals: 508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 2682,1212,0| Number of FF evals: 3482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 219,0,0| Number of FF evals: 458
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 206,0,0| Number of FF evals: 514
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 5,0,0| Number of FF evals: 1446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 253,0,0| Number of FF evals: 1158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 63,0,0| Number of FF evals: 179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 864,227,0| Number of FF evals: 3286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 871,0,0| Number of FF evals: 603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1223,814,35| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 60,0,0| Number of FF evals: 354
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 128,0,0| Number of FF evals: 98
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 3998,0,0| Number of FF evals: 1268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 161,0,0| Number of FF evals: 396
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 857,0,0| Number of FF evals: 990
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1413,0,0| Number of FF evals: 563
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 9757,7851,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 308,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 1555,0,0| Number of FF evals: 599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 11979,10102,0| Number of FF evals: 12179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 3123,696,0| Number of FF evals: 2738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 624,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 13215,7647,0| Number of FF evals: 5690
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 624,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 922,360,0| Number of FF evals: 3608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 871,0,0| Number of FF evals: 654
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 440,0,0| Number of FF evals: 637
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 1843,0,0| Number of FF evals: 754
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1182,777,25| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 1698,0,0| Number of FF evals: 904
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1189,764,47| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 219,0,0| Number of FF evals: 655
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 871,0,0| Number of FF evals: 408
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 175,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 45,0,0| Number of FF evals: 178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 2796,236,0| Number of FF evals: 2368
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 290,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 263,0,0| Number of FF evals: 875
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 44,0,0| Number of FF evals: 151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 474,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 2455,0,0| Number of FF evals: 823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1781,1406,541| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 747,0,0| Number of FF evals: 428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 79,0,0| Number of FF evals: 337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 219,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 2761,2272,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 14097,13659,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 6088,4338,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 17629,17530,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 68,0,0| Number of FF evals: 477
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 2761,2272,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 128,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 128,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 624,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 1199,971,98| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 45,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 2613,0,0| Number of FF evals: 861
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 3017,646,0| Number of FF evals: 2738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 9602,8516,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 44,0,0| Number of FF evals: 60
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 1555,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 1843,0,0| Number of FF evals: 669
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 78,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 458,230,38| Number of FF evals: 7954
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 45,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 219,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 45,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 406,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1434,747,0| Number of FF evals: 4062
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 406,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 128,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 406,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 22790,15875,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 219,0,0| Number of FF evals: 281
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 128,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 406,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 6046,0,0| Number of FF evals: 1773
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 406,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 219,0,0| Number of FF evals: 698
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 406,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 128,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 44,0,0| Number of FF evals: 90
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 307,0,0| Number of FF evals: 848
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 406,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 624,0,0| Number of FF evals: 1043
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3557,2878,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3475,2738,0| Number of FF evals: 13180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 747,0,0| Number of FF evals: 702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 3069,1987,0| Number of FF evals: 9516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 871,0,0| Number of FF evals: 400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 3069,1987,0| Number of FF evals: 9516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 8908,1153,0| Number of FF evals: 2198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 3069,1987,0| Number of FF evals: 9516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 2511,0,0| Number of FF evals: 1518
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 3069,1987,0| Number of FF evals: 9516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 9848,7675,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1293,826,25| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 624,0,0| Number of FF evals: 458
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 375,0,0| Number of FF evals: 2006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 219,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 1272,847,47| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 4869,3638,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 14,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 69,0,0| Number of FF evals: 859
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1732: 308,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 308,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 4676,3024,0| Number of FF evals: 8021
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 19730,15273,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 6361,6100,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 11141,8372,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1720: 308,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 1132,0,0| Number of FF evals: 1056
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: Line 1721: 308,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - true: 130,0,0| Number of FF evals: 383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 747,0,0| Number of FF evals: 370
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 4366,0,0| Number of FF evals: 1266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 219,0,0| Number of FF evals: 719
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 1555,0,0| Number of FF evals: 818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 819,0,0| Number of FF evals: 401
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 2295,0,0| Number of FF evals: 798
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 4184,0,0| Number of FF evals: 1325
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 624,0,0| Number of FF evals: 369
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 308,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 747,322,18| Number of FF evals: 7068
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1548,787,0| Number of FF evals: 4849
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 2455,0,0| Number of FF evals: 1121
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 19143,12579,10078| Number of FF evals: 7128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 516,0,0| Number of FF evals: 947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 406,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 7103,6048,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 2613,0,0| Number of FF evals: 847
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1605,328,0| Number of FF evals: 5561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 5875,3467,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 3402,0,0| Number of FF evals: 1349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 23,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 12,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 7,0,0| Number of FF evals: 980
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 997,0,0| Number of FF evals: 898
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 290,0,0| Number of FF evals: 803
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1413,0,0| Number of FF evals: 1140
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 871,0,0| Number of FF evals: 395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 219,0,0| Number of FF evals: 151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 871,0,0| Number of FF evals: 395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 2938,0,0| Number of FF evals: 950
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 219,0,0| Number of FF evals: 151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 406,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 12297,11022,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 1377,0,0| Number of FF evals: 1522
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 6046,0,0| Number of FF evals: 1600
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 219,0,0| Number of FF evals: 1073
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 301,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 11618,10064,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 6761,6060,3173| Number of FF evals: 13352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 871,0,0| Number of FF evals: 584
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 322,0,0| Number of FF evals: 327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 747,0,0| Number of FF evals: 393
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 11651,10276,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 127,0,0| Number of FF evals: 541
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 184,0,0| Number of FF evals: 840
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 871,0,0| Number of FF evals: 408
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 24,0,0| Number of FF evals: 173
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 12488,9711,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 128,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 7060,4032,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 624,0,0| Number of FF evals: 434
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 2938,0,0| Number of FF evals: 914
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 2613,0,0| Number of FF evals: 861
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 16,0,0| Number of FF evals: 816
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 56203,48448,38850| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 890,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 75,0,0| Number of FF evals: 324
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 2938,0,0| Number of FF evals: 914
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 624,0,0| Number of FF evals: 447
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 9923,7976,125| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 6,0,0| Number of FF evals: 582
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 12,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 1053,0,0| Number of FF evals: 1074
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 1708,1483,511| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 1697,0,0| Number of FF evals: 1117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 439,0,0| Number of FF evals: 1726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1708,1483,513| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 2938,0,0| Number of FF evals: 936
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 11818,7324,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 3917,3216,1565| Number of FF evals: 9818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 219,0,0| Number of FF evals: 701
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 1132,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 3268,0,0| Number of FF evals: 1362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 4234,416,0| Number of FF evals: 2428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 219,0,0| Number of FF evals: 716
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 4234,416,0| Number of FF evals: 2428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 12,0,0| Number of FF evals: 209
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 76,0,0| Number of FF evals: 384
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 4234,416,0| Number of FF evals: 2428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 3008,2840,0| Number of FF evals: 11301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 683,301,8| Number of FF evals: 5616
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 4234,416,0| Number of FF evals: 2428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 18486,16140,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 4234,416,0| Number of FF evals: 2428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 4234,416,0| Number of FF evals: 2428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 406,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 23,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 3998,0,0| Number of FF evals: 1171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 25,0,0| Number of FF evals: 360
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 128,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 6300,5200,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 6300,5200,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 44,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1132,0,0| Number of FF evals: 484
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 9613,8526,10| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 5,0,0| Number of FF evals: 1353
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 44,0,0| Number of FF evals: 137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 128,0,0| Number of FF evals: 729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 2938,0,0| Number of FF evals: 945
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 4157,391,0| Number of FF evals: 2492
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 8908,1153,0| Number of FF evals: 2197
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 101,0,0| Number of FF evals: 130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 219,0,0| Number of FF evals: 143
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 2398,1000,0| Number of FF evals: 3485
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 219,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 72,0,0| Number of FF evals: 1413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 3391,0,0| Number of FF evals: 1359
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 2613,0,0| Number of FF evals: 904
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 389,0,0| Number of FF evals: 1518
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1061,954,185| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 44,0,0| Number of FF evals: 972
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 4258,3413,0| Number of FF evals: 10092
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 3103,0,0| Number of FF evals: 961
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 87,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 1698,0,0| Number of FF evals: 636
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 5486,0,0| Number of FF evals: 1561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 2004,0,0| Number of FF evals: 790
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 44,0,0| Number of FF evals: 122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 308,0,0| Number of FF evals: 744
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 747,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 2839,2350,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 96,0,0| Number of FF evals: 259
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 908,0,0| Number of FF evals: 645
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2605,2116,0| Number of FF evals: 12542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 10636,9218,22| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 819,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 6959,6591,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 819,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 128,0,0| Number of FF evals: 465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 624,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 73,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 2938,0,0| Number of FF evals: 1009
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 327,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 9809,7878,27| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 16,0,0| Number of FF evals: 816
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 3101,0,0| Number of FF evals: 1084
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 3368,2431,0| Number of FF evals: 8014
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 1084,0,0| Number of FF evals: 1215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 128,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 1698,0,0| Number of FF evals: 623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 624,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 376,0,0| Number of FF evals: 1813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 1406,1183,510| Number of FF evals: 11598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 2761,2272,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 1406,1183,510| Number of FF evals: 11598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 4587,3061,2| Number of FF evals: 4056
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 385,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 624,0,0| Number of FF evals: 651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 863,0,0| Number of FF evals: 953
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 5963,4656,0| Number of FF evals: 8850
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 1206,0,0| Number of FF evals: 1103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 308,0,0| Number of FF evals: 953
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 14803,12232,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 308,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 14803,12232,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1452,1014,11| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 1708,1483,515| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 6361,6100,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 406,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 308,0,0| Number of FF evals: 989
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 11659,10101,37| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 2295,0,0| Number of FF evals: 885
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 72,0,0| Number of FF evals: 1413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 128,0,0| Number of FF evals: 418
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 17861,16552,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 8462,7810,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 128,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 406,0,0| Number of FF evals: 267
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 866,646,0| Number of FF evals: 8168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 195,0,0| Number of FF evals: 829
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 624,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 624,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 1219,0,0| Number of FF evals: 1491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2605,2127,0| Number of FF evals: 12542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 624,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 128,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 128,0,0| Number of FF evals: 109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 45,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 219,0,0| Number of FF evals: 656
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 514,0,0| Number of FF evals: 1602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 68,0,0| Number of FF evals: 421
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 315,0,0| Number of FF evals: 1006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 747,0,0| Number of FF evals: 496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 13379,11008,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 312,0,0| Number of FF evals: 598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 1359,1220,240| Number of FF evals: 11881
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 857,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 857,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 4292,1921,0| Number of FF evals: 4246
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 857,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 898,411,3| Number of FF evals: 7105
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 27,0,0| Number of FF evals: 510
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 330,191,93| Number of FF evals: 3395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 857,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 219,0,0| Number of FF evals: 714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 60,0,0| Number of FF evals: 375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 14803,12232,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 26,0,0| Number of FF evals: 167
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 5486,0,0| Number of FF evals: 1490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1407,1004,45| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 14803,12232,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 219,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 14803,12232,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 14803,12232,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 5143,3390,0| Number of FF evals: 9404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 1627,209,0| Number of FF evals: 2132
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 990,0,0| Number of FF evals: 894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 14803,12232,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 14803,12232,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 871,0,0| Number of FF evals: 707
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 990,0,0| Number of FF evals: 894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 990,0,0| Number of FF evals: 894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 23,0,0| Number of FF evals: 310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 219,0,0| Number of FF evals: 671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 16822,14945,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 3627,0,0| Number of FF evals: 1099
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 990,0,0| Number of FF evals: 894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 990,0,0| Number of FF evals: 894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 10010,8290,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 10010,8290,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 10288,8993,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 10628,9237,244| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 219,0,0| Number of FF evals: 131
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - true: 308,0,0| Number of FF evals: 999
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 624,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 385,0,0| Number of FF evals: 443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 128,0,0| Number of FF evals: 580
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 27859,25847,70| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 22528,20447,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 17216,15570,464| Number of FF evals: 13321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 128,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 871,0,0| Number of FF evals: 400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 624,0,0| Number of FF evals: 463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 5997,4793,1311| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 3103,0,0| Number of FF evals: 981
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 747,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 219,0,0| Number of FF evals: 432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 1346,142,47| Number of FF evals: 2304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: Line 889: 997,0,0| Number of FF evals: 428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 8030,6448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 2148,0,0| Number of FF evals: 741
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 7383,6459,0| Number of FF evals: 7651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 269,0,0| Number of FF evals: 1965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 95,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 6361,6100,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 219,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 219,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 3825,2743,0| Number of FF evals: 13322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 9050,7469,0| Number of FF evals: 12111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 871,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 44,0,0| Number of FF evals: 381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 252,0,0| Number of FF evals: 983
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 624,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 12864,12277,0| Number of FF evals: 13135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 47,0,0| Number of FF evals: 240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 770,652,82| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 128,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 107,0,0| Number of FF evals: 290
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 1413,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 54,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 2238,1902,0| Number of FF evals: 9161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 1265,528,0| Number of FF evals: 4735
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 128,0,0| Number of FF evals: 1031
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 14351,13251,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 128,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 8336,7796,0| Number of FF evals: 13394
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 3069,1987,0| Number of FF evals: 9549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 516,0,0| Number of FF evals: 284
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 2455,0,0| Number of FF evals: 829
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 128,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 18571,13374,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 624,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 8336,7796,0| Number of FF evals: 13394
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 14859,13850,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 2938,0,0| Number of FF evals: 1136
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 70,0,0| Number of FF evals: 490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 1346,142,47| Number of FF evals: 2304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 44,0,0| Number of FF evals: 55
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 9313,5488,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 219,0,0| Number of FF evals: 678
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1239,814,35| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 44,0,0| Number of FF evals: 55
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 871,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 219,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 871,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 406,0,0| Number of FF evals: 242
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 18490,16065,0| Number of FF evals: 13429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 406,0,0| Number of FF evals: 242
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 44,0,0| Number of FF evals: 55
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 871,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 219,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 871,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 843,0,0| Number of FF evals: 1481
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 871,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 871,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 871,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 3853,829,0| Number of FF evals: 3023
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 516,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 303,0,0| Number of FF evals: 730
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 219,0,0| Number of FF evals: 694
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 56203,48448,0| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1039,650,50| Number of FF evals: 11072
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 219,0,0| Number of FF evals: 722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 3103,0,0| Number of FF evals: 1294
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 18490,16065,0| Number of FF evals: 13429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 27,0,0| Number of FF evals: 288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 3061,1980,0| Number of FF evals: 9549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 56203,48448,38778| Number of FF evals: 13427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 4666,3955,5| Number of FF evals: 13432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 43,0,0| Number of FF evals: 869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 406,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 45,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 128,0,0| Number of FF evals: 1215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 747,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 219,0,0| Number of FF evals: 149
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 308,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 406,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 871,0,0| Number of FF evals: 679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 1992,0,0| Number of FF evals: 718
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 2191,0,0| Number of FF evals: 1561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 6186,4728,0| Number of FF evals: 13300
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 1412,0,0| Number of FF evals: 846
* Search finished after 604s and 317 generations, 181043 statements, best individual has fitness: 3023.0
* Minimizing test suite
[MASTER] 13:14:35.507 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 91%
* Total number of goals: 853
* Number of covered goals: 777
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 581
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 94
* Number of covered goals: 94
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 84%
* Total number of goals: 530
* Number of covered goals: 443
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2152
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 233
* Number of covered goals: 210
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 714
* Number of covered goals: 544
* Generated 619 tests with total length 10037
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:15:43.798 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6733833333333333% of time used, but only 22/619 tests minimized), falling back to using all assertions
[MASTER] 13:16:03.402 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 13:16:15.781 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 13:16:19.965 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_34_1628255779761/com/google/javascript/rhino/Node_34_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_34_1628255779761/com/google/javascript/rhino/Node_34_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:19.965 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:19.965 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:19.969 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 195
[MASTER] 13:16:19.971 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_34_1628255779761/com/google/javascript/rhino/Node_34_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_34_tmp__ESTest extends Node_34_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       String string0 = "";
22:       Node node0 = Node.newString(105, "", 0, (-1730));
23:       assertFalse(node0.isNew());
24:       assertFalse(node0.isAdd());
25:       assertFalse(node0.isBlock());
26:       assertFalse(node0.isVar());
27:       assertEquals(105, node0.getType());
28:       assertFalse(node0.isDo());
29:       assertFalse(node0.isWhile());
30:       assertFalse(node0.isSetterDef());
31:       assertFalse(node0.isOr());
32:       assertFalse(node0.isNull());
33:       assertFalse(node0.isTypeOf());
34:       assertFalse(node0.isDec());
35:       assertFalse(node0.isReturn());
36:       assertFalse(node0.hasChildren());
37:       assertFalse(node0.isName());
38:       assertFalse(node0.isGetElem());
39:       assertFalse(node0.isAssign());
40:       assertFalse(node0.hasMoreThanOneChild());
41:       assertFalse(node0.isCatch());
42:       assertFalse(node0.isCall());
43:       assertEquals((-1), node0.getLineno());
44:       assertFalse(node0.isVoid());
45:       assertFalse(node0.isTry());
46:       assertFalse(node0.isRegExp());
47:       assertFalse(node0.isTrue());
48:       assertFalse(node0.isFor());
49:       assertFalse(node0.isEmpty());
50:       assertFalse(node0.isGetterDef());
51:       assertFalse(node0.isDefaultCase());
52:       assertFalse(node0.isNumber());
53:       assertFalse(node0.hasOneChild());
54:       assertFalse(node0.isScript());
55:       assertFalse(node0.isParamList());
56:       assertFalse(node0.isAssignAdd());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isLabel());
59:       assertFalse(node0.isLabelName());
60:       assertFalse(node0.isStringKey());
61:       assertTrue(node0.isFunction());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isSwitch());
64:       assertEquals((-1), node0.getCharno());
65:       assertFalse(node0.isHook());
66:       assertFalse(node0.isCase());
67:       assertFalse(node0.isThrow());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isGetProp());
71:       assertFalse(node0.isIn());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isComma());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isDelProp());
76:       assertFalse(node0.isIf());
77:       assertFalse(node0.isWith());
78:       assertFalse(node0.isInstanceOf());
79:       assertFalse(node0.isExprResult());
80:       assertFalse(node0.isBreak());
81:       assertFalse(node0.isDebugger());
82:       assertFalse(node0.isNot());
83:       assertFalse(node0.isObjectLit());
84:       assertEquals((-1), node0.getSourcePosition());
85:       assertFalse(node0.isContinue());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isFalse());
88:       assertFalse(node0.isCast());
89:       assertNotNull(node0);
90:       assertEquals(29, Node.JSDOC_INFO_PROP);
91:       assertEquals(53, Node.INPUT_ID);
92:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
96:       assertEquals(47, Node.IS_DISPATCHER);
97:       assertEquals(32, Node.INCRDECR_PROP);
98:       assertEquals(55, Node.INFERRED_FUNCTION);
99:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(4095, Node.COLUMN_MASK);
102:       assertEquals(8, Node.FLAG_NO_THROWS);
103:       assertEquals(48, Node.DIRECTIVES);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(36, Node.QUOTED_PROP);
106:       assertEquals(49, Node.DIRECT_EVAL);
107:       assertEquals(56, Node.CHANGE_TIME);
108:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
109:       assertEquals(40, Node.ORIGINALNAME_PROP);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(50, Node.FREE_CALL);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(39, Node.EMPTY_BLOCK);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(51, Node.STATIC_SOURCE_FILE);
122:       assertEquals(30, Node.VAR_ARGS_NAME);
123:       assertEquals(54, Node.SLASH_V);
124:       assertEquals(46, Node.IS_NAMESPACE);
125:       assertEquals(43, Node.IS_CONSTANT_NAME);
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertFalse(node0.isNew());
129:       assertFalse(node0.isAdd());
130:       assertFalse(node0.isBlock());
131:       assertFalse(node0.isVar());
132:       assertEquals(105, node0.getType());
133:       assertFalse(node0.isDo());
134:       assertFalse(node0.isWhile());
135:       assertFalse(node0.isSetterDef());
136:       assertFalse(node0.isOr());
137:       assertFalse(node0.isNull());
138:       assertFalse(node0.isTypeOf());
139:       assertFalse(node0.isDec());
140:       assertFalse(node0.isReturn());
141:       assertFalse(node0.hasChildren());
142:       assertFalse(node0.isName());
143:       assertFalse(node0.isGetElem());
144:       assertFalse(node0.isAssign());
145:       assertFalse(node0.hasMoreThanOneChild());
146:       assertFalse(node0.isCatch());
147:       assertFalse(node0.isCall());
148:       assertEquals((-1), node0.getLineno());
149:       assertFalse(node0.isVoid());
150:       assertFalse(node0.isTry());
151:       assertFalse(node0.isRegExp());
152:       assertFalse(node0.isTrue());
153:       assertFalse(node0.isFor());
154:       assertFalse(node0.isEmpty());
155:       assertFalse(node0.isGetterDef());
156:       assertFalse(node0.isDefaultCase());
157:       assertFalse(node0.isNumber());
158:       assertFalse(node0.hasOneChild());
159:       assertFalse(node0.isScript());
160:       assertFalse(node0.isParamList());
161:       assertFalse(node0.isAssignAdd());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isLabel());
164:       assertFalse(node0.isLabelName());
165:       assertFalse(node0.isStringKey());
166:       assertTrue(node0.isFunction());
167:       assertFalse(node0.isArrayLit());
168:       assertFalse(node0.isSwitch());
169:       assertEquals((-1), node0.getCharno());
170:       assertFalse(node0.isHook());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isThrow());
173:       assertFalse(node0.isString());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isGetProp());
176:       assertFalse(node0.isIn());
177:       assertFalse(node0.isNE());
178:       assertFalse(node0.isComma());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.isIf());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isInstanceOf());
184:       assertFalse(node0.isExprResult());
185:       assertFalse(node0.isBreak());
186:       assertFalse(node0.isDebugger());
187:       assertFalse(node0.isNot());
188:       assertFalse(node0.isObjectLit());
189:       assertEquals((-1), node0.getSourcePosition());
190:       assertFalse(node0.isContinue());
191:       assertFalse(node0.isAnd());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isCast());
194:       assertNotNull(iterable0);
195:       assertFalse(iterable0.contains(node0));
196:       assertEquals(29, Node.JSDOC_INFO_PROP);
197:       assertEquals(53, Node.INPUT_ID);
198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
199:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
200:       assertEquals(2, Node.POST_FLAG);
201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
202:       assertEquals(47, Node.IS_DISPATCHER);
203:       assertEquals(32, Node.INCRDECR_PROP);
204:       assertEquals(55, Node.INFERRED_FUNCTION);
205:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
206:       assertEquals(12, Node.COLUMN_BITS);
207:       assertEquals(4095, Node.COLUMN_MASK);
208:       assertEquals(8, Node.FLAG_NO_THROWS);
209:       assertEquals(48, Node.DIRECTIVES);
210:       assertEquals(37, Node.OPT_ARG_NAME);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(49, Node.DIRECT_EVAL);
213:       assertEquals(56, Node.CHANGE_TIME);
214:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
215:       assertEquals(40, Node.ORIGINALNAME_PROP);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(50, Node.FREE_CALL);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
222:       assertEquals(39, Node.EMPTY_BLOCK);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
228:       assertEquals(30, Node.VAR_ARGS_NAME);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(46, Node.IS_NAMESPACE);
231:       assertEquals(43, Node.IS_CONSTANT_NAME);
232:       
233:       Node node1 = new Node(105, node0);
234:       assertFalse(node0.isNew());
235:       assertFalse(node0.isAdd());
236:       assertFalse(node0.isBlock());
237:       assertFalse(node0.isVar());
238:       assertEquals(105, node0.getType());
239:       assertFalse(node0.isDo());
240:       assertFalse(node0.isWhile());
241:       assertFalse(node0.isSetterDef());
242:       assertFalse(node0.isOr());
243:       assertFalse(node0.isNull());
244:       assertFalse(node0.isTypeOf());
245:       assertFalse(node0.isDec());
246:       assertFalse(node0.isReturn());
247:       assertFalse(node0.hasChildren());
248:       assertFalse(node0.isName());
249:       assertFalse(node0.isGetElem());
250:       assertFalse(node0.isAssign());
251:       assertFalse(node0.hasMoreThanOneChild());
252:       assertFalse(node0.isCatch());
253:       assertFalse(node0.isCall());
254:       assertEquals((-1), node0.getLineno());
255:       assertFalse(node0.isVoid());
256:       assertFalse(node0.isTry());
257:       assertFalse(node0.isRegExp());
258:       assertFalse(node0.isTrue());
259:       assertFalse(node0.isFor());
260:       assertFalse(node0.isEmpty());
261:       assertFalse(node0.isGetterDef());
262:       assertFalse(node0.isDefaultCase());
263:       assertFalse(node0.isNumber());
264:       assertFalse(node0.hasOneChild());
265:       assertFalse(node0.isScript());
266:       assertFalse(node0.isParamList());
267:       assertFalse(node0.isAssignAdd());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isLabel());
270:       assertFalse(node0.isLabelName());
271:       assertFalse(node0.isStringKey());
272:       assertTrue(node0.isFunction());
273:       assertFalse(node0.isArrayLit());
274:       assertFalse(node0.isSwitch());
275:       assertEquals((-1), node0.getCharno());
276:       assertFalse(node0.isHook());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isThrow());
279:       assertFalse(node0.isString());
280:       assertFalse(node0.isInc());
281:       assertFalse(node0.isGetProp());
282:       assertFalse(node0.isIn());
283:       assertFalse(node0.isNE());
284:       assertFalse(node0.isComma());
285:       assertFalse(node0.isThis());
286:       assertFalse(node0.isDelProp());
287:       assertFalse(node0.isIf());
288:       assertFalse(node0.isWith());
289:       assertFalse(node0.isInstanceOf());
290:       assertFalse(node0.isExprResult());
291:       assertFalse(node0.isBreak());
292:       assertFalse(node0.isDebugger());
293:       assertFalse(node0.isNot());
294:       assertFalse(node0.isObjectLit());
295:       assertEquals((-1), node0.getSourcePosition());
296:       assertFalse(node0.isContinue());
297:       assertFalse(node0.isAnd());
298:       assertFalse(node0.isFalse());
299:       assertFalse(node0.isCast());
300:       assertFalse(node1.isHook());
301:       assertFalse(node1.isInc());
302:       assertFalse(node1.isSwitch());
303:       assertFalse(node1.isCase());
304:       assertFalse(node1.isString());
305:       assertEquals((-1), node1.getCharno());
306:       assertFalse(node1.isIn());
307:       assertFalse(node1.isAnd());
308:       assertFalse(node1.isThrow());
309:       assertFalse(node1.isFalse());
310:       assertFalse(node1.isTry());
311:       assertTrue(node1.isFunction());
312:       assertFalse(node1.isArrayLit());
313:       assertFalse(node1.isScript());
314:       assertFalse(node1.isNumber());
315:       assertFalse(node1.isGetterDef());
316:       assertTrue(node1.hasChildren());
317:       assertEquals((-1), node1.getLineno());
318:       assertEquals(1, node1.getChildCount());
319:       assertFalse(node1.isInstanceOf());
320:       assertFalse(node1.isNE());
321:       assertFalse(node1.isIf());
322:       assertFalse(node1.isWith());
323:       assertEquals(105, node1.getType());
324:       assertFalse(node1.isFor());
325:       assertFalse(node1.isCatch());
326:       assertFalse(node1.hasMoreThanOneChild());
327:       assertFalse(node1.isThis());
328:       assertFalse(node1.isRegExp());
329:       assertFalse(node1.isNew());
330:       assertFalse(node1.isAdd());
331:       assertFalse(node1.isBlock());
332:       assertFalse(node1.isVar());
333:       assertFalse(node1.isName());
334:       assertFalse(node1.isDo());
335:       assertFalse(node1.isStringKey());
336:       assertFalse(node1.isNull());
337:       assertFalse(node1.isAssignAdd());
338:       assertFalse(node1.isLabel());
339:       assertFalse(node1.isSetterDef());
340:       assertFalse(node1.isParamList());
341:       assertFalse(node1.isLabelName());
342:       assertFalse(node1.isCast());
343:       assertFalse(node1.isContinue());
344:       assertFalse(node1.isTrue());
345:       assertFalse(node1.isExprResult());
346:       assertFalse(node1.isDefaultCase());
347:       assertFalse(node1.isVoid());
348:       assertFalse(node1.isEmpty());
349:       assertFalse(node1.isNot());
350:       assertEquals((-1), node1.getSourcePosition());
351:       assertFalse(node1.isDebugger());
352:       assertFalse(node1.isObjectLit());
353:       assertFalse(node1.isOr());
354:       assertFalse(node1.isGetProp());
355:       assertFalse(node1.isReturn());
356:       assertFalse(node1.isDelProp());
357:       assertTrue(node1.hasOneChild());
358:       assertFalse(node1.isAssign());
359:       assertFalse(node1.isWhile());
360:       assertFalse(node1.isBreak());
361:       assertFalse(node1.isCall());
362:       assertFalse(node1.isGetElem());
363:       assertFalse(node1.isComma());
364:       assertFalse(node1.isDec());
365:       assertFalse(node1.isTypeOf());
366:       assertNotNull(node1);
367:       assertEquals(29, Node.JSDOC_INFO_PROP);
368:       assertEquals(53, Node.INPUT_ID);
369:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
370:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
371:       assertEquals(2, Node.POST_FLAG);
372:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(32, Node.INCRDECR_PROP);
375:       assertEquals(55, Node.INFERRED_FUNCTION);
376:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
377:       assertEquals(12, Node.COLUMN_BITS);
378:       assertEquals(4095, Node.COLUMN_MASK);
379:       assertEquals(8, Node.FLAG_NO_THROWS);
380:       assertEquals(48, Node.DIRECTIVES);
381:       assertEquals(37, Node.OPT_ARG_NAME);
382:       assertEquals(36, Node.QUOTED_PROP);
383:       assertEquals(49, Node.DIRECT_EVAL);
384:       assertEquals(56, Node.CHANGE_TIME);
385:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
386:       assertEquals(40, Node.ORIGINALNAME_PROP);
387:       assertEquals(57, Node.REFLECTED_OBJECT);
388:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
389:       assertEquals(52, Node.LENGTH);
390:       assertEquals(50, Node.FREE_CALL);
391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
392:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
393:       assertEquals(39, Node.EMPTY_BLOCK);
394:       assertEquals(15, Node.NO_SIDE_EFFECTS);
395:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
396:       assertEquals(57, Node.LAST_PROP);
397:       assertEquals(1, Node.DECR_FLAG);
398:       assertEquals(51, Node.STATIC_SOURCE_FILE);
399:       assertEquals(30, Node.VAR_ARGS_NAME);
400:       assertEquals(54, Node.SLASH_V);
401:       assertEquals(46, Node.IS_NAMESPACE);
402:       assertEquals(43, Node.IS_CONSTANT_NAME);
403:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
405:       assertEquals(56, Node.CHANGE_TIME);
406:       assertEquals(47, Node.IS_DISPATCHER);
407:       assertEquals(32, Node.INCRDECR_PROP);
408:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
409:       assertEquals(29, Node.JSDOC_INFO_PROP);
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(46, Node.IS_NAMESPACE);
412:       assertEquals(30, Node.VAR_ARGS_NAME);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(54, Node.SLASH_V);
415:       assertEquals(2, Node.POST_FLAG);
416:       assertEquals(43, Node.IS_CONSTANT_NAME);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
421:       assertEquals(57, Node.REFLECTED_OBJECT);
422:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
423:       assertEquals(52, Node.LENGTH);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(57, Node.LAST_PROP);
426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
427:       assertEquals(39, Node.EMPTY_BLOCK);
428:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
429:       assertEquals(55, Node.INFERRED_FUNCTION);
430:       assertEquals(1, Node.DECR_FLAG);
431:       assertEquals(49, Node.DIRECT_EVAL);
432:       assertEquals(4095, Node.COLUMN_MASK);
433:       assertEquals(12, Node.COLUMN_BITS);
434:       assertEquals(36, Node.QUOTED_PROP);
435:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
436:       assertEquals(37, Node.OPT_ARG_NAME);
437:       assertEquals(48, Node.DIRECTIVES);
438:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
439:       assertFalse(node1.equals((Object)node0));
440:       
441:       node1.setIsSyntheticBlock(false);
442:       assertFalse(node0.isNew());
443:       assertFalse(node0.isAdd());
444:       assertFalse(node0.isBlock());
445:       assertFalse(node0.isVar());
446:       assertEquals(105, node0.getType());
447:       assertFalse(node0.isDo());
448:       assertFalse(node0.isWhile());
449:       assertFalse(node0.isSetterDef());
450:       assertFalse(node0.isOr());
451:       assertFalse(node0.isNull());
452:       assertFalse(node0.isTypeOf());
453:       assertFalse(node0.isDec());
454:       assertFalse(node0.isReturn());
455:       assertFalse(node0.hasChildren());
456:       assertFalse(node0.isName());
457:       assertFalse(node0.isGetElem());
458:       assertFalse(node0.isAssign());
459:       assertFalse(node0.hasMoreThanOneChild());
460:       assertFalse(node0.isCatch());
461:       assertFalse(node0.isCall());
462:       assertEquals((-1), node0.getLineno());
463:       assertFalse(node0.isVoid());
464:       assertFalse(node0.isTry());
465:       assertFalse(node0.isRegExp());
466:       assertFalse(node0.isTrue());
467:       assertFalse(node0.isFor());
468:       assertFalse(node0.isEmpty());
469:       assertFalse(node0.isGetterDef());
470:       assertFalse(node0.isDefaultCase());
471:       assertFalse(node0.isNumber());
472:       assertFalse(node0.hasOneChild());
473:       assertFalse(node0.isScript());
474:       assertFalse(node0.isParamList());
475:       assertFalse(node0.isAssignAdd());
476:       assertEquals(0, node0.getChildCount());
477:       assertFalse(node0.isLabel());
478:       assertFalse(node0.isLabelName());
479:       assertFalse(node0.isStringKey());
480:       assertTrue(node0.isFunction());
481:       assertFalse(node0.isArrayLit());
482:       assertFalse(node0.isSwitch());
483:       assertEquals((-1), node0.getCharno());
484:       assertFalse(node0.isHook());
485:       assertFalse(node0.isCase());
486:       assertFalse(node0.isThrow());
487:       assertFalse(node0.isString());
488:       assertFalse(node0.isInc());
489:       assertFalse(node0.isGetProp());
490:       assertFalse(node0.isIn());
491:       assertFalse(node0.isNE());
492:       assertFalse(node0.isComma());
493:       assertFalse(node0.isThis());
494:       assertFalse(node0.isDelProp());
495:       assertFalse(node0.isIf());
496:       assertFalse(node0.isWith());
497:       assertFalse(node0.isInstanceOf());
498:       assertFalse(node0.isExprResult());
499:       assertFalse(node0.isBreak());
500:       assertFalse(node0.isDebugger());
501:       assertFalse(node0.isNot());
502:       assertFalse(node0.isObjectLit());
503:       assertEquals((-1), node0.getSourcePosition());
504:       assertFalse(node0.isContinue());
505:       assertFalse(node0.isAnd());
506:       assertFalse(node0.isFalse());
507:       assertFalse(node0.isCast());
508:       assertFalse(node1.isHook());
509:       assertFalse(node1.isInc());
510:       assertFalse(node1.isSwitch());
511:       assertFalse(node1.isCase());
512:       assertFalse(node1.isString());
513:       assertEquals((-1), node1.getCharno());
514:       assertFalse(node1.isIn());
515:       assertFalse(node1.isAnd());
516:       assertFalse(node1.isThrow());
517:       assertFalse(node1.isFalse());
518:       assertFalse(node1.isTry());
519:       assertTrue(node1.isFunction());
520:       assertFalse(node1.isArrayLit());
521:       assertFalse(node1.isScript());
522:       assertFalse(node1.isNumber());
523:       assertFalse(node1.isGetterDef());
524:       assertTrue(node1.hasChildren());
525:       assertEquals((-1), node1.getLineno());
526:       assertEquals(1, node1.getChildCount());
527:       assertFalse(node1.isInstanceOf());
528:       assertFalse(node1.isNE());
529:       assertFalse(node1.isIf());
530:       assertFalse(node1.isWith());
531:       assertEquals(105, node1.getType());
532:       assertFalse(node1.isFor());
533:       assertFalse(node1.isCatch());
534:       assertFalse(node1.hasMoreThanOneChild());
535:       assertFalse(node1.isThis());
536:       assertFalse(node1.isRegExp());
537:       assertFalse(node1.isNew());
538:       assertFalse(node1.isAdd());
539:       assertFalse(node1.isBlock());
540:       assertFalse(node1.isVar());
541:       assertFalse(node1.isName());
542:       assertFalse(node1.isDo());
543:       assertFalse(node1.isStringKey());
544:       assertFalse(node1.isNull());
545:       assertFalse(node1.isAssignAdd());
546:       assertFalse(node1.isLabel());
547:       assertFalse(node1.isSetterDef());
548:       assertFalse(node1.isParamList());
549:       assertFalse(node1.isLabelName());
550:       assertFalse(node1.isCast());
551:       assertFalse(node1.isContinue());
552:       assertFalse(node1.isTrue());
553:       assertFalse(node1.isExprResult());
554:       assertFalse(node1.isDefaultCase());
555:       assertFalse(node1.isVoid());
556:       assertFalse(node1.isEmpty());
557:       assertFalse(node1.isNot());
558:       assertEquals((-1), node1.getSourcePosition());
559:       assertFalse(node1.isDebugger());
560:       assertFalse(node1.isObjectLit());
561:       assertFalse(node1.isOr());
562:       assertFalse(node1.isGetProp());
563:       assertFalse(node1.isReturn());
564:       assertFalse(node1.isDelProp());
565:       assertTrue(node1.hasOneChild());
566:       assertFalse(node1.isAssign());
567:       assertFalse(node1.isWhile());
568:       assertFalse(node1.isBreak());
569:       assertFalse(node1.isCall());
570:       assertFalse(node1.isGetElem());
571:       assertFalse(node1.isComma());
572:       assertFalse(node1.isDec());
573:       assertFalse(node1.isTypeOf());
574:       assertEquals(29, Node.JSDOC_INFO_PROP);
575:       assertEquals(53, Node.INPUT_ID);
576:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
577:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
578:       assertEquals(2, Node.POST_FLAG);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(47, Node.IS_DISPATCHER);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(55, Node.INFERRED_FUNCTION);
583:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
584:       assertEquals(12, Node.COLUMN_BITS);
585:       assertEquals(4095, Node.COLUMN_MASK);
586:       assertEquals(8, Node.FLAG_NO_THROWS);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(37, Node.OPT_ARG_NAME);
589:       assertEquals(36, Node.QUOTED_PROP);
590:       assertEquals(49, Node.DIRECT_EVAL);
591:       assertEquals(56, Node.CHANGE_TIME);
592:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
593:       assertEquals(40, Node.ORIGINALNAME_PROP);
594:       assertEquals(57, Node.REFLECTED_OBJECT);
595:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
596:       assertEquals(52, Node.LENGTH);
597:       assertEquals(50, Node.FREE_CALL);
598:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
599:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
600:       assertEquals(39, Node.EMPTY_BLOCK);
601:       assertEquals(15, Node.NO_SIDE_EFFECTS);
602:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
603:       assertEquals(57, Node.LAST_PROP);
604:       assertEquals(1, Node.DECR_FLAG);
605:       assertEquals(51, Node.STATIC_SOURCE_FILE);
606:       assertEquals(30, Node.VAR_ARGS_NAME);
607:       assertEquals(54, Node.SLASH_V);
608:       assertEquals(46, Node.IS_NAMESPACE);
609:       assertEquals(43, Node.IS_CONSTANT_NAME);
610:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
611:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
612:       assertEquals(56, Node.CHANGE_TIME);
613:       assertEquals(47, Node.IS_DISPATCHER);
614:       assertEquals(32, Node.INCRDECR_PROP);
615:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
616:       assertEquals(29, Node.JSDOC_INFO_PROP);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(46, Node.IS_NAMESPACE);
619:       assertEquals(30, Node.VAR_ARGS_NAME);
620:       assertEquals(51, Node.STATIC_SOURCE_FILE);
621:       assertEquals(54, Node.SLASH_V);
622:       assertEquals(2, Node.POST_FLAG);
623:       assertEquals(43, Node.IS_CONSTANT_NAME);
624:       assertEquals(40, Node.ORIGINALNAME_PROP);
625:       assertEquals(50, Node.FREE_CALL);
626:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
627:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
628:       assertEquals(57, Node.REFLECTED_OBJECT);
629:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
630:       assertEquals(52, Node.LENGTH);
631:       assertEquals(8, Node.FLAG_NO_THROWS);
632:       assertEquals(57, Node.LAST_PROP);
633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
636:       assertEquals(55, Node.INFERRED_FUNCTION);
637:       assertEquals(1, Node.DECR_FLAG);
638:       assertEquals(49, Node.DIRECT_EVAL);
639:       assertEquals(4095, Node.COLUMN_MASK);
640:       assertEquals(12, Node.COLUMN_BITS);
641:       assertEquals(36, Node.QUOTED_PROP);
642:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
643:       assertEquals(37, Node.OPT_ARG_NAME);
644:       assertEquals(48, Node.DIRECTIVES);
645:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
646:       assertFalse(node0.equals((Object)node1));
647:       assertFalse(node1.equals((Object)node0));
648:       
649:       // Undeclared exception!
650:       try { 
651:         node1.addChildrenAfter(node0, node0);
652:         fail("Expecting exception: IllegalArgumentException");
653:       
654:       } catch(IllegalArgumentException e) {
655:          //
656:          // no message in exception (getMessage() returned null)
657:          //
658:          verifyException("com.google.common.base.Preconditions", e);
659:       }
660:   }
661: }
RegularFileObject[/tmp/EvoSuite_34_1628255779761/com/google/javascript/rhino/Node_34_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:19 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_34_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_34_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_34_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:19.991 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
String string0 = "";
Node node0 = Node.newString(105, "", 0, (-1730));
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(105, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertTrue(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertNotNull(node0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(105, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertTrue(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node1 = new Node(105, node0);
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(105, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertTrue(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTry());
assertTrue(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertEquals(105, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isOr());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertNotNull(node1);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node1.equals((Object)node0));

node1.setIsSyntheticBlock(false);
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertEquals(105, node0.getType());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertTrue(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isTry());
assertTrue(node1.isFunction());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertTrue(node1.hasChildren());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertEquals(105, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isDo());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isOr());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));

node1.addChildrenAfter(node0, node0);

[MASTER] 13:16:22.277 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_49_1628255781763/com/google/javascript/rhino/Node_49_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_49_1628255781763/com/google/javascript/rhino/Node_49_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:22.277 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:22.277 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:22.278 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 857
[MASTER] 13:16:22.281 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_49_1628255781763/com/google/javascript/rhino/Node_49_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:21 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.HashSet;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_49_tmp__ESTest extends Node_49_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
22:       assertFalse(node0.isIn());
23:       assertFalse(node0.isCase());
24:       assertFalse(node0.isString());
25:       assertFalse(node0.isIf());
26:       assertFalse(node0.isSwitch());
27:       assertFalse(node0.isDelProp());
28:       assertEquals((-1), node0.getCharno());
29:       assertFalse(node0.isGetterDef());
30:       assertFalse(node0.isNE());
31:       assertFalse(node0.isHook());
32:       assertFalse(node0.isTry());
33:       assertFalse(node0.isRegExp());
34:       assertFalse(node0.isThis());
35:       assertFalse(node0.isComma());
36:       assertFalse(node0.isFor());
37:       assertFalse(node0.isObjectLit());
38:       assertFalse(node0.isGetProp());
39:       assertFalse(node0.isWith());
40:       assertFalse(node0.isCatch());
41:       assertFalse(node0.isInstanceOf());
42:       assertFalse(node0.isDebugger());
43:       assertFalse(node0.isNot());
44:       assertFalse(node0.isAnd());
45:       assertFalse(node0.isFalse());
46:       assertFalse(node0.isInc());
47:       assertFalse(node0.isCast());
48:       assertFalse(node0.isSetterDef());
49:       assertEquals(2468, node0.getType());
50:       assertFalse(node0.isFunction());
51:       assertFalse(node0.isThrow());
52:       assertFalse(node0.hasMoreThanOneChild());
53:       assertEquals((-1), node0.getLineno());
54:       assertFalse(node0.isOr());
55:       assertFalse(node0.isContinue());
56:       assertEquals((-1), node0.getSourcePosition());
57:       assertFalse(node0.isNumber());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.hasOneChild());
60:       assertFalse(node0.isGetElem());
61:       assertFalse(node0.isCall());
62:       assertFalse(node0.isExprResult());
63:       assertFalse(node0.isScript());
64:       assertFalse(node0.isTypeOf());
65:       assertFalse(node0.hasChildren());
66:       assertFalse(node0.isDec());
67:       assertFalse(node0.isAssign());
68:       assertFalse(node0.isBlock());
69:       assertFalse(node0.isWhile());
70:       assertFalse(node0.isReturn());
71:       assertEquals(0, node0.getChildCount());
72:       assertFalse(node0.isNull());
73:       assertFalse(node0.isBreak());
74:       assertFalse(node0.isVoid());
75:       assertFalse(node0.isName());
76:       assertFalse(node0.isTrue());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isStringKey());
79:       assertFalse(node0.isArrayLit());
80:       assertFalse(node0.isNew());
81:       assertFalse(node0.isAdd());
82:       assertFalse(node0.isEmpty());
83:       assertFalse(node0.isDefaultCase());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isAssignAdd());
87:       assertFalse(node0.isVar());
88:       assertNotNull(node0);
89:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(43, Node.IS_CONSTANT_NAME);
92:       assertEquals(53, Node.INPUT_ID);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(8, Node.FLAG_NO_THROWS);
95:       assertEquals(36, Node.QUOTED_PROP);
96:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
97:       assertEquals(56, Node.CHANGE_TIME);
98:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
99:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
100:       assertEquals(37, Node.OPT_ARG_NAME);
101:       assertEquals(48, Node.DIRECTIVES);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(12, Node.COLUMN_BITS);
104:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
105:       assertEquals(4095, Node.COLUMN_MASK);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
108:       assertEquals(57, Node.LAST_PROP);
109:       assertEquals(1, Node.DECR_FLAG);
110:       assertEquals(49, Node.DIRECT_EVAL);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(57, Node.REFLECTED_OBJECT);
114:       assertEquals(46, Node.IS_NAMESPACE);
115:       assertEquals(54, Node.SLASH_V);
116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
117:       assertEquals(50, Node.FREE_CALL);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(47, Node.IS_DISPATCHER);
120:       assertEquals(40, Node.ORIGINALNAME_PROP);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       assertEquals(2, Node.POST_FLAG);
125:       
126:       boolean boolean0 = node0.isOnlyModifiesThisCall();
127:       assertFalse(node0.isIn());
128:       assertFalse(node0.isCase());
129:       assertFalse(node0.isString());
130:       assertFalse(node0.isIf());
131:       assertFalse(node0.isSwitch());
132:       assertFalse(node0.isDelProp());
133:       assertEquals((-1), node0.getCharno());
134:       assertFalse(node0.isGetterDef());
135:       assertFalse(node0.isNE());
136:       assertFalse(node0.isHook());
137:       assertFalse(node0.isTry());
138:       assertFalse(node0.isRegExp());
139:       assertFalse(node0.isThis());
140:       assertFalse(node0.isComma());
141:       assertFalse(node0.isFor());
142:       assertFalse(node0.isObjectLit());
143:       assertFalse(node0.isGetProp());
144:       assertFalse(node0.isWith());
145:       assertFalse(node0.isCatch());
146:       assertFalse(node0.isInstanceOf());
147:       assertFalse(node0.isDebugger());
148:       assertFalse(node0.isNot());
149:       assertFalse(node0.isAnd());
150:       assertFalse(node0.isFalse());
151:       assertFalse(node0.isInc());
152:       assertFalse(node0.isCast());
153:       assertFalse(node0.isSetterDef());
154:       assertEquals(2468, node0.getType());
155:       assertFalse(node0.isFunction());
156:       assertFalse(node0.isThrow());
157:       assertFalse(node0.hasMoreThanOneChild());
158:       assertEquals((-1), node0.getLineno());
159:       assertFalse(node0.isOr());
160:       assertFalse(node0.isContinue());
161:       assertEquals((-1), node0.getSourcePosition());
162:       assertFalse(node0.isNumber());
163:       assertFalse(node0.isLabelName());
164:       assertFalse(node0.hasOneChild());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.isExprResult());
168:       assertFalse(node0.isScript());
169:       assertFalse(node0.isTypeOf());
170:       assertFalse(node0.hasChildren());
171:       assertFalse(node0.isDec());
172:       assertFalse(node0.isAssign());
173:       assertFalse(node0.isBlock());
174:       assertFalse(node0.isWhile());
175:       assertFalse(node0.isReturn());
176:       assertEquals(0, node0.getChildCount());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isBreak());
179:       assertFalse(node0.isVoid());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isTrue());
182:       assertFalse(node0.isParamList());
183:       assertFalse(node0.isStringKey());
184:       assertFalse(node0.isArrayLit());
185:       assertFalse(node0.isNew());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isEmpty());
188:       assertFalse(node0.isDefaultCase());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isLabel());
191:       assertFalse(node0.isAssignAdd());
192:       assertFalse(node0.isVar());
193:       assertFalse(boolean0);
194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(53, Node.INPUT_ID);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(8, Node.FLAG_NO_THROWS);
200:       assertEquals(36, Node.QUOTED_PROP);
201:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
202:       assertEquals(56, Node.CHANGE_TIME);
203:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
204:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
205:       assertEquals(37, Node.OPT_ARG_NAME);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
210:       assertEquals(4095, Node.COLUMN_MASK);
211:       assertEquals(30, Node.VAR_ARGS_NAME);
212:       assertEquals(15, Node.NO_SIDE_EFFECTS);
213:       assertEquals(57, Node.LAST_PROP);
214:       assertEquals(1, Node.DECR_FLAG);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(52, Node.LENGTH);
218:       assertEquals(57, Node.REFLECTED_OBJECT);
219:       assertEquals(46, Node.IS_NAMESPACE);
220:       assertEquals(54, Node.SLASH_V);
221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
222:       assertEquals(50, Node.FREE_CALL);
223:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
224:       assertEquals(47, Node.IS_DISPATCHER);
225:       assertEquals(40, Node.ORIGINALNAME_PROP);
226:       assertEquals(29, Node.JSDOC_INFO_PROP);
227:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
228:       assertEquals(39, Node.EMPTY_BLOCK);
229:       assertEquals(2, Node.POST_FLAG);
230:       
231:       node0.putProp(2769, "8IX=/g0 F~");
232:       assertFalse(node0.isIn());
233:       assertFalse(node0.isCase());
234:       assertFalse(node0.isString());
235:       assertFalse(node0.isIf());
236:       assertFalse(node0.isSwitch());
237:       assertFalse(node0.isDelProp());
238:       assertEquals((-1), node0.getCharno());
239:       assertFalse(node0.isGetterDef());
240:       assertFalse(node0.isNE());
241:       assertFalse(node0.isHook());
242:       assertFalse(node0.isTry());
243:       assertFalse(node0.isRegExp());
244:       assertFalse(node0.isThis());
245:       assertFalse(node0.isComma());
246:       assertFalse(node0.isFor());
247:       assertFalse(node0.isObjectLit());
248:       assertFalse(node0.isGetProp());
249:       assertFalse(node0.isWith());
250:       assertFalse(node0.isCatch());
251:       assertFalse(node0.isInstanceOf());
252:       assertFalse(node0.isDebugger());
253:       assertFalse(node0.isNot());
254:       assertFalse(node0.isAnd());
255:       assertFalse(node0.isFalse());
256:       assertFalse(node0.isInc());
257:       assertFalse(node0.isCast());
258:       assertFalse(node0.isSetterDef());
259:       assertEquals(2468, node0.getType());
260:       assertFalse(node0.isFunction());
261:       assertFalse(node0.isThrow());
262:       assertFalse(node0.hasMoreThanOneChild());
263:       assertEquals((-1), node0.getLineno());
264:       assertFalse(node0.isOr());
265:       assertFalse(node0.isContinue());
266:       assertEquals((-1), node0.getSourcePosition());
267:       assertFalse(node0.isNumber());
268:       assertFalse(node0.isLabelName());
269:       assertFalse(node0.hasOneChild());
270:       assertFalse(node0.isGetElem());
271:       assertFalse(node0.isCall());
272:       assertFalse(node0.isExprResult());
273:       assertFalse(node0.isScript());
274:       assertFalse(node0.isTypeOf());
275:       assertFalse(node0.hasChildren());
276:       assertFalse(node0.isDec());
277:       assertFalse(node0.isAssign());
278:       assertFalse(node0.isBlock());
279:       assertFalse(node0.isWhile());
280:       assertFalse(node0.isReturn());
281:       assertEquals(0, node0.getChildCount());
282:       assertFalse(node0.isNull());
283:       assertFalse(node0.isBreak());
284:       assertFalse(node0.isVoid());
285:       assertFalse(node0.isName());
286:       assertFalse(node0.isTrue());
287:       assertFalse(node0.isParamList());
288:       assertFalse(node0.isStringKey());
289:       assertFalse(node0.isArrayLit());
290:       assertFalse(node0.isNew());
291:       assertFalse(node0.isAdd());
292:       assertFalse(node0.isEmpty());
293:       assertFalse(node0.isDefaultCase());
294:       assertFalse(node0.isDo());
295:       assertFalse(node0.isLabel());
296:       assertFalse(node0.isAssignAdd());
297:       assertFalse(node0.isVar());
298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
300:       assertEquals(43, Node.IS_CONSTANT_NAME);
301:       assertEquals(53, Node.INPUT_ID);
302:       assertEquals(55, Node.INFERRED_FUNCTION);
303:       assertEquals(8, Node.FLAG_NO_THROWS);
304:       assertEquals(36, Node.QUOTED_PROP);
305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
306:       assertEquals(56, Node.CHANGE_TIME);
307:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
309:       assertEquals(37, Node.OPT_ARG_NAME);
310:       assertEquals(48, Node.DIRECTIVES);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(12, Node.COLUMN_BITS);
313:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
314:       assertEquals(4095, Node.COLUMN_MASK);
315:       assertEquals(30, Node.VAR_ARGS_NAME);
316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
317:       assertEquals(57, Node.LAST_PROP);
318:       assertEquals(1, Node.DECR_FLAG);
319:       assertEquals(49, Node.DIRECT_EVAL);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(52, Node.LENGTH);
322:       assertEquals(57, Node.REFLECTED_OBJECT);
323:       assertEquals(46, Node.IS_NAMESPACE);
324:       assertEquals(54, Node.SLASH_V);
325:       assertEquals(51, Node.STATIC_SOURCE_FILE);
326:       assertEquals(50, Node.FREE_CALL);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(47, Node.IS_DISPATCHER);
329:       assertEquals(40, Node.ORIGINALNAME_PROP);
330:       assertEquals(29, Node.JSDOC_INFO_PROP);
331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
332:       assertEquals(39, Node.EMPTY_BLOCK);
333:       assertEquals(2, Node.POST_FLAG);
334:       
335:       HashSet<String> hashSet0 = new HashSet<String>();
336:       assertTrue(hashSet0.isEmpty());
337:       assertEquals(0, hashSet0.size());
338:       assertNotNull(hashSet0);
339:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
340:       
341:       boolean boolean1 = hashSet0.add((String) null);
342:       assertEquals(1, hashSet0.size());
343:       assertFalse(hashSet0.isEmpty());
344:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
345:       assertTrue(boolean1);
346:       assertFalse(boolean1 == boolean0);
347:       
348:       boolean boolean2 = hashSet0.add((String) null);
349:       assertEquals(1, hashSet0.size());
350:       assertFalse(hashSet0.isEmpty());
351:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
352:       assertFalse(boolean2);
353:       assertFalse(boolean2 == boolean1);
354:       assertTrue(boolean2 == boolean0);
355:       
356:       node0.removeProp(0);
357:       assertFalse(node0.isIn());
358:       assertFalse(node0.isCase());
359:       assertFalse(node0.isString());
360:       assertFalse(node0.isIf());
361:       assertFalse(node0.isSwitch());
362:       assertFalse(node0.isDelProp());
363:       assertEquals((-1), node0.getCharno());
364:       assertFalse(node0.isGetterDef());
365:       assertFalse(node0.isNE());
366:       assertFalse(node0.isHook());
367:       assertFalse(node0.isTry());
368:       assertFalse(node0.isRegExp());
369:       assertFalse(node0.isThis());
370:       assertFalse(node0.isComma());
371:       assertFalse(node0.isFor());
372:       assertFalse(node0.isObjectLit());
373:       assertFalse(node0.isGetProp());
374:       assertFalse(node0.isWith());
375:       assertFalse(node0.isCatch());
376:       assertFalse(node0.isInstanceOf());
377:       assertFalse(node0.isDebugger());
378:       assertFalse(node0.isNot());
379:       assertFalse(node0.isAnd());
380:       assertFalse(node0.isFalse());
381:       assertFalse(node0.isInc());
382:       assertFalse(node0.isCast());
383:       assertFalse(node0.isSetterDef());
384:       assertEquals(2468, node0.getType());
385:       assertFalse(node0.isFunction());
386:       assertFalse(node0.isThrow());
387:       assertFalse(node0.hasMoreThanOneChild());
388:       assertEquals((-1), node0.getLineno());
389:       assertFalse(node0.isOr());
390:       assertFalse(node0.isContinue());
391:       assertEquals((-1), node0.getSourcePosition());
392:       assertFalse(node0.isNumber());
393:       assertFalse(node0.isLabelName());
394:       assertFalse(node0.hasOneChild());
395:       assertFalse(node0.isGetElem());
396:       assertFalse(node0.isCall());
397:       assertFalse(node0.isExprResult());
398:       assertFalse(node0.isScript());
399:       assertFalse(node0.isTypeOf());
400:       assertFalse(node0.hasChildren());
401:       assertFalse(node0.isDec());
402:       assertFalse(node0.isAssign());
403:       assertFalse(node0.isBlock());
404:       assertFalse(node0.isWhile());
405:       assertFalse(node0.isReturn());
406:       assertEquals(0, node0.getChildCount());
407:       assertFalse(node0.isNull());
408:       assertFalse(node0.isBreak());
409:       assertFalse(node0.isVoid());
410:       assertFalse(node0.isName());
411:       assertFalse(node0.isTrue());
412:       assertFalse(node0.isParamList());
413:       assertFalse(node0.isStringKey());
414:       assertFalse(node0.isArrayLit());
415:       assertFalse(node0.isNew());
416:       assertFalse(node0.isAdd());
417:       assertFalse(node0.isEmpty());
418:       assertFalse(node0.isDefaultCase());
419:       assertFalse(node0.isDo());
420:       assertFalse(node0.isLabel());
421:       assertFalse(node0.isAssignAdd());
422:       assertFalse(node0.isVar());
423:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
425:       assertEquals(43, Node.IS_CONSTANT_NAME);
426:       assertEquals(53, Node.INPUT_ID);
427:       assertEquals(55, Node.INFERRED_FUNCTION);
428:       assertEquals(8, Node.FLAG_NO_THROWS);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
431:       assertEquals(56, Node.CHANGE_TIME);
432:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
434:       assertEquals(37, Node.OPT_ARG_NAME);
435:       assertEquals(48, Node.DIRECTIVES);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertEquals(12, Node.COLUMN_BITS);
438:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
439:       assertEquals(4095, Node.COLUMN_MASK);
440:       assertEquals(30, Node.VAR_ARGS_NAME);
441:       assertEquals(15, Node.NO_SIDE_EFFECTS);
442:       assertEquals(57, Node.LAST_PROP);
443:       assertEquals(1, Node.DECR_FLAG);
444:       assertEquals(49, Node.DIRECT_EVAL);
445:       assertEquals(32, Node.INCRDECR_PROP);
446:       assertEquals(52, Node.LENGTH);
447:       assertEquals(57, Node.REFLECTED_OBJECT);
448:       assertEquals(46, Node.IS_NAMESPACE);
449:       assertEquals(54, Node.SLASH_V);
450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
451:       assertEquals(50, Node.FREE_CALL);
452:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
453:       assertEquals(47, Node.IS_DISPATCHER);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
457:       assertEquals(39, Node.EMPTY_BLOCK);
458:       assertEquals(2, Node.POST_FLAG);
459:       
460:       boolean boolean3 = hashSet0.remove("Jcu{'f75U");
461:       assertEquals(1, hashSet0.size());
462:       assertFalse(hashSet0.isEmpty());
463:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
464:       assertFalse(boolean3);
465:       assertTrue(boolean3 == boolean0);
466:       assertFalse(boolean3 == boolean1);
467:       assertTrue(boolean3 == boolean2);
468:       
469:       node0.setDirectives(hashSet0);
470:       assertFalse(node0.isIn());
471:       assertFalse(node0.isCase());
472:       assertFalse(node0.isString());
473:       assertFalse(node0.isIf());
474:       assertFalse(node0.isSwitch());
475:       assertFalse(node0.isDelProp());
476:       assertEquals((-1), node0.getCharno());
477:       assertFalse(node0.isGetterDef());
478:       assertFalse(node0.isNE());
479:       assertFalse(node0.isHook());
480:       assertFalse(node0.isTry());
481:       assertFalse(node0.isRegExp());
482:       assertFalse(node0.isThis());
483:       assertFalse(node0.isComma());
484:       assertFalse(node0.isFor());
485:       assertFalse(node0.isObjectLit());
486:       assertFalse(node0.isGetProp());
487:       assertFalse(node0.isWith());
488:       assertFalse(node0.isCatch());
489:       assertFalse(node0.isInstanceOf());
490:       assertFalse(node0.isDebugger());
491:       assertFalse(node0.isNot());
492:       assertFalse(node0.isAnd());
493:       assertFalse(node0.isFalse());
494:       assertFalse(node0.isInc());
495:       assertFalse(node0.isCast());
496:       assertFalse(node0.isSetterDef());
497:       assertEquals(2468, node0.getType());
498:       assertFalse(node0.isFunction());
499:       assertFalse(node0.isThrow());
500:       assertFalse(node0.hasMoreThanOneChild());
501:       assertEquals((-1), node0.getLineno());
502:       assertFalse(node0.isOr());
503:       assertFalse(node0.isContinue());
504:       assertEquals((-1), node0.getSourcePosition());
505:       assertFalse(node0.isNumber());
506:       assertFalse(node0.isLabelName());
507:       assertFalse(node0.hasOneChild());
508:       assertFalse(node0.isGetElem());
509:       assertFalse(node0.isCall());
510:       assertFalse(node0.isExprResult());
511:       assertFalse(node0.isScript());
512:       assertFalse(node0.isTypeOf());
513:       assertFalse(node0.hasChildren());
514:       assertFalse(node0.isDec());
515:       assertFalse(node0.isAssign());
516:       assertFalse(node0.isBlock());
517:       assertFalse(node0.isWhile());
518:       assertFalse(node0.isReturn());
519:       assertEquals(0, node0.getChildCount());
520:       assertFalse(node0.isNull());
521:       assertFalse(node0.isBreak());
522:       assertFalse(node0.isVoid());
523:       assertFalse(node0.isName());
524:       assertFalse(node0.isTrue());
525:       assertFalse(node0.isParamList());
526:       assertFalse(node0.isStringKey());
527:       assertFalse(node0.isArrayLit());
528:       assertFalse(node0.isNew());
529:       assertFalse(node0.isAdd());
530:       assertFalse(node0.isEmpty());
531:       assertFalse(node0.isDefaultCase());
532:       assertFalse(node0.isDo());
533:       assertFalse(node0.isLabel());
534:       assertFalse(node0.isAssignAdd());
535:       assertFalse(node0.isVar());
536:       assertEquals(1, hashSet0.size());
537:       assertFalse(hashSet0.isEmpty());
538:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
539:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
540:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
541:       assertEquals(43, Node.IS_CONSTANT_NAME);
542:       assertEquals(53, Node.INPUT_ID);
543:       assertEquals(55, Node.INFERRED_FUNCTION);
544:       assertEquals(8, Node.FLAG_NO_THROWS);
545:       assertEquals(36, Node.QUOTED_PROP);
546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
547:       assertEquals(56, Node.CHANGE_TIME);
548:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
549:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
550:       assertEquals(37, Node.OPT_ARG_NAME);
551:       assertEquals(48, Node.DIRECTIVES);
552:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
553:       assertEquals(12, Node.COLUMN_BITS);
554:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
555:       assertEquals(4095, Node.COLUMN_MASK);
556:       assertEquals(30, Node.VAR_ARGS_NAME);
557:       assertEquals(15, Node.NO_SIDE_EFFECTS);
558:       assertEquals(57, Node.LAST_PROP);
559:       assertEquals(1, Node.DECR_FLAG);
560:       assertEquals(49, Node.DIRECT_EVAL);
561:       assertEquals(32, Node.INCRDECR_PROP);
562:       assertEquals(52, Node.LENGTH);
563:       assertEquals(57, Node.REFLECTED_OBJECT);
564:       assertEquals(46, Node.IS_NAMESPACE);
565:       assertEquals(54, Node.SLASH_V);
566:       assertEquals(51, Node.STATIC_SOURCE_FILE);
567:       assertEquals(50, Node.FREE_CALL);
568:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
569:       assertEquals(47, Node.IS_DISPATCHER);
570:       assertEquals(40, Node.ORIGINALNAME_PROP);
571:       assertEquals(29, Node.JSDOC_INFO_PROP);
572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(2, Node.POST_FLAG);
575:       
576:       node0.addSuppression("Jcu{'f75U");
577:       assertFalse(node0.isIn());
578:       assertFalse(node0.isCase());
579:       assertFalse(node0.isString());
580:       assertFalse(node0.isIf());
581:       assertFalse(node0.isSwitch());
582:       assertFalse(node0.isDelProp());
583:       assertEquals((-1), node0.getCharno());
584:       assertFalse(node0.isGetterDef());
585:       assertFalse(node0.isNE());
586:       assertFalse(node0.isHook());
587:       assertFalse(node0.isTry());
588:       assertFalse(node0.isRegExp());
589:       assertFalse(node0.isThis());
590:       assertFalse(node0.isComma());
591:       assertFalse(node0.isFor());
592:       assertFalse(node0.isObjectLit());
593:       assertFalse(node0.isGetProp());
594:       assertFalse(node0.isWith());
595:       assertFalse(node0.isCatch());
596:       assertFalse(node0.isInstanceOf());
597:       assertFalse(node0.isDebugger());
598:       assertFalse(node0.isNot());
599:       assertFalse(node0.isAnd());
600:       assertFalse(node0.isFalse());
601:       assertFalse(node0.isInc());
602:       assertFalse(node0.isCast());
603:       assertFalse(node0.isSetterDef());
604:       assertEquals(2468, node0.getType());
605:       assertFalse(node0.isFunction());
606:       assertFalse(node0.isThrow());
607:       assertFalse(node0.hasMoreThanOneChild());
608:       assertEquals((-1), node0.getLineno());
609:       assertFalse(node0.isOr());
610:       assertFalse(node0.isContinue());
611:       assertEquals((-1), node0.getSourcePosition());
612:       assertFalse(node0.isNumber());
613:       assertFalse(node0.isLabelName());
614:       assertFalse(node0.hasOneChild());
615:       assertFalse(node0.isGetElem());
616:       assertFalse(node0.isCall());
617:       assertFalse(node0.isExprResult());
618:       assertFalse(node0.isScript());
619:       assertFalse(node0.isTypeOf());
620:       assertFalse(node0.hasChildren());
621:       assertFalse(node0.isDec());
622:       assertFalse(node0.isAssign());
623:       assertFalse(node0.isBlock());
624:       assertFalse(node0.isWhile());
625:       assertFalse(node0.isReturn());
626:       assertEquals(0, node0.getChildCount());
627:       assertFalse(node0.isNull());
628:       assertFalse(node0.isBreak());
629:       assertFalse(node0.isVoid());
630:       assertFalse(node0.isName());
631:       assertFalse(node0.isTrue());
632:       assertFalse(node0.isParamList());
633:       assertFalse(node0.isStringKey());
634:       assertFalse(node0.isArrayLit());
635:       assertFalse(node0.isNew());
636:       assertFalse(node0.isAdd());
637:       assertFalse(node0.isEmpty());
638:       assertFalse(node0.isDefaultCase());
639:       assertFalse(node0.isDo());
640:       assertFalse(node0.isLabel());
641:       assertFalse(node0.isAssignAdd());
642:       assertFalse(node0.isVar());
643:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
644:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
645:       assertEquals(43, Node.IS_CONSTANT_NAME);
646:       assertEquals(53, Node.INPUT_ID);
647:       assertEquals(55, Node.INFERRED_FUNCTION);
648:       assertEquals(8, Node.FLAG_NO_THROWS);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
651:       assertEquals(56, Node.CHANGE_TIME);
652:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
653:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
654:       assertEquals(37, Node.OPT_ARG_NAME);
655:       assertEquals(48, Node.DIRECTIVES);
656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
657:       assertEquals(12, Node.COLUMN_BITS);
658:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
659:       assertEquals(4095, Node.COLUMN_MASK);
660:       assertEquals(30, Node.VAR_ARGS_NAME);
661:       assertEquals(15, Node.NO_SIDE_EFFECTS);
662:       assertEquals(57, Node.LAST_PROP);
663:       assertEquals(1, Node.DECR_FLAG);
664:       assertEquals(49, Node.DIRECT_EVAL);
665:       assertEquals(32, Node.INCRDECR_PROP);
666:       assertEquals(52, Node.LENGTH);
667:       assertEquals(57, Node.REFLECTED_OBJECT);
668:       assertEquals(46, Node.IS_NAMESPACE);
669:       assertEquals(54, Node.SLASH_V);
670:       assertEquals(51, Node.STATIC_SOURCE_FILE);
671:       assertEquals(50, Node.FREE_CALL);
672:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
673:       assertEquals(47, Node.IS_DISPATCHER);
674:       assertEquals(40, Node.ORIGINALNAME_PROP);
675:       assertEquals(29, Node.JSDOC_INFO_PROP);
676:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
677:       assertEquals(39, Node.EMPTY_BLOCK);
678:       assertEquals(2, Node.POST_FLAG);
679:       
680:       boolean boolean4 = node0.isOr();
681:       assertFalse(node0.isIn());
682:       assertFalse(node0.isCase());
683:       assertFalse(node0.isString());
684:       assertFalse(node0.isIf());
685:       assertFalse(node0.isSwitch());
686:       assertFalse(node0.isDelProp());
687:       assertEquals((-1), node0.getCharno());
688:       assertFalse(node0.isGetterDef());
689:       assertFalse(node0.isNE());
690:       assertFalse(node0.isHook());
691:       assertFalse(node0.isTry());
692:       assertFalse(node0.isRegExp());
693:       assertFalse(node0.isThis());
694:       assertFalse(node0.isComma());
695:       assertFalse(node0.isFor());
696:       assertFalse(node0.isObjectLit());
697:       assertFalse(node0.isGetProp());
698:       assertFalse(node0.isWith());
699:       assertFalse(node0.isCatch());
700:       assertFalse(node0.isInstanceOf());
701:       assertFalse(node0.isDebugger());
702:       assertFalse(node0.isNot());
703:       assertFalse(node0.isAnd());
704:       assertFalse(node0.isFalse());
705:       assertFalse(node0.isInc());
706:       assertFalse(node0.isCast());
707:       assertFalse(node0.isSetterDef());
708:       assertEquals(2468, node0.getType());
709:       assertFalse(node0.isFunction());
710:       assertFalse(node0.isThrow());
711:       assertFalse(node0.hasMoreThanOneChild());
712:       assertEquals((-1), node0.getLineno());
713:       assertFalse(node0.isOr());
714:       assertFalse(node0.isContinue());
715:       assertEquals((-1), node0.getSourcePosition());
716:       assertFalse(node0.isNumber());
717:       assertFalse(node0.isLabelName());
718:       assertFalse(node0.hasOneChild());
719:       assertFalse(node0.isGetElem());
720:       assertFalse(node0.isCall());
721:       assertFalse(node0.isExprResult());
722:       assertFalse(node0.isScript());
723:       assertFalse(node0.isTypeOf());
724:       assertFalse(node0.hasChildren());
725:       assertFalse(node0.isDec());
726:       assertFalse(node0.isAssign());
727:       assertFalse(node0.isBlock());
728:       assertFalse(node0.isWhile());
729:       assertFalse(node0.isReturn());
730:       assertEquals(0, node0.getChildCount());
731:       assertFalse(node0.isNull());
732:       assertFalse(node0.isBreak());
733:       assertFalse(node0.isVoid());
734:       assertFalse(node0.isName());
735:       assertFalse(node0.isTrue());
736:       assertFalse(node0.isParamList());
737:       assertFalse(node0.isStringKey());
738:       assertFalse(node0.isArrayLit());
739:       assertFalse(node0.isNew());
740:       assertFalse(node0.isAdd());
741:       assertFalse(node0.isEmpty());
742:       assertFalse(node0.isDefaultCase());
743:       assertFalse(node0.isDo());
744:       assertFalse(node0.isLabel());
745:       assertFalse(node0.isAssignAdd());
746:       assertFalse(node0.isVar());
747:       assertFalse(boolean4);
748:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
749:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
750:       assertEquals(43, Node.IS_CONSTANT_NAME);
751:       assertEquals(53, Node.INPUT_ID);
752:       assertEquals(55, Node.INFERRED_FUNCTION);
753:       assertEquals(8, Node.FLAG_NO_THROWS);
754:       assertEquals(36, Node.QUOTED_PROP);
755:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
756:       assertEquals(56, Node.CHANGE_TIME);
757:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
758:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
759:       assertEquals(37, Node.OPT_ARG_NAME);
760:       assertEquals(48, Node.DIRECTIVES);
761:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
762:       assertEquals(12, Node.COLUMN_BITS);
763:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
764:       assertEquals(4095, Node.COLUMN_MASK);
765:       assertEquals(30, Node.VAR_ARGS_NAME);
766:       assertEquals(15, Node.NO_SIDE_EFFECTS);
767:       assertEquals(57, Node.LAST_PROP);
768:       assertEquals(1, Node.DECR_FLAG);
769:       assertEquals(49, Node.DIRECT_EVAL);
770:       assertEquals(32, Node.INCRDECR_PROP);
771:       assertEquals(52, Node.LENGTH);
772:       assertEquals(57, Node.REFLECTED_OBJECT);
773:       assertEquals(46, Node.IS_NAMESPACE);
774:       assertEquals(54, Node.SLASH_V);
775:       assertEquals(51, Node.STATIC_SOURCE_FILE);
776:       assertEquals(50, Node.FREE_CALL);
777:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
778:       assertEquals(47, Node.IS_DISPATCHER);
779:       assertEquals(40, Node.ORIGINALNAME_PROP);
780:       assertEquals(29, Node.JSDOC_INFO_PROP);
781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
782:       assertEquals(39, Node.EMPTY_BLOCK);
783:       assertEquals(2, Node.POST_FLAG);
784:       assertTrue(boolean4 == boolean2);
785:       assertTrue(boolean4 == boolean0);
786:       assertTrue(boolean4 == boolean3);
787:       assertFalse(boolean4 == boolean1);
788:       
789:       Iterable<Node> iterable0 = node0.children();
790:       assertFalse(node0.isIn());
791:       assertFalse(node0.isCase());
792:       assertFalse(node0.isString());
793:       assertFalse(node0.isIf());
794:       assertFalse(node0.isSwitch());
795:       assertFalse(node0.isDelProp());
796:       assertEquals((-1), node0.getCharno());
797:       assertFalse(node0.isGetterDef());
798:       assertFalse(node0.isNE());
799:       assertFalse(node0.isHook());
800:       assertFalse(node0.isTry());
801:       assertFalse(node0.isRegExp());
802:       assertFalse(node0.isThis());
803:       assertFalse(node0.isComma());
804:       assertFalse(node0.isFor());
805:       assertFalse(node0.isObjectLit());
806:       assertFalse(node0.isGetProp());
807:       assertFalse(node0.isWith());
808:       assertFalse(node0.isCatch());
809:       assertFalse(node0.isInstanceOf());
810:       assertFalse(node0.isDebugger());
811:       assertFalse(node0.isNot());
812:       assertFalse(node0.isAnd());
813:       assertFalse(node0.isFalse());
814:       assertFalse(node0.isInc());
815:       assertFalse(node0.isCast());
816:       assertFalse(node0.isSetterDef());
817:       assertEquals(2468, node0.getType());
818:       assertFalse(node0.isFunction());
819:       assertFalse(node0.isThrow());
820:       assertFalse(node0.hasMoreThanOneChild());
821:       assertEquals((-1), node0.getLineno());
822:       assertFalse(node0.isOr());
823:       assertFalse(node0.isContinue());
824:       assertEquals((-1), node0.getSourcePosition());
825:       assertFalse(node0.isNumber());
826:       assertFalse(node0.isLabelName());
827:       assertFalse(node0.hasOneChild());
828:       assertFalse(node0.isGetElem());
829:       assertFalse(node0.isCall());
830:       assertFalse(node0.isExprResult());
831:       assertFalse(node0.isScript());
832:       assertFalse(node0.isTypeOf());
833:       assertFalse(node0.hasChildren());
834:       assertFalse(node0.isDec());
835:       assertFalse(node0.isAssign());
836:       assertFalse(node0.isBlock());
837:       assertFalse(node0.isWhile());
838:       assertFalse(node0.isReturn());
839:       assertEquals(0, node0.getChildCount());
840:       assertFalse(node0.isNull());
841:       assertFalse(node0.isBreak());
842:       assertFalse(node0.isVoid());
843:       assertFalse(node0.isName());
844:       assertFalse(node0.isTrue());
845:       assertFalse(node0.isParamList());
846:       assertFalse(node0.isStringKey());
847:       assertFalse(node0.isArrayLit());
848:       assertFalse(node0.isNew());
849:       assertFalse(node0.isAdd());
850:       assertFalse(node0.isEmpty());
851:       assertFalse(node0.isDefaultCase());
852:       assertFalse(node0.isDo());
853:       assertFalse(node0.isLabel());
854:       assertFalse(node0.isAssignAdd());
855:       assertFalse(node0.isVar());
856:       assertNotNull(iterable0);
857:       assertFalse(iterable0.contains(node0));
858:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
859:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
860:       assertEquals(43, Node.IS_CONSTANT_NAME);
861:       assertEquals(53, Node.INPUT_ID);
862:       assertEquals(55, Node.INFERRED_FUNCTION);
863:       assertEquals(8, Node.FLAG_NO_THROWS);
864:       assertEquals(36, Node.QUOTED_PROP);
865:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
866:       assertEquals(56, Node.CHANGE_TIME);
867:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
868:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
869:       assertEquals(37, Node.OPT_ARG_NAME);
870:       assertEquals(48, Node.DIRECTIVES);
871:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
872:       assertEquals(12, Node.COLUMN_BITS);
873:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
874:       assertEquals(4095, Node.COLUMN_MASK);
875:       assertEquals(30, Node.VAR_ARGS_NAME);
876:       assertEquals(15, Node.NO_SIDE_EFFECTS);
877:       assertEquals(57, Node.LAST_PROP);
878:       assertEquals(1, Node.DECR_FLAG);
879:       assertEquals(49, Node.DIRECT_EVAL);
880:       assertEquals(32, Node.INCRDECR_PROP);
881:       assertEquals(52, Node.LENGTH);
882:       assertEquals(57, Node.REFLECTED_OBJECT);
883:       assertEquals(46, Node.IS_NAMESPACE);
884:       assertEquals(54, Node.SLASH_V);
885:       assertEquals(51, Node.STATIC_SOURCE_FILE);
886:       assertEquals(50, Node.FREE_CALL);
887:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
888:       assertEquals(47, Node.IS_DISPATCHER);
889:       assertEquals(40, Node.ORIGINALNAME_PROP);
890:       assertEquals(29, Node.JSDOC_INFO_PROP);
891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
892:       assertEquals(39, Node.EMPTY_BLOCK);
893:       assertEquals(2, Node.POST_FLAG);
894:       
895:       boolean boolean5 = node0.isAnd();
896:       assertFalse(node0.isIn());
897:       assertFalse(node0.isCase());
898:       assertFalse(node0.isString());
899:       assertFalse(node0.isIf());
900:       assertFalse(node0.isSwitch());
901:       assertFalse(node0.isDelProp());
902:       assertEquals((-1), node0.getCharno());
903:       assertFalse(node0.isGetterDef());
904:       assertFalse(node0.isNE());
905:       assertFalse(node0.isHook());
906:       assertFalse(node0.isTry());
907:       assertFalse(node0.isRegExp());
908:       assertFalse(node0.isThis());
909:       assertFalse(node0.isComma());
910:       assertFalse(node0.isFor());
911:       assertFalse(node0.isObjectLit());
912:       assertFalse(node0.isGetProp());
913:       assertFalse(node0.isWith());
914:       assertFalse(node0.isCatch());
915:       assertFalse(node0.isInstanceOf());
916:       assertFalse(node0.isDebugger());
917:       assertFalse(node0.isNot());
918:       assertFalse(node0.isAnd());
919:       assertFalse(node0.isFalse());
920:       assertFalse(node0.isInc());
921:       assertFalse(node0.isCast());
922:       assertFalse(node0.isSetterDef());
923:       assertEquals(2468, node0.getType());
924:       assertFalse(node0.isFunction());
925:       assertFalse(node0.isThrow());
926:       assertFalse(node0.hasMoreThanOneChild());
927:       assertEquals((-1), node0.getLineno());
928:       assertFalse(node0.isOr());
929:       assertFalse(node0.isContinue());
930:       assertEquals((-1), node0.getSourcePosition());
931:       assertFalse(node0.isNumber());
932:       assertFalse(node0.isLabelName());
933:       assertFalse(node0.hasOneChild());
934:       assertFalse(node0.isGetElem());
935:       assertFalse(node0.isCall());
936:       assertFalse(node0.isExprResult());
937:       assertFalse(node0.isScript());
938:       assertFalse(node0.isTypeOf());
939:       assertFalse(node0.hasChildren());
940:       assertFalse(node0.isDec());
941:       assertFalse(node0.isAssign());
942:       assertFalse(node0.isBlock());
943:       assertFalse(node0.isWhile());
944:       assertFalse(node0.isReturn());
945:       assertEquals(0, node0.getChildCount());
946:       assertFalse(node0.isNull());
947:       assertFalse(node0.isBreak());
948:       assertFalse(node0.isVoid());
949:       assertFalse(node0.isName());
950:       assertFalse(node0.isTrue());
951:       assertFalse(node0.isParamList());
952:       assertFalse(node0.isStringKey());
953:       assertFalse(node0.isArrayLit());
954:       assertFalse(node0.isNew());
955:       assertFalse(node0.isAdd());
956:       assertFalse(node0.isEmpty());
957:       assertFalse(node0.isDefaultCase());
958:       assertFalse(node0.isDo());
959:       assertFalse(node0.isLabel());
960:       assertFalse(node0.isAssignAdd());
961:       assertFalse(node0.isVar());
962:       assertFalse(boolean5);
963:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
964:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
965:       assertEquals(43, Node.IS_CONSTANT_NAME);
966:       assertEquals(53, Node.INPUT_ID);
967:       assertEquals(55, Node.INFERRED_FUNCTION);
968:       assertEquals(8, Node.FLAG_NO_THROWS);
969:       assertEquals(36, Node.QUOTED_PROP);
970:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
971:       assertEquals(56, Node.CHANGE_TIME);
972:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
973:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
974:       assertEquals(37, Node.OPT_ARG_NAME);
975:       assertEquals(48, Node.DIRECTIVES);
976:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
977:       assertEquals(12, Node.COLUMN_BITS);
978:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
979:       assertEquals(4095, Node.COLUMN_MASK);
980:       assertEquals(30, Node.VAR_ARGS_NAME);
981:       assertEquals(15, Node.NO_SIDE_EFFECTS);
982:       assertEquals(57, Node.LAST_PROP);
983:       assertEquals(1, Node.DECR_FLAG);
984:       assertEquals(49, Node.DIRECT_EVAL);
985:       assertEquals(32, Node.INCRDECR_PROP);
986:       assertEquals(52, Node.LENGTH);
987:       assertEquals(57, Node.REFLECTED_OBJECT);
988:       assertEquals(46, Node.IS_NAMESPACE);
989:       assertEquals(54, Node.SLASH_V);
990:       assertEquals(51, Node.STATIC_SOURCE_FILE);
991:       assertEquals(50, Node.FREE_CALL);
992:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
993:       assertEquals(47, Node.IS_DISPATCHER);
994:       assertEquals(40, Node.ORIGINALNAME_PROP);
995:       assertEquals(29, Node.JSDOC_INFO_PROP);
996:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
997:       assertEquals(39, Node.EMPTY_BLOCK);
998:       assertEquals(2, Node.POST_FLAG);
999:       assertTrue(boolean5 == boolean0);
1000:       assertTrue(boolean5 == boolean3);
1001:       assertTrue(boolean5 == boolean4);
1002:       assertFalse(boolean5 == boolean1);
1003:       assertTrue(boolean5 == boolean2);
1004:       
1005:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
1006:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1007:       assertEquals(16, node_SideEffectFlags0.valueOf());
1008:       assertNotNull(node_SideEffectFlags0);
1009:       
1010:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1011:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1012:       assertEquals(16, node_SideEffectFlags0.valueOf());
1013:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1014:       assertEquals(16, node_SideEffectFlags1.valueOf());
1015:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1016:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1017:       assertNotNull(node_SideEffectFlags1);
1018:       
1019:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1020:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1021:       assertEquals(16, node_SideEffectFlags0.valueOf());
1022:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1023:       assertEquals(16, node_SideEffectFlags1.valueOf());
1024:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1025:       assertEquals(16, node_SideEffectFlags2.valueOf());
1026:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1027:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1028:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1029:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1030:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1031:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1032:       assertNotNull(node_SideEffectFlags2);
1033:       
1034:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
1035:       assertEquals(31, node_SideEffectFlags3.valueOf());
1036:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1037:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1038:       assertEquals(31, node_SideEffectFlags0.valueOf());
1039:       assertEquals(31, node_SideEffectFlags1.valueOf());
1040:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1041:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1042:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1043:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1044:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1045:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1046:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1047:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1048:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1049:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1050:       assertNotNull(node_SideEffectFlags3);
1051:       
1052:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
1053:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
1054:       assertEquals(24, node_SideEffectFlags4.valueOf());
1055:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1056:       assertEquals(24, node_SideEffectFlags0.valueOf());
1057:       assertEquals(24, node_SideEffectFlags1.valueOf());
1058:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1059:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1060:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1061:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1062:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1063:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1064:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1065:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1066:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1067:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1068:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1069:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1070:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1071:       assertNotNull(node_SideEffectFlags4);
1072:       
1073:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
1074:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
1075:       assertEquals(24, node_SideEffectFlags4.valueOf());
1076:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
1077:       assertEquals(24, node_SideEffectFlags5.valueOf());
1078:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1079:       assertEquals(24, node_SideEffectFlags0.valueOf());
1080:       assertEquals(24, node_SideEffectFlags1.valueOf());
1081:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1082:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1083:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1084:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1085:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
1086:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1087:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1088:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1089:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1090:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1091:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1092:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1093:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1094:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1095:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1096:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1097:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1098:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1099:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1100:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1101:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1102:       assertNotNull(node_SideEffectFlags5);
1103:       
1104:       boolean boolean6 = node0.isVarArgs();
1105:       assertFalse(node0.isIn());
1106:       assertFalse(node0.isCase());
1107:       assertFalse(node0.isString());
1108:       assertFalse(node0.isIf());
1109:       assertFalse(node0.isSwitch());
1110:       assertFalse(node0.isDelProp());
1111:       assertEquals((-1), node0.getCharno());
1112:       assertFalse(node0.isGetterDef());
1113:       assertFalse(node0.isNE());
1114:       assertFalse(node0.isHook());
1115:       assertFalse(node0.isTry());
1116:       assertFalse(node0.isRegExp());
1117:       assertFalse(node0.isThis());
1118:       assertFalse(node0.isComma());
1119:       assertFalse(node0.isFor());
1120:       assertFalse(node0.isObjectLit());
1121:       assertFalse(node0.isGetProp());
1122:       assertFalse(node0.isWith());
1123:       assertFalse(node0.isCatch());
1124:       assertFalse(node0.isInstanceOf());
1125:       assertFalse(node0.isDebugger());
1126:       assertFalse(node0.isNot());
1127:       assertFalse(node0.isAnd());
1128:       assertFalse(node0.isFalse());
1129:       assertFalse(node0.isInc());
1130:       assertFalse(node0.isCast());
1131:       assertFalse(node0.isSetterDef());
1132:       assertEquals(2468, node0.getType());
1133:       assertFalse(node0.isFunction());
1134:       assertFalse(node0.isThrow());
1135:       assertFalse(node0.hasMoreThanOneChild());
1136:       assertEquals((-1), node0.getLineno());
1137:       assertFalse(node0.isOr());
1138:       assertFalse(node0.isContinue());
1139:       assertEquals((-1), node0.getSourcePosition());
1140:       assertFalse(node0.isNumber());
1141:       assertFalse(node0.isLabelName());
1142:       assertFalse(node0.hasOneChild());
1143:       assertFalse(node0.isGetElem());
1144:       assertFalse(node0.isCall());
1145:       assertFalse(node0.isExprResult());
1146:       assertFalse(node0.isScript());
1147:       assertFalse(node0.isTypeOf());
1148:       assertFalse(node0.hasChildren());
1149:       assertFalse(node0.isDec());
1150:       assertFalse(node0.isAssign());
1151:       assertFalse(node0.isBlock());
1152:       assertFalse(node0.isWhile());
1153:       assertFalse(node0.isReturn());
1154:       assertEquals(0, node0.getChildCount());
1155:       assertFalse(node0.isNull());
1156:       assertFalse(node0.isBreak());
1157:       assertFalse(node0.isVoid());
1158:       assertFalse(node0.isName());
1159:       assertFalse(node0.isTrue());
1160:       assertFalse(node0.isParamList());
1161:       assertFalse(node0.isStringKey());
1162:       assertFalse(node0.isArrayLit());
1163:       assertFalse(node0.isNew());
1164:       assertFalse(node0.isAdd());
1165:       assertFalse(node0.isEmpty());
1166:       assertFalse(node0.isDefaultCase());
1167:       assertFalse(node0.isDo());
1168:       assertFalse(node0.isLabel());
1169:       assertFalse(node0.isAssignAdd());
1170:       assertFalse(node0.isVar());
1171:       assertFalse(boolean6);
1172:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1173:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1174:       assertEquals(43, Node.IS_CONSTANT_NAME);
1175:       assertEquals(53, Node.INPUT_ID);
1176:       assertEquals(55, Node.INFERRED_FUNCTION);
1177:       assertEquals(8, Node.FLAG_NO_THROWS);
1178:       assertEquals(36, Node.QUOTED_PROP);
1179:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1180:       assertEquals(56, Node.CHANGE_TIME);
1181:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1182:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1183:       assertEquals(37, Node.OPT_ARG_NAME);
1184:       assertEquals(48, Node.DIRECTIVES);
1185:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1186:       assertEquals(12, Node.COLUMN_BITS);
1187:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1188:       assertEquals(4095, Node.COLUMN_MASK);
1189:       assertEquals(30, Node.VAR_ARGS_NAME);
1190:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1191:       assertEquals(57, Node.LAST_PROP);
1192:       assertEquals(1, Node.DECR_FLAG);
1193:       assertEquals(49, Node.DIRECT_EVAL);
1194:       assertEquals(32, Node.INCRDECR_PROP);
1195:       assertEquals(52, Node.LENGTH);
1196:       assertEquals(57, Node.REFLECTED_OBJECT);
1197:       assertEquals(46, Node.IS_NAMESPACE);
1198:       assertEquals(54, Node.SLASH_V);
1199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1200:       assertEquals(50, Node.FREE_CALL);
1201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1202:       assertEquals(47, Node.IS_DISPATCHER);
1203:       assertEquals(40, Node.ORIGINALNAME_PROP);
1204:       assertEquals(29, Node.JSDOC_INFO_PROP);
1205:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1206:       assertEquals(39, Node.EMPTY_BLOCK);
1207:       assertEquals(2, Node.POST_FLAG);
1208:       assertFalse(boolean6 == boolean1);
1209:       assertTrue(boolean6 == boolean5);
1210:       assertTrue(boolean6 == boolean4);
1211:       assertTrue(boolean6 == boolean3);
1212:       assertTrue(boolean6 == boolean2);
1213:       assertTrue(boolean6 == boolean0);
1214:       
1215:       boolean boolean7 = node0.isVarArgs();
1216:       assertFalse(node0.isIn());
1217:       assertFalse(node0.isCase());
1218:       assertFalse(node0.isString());
1219:       assertFalse(node0.isIf());
1220:       assertFalse(node0.isSwitch());
1221:       assertFalse(node0.isDelProp());
1222:       assertEquals((-1), node0.getCharno());
1223:       assertFalse(node0.isGetterDef());
1224:       assertFalse(node0.isNE());
1225:       assertFalse(node0.isHook());
1226:       assertFalse(node0.isTry());
1227:       assertFalse(node0.isRegExp());
1228:       assertFalse(node0.isThis());
1229:       assertFalse(node0.isComma());
1230:       assertFalse(node0.isFor());
1231:       assertFalse(node0.isObjectLit());
1232:       assertFalse(node0.isGetProp());
1233:       assertFalse(node0.isWith());
1234:       assertFalse(node0.isCatch());
1235:       assertFalse(node0.isInstanceOf());
1236:       assertFalse(node0.isDebugger());
1237:       assertFalse(node0.isNot());
1238:       assertFalse(node0.isAnd());
1239:       assertFalse(node0.isFalse());
1240:       assertFalse(node0.isInc());
1241:       assertFalse(node0.isCast());
1242:       assertFalse(node0.isSetterDef());
1243:       assertEquals(2468, node0.getType());
1244:       assertFalse(node0.isFunction());
1245:       assertFalse(node0.isThrow());
1246:       assertFalse(node0.hasMoreThanOneChild());
1247:       assertEquals((-1), node0.getLineno());
1248:       assertFalse(node0.isOr());
1249:       assertFalse(node0.isContinue());
1250:       assertEquals((-1), node0.getSourcePosition());
1251:       assertFalse(node0.isNumber());
1252:       assertFalse(node0.isLabelName());
1253:       assertFalse(node0.hasOneChild());
1254:       assertFalse(node0.isGetElem());
1255:       assertFalse(node0.isCall());
1256:       assertFalse(node0.isExprResult());
1257:       assertFalse(node0.isScript());
1258:       assertFalse(node0.isTypeOf());
1259:       assertFalse(node0.hasChildren());
1260:       assertFalse(node0.isDec());
1261:       assertFalse(node0.isAssign());
1262:       assertFalse(node0.isBlock());
1263:       assertFalse(node0.isWhile());
1264:       assertFalse(node0.isReturn());
1265:       assertEquals(0, node0.getChildCount());
1266:       assertFalse(node0.isNull());
1267:       assertFalse(node0.isBreak());
1268:       assertFalse(node0.isVoid());
1269:       assertFalse(node0.isName());
1270:       assertFalse(node0.isTrue());
1271:       assertFalse(node0.isParamList());
1272:       assertFalse(node0.isStringKey());
1273:       assertFalse(node0.isArrayLit());
1274:       assertFalse(node0.isNew());
1275:       assertFalse(node0.isAdd());
1276:       assertFalse(node0.isEmpty());
1277:       assertFalse(node0.isDefaultCase());
1278:       assertFalse(node0.isDo());
1279:       assertFalse(node0.isLabel());
1280:       assertFalse(node0.isAssignAdd());
1281:       assertFalse(node0.isVar());
1282:       assertFalse(boolean7);
1283:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1284:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1285:       assertEquals(43, Node.IS_CONSTANT_NAME);
1286:       assertEquals(53, Node.INPUT_ID);
1287:       assertEquals(55, Node.INFERRED_FUNCTION);
1288:       assertEquals(8, Node.FLAG_NO_THROWS);
1289:       assertEquals(36, Node.QUOTED_PROP);
1290:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1291:       assertEquals(56, Node.CHANGE_TIME);
1292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1293:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1294:       assertEquals(37, Node.OPT_ARG_NAME);
1295:       assertEquals(48, Node.DIRECTIVES);
1296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1297:       assertEquals(12, Node.COLUMN_BITS);
1298:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1299:       assertEquals(4095, Node.COLUMN_MASK);
1300:       assertEquals(30, Node.VAR_ARGS_NAME);
1301:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1302:       assertEquals(57, Node.LAST_PROP);
1303:       assertEquals(1, Node.DECR_FLAG);
1304:       assertEquals(49, Node.DIRECT_EVAL);
1305:       assertEquals(32, Node.INCRDECR_PROP);
1306:       assertEquals(52, Node.LENGTH);
1307:       assertEquals(57, Node.REFLECTED_OBJECT);
1308:       assertEquals(46, Node.IS_NAMESPACE);
1309:       assertEquals(54, Node.SLASH_V);
1310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1311:       assertEquals(50, Node.FREE_CALL);
1312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1313:       assertEquals(47, Node.IS_DISPATCHER);
1314:       assertEquals(40, Node.ORIGINALNAME_PROP);
1315:       assertEquals(29, Node.JSDOC_INFO_PROP);
1316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1317:       assertEquals(39, Node.EMPTY_BLOCK);
1318:       assertEquals(2, Node.POST_FLAG);
1319:       assertTrue(boolean7 == boolean4);
1320:       assertTrue(boolean7 == boolean6);
1321:       assertTrue(boolean7 == boolean2);
1322:       assertTrue(boolean7 == boolean3);
1323:       assertFalse(boolean7 == boolean1);
1324:       assertTrue(boolean7 == boolean5);
1325:       assertTrue(boolean7 == boolean0);
1326:       
1327:       node0.putIntProp(46, 30);
1328:       assertFalse(node0.isIn());
1329:       assertFalse(node0.isCase());
1330:       assertFalse(node0.isString());
1331:       assertFalse(node0.isIf());
1332:       assertFalse(node0.isSwitch());
1333:       assertFalse(node0.isDelProp());
1334:       assertEquals((-1), node0.getCharno());
1335:       assertFalse(node0.isGetterDef());
1336:       assertFalse(node0.isNE());
1337:       assertFalse(node0.isHook());
1338:       assertFalse(node0.isTry());
1339:       assertFalse(node0.isRegExp());
1340:       assertFalse(node0.isThis());
1341:       assertFalse(node0.isComma());
1342:       assertFalse(node0.isFor());
1343:       assertFalse(node0.isObjectLit());
1344:       assertFalse(node0.isGetProp());
1345:       assertFalse(node0.isWith());
1346:       assertFalse(node0.isCatch());
1347:       assertFalse(node0.isInstanceOf());
1348:       assertFalse(node0.isDebugger());
1349:       assertFalse(node0.isNot());
1350:       assertFalse(node0.isAnd());
1351:       assertFalse(node0.isFalse());
1352:       assertFalse(node0.isInc());
1353:       assertFalse(node0.isCast());
1354:       assertFalse(node0.isSetterDef());
1355:       assertEquals(2468, node0.getType());
1356:       assertFalse(node0.isFunction());
1357:       assertFalse(node0.isThrow());
1358:       assertFalse(node0.hasMoreThanOneChild());
1359:       assertEquals((-1), node0.getLineno());
1360:       assertFalse(node0.isOr());
1361:       assertFalse(node0.isContinue());
1362:       assertEquals((-1), node0.getSourcePosition());
1363:       assertFalse(node0.isNumber());
1364:       assertFalse(node0.isLabelName());
1365:       assertFalse(node0.hasOneChild());
1366:       assertFalse(node0.isGetElem());
1367:       assertFalse(node0.isCall());
1368:       assertFalse(node0.isExprResult());
1369:       assertFalse(node0.isScript());
1370:       assertFalse(node0.isTypeOf());
1371:       assertFalse(node0.hasChildren());
1372:       assertFalse(node0.isDec());
1373:       assertFalse(node0.isAssign());
1374:       assertFalse(node0.isBlock());
1375:       assertFalse(node0.isWhile());
1376:       assertFalse(node0.isReturn());
1377:       assertEquals(0, node0.getChildCount());
1378:       assertFalse(node0.isNull());
1379:       assertFalse(node0.isBreak());
1380:       assertFalse(node0.isVoid());
1381:       assertFalse(node0.isName());
1382:       assertFalse(node0.isTrue());
1383:       assertFalse(node0.isParamList());
1384:       assertFalse(node0.isStringKey());
1385:       assertFalse(node0.isArrayLit());
1386:       assertFalse(node0.isNew());
1387:       assertFalse(node0.isAdd());
1388:       assertFalse(node0.isEmpty());
1389:       assertFalse(node0.isDefaultCase());
1390:       assertFalse(node0.isDo());
1391:       assertFalse(node0.isLabel());
1392:       assertFalse(node0.isAssignAdd());
1393:       assertFalse(node0.isVar());
1394:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1395:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1396:       assertEquals(43, Node.IS_CONSTANT_NAME);
1397:       assertEquals(53, Node.INPUT_ID);
1398:       assertEquals(55, Node.INFERRED_FUNCTION);
1399:       assertEquals(8, Node.FLAG_NO_THROWS);
1400:       assertEquals(36, Node.QUOTED_PROP);
1401:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1402:       assertEquals(56, Node.CHANGE_TIME);
1403:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1404:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1405:       assertEquals(37, Node.OPT_ARG_NAME);
1406:       assertEquals(48, Node.DIRECTIVES);
1407:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1408:       assertEquals(12, Node.COLUMN_BITS);
1409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1410:       assertEquals(4095, Node.COLUMN_MASK);
1411:       assertEquals(30, Node.VAR_ARGS_NAME);
1412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1413:       assertEquals(57, Node.LAST_PROP);
1414:       assertEquals(1, Node.DECR_FLAG);
1415:       assertEquals(49, Node.DIRECT_EVAL);
1416:       assertEquals(32, Node.INCRDECR_PROP);
1417:       assertEquals(52, Node.LENGTH);
1418:       assertEquals(57, Node.REFLECTED_OBJECT);
1419:       assertEquals(46, Node.IS_NAMESPACE);
1420:       assertEquals(54, Node.SLASH_V);
1421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1422:       assertEquals(50, Node.FREE_CALL);
1423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1424:       assertEquals(47, Node.IS_DISPATCHER);
1425:       assertEquals(40, Node.ORIGINALNAME_PROP);
1426:       assertEquals(29, Node.JSDOC_INFO_PROP);
1427:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1428:       assertEquals(39, Node.EMPTY_BLOCK);
1429:       assertEquals(2, Node.POST_FLAG);
1430:       
1431:       boolean boolean8 = node0.isAssign();
1432:       assertFalse(node0.isIn());
1433:       assertFalse(node0.isCase());
1434:       assertFalse(node0.isString());
1435:       assertFalse(node0.isIf());
1436:       assertFalse(node0.isSwitch());
1437:       assertFalse(node0.isDelProp());
1438:       assertEquals((-1), node0.getCharno());
1439:       assertFalse(node0.isGetterDef());
1440:       assertFalse(node0.isNE());
1441:       assertFalse(node0.isHook());
1442:       assertFalse(node0.isTry());
1443:       assertFalse(node0.isRegExp());
1444:       assertFalse(node0.isThis());
1445:       assertFalse(node0.isComma());
1446:       assertFalse(node0.isFor());
1447:       assertFalse(node0.isObjectLit());
1448:       assertFalse(node0.isGetProp());
1449:       assertFalse(node0.isWith());
1450:       assertFalse(node0.isCatch());
1451:       assertFalse(node0.isInstanceOf());
1452:       assertFalse(node0.isDebugger());
1453:       assertFalse(node0.isNot());
1454:       assertFalse(node0.isAnd());
1455:       assertFalse(node0.isFalse());
1456:       assertFalse(node0.isInc());
1457:       assertFalse(node0.isCast());
1458:       assertFalse(node0.isSetterDef());
1459:       assertEquals(2468, node0.getType());
1460:       assertFalse(node0.isFunction());
1461:       assertFalse(node0.isThrow());
1462:       assertFalse(node0.hasMoreThanOneChild());
1463:       assertEquals((-1), node0.getLineno());
1464:       assertFalse(node0.isOr());
1465:       assertFalse(node0.isContinue());
1466:       assertEquals((-1), node0.getSourcePosition());
1467:       assertFalse(node0.isNumber());
1468:       assertFalse(node0.isLabelName());
1469:       assertFalse(node0.hasOneChild());
1470:       assertFalse(node0.isGetElem());
1471:       assertFalse(node0.isCall());
1472:       assertFalse(node0.isExprResult());
1473:       assertFalse(node0.isScript());
1474:       assertFalse(node0.isTypeOf());
1475:       assertFalse(node0.hasChildren());
1476:       assertFalse(node0.isDec());
1477:       assertFalse(node0.isAssign());
1478:       assertFalse(node0.isBlock());
1479:       assertFalse(node0.isWhile());
1480:       assertFalse(node0.isReturn());
1481:       assertEquals(0, node0.getChildCount());
1482:       assertFalse(node0.isNull());
1483:       assertFalse(node0.isBreak());
1484:       assertFalse(node0.isVoid());
1485:       assertFalse(node0.isName());
1486:       assertFalse(node0.isTrue());
1487:       assertFalse(node0.isParamList());
1488:       assertFalse(node0.isStringKey());
1489:       assertFalse(node0.isArrayLit());
1490:       assertFalse(node0.isNew());
1491:       assertFalse(node0.isAdd());
1492:       assertFalse(node0.isEmpty());
1493:       assertFalse(node0.isDefaultCase());
1494:       assertFalse(node0.isDo());
1495:       assertFalse(node0.isLabel());
1496:       assertFalse(node0.isAssignAdd());
1497:       assertFalse(node0.isVar());
1498:       assertFalse(boolean8);
1499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1500:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1501:       assertEquals(43, Node.IS_CONSTANT_NAME);
1502:       assertEquals(53, Node.INPUT_ID);
1503:       assertEquals(55, Node.INFERRED_FUNCTION);
1504:       assertEquals(8, Node.FLAG_NO_THROWS);
1505:       assertEquals(36, Node.QUOTED_PROP);
1506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1507:       assertEquals(56, Node.CHANGE_TIME);
1508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1510:       assertEquals(37, Node.OPT_ARG_NAME);
1511:       assertEquals(48, Node.DIRECTIVES);
1512:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1513:       assertEquals(12, Node.COLUMN_BITS);
1514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1515:       assertEquals(4095, Node.COLUMN_MASK);
1516:       assertEquals(30, Node.VAR_ARGS_NAME);
1517:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1518:       assertEquals(57, Node.LAST_PROP);
1519:       assertEquals(1, Node.DECR_FLAG);
1520:       assertEquals(49, Node.DIRECT_EVAL);
1521:       assertEquals(32, Node.INCRDECR_PROP);
1522:       assertEquals(52, Node.LENGTH);
1523:       assertEquals(57, Node.REFLECTED_OBJECT);
1524:       assertEquals(46, Node.IS_NAMESPACE);
1525:       assertEquals(54, Node.SLASH_V);
1526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1527:       assertEquals(50, Node.FREE_CALL);
1528:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1529:       assertEquals(47, Node.IS_DISPATCHER);
1530:       assertEquals(40, Node.ORIGINALNAME_PROP);
1531:       assertEquals(29, Node.JSDOC_INFO_PROP);
1532:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1533:       assertEquals(39, Node.EMPTY_BLOCK);
1534:       assertEquals(2, Node.POST_FLAG);
1535:       assertFalse(boolean8 == boolean1);
1536:       assertTrue(boolean8 == boolean3);
1537:       assertTrue(boolean8 == boolean4);
1538:       assertTrue(boolean8 == boolean5);
1539:       assertTrue(boolean8 == boolean0);
1540:       assertTrue(boolean8 == boolean6);
1541:       assertTrue(boolean8 == boolean2);
1542:       assertTrue(boolean8 == boolean7);
1543:       
1544:       boolean boolean9 = node0.isSyntheticBlock();
1545:       assertFalse(node0.isIn());
1546:       assertFalse(node0.isCase());
1547:       assertFalse(node0.isString());
1548:       assertFalse(node0.isIf());
1549:       assertFalse(node0.isSwitch());
1550:       assertFalse(node0.isDelProp());
1551:       assertEquals((-1), node0.getCharno());
1552:       assertFalse(node0.isGetterDef());
1553:       assertFalse(node0.isNE());
1554:       assertFalse(node0.isHook());
1555:       assertFalse(node0.isTry());
1556:       assertFalse(node0.isRegExp());
1557:       assertFalse(node0.isThis());
1558:       assertFalse(node0.isComma());
1559:       assertFalse(node0.isFor());
1560:       assertFalse(node0.isObjectLit());
1561:       assertFalse(node0.isGetProp());
1562:       assertFalse(node0.isWith());
1563:       assertFalse(node0.isCatch());
1564:       assertFalse(node0.isInstanceOf());
1565:       assertFalse(node0.isDebugger());
1566:       assertFalse(node0.isNot());
1567:       assertFalse(node0.isAnd());
1568:       assertFalse(node0.isFalse());
1569:       assertFalse(node0.isInc());
1570:       assertFalse(node0.isCast());
1571:       assertFalse(node0.isSetterDef());
1572:       assertEquals(2468, node0.getType());
1573:       assertFalse(node0.isFunction());
1574:       assertFalse(node0.isThrow());
1575:       assertFalse(node0.hasMoreThanOneChild());
1576:       assertEquals((-1), node0.getLineno());
1577:       assertFalse(node0.isOr());
1578:       assertFalse(node0.isContinue());
1579:       assertEquals((-1), node0.getSourcePosition());
1580:       assertFalse(node0.isNumber());
1581:       assertFalse(node0.isLabelName());
1582:       assertFalse(node0.hasOneChild());
1583:       assertFalse(node0.isGetElem());
1584:       assertFalse(node0.isCall());
1585:       assertFalse(node0.isExprResult());
1586:       assertFalse(node0.isScript());
1587:       assertFalse(node0.isTypeOf());
1588:       assertFalse(node0.hasChildren());
1589:       assertFalse(node0.isDec());
1590:       assertFalse(node0.isAssign());
1591:       assertFalse(node0.isBlock());
1592:       assertFalse(node0.isWhile());
1593:       assertFalse(node0.isReturn());
1594:       assertEquals(0, node0.getChildCount());
1595:       assertFalse(node0.isNull());
1596:       assertFalse(node0.isBreak());
1597:       assertFalse(node0.isVoid());
1598:       assertFalse(node0.isName());
1599:       assertFalse(node0.isTrue());
1600:       assertFalse(node0.isParamList());
1601:       assertFalse(node0.isStringKey());
1602:       assertFalse(node0.isArrayLit());
1603:       assertFalse(node0.isNew());
1604:       assertFalse(node0.isAdd());
1605:       assertFalse(node0.isEmpty());
1606:       assertFalse(node0.isDefaultCase());
1607:       assertFalse(node0.isDo());
1608:       assertFalse(node0.isLabel());
1609:       assertFalse(node0.isAssignAdd());
1610:       assertFalse(node0.isVar());
1611:       assertFalse(boolean9);
1612:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1613:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1614:       assertEquals(43, Node.IS_CONSTANT_NAME);
1615:       assertEquals(53, Node.INPUT_ID);
1616:       assertEquals(55, Node.INFERRED_FUNCTION);
1617:       assertEquals(8, Node.FLAG_NO_THROWS);
1618:       assertEquals(36, Node.QUOTED_PROP);
1619:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1620:       assertEquals(56, Node.CHANGE_TIME);
1621:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1623:       assertEquals(37, Node.OPT_ARG_NAME);
1624:       assertEquals(48, Node.DIRECTIVES);
1625:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1626:       assertEquals(12, Node.COLUMN_BITS);
1627:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1628:       assertEquals(4095, Node.COLUMN_MASK);
1629:       assertEquals(30, Node.VAR_ARGS_NAME);
1630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1631:       assertEquals(57, Node.LAST_PROP);
1632:       assertEquals(1, Node.DECR_FLAG);
1633:       assertEquals(49, Node.DIRECT_EVAL);
1634:       assertEquals(32, Node.INCRDECR_PROP);
1635:       assertEquals(52, Node.LENGTH);
1636:       assertEquals(57, Node.REFLECTED_OBJECT);
1637:       assertEquals(46, Node.IS_NAMESPACE);
1638:       assertEquals(54, Node.SLASH_V);
1639:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1640:       assertEquals(50, Node.FREE_CALL);
1641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1642:       assertEquals(47, Node.IS_DISPATCHER);
1643:       assertEquals(40, Node.ORIGINALNAME_PROP);
1644:       assertEquals(29, Node.JSDOC_INFO_PROP);
1645:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1646:       assertEquals(39, Node.EMPTY_BLOCK);
1647:       assertEquals(2, Node.POST_FLAG);
1648:       assertTrue(boolean9 == boolean3);
1649:       assertTrue(boolean9 == boolean0);
1650:       assertFalse(boolean9 == boolean1);
1651:       assertTrue(boolean9 == boolean2);
1652:       assertTrue(boolean9 == boolean5);
1653:       assertTrue(boolean9 == boolean7);
1654:       assertTrue(boolean9 == boolean8);
1655:       assertTrue(boolean9 == boolean6);
1656:       assertTrue(boolean9 == boolean4);
1657:       
1658:       boolean boolean10 = node0.isScript();
1659:       assertFalse(node0.isIn());
1660:       assertFalse(node0.isCase());
1661:       assertFalse(node0.isString());
1662:       assertFalse(node0.isIf());
1663:       assertFalse(node0.isSwitch());
1664:       assertFalse(node0.isDelProp());
1665:       assertEquals((-1), node0.getCharno());
1666:       assertFalse(node0.isGetterDef());
1667:       assertFalse(node0.isNE());
1668:       assertFalse(node0.isHook());
1669:       assertFalse(node0.isTry());
1670:       assertFalse(node0.isRegExp());
1671:       assertFalse(node0.isThis());
1672:       assertFalse(node0.isComma());
1673:       assertFalse(node0.isFor());
1674:       assertFalse(node0.isObjectLit());
1675:       assertFalse(node0.isGetProp());
1676:       assertFalse(node0.isWith());
1677:       assertFalse(node0.isCatch());
1678:       assertFalse(node0.isInstanceOf());
1679:       assertFalse(node0.isDebugger());
1680:       assertFalse(node0.isNot());
1681:       assertFalse(node0.isAnd());
1682:       assertFalse(node0.isFalse());
1683:       assertFalse(node0.isInc());
1684:       assertFalse(node0.isCast());
1685:       assertFalse(node0.isSetterDef());
1686:       assertEquals(2468, node0.getType());
1687:       assertFalse(node0.isFunction());
1688:       assertFalse(node0.isThrow());
1689:       assertFalse(node0.hasMoreThanOneChild());
1690:       assertEquals((-1), node0.getLineno());
1691:       assertFalse(node0.isOr());
1692:       assertFalse(node0.isContinue());
1693:       assertEquals((-1), node0.getSourcePosition());
1694:       assertFalse(node0.isNumber());
1695:       assertFalse(node0.isLabelName());
1696:       assertFalse(node0.hasOneChild());
1697:       assertFalse(node0.isGetElem());
1698:       assertFalse(node0.isCall());
1699:       assertFalse(node0.isExprResult());
1700:       assertFalse(node0.isScript());
1701:       assertFalse(node0.isTypeOf());
1702:       assertFalse(node0.hasChildren());
1703:       assertFalse(node0.isDec());
1704:       assertFalse(node0.isAssign());
1705:       assertFalse(node0.isBlock());
1706:       assertFalse(node0.isWhile());
1707:       assertFalse(node0.isReturn());
1708:       assertEquals(0, node0.getChildCount());
1709:       assertFalse(node0.isNull());
1710:       assertFalse(node0.isBreak());
1711:       assertFalse(node0.isVoid());
1712:       assertFalse(node0.isName());
1713:       assertFalse(node0.isTrue());
1714:       assertFalse(node0.isParamList());
1715:       assertFalse(node0.isStringKey());
1716:       assertFalse(node0.isArrayLit());
1717:       assertFalse(node0.isNew());
1718:       assertFalse(node0.isAdd());
1719:       assertFalse(node0.isEmpty());
1720:       assertFalse(node0.isDefaultCase());
1721:       assertFalse(node0.isDo());
1722:       assertFalse(node0.isLabel());
1723:       assertFalse(node0.isAssignAdd());
1724:       assertFalse(node0.isVar());
1725:       assertFalse(boolean10);
1726:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1727:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1728:       assertEquals(43, Node.IS_CONSTANT_NAME);
1729:       assertEquals(53, Node.INPUT_ID);
1730:       assertEquals(55, Node.INFERRED_FUNCTION);
1731:       assertEquals(8, Node.FLAG_NO_THROWS);
1732:       assertEquals(36, Node.QUOTED_PROP);
1733:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1734:       assertEquals(56, Node.CHANGE_TIME);
1735:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1736:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1737:       assertEquals(37, Node.OPT_ARG_NAME);
1738:       assertEquals(48, Node.DIRECTIVES);
1739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1740:       assertEquals(12, Node.COLUMN_BITS);
1741:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1742:       assertEquals(4095, Node.COLUMN_MASK);
1743:       assertEquals(30, Node.VAR_ARGS_NAME);
1744:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1745:       assertEquals(57, Node.LAST_PROP);
1746:       assertEquals(1, Node.DECR_FLAG);
1747:       assertEquals(49, Node.DIRECT_EVAL);
1748:       assertEquals(32, Node.INCRDECR_PROP);
1749:       assertEquals(52, Node.LENGTH);
1750:       assertEquals(57, Node.REFLECTED_OBJECT);
1751:       assertEquals(46, Node.IS_NAMESPACE);
1752:       assertEquals(54, Node.SLASH_V);
1753:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1754:       assertEquals(50, Node.FREE_CALL);
1755:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1756:       assertEquals(47, Node.IS_DISPATCHER);
1757:       assertEquals(40, Node.ORIGINALNAME_PROP);
1758:       assertEquals(29, Node.JSDOC_INFO_PROP);
1759:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1760:       assertEquals(39, Node.EMPTY_BLOCK);
1761:       assertEquals(2, Node.POST_FLAG);
1762:       assertTrue(boolean10 == boolean9);
1763:       assertTrue(boolean10 == boolean3);
1764:       assertTrue(boolean10 == boolean8);
1765:       assertTrue(boolean10 == boolean2);
1766:       assertFalse(boolean10 == boolean1);
1767:       assertTrue(boolean10 == boolean0);
1768:       assertTrue(boolean10 == boolean4);
1769:       assertTrue(boolean10 == boolean5);
1770:       assertTrue(boolean10 == boolean6);
1771:       assertTrue(boolean10 == boolean7);
1772:       
1773:       boolean boolean11 = node0.isStringKey();
1774:       assertFalse(node0.isIn());
1775:       assertFalse(node0.isCase());
1776:       assertFalse(node0.isString());
1777:       assertFalse(node0.isIf());
1778:       assertFalse(node0.isSwitch());
1779:       assertFalse(node0.isDelProp());
1780:       assertEquals((-1), node0.getCharno());
1781:       assertFalse(node0.isGetterDef());
1782:       assertFalse(node0.isNE());
1783:       assertFalse(node0.isHook());
1784:       assertFalse(node0.isTry());
1785:       assertFalse(node0.isRegExp());
1786:       assertFalse(node0.isThis());
1787:       assertFalse(node0.isComma());
1788:       assertFalse(node0.isFor());
1789:       assertFalse(node0.isObjectLit());
1790:       assertFalse(node0.isGetProp());
1791:       assertFalse(node0.isWith());
1792:       assertFalse(node0.isCatch());
1793:       assertFalse(node0.isInstanceOf());
1794:       assertFalse(node0.isDebugger());
1795:       assertFalse(node0.isNot());
1796:       assertFalse(node0.isAnd());
1797:       assertFalse(node0.isFalse());
1798:       assertFalse(node0.isInc());
1799:       assertFalse(node0.isCast());
1800:       assertFalse(node0.isSetterDef());
1801:       assertEquals(2468, node0.getType());
1802:       assertFalse(node0.isFunction());
1803:       assertFalse(node0.isThrow());
1804:       assertFalse(node0.hasMoreThanOneChild());
1805:       assertEquals((-1), node0.getLineno());
1806:       assertFalse(node0.isOr());
1807:       assertFalse(node0.isContinue());
1808:       assertEquals((-1), node0.getSourcePosition());
1809:       assertFalse(node0.isNumber());
1810:       assertFalse(node0.isLabelName());
1811:       assertFalse(node0.hasOneChild());
1812:       assertFalse(node0.isGetElem());
1813:       assertFalse(node0.isCall());
1814:       assertFalse(node0.isExprResult());
1815:       assertFalse(node0.isScript());
1816:       assertFalse(node0.isTypeOf());
1817:       assertFalse(node0.hasChildren());
1818:       assertFalse(node0.isDec());
1819:       assertFalse(node0.isAssign());
1820:       assertFalse(node0.isBlock());
1821:       assertFalse(node0.isWhile());
1822:       assertFalse(node0.isReturn());
1823:       assertEquals(0, node0.getChildCount());
1824:       assertFalse(node0.isNull());
1825:       assertFalse(node0.isBreak());
1826:       assertFalse(node0.isVoid());
1827:       assertFalse(node0.isName());
1828:       assertFalse(node0.isTrue());
1829:       assertFalse(node0.isParamList());
1830:       assertFalse(node0.isStringKey());
1831:       assertFalse(node0.isArrayLit());
1832:       assertFalse(node0.isNew());
1833:       assertFalse(node0.isAdd());
1834:       assertFalse(node0.isEmpty());
1835:       assertFalse(node0.isDefaultCase());
1836:       assertFalse(node0.isDo());
1837:       assertFalse(node0.isLabel());
1838:       assertFalse(node0.isAssignAdd());
1839:       assertFalse(node0.isVar());
1840:       assertFalse(boolean11);
1841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1842:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1843:       assertEquals(43, Node.IS_CONSTANT_NAME);
1844:       assertEquals(53, Node.INPUT_ID);
1845:       assertEquals(55, Node.INFERRED_FUNCTION);
1846:       assertEquals(8, Node.FLAG_NO_THROWS);
1847:       assertEquals(36, Node.QUOTED_PROP);
1848:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1849:       assertEquals(56, Node.CHANGE_TIME);
1850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1851:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1852:       assertEquals(37, Node.OPT_ARG_NAME);
1853:       assertEquals(48, Node.DIRECTIVES);
1854:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1855:       assertEquals(12, Node.COLUMN_BITS);
1856:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1857:       assertEquals(4095, Node.COLUMN_MASK);
1858:       assertEquals(30, Node.VAR_ARGS_NAME);
1859:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1860:       assertEquals(57, Node.LAST_PROP);
1861:       assertEquals(1, Node.DECR_FLAG);
1862:       assertEquals(49, Node.DIRECT_EVAL);
1863:       assertEquals(32, Node.INCRDECR_PROP);
1864:       assertEquals(52, Node.LENGTH);
1865:       assertEquals(57, Node.REFLECTED_OBJECT);
1866:       assertEquals(46, Node.IS_NAMESPACE);
1867:       assertEquals(54, Node.SLASH_V);
1868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1869:       assertEquals(50, Node.FREE_CALL);
1870:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1871:       assertEquals(47, Node.IS_DISPATCHER);
1872:       assertEquals(40, Node.ORIGINALNAME_PROP);
1873:       assertEquals(29, Node.JSDOC_INFO_PROP);
1874:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1875:       assertEquals(39, Node.EMPTY_BLOCK);
1876:       assertEquals(2, Node.POST_FLAG);
1877:       assertFalse(boolean11 == boolean1);
1878:       assertTrue(boolean11 == boolean9);
1879:       assertTrue(boolean11 == boolean10);
1880:       assertTrue(boolean11 == boolean7);
1881:       assertTrue(boolean11 == boolean3);
1882:       assertTrue(boolean11 == boolean5);
1883:       assertTrue(boolean11 == boolean4);
1884:       assertTrue(boolean11 == boolean6);
1885:       assertTrue(boolean11 == boolean8);
1886:       assertTrue(boolean11 == boolean0);
1887:       assertTrue(boolean11 == boolean2);
1888:       
1889:       Node node1 = Node.newString(30, "8IX=/g0 F~");
1890:       assertEquals(30, node1.getType());
1891:       assertFalse(node1.hasOneChild());
1892:       assertFalse(node1.hasChildren());
1893:       assertFalse(node1.isDec());
1894:       assertFalse(node1.isLabelName());
1895:       assertFalse(node1.isAssign());
1896:       assertFalse(node1.isTypeOf());
1897:       assertFalse(node1.isWith());
1898:       assertFalse(node1.isCast());
1899:       assertFalse(node1.isExprResult());
1900:       assertFalse(node1.isGetElem());
1901:       assertEquals((-1), node1.getLineno());
1902:       assertFalse(node1.isAssignAdd());
1903:       assertFalse(node1.isOr());
1904:       assertFalse(node1.isLabel());
1905:       assertFalse(node1.isDo());
1906:       assertFalse(node1.isAdd());
1907:       assertEquals((-1), node1.getCharno());
1908:       assertFalse(node1.isStringKey());
1909:       assertFalse(node1.isVar());
1910:       assertFalse(node1.isBlock());
1911:       assertFalse(node1.isHook());
1912:       assertFalse(node1.isSwitch());
1913:       assertFalse(node1.isInstanceOf());
1914:       assertFalse(node1.hasMoreThanOneChild());
1915:       assertFalse(node1.isParamList());
1916:       assertFalse(node1.isThis());
1917:       assertFalse(node1.isGetterDef());
1918:       assertFalse(node1.isNumber());
1919:       assertFalse(node1.isCase());
1920:       assertFalse(node1.isScript());
1921:       assertFalse(node1.isTry());
1922:       assertFalse(node1.isDebugger());
1923:       assertFalse(node1.isFor());
1924:       assertFalse(node1.isTrue());
1925:       assertFalse(node1.isIf());
1926:       assertFalse(node1.isDelProp());
1927:       assertFalse(node1.isRegExp());
1928:       assertFalse(node1.isFunction());
1929:       assertFalse(node1.isVoid());
1930:       assertFalse(node1.isCatch());
1931:       assertFalse(node1.isArrayLit());
1932:       assertFalse(node1.isIn());
1933:       assertEquals(0, node1.getChildCount());
1934:       assertFalse(node1.isNE());
1935:       assertFalse(node1.isNull());
1936:       assertFalse(node1.isDefaultCase());
1937:       assertFalse(node1.isEmpty());
1938:       assertFalse(node1.isSetterDef());
1939:       assertFalse(node1.isInc());
1940:       assertFalse(node1.isThrow());
1941:       assertTrue(node1.isNew());
1942:       assertFalse(node1.isBreak());
1943:       assertFalse(node1.isName());
1944:       assertFalse(node1.isFalse());
1945:       assertFalse(node1.isContinue());
1946:       assertFalse(node1.isCall());
1947:       assertFalse(node1.isObjectLit());
1948:       assertFalse(node1.isAnd());
1949:       assertFalse(node1.isComma());
1950:       assertFalse(node1.isReturn());
1951:       assertEquals((-1), node1.getSourcePosition());
1952:       assertFalse(node1.isWhile());
1953:       assertFalse(node1.isString());
1954:       assertFalse(node1.isNot());
1955:       assertFalse(node1.isGetProp());
1956:       assertNotSame(node1, node0);
1957:       assertNotNull(node1);
1958:       assertEquals(50, Node.FREE_CALL);
1959:       assertEquals(40, Node.ORIGINALNAME_PROP);
1960:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1961:       assertEquals(52, Node.LENGTH);
1962:       assertEquals(8, Node.FLAG_NO_THROWS);
1963:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1964:       assertEquals(48, Node.DIRECTIVES);
1965:       assertEquals(54, Node.SLASH_V);
1966:       assertEquals(57, Node.REFLECTED_OBJECT);
1967:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1968:       assertEquals(30, Node.VAR_ARGS_NAME);
1969:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1970:       assertEquals(36, Node.QUOTED_PROP);
1971:       assertEquals(55, Node.INFERRED_FUNCTION);
1972:       assertEquals(53, Node.INPUT_ID);
1973:       assertEquals(39, Node.EMPTY_BLOCK);
1974:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1975:       assertEquals(57, Node.LAST_PROP);
1976:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1977:       assertEquals(29, Node.JSDOC_INFO_PROP);
1978:       assertEquals(47, Node.IS_DISPATCHER);
1979:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1980:       assertEquals(2, Node.POST_FLAG);
1981:       assertEquals(37, Node.OPT_ARG_NAME);
1982:       assertEquals(43, Node.IS_CONSTANT_NAME);
1983:       assertEquals(56, Node.CHANGE_TIME);
1984:       assertEquals(46, Node.IS_NAMESPACE);
1985:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1986:       assertEquals(1, Node.DECR_FLAG);
1987:       assertEquals(49, Node.DIRECT_EVAL);
1988:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1989:       assertEquals(4095, Node.COLUMN_MASK);
1990:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1991:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1992:       assertEquals(12, Node.COLUMN_BITS);
1993:       assertEquals(32, Node.INCRDECR_PROP);
1994:       assertFalse(node1.equals((Object)node0));
1995:       
1996:       boolean boolean12 = node0.isEquivalentToTyped(node1);
1997:       assertFalse(node0.isIn());
1998:       assertFalse(node0.isCase());
1999:       assertFalse(node0.isString());
2000:       assertFalse(node0.isIf());
2001:       assertFalse(node0.isSwitch());
2002:       assertFalse(node0.isDelProp());
2003:       assertEquals((-1), node0.getCharno());
2004:       assertFalse(node0.isGetterDef());
2005:       assertFalse(node0.isNE());
2006:       assertFalse(node0.isHook());
2007:       assertFalse(node0.isTry());
2008:       assertFalse(node0.isRegExp());
2009:       assertFalse(node0.isThis());
2010:       assertFalse(node0.isComma());
2011:       assertFalse(node0.isFor());
2012:       assertFalse(node0.isObjectLit());
2013:       assertFalse(node0.isGetProp());
2014:       assertFalse(node0.isWith());
2015:       assertFalse(node0.isCatch());
2016:       assertFalse(node0.isInstanceOf());
2017:       assertFalse(node0.isDebugger());
2018:       assertFalse(node0.isNot());
2019:       assertFalse(node0.isAnd());
2020:       assertFalse(node0.isFalse());
2021:       assertFalse(node0.isInc());
2022:       assertFalse(node0.isCast());
2023:       assertFalse(node0.isSetterDef());
2024:       assertEquals(2468, node0.getType());
2025:       assertFalse(node0.isFunction());
2026:       assertFalse(node0.isThrow());
2027:       assertFalse(node0.hasMoreThanOneChild());
2028:       assertEquals((-1), node0.getLineno());
2029:       assertFalse(node0.isOr());
2030:       assertFalse(node0.isContinue());
2031:       assertEquals((-1), node0.getSourcePosition());
2032:       assertFalse(node0.isNumber());
2033:       assertFalse(node0.isLabelName());
2034:       assertFalse(node0.hasOneChild());
2035:       assertFalse(node0.isGetElem());
2036:       assertFalse(node0.isCall());
2037:       assertFalse(node0.isExprResult());
2038:       assertFalse(node0.isScript());
2039:       assertFalse(node0.isTypeOf());
2040:       assertFalse(node0.hasChildren());
2041:       assertFalse(node0.isDec());
2042:       assertFalse(node0.isAssign());
2043:       assertFalse(node0.isBlock());
2044:       assertFalse(node0.isWhile());
2045:       assertFalse(node0.isReturn());
2046:       assertEquals(0, node0.getChildCount());
2047:       assertFalse(node0.isNull());
2048:       assertFalse(node0.isBreak());
2049:       assertFalse(node0.isVoid());
2050:       assertFalse(node0.isName());
2051:       assertFalse(node0.isTrue());
2052:       assertFalse(node0.isParamList());
2053:       assertFalse(node0.isStringKey());
2054:       assertFalse(node0.isArrayLit());
2055:       assertFalse(node0.isNew());
2056:       assertFalse(node0.isAdd());
2057:       assertFalse(node0.isEmpty());
2058:       assertFalse(node0.isDefaultCase());
2059:       assertFalse(node0.isDo());
2060:       assertFalse(node0.isLabel());
2061:       assertFalse(node0.isAssignAdd());
2062:       assertFalse(node0.isVar());
2063:       assertEquals(30, node1.getType());
2064:       assertFalse(node1.hasOneChild());
2065:       assertFalse(node1.hasChildren());
2066:       assertFalse(node1.isDec());
2067:       assertFalse(node1.isLabelName());
2068:       assertFalse(node1.isAssign());
2069:       assertFalse(node1.isTypeOf());
2070:       assertFalse(node1.isWith());
2071:       assertFalse(node1.isCast());
2072:       assertFalse(node1.isExprResult());
2073:       assertFalse(node1.isGetElem());
2074:       assertEquals((-1), node1.getLineno());
2075:       assertFalse(node1.isAssignAdd());
2076:       assertFalse(node1.isOr());
2077:       assertFalse(node1.isLabel());
2078:       assertFalse(node1.isDo());
2079:       assertFalse(node1.isAdd());
2080:       assertEquals((-1), node1.getCharno());
2081:       assertFalse(node1.isStringKey());
2082:       assertFalse(node1.isVar());
2083:       assertFalse(node1.isBlock());
2084:       assertFalse(node1.isHook());
2085:       assertFalse(node1.isSwitch());
2086:       assertFalse(node1.isInstanceOf());
2087:       assertFalse(node1.hasMoreThanOneChild());
2088:       assertFalse(node1.isParamList());
2089:       assertFalse(node1.isThis());
2090:       assertFalse(node1.isGetterDef());
2091:       assertFalse(node1.isNumber());
2092:       assertFalse(node1.isCase());
2093:       assertFalse(node1.isScript());
2094:       assertFalse(node1.isTry());
2095:       assertFalse(node1.isDebugger());
2096:       assertFalse(node1.isFor());
2097:       assertFalse(node1.isTrue());
2098:       assertFalse(node1.isIf());
2099:       assertFalse(node1.isDelProp());
2100:       assertFalse(node1.isRegExp());
2101:       assertFalse(node1.isFunction());
2102:       assertFalse(node1.isVoid());
2103:       assertFalse(node1.isCatch());
2104:       assertFalse(node1.isArrayLit());
2105:       assertFalse(node1.isIn());
2106:       assertEquals(0, node1.getChildCount());
2107:       assertFalse(node1.isNE());
2108:       assertFalse(node1.isNull());
2109:       assertFalse(node1.isDefaultCase());
2110:       assertFalse(node1.isEmpty());
2111:       assertFalse(node1.isSetterDef());
2112:       assertFalse(node1.isInc());
2113:       assertFalse(node1.isThrow());
2114:       assertTrue(node1.isNew());
2115:       assertFalse(node1.isBreak());
2116:       assertFalse(node1.isName());
2117:       assertFalse(node1.isFalse());
2118:       assertFalse(node1.isContinue());
2119:       assertFalse(node1.isCall());
2120:       assertFalse(node1.isObjectLit());
2121:       assertFalse(node1.isAnd());
2122:       assertFalse(node1.isComma());
2123:       assertFalse(node1.isReturn());
2124:       assertEquals((-1), node1.getSourcePosition());
2125:       assertFalse(node1.isWhile());
2126:       assertFalse(node1.isString());
2127:       assertFalse(node1.isNot());
2128:       assertFalse(node1.isGetProp());
2129:       assertNotSame(node0, node1);
2130:       assertNotSame(node1, node0);
2131:       assertFalse(boolean12);
2132:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2134:       assertEquals(43, Node.IS_CONSTANT_NAME);
2135:       assertEquals(53, Node.INPUT_ID);
2136:       assertEquals(55, Node.INFERRED_FUNCTION);
2137:       assertEquals(8, Node.FLAG_NO_THROWS);
2138:       assertEquals(36, Node.QUOTED_PROP);
2139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2140:       assertEquals(56, Node.CHANGE_TIME);
2141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2142:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2143:       assertEquals(37, Node.OPT_ARG_NAME);
2144:       assertEquals(48, Node.DIRECTIVES);
2145:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2146:       assertEquals(12, Node.COLUMN_BITS);
2147:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2148:       assertEquals(4095, Node.COLUMN_MASK);
2149:       assertEquals(30, Node.VAR_ARGS_NAME);
2150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2151:       assertEquals(57, Node.LAST_PROP);
2152:       assertEquals(1, Node.DECR_FLAG);
2153:       assertEquals(49, Node.DIRECT_EVAL);
2154:       assertEquals(32, Node.INCRDECR_PROP);
2155:       assertEquals(52, Node.LENGTH);
2156:       assertEquals(57, Node.REFLECTED_OBJECT);
2157:       assertEquals(46, Node.IS_NAMESPACE);
2158:       assertEquals(54, Node.SLASH_V);
2159:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2160:       assertEquals(50, Node.FREE_CALL);
2161:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2162:       assertEquals(47, Node.IS_DISPATCHER);
2163:       assertEquals(40, Node.ORIGINALNAME_PROP);
2164:       assertEquals(29, Node.JSDOC_INFO_PROP);
2165:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2166:       assertEquals(39, Node.EMPTY_BLOCK);
2167:       assertEquals(2, Node.POST_FLAG);
2168:       assertEquals(50, Node.FREE_CALL);
2169:       assertEquals(40, Node.ORIGINALNAME_PROP);
2170:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2171:       assertEquals(52, Node.LENGTH);
2172:       assertEquals(8, Node.FLAG_NO_THROWS);
2173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2174:       assertEquals(48, Node.DIRECTIVES);
2175:       assertEquals(54, Node.SLASH_V);
2176:       assertEquals(57, Node.REFLECTED_OBJECT);
2177:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2178:       assertEquals(30, Node.VAR_ARGS_NAME);
2179:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2180:       assertEquals(36, Node.QUOTED_PROP);
2181:       assertEquals(55, Node.INFERRED_FUNCTION);
2182:       assertEquals(53, Node.INPUT_ID);
2183:       assertEquals(39, Node.EMPTY_BLOCK);
2184:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2185:       assertEquals(57, Node.LAST_PROP);
2186:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2187:       assertEquals(29, Node.JSDOC_INFO_PROP);
2188:       assertEquals(47, Node.IS_DISPATCHER);
2189:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2190:       assertEquals(2, Node.POST_FLAG);
2191:       assertEquals(37, Node.OPT_ARG_NAME);
2192:       assertEquals(43, Node.IS_CONSTANT_NAME);
2193:       assertEquals(56, Node.CHANGE_TIME);
2194:       assertEquals(46, Node.IS_NAMESPACE);
2195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2196:       assertEquals(1, Node.DECR_FLAG);
2197:       assertEquals(49, Node.DIRECT_EVAL);
2198:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2199:       assertEquals(4095, Node.COLUMN_MASK);
2200:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2202:       assertEquals(12, Node.COLUMN_BITS);
2203:       assertEquals(32, Node.INCRDECR_PROP);
2204:       assertFalse(node0.equals((Object)node1));
2205:       assertFalse(node1.equals((Object)node0));
2206:       assertTrue(boolean12 == boolean4);
2207:       assertTrue(boolean12 == boolean6);
2208:       assertTrue(boolean12 == boolean9);
2209:       assertTrue(boolean12 == boolean7);
2210:       assertTrue(boolean12 == boolean5);
2211:       assertTrue(boolean12 == boolean3);
2212:       assertFalse(boolean12 == boolean1);
2213:       assertTrue(boolean12 == boolean11);
2214:       assertTrue(boolean12 == boolean2);
2215:       assertTrue(boolean12 == boolean8);
2216:       assertTrue(boolean12 == boolean10);
2217:       assertTrue(boolean12 == boolean0);
2218:   }
2219: }
RegularFileObject[/tmp/EvoSuite_49_1628255781763/com/google/javascript/rhino/Node_49_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:22 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_49_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_49_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_49_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:22.491 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotNull(node0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);

boolean boolean0 = node0.isOnlyModifiesThisCall();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean0);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);

node0.putProp(2769, "8IX=/g0 F~");
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);

HashSet<String> hashSet0 = new HashSet<String>();
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());
assertNotNull(hashSet0);
assertFalse(hashSet0.contains("8IX=/g0 F~"));

boolean boolean1 = hashSet0.add((String) null);
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);

boolean boolean2 = hashSet0.add((String) null);
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertFalse(boolean2);
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

node0.removeProp(0);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);

boolean boolean3 = hashSet0.remove("Jcu{'f75U");
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertFalse(boolean3);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);

node0.setDirectives(hashSet0);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);

node0.addSuppression("Jcu{'f75U");
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);

boolean boolean4 = node0.isOr();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean4);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);

boolean boolean5 = node0.isAnd();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean5);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertFalse(boolean5 == boolean1);
assertTrue(boolean5 == boolean2);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags2.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
assertEquals(31, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertEquals(24, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags5.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertEquals(24, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags5);

boolean boolean6 = node0.isVarArgs();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean6);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertFalse(boolean6 == boolean1);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);

boolean boolean7 = node0.isVarArgs();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean7);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean6);
assertTrue(boolean7 == boolean2);
assertTrue(boolean7 == boolean3);
assertFalse(boolean7 == boolean1);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean0);

node0.putIntProp(46, 30);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);

boolean boolean8 = node0.isAssign();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean8);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertFalse(boolean8 == boolean1);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean0);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean2);
assertTrue(boolean8 == boolean7);

boolean boolean9 = node0.isSyntheticBlock();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean9);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertTrue(boolean9 == boolean3);
assertTrue(boolean9 == boolean0);
assertFalse(boolean9 == boolean1);
assertTrue(boolean9 == boolean2);
assertTrue(boolean9 == boolean5);
assertTrue(boolean9 == boolean7);
assertTrue(boolean9 == boolean8);
assertTrue(boolean9 == boolean6);
assertTrue(boolean9 == boolean4);

boolean boolean10 = node0.isScript();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean10);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertTrue(boolean10 == boolean9);
assertTrue(boolean10 == boolean3);
assertTrue(boolean10 == boolean8);
assertTrue(boolean10 == boolean2);
assertFalse(boolean10 == boolean1);
assertTrue(boolean10 == boolean0);
assertTrue(boolean10 == boolean4);
assertTrue(boolean10 == boolean5);
assertTrue(boolean10 == boolean6);
assertTrue(boolean10 == boolean7);

boolean boolean11 = node0.isStringKey();
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertFalse(boolean11);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertFalse(boolean11 == boolean1);
assertTrue(boolean11 == boolean9);
assertTrue(boolean11 == boolean10);
assertTrue(boolean11 == boolean7);
assertTrue(boolean11 == boolean3);
assertTrue(boolean11 == boolean5);
assertTrue(boolean11 == boolean4);
assertTrue(boolean11 == boolean6);
assertTrue(boolean11 == boolean8);
assertTrue(boolean11 == boolean0);
assertTrue(boolean11 == boolean2);

Node node1 = Node.newString(30, "8IX=/g0 F~");
assertEquals(30, node1.getType());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node1.equals((Object)node0));

boolean boolean12 = node0.isEquivalentToTyped(node1);
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isSwitch());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFor());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertEquals(2468, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(30, node1.getType());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isParamList());
assertFalse(node1.isThis());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isCase());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isRegExp());
assertFalse(node1.isFunction());
assertFalse(node1.isVoid());
assertFalse(node1.isCatch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIn());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNE());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isEmpty());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertTrue(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isCall());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isComma());
assertFalse(node1.isReturn());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(boolean12);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean12 == boolean4);
assertTrue(boolean12 == boolean6);
assertTrue(boolean12 == boolean9);
assertTrue(boolean12 == boolean7);
assertTrue(boolean12 == boolean5);
assertTrue(boolean12 == boolean3);
assertFalse(boolean12 == boolean1);
assertTrue(boolean12 == boolean11);
assertTrue(boolean12 == boolean2);
assertTrue(boolean12 == boolean8);
assertTrue(boolean12 == boolean10);
assertTrue(boolean12 == boolean0);


[MASTER] 13:16:23.636 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_57_1628255783234/com/google/javascript/rhino/Node_57_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_57_1628255783234/com/google/javascript/rhino/Node_57_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:23.636 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:23.636 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:23.638 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 858
[MASTER] 13:16:23.640 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_57_1628255783234/com/google/javascript/rhino/Node_57_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:23 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
14: import com.google.javascript.rhino.jstype.EnumElementType;
15: import com.google.javascript.rhino.jstype.EnumType;
16: import com.google.javascript.rhino.jstype.FunctionType;
17: import com.google.javascript.rhino.jstype.JSType;
18: import com.google.javascript.rhino.jstype.JSTypeNative;
19: import com.google.javascript.rhino.jstype.JSTypeRegistry;
20: import com.google.javascript.rhino.jstype.ObjectType;
21: import com.google.javascript.rhino.jstype.TemplateType;
22: import java.util.HashSet;
23: import org.evosuite.runtime.EvoRunner;
24: import org.evosuite.runtime.EvoRunnerParameters;
25: import org.junit.runner.RunWith;
26: 
27: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
28: public class Node_57_tmp__ESTest extends Node_57_tmp__ESTest_scaffolding {
29: 
30:   @Test(timeout = 4000)
31:   public void test0()  throws Throwable  {
32:       Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
33:       assertFalse(node0.isNull());
34:       assertFalse(node0.isStringKey());
35:       assertFalse(node0.isParamList());
36:       assertFalse(node0.isCall());
37:       assertFalse(node0.isSetterDef());
38:       assertFalse(node0.isName());
39:       assertEquals(0, node0.getChildCount());
40:       assertFalse(node0.isVar());
41:       assertFalse(node0.isCatch());
42:       assertFalse(node0.isBlock());
43:       assertFalse(node0.isDefaultCase());
44:       assertFalse(node0.isVoid());
45:       assertFalse(node0.isDo());
46:       assertFalse(node0.isNew());
47:       assertFalse(node0.isAdd());
48:       assertFalse(node0.isTrue());
49:       assertFalse(node0.isOr());
50:       assertFalse(node0.isIf());
51:       assertFalse(node0.isGetterDef());
52:       assertFalse(node0.isNumber());
53:       assertFalse(node0.isEmpty());
54:       assertFalse(node0.isNE());
55:       assertFalse(node0.isFor());
56:       assertFalse(node0.isArrayLit());
57:       assertFalse(node0.isLabelName());
58:       assertFalse(node0.hasOneChild());
59:       assertEquals((-1), node0.getLineno());
60:       assertFalse(node0.isAssignAdd());
61:       assertFalse(node0.hasMoreThanOneChild());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isScript());
65:       assertFalse(node0.isSwitch());
66:       assertFalse(node0.isCase());
67:       assertFalse(node0.isTry());
68:       assertEquals((-1), node0.getCharno());
69:       assertFalse(node0.isBreak());
70:       assertFalse(node0.isGetProp());
71:       assertFalse(node0.isHook());
72:       assertFalse(node0.isInstanceOf());
73:       assertFalse(node0.isThrow());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isFalse());
76:       assertFalse(node0.isComma());
77:       assertFalse(node0.isWith());
78:       assertFalse(node0.isExprResult());
79:       assertFalse(node0.isInc());
80:       assertFalse(node0.isIn());
81:       assertFalse(node0.isDelProp());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isReturn());
85:       assertFalse(node0.isCast());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isFunction());
88:       assertFalse(node0.isAssign());
89:       assertFalse(node0.isTypeOf());
90:       assertFalse(node0.isDec());
91:       assertEquals(2468, node0.getType());
92:       assertFalse(node0.isWhile());
93:       assertFalse(node0.isString());
94:       assertFalse(node0.isAnd());
95:       assertFalse(node0.isObjectLit());
96:       assertFalse(node0.isDebugger());
97:       assertFalse(node0.isNot());
98:       assertEquals((-1), node0.getSourcePosition());
99:       assertNotNull(node0);
100:       assertEquals(37, Node.OPT_ARG_NAME);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(32, Node.INCRDECR_PROP);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
105:       assertEquals(47, Node.IS_DISPATCHER);
106:       assertEquals(12, Node.COLUMN_BITS);
107:       assertEquals(46, Node.IS_NAMESPACE);
108:       assertEquals(30, Node.VAR_ARGS_NAME);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(57, Node.LAST_PROP);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(15, Node.NO_SIDE_EFFECTS);
119:       assertEquals(55, Node.INFERRED_FUNCTION);
120:       assertEquals(39, Node.EMPTY_BLOCK);
121:       assertEquals(29, Node.JSDOC_INFO_PROP);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertEquals(8, Node.FLAG_NO_THROWS);
124:       assertEquals(48, Node.DIRECTIVES);
125:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
126:       assertEquals(4095, Node.COLUMN_MASK);
127:       assertEquals(40, Node.ORIGINALNAME_PROP);
128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(54, Node.SLASH_V);
132:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
133:       assertEquals(1, Node.DECR_FLAG);
134:       assertEquals(50, Node.FREE_CALL);
135:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
136:       
137:       boolean boolean0 = node0.isOnlyModifiesThisCall();
138:       assertFalse(node0.isNull());
139:       assertFalse(node0.isStringKey());
140:       assertFalse(node0.isParamList());
141:       assertFalse(node0.isCall());
142:       assertFalse(node0.isSetterDef());
143:       assertFalse(node0.isName());
144:       assertEquals(0, node0.getChildCount());
145:       assertFalse(node0.isVar());
146:       assertFalse(node0.isCatch());
147:       assertFalse(node0.isBlock());
148:       assertFalse(node0.isDefaultCase());
149:       assertFalse(node0.isVoid());
150:       assertFalse(node0.isDo());
151:       assertFalse(node0.isNew());
152:       assertFalse(node0.isAdd());
153:       assertFalse(node0.isTrue());
154:       assertFalse(node0.isOr());
155:       assertFalse(node0.isIf());
156:       assertFalse(node0.isGetterDef());
157:       assertFalse(node0.isNumber());
158:       assertFalse(node0.isEmpty());
159:       assertFalse(node0.isNE());
160:       assertFalse(node0.isFor());
161:       assertFalse(node0.isArrayLit());
162:       assertFalse(node0.isLabelName());
163:       assertFalse(node0.hasOneChild());
164:       assertEquals((-1), node0.getLineno());
165:       assertFalse(node0.isAssignAdd());
166:       assertFalse(node0.hasMoreThanOneChild());
167:       assertFalse(node0.isRegExp());
168:       assertFalse(node0.isLabel());
169:       assertFalse(node0.isScript());
170:       assertFalse(node0.isSwitch());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isTry());
173:       assertEquals((-1), node0.getCharno());
174:       assertFalse(node0.isBreak());
175:       assertFalse(node0.isGetProp());
176:       assertFalse(node0.isHook());
177:       assertFalse(node0.isInstanceOf());
178:       assertFalse(node0.isThrow());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isFalse());
181:       assertFalse(node0.isComma());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isExprResult());
184:       assertFalse(node0.isInc());
185:       assertFalse(node0.isIn());
186:       assertFalse(node0.isDelProp());
187:       assertFalse(node0.hasChildren());
188:       assertFalse(node0.isGetElem());
189:       assertFalse(node0.isReturn());
190:       assertFalse(node0.isCast());
191:       assertFalse(node0.isContinue());
192:       assertFalse(node0.isFunction());
193:       assertFalse(node0.isAssign());
194:       assertFalse(node0.isTypeOf());
195:       assertFalse(node0.isDec());
196:       assertEquals(2468, node0.getType());
197:       assertFalse(node0.isWhile());
198:       assertFalse(node0.isString());
199:       assertFalse(node0.isAnd());
200:       assertFalse(node0.isObjectLit());
201:       assertFalse(node0.isDebugger());
202:       assertFalse(node0.isNot());
203:       assertEquals((-1), node0.getSourcePosition());
204:       assertFalse(boolean0);
205:       assertEquals(37, Node.OPT_ARG_NAME);
206:       assertEquals(2, Node.POST_FLAG);
207:       assertEquals(32, Node.INCRDECR_PROP);
208:       assertEquals(56, Node.CHANGE_TIME);
209:       assertEquals(51, Node.STATIC_SOURCE_FILE);
210:       assertEquals(47, Node.IS_DISPATCHER);
211:       assertEquals(12, Node.COLUMN_BITS);
212:       assertEquals(46, Node.IS_NAMESPACE);
213:       assertEquals(30, Node.VAR_ARGS_NAME);
214:       assertEquals(49, Node.DIRECT_EVAL);
215:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
216:       assertEquals(53, Node.INPUT_ID);
217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(36, Node.QUOTED_PROP);
220:       assertEquals(57, Node.REFLECTED_OBJECT);
221:       assertEquals(57, Node.LAST_PROP);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(15, Node.NO_SIDE_EFFECTS);
224:       assertEquals(55, Node.INFERRED_FUNCTION);
225:       assertEquals(39, Node.EMPTY_BLOCK);
226:       assertEquals(29, Node.JSDOC_INFO_PROP);
227:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
228:       assertEquals(8, Node.FLAG_NO_THROWS);
229:       assertEquals(48, Node.DIRECTIVES);
230:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
231:       assertEquals(4095, Node.COLUMN_MASK);
232:       assertEquals(40, Node.ORIGINALNAME_PROP);
233:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(54, Node.SLASH_V);
237:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(50, Node.FREE_CALL);
240:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
241:       
242:       node0.putProp(2769, "8IX=/g0 F~");
243:       assertFalse(node0.isNull());
244:       assertFalse(node0.isStringKey());
245:       assertFalse(node0.isParamList());
246:       assertFalse(node0.isCall());
247:       assertFalse(node0.isSetterDef());
248:       assertFalse(node0.isName());
249:       assertEquals(0, node0.getChildCount());
250:       assertFalse(node0.isVar());
251:       assertFalse(node0.isCatch());
252:       assertFalse(node0.isBlock());
253:       assertFalse(node0.isDefaultCase());
254:       assertFalse(node0.isVoid());
255:       assertFalse(node0.isDo());
256:       assertFalse(node0.isNew());
257:       assertFalse(node0.isAdd());
258:       assertFalse(node0.isTrue());
259:       assertFalse(node0.isOr());
260:       assertFalse(node0.isIf());
261:       assertFalse(node0.isGetterDef());
262:       assertFalse(node0.isNumber());
263:       assertFalse(node0.isEmpty());
264:       assertFalse(node0.isNE());
265:       assertFalse(node0.isFor());
266:       assertFalse(node0.isArrayLit());
267:       assertFalse(node0.isLabelName());
268:       assertFalse(node0.hasOneChild());
269:       assertEquals((-1), node0.getLineno());
270:       assertFalse(node0.isAssignAdd());
271:       assertFalse(node0.hasMoreThanOneChild());
272:       assertFalse(node0.isRegExp());
273:       assertFalse(node0.isLabel());
274:       assertFalse(node0.isScript());
275:       assertFalse(node0.isSwitch());
276:       assertFalse(node0.isCase());
277:       assertFalse(node0.isTry());
278:       assertEquals((-1), node0.getCharno());
279:       assertFalse(node0.isBreak());
280:       assertFalse(node0.isGetProp());
281:       assertFalse(node0.isHook());
282:       assertFalse(node0.isInstanceOf());
283:       assertFalse(node0.isThrow());
284:       assertFalse(node0.isThis());
285:       assertFalse(node0.isFalse());
286:       assertFalse(node0.isComma());
287:       assertFalse(node0.isWith());
288:       assertFalse(node0.isExprResult());
289:       assertFalse(node0.isInc());
290:       assertFalse(node0.isIn());
291:       assertFalse(node0.isDelProp());
292:       assertFalse(node0.hasChildren());
293:       assertFalse(node0.isGetElem());
294:       assertFalse(node0.isReturn());
295:       assertFalse(node0.isCast());
296:       assertFalse(node0.isContinue());
297:       assertFalse(node0.isFunction());
298:       assertFalse(node0.isAssign());
299:       assertFalse(node0.isTypeOf());
300:       assertFalse(node0.isDec());
301:       assertEquals(2468, node0.getType());
302:       assertFalse(node0.isWhile());
303:       assertFalse(node0.isString());
304:       assertFalse(node0.isAnd());
305:       assertFalse(node0.isObjectLit());
306:       assertFalse(node0.isDebugger());
307:       assertFalse(node0.isNot());
308:       assertEquals((-1), node0.getSourcePosition());
309:       assertEquals(37, Node.OPT_ARG_NAME);
310:       assertEquals(2, Node.POST_FLAG);
311:       assertEquals(32, Node.INCRDECR_PROP);
312:       assertEquals(56, Node.CHANGE_TIME);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertEquals(47, Node.IS_DISPATCHER);
315:       assertEquals(12, Node.COLUMN_BITS);
316:       assertEquals(46, Node.IS_NAMESPACE);
317:       assertEquals(30, Node.VAR_ARGS_NAME);
318:       assertEquals(49, Node.DIRECT_EVAL);
319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
320:       assertEquals(53, Node.INPUT_ID);
321:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
322:       assertEquals(52, Node.LENGTH);
323:       assertEquals(36, Node.QUOTED_PROP);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(57, Node.LAST_PROP);
326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
327:       assertEquals(15, Node.NO_SIDE_EFFECTS);
328:       assertEquals(55, Node.INFERRED_FUNCTION);
329:       assertEquals(39, Node.EMPTY_BLOCK);
330:       assertEquals(29, Node.JSDOC_INFO_PROP);
331:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
332:       assertEquals(8, Node.FLAG_NO_THROWS);
333:       assertEquals(48, Node.DIRECTIVES);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(4095, Node.COLUMN_MASK);
336:       assertEquals(40, Node.ORIGINALNAME_PROP);
337:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
339:       assertEquals(43, Node.IS_CONSTANT_NAME);
340:       assertEquals(54, Node.SLASH_V);
341:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
342:       assertEquals(1, Node.DECR_FLAG);
343:       assertEquals(50, Node.FREE_CALL);
344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
345:       
346:       HashSet<String> hashSet0 = new HashSet<String>();
347:       assertTrue(hashSet0.isEmpty());
348:       assertEquals(0, hashSet0.size());
349:       assertNotNull(hashSet0);
350:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
351:       
352:       boolean boolean1 = hashSet0.add((String) null);
353:       assertEquals(1, hashSet0.size());
354:       assertFalse(hashSet0.isEmpty());
355:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
356:       assertTrue(boolean1);
357:       assertFalse(boolean1 == boolean0);
358:       
359:       node0.removeProp(0);
360:       assertFalse(node0.isNull());
361:       assertFalse(node0.isStringKey());
362:       assertFalse(node0.isParamList());
363:       assertFalse(node0.isCall());
364:       assertFalse(node0.isSetterDef());
365:       assertFalse(node0.isName());
366:       assertEquals(0, node0.getChildCount());
367:       assertFalse(node0.isVar());
368:       assertFalse(node0.isCatch());
369:       assertFalse(node0.isBlock());
370:       assertFalse(node0.isDefaultCase());
371:       assertFalse(node0.isVoid());
372:       assertFalse(node0.isDo());
373:       assertFalse(node0.isNew());
374:       assertFalse(node0.isAdd());
375:       assertFalse(node0.isTrue());
376:       assertFalse(node0.isOr());
377:       assertFalse(node0.isIf());
378:       assertFalse(node0.isGetterDef());
379:       assertFalse(node0.isNumber());
380:       assertFalse(node0.isEmpty());
381:       assertFalse(node0.isNE());
382:       assertFalse(node0.isFor());
383:       assertFalse(node0.isArrayLit());
384:       assertFalse(node0.isLabelName());
385:       assertFalse(node0.hasOneChild());
386:       assertEquals((-1), node0.getLineno());
387:       assertFalse(node0.isAssignAdd());
388:       assertFalse(node0.hasMoreThanOneChild());
389:       assertFalse(node0.isRegExp());
390:       assertFalse(node0.isLabel());
391:       assertFalse(node0.isScript());
392:       assertFalse(node0.isSwitch());
393:       assertFalse(node0.isCase());
394:       assertFalse(node0.isTry());
395:       assertEquals((-1), node0.getCharno());
396:       assertFalse(node0.isBreak());
397:       assertFalse(node0.isGetProp());
398:       assertFalse(node0.isHook());
399:       assertFalse(node0.isInstanceOf());
400:       assertFalse(node0.isThrow());
401:       assertFalse(node0.isThis());
402:       assertFalse(node0.isFalse());
403:       assertFalse(node0.isComma());
404:       assertFalse(node0.isWith());
405:       assertFalse(node0.isExprResult());
406:       assertFalse(node0.isInc());
407:       assertFalse(node0.isIn());
408:       assertFalse(node0.isDelProp());
409:       assertFalse(node0.hasChildren());
410:       assertFalse(node0.isGetElem());
411:       assertFalse(node0.isReturn());
412:       assertFalse(node0.isCast());
413:       assertFalse(node0.isContinue());
414:       assertFalse(node0.isFunction());
415:       assertFalse(node0.isAssign());
416:       assertFalse(node0.isTypeOf());
417:       assertFalse(node0.isDec());
418:       assertEquals(2468, node0.getType());
419:       assertFalse(node0.isWhile());
420:       assertFalse(node0.isString());
421:       assertFalse(node0.isAnd());
422:       assertFalse(node0.isObjectLit());
423:       assertFalse(node0.isDebugger());
424:       assertFalse(node0.isNot());
425:       assertEquals((-1), node0.getSourcePosition());
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(2, Node.POST_FLAG);
428:       assertEquals(32, Node.INCRDECR_PROP);
429:       assertEquals(56, Node.CHANGE_TIME);
430:       assertEquals(51, Node.STATIC_SOURCE_FILE);
431:       assertEquals(47, Node.IS_DISPATCHER);
432:       assertEquals(12, Node.COLUMN_BITS);
433:       assertEquals(46, Node.IS_NAMESPACE);
434:       assertEquals(30, Node.VAR_ARGS_NAME);
435:       assertEquals(49, Node.DIRECT_EVAL);
436:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
437:       assertEquals(53, Node.INPUT_ID);
438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
439:       assertEquals(52, Node.LENGTH);
440:       assertEquals(36, Node.QUOTED_PROP);
441:       assertEquals(57, Node.REFLECTED_OBJECT);
442:       assertEquals(57, Node.LAST_PROP);
443:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
444:       assertEquals(15, Node.NO_SIDE_EFFECTS);
445:       assertEquals(55, Node.INFERRED_FUNCTION);
446:       assertEquals(39, Node.EMPTY_BLOCK);
447:       assertEquals(29, Node.JSDOC_INFO_PROP);
448:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertEquals(48, Node.DIRECTIVES);
451:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
452:       assertEquals(4095, Node.COLUMN_MASK);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
455:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
456:       assertEquals(43, Node.IS_CONSTANT_NAME);
457:       assertEquals(54, Node.SLASH_V);
458:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
459:       assertEquals(1, Node.DECR_FLAG);
460:       assertEquals(50, Node.FREE_CALL);
461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:       
463:       boolean boolean2 = hashSet0.remove("Jcu{'f75U");
464:       assertEquals(1, hashSet0.size());
465:       assertFalse(hashSet0.isEmpty());
466:       assertFalse(hashSet0.contains("Jcu{'f75U"));
467:       assertFalse(boolean2);
468:       assertTrue(boolean2 == boolean0);
469:       assertFalse(boolean2 == boolean1);
470:       
471:       node0.setDirectives(hashSet0);
472:       assertFalse(node0.isNull());
473:       assertFalse(node0.isStringKey());
474:       assertFalse(node0.isParamList());
475:       assertFalse(node0.isCall());
476:       assertFalse(node0.isSetterDef());
477:       assertFalse(node0.isName());
478:       assertEquals(0, node0.getChildCount());
479:       assertFalse(node0.isVar());
480:       assertFalse(node0.isCatch());
481:       assertFalse(node0.isBlock());
482:       assertFalse(node0.isDefaultCase());
483:       assertFalse(node0.isVoid());
484:       assertFalse(node0.isDo());
485:       assertFalse(node0.isNew());
486:       assertFalse(node0.isAdd());
487:       assertFalse(node0.isTrue());
488:       assertFalse(node0.isOr());
489:       assertFalse(node0.isIf());
490:       assertFalse(node0.isGetterDef());
491:       assertFalse(node0.isNumber());
492:       assertFalse(node0.isEmpty());
493:       assertFalse(node0.isNE());
494:       assertFalse(node0.isFor());
495:       assertFalse(node0.isArrayLit());
496:       assertFalse(node0.isLabelName());
497:       assertFalse(node0.hasOneChild());
498:       assertEquals((-1), node0.getLineno());
499:       assertFalse(node0.isAssignAdd());
500:       assertFalse(node0.hasMoreThanOneChild());
501:       assertFalse(node0.isRegExp());
502:       assertFalse(node0.isLabel());
503:       assertFalse(node0.isScript());
504:       assertFalse(node0.isSwitch());
505:       assertFalse(node0.isCase());
506:       assertFalse(node0.isTry());
507:       assertEquals((-1), node0.getCharno());
508:       assertFalse(node0.isBreak());
509:       assertFalse(node0.isGetProp());
510:       assertFalse(node0.isHook());
511:       assertFalse(node0.isInstanceOf());
512:       assertFalse(node0.isThrow());
513:       assertFalse(node0.isThis());
514:       assertFalse(node0.isFalse());
515:       assertFalse(node0.isComma());
516:       assertFalse(node0.isWith());
517:       assertFalse(node0.isExprResult());
518:       assertFalse(node0.isInc());
519:       assertFalse(node0.isIn());
520:       assertFalse(node0.isDelProp());
521:       assertFalse(node0.hasChildren());
522:       assertFalse(node0.isGetElem());
523:       assertFalse(node0.isReturn());
524:       assertFalse(node0.isCast());
525:       assertFalse(node0.isContinue());
526:       assertFalse(node0.isFunction());
527:       assertFalse(node0.isAssign());
528:       assertFalse(node0.isTypeOf());
529:       assertFalse(node0.isDec());
530:       assertEquals(2468, node0.getType());
531:       assertFalse(node0.isWhile());
532:       assertFalse(node0.isString());
533:       assertFalse(node0.isAnd());
534:       assertFalse(node0.isObjectLit());
535:       assertFalse(node0.isDebugger());
536:       assertFalse(node0.isNot());
537:       assertEquals((-1), node0.getSourcePosition());
538:       assertEquals(1, hashSet0.size());
539:       assertFalse(hashSet0.isEmpty());
540:       assertFalse(hashSet0.contains("Jcu{'f75U"));
541:       assertEquals(37, Node.OPT_ARG_NAME);
542:       assertEquals(2, Node.POST_FLAG);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(56, Node.CHANGE_TIME);
545:       assertEquals(51, Node.STATIC_SOURCE_FILE);
546:       assertEquals(47, Node.IS_DISPATCHER);
547:       assertEquals(12, Node.COLUMN_BITS);
548:       assertEquals(46, Node.IS_NAMESPACE);
549:       assertEquals(30, Node.VAR_ARGS_NAME);
550:       assertEquals(49, Node.DIRECT_EVAL);
551:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
552:       assertEquals(53, Node.INPUT_ID);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(52, Node.LENGTH);
555:       assertEquals(36, Node.QUOTED_PROP);
556:       assertEquals(57, Node.REFLECTED_OBJECT);
557:       assertEquals(57, Node.LAST_PROP);
558:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
560:       assertEquals(55, Node.INFERRED_FUNCTION);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(29, Node.JSDOC_INFO_PROP);
563:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
564:       assertEquals(8, Node.FLAG_NO_THROWS);
565:       assertEquals(48, Node.DIRECTIVES);
566:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
567:       assertEquals(4095, Node.COLUMN_MASK);
568:       assertEquals(40, Node.ORIGINALNAME_PROP);
569:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
570:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
571:       assertEquals(43, Node.IS_CONSTANT_NAME);
572:       assertEquals(54, Node.SLASH_V);
573:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
574:       assertEquals(1, Node.DECR_FLAG);
575:       assertEquals(50, Node.FREE_CALL);
576:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
577:       
578:       node0.addSuppression("Jcu{'f75U");
579:       assertFalse(node0.isNull());
580:       assertFalse(node0.isStringKey());
581:       assertFalse(node0.isParamList());
582:       assertFalse(node0.isCall());
583:       assertFalse(node0.isSetterDef());
584:       assertFalse(node0.isName());
585:       assertEquals(0, node0.getChildCount());
586:       assertFalse(node0.isVar());
587:       assertFalse(node0.isCatch());
588:       assertFalse(node0.isBlock());
589:       assertFalse(node0.isDefaultCase());
590:       assertFalse(node0.isVoid());
591:       assertFalse(node0.isDo());
592:       assertFalse(node0.isNew());
593:       assertFalse(node0.isAdd());
594:       assertFalse(node0.isTrue());
595:       assertFalse(node0.isOr());
596:       assertFalse(node0.isIf());
597:       assertFalse(node0.isGetterDef());
598:       assertFalse(node0.isNumber());
599:       assertFalse(node0.isEmpty());
600:       assertFalse(node0.isNE());
601:       assertFalse(node0.isFor());
602:       assertFalse(node0.isArrayLit());
603:       assertFalse(node0.isLabelName());
604:       assertFalse(node0.hasOneChild());
605:       assertEquals((-1), node0.getLineno());
606:       assertFalse(node0.isAssignAdd());
607:       assertFalse(node0.hasMoreThanOneChild());
608:       assertFalse(node0.isRegExp());
609:       assertFalse(node0.isLabel());
610:       assertFalse(node0.isScript());
611:       assertFalse(node0.isSwitch());
612:       assertFalse(node0.isCase());
613:       assertFalse(node0.isTry());
614:       assertEquals((-1), node0.getCharno());
615:       assertFalse(node0.isBreak());
616:       assertFalse(node0.isGetProp());
617:       assertFalse(node0.isHook());
618:       assertFalse(node0.isInstanceOf());
619:       assertFalse(node0.isThrow());
620:       assertFalse(node0.isThis());
621:       assertFalse(node0.isFalse());
622:       assertFalse(node0.isComma());
623:       assertFalse(node0.isWith());
624:       assertFalse(node0.isExprResult());
625:       assertFalse(node0.isInc());
626:       assertFalse(node0.isIn());
627:       assertFalse(node0.isDelProp());
628:       assertFalse(node0.hasChildren());
629:       assertFalse(node0.isGetElem());
630:       assertFalse(node0.isReturn());
631:       assertFalse(node0.isCast());
632:       assertFalse(node0.isContinue());
633:       assertFalse(node0.isFunction());
634:       assertFalse(node0.isAssign());
635:       assertFalse(node0.isTypeOf());
636:       assertFalse(node0.isDec());
637:       assertEquals(2468, node0.getType());
638:       assertFalse(node0.isWhile());
639:       assertFalse(node0.isString());
640:       assertFalse(node0.isAnd());
641:       assertFalse(node0.isObjectLit());
642:       assertFalse(node0.isDebugger());
643:       assertFalse(node0.isNot());
644:       assertEquals((-1), node0.getSourcePosition());
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(2, Node.POST_FLAG);
647:       assertEquals(32, Node.INCRDECR_PROP);
648:       assertEquals(56, Node.CHANGE_TIME);
649:       assertEquals(51, Node.STATIC_SOURCE_FILE);
650:       assertEquals(47, Node.IS_DISPATCHER);
651:       assertEquals(12, Node.COLUMN_BITS);
652:       assertEquals(46, Node.IS_NAMESPACE);
653:       assertEquals(30, Node.VAR_ARGS_NAME);
654:       assertEquals(49, Node.DIRECT_EVAL);
655:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
656:       assertEquals(53, Node.INPUT_ID);
657:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
658:       assertEquals(52, Node.LENGTH);
659:       assertEquals(36, Node.QUOTED_PROP);
660:       assertEquals(57, Node.REFLECTED_OBJECT);
661:       assertEquals(57, Node.LAST_PROP);
662:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
663:       assertEquals(15, Node.NO_SIDE_EFFECTS);
664:       assertEquals(55, Node.INFERRED_FUNCTION);
665:       assertEquals(39, Node.EMPTY_BLOCK);
666:       assertEquals(29, Node.JSDOC_INFO_PROP);
667:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
668:       assertEquals(8, Node.FLAG_NO_THROWS);
669:       assertEquals(48, Node.DIRECTIVES);
670:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
671:       assertEquals(4095, Node.COLUMN_MASK);
672:       assertEquals(40, Node.ORIGINALNAME_PROP);
673:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
674:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
675:       assertEquals(43, Node.IS_CONSTANT_NAME);
676:       assertEquals(54, Node.SLASH_V);
677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
678:       assertEquals(1, Node.DECR_FLAG);
679:       assertEquals(50, Node.FREE_CALL);
680:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
681:       
682:       boolean boolean3 = node0.isOr();
683:       assertFalse(node0.isNull());
684:       assertFalse(node0.isStringKey());
685:       assertFalse(node0.isParamList());
686:       assertFalse(node0.isCall());
687:       assertFalse(node0.isSetterDef());
688:       assertFalse(node0.isName());
689:       assertEquals(0, node0.getChildCount());
690:       assertFalse(node0.isVar());
691:       assertFalse(node0.isCatch());
692:       assertFalse(node0.isBlock());
693:       assertFalse(node0.isDefaultCase());
694:       assertFalse(node0.isVoid());
695:       assertFalse(node0.isDo());
696:       assertFalse(node0.isNew());
697:       assertFalse(node0.isAdd());
698:       assertFalse(node0.isTrue());
699:       assertFalse(node0.isOr());
700:       assertFalse(node0.isIf());
701:       assertFalse(node0.isGetterDef());
702:       assertFalse(node0.isNumber());
703:       assertFalse(node0.isEmpty());
704:       assertFalse(node0.isNE());
705:       assertFalse(node0.isFor());
706:       assertFalse(node0.isArrayLit());
707:       assertFalse(node0.isLabelName());
708:       assertFalse(node0.hasOneChild());
709:       assertEquals((-1), node0.getLineno());
710:       assertFalse(node0.isAssignAdd());
711:       assertFalse(node0.hasMoreThanOneChild());
712:       assertFalse(node0.isRegExp());
713:       assertFalse(node0.isLabel());
714:       assertFalse(node0.isScript());
715:       assertFalse(node0.isSwitch());
716:       assertFalse(node0.isCase());
717:       assertFalse(node0.isTry());
718:       assertEquals((-1), node0.getCharno());
719:       assertFalse(node0.isBreak());
720:       assertFalse(node0.isGetProp());
721:       assertFalse(node0.isHook());
722:       assertFalse(node0.isInstanceOf());
723:       assertFalse(node0.isThrow());
724:       assertFalse(node0.isThis());
725:       assertFalse(node0.isFalse());
726:       assertFalse(node0.isComma());
727:       assertFalse(node0.isWith());
728:       assertFalse(node0.isExprResult());
729:       assertFalse(node0.isInc());
730:       assertFalse(node0.isIn());
731:       assertFalse(node0.isDelProp());
732:       assertFalse(node0.hasChildren());
733:       assertFalse(node0.isGetElem());
734:       assertFalse(node0.isReturn());
735:       assertFalse(node0.isCast());
736:       assertFalse(node0.isContinue());
737:       assertFalse(node0.isFunction());
738:       assertFalse(node0.isAssign());
739:       assertFalse(node0.isTypeOf());
740:       assertFalse(node0.isDec());
741:       assertEquals(2468, node0.getType());
742:       assertFalse(node0.isWhile());
743:       assertFalse(node0.isString());
744:       assertFalse(node0.isAnd());
745:       assertFalse(node0.isObjectLit());
746:       assertFalse(node0.isDebugger());
747:       assertFalse(node0.isNot());
748:       assertEquals((-1), node0.getSourcePosition());
749:       assertFalse(boolean3);
750:       assertEquals(37, Node.OPT_ARG_NAME);
751:       assertEquals(2, Node.POST_FLAG);
752:       assertEquals(32, Node.INCRDECR_PROP);
753:       assertEquals(56, Node.CHANGE_TIME);
754:       assertEquals(51, Node.STATIC_SOURCE_FILE);
755:       assertEquals(47, Node.IS_DISPATCHER);
756:       assertEquals(12, Node.COLUMN_BITS);
757:       assertEquals(46, Node.IS_NAMESPACE);
758:       assertEquals(30, Node.VAR_ARGS_NAME);
759:       assertEquals(49, Node.DIRECT_EVAL);
760:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
761:       assertEquals(53, Node.INPUT_ID);
762:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
763:       assertEquals(52, Node.LENGTH);
764:       assertEquals(36, Node.QUOTED_PROP);
765:       assertEquals(57, Node.REFLECTED_OBJECT);
766:       assertEquals(57, Node.LAST_PROP);
767:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
768:       assertEquals(15, Node.NO_SIDE_EFFECTS);
769:       assertEquals(55, Node.INFERRED_FUNCTION);
770:       assertEquals(39, Node.EMPTY_BLOCK);
771:       assertEquals(29, Node.JSDOC_INFO_PROP);
772:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
773:       assertEquals(8, Node.FLAG_NO_THROWS);
774:       assertEquals(48, Node.DIRECTIVES);
775:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
776:       assertEquals(4095, Node.COLUMN_MASK);
777:       assertEquals(40, Node.ORIGINALNAME_PROP);
778:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
779:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
780:       assertEquals(43, Node.IS_CONSTANT_NAME);
781:       assertEquals(54, Node.SLASH_V);
782:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
783:       assertEquals(1, Node.DECR_FLAG);
784:       assertEquals(50, Node.FREE_CALL);
785:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
786:       assertTrue(boolean3 == boolean2);
787:       assertTrue(boolean3 == boolean0);
788:       assertFalse(boolean3 == boolean1);
789:       
790:       Iterable<Node> iterable0 = node0.children();
791:       assertFalse(node0.isNull());
792:       assertFalse(node0.isStringKey());
793:       assertFalse(node0.isParamList());
794:       assertFalse(node0.isCall());
795:       assertFalse(node0.isSetterDef());
796:       assertFalse(node0.isName());
797:       assertEquals(0, node0.getChildCount());
798:       assertFalse(node0.isVar());
799:       assertFalse(node0.isCatch());
800:       assertFalse(node0.isBlock());
801:       assertFalse(node0.isDefaultCase());
802:       assertFalse(node0.isVoid());
803:       assertFalse(node0.isDo());
804:       assertFalse(node0.isNew());
805:       assertFalse(node0.isAdd());
806:       assertFalse(node0.isTrue());
807:       assertFalse(node0.isOr());
808:       assertFalse(node0.isIf());
809:       assertFalse(node0.isGetterDef());
810:       assertFalse(node0.isNumber());
811:       assertFalse(node0.isEmpty());
812:       assertFalse(node0.isNE());
813:       assertFalse(node0.isFor());
814:       assertFalse(node0.isArrayLit());
815:       assertFalse(node0.isLabelName());
816:       assertFalse(node0.hasOneChild());
817:       assertEquals((-1), node0.getLineno());
818:       assertFalse(node0.isAssignAdd());
819:       assertFalse(node0.hasMoreThanOneChild());
820:       assertFalse(node0.isRegExp());
821:       assertFalse(node0.isLabel());
822:       assertFalse(node0.isScript());
823:       assertFalse(node0.isSwitch());
824:       assertFalse(node0.isCase());
825:       assertFalse(node0.isTry());
826:       assertEquals((-1), node0.getCharno());
827:       assertFalse(node0.isBreak());
828:       assertFalse(node0.isGetProp());
829:       assertFalse(node0.isHook());
830:       assertFalse(node0.isInstanceOf());
831:       assertFalse(node0.isThrow());
832:       assertFalse(node0.isThis());
833:       assertFalse(node0.isFalse());
834:       assertFalse(node0.isComma());
835:       assertFalse(node0.isWith());
836:       assertFalse(node0.isExprResult());
837:       assertFalse(node0.isInc());
838:       assertFalse(node0.isIn());
839:       assertFalse(node0.isDelProp());
840:       assertFalse(node0.hasChildren());
841:       assertFalse(node0.isGetElem());
842:       assertFalse(node0.isReturn());
843:       assertFalse(node0.isCast());
844:       assertFalse(node0.isContinue());
845:       assertFalse(node0.isFunction());
846:       assertFalse(node0.isAssign());
847:       assertFalse(node0.isTypeOf());
848:       assertFalse(node0.isDec());
849:       assertEquals(2468, node0.getType());
850:       assertFalse(node0.isWhile());
851:       assertFalse(node0.isString());
852:       assertFalse(node0.isAnd());
853:       assertFalse(node0.isObjectLit());
854:       assertFalse(node0.isDebugger());
855:       assertFalse(node0.isNot());
856:       assertEquals((-1), node0.getSourcePosition());
857:       assertNotNull(iterable0);
858:       assertFalse(iterable0.contains(node0));
859:       assertEquals(37, Node.OPT_ARG_NAME);
860:       assertEquals(2, Node.POST_FLAG);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(56, Node.CHANGE_TIME);
863:       assertEquals(51, Node.STATIC_SOURCE_FILE);
864:       assertEquals(47, Node.IS_DISPATCHER);
865:       assertEquals(12, Node.COLUMN_BITS);
866:       assertEquals(46, Node.IS_NAMESPACE);
867:       assertEquals(30, Node.VAR_ARGS_NAME);
868:       assertEquals(49, Node.DIRECT_EVAL);
869:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
870:       assertEquals(53, Node.INPUT_ID);
871:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
872:       assertEquals(52, Node.LENGTH);
873:       assertEquals(36, Node.QUOTED_PROP);
874:       assertEquals(57, Node.REFLECTED_OBJECT);
875:       assertEquals(57, Node.LAST_PROP);
876:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
877:       assertEquals(15, Node.NO_SIDE_EFFECTS);
878:       assertEquals(55, Node.INFERRED_FUNCTION);
879:       assertEquals(39, Node.EMPTY_BLOCK);
880:       assertEquals(29, Node.JSDOC_INFO_PROP);
881:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
882:       assertEquals(8, Node.FLAG_NO_THROWS);
883:       assertEquals(48, Node.DIRECTIVES);
884:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
885:       assertEquals(4095, Node.COLUMN_MASK);
886:       assertEquals(40, Node.ORIGINALNAME_PROP);
887:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
888:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
889:       assertEquals(43, Node.IS_CONSTANT_NAME);
890:       assertEquals(54, Node.SLASH_V);
891:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
892:       assertEquals(1, Node.DECR_FLAG);
893:       assertEquals(50, Node.FREE_CALL);
894:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
895:       
896:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
897:       assertEquals(16, node_SideEffectFlags0.valueOf());
898:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
899:       assertNotNull(node_SideEffectFlags0);
900:       
901:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
902:       assertNotNull(simpleErrorReporter0);
903:       
904:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
905:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
906:       assertNotNull(jSTypeRegistry0);
907:       
908:       JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
909:       JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
910:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
911:       assertFalse(jSType0.isNumberValueType());
912:       assertFalse(jSType0.isStringValueType());
913:       assertFalse(jSType0.isTemplateType());
914:       assertFalse(jSType0.isFunctionType());
915:       assertFalse(jSType0.isOrdinaryFunction());
916:       assertFalse(jSType0.isBooleanValueType());
917:       assertFalse(jSType0.isNoType());
918:       assertFalse(jSType0.isResolved());
919:       assertFalse(jSType0.isNominalType());
920:       assertFalse(jSType0.isNullType());
921:       assertFalse(jSType0.isNoObjectType());
922:       assertFalse(jSType0.isCheckedUnknownType());
923:       assertFalse(jSType0.isEnumElementType());
924:       assertFalse(jSType0.isInterface());
925:       assertFalse(jSType0.isEnumType());
926:       assertFalse(jSType0.isRecordType());
927:       assertFalse(jSType0.isNominalConstructor());
928:       assertFalse(jSType0.isConstructor());
929:       assertFalse(jSType0.isVoidType());
930:       assertFalse(jSType0.isAllType());
931:       assertTrue(jSType0.isUnionType());
932:       assertFalse(jSType0.isFunctionPrototypeType());
933:       assertFalse(jSType0.isTemplatizedType());
934:       assertFalse(jSType0.isNoResolvedType());
935:       assertNotNull(jSType0);
936:       assertEquals(1, JSType.ENUMDECL);
937:       assertEquals(0, JSType.NOT_ENUMDECL);
938:       
939:       EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
940:       assertFalse(enumType0.isFunctionType());
941:       assertFalse(enumType0.isOrdinaryFunction());
942:       assertFalse(enumType0.isBooleanValueType());
943:       assertFalse(enumType0.isAllType());
944:       assertFalse(enumType0.isRecordType());
945:       assertFalse(enumType0.isTemplateType());
946:       assertFalse(enumType0.isInterface());
947:       assertFalse(enumType0.matchesNumberContext());
948:       assertTrue(enumType0.matchesStringContext());
949:       assertFalse(enumType0.isResolved());
950:       assertFalse(enumType0.isStringValueType());
951:       assertFalse(enumType0.isNumberValueType());
952:       assertFalse(enumType0.isNoResolvedType());
953:       assertFalse(enumType0.isCheckedUnknownType());
954:       assertTrue(enumType0.isEnumType());
955:       assertFalse(enumType0.isVoidType());
956:       assertFalse(enumType0.isTemplatizedType());
957:       assertFalse(enumType0.isUnionType());
958:       assertTrue(enumType0.matchesObjectContext());
959:       assertFalse(enumType0.isFunctionPrototypeType());
960:       assertFalse(enumType0.isEnumElementType());
961:       assertFalse(enumType0.isNominalConstructor());
962:       assertFalse(enumType0.isConstructor());
963:       assertFalse(enumType0.isNoObjectType());
964:       assertFalse(enumType0.isNoType());
965:       assertFalse(enumType0.isNominalType());
966:       assertTrue(enumType0.isObject());
967:       assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
968:       assertFalse(enumType0.isNullType());
969:       assertFalse(node0.isNull());
970:       assertFalse(node0.isStringKey());
971:       assertFalse(node0.isParamList());
972:       assertFalse(node0.isCall());
973:       assertFalse(node0.isSetterDef());
974:       assertFalse(node0.isName());
975:       assertEquals(0, node0.getChildCount());
976:       assertFalse(node0.isVar());
977:       assertFalse(node0.isCatch());
978:       assertFalse(node0.isBlock());
979:       assertFalse(node0.isDefaultCase());
980:       assertFalse(node0.isVoid());
981:       assertFalse(node0.isDo());
982:       assertFalse(node0.isNew());
983:       assertFalse(node0.isAdd());
984:       assertFalse(node0.isTrue());
985:       assertFalse(node0.isOr());
986:       assertFalse(node0.isIf());
987:       assertFalse(node0.isGetterDef());
988:       assertFalse(node0.isNumber());
989:       assertFalse(node0.isEmpty());
990:       assertFalse(node0.isNE());
991:       assertFalse(node0.isFor());
992:       assertFalse(node0.isArrayLit());
993:       assertFalse(node0.isLabelName());
994:       assertFalse(node0.hasOneChild());
995:       assertEquals((-1), node0.getLineno());
996:       assertFalse(node0.isAssignAdd());
997:       assertFalse(node0.hasMoreThanOneChild());
998:       assertFalse(node0.isRegExp());
999:       assertFalse(node0.isLabel());
1000:       assertFalse(node0.isScript());
1001:       assertFalse(node0.isSwitch());
1002:       assertFalse(node0.isCase());
1003:       assertFalse(node0.isTry());
1004:       assertEquals((-1), node0.getCharno());
1005:       assertFalse(node0.isBreak());
1006:       assertFalse(node0.isGetProp());
1007:       assertFalse(node0.isHook());
1008:       assertFalse(node0.isInstanceOf());
1009:       assertFalse(node0.isThrow());
1010:       assertFalse(node0.isThis());
1011:       assertFalse(node0.isFalse());
1012:       assertFalse(node0.isComma());
1013:       assertFalse(node0.isWith());
1014:       assertFalse(node0.isExprResult());
1015:       assertFalse(node0.isInc());
1016:       assertFalse(node0.isIn());
1017:       assertFalse(node0.isDelProp());
1018:       assertFalse(node0.hasChildren());
1019:       assertFalse(node0.isGetElem());
1020:       assertFalse(node0.isReturn());
1021:       assertFalse(node0.isCast());
1022:       assertFalse(node0.isContinue());
1023:       assertFalse(node0.isFunction());
1024:       assertFalse(node0.isAssign());
1025:       assertFalse(node0.isTypeOf());
1026:       assertFalse(node0.isDec());
1027:       assertEquals(2468, node0.getType());
1028:       assertFalse(node0.isWhile());
1029:       assertFalse(node0.isString());
1030:       assertFalse(node0.isAnd());
1031:       assertFalse(node0.isObjectLit());
1032:       assertFalse(node0.isDebugger());
1033:       assertFalse(node0.isNot());
1034:       assertEquals((-1), node0.getSourcePosition());
1035:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1036:       assertFalse(jSType0.isNumberValueType());
1037:       assertFalse(jSType0.isStringValueType());
1038:       assertFalse(jSType0.isTemplateType());
1039:       assertFalse(jSType0.isFunctionType());
1040:       assertFalse(jSType0.isOrdinaryFunction());
1041:       assertFalse(jSType0.isBooleanValueType());
1042:       assertFalse(jSType0.isNoType());
1043:       assertFalse(jSType0.isResolved());
1044:       assertFalse(jSType0.isNominalType());
1045:       assertFalse(jSType0.isNullType());
1046:       assertFalse(jSType0.isNoObjectType());
1047:       assertFalse(jSType0.isCheckedUnknownType());
1048:       assertFalse(jSType0.isEnumElementType());
1049:       assertFalse(jSType0.isInterface());
1050:       assertFalse(jSType0.isEnumType());
1051:       assertFalse(jSType0.isRecordType());
1052:       assertFalse(jSType0.isNominalConstructor());
1053:       assertFalse(jSType0.isConstructor());
1054:       assertFalse(jSType0.isVoidType());
1055:       assertFalse(jSType0.isAllType());
1056:       assertTrue(jSType0.isUnionType());
1057:       assertFalse(jSType0.isFunctionPrototypeType());
1058:       assertFalse(jSType0.isTemplatizedType());
1059:       assertFalse(jSType0.isNoResolvedType());
1060:       assertNotNull(enumType0);
1061:       assertEquals(1, JSType.ENUMDECL);
1062:       assertEquals(0, JSType.NOT_ENUMDECL);
1063:       assertEquals(37, Node.OPT_ARG_NAME);
1064:       assertEquals(2, Node.POST_FLAG);
1065:       assertEquals(32, Node.INCRDECR_PROP);
1066:       assertEquals(56, Node.CHANGE_TIME);
1067:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1068:       assertEquals(47, Node.IS_DISPATCHER);
1069:       assertEquals(12, Node.COLUMN_BITS);
1070:       assertEquals(46, Node.IS_NAMESPACE);
1071:       assertEquals(30, Node.VAR_ARGS_NAME);
1072:       assertEquals(49, Node.DIRECT_EVAL);
1073:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1074:       assertEquals(53, Node.INPUT_ID);
1075:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1076:       assertEquals(52, Node.LENGTH);
1077:       assertEquals(36, Node.QUOTED_PROP);
1078:       assertEquals(57, Node.REFLECTED_OBJECT);
1079:       assertEquals(57, Node.LAST_PROP);
1080:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1081:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1082:       assertEquals(55, Node.INFERRED_FUNCTION);
1083:       assertEquals(39, Node.EMPTY_BLOCK);
1084:       assertEquals(29, Node.JSDOC_INFO_PROP);
1085:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1086:       assertEquals(8, Node.FLAG_NO_THROWS);
1087:       assertEquals(48, Node.DIRECTIVES);
1088:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1089:       assertEquals(4095, Node.COLUMN_MASK);
1090:       assertEquals(40, Node.ORIGINALNAME_PROP);
1091:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1092:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1093:       assertEquals(43, Node.IS_CONSTANT_NAME);
1094:       assertEquals(54, Node.SLASH_V);
1095:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1096:       assertEquals(1, Node.DECR_FLAG);
1097:       assertEquals(50, Node.FREE_CALL);
1098:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1099:       assertEquals(1, JSType.ENUMDECL);
1100:       assertEquals(0, JSType.NOT_ENUMDECL);
1101:       
1102:       EnumElementType enumElementType0 = enumType0.getElementsType();
1103:       assertFalse(enumType0.isFunctionType());
1104:       assertFalse(enumType0.isOrdinaryFunction());
1105:       assertFalse(enumType0.isBooleanValueType());
1106:       assertFalse(enumType0.isAllType());
1107:       assertFalse(enumType0.isRecordType());
1108:       assertFalse(enumType0.isTemplateType());
1109:       assertFalse(enumType0.isInterface());
1110:       assertFalse(enumType0.matchesNumberContext());
1111:       assertTrue(enumType0.matchesStringContext());
1112:       assertFalse(enumType0.isResolved());
1113:       assertFalse(enumType0.isStringValueType());
1114:       assertFalse(enumType0.isNumberValueType());
1115:       assertFalse(enumType0.isNoResolvedType());
1116:       assertFalse(enumType0.isCheckedUnknownType());
1117:       assertTrue(enumType0.isEnumType());
1118:       assertFalse(enumType0.isVoidType());
1119:       assertFalse(enumType0.isTemplatizedType());
1120:       assertFalse(enumType0.isUnionType());
1121:       assertTrue(enumType0.matchesObjectContext());
1122:       assertFalse(enumType0.isFunctionPrototypeType());
1123:       assertFalse(enumType0.isEnumElementType());
1124:       assertFalse(enumType0.isNominalConstructor());
1125:       assertFalse(enumType0.isConstructor());
1126:       assertFalse(enumType0.isNoObjectType());
1127:       assertFalse(enumType0.isNoType());
1128:       assertFalse(enumType0.isNominalType());
1129:       assertTrue(enumType0.isObject());
1130:       assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
1131:       assertFalse(enumType0.isNullType());
1132:       assertFalse(node0.isNull());
1133:       assertFalse(node0.isStringKey());
1134:       assertFalse(node0.isParamList());
1135:       assertFalse(node0.isCall());
1136:       assertFalse(node0.isSetterDef());
1137:       assertFalse(node0.isName());
1138:       assertEquals(0, node0.getChildCount());
1139:       assertFalse(node0.isVar());
1140:       assertFalse(node0.isCatch());
1141:       assertFalse(node0.isBlock());
1142:       assertFalse(node0.isDefaultCase());
1143:       assertFalse(node0.isVoid());
1144:       assertFalse(node0.isDo());
1145:       assertFalse(node0.isNew());
1146:       assertFalse(node0.isAdd());
1147:       assertFalse(node0.isTrue());
1148:       assertFalse(node0.isOr());
1149:       assertFalse(node0.isIf());
1150:       assertFalse(node0.isGetterDef());
1151:       assertFalse(node0.isNumber());
1152:       assertFalse(node0.isEmpty());
1153:       assertFalse(node0.isNE());
1154:       assertFalse(node0.isFor());
1155:       assertFalse(node0.isArrayLit());
1156:       assertFalse(node0.isLabelName());
1157:       assertFalse(node0.hasOneChild());
1158:       assertEquals((-1), node0.getLineno());
1159:       assertFalse(node0.isAssignAdd());
1160:       assertFalse(node0.hasMoreThanOneChild());
1161:       assertFalse(node0.isRegExp());
1162:       assertFalse(node0.isLabel());
1163:       assertFalse(node0.isScript());
1164:       assertFalse(node0.isSwitch());
1165:       assertFalse(node0.isCase());
1166:       assertFalse(node0.isTry());
1167:       assertEquals((-1), node0.getCharno());
1168:       assertFalse(node0.isBreak());
1169:       assertFalse(node0.isGetProp());
1170:       assertFalse(node0.isHook());
1171:       assertFalse(node0.isInstanceOf());
1172:       assertFalse(node0.isThrow());
1173:       assertFalse(node0.isThis());
1174:       assertFalse(node0.isFalse());
1175:       assertFalse(node0.isComma());
1176:       assertFalse(node0.isWith());
1177:       assertFalse(node0.isExprResult());
1178:       assertFalse(node0.isInc());
1179:       assertFalse(node0.isIn());
1180:       assertFalse(node0.isDelProp());
1181:       assertFalse(node0.hasChildren());
1182:       assertFalse(node0.isGetElem());
1183:       assertFalse(node0.isReturn());
1184:       assertFalse(node0.isCast());
1185:       assertFalse(node0.isContinue());
1186:       assertFalse(node0.isFunction());
1187:       assertFalse(node0.isAssign());
1188:       assertFalse(node0.isTypeOf());
1189:       assertFalse(node0.isDec());
1190:       assertEquals(2468, node0.getType());
1191:       assertFalse(node0.isWhile());
1192:       assertFalse(node0.isString());
1193:       assertFalse(node0.isAnd());
1194:       assertFalse(node0.isObjectLit());
1195:       assertFalse(node0.isDebugger());
1196:       assertFalse(node0.isNot());
1197:       assertEquals((-1), node0.getSourcePosition());
1198:       assertFalse(enumElementType0.isRecordType());
1199:       assertFalse(enumElementType0.isInterface());
1200:       assertFalse(enumElementType0.isFunctionPrototypeType());
1201:       assertFalse(enumElementType0.hasCachedValues());
1202:       assertFalse(enumElementType0.isConstructor());
1203:       assertFalse(enumElementType0.isFunctionType());
1204:       assertFalse(enumElementType0.isTemplateType());
1205:       assertTrue(enumElementType0.hasReferenceName());
1206:       assertFalse(enumElementType0.isOrdinaryFunction());
1207:       assertFalse(enumElementType0.isStringValueType());
1208:       assertFalse(enumElementType0.isResolved());
1209:       assertFalse(enumElementType0.isVoidType());
1210:       assertTrue(enumElementType0.isEnumElementType());
1211:       assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
1212:       assertFalse(enumElementType0.isNominalConstructor());
1213:       assertFalse(enumElementType0.isNumberValueType());
1214:       assertFalse(enumElementType0.isUnionType());
1215:       assertFalse(enumElementType0.isTemplatizedType());
1216:       assertFalse(enumElementType0.isEnumType());
1217:       assertFalse(enumElementType0.isNoResolvedType());
1218:       assertFalse(enumElementType0.isBooleanValueType());
1219:       assertFalse(enumElementType0.isAllType());
1220:       assertTrue(enumElementType0.isNominalType());
1221:       assertFalse(enumElementType0.isNoType());
1222:       assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
1223:       assertFalse(enumElementType0.isNullType());
1224:       assertFalse(enumElementType0.isNoObjectType());
1225:       assertFalse(enumElementType0.isNativeObjectType());
1226:       assertFalse(enumElementType0.isCheckedUnknownType());
1227:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1228:       assertFalse(jSType0.isNumberValueType());
1229:       assertFalse(jSType0.isStringValueType());
1230:       assertFalse(jSType0.isTemplateType());
1231:       assertFalse(jSType0.isFunctionType());
1232:       assertFalse(jSType0.isOrdinaryFunction());
1233:       assertFalse(jSType0.isBooleanValueType());
1234:       assertFalse(jSType0.isNoType());
1235:       assertFalse(jSType0.isResolved());
1236:       assertFalse(jSType0.isNominalType());
1237:       assertFalse(jSType0.isNullType());
1238:       assertFalse(jSType0.isNoObjectType());
1239:       assertFalse(jSType0.isCheckedUnknownType());
1240:       assertFalse(jSType0.isEnumElementType());
1241:       assertFalse(jSType0.isInterface());
1242:       assertFalse(jSType0.isEnumType());
1243:       assertFalse(jSType0.isRecordType());
1244:       assertFalse(jSType0.isNominalConstructor());
1245:       assertFalse(jSType0.isConstructor());
1246:       assertFalse(jSType0.isVoidType());
1247:       assertFalse(jSType0.isAllType());
1248:       assertTrue(jSType0.isUnionType());
1249:       assertFalse(jSType0.isFunctionPrototypeType());
1250:       assertFalse(jSType0.isTemplatizedType());
1251:       assertFalse(jSType0.isNoResolvedType());
1252:       assertNotNull(enumElementType0);
1253:       assertEquals(1, JSType.ENUMDECL);
1254:       assertEquals(0, JSType.NOT_ENUMDECL);
1255:       assertEquals(37, Node.OPT_ARG_NAME);
1256:       assertEquals(2, Node.POST_FLAG);
1257:       assertEquals(32, Node.INCRDECR_PROP);
1258:       assertEquals(56, Node.CHANGE_TIME);
1259:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1260:       assertEquals(47, Node.IS_DISPATCHER);
1261:       assertEquals(12, Node.COLUMN_BITS);
1262:       assertEquals(46, Node.IS_NAMESPACE);
1263:       assertEquals(30, Node.VAR_ARGS_NAME);
1264:       assertEquals(49, Node.DIRECT_EVAL);
1265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1266:       assertEquals(53, Node.INPUT_ID);
1267:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1268:       assertEquals(52, Node.LENGTH);
1269:       assertEquals(36, Node.QUOTED_PROP);
1270:       assertEquals(57, Node.REFLECTED_OBJECT);
1271:       assertEquals(57, Node.LAST_PROP);
1272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1274:       assertEquals(55, Node.INFERRED_FUNCTION);
1275:       assertEquals(39, Node.EMPTY_BLOCK);
1276:       assertEquals(29, Node.JSDOC_INFO_PROP);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(8, Node.FLAG_NO_THROWS);
1279:       assertEquals(48, Node.DIRECTIVES);
1280:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1281:       assertEquals(4095, Node.COLUMN_MASK);
1282:       assertEquals(40, Node.ORIGINALNAME_PROP);
1283:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1284:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1285:       assertEquals(43, Node.IS_CONSTANT_NAME);
1286:       assertEquals(54, Node.SLASH_V);
1287:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1288:       assertEquals(1, Node.DECR_FLAG);
1289:       assertEquals(50, Node.FREE_CALL);
1290:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1291:       assertEquals(0, JSType.NOT_ENUMDECL);
1292:       assertEquals(1, JSType.ENUMDECL);
1293:       assertEquals(1, JSType.ENUMDECL);
1294:       assertEquals(0, JSType.NOT_ENUMDECL);
1295:       
1296:       EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
1297:       assertFalse(enumType0.isFunctionType());
1298:       assertFalse(enumType0.isOrdinaryFunction());
1299:       assertFalse(enumType0.isBooleanValueType());
1300:       assertFalse(enumType0.isAllType());
1301:       assertFalse(enumType0.isRecordType());
1302:       assertFalse(enumType0.isTemplateType());
1303:       assertFalse(enumType0.isInterface());
1304:       assertFalse(enumType0.matchesNumberContext());
1305:       assertTrue(enumType0.matchesStringContext());
1306:       assertFalse(enumType0.isResolved());
1307:       assertFalse(enumType0.isStringValueType());
1308:       assertFalse(enumType0.isNumberValueType());
1309:       assertFalse(enumType0.isNoResolvedType());
1310:       assertFalse(enumType0.isCheckedUnknownType());
1311:       assertTrue(enumType0.isEnumType());
1312:       assertFalse(enumType0.isVoidType());
1313:       assertFalse(enumType0.isTemplatizedType());
1314:       assertFalse(enumType0.isUnionType());
1315:       assertTrue(enumType0.matchesObjectContext());
1316:       assertFalse(enumType0.isFunctionPrototypeType());
1317:       assertFalse(enumType0.isEnumElementType());
1318:       assertFalse(enumType0.isNominalConstructor());
1319:       assertFalse(enumType0.isConstructor());
1320:       assertFalse(enumType0.isNoObjectType());
1321:       assertFalse(enumType0.isNoType());
1322:       assertFalse(enumType0.isNominalType());
1323:       assertTrue(enumType0.isObject());
1324:       assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
1325:       assertFalse(enumType0.isNullType());
1326:       assertFalse(node0.isNull());
1327:       assertFalse(node0.isStringKey());
1328:       assertFalse(node0.isParamList());
1329:       assertFalse(node0.isCall());
1330:       assertFalse(node0.isSetterDef());
1331:       assertFalse(node0.isName());
1332:       assertEquals(0, node0.getChildCount());
1333:       assertFalse(node0.isVar());
1334:       assertFalse(node0.isCatch());
1335:       assertFalse(node0.isBlock());
1336:       assertFalse(node0.isDefaultCase());
1337:       assertFalse(node0.isVoid());
1338:       assertFalse(node0.isDo());
1339:       assertFalse(node0.isNew());
1340:       assertFalse(node0.isAdd());
1341:       assertFalse(node0.isTrue());
1342:       assertFalse(node0.isOr());
1343:       assertFalse(node0.isIf());
1344:       assertFalse(node0.isGetterDef());
1345:       assertFalse(node0.isNumber());
1346:       assertFalse(node0.isEmpty());
1347:       assertFalse(node0.isNE());
1348:       assertFalse(node0.isFor());
1349:       assertFalse(node0.isArrayLit());
1350:       assertFalse(node0.isLabelName());
1351:       assertFalse(node0.hasOneChild());
1352:       assertEquals((-1), node0.getLineno());
1353:       assertFalse(node0.isAssignAdd());
1354:       assertFalse(node0.hasMoreThanOneChild());
1355:       assertFalse(node0.isRegExp());
1356:       assertFalse(node0.isLabel());
1357:       assertFalse(node0.isScript());
1358:       assertFalse(node0.isSwitch());
1359:       assertFalse(node0.isCase());
1360:       assertFalse(node0.isTry());
1361:       assertEquals((-1), node0.getCharno());
1362:       assertFalse(node0.isBreak());
1363:       assertFalse(node0.isGetProp());
1364:       assertFalse(node0.isHook());
1365:       assertFalse(node0.isInstanceOf());
1366:       assertFalse(node0.isThrow());
1367:       assertFalse(node0.isThis());
1368:       assertFalse(node0.isFalse());
1369:       assertFalse(node0.isComma());
1370:       assertFalse(node0.isWith());
1371:       assertFalse(node0.isExprResult());
1372:       assertFalse(node0.isInc());
1373:       assertFalse(node0.isIn());
1374:       assertFalse(node0.isDelProp());
1375:       assertFalse(node0.hasChildren());
1376:       assertFalse(node0.isGetElem());
1377:       assertFalse(node0.isReturn());
1378:       assertFalse(node0.isCast());
1379:       assertFalse(node0.isContinue());
1380:       assertFalse(node0.isFunction());
1381:       assertFalse(node0.isAssign());
1382:       assertFalse(node0.isTypeOf());
1383:       assertFalse(node0.isDec());
1384:       assertEquals(2468, node0.getType());
1385:       assertFalse(node0.isWhile());
1386:       assertFalse(node0.isString());
1387:       assertFalse(node0.isAnd());
1388:       assertFalse(node0.isObjectLit());
1389:       assertFalse(node0.isDebugger());
1390:       assertFalse(node0.isNot());
1391:       assertEquals((-1), node0.getSourcePosition());
1392:       assertFalse(enumElementType0.isRecordType());
1393:       assertFalse(enumElementType0.isInterface());
1394:       assertFalse(enumElementType0.isFunctionPrototypeType());
1395:       assertFalse(enumElementType0.hasCachedValues());
1396:       assertFalse(enumElementType0.isConstructor());
1397:       assertFalse(enumElementType0.isFunctionType());
1398:       assertFalse(enumElementType0.isTemplateType());
1399:       assertTrue(enumElementType0.hasReferenceName());
1400:       assertFalse(enumElementType0.isOrdinaryFunction());
1401:       assertFalse(enumElementType0.isStringValueType());
1402:       assertFalse(enumElementType0.isResolved());
1403:       assertFalse(enumElementType0.isVoidType());
1404:       assertTrue(enumElementType0.isEnumElementType());
1405:       assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
1406:       assertFalse(enumElementType0.isNominalConstructor());
1407:       assertFalse(enumElementType0.isNumberValueType());
1408:       assertFalse(enumElementType0.isUnionType());
1409:       assertFalse(enumElementType0.isTemplatizedType());
1410:       assertFalse(enumElementType0.isEnumType());
1411:       assertFalse(enumElementType0.isNoResolvedType());
1412:       assertFalse(enumElementType0.isBooleanValueType());
1413:       assertFalse(enumElementType0.isAllType());
1414:       assertTrue(enumElementType0.isNominalType());
1415:       assertFalse(enumElementType0.isNoType());
1416:       assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
1417:       assertFalse(enumElementType0.isNullType());
1418:       assertFalse(enumElementType0.isNoObjectType());
1419:       assertFalse(enumElementType0.isNativeObjectType());
1420:       assertFalse(enumElementType0.isCheckedUnknownType());
1421:       assertFalse(enumElementType1.isNumberValueType());
1422:       assertFalse(enumElementType1.isUnionType());
1423:       assertFalse(enumElementType1.isNoResolvedType());
1424:       assertFalse(enumElementType1.isStringValueType());
1425:       assertFalse(enumElementType1.isCheckedUnknownType());
1426:       assertFalse(enumElementType1.isNominalConstructor());
1427:       assertTrue(enumElementType1.isEnumElementType());
1428:       assertFalse(enumElementType1.isNoObjectType());
1429:       assertFalse(enumElementType1.isNoType());
1430:       assertEquals("Not declared as a type name", enumElementType1.getReferenceName());
1431:       assertFalse(enumElementType1.isTemplatizedType());
1432:       assertFalse(enumElementType1.isAllType());
1433:       assertFalse(enumElementType1.isFunctionType());
1434:       assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
1435:       assertTrue(enumElementType1.isNominalType());
1436:       assertFalse(enumElementType1.isNativeObjectType());
1437:       assertFalse(enumElementType1.isBooleanValueType());
1438:       assertFalse(enumElementType1.isTemplateType());
1439:       assertTrue(enumElementType1.hasReferenceName());
1440:       assertFalse(enumElementType1.isNullType());
1441:       assertFalse(enumElementType1.isResolved());
1442:       assertFalse(enumElementType1.hasCachedValues());
1443:       assertFalse(enumElementType1.isOrdinaryFunction());
1444:       assertFalse(enumElementType1.isFunctionPrototypeType());
1445:       assertFalse(enumElementType1.isConstructor());
1446:       assertFalse(enumElementType1.isEnumType());
1447:       assertFalse(enumElementType1.isInterface());
1448:       assertFalse(enumElementType1.isRecordType());
1449:       assertFalse(enumElementType1.isVoidType());
1450:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1451:       assertFalse(jSType0.isNumberValueType());
1452:       assertFalse(jSType0.isStringValueType());
1453:       assertFalse(jSType0.isTemplateType());
1454:       assertFalse(jSType0.isFunctionType());
1455:       assertFalse(jSType0.isOrdinaryFunction());
1456:       assertFalse(jSType0.isBooleanValueType());
1457:       assertFalse(jSType0.isNoType());
1458:       assertFalse(jSType0.isResolved());
1459:       assertFalse(jSType0.isNominalType());
1460:       assertFalse(jSType0.isNullType());
1461:       assertFalse(jSType0.isNoObjectType());
1462:       assertFalse(jSType0.isCheckedUnknownType());
1463:       assertFalse(jSType0.isEnumElementType());
1464:       assertFalse(jSType0.isInterface());
1465:       assertFalse(jSType0.isEnumType());
1466:       assertFalse(jSType0.isRecordType());
1467:       assertFalse(jSType0.isNominalConstructor());
1468:       assertFalse(jSType0.isConstructor());
1469:       assertFalse(jSType0.isVoidType());
1470:       assertFalse(jSType0.isAllType());
1471:       assertTrue(jSType0.isUnionType());
1472:       assertFalse(jSType0.isFunctionPrototypeType());
1473:       assertFalse(jSType0.isTemplatizedType());
1474:       assertFalse(jSType0.isNoResolvedType());
1475:       assertSame(enumElementType0, enumElementType1);
1476:       assertSame(enumElementType1, enumElementType0);
1477:       assertNotNull(enumElementType1);
1478:       assertEquals(1, JSType.ENUMDECL);
1479:       assertEquals(0, JSType.NOT_ENUMDECL);
1480:       assertEquals(37, Node.OPT_ARG_NAME);
1481:       assertEquals(2, Node.POST_FLAG);
1482:       assertEquals(32, Node.INCRDECR_PROP);
1483:       assertEquals(56, Node.CHANGE_TIME);
1484:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1485:       assertEquals(47, Node.IS_DISPATCHER);
1486:       assertEquals(12, Node.COLUMN_BITS);
1487:       assertEquals(46, Node.IS_NAMESPACE);
1488:       assertEquals(30, Node.VAR_ARGS_NAME);
1489:       assertEquals(49, Node.DIRECT_EVAL);
1490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1491:       assertEquals(53, Node.INPUT_ID);
1492:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1493:       assertEquals(52, Node.LENGTH);
1494:       assertEquals(36, Node.QUOTED_PROP);
1495:       assertEquals(57, Node.REFLECTED_OBJECT);
1496:       assertEquals(57, Node.LAST_PROP);
1497:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1498:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1499:       assertEquals(55, Node.INFERRED_FUNCTION);
1500:       assertEquals(39, Node.EMPTY_BLOCK);
1501:       assertEquals(29, Node.JSDOC_INFO_PROP);
1502:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1503:       assertEquals(8, Node.FLAG_NO_THROWS);
1504:       assertEquals(48, Node.DIRECTIVES);
1505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1506:       assertEquals(4095, Node.COLUMN_MASK);
1507:       assertEquals(40, Node.ORIGINALNAME_PROP);
1508:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1509:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1510:       assertEquals(43, Node.IS_CONSTANT_NAME);
1511:       assertEquals(54, Node.SLASH_V);
1512:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1513:       assertEquals(1, Node.DECR_FLAG);
1514:       assertEquals(50, Node.FREE_CALL);
1515:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1516:       assertEquals(0, JSType.NOT_ENUMDECL);
1517:       assertEquals(1, JSType.ENUMDECL);
1518:       assertEquals(1, JSType.ENUMDECL);
1519:       assertEquals(0, JSType.NOT_ENUMDECL);
1520:       assertEquals(1, JSType.ENUMDECL);
1521:       assertEquals(0, JSType.NOT_ENUMDECL);
1522:       
1523:       JSDocInfo jSDocInfo0 = enumElementType0.getJSDocInfo();
1524:       assertFalse(enumType0.isFunctionType());
1525:       assertFalse(enumType0.isOrdinaryFunction());
1526:       assertFalse(enumType0.isBooleanValueType());
1527:       assertFalse(enumType0.isAllType());
1528:       assertFalse(enumType0.isRecordType());
1529:       assertFalse(enumType0.isTemplateType());
1530:       assertFalse(enumType0.isInterface());
1531:       assertFalse(enumType0.matchesNumberContext());
1532:       assertTrue(enumType0.matchesStringContext());
1533:       assertFalse(enumType0.isResolved());
1534:       assertFalse(enumType0.isStringValueType());
1535:       assertFalse(enumType0.isNumberValueType());
1536:       assertFalse(enumType0.isNoResolvedType());
1537:       assertFalse(enumType0.isCheckedUnknownType());
1538:       assertTrue(enumType0.isEnumType());
1539:       assertFalse(enumType0.isVoidType());
1540:       assertFalse(enumType0.isTemplatizedType());
1541:       assertFalse(enumType0.isUnionType());
1542:       assertTrue(enumType0.matchesObjectContext());
1543:       assertFalse(enumType0.isFunctionPrototypeType());
1544:       assertFalse(enumType0.isEnumElementType());
1545:       assertFalse(enumType0.isNominalConstructor());
1546:       assertFalse(enumType0.isConstructor());
1547:       assertFalse(enumType0.isNoObjectType());
1548:       assertFalse(enumType0.isNoType());
1549:       assertFalse(enumType0.isNominalType());
1550:       assertTrue(enumType0.isObject());
1551:       assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
1552:       assertFalse(enumType0.isNullType());
1553:       assertFalse(node0.isNull());
1554:       assertFalse(node0.isStringKey());
1555:       assertFalse(node0.isParamList());
1556:       assertFalse(node0.isCall());
1557:       assertFalse(node0.isSetterDef());
1558:       assertFalse(node0.isName());
1559:       assertEquals(0, node0.getChildCount());
1560:       assertFalse(node0.isVar());
1561:       assertFalse(node0.isCatch());
1562:       assertFalse(node0.isBlock());
1563:       assertFalse(node0.isDefaultCase());
1564:       assertFalse(node0.isVoid());
1565:       assertFalse(node0.isDo());
1566:       assertFalse(node0.isNew());
1567:       assertFalse(node0.isAdd());
1568:       assertFalse(node0.isTrue());
1569:       assertFalse(node0.isOr());
1570:       assertFalse(node0.isIf());
1571:       assertFalse(node0.isGetterDef());
1572:       assertFalse(node0.isNumber());
1573:       assertFalse(node0.isEmpty());
1574:       assertFalse(node0.isNE());
1575:       assertFalse(node0.isFor());
1576:       assertFalse(node0.isArrayLit());
1577:       assertFalse(node0.isLabelName());
1578:       assertFalse(node0.hasOneChild());
1579:       assertEquals((-1), node0.getLineno());
1580:       assertFalse(node0.isAssignAdd());
1581:       assertFalse(node0.hasMoreThanOneChild());
1582:       assertFalse(node0.isRegExp());
1583:       assertFalse(node0.isLabel());
1584:       assertFalse(node0.isScript());
1585:       assertFalse(node0.isSwitch());
1586:       assertFalse(node0.isCase());
1587:       assertFalse(node0.isTry());
1588:       assertEquals((-1), node0.getCharno());
1589:       assertFalse(node0.isBreak());
1590:       assertFalse(node0.isGetProp());
1591:       assertFalse(node0.isHook());
1592:       assertFalse(node0.isInstanceOf());
1593:       assertFalse(node0.isThrow());
1594:       assertFalse(node0.isThis());
1595:       assertFalse(node0.isFalse());
1596:       assertFalse(node0.isComma());
1597:       assertFalse(node0.isWith());
1598:       assertFalse(node0.isExprResult());
1599:       assertFalse(node0.isInc());
1600:       assertFalse(node0.isIn());
1601:       assertFalse(node0.isDelProp());
1602:       assertFalse(node0.hasChildren());
1603:       assertFalse(node0.isGetElem());
1604:       assertFalse(node0.isReturn());
1605:       assertFalse(node0.isCast());
1606:       assertFalse(node0.isContinue());
1607:       assertFalse(node0.isFunction());
1608:       assertFalse(node0.isAssign());
1609:       assertFalse(node0.isTypeOf());
1610:       assertFalse(node0.isDec());
1611:       assertEquals(2468, node0.getType());
1612:       assertFalse(node0.isWhile());
1613:       assertFalse(node0.isString());
1614:       assertFalse(node0.isAnd());
1615:       assertFalse(node0.isObjectLit());
1616:       assertFalse(node0.isDebugger());
1617:       assertFalse(node0.isNot());
1618:       assertEquals((-1), node0.getSourcePosition());
1619:       assertFalse(enumElementType0.isRecordType());
1620:       assertFalse(enumElementType0.isInterface());
1621:       assertFalse(enumElementType0.isFunctionPrototypeType());
1622:       assertFalse(enumElementType0.hasCachedValues());
1623:       assertFalse(enumElementType0.isConstructor());
1624:       assertFalse(enumElementType0.isFunctionType());
1625:       assertFalse(enumElementType0.isTemplateType());
1626:       assertTrue(enumElementType0.hasReferenceName());
1627:       assertFalse(enumElementType0.isOrdinaryFunction());
1628:       assertFalse(enumElementType0.isStringValueType());
1629:       assertFalse(enumElementType0.isResolved());
1630:       assertFalse(enumElementType0.isVoidType());
1631:       assertTrue(enumElementType0.isEnumElementType());
1632:       assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
1633:       assertFalse(enumElementType0.isNominalConstructor());
1634:       assertFalse(enumElementType0.isNumberValueType());
1635:       assertFalse(enumElementType0.isUnionType());
1636:       assertFalse(enumElementType0.isTemplatizedType());
1637:       assertFalse(enumElementType0.isEnumType());
1638:       assertFalse(enumElementType0.isNoResolvedType());
1639:       assertFalse(enumElementType0.isBooleanValueType());
1640:       assertFalse(enumElementType0.isAllType());
1641:       assertTrue(enumElementType0.isNominalType());
1642:       assertFalse(enumElementType0.isNoType());
1643:       assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
1644:       assertFalse(enumElementType0.isNullType());
1645:       assertFalse(enumElementType0.isNoObjectType());
1646:       assertFalse(enumElementType0.isNativeObjectType());
1647:       assertFalse(enumElementType0.isCheckedUnknownType());
1648:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1649:       assertFalse(jSType0.isNumberValueType());
1650:       assertFalse(jSType0.isStringValueType());
1651:       assertFalse(jSType0.isTemplateType());
1652:       assertFalse(jSType0.isFunctionType());
1653:       assertFalse(jSType0.isOrdinaryFunction());
1654:       assertFalse(jSType0.isBooleanValueType());
1655:       assertFalse(jSType0.isNoType());
1656:       assertFalse(jSType0.isResolved());
1657:       assertFalse(jSType0.isNominalType());
1658:       assertFalse(jSType0.isNullType());
1659:       assertFalse(jSType0.isNoObjectType());
1660:       assertFalse(jSType0.isCheckedUnknownType());
1661:       assertFalse(jSType0.isEnumElementType());
1662:       assertFalse(jSType0.isInterface());
1663:       assertFalse(jSType0.isEnumType());
1664:       assertFalse(jSType0.isRecordType());
1665:       assertFalse(jSType0.isNominalConstructor());
1666:       assertFalse(jSType0.isConstructor());
1667:       assertFalse(jSType0.isVoidType());
1668:       assertFalse(jSType0.isAllType());
1669:       assertTrue(jSType0.isUnionType());
1670:       assertFalse(jSType0.isFunctionPrototypeType());
1671:       assertFalse(jSType0.isTemplatizedType());
1672:       assertFalse(jSType0.isNoResolvedType());
1673:       assertSame(enumElementType0, enumElementType1);
1674:       assertNull(jSDocInfo0);
1675:       assertEquals(1, JSType.ENUMDECL);
1676:       assertEquals(0, JSType.NOT_ENUMDECL);
1677:       assertEquals(37, Node.OPT_ARG_NAME);
1678:       assertEquals(2, Node.POST_FLAG);
1679:       assertEquals(32, Node.INCRDECR_PROP);
1680:       assertEquals(56, Node.CHANGE_TIME);
1681:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1682:       assertEquals(47, Node.IS_DISPATCHER);
1683:       assertEquals(12, Node.COLUMN_BITS);
1684:       assertEquals(46, Node.IS_NAMESPACE);
1685:       assertEquals(30, Node.VAR_ARGS_NAME);
1686:       assertEquals(49, Node.DIRECT_EVAL);
1687:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1688:       assertEquals(53, Node.INPUT_ID);
1689:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1690:       assertEquals(52, Node.LENGTH);
1691:       assertEquals(36, Node.QUOTED_PROP);
1692:       assertEquals(57, Node.REFLECTED_OBJECT);
1693:       assertEquals(57, Node.LAST_PROP);
1694:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1695:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1696:       assertEquals(55, Node.INFERRED_FUNCTION);
1697:       assertEquals(39, Node.EMPTY_BLOCK);
1698:       assertEquals(29, Node.JSDOC_INFO_PROP);
1699:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1700:       assertEquals(8, Node.FLAG_NO_THROWS);
1701:       assertEquals(48, Node.DIRECTIVES);
1702:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1703:       assertEquals(4095, Node.COLUMN_MASK);
1704:       assertEquals(40, Node.ORIGINALNAME_PROP);
1705:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1706:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1707:       assertEquals(43, Node.IS_CONSTANT_NAME);
1708:       assertEquals(54, Node.SLASH_V);
1709:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1710:       assertEquals(1, Node.DECR_FLAG);
1711:       assertEquals(50, Node.FREE_CALL);
1712:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1713:       assertEquals(0, JSType.NOT_ENUMDECL);
1714:       assertEquals(1, JSType.ENUMDECL);
1715:       assertEquals(1, JSType.ENUMDECL);
1716:       assertEquals(0, JSType.NOT_ENUMDECL);
1717:       
1718:       ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
1719:       assertFalse(objectType0.isTemplateType());
1720:       assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
1721:       assertFalse(objectType0.isNativeObjectType());
1722:       assertFalse(objectType0.isBooleanValueType());
1723:       assertFalse(objectType0.isFunctionType());
1724:       assertFalse(objectType0.isAllType());
1725:       assertFalse(objectType0.isEnumElementType());
1726:       assertFalse(objectType0.isConstructor());
1727:       assertFalse(objectType0.isEnumType());
1728:       assertFalse(objectType0.isNominalConstructor());
1729:       assertFalse(objectType0.isRecordType());
1730:       assertFalse(objectType0.isFunctionPrototypeType());
1731:       assertFalse(objectType0.hasCachedValues());
1732:       assertFalse(objectType0.isNullType());
1733:       assertFalse(objectType0.isCheckedUnknownType());
1734:       assertFalse(objectType0.isNoResolvedType());
1735:       assertFalse(objectType0.isUnionType());
1736:       assertTrue(objectType0.isObject());
1737:       assertFalse(objectType0.isStringValueType());
1738:       assertFalse(objectType0.isNoObjectType());
1739:       assertFalse(objectType0.isNoType());
1740:       assertFalse(objectType0.isNumberValueType());
1741:       assertFalse(objectType0.isNominalType());
1742:       assertFalse(objectType0.isVoidType());
1743:       assertFalse(objectType0.isTemplatizedType());
1744:       assertFalse(objectType0.isInterface());
1745:       assertFalse(objectType0.hasReferenceName());
1746:       assertFalse(objectType0.isResolved());
1747:       assertFalse(objectType0.isOrdinaryFunction());
1748:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1749:       assertNotNull(objectType0);
1750:       assertEquals(0, JSType.NOT_ENUMDECL);
1751:       assertEquals(1, JSType.ENUMDECL);
1752:       
1753:       TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
1754:       assertTrue(templateType0.isObject());
1755:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1756:       assertFalse(templateType0.isBooleanValueType());
1757:       assertFalse(templateType0.isUnionType());
1758:       assertFalse(templateType0.isNullType());
1759:       assertTrue(templateType0.isTemplateType());
1760:       assertEquals("", templateType0.getReferenceName());
1761:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1762:       assertFalse(templateType0.isFunctionPrototypeType());
1763:       assertFalse(templateType0.isNumberValueType());
1764:       assertFalse(templateType0.hasCachedValues());
1765:       assertFalse(templateType0.isEnumType());
1766:       assertFalse(templateType0.isTemplatizedType());
1767:       assertFalse(templateType0.isVoidType());
1768:       assertFalse(templateType0.isRecordType());
1769:       assertFalse(templateType0.isEnumElementType());
1770:       assertFalse(templateType0.isResolved());
1771:       assertFalse(templateType0.isStringValueType());
1772:       assertFalse(templateType0.isFunctionType());
1773:       assertFalse(templateType0.isNominalConstructor());
1774:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1775:       assertNotNull(templateType0);
1776:       assertEquals(1, JSType.ENUMDECL);
1777:       assertEquals(0, JSType.NOT_ENUMDECL);
1778:       
1779:       JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
1780:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
1781:       assertNotNull(jSTypeRegistry1);
1782:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
1783:       
1784:       JSType[] jSTypeArray0 = new JSType[1];
1785:       jSTypeArray0[0] = (JSType) templateType0;
1786:       FunctionType functionType0 = jSTypeRegistry1.createConstructorType((JSType) enumElementType1, true, jSTypeArray0);
1787:       assertEquals(1, jSTypeArray0.length);
1788:       assertFalse(enumType0.isFunctionType());
1789:       assertFalse(enumType0.isOrdinaryFunction());
1790:       assertFalse(enumType0.isBooleanValueType());
1791:       assertFalse(enumType0.isAllType());
1792:       assertFalse(enumType0.isRecordType());
1793:       assertFalse(enumType0.isTemplateType());
1794:       assertFalse(enumType0.isInterface());
1795:       assertFalse(enumType0.matchesNumberContext());
1796:       assertTrue(enumType0.matchesStringContext());
1797:       assertFalse(enumType0.isResolved());
1798:       assertFalse(enumType0.isStringValueType());
1799:       assertFalse(enumType0.isNumberValueType());
1800:       assertFalse(enumType0.isNoResolvedType());
1801:       assertFalse(enumType0.isCheckedUnknownType());
1802:       assertTrue(enumType0.isEnumType());
1803:       assertFalse(enumType0.isVoidType());
1804:       assertFalse(enumType0.isTemplatizedType());
1805:       assertFalse(enumType0.isUnionType());
1806:       assertTrue(enumType0.matchesObjectContext());
1807:       assertFalse(enumType0.isFunctionPrototypeType());
1808:       assertFalse(enumType0.isEnumElementType());
1809:       assertFalse(enumType0.isNominalConstructor());
1810:       assertFalse(enumType0.isConstructor());
1811:       assertFalse(enumType0.isNoObjectType());
1812:       assertFalse(enumType0.isNoType());
1813:       assertFalse(enumType0.isNominalType());
1814:       assertTrue(enumType0.isObject());
1815:       assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
1816:       assertFalse(enumType0.isNullType());
1817:       assertFalse(node0.isNull());
1818:       assertFalse(node0.isStringKey());
1819:       assertFalse(node0.isParamList());
1820:       assertFalse(node0.isCall());
1821:       assertFalse(node0.isSetterDef());
1822:       assertFalse(node0.isName());
1823:       assertEquals(0, node0.getChildCount());
1824:       assertFalse(node0.isVar());
1825:       assertFalse(node0.isCatch());
1826:       assertFalse(node0.isBlock());
1827:       assertFalse(node0.isDefaultCase());
1828:       assertFalse(node0.isVoid());
1829:       assertFalse(node0.isDo());
1830:       assertFalse(node0.isNew());
1831:       assertFalse(node0.isAdd());
1832:       assertFalse(node0.isTrue());
1833:       assertFalse(node0.isOr());
1834:       assertFalse(node0.isIf());
1835:       assertFalse(node0.isGetterDef());
1836:       assertFalse(node0.isNumber());
1837:       assertFalse(node0.isEmpty());
1838:       assertFalse(node0.isNE());
1839:       assertFalse(node0.isFor());
1840:       assertFalse(node0.isArrayLit());
1841:       assertFalse(node0.isLabelName());
1842:       assertFalse(node0.hasOneChild());
1843:       assertEquals((-1), node0.getLineno());
1844:       assertFalse(node0.isAssignAdd());
1845:       assertFalse(node0.hasMoreThanOneChild());
1846:       assertFalse(node0.isRegExp());
1847:       assertFalse(node0.isLabel());
1848:       assertFalse(node0.isScript());
1849:       assertFalse(node0.isSwitch());
1850:       assertFalse(node0.isCase());
1851:       assertFalse(node0.isTry());
1852:       assertEquals((-1), node0.getCharno());
1853:       assertFalse(node0.isBreak());
1854:       assertFalse(node0.isGetProp());
1855:       assertFalse(node0.isHook());
1856:       assertFalse(node0.isInstanceOf());
1857:       assertFalse(node0.isThrow());
1858:       assertFalse(node0.isThis());
1859:       assertFalse(node0.isFalse());
1860:       assertFalse(node0.isComma());
1861:       assertFalse(node0.isWith());
1862:       assertFalse(node0.isExprResult());
1863:       assertFalse(node0.isInc());
1864:       assertFalse(node0.isIn());
1865:       assertFalse(node0.isDelProp());
1866:       assertFalse(node0.hasChildren());
1867:       assertFalse(node0.isGetElem());
1868:       assertFalse(node0.isReturn());
1869:       assertFalse(node0.isCast());
1870:       assertFalse(node0.isContinue());
1871:       assertFalse(node0.isFunction());
1872:       assertFalse(node0.isAssign());
1873:       assertFalse(node0.isTypeOf());
1874:       assertFalse(node0.isDec());
1875:       assertEquals(2468, node0.getType());
1876:       assertFalse(node0.isWhile());
1877:       assertFalse(node0.isString());
1878:       assertFalse(node0.isAnd());
1879:       assertFalse(node0.isObjectLit());
1880:       assertFalse(node0.isDebugger());
1881:       assertFalse(node0.isNot());
1882:       assertEquals((-1), node0.getSourcePosition());
1883:       assertFalse(enumElementType0.isRecordType());
1884:       assertFalse(enumElementType0.isInterface());
1885:       assertFalse(enumElementType0.isFunctionPrototypeType());
1886:       assertFalse(enumElementType0.hasCachedValues());
1887:       assertFalse(enumElementType0.isConstructor());
1888:       assertFalse(enumElementType0.isFunctionType());
1889:       assertFalse(enumElementType0.isTemplateType());
1890:       assertTrue(enumElementType0.hasReferenceName());
1891:       assertFalse(enumElementType0.isOrdinaryFunction());
1892:       assertFalse(enumElementType0.isStringValueType());
1893:       assertFalse(enumElementType0.isResolved());
1894:       assertFalse(enumElementType0.isVoidType());
1895:       assertTrue(enumElementType0.isEnumElementType());
1896:       assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
1897:       assertFalse(enumElementType0.isNominalConstructor());
1898:       assertFalse(enumElementType0.isNumberValueType());
1899:       assertFalse(enumElementType0.isUnionType());
1900:       assertFalse(enumElementType0.isTemplatizedType());
1901:       assertFalse(enumElementType0.isEnumType());
1902:       assertFalse(enumElementType0.isNoResolvedType());
1903:       assertFalse(enumElementType0.isBooleanValueType());
1904:       assertFalse(enumElementType0.isAllType());
1905:       assertTrue(enumElementType0.isNominalType());
1906:       assertFalse(enumElementType0.isNoType());
1907:       assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
1908:       assertFalse(enumElementType0.isNullType());
1909:       assertFalse(enumElementType0.isNoObjectType());
1910:       assertFalse(enumElementType0.isNativeObjectType());
1911:       assertFalse(enumElementType0.isCheckedUnknownType());
1912:       assertFalse(enumElementType1.isNumberValueType());
1913:       assertFalse(enumElementType1.isUnionType());
1914:       assertFalse(enumElementType1.isNoResolvedType());
1915:       assertFalse(enumElementType1.isStringValueType());
1916:       assertFalse(enumElementType1.isCheckedUnknownType());
1917:       assertFalse(enumElementType1.isNominalConstructor());
1918:       assertTrue(enumElementType1.isEnumElementType());
1919:       assertFalse(enumElementType1.isNoObjectType());
1920:       assertFalse(enumElementType1.isNoType());
1921:       assertEquals("Not declared as a type name", enumElementType1.getReferenceName());
1922:       assertFalse(enumElementType1.isTemplatizedType());
1923:       assertFalse(enumElementType1.isAllType());
1924:       assertFalse(enumElementType1.isFunctionType());
1925:       assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
1926:       assertTrue(enumElementType1.isNominalType());
1927:       assertFalse(enumElementType1.isNativeObjectType());
1928:       assertFalse(enumElementType1.isBooleanValueType());
1929:       assertFalse(enumElementType1.isTemplateType());
1930:       assertTrue(enumElementType1.hasReferenceName());
1931:       assertFalse(enumElementType1.isNullType());
1932:       assertFalse(enumElementType1.isResolved());
1933:       assertFalse(enumElementType1.hasCachedValues());
1934:       assertFalse(enumElementType1.isOrdinaryFunction());
1935:       assertFalse(enumElementType1.isFunctionPrototypeType());
1936:       assertFalse(enumElementType1.isConstructor());
1937:       assertFalse(enumElementType1.isEnumType());
1938:       assertFalse(enumElementType1.isInterface());
1939:       assertFalse(enumElementType1.isRecordType());
1940:       assertFalse(enumElementType1.isVoidType());
1941:       assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
1942:       assertFalse(functionType0.isInterface());
1943:       assertFalse(functionType0.isReturnTypeInferred());
1944:       assertFalse(functionType0.isResolved());
1945:       assertFalse(functionType0.isBooleanValueType());
1946:       assertFalse(functionType0.isRecordType());
1947:       assertTrue(functionType0.canBeCalled());
1948:       assertFalse(functionType0.isTemplateType());
1949:       assertFalse(functionType0.isFunctionPrototypeType());
1950:       assertTrue(functionType0.hasInstanceType());
1951:       assertEquals(0, functionType0.getExtendedInterfacesCount());
1952:       assertFalse(functionType0.hasCachedValues());
1953:       assertFalse(functionType0.isVoidType());
1954:       assertFalse(functionType0.isStringValueType());
1955:       assertFalse(functionType0.isUnionType());
1956:       assertTrue(functionType0.isObject());
1957:       assertFalse(functionType0.isCheckedUnknownType());
1958:       assertFalse(functionType0.isNoResolvedType());
1959:       assertFalse(functionType0.isEnumType());
1960:       assertFalse(functionType0.isNumberValueType());
1961:       assertTrue(functionType0.isConstructor());
1962:       assertFalse(functionType0.isEnumElementType());
1963:       assertFalse(functionType0.isTemplatizedType());
1964:       assertFalse(functionType0.isAllType());
1965:       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
1966:       assertTrue(functionType0.isFunctionType());
1967:       assertFalse(functionType0.isNoType());
1968:       assertFalse(functionType0.isNoObjectType());
1969:       assertFalse(functionType0.isNullType());
1970:       assertFalse(functionType0.isOrdinaryFunction());
1971:       assertFalse(functionType0.isNominalType());
1972:       assertFalse(functionType0.isNominalConstructor());
1973:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1974:       assertFalse(jSType0.isNumberValueType());
1975:       assertFalse(jSType0.isStringValueType());
1976:       assertFalse(jSType0.isTemplateType());
1977:       assertFalse(jSType0.isFunctionType());
1978:       assertFalse(jSType0.isOrdinaryFunction());
1979:       assertFalse(jSType0.isBooleanValueType());
1980:       assertFalse(jSType0.isNoType());
1981:       assertFalse(jSType0.isResolved());
1982:       assertFalse(jSType0.isNominalType());
1983:       assertFalse(jSType0.isNullType());
1984:       assertFalse(jSType0.isNoObjectType());
1985:       assertFalse(jSType0.isCheckedUnknownType());
1986:       assertFalse(jSType0.isEnumElementType());
1987:       assertFalse(jSType0.isInterface());
1988:       assertFalse(jSType0.isEnumType());
1989:       assertFalse(jSType0.isRecordType());
1990:       assertFalse(jSType0.isNominalConstructor());
1991:       assertFalse(jSType0.isConstructor());
1992:       assertFalse(jSType0.isVoidType());
1993:       assertFalse(jSType0.isAllType());
1994:       assertTrue(jSType0.isUnionType());
1995:       assertFalse(jSType0.isFunctionPrototypeType());
1996:       assertFalse(jSType0.isTemplatizedType());
1997:       assertFalse(jSType0.isNoResolvedType());
1998:       assertSame(enumElementType0, enumElementType1);
1999:       assertSame(enumElementType1, enumElementType0);
2000:       assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
2001:       assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
2002:       assertNotNull(functionType0);
2003:       assertEquals(1, JSType.ENUMDECL);
2004:       assertEquals(0, JSType.NOT_ENUMDECL);
2005:       assertEquals(37, Node.OPT_ARG_NAME);
2006:       assertEquals(2, Node.POST_FLAG);
2007:       assertEquals(32, Node.INCRDECR_PROP);
2008:       assertEquals(56, Node.CHANGE_TIME);
2009:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2010:       assertEquals(47, Node.IS_DISPATCHER);
2011:       assertEquals(12, Node.COLUMN_BITS);
2012:       assertEquals(46, Node.IS_NAMESPACE);
2013:       assertEquals(30, Node.VAR_ARGS_NAME);
2014:       assertEquals(49, Node.DIRECT_EVAL);
2015:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2016:       assertEquals(53, Node.INPUT_ID);
2017:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2018:       assertEquals(52, Node.LENGTH);
2019:       assertEquals(36, Node.QUOTED_PROP);
2020:       assertEquals(57, Node.REFLECTED_OBJECT);
2021:       assertEquals(57, Node.LAST_PROP);
2022:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2023:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2024:       assertEquals(55, Node.INFERRED_FUNCTION);
2025:       assertEquals(39, Node.EMPTY_BLOCK);
2026:       assertEquals(29, Node.JSDOC_INFO_PROP);
2027:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2028:       assertEquals(8, Node.FLAG_NO_THROWS);
2029:       assertEquals(48, Node.DIRECTIVES);
2030:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2031:       assertEquals(4095, Node.COLUMN_MASK);
2032:       assertEquals(40, Node.ORIGINALNAME_PROP);
2033:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2034:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2035:       assertEquals(43, Node.IS_CONSTANT_NAME);
2036:       assertEquals(54, Node.SLASH_V);
2037:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2038:       assertEquals(1, Node.DECR_FLAG);
2039:       assertEquals(50, Node.FREE_CALL);
2040:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2041:       assertEquals(0, JSType.NOT_ENUMDECL);
2042:       assertEquals(1, JSType.ENUMDECL);
2043:       assertEquals(1, JSType.ENUMDECL);
2044:       assertEquals(0, JSType.NOT_ENUMDECL);
2045:       assertEquals(1, JSType.ENUMDECL);
2046:       assertEquals(0, JSType.NOT_ENUMDECL);
2047:       assertEquals(1, JSType.ENUMDECL);
2048:       assertEquals(0, JSType.NOT_ENUMDECL);
2049:       assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
2050:       assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));
2051:   }
2052: }
RegularFileObject[/tmp/EvoSuite_57_1628255783234/com/google/javascript/rhino/Node_57_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_57_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_57_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_57_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:23.869 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertNotNull(node0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean0 = node0.isOnlyModifiesThisCall();
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(boolean0);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.putProp(2769, "8IX=/g0 F~");
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

HashSet<String> hashSet0 = new HashSet<String>();
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());
assertNotNull(hashSet0);
assertFalse(hashSet0.contains("8IX=/g0 F~"));

boolean boolean1 = hashSet0.add((String) null);
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);

node0.removeProp(0);
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean2 = hashSet0.remove("Jcu{'f75U");
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("Jcu{'f75U"));
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);

node0.setDirectives(hashSet0);
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("Jcu{'f75U"));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

node0.addSuppression("Jcu{'f75U");
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

boolean boolean3 = node0.isOr();
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(boolean3);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
assertEquals(16, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

JSTypeNative jSTypeNative0 = JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;
JSType jSType0 = jSTypeRegistry0.getNativeType(jSTypeNative0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isStringValueType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isFunctionType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isBooleanValueType());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isNominalType());
assertFalse(jSType0.isNullType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isCheckedUnknownType());
assertFalse(jSType0.isEnumElementType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isAllType());
assertTrue(jSType0.isUnionType());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isTemplatizedType());
assertFalse(jSType0.isNoResolvedType());
assertNotNull(jSType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);

EnumType enumType0 = jSTypeRegistry0.createEnumType("Not declared as a type name", node0, jSType0);
assertFalse(enumType0.isFunctionType());
assertFalse(enumType0.isOrdinaryFunction());
assertFalse(enumType0.isBooleanValueType());
assertFalse(enumType0.isAllType());
assertFalse(enumType0.isRecordType());
assertFalse(enumType0.isTemplateType());
assertFalse(enumType0.isInterface());
assertFalse(enumType0.matchesNumberContext());
assertTrue(enumType0.matchesStringContext());
assertFalse(enumType0.isResolved());
assertFalse(enumType0.isStringValueType());
assertFalse(enumType0.isNumberValueType());
assertFalse(enumType0.isNoResolvedType());
assertFalse(enumType0.isCheckedUnknownType());
assertTrue(enumType0.isEnumType());
assertFalse(enumType0.isVoidType());
assertFalse(enumType0.isTemplatizedType());
assertFalse(enumType0.isUnionType());
assertTrue(enumType0.matchesObjectContext());
assertFalse(enumType0.isFunctionPrototypeType());
assertFalse(enumType0.isEnumElementType());
assertFalse(enumType0.isNominalConstructor());
assertFalse(enumType0.isConstructor());
assertFalse(enumType0.isNoObjectType());
assertFalse(enumType0.isNoType());
assertFalse(enumType0.isNominalType());
assertTrue(enumType0.isObject());
assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
assertFalse(enumType0.isNullType());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isStringValueType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isFunctionType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isBooleanValueType());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isNominalType());
assertFalse(jSType0.isNullType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isCheckedUnknownType());
assertFalse(jSType0.isEnumElementType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isAllType());
assertTrue(jSType0.isUnionType());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isTemplatizedType());
assertFalse(jSType0.isNoResolvedType());
assertNotNull(enumType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);

EnumElementType enumElementType0 = enumType0.getElementsType();
assertFalse(enumType0.isFunctionType());
assertFalse(enumType0.isOrdinaryFunction());
assertFalse(enumType0.isBooleanValueType());
assertFalse(enumType0.isAllType());
assertFalse(enumType0.isRecordType());
assertFalse(enumType0.isTemplateType());
assertFalse(enumType0.isInterface());
assertFalse(enumType0.matchesNumberContext());
assertTrue(enumType0.matchesStringContext());
assertFalse(enumType0.isResolved());
assertFalse(enumType0.isStringValueType());
assertFalse(enumType0.isNumberValueType());
assertFalse(enumType0.isNoResolvedType());
assertFalse(enumType0.isCheckedUnknownType());
assertTrue(enumType0.isEnumType());
assertFalse(enumType0.isVoidType());
assertFalse(enumType0.isTemplatizedType());
assertFalse(enumType0.isUnionType());
assertTrue(enumType0.matchesObjectContext());
assertFalse(enumType0.isFunctionPrototypeType());
assertFalse(enumType0.isEnumElementType());
assertFalse(enumType0.isNominalConstructor());
assertFalse(enumType0.isConstructor());
assertFalse(enumType0.isNoObjectType());
assertFalse(enumType0.isNoType());
assertFalse(enumType0.isNominalType());
assertTrue(enumType0.isObject());
assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
assertFalse(enumType0.isNullType());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(enumElementType0.isRecordType());
assertFalse(enumElementType0.isInterface());
assertFalse(enumElementType0.isFunctionPrototypeType());
assertFalse(enumElementType0.hasCachedValues());
assertFalse(enumElementType0.isConstructor());
assertFalse(enumElementType0.isFunctionType());
assertFalse(enumElementType0.isTemplateType());
assertTrue(enumElementType0.hasReferenceName());
assertFalse(enumElementType0.isOrdinaryFunction());
assertFalse(enumElementType0.isStringValueType());
assertFalse(enumElementType0.isResolved());
assertFalse(enumElementType0.isVoidType());
assertTrue(enumElementType0.isEnumElementType());
assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
assertFalse(enumElementType0.isNominalConstructor());
assertFalse(enumElementType0.isNumberValueType());
assertFalse(enumElementType0.isUnionType());
assertFalse(enumElementType0.isTemplatizedType());
assertFalse(enumElementType0.isEnumType());
assertFalse(enumElementType0.isNoResolvedType());
assertFalse(enumElementType0.isBooleanValueType());
assertFalse(enumElementType0.isAllType());
assertTrue(enumElementType0.isNominalType());
assertFalse(enumElementType0.isNoType());
assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
assertFalse(enumElementType0.isNullType());
assertFalse(enumElementType0.isNoObjectType());
assertFalse(enumElementType0.isNativeObjectType());
assertFalse(enumElementType0.isCheckedUnknownType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isStringValueType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isFunctionType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isBooleanValueType());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isNominalType());
assertFalse(jSType0.isNullType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isCheckedUnknownType());
assertFalse(jSType0.isEnumElementType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isAllType());
assertTrue(jSType0.isUnionType());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isTemplatizedType());
assertFalse(jSType0.isNoResolvedType());
assertNotNull(enumElementType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);

EnumElementType enumElementType1 = enumElementType0.toMaybeEnumElementType();
assertFalse(enumType0.isFunctionType());
assertFalse(enumType0.isOrdinaryFunction());
assertFalse(enumType0.isBooleanValueType());
assertFalse(enumType0.isAllType());
assertFalse(enumType0.isRecordType());
assertFalse(enumType0.isTemplateType());
assertFalse(enumType0.isInterface());
assertFalse(enumType0.matchesNumberContext());
assertTrue(enumType0.matchesStringContext());
assertFalse(enumType0.isResolved());
assertFalse(enumType0.isStringValueType());
assertFalse(enumType0.isNumberValueType());
assertFalse(enumType0.isNoResolvedType());
assertFalse(enumType0.isCheckedUnknownType());
assertTrue(enumType0.isEnumType());
assertFalse(enumType0.isVoidType());
assertFalse(enumType0.isTemplatizedType());
assertFalse(enumType0.isUnionType());
assertTrue(enumType0.matchesObjectContext());
assertFalse(enumType0.isFunctionPrototypeType());
assertFalse(enumType0.isEnumElementType());
assertFalse(enumType0.isNominalConstructor());
assertFalse(enumType0.isConstructor());
assertFalse(enumType0.isNoObjectType());
assertFalse(enumType0.isNoType());
assertFalse(enumType0.isNominalType());
assertTrue(enumType0.isObject());
assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
assertFalse(enumType0.isNullType());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(enumElementType0.isRecordType());
assertFalse(enumElementType0.isInterface());
assertFalse(enumElementType0.isFunctionPrototypeType());
assertFalse(enumElementType0.hasCachedValues());
assertFalse(enumElementType0.isConstructor());
assertFalse(enumElementType0.isFunctionType());
assertFalse(enumElementType0.isTemplateType());
assertTrue(enumElementType0.hasReferenceName());
assertFalse(enumElementType0.isOrdinaryFunction());
assertFalse(enumElementType0.isStringValueType());
assertFalse(enumElementType0.isResolved());
assertFalse(enumElementType0.isVoidType());
assertTrue(enumElementType0.isEnumElementType());
assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
assertFalse(enumElementType0.isNominalConstructor());
assertFalse(enumElementType0.isNumberValueType());
assertFalse(enumElementType0.isUnionType());
assertFalse(enumElementType0.isTemplatizedType());
assertFalse(enumElementType0.isEnumType());
assertFalse(enumElementType0.isNoResolvedType());
assertFalse(enumElementType0.isBooleanValueType());
assertFalse(enumElementType0.isAllType());
assertTrue(enumElementType0.isNominalType());
assertFalse(enumElementType0.isNoType());
assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
assertFalse(enumElementType0.isNullType());
assertFalse(enumElementType0.isNoObjectType());
assertFalse(enumElementType0.isNativeObjectType());
assertFalse(enumElementType0.isCheckedUnknownType());
assertFalse(enumElementType1.isNumberValueType());
assertFalse(enumElementType1.isUnionType());
assertFalse(enumElementType1.isNoResolvedType());
assertFalse(enumElementType1.isStringValueType());
assertFalse(enumElementType1.isCheckedUnknownType());
assertFalse(enumElementType1.isNominalConstructor());
assertTrue(enumElementType1.isEnumElementType());
assertFalse(enumElementType1.isNoObjectType());
assertFalse(enumElementType1.isNoType());
assertEquals("Not declared as a type name", enumElementType1.getReferenceName());
assertFalse(enumElementType1.isTemplatizedType());
assertFalse(enumElementType1.isAllType());
assertFalse(enumElementType1.isFunctionType());
assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
assertTrue(enumElementType1.isNominalType());
assertFalse(enumElementType1.isNativeObjectType());
assertFalse(enumElementType1.isBooleanValueType());
assertFalse(enumElementType1.isTemplateType());
assertTrue(enumElementType1.hasReferenceName());
assertFalse(enumElementType1.isNullType());
assertFalse(enumElementType1.isResolved());
assertFalse(enumElementType1.hasCachedValues());
assertFalse(enumElementType1.isOrdinaryFunction());
assertFalse(enumElementType1.isFunctionPrototypeType());
assertFalse(enumElementType1.isConstructor());
assertFalse(enumElementType1.isEnumType());
assertFalse(enumElementType1.isInterface());
assertFalse(enumElementType1.isRecordType());
assertFalse(enumElementType1.isVoidType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isStringValueType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isFunctionType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isBooleanValueType());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isNominalType());
assertFalse(jSType0.isNullType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isCheckedUnknownType());
assertFalse(jSType0.isEnumElementType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isAllType());
assertTrue(jSType0.isUnionType());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isTemplatizedType());
assertFalse(jSType0.isNoResolvedType());
assertSame(enumElementType0, enumElementType1);
assertSame(enumElementType1, enumElementType0);
assertNotNull(enumElementType1);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);

JSDocInfo jSDocInfo0 = enumElementType0.getJSDocInfo();
assertFalse(enumType0.isFunctionType());
assertFalse(enumType0.isOrdinaryFunction());
assertFalse(enumType0.isBooleanValueType());
assertFalse(enumType0.isAllType());
assertFalse(enumType0.isRecordType());
assertFalse(enumType0.isTemplateType());
assertFalse(enumType0.isInterface());
assertFalse(enumType0.matchesNumberContext());
assertTrue(enumType0.matchesStringContext());
assertFalse(enumType0.isResolved());
assertFalse(enumType0.isStringValueType());
assertFalse(enumType0.isNumberValueType());
assertFalse(enumType0.isNoResolvedType());
assertFalse(enumType0.isCheckedUnknownType());
assertTrue(enumType0.isEnumType());
assertFalse(enumType0.isVoidType());
assertFalse(enumType0.isTemplatizedType());
assertFalse(enumType0.isUnionType());
assertTrue(enumType0.matchesObjectContext());
assertFalse(enumType0.isFunctionPrototypeType());
assertFalse(enumType0.isEnumElementType());
assertFalse(enumType0.isNominalConstructor());
assertFalse(enumType0.isConstructor());
assertFalse(enumType0.isNoObjectType());
assertFalse(enumType0.isNoType());
assertFalse(enumType0.isNominalType());
assertTrue(enumType0.isObject());
assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
assertFalse(enumType0.isNullType());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(enumElementType0.isRecordType());
assertFalse(enumElementType0.isInterface());
assertFalse(enumElementType0.isFunctionPrototypeType());
assertFalse(enumElementType0.hasCachedValues());
assertFalse(enumElementType0.isConstructor());
assertFalse(enumElementType0.isFunctionType());
assertFalse(enumElementType0.isTemplateType());
assertTrue(enumElementType0.hasReferenceName());
assertFalse(enumElementType0.isOrdinaryFunction());
assertFalse(enumElementType0.isStringValueType());
assertFalse(enumElementType0.isResolved());
assertFalse(enumElementType0.isVoidType());
assertTrue(enumElementType0.isEnumElementType());
assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
assertFalse(enumElementType0.isNominalConstructor());
assertFalse(enumElementType0.isNumberValueType());
assertFalse(enumElementType0.isUnionType());
assertFalse(enumElementType0.isTemplatizedType());
assertFalse(enumElementType0.isEnumType());
assertFalse(enumElementType0.isNoResolvedType());
assertFalse(enumElementType0.isBooleanValueType());
assertFalse(enumElementType0.isAllType());
assertTrue(enumElementType0.isNominalType());
assertFalse(enumElementType0.isNoType());
assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
assertFalse(enumElementType0.isNullType());
assertFalse(enumElementType0.isNoObjectType());
assertFalse(enumElementType0.isNativeObjectType());
assertFalse(enumElementType0.isCheckedUnknownType());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isStringValueType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isFunctionType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isBooleanValueType());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isNominalType());
assertFalse(jSType0.isNullType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isCheckedUnknownType());
assertFalse(jSType0.isEnumElementType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isAllType());
assertTrue(jSType0.isUnionType());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isTemplatizedType());
assertFalse(jSType0.isNoResolvedType());
assertSame(enumElementType0, enumElementType1);
assertNull(jSDocInfo0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);

ObjectType objectType0 = jSTypeRegistry0.createAnonymousObjectType((JSDocInfo) null);
assertFalse(objectType0.isTemplateType());
assertEquals(BooleanLiteralSet.TRUE, objectType0.getPossibleToBooleanOutcomes());
assertFalse(objectType0.isNativeObjectType());
assertFalse(objectType0.isBooleanValueType());
assertFalse(objectType0.isFunctionType());
assertFalse(objectType0.isAllType());
assertFalse(objectType0.isEnumElementType());
assertFalse(objectType0.isConstructor());
assertFalse(objectType0.isEnumType());
assertFalse(objectType0.isNominalConstructor());
assertFalse(objectType0.isRecordType());
assertFalse(objectType0.isFunctionPrototypeType());
assertFalse(objectType0.hasCachedValues());
assertFalse(objectType0.isNullType());
assertFalse(objectType0.isCheckedUnknownType());
assertFalse(objectType0.isNoResolvedType());
assertFalse(objectType0.isUnionType());
assertTrue(objectType0.isObject());
assertFalse(objectType0.isStringValueType());
assertFalse(objectType0.isNoObjectType());
assertFalse(objectType0.isNoType());
assertFalse(objectType0.isNumberValueType());
assertFalse(objectType0.isNominalType());
assertFalse(objectType0.isVoidType());
assertFalse(objectType0.isTemplatizedType());
assertFalse(objectType0.isInterface());
assertFalse(objectType0.hasReferenceName());
assertFalse(objectType0.isResolved());
assertFalse(objectType0.isOrdinaryFunction());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(objectType0);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);

TemplateType templateType0 = jSTypeRegistry0.createTemplateType("");
assertTrue(templateType0.isObject());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.isBooleanValueType());
assertFalse(templateType0.isUnionType());
assertFalse(templateType0.isNullType());
assertTrue(templateType0.isTemplateType());
assertEquals("", templateType0.getReferenceName());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isEnumType());
assertFalse(templateType0.isTemplatizedType());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.isRecordType());
assertFalse(templateType0.isEnumElementType());
assertFalse(templateType0.isResolved());
assertFalse(templateType0.isStringValueType());
assertFalse(templateType0.isFunctionType());
assertFalse(templateType0.isNominalConstructor());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(templateType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);

JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry1);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));

JSType[] jSTypeArray0 = new JSType[1];
jSTypeArray0[0] = (JSType) templateType0;
FunctionType functionType0 = jSTypeRegistry1.createConstructorType((JSType) enumElementType1, true, jSTypeArray0);
assertEquals(1, jSTypeArray0.length);
assertFalse(enumType0.isFunctionType());
assertFalse(enumType0.isOrdinaryFunction());
assertFalse(enumType0.isBooleanValueType());
assertFalse(enumType0.isAllType());
assertFalse(enumType0.isRecordType());
assertFalse(enumType0.isTemplateType());
assertFalse(enumType0.isInterface());
assertFalse(enumType0.matchesNumberContext());
assertTrue(enumType0.matchesStringContext());
assertFalse(enumType0.isResolved());
assertFalse(enumType0.isStringValueType());
assertFalse(enumType0.isNumberValueType());
assertFalse(enumType0.isNoResolvedType());
assertFalse(enumType0.isCheckedUnknownType());
assertTrue(enumType0.isEnumType());
assertFalse(enumType0.isVoidType());
assertFalse(enumType0.isTemplatizedType());
assertFalse(enumType0.isUnionType());
assertTrue(enumType0.matchesObjectContext());
assertFalse(enumType0.isFunctionPrototypeType());
assertFalse(enumType0.isEnumElementType());
assertFalse(enumType0.isNominalConstructor());
assertFalse(enumType0.isConstructor());
assertFalse(enumType0.isNoObjectType());
assertFalse(enumType0.isNoType());
assertFalse(enumType0.isNominalType());
assertTrue(enumType0.isObject());
assertEquals(BooleanLiteralSet.TRUE, enumType0.getPossibleToBooleanOutcomes());
assertFalse(enumType0.isNullType());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(2468, node0.getType());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(enumElementType0.isRecordType());
assertFalse(enumElementType0.isInterface());
assertFalse(enumElementType0.isFunctionPrototypeType());
assertFalse(enumElementType0.hasCachedValues());
assertFalse(enumElementType0.isConstructor());
assertFalse(enumElementType0.isFunctionType());
assertFalse(enumElementType0.isTemplateType());
assertTrue(enumElementType0.hasReferenceName());
assertFalse(enumElementType0.isOrdinaryFunction());
assertFalse(enumElementType0.isStringValueType());
assertFalse(enumElementType0.isResolved());
assertFalse(enumElementType0.isVoidType());
assertTrue(enumElementType0.isEnumElementType());
assertEquals("Not declared as a type name", enumElementType0.getReferenceName());
assertFalse(enumElementType0.isNominalConstructor());
assertFalse(enumElementType0.isNumberValueType());
assertFalse(enumElementType0.isUnionType());
assertFalse(enumElementType0.isTemplatizedType());
assertFalse(enumElementType0.isEnumType());
assertFalse(enumElementType0.isNoResolvedType());
assertFalse(enumElementType0.isBooleanValueType());
assertFalse(enumElementType0.isAllType());
assertTrue(enumElementType0.isNominalType());
assertFalse(enumElementType0.isNoType());
assertEquals(BooleanLiteralSet.TRUE, enumElementType0.getPossibleToBooleanOutcomes());
assertFalse(enumElementType0.isNullType());
assertFalse(enumElementType0.isNoObjectType());
assertFalse(enumElementType0.isNativeObjectType());
assertFalse(enumElementType0.isCheckedUnknownType());
assertFalse(enumElementType1.isNumberValueType());
assertFalse(enumElementType1.isUnionType());
assertFalse(enumElementType1.isNoResolvedType());
assertFalse(enumElementType1.isStringValueType());
assertFalse(enumElementType1.isCheckedUnknownType());
assertFalse(enumElementType1.isNominalConstructor());
assertTrue(enumElementType1.isEnumElementType());
assertFalse(enumElementType1.isNoObjectType());
assertFalse(enumElementType1.isNoType());
assertEquals("Not declared as a type name", enumElementType1.getReferenceName());
assertFalse(enumElementType1.isTemplatizedType());
assertFalse(enumElementType1.isAllType());
assertFalse(enumElementType1.isFunctionType());
assertEquals(BooleanLiteralSet.TRUE, enumElementType1.getPossibleToBooleanOutcomes());
assertTrue(enumElementType1.isNominalType());
assertFalse(enumElementType1.isNativeObjectType());
assertFalse(enumElementType1.isBooleanValueType());
assertFalse(enumElementType1.isTemplateType());
assertTrue(enumElementType1.hasReferenceName());
assertFalse(enumElementType1.isNullType());
assertFalse(enumElementType1.isResolved());
assertFalse(enumElementType1.hasCachedValues());
assertFalse(enumElementType1.isOrdinaryFunction());
assertFalse(enumElementType1.isFunctionPrototypeType());
assertFalse(enumElementType1.isConstructor());
assertFalse(enumElementType1.isEnumType());
assertFalse(enumElementType1.isInterface());
assertFalse(enumElementType1.isRecordType());
assertFalse(enumElementType1.isVoidType());
assertFalse(jSTypeRegistry1.shouldTolerateUndefinedValues());
assertFalse(functionType0.isInterface());
assertFalse(functionType0.isReturnTypeInferred());
assertFalse(functionType0.isResolved());
assertFalse(functionType0.isBooleanValueType());
assertFalse(functionType0.isRecordType());
assertTrue(functionType0.canBeCalled());
assertFalse(functionType0.isTemplateType());
assertFalse(functionType0.isFunctionPrototypeType());
assertTrue(functionType0.hasInstanceType());
assertEquals(0, functionType0.getExtendedInterfacesCount());
assertFalse(functionType0.hasCachedValues());
assertFalse(functionType0.isVoidType());
assertFalse(functionType0.isStringValueType());
assertFalse(functionType0.isUnionType());
assertTrue(functionType0.isObject());
assertFalse(functionType0.isCheckedUnknownType());
assertFalse(functionType0.isNoResolvedType());
assertFalse(functionType0.isEnumType());
assertFalse(functionType0.isNumberValueType());
assertTrue(functionType0.isConstructor());
assertFalse(functionType0.isEnumElementType());
assertFalse(functionType0.isTemplatizedType());
assertFalse(functionType0.isAllType());
assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
assertTrue(functionType0.isFunctionType());
assertFalse(functionType0.isNoType());
assertFalse(functionType0.isNoObjectType());
assertFalse(functionType0.isNullType());
assertFalse(functionType0.isOrdinaryFunction());
assertFalse(functionType0.isNominalType());
assertFalse(functionType0.isNominalConstructor());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(jSType0.isNumberValueType());
assertFalse(jSType0.isStringValueType());
assertFalse(jSType0.isTemplateType());
assertFalse(jSType0.isFunctionType());
assertFalse(jSType0.isOrdinaryFunction());
assertFalse(jSType0.isBooleanValueType());
assertFalse(jSType0.isNoType());
assertFalse(jSType0.isResolved());
assertFalse(jSType0.isNominalType());
assertFalse(jSType0.isNullType());
assertFalse(jSType0.isNoObjectType());
assertFalse(jSType0.isCheckedUnknownType());
assertFalse(jSType0.isEnumElementType());
assertFalse(jSType0.isInterface());
assertFalse(jSType0.isEnumType());
assertFalse(jSType0.isRecordType());
assertFalse(jSType0.isNominalConstructor());
assertFalse(jSType0.isConstructor());
assertFalse(jSType0.isVoidType());
assertFalse(jSType0.isAllType());
assertTrue(jSType0.isUnionType());
assertFalse(jSType0.isFunctionPrototypeType());
assertFalse(jSType0.isTemplatizedType());
assertFalse(jSType0.isNoResolvedType());
assertSame(enumElementType0, enumElementType1);
assertSame(enumElementType1, enumElementType0);
assertNotSame(jSTypeRegistry1, jSTypeRegistry0);
assertNotSame(jSTypeRegistry0, jSTypeRegistry1);
assertNotNull(functionType0);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertFalse(jSTypeRegistry1.equals((Object)jSTypeRegistry0));
assertFalse(jSTypeRegistry0.equals((Object)jSTypeRegistry1));


[MASTER] 13:16:27.442 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_71_1628255786844/com/google/javascript/rhino/Node_71_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_71_1628255786844/com/google/javascript/rhino/Node_71_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:27.442 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:27.442 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:27.444 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 848
[MASTER] 13:16:27.446 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_71_1628255786844/com/google/javascript/rhino/Node_71_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.HashSet;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_71_tmp__ESTest extends Node_71_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
23:       assertFalse(node0.isTry());
24:       assertFalse(node0.isVoid());
25:       assertFalse(node0.isArrayLit());
26:       assertFalse(node0.isDebugger());
27:       assertFalse(node0.isFunction());
28:       assertFalse(node0.isRegExp());
29:       assertEquals(2468, node0.getType());
30:       assertFalse(node0.isDelProp());
31:       assertFalse(node0.isGetterDef());
32:       assertFalse(node0.isNE());
33:       assertFalse(node0.isTrue());
34:       assertFalse(node0.isIf());
35:       assertFalse(node0.isCatch());
36:       assertFalse(node0.isFor());
37:       assertFalse(node0.isCase());
38:       assertFalse(node0.isAdd());
39:       assertEquals((-1), node0.getCharno());
40:       assertFalse(node0.isNew());
41:       assertFalse(node0.isCall());
42:       assertFalse(node0.isName());
43:       assertFalse(node0.isBreak());
44:       assertFalse(node0.isSwitch());
45:       assertFalse(node0.isNull());
46:       assertFalse(node0.isStringKey());
47:       assertFalse(node0.isParamList());
48:       assertFalse(node0.isAssignAdd());
49:       assertFalse(node0.isOr());
50:       assertFalse(node0.isLabel());
51:       assertEquals(0, node0.getChildCount());
52:       assertFalse(node0.isEmpty());
53:       assertFalse(node0.isDo());
54:       assertFalse(node0.isVar());
55:       assertFalse(node0.isDefaultCase());
56:       assertFalse(node0.hasOneChild());
57:       assertFalse(node0.isScript());
58:       assertFalse(node0.isCast());
59:       assertFalse(node0.isExprResult());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isGetElem());
63:       assertEquals((-1), node0.getSourcePosition());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isReturn());
66:       assertFalse(node0.isGetProp());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.isComma());
69:       assertFalse(node0.hasMoreThanOneChild());
70:       assertFalse(node0.isNumber());
71:       assertFalse(node0.isObjectLit());
72:       assertFalse(node0.isTypeOf());
73:       assertFalse(node0.isInstanceOf());
74:       assertFalse(node0.isWith());
75:       assertFalse(node0.isAssign());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isHook());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isWhile());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isString());
84:       assertFalse(node0.isSetterDef());
85:       assertFalse(node0.isIn());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isFalse());
88:       assertFalse(node0.isThrow());
89:       assertNotNull(node0);
90:       assertEquals(40, Node.ORIGINALNAME_PROP);
91:       assertEquals(57, Node.REFLECTED_OBJECT);
92:       assertEquals(8, Node.FLAG_NO_THROWS);
93:       assertEquals(39, Node.EMPTY_BLOCK);
94:       assertEquals(54, Node.SLASH_V);
95:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
96:       assertEquals(52, Node.LENGTH);
97:       assertEquals(50, Node.FREE_CALL);
98:       assertEquals(4095, Node.COLUMN_MASK);
99:       assertEquals(12, Node.COLUMN_BITS);
100:       assertEquals(32, Node.INCRDECR_PROP);
101:       assertEquals(48, Node.DIRECTIVES);
102:       assertEquals(49, Node.DIRECT_EVAL);
103:       assertEquals(1, Node.DECR_FLAG);
104:       assertEquals(37, Node.OPT_ARG_NAME);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(56, Node.CHANGE_TIME);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(51, Node.STATIC_SOURCE_FILE);
116:       assertEquals(36, Node.QUOTED_PROP);
117:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(15, Node.NO_SIDE_EFFECTS);
121:       assertEquals(57, Node.LAST_PROP);
122:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertEquals(2, Node.POST_FLAG);
125:       assertEquals(30, Node.VAR_ARGS_NAME);
126:       
127:       boolean boolean0 = node0.isOnlyModifiesThisCall();
128:       assertFalse(node0.isTry());
129:       assertFalse(node0.isVoid());
130:       assertFalse(node0.isArrayLit());
131:       assertFalse(node0.isDebugger());
132:       assertFalse(node0.isFunction());
133:       assertFalse(node0.isRegExp());
134:       assertEquals(2468, node0.getType());
135:       assertFalse(node0.isDelProp());
136:       assertFalse(node0.isGetterDef());
137:       assertFalse(node0.isNE());
138:       assertFalse(node0.isTrue());
139:       assertFalse(node0.isIf());
140:       assertFalse(node0.isCatch());
141:       assertFalse(node0.isFor());
142:       assertFalse(node0.isCase());
143:       assertFalse(node0.isAdd());
144:       assertEquals((-1), node0.getCharno());
145:       assertFalse(node0.isNew());
146:       assertFalse(node0.isCall());
147:       assertFalse(node0.isName());
148:       assertFalse(node0.isBreak());
149:       assertFalse(node0.isSwitch());
150:       assertFalse(node0.isNull());
151:       assertFalse(node0.isStringKey());
152:       assertFalse(node0.isParamList());
153:       assertFalse(node0.isAssignAdd());
154:       assertFalse(node0.isOr());
155:       assertFalse(node0.isLabel());
156:       assertEquals(0, node0.getChildCount());
157:       assertFalse(node0.isEmpty());
158:       assertFalse(node0.isDo());
159:       assertFalse(node0.isVar());
160:       assertFalse(node0.isDefaultCase());
161:       assertFalse(node0.hasOneChild());
162:       assertFalse(node0.isScript());
163:       assertFalse(node0.isCast());
164:       assertFalse(node0.isExprResult());
165:       assertFalse(node0.isLabelName());
166:       assertFalse(node0.isNot());
167:       assertFalse(node0.isGetElem());
168:       assertEquals((-1), node0.getSourcePosition());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isReturn());
171:       assertFalse(node0.isGetProp());
172:       assertEquals((-1), node0.getLineno());
173:       assertFalse(node0.isComma());
174:       assertFalse(node0.hasMoreThanOneChild());
175:       assertFalse(node0.isNumber());
176:       assertFalse(node0.isObjectLit());
177:       assertFalse(node0.isTypeOf());
178:       assertFalse(node0.isInstanceOf());
179:       assertFalse(node0.isWith());
180:       assertFalse(node0.isAssign());
181:       assertFalse(node0.hasChildren());
182:       assertFalse(node0.isDec());
183:       assertFalse(node0.isHook());
184:       assertFalse(node0.isThis());
185:       assertFalse(node0.isWhile());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isInc());
188:       assertFalse(node0.isString());
189:       assertFalse(node0.isSetterDef());
190:       assertFalse(node0.isIn());
191:       assertFalse(node0.isContinue());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isThrow());
194:       assertFalse(boolean0);
195:       assertEquals(40, Node.ORIGINALNAME_PROP);
196:       assertEquals(57, Node.REFLECTED_OBJECT);
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(39, Node.EMPTY_BLOCK);
199:       assertEquals(54, Node.SLASH_V);
200:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
201:       assertEquals(52, Node.LENGTH);
202:       assertEquals(50, Node.FREE_CALL);
203:       assertEquals(4095, Node.COLUMN_MASK);
204:       assertEquals(12, Node.COLUMN_BITS);
205:       assertEquals(32, Node.INCRDECR_PROP);
206:       assertEquals(48, Node.DIRECTIVES);
207:       assertEquals(49, Node.DIRECT_EVAL);
208:       assertEquals(1, Node.DECR_FLAG);
209:       assertEquals(37, Node.OPT_ARG_NAME);
210:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
212:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
214:       assertEquals(29, Node.JSDOC_INFO_PROP);
215:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(56, Node.CHANGE_TIME);
219:       assertEquals(53, Node.INPUT_ID);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertEquals(36, Node.QUOTED_PROP);
222:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
223:       assertEquals(55, Node.INFERRED_FUNCTION);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(15, Node.NO_SIDE_EFFECTS);
226:       assertEquals(57, Node.LAST_PROP);
227:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       assertEquals(2, Node.POST_FLAG);
230:       assertEquals(30, Node.VAR_ARGS_NAME);
231:       
232:       node0.putProp(2769, "8IX=/g0 F~");
233:       assertFalse(node0.isTry());
234:       assertFalse(node0.isVoid());
235:       assertFalse(node0.isArrayLit());
236:       assertFalse(node0.isDebugger());
237:       assertFalse(node0.isFunction());
238:       assertFalse(node0.isRegExp());
239:       assertEquals(2468, node0.getType());
240:       assertFalse(node0.isDelProp());
241:       assertFalse(node0.isGetterDef());
242:       assertFalse(node0.isNE());
243:       assertFalse(node0.isTrue());
244:       assertFalse(node0.isIf());
245:       assertFalse(node0.isCatch());
246:       assertFalse(node0.isFor());
247:       assertFalse(node0.isCase());
248:       assertFalse(node0.isAdd());
249:       assertEquals((-1), node0.getCharno());
250:       assertFalse(node0.isNew());
251:       assertFalse(node0.isCall());
252:       assertFalse(node0.isName());
253:       assertFalse(node0.isBreak());
254:       assertFalse(node0.isSwitch());
255:       assertFalse(node0.isNull());
256:       assertFalse(node0.isStringKey());
257:       assertFalse(node0.isParamList());
258:       assertFalse(node0.isAssignAdd());
259:       assertFalse(node0.isOr());
260:       assertFalse(node0.isLabel());
261:       assertEquals(0, node0.getChildCount());
262:       assertFalse(node0.isEmpty());
263:       assertFalse(node0.isDo());
264:       assertFalse(node0.isVar());
265:       assertFalse(node0.isDefaultCase());
266:       assertFalse(node0.hasOneChild());
267:       assertFalse(node0.isScript());
268:       assertFalse(node0.isCast());
269:       assertFalse(node0.isExprResult());
270:       assertFalse(node0.isLabelName());
271:       assertFalse(node0.isNot());
272:       assertFalse(node0.isGetElem());
273:       assertEquals((-1), node0.getSourcePosition());
274:       assertFalse(node0.isAnd());
275:       assertFalse(node0.isReturn());
276:       assertFalse(node0.isGetProp());
277:       assertEquals((-1), node0.getLineno());
278:       assertFalse(node0.isComma());
279:       assertFalse(node0.hasMoreThanOneChild());
280:       assertFalse(node0.isNumber());
281:       assertFalse(node0.isObjectLit());
282:       assertFalse(node0.isTypeOf());
283:       assertFalse(node0.isInstanceOf());
284:       assertFalse(node0.isWith());
285:       assertFalse(node0.isAssign());
286:       assertFalse(node0.hasChildren());
287:       assertFalse(node0.isDec());
288:       assertFalse(node0.isHook());
289:       assertFalse(node0.isThis());
290:       assertFalse(node0.isWhile());
291:       assertFalse(node0.isBlock());
292:       assertFalse(node0.isInc());
293:       assertFalse(node0.isString());
294:       assertFalse(node0.isSetterDef());
295:       assertFalse(node0.isIn());
296:       assertFalse(node0.isContinue());
297:       assertFalse(node0.isFalse());
298:       assertFalse(node0.isThrow());
299:       assertEquals(40, Node.ORIGINALNAME_PROP);
300:       assertEquals(57, Node.REFLECTED_OBJECT);
301:       assertEquals(8, Node.FLAG_NO_THROWS);
302:       assertEquals(39, Node.EMPTY_BLOCK);
303:       assertEquals(54, Node.SLASH_V);
304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
305:       assertEquals(52, Node.LENGTH);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(12, Node.COLUMN_BITS);
309:       assertEquals(32, Node.INCRDECR_PROP);
310:       assertEquals(48, Node.DIRECTIVES);
311:       assertEquals(49, Node.DIRECT_EVAL);
312:       assertEquals(1, Node.DECR_FLAG);
313:       assertEquals(37, Node.OPT_ARG_NAME);
314:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
316:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
317:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
320:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
321:       assertEquals(43, Node.IS_CONSTANT_NAME);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(53, Node.INPUT_ID);
324:       assertEquals(51, Node.STATIC_SOURCE_FILE);
325:       assertEquals(36, Node.QUOTED_PROP);
326:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(46, Node.IS_NAMESPACE);
329:       assertEquals(15, Node.NO_SIDE_EFFECTS);
330:       assertEquals(57, Node.LAST_PROP);
331:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
332:       assertEquals(47, Node.IS_DISPATCHER);
333:       assertEquals(2, Node.POST_FLAG);
334:       assertEquals(30, Node.VAR_ARGS_NAME);
335:       
336:       HashSet<String> hashSet0 = new HashSet<String>();
337:       assertEquals(0, hashSet0.size());
338:       assertTrue(hashSet0.isEmpty());
339:       assertNotNull(hashSet0);
340:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
341:       
342:       boolean boolean1 = hashSet0.add((String) null);
343:       assertFalse(hashSet0.isEmpty());
344:       assertEquals(1, hashSet0.size());
345:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
346:       assertTrue(boolean1);
347:       
348:       boolean boolean2 = hashSet0.add((String) null);
349:       assertFalse(hashSet0.isEmpty());
350:       assertEquals(1, hashSet0.size());
351:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
352:       assertFalse(boolean2);
353:       
354:       node0.removeProp(0);
355:       assertFalse(node0.isTry());
356:       assertFalse(node0.isVoid());
357:       assertFalse(node0.isArrayLit());
358:       assertFalse(node0.isDebugger());
359:       assertFalse(node0.isFunction());
360:       assertFalse(node0.isRegExp());
361:       assertEquals(2468, node0.getType());
362:       assertFalse(node0.isDelProp());
363:       assertFalse(node0.isGetterDef());
364:       assertFalse(node0.isNE());
365:       assertFalse(node0.isTrue());
366:       assertFalse(node0.isIf());
367:       assertFalse(node0.isCatch());
368:       assertFalse(node0.isFor());
369:       assertFalse(node0.isCase());
370:       assertFalse(node0.isAdd());
371:       assertEquals((-1), node0.getCharno());
372:       assertFalse(node0.isNew());
373:       assertFalse(node0.isCall());
374:       assertFalse(node0.isName());
375:       assertFalse(node0.isBreak());
376:       assertFalse(node0.isSwitch());
377:       assertFalse(node0.isNull());
378:       assertFalse(node0.isStringKey());
379:       assertFalse(node0.isParamList());
380:       assertFalse(node0.isAssignAdd());
381:       assertFalse(node0.isOr());
382:       assertFalse(node0.isLabel());
383:       assertEquals(0, node0.getChildCount());
384:       assertFalse(node0.isEmpty());
385:       assertFalse(node0.isDo());
386:       assertFalse(node0.isVar());
387:       assertFalse(node0.isDefaultCase());
388:       assertFalse(node0.hasOneChild());
389:       assertFalse(node0.isScript());
390:       assertFalse(node0.isCast());
391:       assertFalse(node0.isExprResult());
392:       assertFalse(node0.isLabelName());
393:       assertFalse(node0.isNot());
394:       assertFalse(node0.isGetElem());
395:       assertEquals((-1), node0.getSourcePosition());
396:       assertFalse(node0.isAnd());
397:       assertFalse(node0.isReturn());
398:       assertFalse(node0.isGetProp());
399:       assertEquals((-1), node0.getLineno());
400:       assertFalse(node0.isComma());
401:       assertFalse(node0.hasMoreThanOneChild());
402:       assertFalse(node0.isNumber());
403:       assertFalse(node0.isObjectLit());
404:       assertFalse(node0.isTypeOf());
405:       assertFalse(node0.isInstanceOf());
406:       assertFalse(node0.isWith());
407:       assertFalse(node0.isAssign());
408:       assertFalse(node0.hasChildren());
409:       assertFalse(node0.isDec());
410:       assertFalse(node0.isHook());
411:       assertFalse(node0.isThis());
412:       assertFalse(node0.isWhile());
413:       assertFalse(node0.isBlock());
414:       assertFalse(node0.isInc());
415:       assertFalse(node0.isString());
416:       assertFalse(node0.isSetterDef());
417:       assertFalse(node0.isIn());
418:       assertFalse(node0.isContinue());
419:       assertFalse(node0.isFalse());
420:       assertFalse(node0.isThrow());
421:       assertEquals(40, Node.ORIGINALNAME_PROP);
422:       assertEquals(57, Node.REFLECTED_OBJECT);
423:       assertEquals(8, Node.FLAG_NO_THROWS);
424:       assertEquals(39, Node.EMPTY_BLOCK);
425:       assertEquals(54, Node.SLASH_V);
426:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
427:       assertEquals(52, Node.LENGTH);
428:       assertEquals(50, Node.FREE_CALL);
429:       assertEquals(4095, Node.COLUMN_MASK);
430:       assertEquals(12, Node.COLUMN_BITS);
431:       assertEquals(32, Node.INCRDECR_PROP);
432:       assertEquals(48, Node.DIRECTIVES);
433:       assertEquals(49, Node.DIRECT_EVAL);
434:       assertEquals(1, Node.DECR_FLAG);
435:       assertEquals(37, Node.OPT_ARG_NAME);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
440:       assertEquals(29, Node.JSDOC_INFO_PROP);
441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
442:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
443:       assertEquals(43, Node.IS_CONSTANT_NAME);
444:       assertEquals(56, Node.CHANGE_TIME);
445:       assertEquals(53, Node.INPUT_ID);
446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
447:       assertEquals(36, Node.QUOTED_PROP);
448:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
449:       assertEquals(55, Node.INFERRED_FUNCTION);
450:       assertEquals(46, Node.IS_NAMESPACE);
451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
452:       assertEquals(57, Node.LAST_PROP);
453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(2, Node.POST_FLAG);
456:       assertEquals(30, Node.VAR_ARGS_NAME);
457:       
458:       boolean boolean3 = hashSet0.remove("Jcu{'f75U");
459:       assertFalse(hashSet0.isEmpty());
460:       assertEquals(1, hashSet0.size());
461:       assertFalse(hashSet0.contains("Jcu{'f75U"));
462:       assertFalse(boolean3);
463:       
464:       node0.setDirectives(hashSet0);
465:       assertFalse(node0.isTry());
466:       assertFalse(node0.isVoid());
467:       assertFalse(node0.isArrayLit());
468:       assertFalse(node0.isDebugger());
469:       assertFalse(node0.isFunction());
470:       assertFalse(node0.isRegExp());
471:       assertEquals(2468, node0.getType());
472:       assertFalse(node0.isDelProp());
473:       assertFalse(node0.isGetterDef());
474:       assertFalse(node0.isNE());
475:       assertFalse(node0.isTrue());
476:       assertFalse(node0.isIf());
477:       assertFalse(node0.isCatch());
478:       assertFalse(node0.isFor());
479:       assertFalse(node0.isCase());
480:       assertFalse(node0.isAdd());
481:       assertEquals((-1), node0.getCharno());
482:       assertFalse(node0.isNew());
483:       assertFalse(node0.isCall());
484:       assertFalse(node0.isName());
485:       assertFalse(node0.isBreak());
486:       assertFalse(node0.isSwitch());
487:       assertFalse(node0.isNull());
488:       assertFalse(node0.isStringKey());
489:       assertFalse(node0.isParamList());
490:       assertFalse(node0.isAssignAdd());
491:       assertFalse(node0.isOr());
492:       assertFalse(node0.isLabel());
493:       assertEquals(0, node0.getChildCount());
494:       assertFalse(node0.isEmpty());
495:       assertFalse(node0.isDo());
496:       assertFalse(node0.isVar());
497:       assertFalse(node0.isDefaultCase());
498:       assertFalse(node0.hasOneChild());
499:       assertFalse(node0.isScript());
500:       assertFalse(node0.isCast());
501:       assertFalse(node0.isExprResult());
502:       assertFalse(node0.isLabelName());
503:       assertFalse(node0.isNot());
504:       assertFalse(node0.isGetElem());
505:       assertEquals((-1), node0.getSourcePosition());
506:       assertFalse(node0.isAnd());
507:       assertFalse(node0.isReturn());
508:       assertFalse(node0.isGetProp());
509:       assertEquals((-1), node0.getLineno());
510:       assertFalse(node0.isComma());
511:       assertFalse(node0.hasMoreThanOneChild());
512:       assertFalse(node0.isNumber());
513:       assertFalse(node0.isObjectLit());
514:       assertFalse(node0.isTypeOf());
515:       assertFalse(node0.isInstanceOf());
516:       assertFalse(node0.isWith());
517:       assertFalse(node0.isAssign());
518:       assertFalse(node0.hasChildren());
519:       assertFalse(node0.isDec());
520:       assertFalse(node0.isHook());
521:       assertFalse(node0.isThis());
522:       assertFalse(node0.isWhile());
523:       assertFalse(node0.isBlock());
524:       assertFalse(node0.isInc());
525:       assertFalse(node0.isString());
526:       assertFalse(node0.isSetterDef());
527:       assertFalse(node0.isIn());
528:       assertFalse(node0.isContinue());
529:       assertFalse(node0.isFalse());
530:       assertFalse(node0.isThrow());
531:       assertFalse(hashSet0.isEmpty());
532:       assertEquals(1, hashSet0.size());
533:       assertFalse(hashSet0.contains("Jcu{'f75U"));
534:       assertEquals(40, Node.ORIGINALNAME_PROP);
535:       assertEquals(57, Node.REFLECTED_OBJECT);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(39, Node.EMPTY_BLOCK);
538:       assertEquals(54, Node.SLASH_V);
539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
540:       assertEquals(52, Node.LENGTH);
541:       assertEquals(50, Node.FREE_CALL);
542:       assertEquals(4095, Node.COLUMN_MASK);
543:       assertEquals(12, Node.COLUMN_BITS);
544:       assertEquals(32, Node.INCRDECR_PROP);
545:       assertEquals(48, Node.DIRECTIVES);
546:       assertEquals(49, Node.DIRECT_EVAL);
547:       assertEquals(1, Node.DECR_FLAG);
548:       assertEquals(37, Node.OPT_ARG_NAME);
549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
550:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
551:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
552:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
555:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
556:       assertEquals(43, Node.IS_CONSTANT_NAME);
557:       assertEquals(56, Node.CHANGE_TIME);
558:       assertEquals(53, Node.INPUT_ID);
559:       assertEquals(51, Node.STATIC_SOURCE_FILE);
560:       assertEquals(36, Node.QUOTED_PROP);
561:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
562:       assertEquals(55, Node.INFERRED_FUNCTION);
563:       assertEquals(46, Node.IS_NAMESPACE);
564:       assertEquals(15, Node.NO_SIDE_EFFECTS);
565:       assertEquals(57, Node.LAST_PROP);
566:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
567:       assertEquals(47, Node.IS_DISPATCHER);
568:       assertEquals(2, Node.POST_FLAG);
569:       assertEquals(30, Node.VAR_ARGS_NAME);
570:       
571:       node0.addSuppression("Jcu{'f75U");
572:       assertFalse(node0.isTry());
573:       assertFalse(node0.isVoid());
574:       assertFalse(node0.isArrayLit());
575:       assertFalse(node0.isDebugger());
576:       assertFalse(node0.isFunction());
577:       assertFalse(node0.isRegExp());
578:       assertEquals(2468, node0.getType());
579:       assertFalse(node0.isDelProp());
580:       assertFalse(node0.isGetterDef());
581:       assertFalse(node0.isNE());
582:       assertFalse(node0.isTrue());
583:       assertFalse(node0.isIf());
584:       assertFalse(node0.isCatch());
585:       assertFalse(node0.isFor());
586:       assertFalse(node0.isCase());
587:       assertFalse(node0.isAdd());
588:       assertEquals((-1), node0.getCharno());
589:       assertFalse(node0.isNew());
590:       assertFalse(node0.isCall());
591:       assertFalse(node0.isName());
592:       assertFalse(node0.isBreak());
593:       assertFalse(node0.isSwitch());
594:       assertFalse(node0.isNull());
595:       assertFalse(node0.isStringKey());
596:       assertFalse(node0.isParamList());
597:       assertFalse(node0.isAssignAdd());
598:       assertFalse(node0.isOr());
599:       assertFalse(node0.isLabel());
600:       assertEquals(0, node0.getChildCount());
601:       assertFalse(node0.isEmpty());
602:       assertFalse(node0.isDo());
603:       assertFalse(node0.isVar());
604:       assertFalse(node0.isDefaultCase());
605:       assertFalse(node0.hasOneChild());
606:       assertFalse(node0.isScript());
607:       assertFalse(node0.isCast());
608:       assertFalse(node0.isExprResult());
609:       assertFalse(node0.isLabelName());
610:       assertFalse(node0.isNot());
611:       assertFalse(node0.isGetElem());
612:       assertEquals((-1), node0.getSourcePosition());
613:       assertFalse(node0.isAnd());
614:       assertFalse(node0.isReturn());
615:       assertFalse(node0.isGetProp());
616:       assertEquals((-1), node0.getLineno());
617:       assertFalse(node0.isComma());
618:       assertFalse(node0.hasMoreThanOneChild());
619:       assertFalse(node0.isNumber());
620:       assertFalse(node0.isObjectLit());
621:       assertFalse(node0.isTypeOf());
622:       assertFalse(node0.isInstanceOf());
623:       assertFalse(node0.isWith());
624:       assertFalse(node0.isAssign());
625:       assertFalse(node0.hasChildren());
626:       assertFalse(node0.isDec());
627:       assertFalse(node0.isHook());
628:       assertFalse(node0.isThis());
629:       assertFalse(node0.isWhile());
630:       assertFalse(node0.isBlock());
631:       assertFalse(node0.isInc());
632:       assertFalse(node0.isString());
633:       assertFalse(node0.isSetterDef());
634:       assertFalse(node0.isIn());
635:       assertFalse(node0.isContinue());
636:       assertFalse(node0.isFalse());
637:       assertFalse(node0.isThrow());
638:       assertEquals(40, Node.ORIGINALNAME_PROP);
639:       assertEquals(57, Node.REFLECTED_OBJECT);
640:       assertEquals(8, Node.FLAG_NO_THROWS);
641:       assertEquals(39, Node.EMPTY_BLOCK);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
644:       assertEquals(52, Node.LENGTH);
645:       assertEquals(50, Node.FREE_CALL);
646:       assertEquals(4095, Node.COLUMN_MASK);
647:       assertEquals(12, Node.COLUMN_BITS);
648:       assertEquals(32, Node.INCRDECR_PROP);
649:       assertEquals(48, Node.DIRECTIVES);
650:       assertEquals(49, Node.DIRECT_EVAL);
651:       assertEquals(1, Node.DECR_FLAG);
652:       assertEquals(37, Node.OPT_ARG_NAME);
653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
654:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
655:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
656:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
657:       assertEquals(29, Node.JSDOC_INFO_PROP);
658:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
659:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
660:       assertEquals(43, Node.IS_CONSTANT_NAME);
661:       assertEquals(56, Node.CHANGE_TIME);
662:       assertEquals(53, Node.INPUT_ID);
663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
664:       assertEquals(36, Node.QUOTED_PROP);
665:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
666:       assertEquals(55, Node.INFERRED_FUNCTION);
667:       assertEquals(46, Node.IS_NAMESPACE);
668:       assertEquals(15, Node.NO_SIDE_EFFECTS);
669:       assertEquals(57, Node.LAST_PROP);
670:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
671:       assertEquals(47, Node.IS_DISPATCHER);
672:       assertEquals(2, Node.POST_FLAG);
673:       assertEquals(30, Node.VAR_ARGS_NAME);
674:       
675:       boolean boolean4 = node0.isOr();
676:       assertFalse(node0.isTry());
677:       assertFalse(node0.isVoid());
678:       assertFalse(node0.isArrayLit());
679:       assertFalse(node0.isDebugger());
680:       assertFalse(node0.isFunction());
681:       assertFalse(node0.isRegExp());
682:       assertEquals(2468, node0.getType());
683:       assertFalse(node0.isDelProp());
684:       assertFalse(node0.isGetterDef());
685:       assertFalse(node0.isNE());
686:       assertFalse(node0.isTrue());
687:       assertFalse(node0.isIf());
688:       assertFalse(node0.isCatch());
689:       assertFalse(node0.isFor());
690:       assertFalse(node0.isCase());
691:       assertFalse(node0.isAdd());
692:       assertEquals((-1), node0.getCharno());
693:       assertFalse(node0.isNew());
694:       assertFalse(node0.isCall());
695:       assertFalse(node0.isName());
696:       assertFalse(node0.isBreak());
697:       assertFalse(node0.isSwitch());
698:       assertFalse(node0.isNull());
699:       assertFalse(node0.isStringKey());
700:       assertFalse(node0.isParamList());
701:       assertFalse(node0.isAssignAdd());
702:       assertFalse(node0.isOr());
703:       assertFalse(node0.isLabel());
704:       assertEquals(0, node0.getChildCount());
705:       assertFalse(node0.isEmpty());
706:       assertFalse(node0.isDo());
707:       assertFalse(node0.isVar());
708:       assertFalse(node0.isDefaultCase());
709:       assertFalse(node0.hasOneChild());
710:       assertFalse(node0.isScript());
711:       assertFalse(node0.isCast());
712:       assertFalse(node0.isExprResult());
713:       assertFalse(node0.isLabelName());
714:       assertFalse(node0.isNot());
715:       assertFalse(node0.isGetElem());
716:       assertEquals((-1), node0.getSourcePosition());
717:       assertFalse(node0.isAnd());
718:       assertFalse(node0.isReturn());
719:       assertFalse(node0.isGetProp());
720:       assertEquals((-1), node0.getLineno());
721:       assertFalse(node0.isComma());
722:       assertFalse(node0.hasMoreThanOneChild());
723:       assertFalse(node0.isNumber());
724:       assertFalse(node0.isObjectLit());
725:       assertFalse(node0.isTypeOf());
726:       assertFalse(node0.isInstanceOf());
727:       assertFalse(node0.isWith());
728:       assertFalse(node0.isAssign());
729:       assertFalse(node0.hasChildren());
730:       assertFalse(node0.isDec());
731:       assertFalse(node0.isHook());
732:       assertFalse(node0.isThis());
733:       assertFalse(node0.isWhile());
734:       assertFalse(node0.isBlock());
735:       assertFalse(node0.isInc());
736:       assertFalse(node0.isString());
737:       assertFalse(node0.isSetterDef());
738:       assertFalse(node0.isIn());
739:       assertFalse(node0.isContinue());
740:       assertFalse(node0.isFalse());
741:       assertFalse(node0.isThrow());
742:       assertFalse(boolean4);
743:       assertEquals(40, Node.ORIGINALNAME_PROP);
744:       assertEquals(57, Node.REFLECTED_OBJECT);
745:       assertEquals(8, Node.FLAG_NO_THROWS);
746:       assertEquals(39, Node.EMPTY_BLOCK);
747:       assertEquals(54, Node.SLASH_V);
748:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
749:       assertEquals(52, Node.LENGTH);
750:       assertEquals(50, Node.FREE_CALL);
751:       assertEquals(4095, Node.COLUMN_MASK);
752:       assertEquals(12, Node.COLUMN_BITS);
753:       assertEquals(32, Node.INCRDECR_PROP);
754:       assertEquals(48, Node.DIRECTIVES);
755:       assertEquals(49, Node.DIRECT_EVAL);
756:       assertEquals(1, Node.DECR_FLAG);
757:       assertEquals(37, Node.OPT_ARG_NAME);
758:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
759:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
760:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
761:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
762:       assertEquals(29, Node.JSDOC_INFO_PROP);
763:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
764:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
765:       assertEquals(43, Node.IS_CONSTANT_NAME);
766:       assertEquals(56, Node.CHANGE_TIME);
767:       assertEquals(53, Node.INPUT_ID);
768:       assertEquals(51, Node.STATIC_SOURCE_FILE);
769:       assertEquals(36, Node.QUOTED_PROP);
770:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
771:       assertEquals(55, Node.INFERRED_FUNCTION);
772:       assertEquals(46, Node.IS_NAMESPACE);
773:       assertEquals(15, Node.NO_SIDE_EFFECTS);
774:       assertEquals(57, Node.LAST_PROP);
775:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(2, Node.POST_FLAG);
778:       assertEquals(30, Node.VAR_ARGS_NAME);
779:       
780:       Iterable<Node> iterable0 = node0.children();
781:       assertFalse(node0.isTry());
782:       assertFalse(node0.isVoid());
783:       assertFalse(node0.isArrayLit());
784:       assertFalse(node0.isDebugger());
785:       assertFalse(node0.isFunction());
786:       assertFalse(node0.isRegExp());
787:       assertEquals(2468, node0.getType());
788:       assertFalse(node0.isDelProp());
789:       assertFalse(node0.isGetterDef());
790:       assertFalse(node0.isNE());
791:       assertFalse(node0.isTrue());
792:       assertFalse(node0.isIf());
793:       assertFalse(node0.isCatch());
794:       assertFalse(node0.isFor());
795:       assertFalse(node0.isCase());
796:       assertFalse(node0.isAdd());
797:       assertEquals((-1), node0.getCharno());
798:       assertFalse(node0.isNew());
799:       assertFalse(node0.isCall());
800:       assertFalse(node0.isName());
801:       assertFalse(node0.isBreak());
802:       assertFalse(node0.isSwitch());
803:       assertFalse(node0.isNull());
804:       assertFalse(node0.isStringKey());
805:       assertFalse(node0.isParamList());
806:       assertFalse(node0.isAssignAdd());
807:       assertFalse(node0.isOr());
808:       assertFalse(node0.isLabel());
809:       assertEquals(0, node0.getChildCount());
810:       assertFalse(node0.isEmpty());
811:       assertFalse(node0.isDo());
812:       assertFalse(node0.isVar());
813:       assertFalse(node0.isDefaultCase());
814:       assertFalse(node0.hasOneChild());
815:       assertFalse(node0.isScript());
816:       assertFalse(node0.isCast());
817:       assertFalse(node0.isExprResult());
818:       assertFalse(node0.isLabelName());
819:       assertFalse(node0.isNot());
820:       assertFalse(node0.isGetElem());
821:       assertEquals((-1), node0.getSourcePosition());
822:       assertFalse(node0.isAnd());
823:       assertFalse(node0.isReturn());
824:       assertFalse(node0.isGetProp());
825:       assertEquals((-1), node0.getLineno());
826:       assertFalse(node0.isComma());
827:       assertFalse(node0.hasMoreThanOneChild());
828:       assertFalse(node0.isNumber());
829:       assertFalse(node0.isObjectLit());
830:       assertFalse(node0.isTypeOf());
831:       assertFalse(node0.isInstanceOf());
832:       assertFalse(node0.isWith());
833:       assertFalse(node0.isAssign());
834:       assertFalse(node0.hasChildren());
835:       assertFalse(node0.isDec());
836:       assertFalse(node0.isHook());
837:       assertFalse(node0.isThis());
838:       assertFalse(node0.isWhile());
839:       assertFalse(node0.isBlock());
840:       assertFalse(node0.isInc());
841:       assertFalse(node0.isString());
842:       assertFalse(node0.isSetterDef());
843:       assertFalse(node0.isIn());
844:       assertFalse(node0.isContinue());
845:       assertFalse(node0.isFalse());
846:       assertFalse(node0.isThrow());
847:       assertNotNull(iterable0);
848:       assertFalse(iterable0.contains(node0));
849:       assertEquals(40, Node.ORIGINALNAME_PROP);
850:       assertEquals(57, Node.REFLECTED_OBJECT);
851:       assertEquals(8, Node.FLAG_NO_THROWS);
852:       assertEquals(39, Node.EMPTY_BLOCK);
853:       assertEquals(54, Node.SLASH_V);
854:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
855:       assertEquals(52, Node.LENGTH);
856:       assertEquals(50, Node.FREE_CALL);
857:       assertEquals(4095, Node.COLUMN_MASK);
858:       assertEquals(12, Node.COLUMN_BITS);
859:       assertEquals(32, Node.INCRDECR_PROP);
860:       assertEquals(48, Node.DIRECTIVES);
861:       assertEquals(49, Node.DIRECT_EVAL);
862:       assertEquals(1, Node.DECR_FLAG);
863:       assertEquals(37, Node.OPT_ARG_NAME);
864:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
865:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
866:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
867:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
868:       assertEquals(29, Node.JSDOC_INFO_PROP);
869:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
870:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
871:       assertEquals(43, Node.IS_CONSTANT_NAME);
872:       assertEquals(56, Node.CHANGE_TIME);
873:       assertEquals(53, Node.INPUT_ID);
874:       assertEquals(51, Node.STATIC_SOURCE_FILE);
875:       assertEquals(36, Node.QUOTED_PROP);
876:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(46, Node.IS_NAMESPACE);
879:       assertEquals(15, Node.NO_SIDE_EFFECTS);
880:       assertEquals(57, Node.LAST_PROP);
881:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
882:       assertEquals(47, Node.IS_DISPATCHER);
883:       assertEquals(2, Node.POST_FLAG);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       
886:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
887:       assertFalse(node0.isTry());
888:       assertFalse(node0.isVoid());
889:       assertFalse(node0.isArrayLit());
890:       assertFalse(node0.isDebugger());
891:       assertFalse(node0.isFunction());
892:       assertFalse(node0.isRegExp());
893:       assertEquals(2468, node0.getType());
894:       assertFalse(node0.isDelProp());
895:       assertFalse(node0.isGetterDef());
896:       assertFalse(node0.isNE());
897:       assertFalse(node0.isTrue());
898:       assertFalse(node0.isIf());
899:       assertFalse(node0.isCatch());
900:       assertFalse(node0.isFor());
901:       assertFalse(node0.isCase());
902:       assertFalse(node0.isAdd());
903:       assertEquals((-1), node0.getCharno());
904:       assertFalse(node0.isNew());
905:       assertFalse(node0.isCall());
906:       assertFalse(node0.isName());
907:       assertFalse(node0.isBreak());
908:       assertFalse(node0.isSwitch());
909:       assertFalse(node0.isNull());
910:       assertFalse(node0.isStringKey());
911:       assertFalse(node0.isParamList());
912:       assertFalse(node0.isAssignAdd());
913:       assertFalse(node0.isOr());
914:       assertFalse(node0.isLabel());
915:       assertEquals(0, node0.getChildCount());
916:       assertFalse(node0.isEmpty());
917:       assertFalse(node0.isDo());
918:       assertFalse(node0.isVar());
919:       assertFalse(node0.isDefaultCase());
920:       assertFalse(node0.hasOneChild());
921:       assertFalse(node0.isScript());
922:       assertFalse(node0.isCast());
923:       assertFalse(node0.isExprResult());
924:       assertFalse(node0.isLabelName());
925:       assertFalse(node0.isNot());
926:       assertFalse(node0.isGetElem());
927:       assertEquals((-1), node0.getSourcePosition());
928:       assertFalse(node0.isAnd());
929:       assertFalse(node0.isReturn());
930:       assertFalse(node0.isGetProp());
931:       assertEquals((-1), node0.getLineno());
932:       assertFalse(node0.isComma());
933:       assertFalse(node0.hasMoreThanOneChild());
934:       assertFalse(node0.isNumber());
935:       assertFalse(node0.isObjectLit());
936:       assertFalse(node0.isTypeOf());
937:       assertFalse(node0.isInstanceOf());
938:       assertFalse(node0.isWith());
939:       assertFalse(node0.isAssign());
940:       assertFalse(node0.hasChildren());
941:       assertFalse(node0.isDec());
942:       assertFalse(node0.isHook());
943:       assertFalse(node0.isThis());
944:       assertFalse(node0.isWhile());
945:       assertFalse(node0.isBlock());
946:       assertFalse(node0.isInc());
947:       assertFalse(node0.isString());
948:       assertFalse(node0.isSetterDef());
949:       assertFalse(node0.isIn());
950:       assertFalse(node0.isContinue());
951:       assertFalse(node0.isFalse());
952:       assertFalse(node0.isThrow());
953:       assertNotNull(node_FileLevelJsDocBuilder0);
954:       assertEquals(40, Node.ORIGINALNAME_PROP);
955:       assertEquals(57, Node.REFLECTED_OBJECT);
956:       assertEquals(8, Node.FLAG_NO_THROWS);
957:       assertEquals(39, Node.EMPTY_BLOCK);
958:       assertEquals(54, Node.SLASH_V);
959:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
960:       assertEquals(52, Node.LENGTH);
961:       assertEquals(50, Node.FREE_CALL);
962:       assertEquals(4095, Node.COLUMN_MASK);
963:       assertEquals(12, Node.COLUMN_BITS);
964:       assertEquals(32, Node.INCRDECR_PROP);
965:       assertEquals(48, Node.DIRECTIVES);
966:       assertEquals(49, Node.DIRECT_EVAL);
967:       assertEquals(1, Node.DECR_FLAG);
968:       assertEquals(37, Node.OPT_ARG_NAME);
969:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
970:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
971:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
972:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
973:       assertEquals(29, Node.JSDOC_INFO_PROP);
974:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
975:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
976:       assertEquals(43, Node.IS_CONSTANT_NAME);
977:       assertEquals(56, Node.CHANGE_TIME);
978:       assertEquals(53, Node.INPUT_ID);
979:       assertEquals(51, Node.STATIC_SOURCE_FILE);
980:       assertEquals(36, Node.QUOTED_PROP);
981:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
982:       assertEquals(55, Node.INFERRED_FUNCTION);
983:       assertEquals(46, Node.IS_NAMESPACE);
984:       assertEquals(15, Node.NO_SIDE_EFFECTS);
985:       assertEquals(57, Node.LAST_PROP);
986:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
987:       assertEquals(47, Node.IS_DISPATCHER);
988:       assertEquals(2, Node.POST_FLAG);
989:       assertEquals(30, Node.VAR_ARGS_NAME);
990:       
991:       node_FileLevelJsDocBuilder0.append("BANG");
992:       assertFalse(node0.isTry());
993:       assertFalse(node0.isVoid());
994:       assertFalse(node0.isArrayLit());
995:       assertFalse(node0.isDebugger());
996:       assertFalse(node0.isFunction());
997:       assertFalse(node0.isRegExp());
998:       assertEquals(2468, node0.getType());
999:       assertFalse(node0.isDelProp());
1000:       assertFalse(node0.isGetterDef());
1001:       assertFalse(node0.isNE());
1002:       assertFalse(node0.isTrue());
1003:       assertFalse(node0.isIf());
1004:       assertFalse(node0.isCatch());
1005:       assertFalse(node0.isFor());
1006:       assertFalse(node0.isCase());
1007:       assertFalse(node0.isAdd());
1008:       assertEquals((-1), node0.getCharno());
1009:       assertFalse(node0.isNew());
1010:       assertFalse(node0.isCall());
1011:       assertFalse(node0.isName());
1012:       assertFalse(node0.isBreak());
1013:       assertFalse(node0.isSwitch());
1014:       assertFalse(node0.isNull());
1015:       assertFalse(node0.isStringKey());
1016:       assertFalse(node0.isParamList());
1017:       assertFalse(node0.isAssignAdd());
1018:       assertFalse(node0.isOr());
1019:       assertFalse(node0.isLabel());
1020:       assertEquals(0, node0.getChildCount());
1021:       assertFalse(node0.isEmpty());
1022:       assertFalse(node0.isDo());
1023:       assertFalse(node0.isVar());
1024:       assertFalse(node0.isDefaultCase());
1025:       assertFalse(node0.hasOneChild());
1026:       assertFalse(node0.isScript());
1027:       assertFalse(node0.isCast());
1028:       assertFalse(node0.isExprResult());
1029:       assertFalse(node0.isLabelName());
1030:       assertFalse(node0.isNot());
1031:       assertFalse(node0.isGetElem());
1032:       assertEquals((-1), node0.getSourcePosition());
1033:       assertFalse(node0.isAnd());
1034:       assertFalse(node0.isReturn());
1035:       assertFalse(node0.isGetProp());
1036:       assertEquals((-1), node0.getLineno());
1037:       assertFalse(node0.isComma());
1038:       assertFalse(node0.hasMoreThanOneChild());
1039:       assertFalse(node0.isNumber());
1040:       assertFalse(node0.isObjectLit());
1041:       assertFalse(node0.isTypeOf());
1042:       assertFalse(node0.isInstanceOf());
1043:       assertFalse(node0.isWith());
1044:       assertFalse(node0.isAssign());
1045:       assertFalse(node0.hasChildren());
1046:       assertFalse(node0.isDec());
1047:       assertFalse(node0.isHook());
1048:       assertFalse(node0.isThis());
1049:       assertFalse(node0.isWhile());
1050:       assertFalse(node0.isBlock());
1051:       assertFalse(node0.isInc());
1052:       assertFalse(node0.isString());
1053:       assertFalse(node0.isSetterDef());
1054:       assertFalse(node0.isIn());
1055:       assertFalse(node0.isContinue());
1056:       assertFalse(node0.isFalse());
1057:       assertFalse(node0.isThrow());
1058:       assertEquals(40, Node.ORIGINALNAME_PROP);
1059:       assertEquals(57, Node.REFLECTED_OBJECT);
1060:       assertEquals(8, Node.FLAG_NO_THROWS);
1061:       assertEquals(39, Node.EMPTY_BLOCK);
1062:       assertEquals(54, Node.SLASH_V);
1063:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1064:       assertEquals(52, Node.LENGTH);
1065:       assertEquals(50, Node.FREE_CALL);
1066:       assertEquals(4095, Node.COLUMN_MASK);
1067:       assertEquals(12, Node.COLUMN_BITS);
1068:       assertEquals(32, Node.INCRDECR_PROP);
1069:       assertEquals(48, Node.DIRECTIVES);
1070:       assertEquals(49, Node.DIRECT_EVAL);
1071:       assertEquals(1, Node.DECR_FLAG);
1072:       assertEquals(37, Node.OPT_ARG_NAME);
1073:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1074:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1075:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1076:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1077:       assertEquals(29, Node.JSDOC_INFO_PROP);
1078:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1079:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1080:       assertEquals(43, Node.IS_CONSTANT_NAME);
1081:       assertEquals(56, Node.CHANGE_TIME);
1082:       assertEquals(53, Node.INPUT_ID);
1083:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1084:       assertEquals(36, Node.QUOTED_PROP);
1085:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1086:       assertEquals(55, Node.INFERRED_FUNCTION);
1087:       assertEquals(46, Node.IS_NAMESPACE);
1088:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1089:       assertEquals(57, Node.LAST_PROP);
1090:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1091:       assertEquals(47, Node.IS_DISPATCHER);
1092:       assertEquals(2, Node.POST_FLAG);
1093:       assertEquals(30, Node.VAR_ARGS_NAME);
1094:       
1095:       node_FileLevelJsDocBuilder0.append("Jcu{'f75U");
1096:       assertFalse(node0.isTry());
1097:       assertFalse(node0.isVoid());
1098:       assertFalse(node0.isArrayLit());
1099:       assertFalse(node0.isDebugger());
1100:       assertFalse(node0.isFunction());
1101:       assertFalse(node0.isRegExp());
1102:       assertEquals(2468, node0.getType());
1103:       assertFalse(node0.isDelProp());
1104:       assertFalse(node0.isGetterDef());
1105:       assertFalse(node0.isNE());
1106:       assertFalse(node0.isTrue());
1107:       assertFalse(node0.isIf());
1108:       assertFalse(node0.isCatch());
1109:       assertFalse(node0.isFor());
1110:       assertFalse(node0.isCase());
1111:       assertFalse(node0.isAdd());
1112:       assertEquals((-1), node0.getCharno());
1113:       assertFalse(node0.isNew());
1114:       assertFalse(node0.isCall());
1115:       assertFalse(node0.isName());
1116:       assertFalse(node0.isBreak());
1117:       assertFalse(node0.isSwitch());
1118:       assertFalse(node0.isNull());
1119:       assertFalse(node0.isStringKey());
1120:       assertFalse(node0.isParamList());
1121:       assertFalse(node0.isAssignAdd());
1122:       assertFalse(node0.isOr());
1123:       assertFalse(node0.isLabel());
1124:       assertEquals(0, node0.getChildCount());
1125:       assertFalse(node0.isEmpty());
1126:       assertFalse(node0.isDo());
1127:       assertFalse(node0.isVar());
1128:       assertFalse(node0.isDefaultCase());
1129:       assertFalse(node0.hasOneChild());
1130:       assertFalse(node0.isScript());
1131:       assertFalse(node0.isCast());
1132:       assertFalse(node0.isExprResult());
1133:       assertFalse(node0.isLabelName());
1134:       assertFalse(node0.isNot());
1135:       assertFalse(node0.isGetElem());
1136:       assertEquals((-1), node0.getSourcePosition());
1137:       assertFalse(node0.isAnd());
1138:       assertFalse(node0.isReturn());
1139:       assertFalse(node0.isGetProp());
1140:       assertEquals((-1), node0.getLineno());
1141:       assertFalse(node0.isComma());
1142:       assertFalse(node0.hasMoreThanOneChild());
1143:       assertFalse(node0.isNumber());
1144:       assertFalse(node0.isObjectLit());
1145:       assertFalse(node0.isTypeOf());
1146:       assertFalse(node0.isInstanceOf());
1147:       assertFalse(node0.isWith());
1148:       assertFalse(node0.isAssign());
1149:       assertFalse(node0.hasChildren());
1150:       assertFalse(node0.isDec());
1151:       assertFalse(node0.isHook());
1152:       assertFalse(node0.isThis());
1153:       assertFalse(node0.isWhile());
1154:       assertFalse(node0.isBlock());
1155:       assertFalse(node0.isInc());
1156:       assertFalse(node0.isString());
1157:       assertFalse(node0.isSetterDef());
1158:       assertFalse(node0.isIn());
1159:       assertFalse(node0.isContinue());
1160:       assertFalse(node0.isFalse());
1161:       assertFalse(node0.isThrow());
1162:       assertEquals(40, Node.ORIGINALNAME_PROP);
1163:       assertEquals(57, Node.REFLECTED_OBJECT);
1164:       assertEquals(8, Node.FLAG_NO_THROWS);
1165:       assertEquals(39, Node.EMPTY_BLOCK);
1166:       assertEquals(54, Node.SLASH_V);
1167:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1168:       assertEquals(52, Node.LENGTH);
1169:       assertEquals(50, Node.FREE_CALL);
1170:       assertEquals(4095, Node.COLUMN_MASK);
1171:       assertEquals(12, Node.COLUMN_BITS);
1172:       assertEquals(32, Node.INCRDECR_PROP);
1173:       assertEquals(48, Node.DIRECTIVES);
1174:       assertEquals(49, Node.DIRECT_EVAL);
1175:       assertEquals(1, Node.DECR_FLAG);
1176:       assertEquals(37, Node.OPT_ARG_NAME);
1177:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1178:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1179:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1180:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1181:       assertEquals(29, Node.JSDOC_INFO_PROP);
1182:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1183:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1184:       assertEquals(43, Node.IS_CONSTANT_NAME);
1185:       assertEquals(56, Node.CHANGE_TIME);
1186:       assertEquals(53, Node.INPUT_ID);
1187:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1188:       assertEquals(36, Node.QUOTED_PROP);
1189:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1190:       assertEquals(55, Node.INFERRED_FUNCTION);
1191:       assertEquals(46, Node.IS_NAMESPACE);
1192:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1193:       assertEquals(57, Node.LAST_PROP);
1194:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1195:       assertEquals(47, Node.IS_DISPATCHER);
1196:       assertEquals(2, Node.POST_FLAG);
1197:       assertEquals(30, Node.VAR_ARGS_NAME);
1198:       
1199:       boolean boolean5 = node0.isSetterDef();
1200:       assertFalse(node0.isTry());
1201:       assertFalse(node0.isVoid());
1202:       assertFalse(node0.isArrayLit());
1203:       assertFalse(node0.isDebugger());
1204:       assertFalse(node0.isFunction());
1205:       assertFalse(node0.isRegExp());
1206:       assertEquals(2468, node0.getType());
1207:       assertFalse(node0.isDelProp());
1208:       assertFalse(node0.isGetterDef());
1209:       assertFalse(node0.isNE());
1210:       assertFalse(node0.isTrue());
1211:       assertFalse(node0.isIf());
1212:       assertFalse(node0.isCatch());
1213:       assertFalse(node0.isFor());
1214:       assertFalse(node0.isCase());
1215:       assertFalse(node0.isAdd());
1216:       assertEquals((-1), node0.getCharno());
1217:       assertFalse(node0.isNew());
1218:       assertFalse(node0.isCall());
1219:       assertFalse(node0.isName());
1220:       assertFalse(node0.isBreak());
1221:       assertFalse(node0.isSwitch());
1222:       assertFalse(node0.isNull());
1223:       assertFalse(node0.isStringKey());
1224:       assertFalse(node0.isParamList());
1225:       assertFalse(node0.isAssignAdd());
1226:       assertFalse(node0.isOr());
1227:       assertFalse(node0.isLabel());
1228:       assertEquals(0, node0.getChildCount());
1229:       assertFalse(node0.isEmpty());
1230:       assertFalse(node0.isDo());
1231:       assertFalse(node0.isVar());
1232:       assertFalse(node0.isDefaultCase());
1233:       assertFalse(node0.hasOneChild());
1234:       assertFalse(node0.isScript());
1235:       assertFalse(node0.isCast());
1236:       assertFalse(node0.isExprResult());
1237:       assertFalse(node0.isLabelName());
1238:       assertFalse(node0.isNot());
1239:       assertFalse(node0.isGetElem());
1240:       assertEquals((-1), node0.getSourcePosition());
1241:       assertFalse(node0.isAnd());
1242:       assertFalse(node0.isReturn());
1243:       assertFalse(node0.isGetProp());
1244:       assertEquals((-1), node0.getLineno());
1245:       assertFalse(node0.isComma());
1246:       assertFalse(node0.hasMoreThanOneChild());
1247:       assertFalse(node0.isNumber());
1248:       assertFalse(node0.isObjectLit());
1249:       assertFalse(node0.isTypeOf());
1250:       assertFalse(node0.isInstanceOf());
1251:       assertFalse(node0.isWith());
1252:       assertFalse(node0.isAssign());
1253:       assertFalse(node0.hasChildren());
1254:       assertFalse(node0.isDec());
1255:       assertFalse(node0.isHook());
1256:       assertFalse(node0.isThis());
1257:       assertFalse(node0.isWhile());
1258:       assertFalse(node0.isBlock());
1259:       assertFalse(node0.isInc());
1260:       assertFalse(node0.isString());
1261:       assertFalse(node0.isSetterDef());
1262:       assertFalse(node0.isIn());
1263:       assertFalse(node0.isContinue());
1264:       assertFalse(node0.isFalse());
1265:       assertFalse(node0.isThrow());
1266:       assertFalse(boolean5);
1267:       assertEquals(40, Node.ORIGINALNAME_PROP);
1268:       assertEquals(57, Node.REFLECTED_OBJECT);
1269:       assertEquals(8, Node.FLAG_NO_THROWS);
1270:       assertEquals(39, Node.EMPTY_BLOCK);
1271:       assertEquals(54, Node.SLASH_V);
1272:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1273:       assertEquals(52, Node.LENGTH);
1274:       assertEquals(50, Node.FREE_CALL);
1275:       assertEquals(4095, Node.COLUMN_MASK);
1276:       assertEquals(12, Node.COLUMN_BITS);
1277:       assertEquals(32, Node.INCRDECR_PROP);
1278:       assertEquals(48, Node.DIRECTIVES);
1279:       assertEquals(49, Node.DIRECT_EVAL);
1280:       assertEquals(1, Node.DECR_FLAG);
1281:       assertEquals(37, Node.OPT_ARG_NAME);
1282:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1283:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1284:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1285:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1289:       assertEquals(43, Node.IS_CONSTANT_NAME);
1290:       assertEquals(56, Node.CHANGE_TIME);
1291:       assertEquals(53, Node.INPUT_ID);
1292:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1293:       assertEquals(36, Node.QUOTED_PROP);
1294:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1295:       assertEquals(55, Node.INFERRED_FUNCTION);
1296:       assertEquals(46, Node.IS_NAMESPACE);
1297:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1298:       assertEquals(57, Node.LAST_PROP);
1299:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1300:       assertEquals(47, Node.IS_DISPATCHER);
1301:       assertEquals(2, Node.POST_FLAG);
1302:       assertEquals(30, Node.VAR_ARGS_NAME);
1303:       
1304:       Node node1 = Node.newString("BANG");
1305:       assertFalse(node1.isSetterDef());
1306:       assertFalse(node1.isParamList());
1307:       assertEquals(40, node1.getType());
1308:       assertFalse(node1.isCatch());
1309:       assertFalse(node1.isCall());
1310:       assertFalse(node1.isVar());
1311:       assertFalse(node1.isFunction());
1312:       assertFalse(node1.isRegExp());
1313:       assertEquals(0, node1.getChildCount());
1314:       assertFalse(node1.isBlock());
1315:       assertTrue(node1.isString());
1316:       assertFalse(node1.isDebugger());
1317:       assertFalse(node1.isArrayLit());
1318:       assertFalse(node1.isTry());
1319:       assertFalse(node1.isStringKey());
1320:       assertFalse(node1.isGetterDef());
1321:       assertFalse(node1.isNE());
1322:       assertFalse(node1.isIf());
1323:       assertEquals((-1), node1.getLineno());
1324:       assertFalse(node1.isContinue());
1325:       assertFalse(node1.isFor());
1326:       assertFalse(node1.isCast());
1327:       assertFalse(node1.hasMoreThanOneChild());
1328:       assertFalse(node1.isInc());
1329:       assertFalse(node1.isIn());
1330:       assertFalse(node1.isGetProp());
1331:       assertFalse(node1.isThis());
1332:       assertFalse(node1.isBreak());
1333:       assertFalse(node1.isFalse());
1334:       assertFalse(node1.isThrow());
1335:       assertFalse(node1.isInstanceOf());
1336:       assertFalse(node1.isHook());
1337:       assertFalse(node1.isWith());
1338:       assertFalse(node1.isComma());
1339:       assertEquals((-1), node1.getCharno());
1340:       assertFalse(node1.isScript());
1341:       assertFalse(node1.hasOneChild());
1342:       assertFalse(node1.isSwitch());
1343:       assertFalse(node1.isCase());
1344:       assertFalse(node1.isAnd());
1345:       assertFalse(node1.isNumber());
1346:       assertEquals((-1), node1.getSourcePosition());
1347:       assertFalse(node1.isObjectLit());
1348:       assertFalse(node1.isNot());
1349:       assertFalse(node1.isAssignAdd());
1350:       assertFalse(node1.isLabel());
1351:       assertFalse(node1.isReturn());
1352:       assertFalse(node1.isDelProp());
1353:       assertFalse(node1.isLabelName());
1354:       assertFalse(node1.isGetElem());
1355:       assertFalse(node1.isWhile());
1356:       assertFalse(node1.isDec());
1357:       assertFalse(node1.isTypeOf());
1358:       assertFalse(node1.hasChildren());
1359:       assertFalse(node1.isAssign());
1360:       assertFalse(node1.isNew());
1361:       assertFalse(node1.isTrue());
1362:       assertFalse(node1.isExprResult());
1363:       assertFalse(node1.isAdd());
1364:       assertFalse(node1.isDefaultCase());
1365:       assertFalse(node1.isVoid());
1366:       assertFalse(node1.isDo());
1367:       assertFalse(node1.isName());
1368:       assertFalse(node1.isEmpty());
1369:       assertFalse(node1.isNull());
1370:       assertFalse(node1.isOr());
1371:       assertNotSame(node1, node0);
1372:       assertNotNull(node1);
1373:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1374:       assertEquals(32, Node.INCRDECR_PROP);
1375:       assertEquals(1, Node.DECR_FLAG);
1376:       assertEquals(30, Node.VAR_ARGS_NAME);
1377:       assertEquals(46, Node.IS_NAMESPACE);
1378:       assertEquals(12, Node.COLUMN_BITS);
1379:       assertEquals(2, Node.POST_FLAG);
1380:       assertEquals(37, Node.OPT_ARG_NAME);
1381:       assertEquals(56, Node.CHANGE_TIME);
1382:       assertEquals(49, Node.DIRECT_EVAL);
1383:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1384:       assertEquals(50, Node.FREE_CALL);
1385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1386:       assertEquals(54, Node.SLASH_V);
1387:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1389:       assertEquals(55, Node.INFERRED_FUNCTION);
1390:       assertEquals(4095, Node.COLUMN_MASK);
1391:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1392:       assertEquals(43, Node.IS_CONSTANT_NAME);
1393:       assertEquals(48, Node.DIRECTIVES);
1394:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1395:       assertEquals(40, Node.ORIGINALNAME_PROP);
1396:       assertEquals(47, Node.IS_DISPATCHER);
1397:       assertEquals(57, Node.REFLECTED_OBJECT);
1398:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1399:       assertEquals(36, Node.QUOTED_PROP);
1400:       assertEquals(57, Node.LAST_PROP);
1401:       assertEquals(8, Node.FLAG_NO_THROWS);
1402:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1403:       assertEquals(29, Node.JSDOC_INFO_PROP);
1404:       assertEquals(52, Node.LENGTH);
1405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1407:       assertEquals(39, Node.EMPTY_BLOCK);
1408:       assertEquals(53, Node.INPUT_ID);
1409:       
1410:       Node node2 = new Node(56, node1, node1, node0, node1);
1411:       assertFalse(node1.isSetterDef());
1412:       assertFalse(node1.isParamList());
1413:       assertEquals(40, node1.getType());
1414:       assertFalse(node1.isCatch());
1415:       assertFalse(node1.isCall());
1416:       assertFalse(node1.isVar());
1417:       assertFalse(node1.isFunction());
1418:       assertFalse(node1.isRegExp());
1419:       assertEquals(0, node1.getChildCount());
1420:       assertFalse(node1.isBlock());
1421:       assertTrue(node1.isString());
1422:       assertFalse(node1.isDebugger());
1423:       assertFalse(node1.isArrayLit());
1424:       assertFalse(node1.isTry());
1425:       assertFalse(node1.isStringKey());
1426:       assertFalse(node1.isGetterDef());
1427:       assertFalse(node1.isNE());
1428:       assertFalse(node1.isIf());
1429:       assertEquals((-1), node1.getLineno());
1430:       assertFalse(node1.isContinue());
1431:       assertFalse(node1.isFor());
1432:       assertFalse(node1.isCast());
1433:       assertFalse(node1.hasMoreThanOneChild());
1434:       assertFalse(node1.isInc());
1435:       assertFalse(node1.isIn());
1436:       assertFalse(node1.isGetProp());
1437:       assertFalse(node1.isThis());
1438:       assertFalse(node1.isBreak());
1439:       assertFalse(node1.isFalse());
1440:       assertFalse(node1.isThrow());
1441:       assertFalse(node1.isInstanceOf());
1442:       assertFalse(node1.isHook());
1443:       assertFalse(node1.isWith());
1444:       assertFalse(node1.isComma());
1445:       assertEquals((-1), node1.getCharno());
1446:       assertFalse(node1.isScript());
1447:       assertFalse(node1.hasOneChild());
1448:       assertFalse(node1.isSwitch());
1449:       assertFalse(node1.isCase());
1450:       assertFalse(node1.isAnd());
1451:       assertFalse(node1.isNumber());
1452:       assertEquals((-1), node1.getSourcePosition());
1453:       assertFalse(node1.isObjectLit());
1454:       assertFalse(node1.isNot());
1455:       assertFalse(node1.isAssignAdd());
1456:       assertFalse(node1.isLabel());
1457:       assertFalse(node1.isReturn());
1458:       assertFalse(node1.isDelProp());
1459:       assertFalse(node1.isLabelName());
1460:       assertFalse(node1.isGetElem());
1461:       assertFalse(node1.isWhile());
1462:       assertFalse(node1.isDec());
1463:       assertFalse(node1.isTypeOf());
1464:       assertFalse(node1.hasChildren());
1465:       assertFalse(node1.isAssign());
1466:       assertFalse(node1.isNew());
1467:       assertFalse(node1.isTrue());
1468:       assertFalse(node1.isExprResult());
1469:       assertFalse(node1.isAdd());
1470:       assertFalse(node1.isDefaultCase());
1471:       assertFalse(node1.isVoid());
1472:       assertFalse(node1.isDo());
1473:       assertFalse(node1.isName());
1474:       assertFalse(node1.isEmpty());
1475:       assertFalse(node1.isNull());
1476:       assertFalse(node1.isOr());
1477:       assertFalse(node0.isTry());
1478:       assertFalse(node0.isVoid());
1479:       assertFalse(node0.isArrayLit());
1480:       assertFalse(node0.isDebugger());
1481:       assertFalse(node0.isFunction());
1482:       assertFalse(node0.isRegExp());
1483:       assertEquals(2468, node0.getType());
1484:       assertFalse(node0.isDelProp());
1485:       assertFalse(node0.isGetterDef());
1486:       assertFalse(node0.isNE());
1487:       assertFalse(node0.isTrue());
1488:       assertFalse(node0.isIf());
1489:       assertFalse(node0.isCatch());
1490:       assertFalse(node0.isFor());
1491:       assertFalse(node0.isCase());
1492:       assertFalse(node0.isAdd());
1493:       assertEquals((-1), node0.getCharno());
1494:       assertFalse(node0.isNew());
1495:       assertFalse(node0.isCall());
1496:       assertFalse(node0.isName());
1497:       assertFalse(node0.isBreak());
1498:       assertFalse(node0.isSwitch());
1499:       assertFalse(node0.isNull());
1500:       assertFalse(node0.isStringKey());
1501:       assertFalse(node0.isParamList());
1502:       assertFalse(node0.isAssignAdd());
1503:       assertFalse(node0.isOr());
1504:       assertFalse(node0.isLabel());
1505:       assertEquals(0, node0.getChildCount());
1506:       assertFalse(node0.isEmpty());
1507:       assertFalse(node0.isDo());
1508:       assertFalse(node0.isVar());
1509:       assertFalse(node0.isDefaultCase());
1510:       assertFalse(node0.hasOneChild());
1511:       assertFalse(node0.isScript());
1512:       assertFalse(node0.isCast());
1513:       assertFalse(node0.isExprResult());
1514:       assertFalse(node0.isLabelName());
1515:       assertFalse(node0.isNot());
1516:       assertFalse(node0.isGetElem());
1517:       assertEquals((-1), node0.getSourcePosition());
1518:       assertFalse(node0.isAnd());
1519:       assertFalse(node0.isReturn());
1520:       assertFalse(node0.isGetProp());
1521:       assertEquals((-1), node0.getLineno());
1522:       assertFalse(node0.isComma());
1523:       assertFalse(node0.hasMoreThanOneChild());
1524:       assertFalse(node0.isNumber());
1525:       assertFalse(node0.isObjectLit());
1526:       assertFalse(node0.isTypeOf());
1527:       assertFalse(node0.isInstanceOf());
1528:       assertFalse(node0.isWith());
1529:       assertFalse(node0.isAssign());
1530:       assertFalse(node0.hasChildren());
1531:       assertFalse(node0.isDec());
1532:       assertFalse(node0.isHook());
1533:       assertFalse(node0.isThis());
1534:       assertFalse(node0.isWhile());
1535:       assertFalse(node0.isBlock());
1536:       assertFalse(node0.isInc());
1537:       assertFalse(node0.isString());
1538:       assertFalse(node0.isSetterDef());
1539:       assertFalse(node0.isIn());
1540:       assertFalse(node0.isContinue());
1541:       assertFalse(node0.isFalse());
1542:       assertFalse(node0.isThrow());
1543:       assertFalse(node2.isDelProp());
1544:       assertTrue(node2.hasOneChild());
1545:       assertFalse(node2.isGetterDef());
1546:       assertFalse(node2.isIf());
1547:       assertFalse(node2.isEmpty());
1548:       assertTrue(node2.hasChildren());
1549:       assertEquals(1, node2.getChildCount());
1550:       assertFalse(node2.isTry());
1551:       assertFalse(node2.isFor());
1552:       assertFalse(node2.isString());
1553:       assertFalse(node2.isCase());
1554:       assertFalse(node2.isFunction());
1555:       assertFalse(node2.isArrayLit());
1556:       assertFalse(node2.isParamList());
1557:       assertFalse(node2.isDebugger());
1558:       assertEquals((-1), node2.getCharno());
1559:       assertFalse(node2.isSwitch());
1560:       assertFalse(node2.isBreak());
1561:       assertFalse(node2.isName());
1562:       assertFalse(node2.isCall());
1563:       assertFalse(node2.isGetProp());
1564:       assertFalse(node2.isNew());
1565:       assertFalse(node2.isComma());
1566:       assertFalse(node2.isVar());
1567:       assertFalse(node2.isDefaultCase());
1568:       assertFalse(node2.isDo());
1569:       assertFalse(node2.isExprResult());
1570:       assertFalse(node2.isAdd());
1571:       assertFalse(node2.isVoid());
1572:       assertFalse(node2.isOr());
1573:       assertFalse(node2.isTrue());
1574:       assertFalse(node2.isNull());
1575:       assertFalse(node2.isNumber());
1576:       assertEquals((-1), node2.getSourcePosition());
1577:       assertFalse(node2.isTypeOf());
1578:       assertFalse(node2.isLabelName());
1579:       assertFalse(node2.isDec());
1580:       assertFalse(node2.isAssign());
1581:       assertFalse(node2.isGetElem());
1582:       assertFalse(node2.isCast());
1583:       assertFalse(node2.isReturn());
1584:       assertFalse(node2.isAssignAdd());
1585:       assertFalse(node2.isLabel());
1586:       assertFalse(node2.isWhile());
1587:       assertFalse(node2.isNot());
1588:       assertFalse(node2.isObjectLit());
1589:       assertFalse(node2.isContinue());
1590:       assertFalse(node2.isScript());
1591:       assertFalse(node2.isAnd());
1592:       assertFalse(node2.isStringKey());
1593:       assertFalse(node2.isSetterDef());
1594:       assertFalse(node2.isFalse());
1595:       assertFalse(node2.isHook());
1596:       assertFalse(node2.isThis());
1597:       assertFalse(node2.isBlock());
1598:       assertFalse(node2.isThrow());
1599:       assertFalse(node2.isWith());
1600:       assertFalse(node2.isRegExp());
1601:       assertFalse(node2.isInc());
1602:       assertFalse(node2.hasMoreThanOneChild());
1603:       assertFalse(node2.isCatch());
1604:       assertFalse(node2.isInstanceOf());
1605:       assertEquals((-1), node2.getLineno());
1606:       assertFalse(node2.isIn());
1607:       assertEquals(56, node2.getType());
1608:       assertFalse(node2.isNE());
1609:       assertNotNull(node2);
1610:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1611:       assertEquals(32, Node.INCRDECR_PROP);
1612:       assertEquals(1, Node.DECR_FLAG);
1613:       assertEquals(30, Node.VAR_ARGS_NAME);
1614:       assertEquals(46, Node.IS_NAMESPACE);
1615:       assertEquals(12, Node.COLUMN_BITS);
1616:       assertEquals(2, Node.POST_FLAG);
1617:       assertEquals(37, Node.OPT_ARG_NAME);
1618:       assertEquals(56, Node.CHANGE_TIME);
1619:       assertEquals(49, Node.DIRECT_EVAL);
1620:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1621:       assertEquals(50, Node.FREE_CALL);
1622:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1623:       assertEquals(54, Node.SLASH_V);
1624:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1625:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1626:       assertEquals(55, Node.INFERRED_FUNCTION);
1627:       assertEquals(4095, Node.COLUMN_MASK);
1628:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1629:       assertEquals(43, Node.IS_CONSTANT_NAME);
1630:       assertEquals(48, Node.DIRECTIVES);
1631:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1632:       assertEquals(40, Node.ORIGINALNAME_PROP);
1633:       assertEquals(47, Node.IS_DISPATCHER);
1634:       assertEquals(57, Node.REFLECTED_OBJECT);
1635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1636:       assertEquals(36, Node.QUOTED_PROP);
1637:       assertEquals(57, Node.LAST_PROP);
1638:       assertEquals(8, Node.FLAG_NO_THROWS);
1639:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1640:       assertEquals(29, Node.JSDOC_INFO_PROP);
1641:       assertEquals(52, Node.LENGTH);
1642:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1644:       assertEquals(39, Node.EMPTY_BLOCK);
1645:       assertEquals(53, Node.INPUT_ID);
1646:       assertEquals(40, Node.ORIGINALNAME_PROP);
1647:       assertEquals(57, Node.REFLECTED_OBJECT);
1648:       assertEquals(8, Node.FLAG_NO_THROWS);
1649:       assertEquals(39, Node.EMPTY_BLOCK);
1650:       assertEquals(54, Node.SLASH_V);
1651:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1652:       assertEquals(52, Node.LENGTH);
1653:       assertEquals(50, Node.FREE_CALL);
1654:       assertEquals(4095, Node.COLUMN_MASK);
1655:       assertEquals(12, Node.COLUMN_BITS);
1656:       assertEquals(32, Node.INCRDECR_PROP);
1657:       assertEquals(48, Node.DIRECTIVES);
1658:       assertEquals(49, Node.DIRECT_EVAL);
1659:       assertEquals(1, Node.DECR_FLAG);
1660:       assertEquals(37, Node.OPT_ARG_NAME);
1661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1662:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1663:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1664:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1665:       assertEquals(29, Node.JSDOC_INFO_PROP);
1666:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1667:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1668:       assertEquals(43, Node.IS_CONSTANT_NAME);
1669:       assertEquals(56, Node.CHANGE_TIME);
1670:       assertEquals(53, Node.INPUT_ID);
1671:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1672:       assertEquals(36, Node.QUOTED_PROP);
1673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1674:       assertEquals(55, Node.INFERRED_FUNCTION);
1675:       assertEquals(46, Node.IS_NAMESPACE);
1676:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1677:       assertEquals(57, Node.LAST_PROP);
1678:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1679:       assertEquals(47, Node.IS_DISPATCHER);
1680:       assertEquals(2, Node.POST_FLAG);
1681:       assertEquals(30, Node.VAR_ARGS_NAME);
1682:       assertEquals(48, Node.DIRECTIVES);
1683:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1684:       assertEquals(39, Node.EMPTY_BLOCK);
1685:       assertEquals(40, Node.ORIGINALNAME_PROP);
1686:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1687:       assertEquals(4095, Node.COLUMN_MASK);
1688:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1689:       assertEquals(54, Node.SLASH_V);
1690:       assertEquals(43, Node.IS_CONSTANT_NAME);
1691:       assertEquals(1, Node.DECR_FLAG);
1692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1693:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1694:       assertEquals(50, Node.FREE_CALL);
1695:       assertEquals(37, Node.OPT_ARG_NAME);
1696:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1697:       assertEquals(46, Node.IS_NAMESPACE);
1698:       assertEquals(56, Node.CHANGE_TIME);
1699:       assertEquals(32, Node.INCRDECR_PROP);
1700:       assertEquals(12, Node.COLUMN_BITS);
1701:       assertEquals(47, Node.IS_DISPATCHER);
1702:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1703:       assertEquals(2, Node.POST_FLAG);
1704:       assertEquals(30, Node.VAR_ARGS_NAME);
1705:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1706:       assertEquals(53, Node.INPUT_ID);
1707:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1708:       assertEquals(57, Node.LAST_PROP);
1709:       assertEquals(49, Node.DIRECT_EVAL);
1710:       assertEquals(55, Node.INFERRED_FUNCTION);
1711:       assertEquals(29, Node.JSDOC_INFO_PROP);
1712:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1713:       assertEquals(57, Node.REFLECTED_OBJECT);
1714:       assertEquals(36, Node.QUOTED_PROP);
1715:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1716:       assertEquals(52, Node.LENGTH);
1717:       assertEquals(8, Node.FLAG_NO_THROWS);
1718:       
1719:       int int0 = node2.getIndexOfChild(node0);
1720:       assertFalse(node1.isSetterDef());
1721:       assertFalse(node1.isParamList());
1722:       assertEquals(40, node1.getType());
1723:       assertFalse(node1.isCatch());
1724:       assertFalse(node1.isCall());
1725:       assertFalse(node1.isVar());
1726:       assertFalse(node1.isFunction());
1727:       assertFalse(node1.isRegExp());
1728:       assertEquals(0, node1.getChildCount());
1729:       assertFalse(node1.isBlock());
1730:       assertTrue(node1.isString());
1731:       assertFalse(node1.isDebugger());
1732:       assertFalse(node1.isArrayLit());
1733:       assertFalse(node1.isTry());
1734:       assertFalse(node1.isStringKey());
1735:       assertFalse(node1.isGetterDef());
1736:       assertFalse(node1.isNE());
1737:       assertFalse(node1.isIf());
1738:       assertEquals((-1), node1.getLineno());
1739:       assertFalse(node1.isContinue());
1740:       assertFalse(node1.isFor());
1741:       assertFalse(node1.isCast());
1742:       assertFalse(node1.hasMoreThanOneChild());
1743:       assertFalse(node1.isInc());
1744:       assertFalse(node1.isIn());
1745:       assertFalse(node1.isGetProp());
1746:       assertFalse(node1.isThis());
1747:       assertFalse(node1.isBreak());
1748:       assertFalse(node1.isFalse());
1749:       assertFalse(node1.isThrow());
1750:       assertFalse(node1.isInstanceOf());
1751:       assertFalse(node1.isHook());
1752:       assertFalse(node1.isWith());
1753:       assertFalse(node1.isComma());
1754:       assertEquals((-1), node1.getCharno());
1755:       assertFalse(node1.isScript());
1756:       assertFalse(node1.hasOneChild());
1757:       assertFalse(node1.isSwitch());
1758:       assertFalse(node1.isCase());
1759:       assertFalse(node1.isAnd());
1760:       assertFalse(node1.isNumber());
1761:       assertEquals((-1), node1.getSourcePosition());
1762:       assertFalse(node1.isObjectLit());
1763:       assertFalse(node1.isNot());
1764:       assertFalse(node1.isAssignAdd());
1765:       assertFalse(node1.isLabel());
1766:       assertFalse(node1.isReturn());
1767:       assertFalse(node1.isDelProp());
1768:       assertFalse(node1.isLabelName());
1769:       assertFalse(node1.isGetElem());
1770:       assertFalse(node1.isWhile());
1771:       assertFalse(node1.isDec());
1772:       assertFalse(node1.isTypeOf());
1773:       assertFalse(node1.hasChildren());
1774:       assertFalse(node1.isAssign());
1775:       assertFalse(node1.isNew());
1776:       assertFalse(node1.isTrue());
1777:       assertFalse(node1.isExprResult());
1778:       assertFalse(node1.isAdd());
1779:       assertFalse(node1.isDefaultCase());
1780:       assertFalse(node1.isVoid());
1781:       assertFalse(node1.isDo());
1782:       assertFalse(node1.isName());
1783:       assertFalse(node1.isEmpty());
1784:       assertFalse(node1.isNull());
1785:       assertFalse(node1.isOr());
1786:       assertFalse(node0.isTry());
1787:       assertFalse(node0.isVoid());
1788:       assertFalse(node0.isArrayLit());
1789:       assertFalse(node0.isDebugger());
1790:       assertFalse(node0.isFunction());
1791:       assertFalse(node0.isRegExp());
1792:       assertEquals(2468, node0.getType());
1793:       assertFalse(node0.isDelProp());
1794:       assertFalse(node0.isGetterDef());
1795:       assertFalse(node0.isNE());
1796:       assertFalse(node0.isTrue());
1797:       assertFalse(node0.isIf());
1798:       assertFalse(node0.isCatch());
1799:       assertFalse(node0.isFor());
1800:       assertFalse(node0.isCase());
1801:       assertFalse(node0.isAdd());
1802:       assertEquals((-1), node0.getCharno());
1803:       assertFalse(node0.isNew());
1804:       assertFalse(node0.isCall());
1805:       assertFalse(node0.isName());
1806:       assertFalse(node0.isBreak());
1807:       assertFalse(node0.isSwitch());
1808:       assertFalse(node0.isNull());
1809:       assertFalse(node0.isStringKey());
1810:       assertFalse(node0.isParamList());
1811:       assertFalse(node0.isAssignAdd());
1812:       assertFalse(node0.isOr());
1813:       assertFalse(node0.isLabel());
1814:       assertEquals(0, node0.getChildCount());
1815:       assertFalse(node0.isEmpty());
1816:       assertFalse(node0.isDo());
1817:       assertFalse(node0.isVar());
1818:       assertFalse(node0.isDefaultCase());
1819:       assertFalse(node0.hasOneChild());
1820:       assertFalse(node0.isScript());
1821:       assertFalse(node0.isCast());
1822:       assertFalse(node0.isExprResult());
1823:       assertFalse(node0.isLabelName());
1824:       assertFalse(node0.isNot());
1825:       assertFalse(node0.isGetElem());
1826:       assertEquals((-1), node0.getSourcePosition());
1827:       assertFalse(node0.isAnd());
1828:       assertFalse(node0.isReturn());
1829:       assertFalse(node0.isGetProp());
1830:       assertEquals((-1), node0.getLineno());
1831:       assertFalse(node0.isComma());
1832:       assertFalse(node0.hasMoreThanOneChild());
1833:       assertFalse(node0.isNumber());
1834:       assertFalse(node0.isObjectLit());
1835:       assertFalse(node0.isTypeOf());
1836:       assertFalse(node0.isInstanceOf());
1837:       assertFalse(node0.isWith());
1838:       assertFalse(node0.isAssign());
1839:       assertFalse(node0.hasChildren());
1840:       assertFalse(node0.isDec());
1841:       assertFalse(node0.isHook());
1842:       assertFalse(node0.isThis());
1843:       assertFalse(node0.isWhile());
1844:       assertFalse(node0.isBlock());
1845:       assertFalse(node0.isInc());
1846:       assertFalse(node0.isString());
1847:       assertFalse(node0.isSetterDef());
1848:       assertFalse(node0.isIn());
1849:       assertFalse(node0.isContinue());
1850:       assertFalse(node0.isFalse());
1851:       assertFalse(node0.isThrow());
1852:       assertFalse(node2.isDelProp());
1853:       assertTrue(node2.hasOneChild());
1854:       assertFalse(node2.isGetterDef());
1855:       assertFalse(node2.isIf());
1856:       assertFalse(node2.isEmpty());
1857:       assertTrue(node2.hasChildren());
1858:       assertEquals(1, node2.getChildCount());
1859:       assertFalse(node2.isTry());
1860:       assertFalse(node2.isFor());
1861:       assertFalse(node2.isString());
1862:       assertFalse(node2.isCase());
1863:       assertFalse(node2.isFunction());
1864:       assertFalse(node2.isArrayLit());
1865:       assertFalse(node2.isParamList());
1866:       assertFalse(node2.isDebugger());
1867:       assertEquals((-1), node2.getCharno());
1868:       assertFalse(node2.isSwitch());
1869:       assertFalse(node2.isBreak());
1870:       assertFalse(node2.isName());
1871:       assertFalse(node2.isCall());
1872:       assertFalse(node2.isGetProp());
1873:       assertFalse(node2.isNew());
1874:       assertFalse(node2.isComma());
1875:       assertFalse(node2.isVar());
1876:       assertFalse(node2.isDefaultCase());
1877:       assertFalse(node2.isDo());
1878:       assertFalse(node2.isExprResult());
1879:       assertFalse(node2.isAdd());
1880:       assertFalse(node2.isVoid());
1881:       assertFalse(node2.isOr());
1882:       assertFalse(node2.isTrue());
1883:       assertFalse(node2.isNull());
1884:       assertFalse(node2.isNumber());
1885:       assertEquals((-1), node2.getSourcePosition());
1886:       assertFalse(node2.isTypeOf());
1887:       assertFalse(node2.isLabelName());
1888:       assertFalse(node2.isDec());
1889:       assertFalse(node2.isAssign());
1890:       assertFalse(node2.isGetElem());
1891:       assertFalse(node2.isCast());
1892:       assertFalse(node2.isReturn());
1893:       assertFalse(node2.isAssignAdd());
1894:       assertFalse(node2.isLabel());
1895:       assertFalse(node2.isWhile());
1896:       assertFalse(node2.isNot());
1897:       assertFalse(node2.isObjectLit());
1898:       assertFalse(node2.isContinue());
1899:       assertFalse(node2.isScript());
1900:       assertFalse(node2.isAnd());
1901:       assertFalse(node2.isStringKey());
1902:       assertFalse(node2.isSetterDef());
1903:       assertFalse(node2.isFalse());
1904:       assertFalse(node2.isHook());
1905:       assertFalse(node2.isThis());
1906:       assertFalse(node2.isBlock());
1907:       assertFalse(node2.isThrow());
1908:       assertFalse(node2.isWith());
1909:       assertFalse(node2.isRegExp());
1910:       assertFalse(node2.isInc());
1911:       assertFalse(node2.hasMoreThanOneChild());
1912:       assertFalse(node2.isCatch());
1913:       assertFalse(node2.isInstanceOf());
1914:       assertEquals((-1), node2.getLineno());
1915:       assertFalse(node2.isIn());
1916:       assertEquals(56, node2.getType());
1917:       assertFalse(node2.isNE());
1918:       assertNotSame(node1, node0);
1919:       assertNotSame(node0, node1);
1920:       assertEquals((-1), int0);
1921:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1922:       assertEquals(32, Node.INCRDECR_PROP);
1923:       assertEquals(1, Node.DECR_FLAG);
1924:       assertEquals(30, Node.VAR_ARGS_NAME);
1925:       assertEquals(46, Node.IS_NAMESPACE);
1926:       assertEquals(12, Node.COLUMN_BITS);
1927:       assertEquals(2, Node.POST_FLAG);
1928:       assertEquals(37, Node.OPT_ARG_NAME);
1929:       assertEquals(56, Node.CHANGE_TIME);
1930:       assertEquals(49, Node.DIRECT_EVAL);
1931:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1932:       assertEquals(50, Node.FREE_CALL);
1933:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1934:       assertEquals(54, Node.SLASH_V);
1935:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1937:       assertEquals(55, Node.INFERRED_FUNCTION);
1938:       assertEquals(4095, Node.COLUMN_MASK);
1939:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1940:       assertEquals(43, Node.IS_CONSTANT_NAME);
1941:       assertEquals(48, Node.DIRECTIVES);
1942:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1943:       assertEquals(40, Node.ORIGINALNAME_PROP);
1944:       assertEquals(47, Node.IS_DISPATCHER);
1945:       assertEquals(57, Node.REFLECTED_OBJECT);
1946:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1947:       assertEquals(36, Node.QUOTED_PROP);
1948:       assertEquals(57, Node.LAST_PROP);
1949:       assertEquals(8, Node.FLAG_NO_THROWS);
1950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1951:       assertEquals(29, Node.JSDOC_INFO_PROP);
1952:       assertEquals(52, Node.LENGTH);
1953:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1954:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1955:       assertEquals(39, Node.EMPTY_BLOCK);
1956:       assertEquals(53, Node.INPUT_ID);
1957:       assertEquals(40, Node.ORIGINALNAME_PROP);
1958:       assertEquals(57, Node.REFLECTED_OBJECT);
1959:       assertEquals(8, Node.FLAG_NO_THROWS);
1960:       assertEquals(39, Node.EMPTY_BLOCK);
1961:       assertEquals(54, Node.SLASH_V);
1962:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1963:       assertEquals(52, Node.LENGTH);
1964:       assertEquals(50, Node.FREE_CALL);
1965:       assertEquals(4095, Node.COLUMN_MASK);
1966:       assertEquals(12, Node.COLUMN_BITS);
1967:       assertEquals(32, Node.INCRDECR_PROP);
1968:       assertEquals(48, Node.DIRECTIVES);
1969:       assertEquals(49, Node.DIRECT_EVAL);
1970:       assertEquals(1, Node.DECR_FLAG);
1971:       assertEquals(37, Node.OPT_ARG_NAME);
1972:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1973:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1974:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1975:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1976:       assertEquals(29, Node.JSDOC_INFO_PROP);
1977:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1978:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1979:       assertEquals(43, Node.IS_CONSTANT_NAME);
1980:       assertEquals(56, Node.CHANGE_TIME);
1981:       assertEquals(53, Node.INPUT_ID);
1982:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1983:       assertEquals(36, Node.QUOTED_PROP);
1984:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1985:       assertEquals(55, Node.INFERRED_FUNCTION);
1986:       assertEquals(46, Node.IS_NAMESPACE);
1987:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1988:       assertEquals(57, Node.LAST_PROP);
1989:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1990:       assertEquals(47, Node.IS_DISPATCHER);
1991:       assertEquals(2, Node.POST_FLAG);
1992:       assertEquals(30, Node.VAR_ARGS_NAME);
1993:       assertEquals(48, Node.DIRECTIVES);
1994:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1995:       assertEquals(39, Node.EMPTY_BLOCK);
1996:       assertEquals(40, Node.ORIGINALNAME_PROP);
1997:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1998:       assertEquals(4095, Node.COLUMN_MASK);
1999:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2000:       assertEquals(54, Node.SLASH_V);
2001:       assertEquals(43, Node.IS_CONSTANT_NAME);
2002:       assertEquals(1, Node.DECR_FLAG);
2003:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2004:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2005:       assertEquals(50, Node.FREE_CALL);
2006:       assertEquals(37, Node.OPT_ARG_NAME);
2007:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2008:       assertEquals(46, Node.IS_NAMESPACE);
2009:       assertEquals(56, Node.CHANGE_TIME);
2010:       assertEquals(32, Node.INCRDECR_PROP);
2011:       assertEquals(12, Node.COLUMN_BITS);
2012:       assertEquals(47, Node.IS_DISPATCHER);
2013:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2014:       assertEquals(2, Node.POST_FLAG);
2015:       assertEquals(30, Node.VAR_ARGS_NAME);
2016:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2017:       assertEquals(53, Node.INPUT_ID);
2018:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2019:       assertEquals(57, Node.LAST_PROP);
2020:       assertEquals(49, Node.DIRECT_EVAL);
2021:       assertEquals(55, Node.INFERRED_FUNCTION);
2022:       assertEquals(29, Node.JSDOC_INFO_PROP);
2023:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2024:       assertEquals(57, Node.REFLECTED_OBJECT);
2025:       assertEquals(36, Node.QUOTED_PROP);
2026:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2027:       assertEquals(52, Node.LENGTH);
2028:       assertEquals(8, Node.FLAG_NO_THROWS);
2029:       
2030:       boolean boolean6 = node0.isInstanceOf();
2031:       assertFalse(node0.isTry());
2032:       assertFalse(node0.isVoid());
2033:       assertFalse(node0.isArrayLit());
2034:       assertFalse(node0.isDebugger());
2035:       assertFalse(node0.isFunction());
2036:       assertFalse(node0.isRegExp());
2037:       assertEquals(2468, node0.getType());
2038:       assertFalse(node0.isDelProp());
2039:       assertFalse(node0.isGetterDef());
2040:       assertFalse(node0.isNE());
2041:       assertFalse(node0.isTrue());
2042:       assertFalse(node0.isIf());
2043:       assertFalse(node0.isCatch());
2044:       assertFalse(node0.isFor());
2045:       assertFalse(node0.isCase());
2046:       assertFalse(node0.isAdd());
2047:       assertEquals((-1), node0.getCharno());
2048:       assertFalse(node0.isNew());
2049:       assertFalse(node0.isCall());
2050:       assertFalse(node0.isName());
2051:       assertFalse(node0.isBreak());
2052:       assertFalse(node0.isSwitch());
2053:       assertFalse(node0.isNull());
2054:       assertFalse(node0.isStringKey());
2055:       assertFalse(node0.isParamList());
2056:       assertFalse(node0.isAssignAdd());
2057:       assertFalse(node0.isOr());
2058:       assertFalse(node0.isLabel());
2059:       assertEquals(0, node0.getChildCount());
2060:       assertFalse(node0.isEmpty());
2061:       assertFalse(node0.isDo());
2062:       assertFalse(node0.isVar());
2063:       assertFalse(node0.isDefaultCase());
2064:       assertFalse(node0.hasOneChild());
2065:       assertFalse(node0.isScript());
2066:       assertFalse(node0.isCast());
2067:       assertFalse(node0.isExprResult());
2068:       assertFalse(node0.isLabelName());
2069:       assertFalse(node0.isNot());
2070:       assertFalse(node0.isGetElem());
2071:       assertEquals((-1), node0.getSourcePosition());
2072:       assertFalse(node0.isAnd());
2073:       assertFalse(node0.isReturn());
2074:       assertFalse(node0.isGetProp());
2075:       assertEquals((-1), node0.getLineno());
2076:       assertFalse(node0.isComma());
2077:       assertFalse(node0.hasMoreThanOneChild());
2078:       assertFalse(node0.isNumber());
2079:       assertFalse(node0.isObjectLit());
2080:       assertFalse(node0.isTypeOf());
2081:       assertFalse(node0.isInstanceOf());
2082:       assertFalse(node0.isWith());
2083:       assertFalse(node0.isAssign());
2084:       assertFalse(node0.hasChildren());
2085:       assertFalse(node0.isDec());
2086:       assertFalse(node0.isHook());
2087:       assertFalse(node0.isThis());
2088:       assertFalse(node0.isWhile());
2089:       assertFalse(node0.isBlock());
2090:       assertFalse(node0.isInc());
2091:       assertFalse(node0.isString());
2092:       assertFalse(node0.isSetterDef());
2093:       assertFalse(node0.isIn());
2094:       assertFalse(node0.isContinue());
2095:       assertFalse(node0.isFalse());
2096:       assertFalse(node0.isThrow());
2097:       assertNotSame(node0, node1);
2098:       assertFalse(boolean6);
2099:       assertEquals(40, Node.ORIGINALNAME_PROP);
2100:       assertEquals(57, Node.REFLECTED_OBJECT);
2101:       assertEquals(8, Node.FLAG_NO_THROWS);
2102:       assertEquals(39, Node.EMPTY_BLOCK);
2103:       assertEquals(54, Node.SLASH_V);
2104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2105:       assertEquals(52, Node.LENGTH);
2106:       assertEquals(50, Node.FREE_CALL);
2107:       assertEquals(4095, Node.COLUMN_MASK);
2108:       assertEquals(12, Node.COLUMN_BITS);
2109:       assertEquals(32, Node.INCRDECR_PROP);
2110:       assertEquals(48, Node.DIRECTIVES);
2111:       assertEquals(49, Node.DIRECT_EVAL);
2112:       assertEquals(1, Node.DECR_FLAG);
2113:       assertEquals(37, Node.OPT_ARG_NAME);
2114:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2117:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2118:       assertEquals(29, Node.JSDOC_INFO_PROP);
2119:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2121:       assertEquals(43, Node.IS_CONSTANT_NAME);
2122:       assertEquals(56, Node.CHANGE_TIME);
2123:       assertEquals(53, Node.INPUT_ID);
2124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2125:       assertEquals(36, Node.QUOTED_PROP);
2126:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2127:       assertEquals(55, Node.INFERRED_FUNCTION);
2128:       assertEquals(46, Node.IS_NAMESPACE);
2129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2130:       assertEquals(57, Node.LAST_PROP);
2131:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2132:       assertEquals(47, Node.IS_DISPATCHER);
2133:       assertEquals(2, Node.POST_FLAG);
2134:       assertEquals(30, Node.VAR_ARGS_NAME);
2135:       
2136:       boolean boolean7 = node2.isReturn();
2137:       assertFalse(node1.isSetterDef());
2138:       assertFalse(node1.isParamList());
2139:       assertEquals(40, node1.getType());
2140:       assertFalse(node1.isCatch());
2141:       assertFalse(node1.isCall());
2142:       assertFalse(node1.isVar());
2143:       assertFalse(node1.isFunction());
2144:       assertFalse(node1.isRegExp());
2145:       assertEquals(0, node1.getChildCount());
2146:       assertFalse(node1.isBlock());
2147:       assertTrue(node1.isString());
2148:       assertFalse(node1.isDebugger());
2149:       assertFalse(node1.isArrayLit());
2150:       assertFalse(node1.isTry());
2151:       assertFalse(node1.isStringKey());
2152:       assertFalse(node1.isGetterDef());
2153:       assertFalse(node1.isNE());
2154:       assertFalse(node1.isIf());
2155:       assertEquals((-1), node1.getLineno());
2156:       assertFalse(node1.isContinue());
2157:       assertFalse(node1.isFor());
2158:       assertFalse(node1.isCast());
2159:       assertFalse(node1.hasMoreThanOneChild());
2160:       assertFalse(node1.isInc());
2161:       assertFalse(node1.isIn());
2162:       assertFalse(node1.isGetProp());
2163:       assertFalse(node1.isThis());
2164:       assertFalse(node1.isBreak());
2165:       assertFalse(node1.isFalse());
2166:       assertFalse(node1.isThrow());
2167:       assertFalse(node1.isInstanceOf());
2168:       assertFalse(node1.isHook());
2169:       assertFalse(node1.isWith());
2170:       assertFalse(node1.isComma());
2171:       assertEquals((-1), node1.getCharno());
2172:       assertFalse(node1.isScript());
2173:       assertFalse(node1.hasOneChild());
2174:       assertFalse(node1.isSwitch());
2175:       assertFalse(node1.isCase());
2176:       assertFalse(node1.isAnd());
2177:       assertFalse(node1.isNumber());
2178:       assertEquals((-1), node1.getSourcePosition());
2179:       assertFalse(node1.isObjectLit());
2180:       assertFalse(node1.isNot());
2181:       assertFalse(node1.isAssignAdd());
2182:       assertFalse(node1.isLabel());
2183:       assertFalse(node1.isReturn());
2184:       assertFalse(node1.isDelProp());
2185:       assertFalse(node1.isLabelName());
2186:       assertFalse(node1.isGetElem());
2187:       assertFalse(node1.isWhile());
2188:       assertFalse(node1.isDec());
2189:       assertFalse(node1.isTypeOf());
2190:       assertFalse(node1.hasChildren());
2191:       assertFalse(node1.isAssign());
2192:       assertFalse(node1.isNew());
2193:       assertFalse(node1.isTrue());
2194:       assertFalse(node1.isExprResult());
2195:       assertFalse(node1.isAdd());
2196:       assertFalse(node1.isDefaultCase());
2197:       assertFalse(node1.isVoid());
2198:       assertFalse(node1.isDo());
2199:       assertFalse(node1.isName());
2200:       assertFalse(node1.isEmpty());
2201:       assertFalse(node1.isNull());
2202:       assertFalse(node1.isOr());
2203:       assertFalse(node0.isTry());
2204:       assertFalse(node0.isVoid());
2205:       assertFalse(node0.isArrayLit());
2206:       assertFalse(node0.isDebugger());
2207:       assertFalse(node0.isFunction());
2208:       assertFalse(node0.isRegExp());
2209:       assertEquals(2468, node0.getType());
2210:       assertFalse(node0.isDelProp());
2211:       assertFalse(node0.isGetterDef());
2212:       assertFalse(node0.isNE());
2213:       assertFalse(node0.isTrue());
2214:       assertFalse(node0.isIf());
2215:       assertFalse(node0.isCatch());
2216:       assertFalse(node0.isFor());
2217:       assertFalse(node0.isCase());
2218:       assertFalse(node0.isAdd());
2219:       assertEquals((-1), node0.getCharno());
2220:       assertFalse(node0.isNew());
2221:       assertFalse(node0.isCall());
2222:       assertFalse(node0.isName());
2223:       assertFalse(node0.isBreak());
2224:       assertFalse(node0.isSwitch());
2225:       assertFalse(node0.isNull());
2226:       assertFalse(node0.isStringKey());
2227:       assertFalse(node0.isParamList());
2228:       assertFalse(node0.isAssignAdd());
2229:       assertFalse(node0.isOr());
2230:       assertFalse(node0.isLabel());
2231:       assertEquals(0, node0.getChildCount());
2232:       assertFalse(node0.isEmpty());
2233:       assertFalse(node0.isDo());
2234:       assertFalse(node0.isVar());
2235:       assertFalse(node0.isDefaultCase());
2236:       assertFalse(node0.hasOneChild());
2237:       assertFalse(node0.isScript());
2238:       assertFalse(node0.isCast());
2239:       assertFalse(node0.isExprResult());
2240:       assertFalse(node0.isLabelName());
2241:       assertFalse(node0.isNot());
2242:       assertFalse(node0.isGetElem());
2243:       assertEquals((-1), node0.getSourcePosition());
2244:       assertFalse(node0.isAnd());
2245:       assertFalse(node0.isReturn());
2246:       assertFalse(node0.isGetProp());
2247:       assertEquals((-1), node0.getLineno());
2248:       assertFalse(node0.isComma());
2249:       assertFalse(node0.hasMoreThanOneChild());
2250:       assertFalse(node0.isNumber());
2251:       assertFalse(node0.isObjectLit());
2252:       assertFalse(node0.isTypeOf());
2253:       assertFalse(node0.isInstanceOf());
2254:       assertFalse(node0.isWith());
2255:       assertFalse(node0.isAssign());
2256:       assertFalse(node0.hasChildren());
2257:       assertFalse(node0.isDec());
2258:       assertFalse(node0.isHook());
2259:       assertFalse(node0.isThis());
2260:       assertFalse(node0.isWhile());
2261:       assertFalse(node0.isBlock());
2262:       assertFalse(node0.isInc());
2263:       assertFalse(node0.isString());
2264:       assertFalse(node0.isSetterDef());
2265:       assertFalse(node0.isIn());
2266:       assertFalse(node0.isContinue());
2267:       assertFalse(node0.isFalse());
2268:       assertFalse(node0.isThrow());
2269:       assertFalse(node2.isDelProp());
2270:       assertTrue(node2.hasOneChild());
2271:       assertFalse(node2.isGetterDef());
2272:       assertFalse(node2.isIf());
2273:       assertFalse(node2.isEmpty());
2274:       assertTrue(node2.hasChildren());
2275:       assertEquals(1, node2.getChildCount());
2276:       assertFalse(node2.isTry());
2277:       assertFalse(node2.isFor());
2278:       assertFalse(node2.isString());
2279:       assertFalse(node2.isCase());
2280:       assertFalse(node2.isFunction());
2281:       assertFalse(node2.isArrayLit());
2282:       assertFalse(node2.isParamList());
2283:       assertFalse(node2.isDebugger());
2284:       assertEquals((-1), node2.getCharno());
2285:       assertFalse(node2.isSwitch());
2286:       assertFalse(node2.isBreak());
2287:       assertFalse(node2.isName());
2288:       assertFalse(node2.isCall());
2289:       assertFalse(node2.isGetProp());
2290:       assertFalse(node2.isNew());
2291:       assertFalse(node2.isComma());
2292:       assertFalse(node2.isVar());
2293:       assertFalse(node2.isDefaultCase());
2294:       assertFalse(node2.isDo());
2295:       assertFalse(node2.isExprResult());
2296:       assertFalse(node2.isAdd());
2297:       assertFalse(node2.isVoid());
2298:       assertFalse(node2.isOr());
2299:       assertFalse(node2.isTrue());
2300:       assertFalse(node2.isNull());
2301:       assertFalse(node2.isNumber());
2302:       assertEquals((-1), node2.getSourcePosition());
2303:       assertFalse(node2.isTypeOf());
2304:       assertFalse(node2.isLabelName());
2305:       assertFalse(node2.isDec());
2306:       assertFalse(node2.isAssign());
2307:       assertFalse(node2.isGetElem());
2308:       assertFalse(node2.isCast());
2309:       assertFalse(node2.isReturn());
2310:       assertFalse(node2.isAssignAdd());
2311:       assertFalse(node2.isLabel());
2312:       assertFalse(node2.isWhile());
2313:       assertFalse(node2.isNot());
2314:       assertFalse(node2.isObjectLit());
2315:       assertFalse(node2.isContinue());
2316:       assertFalse(node2.isScript());
2317:       assertFalse(node2.isAnd());
2318:       assertFalse(node2.isStringKey());
2319:       assertFalse(node2.isSetterDef());
2320:       assertFalse(node2.isFalse());
2321:       assertFalse(node2.isHook());
2322:       assertFalse(node2.isThis());
2323:       assertFalse(node2.isBlock());
2324:       assertFalse(node2.isThrow());
2325:       assertFalse(node2.isWith());
2326:       assertFalse(node2.isRegExp());
2327:       assertFalse(node2.isInc());
2328:       assertFalse(node2.hasMoreThanOneChild());
2329:       assertFalse(node2.isCatch());
2330:       assertFalse(node2.isInstanceOf());
2331:       assertEquals((-1), node2.getLineno());
2332:       assertFalse(node2.isIn());
2333:       assertEquals(56, node2.getType());
2334:       assertFalse(node2.isNE());
2335:       assertNotSame(node1, node0);
2336:       assertNotSame(node0, node1);
2337:       assertFalse(boolean7);
2338:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2339:       assertEquals(32, Node.INCRDECR_PROP);
2340:       assertEquals(1, Node.DECR_FLAG);
2341:       assertEquals(30, Node.VAR_ARGS_NAME);
2342:       assertEquals(46, Node.IS_NAMESPACE);
2343:       assertEquals(12, Node.COLUMN_BITS);
2344:       assertEquals(2, Node.POST_FLAG);
2345:       assertEquals(37, Node.OPT_ARG_NAME);
2346:       assertEquals(56, Node.CHANGE_TIME);
2347:       assertEquals(49, Node.DIRECT_EVAL);
2348:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2349:       assertEquals(50, Node.FREE_CALL);
2350:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2351:       assertEquals(54, Node.SLASH_V);
2352:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2353:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2354:       assertEquals(55, Node.INFERRED_FUNCTION);
2355:       assertEquals(4095, Node.COLUMN_MASK);
2356:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2357:       assertEquals(43, Node.IS_CONSTANT_NAME);
2358:       assertEquals(48, Node.DIRECTIVES);
2359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2360:       assertEquals(40, Node.ORIGINALNAME_PROP);
2361:       assertEquals(47, Node.IS_DISPATCHER);
2362:       assertEquals(57, Node.REFLECTED_OBJECT);
2363:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2364:       assertEquals(36, Node.QUOTED_PROP);
2365:       assertEquals(57, Node.LAST_PROP);
2366:       assertEquals(8, Node.FLAG_NO_THROWS);
2367:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2368:       assertEquals(29, Node.JSDOC_INFO_PROP);
2369:       assertEquals(52, Node.LENGTH);
2370:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2372:       assertEquals(39, Node.EMPTY_BLOCK);
2373:       assertEquals(53, Node.INPUT_ID);
2374:       assertEquals(40, Node.ORIGINALNAME_PROP);
2375:       assertEquals(57, Node.REFLECTED_OBJECT);
2376:       assertEquals(8, Node.FLAG_NO_THROWS);
2377:       assertEquals(39, Node.EMPTY_BLOCK);
2378:       assertEquals(54, Node.SLASH_V);
2379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2380:       assertEquals(52, Node.LENGTH);
2381:       assertEquals(50, Node.FREE_CALL);
2382:       assertEquals(4095, Node.COLUMN_MASK);
2383:       assertEquals(12, Node.COLUMN_BITS);
2384:       assertEquals(32, Node.INCRDECR_PROP);
2385:       assertEquals(48, Node.DIRECTIVES);
2386:       assertEquals(49, Node.DIRECT_EVAL);
2387:       assertEquals(1, Node.DECR_FLAG);
2388:       assertEquals(37, Node.OPT_ARG_NAME);
2389:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2390:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2391:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2392:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2393:       assertEquals(29, Node.JSDOC_INFO_PROP);
2394:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2395:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2396:       assertEquals(43, Node.IS_CONSTANT_NAME);
2397:       assertEquals(56, Node.CHANGE_TIME);
2398:       assertEquals(53, Node.INPUT_ID);
2399:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2400:       assertEquals(36, Node.QUOTED_PROP);
2401:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2402:       assertEquals(55, Node.INFERRED_FUNCTION);
2403:       assertEquals(46, Node.IS_NAMESPACE);
2404:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2405:       assertEquals(57, Node.LAST_PROP);
2406:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2407:       assertEquals(47, Node.IS_DISPATCHER);
2408:       assertEquals(2, Node.POST_FLAG);
2409:       assertEquals(30, Node.VAR_ARGS_NAME);
2410:       assertEquals(48, Node.DIRECTIVES);
2411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2412:       assertEquals(39, Node.EMPTY_BLOCK);
2413:       assertEquals(40, Node.ORIGINALNAME_PROP);
2414:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2415:       assertEquals(4095, Node.COLUMN_MASK);
2416:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2417:       assertEquals(54, Node.SLASH_V);
2418:       assertEquals(43, Node.IS_CONSTANT_NAME);
2419:       assertEquals(1, Node.DECR_FLAG);
2420:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2421:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2422:       assertEquals(50, Node.FREE_CALL);
2423:       assertEquals(37, Node.OPT_ARG_NAME);
2424:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2425:       assertEquals(46, Node.IS_NAMESPACE);
2426:       assertEquals(56, Node.CHANGE_TIME);
2427:       assertEquals(32, Node.INCRDECR_PROP);
2428:       assertEquals(12, Node.COLUMN_BITS);
2429:       assertEquals(47, Node.IS_DISPATCHER);
2430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2431:       assertEquals(2, Node.POST_FLAG);
2432:       assertEquals(30, Node.VAR_ARGS_NAME);
2433:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2434:       assertEquals(53, Node.INPUT_ID);
2435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2436:       assertEquals(57, Node.LAST_PROP);
2437:       assertEquals(49, Node.DIRECT_EVAL);
2438:       assertEquals(55, Node.INFERRED_FUNCTION);
2439:       assertEquals(29, Node.JSDOC_INFO_PROP);
2440:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2441:       assertEquals(57, Node.REFLECTED_OBJECT);
2442:       assertEquals(36, Node.QUOTED_PROP);
2443:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2444:       assertEquals(52, Node.LENGTH);
2445:       assertEquals(8, Node.FLAG_NO_THROWS);
2446:       
2447:       Node node3 = Node.newNumber(240.924);
2448:       assertEquals((-1), node3.getLineno());
2449:       assertFalse(node3.hasMoreThanOneChild());
2450:       assertFalse(node3.isAssignAdd());
2451:       assertFalse(node3.isOr());
2452:       assertEquals(39, node3.getType());
2453:       assertFalse(node3.isLabel());
2454:       assertFalse(node3.isReturn());
2455:       assertEquals((-1), node3.getSourcePosition());
2456:       assertFalse(node3.isWhile());
2457:       assertFalse(node3.isDo());
2458:       assertFalse(node3.isNew());
2459:       assertFalse(node3.isAdd());
2460:       assertFalse(node3.hasOneChild());
2461:       assertFalse(node3.isBlock());
2462:       assertFalse(node3.isDec());
2463:       assertFalse(node3.hasChildren());
2464:       assertFalse(node3.isWith());
2465:       assertFalse(node3.isAssign());
2466:       assertFalse(node3.isName());
2467:       assertFalse(node3.isTypeOf());
2468:       assertFalse(node3.isCall());
2469:       assertFalse(node3.isExprResult());
2470:       assertFalse(node3.isGetElem());
2471:       assertEquals(0, node3.getChildCount());
2472:       assertFalse(node3.isInstanceOf());
2473:       assertFalse(node3.isParamList());
2474:       assertFalse(node3.isNull());
2475:       assertFalse(node3.isThis());
2476:       assertFalse(node3.isDefaultCase());
2477:       assertFalse(node3.isScript());
2478:       assertFalse(node3.isArrayLit());
2479:       assertEquals((-1), node3.getCharno());
2480:       assertFalse(node3.isStringKey());
2481:       assertFalse(node3.isVar());
2482:       assertFalse(node3.isSwitch());
2483:       assertFalse(node3.isLabelName());
2484:       assertFalse(node3.isIn());
2485:       assertTrue(node3.isNumber());
2486:       assertFalse(node3.isNE());
2487:       assertFalse(node3.isGetterDef());
2488:       assertFalse(node3.isString());
2489:       assertFalse(node3.isCase());
2490:       assertFalse(node3.isEmpty());
2491:       assertFalse(node3.isInc());
2492:       assertFalse(node3.isTry());
2493:       assertFalse(node3.isFor());
2494:       assertFalse(node3.isTrue());
2495:       assertFalse(node3.isHook());
2496:       assertFalse(node3.isIf());
2497:       assertFalse(node3.isBreak());
2498:       assertFalse(node3.isRegExp());
2499:       assertFalse(node3.isDelProp());
2500:       assertFalse(node3.isVoid());
2501:       assertFalse(node3.isCatch());
2502:       assertFalse(node3.isObjectLit());
2503:       assertFalse(node3.isComma());
2504:       assertFalse(node3.isAnd());
2505:       assertFalse(node3.isNot());
2506:       assertFalse(node3.isGetProp());
2507:       assertFalse(node3.isSetterDef());
2508:       assertFalse(node3.isThrow());
2509:       assertFalse(node3.isDebugger());
2510:       assertFalse(node3.isFunction());
2511:       assertFalse(node3.isFalse());
2512:       assertFalse(node3.isContinue());
2513:       assertFalse(node3.isCast());
2514:       assertNotNull(node3);
2515:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2516:       assertEquals(36, Node.QUOTED_PROP);
2517:       assertEquals(4095, Node.COLUMN_MASK);
2518:       assertEquals(55, Node.INFERRED_FUNCTION);
2519:       assertEquals(53, Node.INPUT_ID);
2520:       assertEquals(39, Node.EMPTY_BLOCK);
2521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2522:       assertEquals(29, Node.JSDOC_INFO_PROP);
2523:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2524:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2525:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2526:       assertEquals(52, Node.LENGTH);
2527:       assertEquals(8, Node.FLAG_NO_THROWS);
2528:       assertEquals(48, Node.DIRECTIVES);
2529:       assertEquals(37, Node.OPT_ARG_NAME);
2530:       assertEquals(56, Node.CHANGE_TIME);
2531:       assertEquals(57, Node.REFLECTED_OBJECT);
2532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2533:       assertEquals(30, Node.VAR_ARGS_NAME);
2534:       assertEquals(49, Node.DIRECT_EVAL);
2535:       assertEquals(1, Node.DECR_FLAG);
2536:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2537:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2538:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2539:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2540:       assertEquals(12, Node.COLUMN_BITS);
2541:       assertEquals(32, Node.INCRDECR_PROP);
2542:       
2543:       // Undeclared exception!
2544:       try { 
2545:         node2.removeChild(node3);
2546:         fail("Expecting exception: RuntimeException");
2547:       
2548:       } catch(RuntimeException e) {
2549:          //
2550:          // node is not a child
2551:          //
2552:          verifyException("com.google.javascript.rhino.Node", e);
2553:       }
2554:   }
2555: }
RegularFileObject[/tmp/EvoSuite_71_1628255786844/com/google/javascript/rhino/Node_71_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:27 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_71_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_71_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_71_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:27.711 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean0 = node0.isOnlyModifiesThisCall();
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node0.putProp(2769, "8IX=/g0 F~");
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

HashSet<String> hashSet0 = new HashSet<String>();
assertEquals(0, hashSet0.size());
assertTrue(hashSet0.isEmpty());
assertNotNull(hashSet0);
assertFalse(hashSet0.contains("8IX=/g0 F~"));

boolean boolean1 = hashSet0.add((String) null);
assertFalse(hashSet0.isEmpty());
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertTrue(boolean1);

boolean boolean2 = hashSet0.add((String) null);
assertFalse(hashSet0.isEmpty());
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertFalse(boolean2);

node0.removeProp(0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean3 = hashSet0.remove("Jcu{'f75U");
assertFalse(hashSet0.isEmpty());
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.contains("Jcu{'f75U"));
assertFalse(boolean3);

node0.setDirectives(hashSet0);
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(hashSet0.isEmpty());
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.contains("Jcu{'f75U"));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node0.addSuppression("Jcu{'f75U");
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean4 = node0.isOr();
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(boolean4);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node_FileLevelJsDocBuilder0.append("BANG");
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node_FileLevelJsDocBuilder0.append("Jcu{'f75U");
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean5 = node0.isSetterDef();
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(boolean5);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

Node node1 = Node.newString("BANG");
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(40, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isDo());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);

Node node2 = new Node(56, node1, node1, node0, node1);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(40, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isDo());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isStringKey());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isThrow());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertEquals(56, node2.getType());
assertFalse(node2.isNE());
assertNotNull(node2);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

int int0 = node2.getIndexOfChild(node0);
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(40, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isDo());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isStringKey());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isThrow());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertEquals(56, node2.getType());
assertFalse(node2.isNE());
assertNotSame(node1, node0);
assertNotSame(node0, node1);
assertEquals((-1), int0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

boolean boolean6 = node0.isInstanceOf();
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotSame(node0, node1);
assertFalse(boolean6);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

boolean boolean7 = node2.isReturn();
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertEquals(40, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isDebugger());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isCast());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isComma());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isReturn());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssign());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isDo());
assertFalse(node1.isName());
assertFalse(node1.isEmpty());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(2468, node0.getType());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isIf());
assertFalse(node0.isCatch());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isAdd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isGetElem());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAnd());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isTypeOf());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node2.isDelProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isGetProp());
assertFalse(node2.isNew());
assertFalse(node2.isComma());
assertFalse(node2.isVar());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isDo());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isVoid());
assertFalse(node2.isOr());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isNumber());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isStringKey());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFalse());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isThrow());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isInc());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIn());
assertEquals(56, node2.getType());
assertFalse(node2.isNE());
assertNotSame(node1, node0);
assertNotSame(node0, node1);
assertFalse(boolean7);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node node3 = Node.newNumber(240.924);
assertEquals((-1), node3.getLineno());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertEquals(39, node3.getType());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isWhile());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.hasOneChild());
assertFalse(node3.isBlock());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isWith());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isTypeOf());
assertFalse(node3.isCall());
assertFalse(node3.isExprResult());
assertFalse(node3.isGetElem());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isThis());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isIn());
assertTrue(node3.isNumber());
assertFalse(node3.isNE());
assertFalse(node3.isGetterDef());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isEmpty());
assertFalse(node3.isInc());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isTrue());
assertFalse(node3.isHook());
assertFalse(node3.isIf());
assertFalse(node3.isBreak());
assertFalse(node3.isRegExp());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.isObjectLit());
assertFalse(node3.isComma());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThrow());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertNotNull(node3);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

node2.removeChild(node3);

[MASTER] 13:16:31.343 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_86_1628255790867/com/google/javascript/rhino/Node_86_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_86_1628255790867/com/google/javascript/rhino/Node_86_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:31.343 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:31.343 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:31.355 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 857
[MASTER] 13:16:31.356 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_86_1628255790867/com/google/javascript/rhino/Node_86_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.HashSet;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_86_tmp__ESTest extends Node_86_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
22:       assertFalse(node0.isNumber());
23:       assertFalse(node0.isTypeOf());
24:       assertFalse(node0.hasChildren());
25:       assertEquals((-1), node0.getSourcePosition());
26:       assertFalse(node0.isDec());
27:       assertFalse(node0.isAssignAdd());
28:       assertFalse(node0.isLabel());
29:       assertFalse(node0.isLabelName());
30:       assertFalse(node0.isReturn());
31:       assertFalse(node0.hasOneChild());
32:       assertFalse(node0.isOr());
33:       assertFalse(node0.isNew());
34:       assertFalse(node0.isDo());
35:       assertFalse(node0.isAnd());
36:       assertFalse(node0.isVar());
37:       assertFalse(node0.isCast());
38:       assertFalse(node0.isContinue());
39:       assertFalse(node0.isNull());
40:       assertFalse(node0.isGetProp());
41:       assertFalse(node0.isBreak());
42:       assertFalse(node0.isComma());
43:       assertFalse(node0.isName());
44:       assertFalse(node0.isObjectLit());
45:       assertFalse(node0.isAdd());
46:       assertFalse(node0.isNot());
47:       assertFalse(node0.isTrue());
48:       assertFalse(node0.isExprResult());
49:       assertFalse(node0.isVoid());
50:       assertFalse(node0.isWhile());
51:       assertFalse(node0.isCall());
52:       assertFalse(node0.isAssign());
53:       assertFalse(node0.isGetElem());
54:       assertFalse(node0.isNE());
55:       assertFalse(node0.isDelProp());
56:       assertFalse(node0.isGetterDef());
57:       assertFalse(node0.isFor());
58:       assertFalse(node0.isIf());
59:       assertFalse(node0.isCase());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isIn());
62:       assertFalse(node0.isString());
63:       assertFalse(node0.isSwitch());
64:       assertFalse(node0.isFunction());
65:       assertFalse(node0.isInc());
66:       assertEquals((-1), node0.getCharno());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isDefaultCase());
69:       assertFalse(node0.isArrayLit());
70:       assertEquals(0, node0.getChildCount());
71:       assertFalse(node0.isFalse());
72:       assertEquals(2468, node0.getType());
73:       assertFalse(node0.isSetterDef());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isThrow());
76:       assertFalse(node0.isStringKey());
77:       assertFalse(node0.isParamList());
78:       assertFalse(node0.isRegExp());
79:       assertFalse(node0.isScript());
80:       assertFalse(node0.isTry());
81:       assertFalse(node0.isBlock());
82:       assertFalse(node0.hasMoreThanOneChild());
83:       assertFalse(node0.isHook());
84:       assertEquals((-1), node0.getLineno());
85:       assertFalse(node0.isWith());
86:       assertFalse(node0.isCatch());
87:       assertFalse(node0.isInstanceOf());
88:       assertNotNull(node0);
89:       assertEquals(55, Node.INFERRED_FUNCTION);
90:       assertEquals(8, Node.FLAG_NO_THROWS);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
93:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
94:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
95:       assertEquals(39, Node.EMPTY_BLOCK);
96:       assertEquals(54, Node.SLASH_V);
97:       assertEquals(50, Node.FREE_CALL);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(40, Node.ORIGINALNAME_PROP);
100:       assertEquals(12, Node.COLUMN_BITS);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(2, Node.POST_FLAG);
104:       assertEquals(30, Node.VAR_ARGS_NAME);
105:       assertEquals(15, Node.NO_SIDE_EFFECTS);
106:       assertEquals(57, Node.LAST_PROP);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
111:       assertEquals(32, Node.INCRDECR_PROP);
112:       assertEquals(1, Node.DECR_FLAG);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
115:       assertEquals(53, Node.INPUT_ID);
116:       assertEquals(57, Node.REFLECTED_OBJECT);
117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(56, Node.CHANGE_TIME);
120:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
121:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(48, Node.DIRECTIVES);
124:       assertEquals(49, Node.DIRECT_EVAL);
125:       
126:       boolean boolean0 = node0.isOnlyModifiesThisCall();
127:       assertFalse(node0.isNumber());
128:       assertFalse(node0.isTypeOf());
129:       assertFalse(node0.hasChildren());
130:       assertEquals((-1), node0.getSourcePosition());
131:       assertFalse(node0.isDec());
132:       assertFalse(node0.isAssignAdd());
133:       assertFalse(node0.isLabel());
134:       assertFalse(node0.isLabelName());
135:       assertFalse(node0.isReturn());
136:       assertFalse(node0.hasOneChild());
137:       assertFalse(node0.isOr());
138:       assertFalse(node0.isNew());
139:       assertFalse(node0.isDo());
140:       assertFalse(node0.isAnd());
141:       assertFalse(node0.isVar());
142:       assertFalse(node0.isCast());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.isNull());
145:       assertFalse(node0.isGetProp());
146:       assertFalse(node0.isBreak());
147:       assertFalse(node0.isComma());
148:       assertFalse(node0.isName());
149:       assertFalse(node0.isObjectLit());
150:       assertFalse(node0.isAdd());
151:       assertFalse(node0.isNot());
152:       assertFalse(node0.isTrue());
153:       assertFalse(node0.isExprResult());
154:       assertFalse(node0.isVoid());
155:       assertFalse(node0.isWhile());
156:       assertFalse(node0.isCall());
157:       assertFalse(node0.isAssign());
158:       assertFalse(node0.isGetElem());
159:       assertFalse(node0.isNE());
160:       assertFalse(node0.isDelProp());
161:       assertFalse(node0.isGetterDef());
162:       assertFalse(node0.isFor());
163:       assertFalse(node0.isIf());
164:       assertFalse(node0.isCase());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isIn());
167:       assertFalse(node0.isString());
168:       assertFalse(node0.isSwitch());
169:       assertFalse(node0.isFunction());
170:       assertFalse(node0.isInc());
171:       assertEquals((-1), node0.getCharno());
172:       assertFalse(node0.isDebugger());
173:       assertFalse(node0.isDefaultCase());
174:       assertFalse(node0.isArrayLit());
175:       assertEquals(0, node0.getChildCount());
176:       assertFalse(node0.isFalse());
177:       assertEquals(2468, node0.getType());
178:       assertFalse(node0.isSetterDef());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isThrow());
181:       assertFalse(node0.isStringKey());
182:       assertFalse(node0.isParamList());
183:       assertFalse(node0.isRegExp());
184:       assertFalse(node0.isScript());
185:       assertFalse(node0.isTry());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.hasMoreThanOneChild());
188:       assertFalse(node0.isHook());
189:       assertEquals((-1), node0.getLineno());
190:       assertFalse(node0.isWith());
191:       assertFalse(node0.isCatch());
192:       assertFalse(node0.isInstanceOf());
193:       assertFalse(boolean0);
194:       assertEquals(55, Node.INFERRED_FUNCTION);
195:       assertEquals(8, Node.FLAG_NO_THROWS);
196:       assertEquals(4095, Node.COLUMN_MASK);
197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
200:       assertEquals(39, Node.EMPTY_BLOCK);
201:       assertEquals(54, Node.SLASH_V);
202:       assertEquals(50, Node.FREE_CALL);
203:       assertEquals(43, Node.IS_CONSTANT_NAME);
204:       assertEquals(40, Node.ORIGINALNAME_PROP);
205:       assertEquals(12, Node.COLUMN_BITS);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(51, Node.STATIC_SOURCE_FILE);
208:       assertEquals(2, Node.POST_FLAG);
209:       assertEquals(30, Node.VAR_ARGS_NAME);
210:       assertEquals(15, Node.NO_SIDE_EFFECTS);
211:       assertEquals(57, Node.LAST_PROP);
212:       assertEquals(47, Node.IS_DISPATCHER);
213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
214:       assertEquals(29, Node.JSDOC_INFO_PROP);
215:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(1, Node.DECR_FLAG);
218:       assertEquals(52, Node.LENGTH);
219:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(57, Node.REFLECTED_OBJECT);
222:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
223:       assertEquals(36, Node.QUOTED_PROP);
224:       assertEquals(56, Node.CHANGE_TIME);
225:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
227:       assertEquals(37, Node.OPT_ARG_NAME);
228:       assertEquals(48, Node.DIRECTIVES);
229:       assertEquals(49, Node.DIRECT_EVAL);
230:       
231:       node0.putProp(2769, "8IX=/g0 F~");
232:       assertFalse(node0.isNumber());
233:       assertFalse(node0.isTypeOf());
234:       assertFalse(node0.hasChildren());
235:       assertEquals((-1), node0.getSourcePosition());
236:       assertFalse(node0.isDec());
237:       assertFalse(node0.isAssignAdd());
238:       assertFalse(node0.isLabel());
239:       assertFalse(node0.isLabelName());
240:       assertFalse(node0.isReturn());
241:       assertFalse(node0.hasOneChild());
242:       assertFalse(node0.isOr());
243:       assertFalse(node0.isNew());
244:       assertFalse(node0.isDo());
245:       assertFalse(node0.isAnd());
246:       assertFalse(node0.isVar());
247:       assertFalse(node0.isCast());
248:       assertFalse(node0.isContinue());
249:       assertFalse(node0.isNull());
250:       assertFalse(node0.isGetProp());
251:       assertFalse(node0.isBreak());
252:       assertFalse(node0.isComma());
253:       assertFalse(node0.isName());
254:       assertFalse(node0.isObjectLit());
255:       assertFalse(node0.isAdd());
256:       assertFalse(node0.isNot());
257:       assertFalse(node0.isTrue());
258:       assertFalse(node0.isExprResult());
259:       assertFalse(node0.isVoid());
260:       assertFalse(node0.isWhile());
261:       assertFalse(node0.isCall());
262:       assertFalse(node0.isAssign());
263:       assertFalse(node0.isGetElem());
264:       assertFalse(node0.isNE());
265:       assertFalse(node0.isDelProp());
266:       assertFalse(node0.isGetterDef());
267:       assertFalse(node0.isFor());
268:       assertFalse(node0.isIf());
269:       assertFalse(node0.isCase());
270:       assertFalse(node0.isEmpty());
271:       assertFalse(node0.isIn());
272:       assertFalse(node0.isString());
273:       assertFalse(node0.isSwitch());
274:       assertFalse(node0.isFunction());
275:       assertFalse(node0.isInc());
276:       assertEquals((-1), node0.getCharno());
277:       assertFalse(node0.isDebugger());
278:       assertFalse(node0.isDefaultCase());
279:       assertFalse(node0.isArrayLit());
280:       assertEquals(0, node0.getChildCount());
281:       assertFalse(node0.isFalse());
282:       assertEquals(2468, node0.getType());
283:       assertFalse(node0.isSetterDef());
284:       assertFalse(node0.isThis());
285:       assertFalse(node0.isThrow());
286:       assertFalse(node0.isStringKey());
287:       assertFalse(node0.isParamList());
288:       assertFalse(node0.isRegExp());
289:       assertFalse(node0.isScript());
290:       assertFalse(node0.isTry());
291:       assertFalse(node0.isBlock());
292:       assertFalse(node0.hasMoreThanOneChild());
293:       assertFalse(node0.isHook());
294:       assertEquals((-1), node0.getLineno());
295:       assertFalse(node0.isWith());
296:       assertFalse(node0.isCatch());
297:       assertFalse(node0.isInstanceOf());
298:       assertEquals(55, Node.INFERRED_FUNCTION);
299:       assertEquals(8, Node.FLAG_NO_THROWS);
300:       assertEquals(4095, Node.COLUMN_MASK);
301:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
302:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(54, Node.SLASH_V);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(43, Node.IS_CONSTANT_NAME);
308:       assertEquals(40, Node.ORIGINALNAME_PROP);
309:       assertEquals(12, Node.COLUMN_BITS);
310:       assertEquals(46, Node.IS_NAMESPACE);
311:       assertEquals(51, Node.STATIC_SOURCE_FILE);
312:       assertEquals(2, Node.POST_FLAG);
313:       assertEquals(30, Node.VAR_ARGS_NAME);
314:       assertEquals(15, Node.NO_SIDE_EFFECTS);
315:       assertEquals(57, Node.LAST_PROP);
316:       assertEquals(47, Node.IS_DISPATCHER);
317:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
318:       assertEquals(29, Node.JSDOC_INFO_PROP);
319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
320:       assertEquals(32, Node.INCRDECR_PROP);
321:       assertEquals(1, Node.DECR_FLAG);
322:       assertEquals(52, Node.LENGTH);
323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
324:       assertEquals(53, Node.INPUT_ID);
325:       assertEquals(57, Node.REFLECTED_OBJECT);
326:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
327:       assertEquals(36, Node.QUOTED_PROP);
328:       assertEquals(56, Node.CHANGE_TIME);
329:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
330:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
331:       assertEquals(37, Node.OPT_ARG_NAME);
332:       assertEquals(48, Node.DIRECTIVES);
333:       assertEquals(49, Node.DIRECT_EVAL);
334:       
335:       HashSet<String> hashSet0 = new HashSet<String>();
336:       assertTrue(hashSet0.isEmpty());
337:       assertEquals(0, hashSet0.size());
338:       assertNotNull(hashSet0);
339:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
340:       
341:       boolean boolean1 = hashSet0.add((String) null);
342:       assertEquals(1, hashSet0.size());
343:       assertFalse(hashSet0.isEmpty());
344:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
345:       assertTrue(boolean1);
346:       assertFalse(boolean1 == boolean0);
347:       
348:       boolean boolean2 = hashSet0.add((String) null);
349:       assertEquals(1, hashSet0.size());
350:       assertFalse(hashSet0.isEmpty());
351:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
352:       assertFalse(boolean2);
353:       assertFalse(boolean2 == boolean1);
354:       assertTrue(boolean2 == boolean0);
355:       
356:       node0.removeProp(0);
357:       assertFalse(node0.isNumber());
358:       assertFalse(node0.isTypeOf());
359:       assertFalse(node0.hasChildren());
360:       assertEquals((-1), node0.getSourcePosition());
361:       assertFalse(node0.isDec());
362:       assertFalse(node0.isAssignAdd());
363:       assertFalse(node0.isLabel());
364:       assertFalse(node0.isLabelName());
365:       assertFalse(node0.isReturn());
366:       assertFalse(node0.hasOneChild());
367:       assertFalse(node0.isOr());
368:       assertFalse(node0.isNew());
369:       assertFalse(node0.isDo());
370:       assertFalse(node0.isAnd());
371:       assertFalse(node0.isVar());
372:       assertFalse(node0.isCast());
373:       assertFalse(node0.isContinue());
374:       assertFalse(node0.isNull());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.isBreak());
377:       assertFalse(node0.isComma());
378:       assertFalse(node0.isName());
379:       assertFalse(node0.isObjectLit());
380:       assertFalse(node0.isAdd());
381:       assertFalse(node0.isNot());
382:       assertFalse(node0.isTrue());
383:       assertFalse(node0.isExprResult());
384:       assertFalse(node0.isVoid());
385:       assertFalse(node0.isWhile());
386:       assertFalse(node0.isCall());
387:       assertFalse(node0.isAssign());
388:       assertFalse(node0.isGetElem());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isDelProp());
391:       assertFalse(node0.isGetterDef());
392:       assertFalse(node0.isFor());
393:       assertFalse(node0.isIf());
394:       assertFalse(node0.isCase());
395:       assertFalse(node0.isEmpty());
396:       assertFalse(node0.isIn());
397:       assertFalse(node0.isString());
398:       assertFalse(node0.isSwitch());
399:       assertFalse(node0.isFunction());
400:       assertFalse(node0.isInc());
401:       assertEquals((-1), node0.getCharno());
402:       assertFalse(node0.isDebugger());
403:       assertFalse(node0.isDefaultCase());
404:       assertFalse(node0.isArrayLit());
405:       assertEquals(0, node0.getChildCount());
406:       assertFalse(node0.isFalse());
407:       assertEquals(2468, node0.getType());
408:       assertFalse(node0.isSetterDef());
409:       assertFalse(node0.isThis());
410:       assertFalse(node0.isThrow());
411:       assertFalse(node0.isStringKey());
412:       assertFalse(node0.isParamList());
413:       assertFalse(node0.isRegExp());
414:       assertFalse(node0.isScript());
415:       assertFalse(node0.isTry());
416:       assertFalse(node0.isBlock());
417:       assertFalse(node0.hasMoreThanOneChild());
418:       assertFalse(node0.isHook());
419:       assertEquals((-1), node0.getLineno());
420:       assertFalse(node0.isWith());
421:       assertFalse(node0.isCatch());
422:       assertFalse(node0.isInstanceOf());
423:       assertEquals(55, Node.INFERRED_FUNCTION);
424:       assertEquals(8, Node.FLAG_NO_THROWS);
425:       assertEquals(4095, Node.COLUMN_MASK);
426:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
429:       assertEquals(39, Node.EMPTY_BLOCK);
430:       assertEquals(54, Node.SLASH_V);
431:       assertEquals(50, Node.FREE_CALL);
432:       assertEquals(43, Node.IS_CONSTANT_NAME);
433:       assertEquals(40, Node.ORIGINALNAME_PROP);
434:       assertEquals(12, Node.COLUMN_BITS);
435:       assertEquals(46, Node.IS_NAMESPACE);
436:       assertEquals(51, Node.STATIC_SOURCE_FILE);
437:       assertEquals(2, Node.POST_FLAG);
438:       assertEquals(30, Node.VAR_ARGS_NAME);
439:       assertEquals(15, Node.NO_SIDE_EFFECTS);
440:       assertEquals(57, Node.LAST_PROP);
441:       assertEquals(47, Node.IS_DISPATCHER);
442:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
445:       assertEquals(32, Node.INCRDECR_PROP);
446:       assertEquals(1, Node.DECR_FLAG);
447:       assertEquals(52, Node.LENGTH);
448:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
449:       assertEquals(53, Node.INPUT_ID);
450:       assertEquals(57, Node.REFLECTED_OBJECT);
451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
452:       assertEquals(36, Node.QUOTED_PROP);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
455:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
456:       assertEquals(37, Node.OPT_ARG_NAME);
457:       assertEquals(48, Node.DIRECTIVES);
458:       assertEquals(49, Node.DIRECT_EVAL);
459:       
460:       boolean boolean3 = hashSet0.remove("Jcu{'f75U");
461:       assertEquals(1, hashSet0.size());
462:       assertFalse(hashSet0.isEmpty());
463:       assertFalse(hashSet0.contains("Jcu{'f75U"));
464:       assertFalse(boolean3);
465:       assertTrue(boolean3 == boolean0);
466:       assertTrue(boolean3 == boolean2);
467:       assertFalse(boolean3 == boolean1);
468:       
469:       node0.setDirectives(hashSet0);
470:       assertFalse(node0.isNumber());
471:       assertFalse(node0.isTypeOf());
472:       assertFalse(node0.hasChildren());
473:       assertEquals((-1), node0.getSourcePosition());
474:       assertFalse(node0.isDec());
475:       assertFalse(node0.isAssignAdd());
476:       assertFalse(node0.isLabel());
477:       assertFalse(node0.isLabelName());
478:       assertFalse(node0.isReturn());
479:       assertFalse(node0.hasOneChild());
480:       assertFalse(node0.isOr());
481:       assertFalse(node0.isNew());
482:       assertFalse(node0.isDo());
483:       assertFalse(node0.isAnd());
484:       assertFalse(node0.isVar());
485:       assertFalse(node0.isCast());
486:       assertFalse(node0.isContinue());
487:       assertFalse(node0.isNull());
488:       assertFalse(node0.isGetProp());
489:       assertFalse(node0.isBreak());
490:       assertFalse(node0.isComma());
491:       assertFalse(node0.isName());
492:       assertFalse(node0.isObjectLit());
493:       assertFalse(node0.isAdd());
494:       assertFalse(node0.isNot());
495:       assertFalse(node0.isTrue());
496:       assertFalse(node0.isExprResult());
497:       assertFalse(node0.isVoid());
498:       assertFalse(node0.isWhile());
499:       assertFalse(node0.isCall());
500:       assertFalse(node0.isAssign());
501:       assertFalse(node0.isGetElem());
502:       assertFalse(node0.isNE());
503:       assertFalse(node0.isDelProp());
504:       assertFalse(node0.isGetterDef());
505:       assertFalse(node0.isFor());
506:       assertFalse(node0.isIf());
507:       assertFalse(node0.isCase());
508:       assertFalse(node0.isEmpty());
509:       assertFalse(node0.isIn());
510:       assertFalse(node0.isString());
511:       assertFalse(node0.isSwitch());
512:       assertFalse(node0.isFunction());
513:       assertFalse(node0.isInc());
514:       assertEquals((-1), node0.getCharno());
515:       assertFalse(node0.isDebugger());
516:       assertFalse(node0.isDefaultCase());
517:       assertFalse(node0.isArrayLit());
518:       assertEquals(0, node0.getChildCount());
519:       assertFalse(node0.isFalse());
520:       assertEquals(2468, node0.getType());
521:       assertFalse(node0.isSetterDef());
522:       assertFalse(node0.isThis());
523:       assertFalse(node0.isThrow());
524:       assertFalse(node0.isStringKey());
525:       assertFalse(node0.isParamList());
526:       assertFalse(node0.isRegExp());
527:       assertFalse(node0.isScript());
528:       assertFalse(node0.isTry());
529:       assertFalse(node0.isBlock());
530:       assertFalse(node0.hasMoreThanOneChild());
531:       assertFalse(node0.isHook());
532:       assertEquals((-1), node0.getLineno());
533:       assertFalse(node0.isWith());
534:       assertFalse(node0.isCatch());
535:       assertFalse(node0.isInstanceOf());
536:       assertEquals(1, hashSet0.size());
537:       assertFalse(hashSet0.isEmpty());
538:       assertFalse(hashSet0.contains("Jcu{'f75U"));
539:       assertEquals(55, Node.INFERRED_FUNCTION);
540:       assertEquals(8, Node.FLAG_NO_THROWS);
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
543:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
544:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
545:       assertEquals(39, Node.EMPTY_BLOCK);
546:       assertEquals(54, Node.SLASH_V);
547:       assertEquals(50, Node.FREE_CALL);
548:       assertEquals(43, Node.IS_CONSTANT_NAME);
549:       assertEquals(40, Node.ORIGINALNAME_PROP);
550:       assertEquals(12, Node.COLUMN_BITS);
551:       assertEquals(46, Node.IS_NAMESPACE);
552:       assertEquals(51, Node.STATIC_SOURCE_FILE);
553:       assertEquals(2, Node.POST_FLAG);
554:       assertEquals(30, Node.VAR_ARGS_NAME);
555:       assertEquals(15, Node.NO_SIDE_EFFECTS);
556:       assertEquals(57, Node.LAST_PROP);
557:       assertEquals(47, Node.IS_DISPATCHER);
558:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
559:       assertEquals(29, Node.JSDOC_INFO_PROP);
560:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
561:       assertEquals(32, Node.INCRDECR_PROP);
562:       assertEquals(1, Node.DECR_FLAG);
563:       assertEquals(52, Node.LENGTH);
564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
565:       assertEquals(53, Node.INPUT_ID);
566:       assertEquals(57, Node.REFLECTED_OBJECT);
567:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
568:       assertEquals(36, Node.QUOTED_PROP);
569:       assertEquals(56, Node.CHANGE_TIME);
570:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
571:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
572:       assertEquals(37, Node.OPT_ARG_NAME);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(49, Node.DIRECT_EVAL);
575:       
576:       node0.addSuppression("Jcu{'f75U");
577:       assertFalse(node0.isNumber());
578:       assertFalse(node0.isTypeOf());
579:       assertFalse(node0.hasChildren());
580:       assertEquals((-1), node0.getSourcePosition());
581:       assertFalse(node0.isDec());
582:       assertFalse(node0.isAssignAdd());
583:       assertFalse(node0.isLabel());
584:       assertFalse(node0.isLabelName());
585:       assertFalse(node0.isReturn());
586:       assertFalse(node0.hasOneChild());
587:       assertFalse(node0.isOr());
588:       assertFalse(node0.isNew());
589:       assertFalse(node0.isDo());
590:       assertFalse(node0.isAnd());
591:       assertFalse(node0.isVar());
592:       assertFalse(node0.isCast());
593:       assertFalse(node0.isContinue());
594:       assertFalse(node0.isNull());
595:       assertFalse(node0.isGetProp());
596:       assertFalse(node0.isBreak());
597:       assertFalse(node0.isComma());
598:       assertFalse(node0.isName());
599:       assertFalse(node0.isObjectLit());
600:       assertFalse(node0.isAdd());
601:       assertFalse(node0.isNot());
602:       assertFalse(node0.isTrue());
603:       assertFalse(node0.isExprResult());
604:       assertFalse(node0.isVoid());
605:       assertFalse(node0.isWhile());
606:       assertFalse(node0.isCall());
607:       assertFalse(node0.isAssign());
608:       assertFalse(node0.isGetElem());
609:       assertFalse(node0.isNE());
610:       assertFalse(node0.isDelProp());
611:       assertFalse(node0.isGetterDef());
612:       assertFalse(node0.isFor());
613:       assertFalse(node0.isIf());
614:       assertFalse(node0.isCase());
615:       assertFalse(node0.isEmpty());
616:       assertFalse(node0.isIn());
617:       assertFalse(node0.isString());
618:       assertFalse(node0.isSwitch());
619:       assertFalse(node0.isFunction());
620:       assertFalse(node0.isInc());
621:       assertEquals((-1), node0.getCharno());
622:       assertFalse(node0.isDebugger());
623:       assertFalse(node0.isDefaultCase());
624:       assertFalse(node0.isArrayLit());
625:       assertEquals(0, node0.getChildCount());
626:       assertFalse(node0.isFalse());
627:       assertEquals(2468, node0.getType());
628:       assertFalse(node0.isSetterDef());
629:       assertFalse(node0.isThis());
630:       assertFalse(node0.isThrow());
631:       assertFalse(node0.isStringKey());
632:       assertFalse(node0.isParamList());
633:       assertFalse(node0.isRegExp());
634:       assertFalse(node0.isScript());
635:       assertFalse(node0.isTry());
636:       assertFalse(node0.isBlock());
637:       assertFalse(node0.hasMoreThanOneChild());
638:       assertFalse(node0.isHook());
639:       assertEquals((-1), node0.getLineno());
640:       assertFalse(node0.isWith());
641:       assertFalse(node0.isCatch());
642:       assertFalse(node0.isInstanceOf());
643:       assertEquals(55, Node.INFERRED_FUNCTION);
644:       assertEquals(8, Node.FLAG_NO_THROWS);
645:       assertEquals(4095, Node.COLUMN_MASK);
646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
648:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
649:       assertEquals(39, Node.EMPTY_BLOCK);
650:       assertEquals(54, Node.SLASH_V);
651:       assertEquals(50, Node.FREE_CALL);
652:       assertEquals(43, Node.IS_CONSTANT_NAME);
653:       assertEquals(40, Node.ORIGINALNAME_PROP);
654:       assertEquals(12, Node.COLUMN_BITS);
655:       assertEquals(46, Node.IS_NAMESPACE);
656:       assertEquals(51, Node.STATIC_SOURCE_FILE);
657:       assertEquals(2, Node.POST_FLAG);
658:       assertEquals(30, Node.VAR_ARGS_NAME);
659:       assertEquals(15, Node.NO_SIDE_EFFECTS);
660:       assertEquals(57, Node.LAST_PROP);
661:       assertEquals(47, Node.IS_DISPATCHER);
662:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
663:       assertEquals(29, Node.JSDOC_INFO_PROP);
664:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
665:       assertEquals(32, Node.INCRDECR_PROP);
666:       assertEquals(1, Node.DECR_FLAG);
667:       assertEquals(52, Node.LENGTH);
668:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
669:       assertEquals(53, Node.INPUT_ID);
670:       assertEquals(57, Node.REFLECTED_OBJECT);
671:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
672:       assertEquals(36, Node.QUOTED_PROP);
673:       assertEquals(56, Node.CHANGE_TIME);
674:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
675:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
676:       assertEquals(37, Node.OPT_ARG_NAME);
677:       assertEquals(48, Node.DIRECTIVES);
678:       assertEquals(49, Node.DIRECT_EVAL);
679:       
680:       boolean boolean4 = node0.isOr();
681:       assertFalse(node0.isNumber());
682:       assertFalse(node0.isTypeOf());
683:       assertFalse(node0.hasChildren());
684:       assertEquals((-1), node0.getSourcePosition());
685:       assertFalse(node0.isDec());
686:       assertFalse(node0.isAssignAdd());
687:       assertFalse(node0.isLabel());
688:       assertFalse(node0.isLabelName());
689:       assertFalse(node0.isReturn());
690:       assertFalse(node0.hasOneChild());
691:       assertFalse(node0.isOr());
692:       assertFalse(node0.isNew());
693:       assertFalse(node0.isDo());
694:       assertFalse(node0.isAnd());
695:       assertFalse(node0.isVar());
696:       assertFalse(node0.isCast());
697:       assertFalse(node0.isContinue());
698:       assertFalse(node0.isNull());
699:       assertFalse(node0.isGetProp());
700:       assertFalse(node0.isBreak());
701:       assertFalse(node0.isComma());
702:       assertFalse(node0.isName());
703:       assertFalse(node0.isObjectLit());
704:       assertFalse(node0.isAdd());
705:       assertFalse(node0.isNot());
706:       assertFalse(node0.isTrue());
707:       assertFalse(node0.isExprResult());
708:       assertFalse(node0.isVoid());
709:       assertFalse(node0.isWhile());
710:       assertFalse(node0.isCall());
711:       assertFalse(node0.isAssign());
712:       assertFalse(node0.isGetElem());
713:       assertFalse(node0.isNE());
714:       assertFalse(node0.isDelProp());
715:       assertFalse(node0.isGetterDef());
716:       assertFalse(node0.isFor());
717:       assertFalse(node0.isIf());
718:       assertFalse(node0.isCase());
719:       assertFalse(node0.isEmpty());
720:       assertFalse(node0.isIn());
721:       assertFalse(node0.isString());
722:       assertFalse(node0.isSwitch());
723:       assertFalse(node0.isFunction());
724:       assertFalse(node0.isInc());
725:       assertEquals((-1), node0.getCharno());
726:       assertFalse(node0.isDebugger());
727:       assertFalse(node0.isDefaultCase());
728:       assertFalse(node0.isArrayLit());
729:       assertEquals(0, node0.getChildCount());
730:       assertFalse(node0.isFalse());
731:       assertEquals(2468, node0.getType());
732:       assertFalse(node0.isSetterDef());
733:       assertFalse(node0.isThis());
734:       assertFalse(node0.isThrow());
735:       assertFalse(node0.isStringKey());
736:       assertFalse(node0.isParamList());
737:       assertFalse(node0.isRegExp());
738:       assertFalse(node0.isScript());
739:       assertFalse(node0.isTry());
740:       assertFalse(node0.isBlock());
741:       assertFalse(node0.hasMoreThanOneChild());
742:       assertFalse(node0.isHook());
743:       assertEquals((-1), node0.getLineno());
744:       assertFalse(node0.isWith());
745:       assertFalse(node0.isCatch());
746:       assertFalse(node0.isInstanceOf());
747:       assertFalse(boolean4);
748:       assertEquals(55, Node.INFERRED_FUNCTION);
749:       assertEquals(8, Node.FLAG_NO_THROWS);
750:       assertEquals(4095, Node.COLUMN_MASK);
751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
752:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
753:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
754:       assertEquals(39, Node.EMPTY_BLOCK);
755:       assertEquals(54, Node.SLASH_V);
756:       assertEquals(50, Node.FREE_CALL);
757:       assertEquals(43, Node.IS_CONSTANT_NAME);
758:       assertEquals(40, Node.ORIGINALNAME_PROP);
759:       assertEquals(12, Node.COLUMN_BITS);
760:       assertEquals(46, Node.IS_NAMESPACE);
761:       assertEquals(51, Node.STATIC_SOURCE_FILE);
762:       assertEquals(2, Node.POST_FLAG);
763:       assertEquals(30, Node.VAR_ARGS_NAME);
764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
765:       assertEquals(57, Node.LAST_PROP);
766:       assertEquals(47, Node.IS_DISPATCHER);
767:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
768:       assertEquals(29, Node.JSDOC_INFO_PROP);
769:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
770:       assertEquals(32, Node.INCRDECR_PROP);
771:       assertEquals(1, Node.DECR_FLAG);
772:       assertEquals(52, Node.LENGTH);
773:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
774:       assertEquals(53, Node.INPUT_ID);
775:       assertEquals(57, Node.REFLECTED_OBJECT);
776:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
777:       assertEquals(36, Node.QUOTED_PROP);
778:       assertEquals(56, Node.CHANGE_TIME);
779:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
780:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
781:       assertEquals(37, Node.OPT_ARG_NAME);
782:       assertEquals(48, Node.DIRECTIVES);
783:       assertEquals(49, Node.DIRECT_EVAL);
784:       assertTrue(boolean4 == boolean0);
785:       assertTrue(boolean4 == boolean3);
786:       assertTrue(boolean4 == boolean2);
787:       assertFalse(boolean4 == boolean1);
788:       
789:       Iterable<Node> iterable0 = node0.children();
790:       assertFalse(node0.isNumber());
791:       assertFalse(node0.isTypeOf());
792:       assertFalse(node0.hasChildren());
793:       assertEquals((-1), node0.getSourcePosition());
794:       assertFalse(node0.isDec());
795:       assertFalse(node0.isAssignAdd());
796:       assertFalse(node0.isLabel());
797:       assertFalse(node0.isLabelName());
798:       assertFalse(node0.isReturn());
799:       assertFalse(node0.hasOneChild());
800:       assertFalse(node0.isOr());
801:       assertFalse(node0.isNew());
802:       assertFalse(node0.isDo());
803:       assertFalse(node0.isAnd());
804:       assertFalse(node0.isVar());
805:       assertFalse(node0.isCast());
806:       assertFalse(node0.isContinue());
807:       assertFalse(node0.isNull());
808:       assertFalse(node0.isGetProp());
809:       assertFalse(node0.isBreak());
810:       assertFalse(node0.isComma());
811:       assertFalse(node0.isName());
812:       assertFalse(node0.isObjectLit());
813:       assertFalse(node0.isAdd());
814:       assertFalse(node0.isNot());
815:       assertFalse(node0.isTrue());
816:       assertFalse(node0.isExprResult());
817:       assertFalse(node0.isVoid());
818:       assertFalse(node0.isWhile());
819:       assertFalse(node0.isCall());
820:       assertFalse(node0.isAssign());
821:       assertFalse(node0.isGetElem());
822:       assertFalse(node0.isNE());
823:       assertFalse(node0.isDelProp());
824:       assertFalse(node0.isGetterDef());
825:       assertFalse(node0.isFor());
826:       assertFalse(node0.isIf());
827:       assertFalse(node0.isCase());
828:       assertFalse(node0.isEmpty());
829:       assertFalse(node0.isIn());
830:       assertFalse(node0.isString());
831:       assertFalse(node0.isSwitch());
832:       assertFalse(node0.isFunction());
833:       assertFalse(node0.isInc());
834:       assertEquals((-1), node0.getCharno());
835:       assertFalse(node0.isDebugger());
836:       assertFalse(node0.isDefaultCase());
837:       assertFalse(node0.isArrayLit());
838:       assertEquals(0, node0.getChildCount());
839:       assertFalse(node0.isFalse());
840:       assertEquals(2468, node0.getType());
841:       assertFalse(node0.isSetterDef());
842:       assertFalse(node0.isThis());
843:       assertFalse(node0.isThrow());
844:       assertFalse(node0.isStringKey());
845:       assertFalse(node0.isParamList());
846:       assertFalse(node0.isRegExp());
847:       assertFalse(node0.isScript());
848:       assertFalse(node0.isTry());
849:       assertFalse(node0.isBlock());
850:       assertFalse(node0.hasMoreThanOneChild());
851:       assertFalse(node0.isHook());
852:       assertEquals((-1), node0.getLineno());
853:       assertFalse(node0.isWith());
854:       assertFalse(node0.isCatch());
855:       assertFalse(node0.isInstanceOf());
856:       assertNotNull(iterable0);
857:       assertFalse(iterable0.contains(node0));
858:       assertEquals(55, Node.INFERRED_FUNCTION);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(4095, Node.COLUMN_MASK);
861:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
862:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
863:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
864:       assertEquals(39, Node.EMPTY_BLOCK);
865:       assertEquals(54, Node.SLASH_V);
866:       assertEquals(50, Node.FREE_CALL);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(40, Node.ORIGINALNAME_PROP);
869:       assertEquals(12, Node.COLUMN_BITS);
870:       assertEquals(46, Node.IS_NAMESPACE);
871:       assertEquals(51, Node.STATIC_SOURCE_FILE);
872:       assertEquals(2, Node.POST_FLAG);
873:       assertEquals(30, Node.VAR_ARGS_NAME);
874:       assertEquals(15, Node.NO_SIDE_EFFECTS);
875:       assertEquals(57, Node.LAST_PROP);
876:       assertEquals(47, Node.IS_DISPATCHER);
877:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
878:       assertEquals(29, Node.JSDOC_INFO_PROP);
879:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
880:       assertEquals(32, Node.INCRDECR_PROP);
881:       assertEquals(1, Node.DECR_FLAG);
882:       assertEquals(52, Node.LENGTH);
883:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
884:       assertEquals(53, Node.INPUT_ID);
885:       assertEquals(57, Node.REFLECTED_OBJECT);
886:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
887:       assertEquals(36, Node.QUOTED_PROP);
888:       assertEquals(56, Node.CHANGE_TIME);
889:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
890:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
891:       assertEquals(37, Node.OPT_ARG_NAME);
892:       assertEquals(48, Node.DIRECTIVES);
893:       assertEquals(49, Node.DIRECT_EVAL);
894:       
895:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
896:       assertFalse(node0.isNumber());
897:       assertFalse(node0.isTypeOf());
898:       assertFalse(node0.hasChildren());
899:       assertEquals((-1), node0.getSourcePosition());
900:       assertFalse(node0.isDec());
901:       assertFalse(node0.isAssignAdd());
902:       assertFalse(node0.isLabel());
903:       assertFalse(node0.isLabelName());
904:       assertFalse(node0.isReturn());
905:       assertFalse(node0.hasOneChild());
906:       assertFalse(node0.isOr());
907:       assertFalse(node0.isNew());
908:       assertFalse(node0.isDo());
909:       assertFalse(node0.isAnd());
910:       assertFalse(node0.isVar());
911:       assertFalse(node0.isCast());
912:       assertFalse(node0.isContinue());
913:       assertFalse(node0.isNull());
914:       assertFalse(node0.isGetProp());
915:       assertFalse(node0.isBreak());
916:       assertFalse(node0.isComma());
917:       assertFalse(node0.isName());
918:       assertFalse(node0.isObjectLit());
919:       assertFalse(node0.isAdd());
920:       assertFalse(node0.isNot());
921:       assertFalse(node0.isTrue());
922:       assertFalse(node0.isExprResult());
923:       assertFalse(node0.isVoid());
924:       assertFalse(node0.isWhile());
925:       assertFalse(node0.isCall());
926:       assertFalse(node0.isAssign());
927:       assertFalse(node0.isGetElem());
928:       assertFalse(node0.isNE());
929:       assertFalse(node0.isDelProp());
930:       assertFalse(node0.isGetterDef());
931:       assertFalse(node0.isFor());
932:       assertFalse(node0.isIf());
933:       assertFalse(node0.isCase());
934:       assertFalse(node0.isEmpty());
935:       assertFalse(node0.isIn());
936:       assertFalse(node0.isString());
937:       assertFalse(node0.isSwitch());
938:       assertFalse(node0.isFunction());
939:       assertFalse(node0.isInc());
940:       assertEquals((-1), node0.getCharno());
941:       assertFalse(node0.isDebugger());
942:       assertFalse(node0.isDefaultCase());
943:       assertFalse(node0.isArrayLit());
944:       assertEquals(0, node0.getChildCount());
945:       assertFalse(node0.isFalse());
946:       assertEquals(2468, node0.getType());
947:       assertFalse(node0.isSetterDef());
948:       assertFalse(node0.isThis());
949:       assertFalse(node0.isThrow());
950:       assertFalse(node0.isStringKey());
951:       assertFalse(node0.isParamList());
952:       assertFalse(node0.isRegExp());
953:       assertFalse(node0.isScript());
954:       assertFalse(node0.isTry());
955:       assertFalse(node0.isBlock());
956:       assertFalse(node0.hasMoreThanOneChild());
957:       assertFalse(node0.isHook());
958:       assertEquals((-1), node0.getLineno());
959:       assertFalse(node0.isWith());
960:       assertFalse(node0.isCatch());
961:       assertFalse(node0.isInstanceOf());
962:       assertNotNull(node_FileLevelJsDocBuilder0);
963:       assertEquals(55, Node.INFERRED_FUNCTION);
964:       assertEquals(8, Node.FLAG_NO_THROWS);
965:       assertEquals(4095, Node.COLUMN_MASK);
966:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
967:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
968:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
969:       assertEquals(39, Node.EMPTY_BLOCK);
970:       assertEquals(54, Node.SLASH_V);
971:       assertEquals(50, Node.FREE_CALL);
972:       assertEquals(43, Node.IS_CONSTANT_NAME);
973:       assertEquals(40, Node.ORIGINALNAME_PROP);
974:       assertEquals(12, Node.COLUMN_BITS);
975:       assertEquals(46, Node.IS_NAMESPACE);
976:       assertEquals(51, Node.STATIC_SOURCE_FILE);
977:       assertEquals(2, Node.POST_FLAG);
978:       assertEquals(30, Node.VAR_ARGS_NAME);
979:       assertEquals(15, Node.NO_SIDE_EFFECTS);
980:       assertEquals(57, Node.LAST_PROP);
981:       assertEquals(47, Node.IS_DISPATCHER);
982:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
983:       assertEquals(29, Node.JSDOC_INFO_PROP);
984:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
985:       assertEquals(32, Node.INCRDECR_PROP);
986:       assertEquals(1, Node.DECR_FLAG);
987:       assertEquals(52, Node.LENGTH);
988:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
989:       assertEquals(53, Node.INPUT_ID);
990:       assertEquals(57, Node.REFLECTED_OBJECT);
991:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
992:       assertEquals(36, Node.QUOTED_PROP);
993:       assertEquals(56, Node.CHANGE_TIME);
994:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
995:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
996:       assertEquals(37, Node.OPT_ARG_NAME);
997:       assertEquals(48, Node.DIRECTIVES);
998:       assertEquals(49, Node.DIRECT_EVAL);
999:       
1000:       boolean boolean5 = node0.isEmpty();
1001:       assertFalse(node0.isNumber());
1002:       assertFalse(node0.isTypeOf());
1003:       assertFalse(node0.hasChildren());
1004:       assertEquals((-1), node0.getSourcePosition());
1005:       assertFalse(node0.isDec());
1006:       assertFalse(node0.isAssignAdd());
1007:       assertFalse(node0.isLabel());
1008:       assertFalse(node0.isLabelName());
1009:       assertFalse(node0.isReturn());
1010:       assertFalse(node0.hasOneChild());
1011:       assertFalse(node0.isOr());
1012:       assertFalse(node0.isNew());
1013:       assertFalse(node0.isDo());
1014:       assertFalse(node0.isAnd());
1015:       assertFalse(node0.isVar());
1016:       assertFalse(node0.isCast());
1017:       assertFalse(node0.isContinue());
1018:       assertFalse(node0.isNull());
1019:       assertFalse(node0.isGetProp());
1020:       assertFalse(node0.isBreak());
1021:       assertFalse(node0.isComma());
1022:       assertFalse(node0.isName());
1023:       assertFalse(node0.isObjectLit());
1024:       assertFalse(node0.isAdd());
1025:       assertFalse(node0.isNot());
1026:       assertFalse(node0.isTrue());
1027:       assertFalse(node0.isExprResult());
1028:       assertFalse(node0.isVoid());
1029:       assertFalse(node0.isWhile());
1030:       assertFalse(node0.isCall());
1031:       assertFalse(node0.isAssign());
1032:       assertFalse(node0.isGetElem());
1033:       assertFalse(node0.isNE());
1034:       assertFalse(node0.isDelProp());
1035:       assertFalse(node0.isGetterDef());
1036:       assertFalse(node0.isFor());
1037:       assertFalse(node0.isIf());
1038:       assertFalse(node0.isCase());
1039:       assertFalse(node0.isEmpty());
1040:       assertFalse(node0.isIn());
1041:       assertFalse(node0.isString());
1042:       assertFalse(node0.isSwitch());
1043:       assertFalse(node0.isFunction());
1044:       assertFalse(node0.isInc());
1045:       assertEquals((-1), node0.getCharno());
1046:       assertFalse(node0.isDebugger());
1047:       assertFalse(node0.isDefaultCase());
1048:       assertFalse(node0.isArrayLit());
1049:       assertEquals(0, node0.getChildCount());
1050:       assertFalse(node0.isFalse());
1051:       assertEquals(2468, node0.getType());
1052:       assertFalse(node0.isSetterDef());
1053:       assertFalse(node0.isThis());
1054:       assertFalse(node0.isThrow());
1055:       assertFalse(node0.isStringKey());
1056:       assertFalse(node0.isParamList());
1057:       assertFalse(node0.isRegExp());
1058:       assertFalse(node0.isScript());
1059:       assertFalse(node0.isTry());
1060:       assertFalse(node0.isBlock());
1061:       assertFalse(node0.hasMoreThanOneChild());
1062:       assertFalse(node0.isHook());
1063:       assertEquals((-1), node0.getLineno());
1064:       assertFalse(node0.isWith());
1065:       assertFalse(node0.isCatch());
1066:       assertFalse(node0.isInstanceOf());
1067:       assertFalse(boolean5);
1068:       assertEquals(55, Node.INFERRED_FUNCTION);
1069:       assertEquals(8, Node.FLAG_NO_THROWS);
1070:       assertEquals(4095, Node.COLUMN_MASK);
1071:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1072:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1073:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1074:       assertEquals(39, Node.EMPTY_BLOCK);
1075:       assertEquals(54, Node.SLASH_V);
1076:       assertEquals(50, Node.FREE_CALL);
1077:       assertEquals(43, Node.IS_CONSTANT_NAME);
1078:       assertEquals(40, Node.ORIGINALNAME_PROP);
1079:       assertEquals(12, Node.COLUMN_BITS);
1080:       assertEquals(46, Node.IS_NAMESPACE);
1081:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1082:       assertEquals(2, Node.POST_FLAG);
1083:       assertEquals(30, Node.VAR_ARGS_NAME);
1084:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1085:       assertEquals(57, Node.LAST_PROP);
1086:       assertEquals(47, Node.IS_DISPATCHER);
1087:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1088:       assertEquals(29, Node.JSDOC_INFO_PROP);
1089:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1090:       assertEquals(32, Node.INCRDECR_PROP);
1091:       assertEquals(1, Node.DECR_FLAG);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1094:       assertEquals(53, Node.INPUT_ID);
1095:       assertEquals(57, Node.REFLECTED_OBJECT);
1096:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1097:       assertEquals(36, Node.QUOTED_PROP);
1098:       assertEquals(56, Node.CHANGE_TIME);
1099:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1100:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1101:       assertEquals(37, Node.OPT_ARG_NAME);
1102:       assertEquals(48, Node.DIRECTIVES);
1103:       assertEquals(49, Node.DIRECT_EVAL);
1104:       assertTrue(boolean5 == boolean4);
1105:       assertTrue(boolean5 == boolean0);
1106:       assertTrue(boolean5 == boolean2);
1107:       assertTrue(boolean5 == boolean3);
1108:       assertFalse(boolean5 == boolean1);
1109:       
1110:       Node node1 = node0.cloneNode();
1111:       assertFalse(node0.isNumber());
1112:       assertFalse(node0.isTypeOf());
1113:       assertFalse(node0.hasChildren());
1114:       assertEquals((-1), node0.getSourcePosition());
1115:       assertFalse(node0.isDec());
1116:       assertFalse(node0.isAssignAdd());
1117:       assertFalse(node0.isLabel());
1118:       assertFalse(node0.isLabelName());
1119:       assertFalse(node0.isReturn());
1120:       assertFalse(node0.hasOneChild());
1121:       assertFalse(node0.isOr());
1122:       assertFalse(node0.isNew());
1123:       assertFalse(node0.isDo());
1124:       assertFalse(node0.isAnd());
1125:       assertFalse(node0.isVar());
1126:       assertFalse(node0.isCast());
1127:       assertFalse(node0.isContinue());
1128:       assertFalse(node0.isNull());
1129:       assertFalse(node0.isGetProp());
1130:       assertFalse(node0.isBreak());
1131:       assertFalse(node0.isComma());
1132:       assertFalse(node0.isName());
1133:       assertFalse(node0.isObjectLit());
1134:       assertFalse(node0.isAdd());
1135:       assertFalse(node0.isNot());
1136:       assertFalse(node0.isTrue());
1137:       assertFalse(node0.isExprResult());
1138:       assertFalse(node0.isVoid());
1139:       assertFalse(node0.isWhile());
1140:       assertFalse(node0.isCall());
1141:       assertFalse(node0.isAssign());
1142:       assertFalse(node0.isGetElem());
1143:       assertFalse(node0.isNE());
1144:       assertFalse(node0.isDelProp());
1145:       assertFalse(node0.isGetterDef());
1146:       assertFalse(node0.isFor());
1147:       assertFalse(node0.isIf());
1148:       assertFalse(node0.isCase());
1149:       assertFalse(node0.isEmpty());
1150:       assertFalse(node0.isIn());
1151:       assertFalse(node0.isString());
1152:       assertFalse(node0.isSwitch());
1153:       assertFalse(node0.isFunction());
1154:       assertFalse(node0.isInc());
1155:       assertEquals((-1), node0.getCharno());
1156:       assertFalse(node0.isDebugger());
1157:       assertFalse(node0.isDefaultCase());
1158:       assertFalse(node0.isArrayLit());
1159:       assertEquals(0, node0.getChildCount());
1160:       assertFalse(node0.isFalse());
1161:       assertEquals(2468, node0.getType());
1162:       assertFalse(node0.isSetterDef());
1163:       assertFalse(node0.isThis());
1164:       assertFalse(node0.isThrow());
1165:       assertFalse(node0.isStringKey());
1166:       assertFalse(node0.isParamList());
1167:       assertFalse(node0.isRegExp());
1168:       assertFalse(node0.isScript());
1169:       assertFalse(node0.isTry());
1170:       assertFalse(node0.isBlock());
1171:       assertFalse(node0.hasMoreThanOneChild());
1172:       assertFalse(node0.isHook());
1173:       assertEquals((-1), node0.getLineno());
1174:       assertFalse(node0.isWith());
1175:       assertFalse(node0.isCatch());
1176:       assertFalse(node0.isInstanceOf());
1177:       assertFalse(node1.isComma());
1178:       assertFalse(node1.isThis());
1179:       assertFalse(node1.isObjectLit());
1180:       assertFalse(node1.isThrow());
1181:       assertFalse(node1.isGetProp());
1182:       assertFalse(node1.isSwitch());
1183:       assertFalse(node1.isScript());
1184:       assertFalse(node1.isString());
1185:       assertFalse(node1.isNot());
1186:       assertEquals((-1), node1.getCharno());
1187:       assertFalse(node1.isCast());
1188:       assertFalse(node1.isFalse());
1189:       assertFalse(node1.isAnd());
1190:       assertFalse(node1.isLabelName());
1191:       assertFalse(node1.isNE());
1192:       assertFalse(node1.isNumber());
1193:       assertFalse(node1.isIf());
1194:       assertFalse(node1.isFor());
1195:       assertFalse(node1.isGetterDef());
1196:       assertFalse(node1.isIn());
1197:       assertFalse(node1.isTry());
1198:       assertFalse(node1.hasOneChild());
1199:       assertFalse(node1.isCase());
1200:       assertFalse(node1.isInc());
1201:       assertFalse(node1.isRegExp());
1202:       assertFalse(node1.isWith());
1203:       assertFalse(node1.isBlock());
1204:       assertFalse(node1.isHook());
1205:       assertFalse(node1.isCatch());
1206:       assertFalse(node1.hasMoreThanOneChild());
1207:       assertFalse(node1.isInstanceOf());
1208:       assertEquals((-1), node1.getLineno());
1209:       assertFalse(node1.isSetterDef());
1210:       assertFalse(node1.isParamList());
1211:       assertFalse(node1.isNull());
1212:       assertEquals(0, node1.getChildCount());
1213:       assertFalse(node1.isVar());
1214:       assertFalse(node1.isAdd());
1215:       assertFalse(node1.isNew());
1216:       assertFalse(node1.isFunction());
1217:       assertFalse(node1.isDefaultCase());
1218:       assertEquals(2468, node1.getType());
1219:       assertFalse(node1.isDebugger());
1220:       assertFalse(node1.isStringKey());
1221:       assertFalse(node1.isContinue());
1222:       assertFalse(node1.isArrayLit());
1223:       assertFalse(node1.isTypeOf());
1224:       assertFalse(node1.isAssignAdd());
1225:       assertFalse(node1.isReturn());
1226:       assertFalse(node1.isOr());
1227:       assertFalse(node1.isAssign());
1228:       assertFalse(node1.isDec());
1229:       assertFalse(node1.isLabel());
1230:       assertEquals((-1), node1.getSourcePosition());
1231:       assertFalse(node1.hasChildren());
1232:       assertFalse(node1.isEmpty());
1233:       assertFalse(node1.isDo());
1234:       assertFalse(node1.isVoid());
1235:       assertFalse(node1.isTrue());
1236:       assertFalse(node1.isExprResult());
1237:       assertFalse(node1.isWhile());
1238:       assertFalse(node1.isCall());
1239:       assertFalse(node1.isDelProp());
1240:       assertFalse(node1.isName());
1241:       assertFalse(node1.isGetElem());
1242:       assertFalse(node1.isBreak());
1243:       assertNotSame(node0, node1);
1244:       assertNotSame(node1, node0);
1245:       assertNotNull(node1);
1246:       assertEquals(55, Node.INFERRED_FUNCTION);
1247:       assertEquals(8, Node.FLAG_NO_THROWS);
1248:       assertEquals(4095, Node.COLUMN_MASK);
1249:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1250:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1252:       assertEquals(39, Node.EMPTY_BLOCK);
1253:       assertEquals(54, Node.SLASH_V);
1254:       assertEquals(50, Node.FREE_CALL);
1255:       assertEquals(43, Node.IS_CONSTANT_NAME);
1256:       assertEquals(40, Node.ORIGINALNAME_PROP);
1257:       assertEquals(12, Node.COLUMN_BITS);
1258:       assertEquals(46, Node.IS_NAMESPACE);
1259:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1260:       assertEquals(2, Node.POST_FLAG);
1261:       assertEquals(30, Node.VAR_ARGS_NAME);
1262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1263:       assertEquals(57, Node.LAST_PROP);
1264:       assertEquals(47, Node.IS_DISPATCHER);
1265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1268:       assertEquals(32, Node.INCRDECR_PROP);
1269:       assertEquals(1, Node.DECR_FLAG);
1270:       assertEquals(52, Node.LENGTH);
1271:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1272:       assertEquals(53, Node.INPUT_ID);
1273:       assertEquals(57, Node.REFLECTED_OBJECT);
1274:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1275:       assertEquals(36, Node.QUOTED_PROP);
1276:       assertEquals(56, Node.CHANGE_TIME);
1277:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1278:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1279:       assertEquals(37, Node.OPT_ARG_NAME);
1280:       assertEquals(48, Node.DIRECTIVES);
1281:       assertEquals(49, Node.DIRECT_EVAL);
1282:       assertEquals(32, Node.INCRDECR_PROP);
1283:       assertEquals(46, Node.IS_NAMESPACE);
1284:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1285:       assertEquals(37, Node.OPT_ARG_NAME);
1286:       assertEquals(57, Node.LAST_PROP);
1287:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1288:       assertEquals(47, Node.IS_DISPATCHER);
1289:       assertEquals(2, Node.POST_FLAG);
1290:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1291:       assertEquals(30, Node.VAR_ARGS_NAME);
1292:       assertEquals(1, Node.DECR_FLAG);
1293:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1294:       assertEquals(12, Node.COLUMN_BITS);
1295:       assertEquals(40, Node.ORIGINALNAME_PROP);
1296:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1297:       assertEquals(50, Node.FREE_CALL);
1298:       assertEquals(54, Node.SLASH_V);
1299:       assertEquals(43, Node.IS_CONSTANT_NAME);
1300:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1301:       assertEquals(8, Node.FLAG_NO_THROWS);
1302:       assertEquals(39, Node.EMPTY_BLOCK);
1303:       assertEquals(4095, Node.COLUMN_MASK);
1304:       assertEquals(55, Node.INFERRED_FUNCTION);
1305:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1306:       assertEquals(52, Node.LENGTH);
1307:       assertEquals(57, Node.REFLECTED_OBJECT);
1308:       assertEquals(53, Node.INPUT_ID);
1309:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1310:       assertEquals(29, Node.JSDOC_INFO_PROP);
1311:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1312:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1313:       assertEquals(49, Node.DIRECT_EVAL);
1314:       assertEquals(36, Node.QUOTED_PROP);
1315:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1316:       assertEquals(48, Node.DIRECTIVES);
1317:       assertEquals(56, Node.CHANGE_TIME);
1318:       assertFalse(node1.equals((Object)node0));
1319:       
1320:       boolean boolean6 = node1.isComma();
1321:       assertFalse(node0.isNumber());
1322:       assertFalse(node0.isTypeOf());
1323:       assertFalse(node0.hasChildren());
1324:       assertEquals((-1), node0.getSourcePosition());
1325:       assertFalse(node0.isDec());
1326:       assertFalse(node0.isAssignAdd());
1327:       assertFalse(node0.isLabel());
1328:       assertFalse(node0.isLabelName());
1329:       assertFalse(node0.isReturn());
1330:       assertFalse(node0.hasOneChild());
1331:       assertFalse(node0.isOr());
1332:       assertFalse(node0.isNew());
1333:       assertFalse(node0.isDo());
1334:       assertFalse(node0.isAnd());
1335:       assertFalse(node0.isVar());
1336:       assertFalse(node0.isCast());
1337:       assertFalse(node0.isContinue());
1338:       assertFalse(node0.isNull());
1339:       assertFalse(node0.isGetProp());
1340:       assertFalse(node0.isBreak());
1341:       assertFalse(node0.isComma());
1342:       assertFalse(node0.isName());
1343:       assertFalse(node0.isObjectLit());
1344:       assertFalse(node0.isAdd());
1345:       assertFalse(node0.isNot());
1346:       assertFalse(node0.isTrue());
1347:       assertFalse(node0.isExprResult());
1348:       assertFalse(node0.isVoid());
1349:       assertFalse(node0.isWhile());
1350:       assertFalse(node0.isCall());
1351:       assertFalse(node0.isAssign());
1352:       assertFalse(node0.isGetElem());
1353:       assertFalse(node0.isNE());
1354:       assertFalse(node0.isDelProp());
1355:       assertFalse(node0.isGetterDef());
1356:       assertFalse(node0.isFor());
1357:       assertFalse(node0.isIf());
1358:       assertFalse(node0.isCase());
1359:       assertFalse(node0.isEmpty());
1360:       assertFalse(node0.isIn());
1361:       assertFalse(node0.isString());
1362:       assertFalse(node0.isSwitch());
1363:       assertFalse(node0.isFunction());
1364:       assertFalse(node0.isInc());
1365:       assertEquals((-1), node0.getCharno());
1366:       assertFalse(node0.isDebugger());
1367:       assertFalse(node0.isDefaultCase());
1368:       assertFalse(node0.isArrayLit());
1369:       assertEquals(0, node0.getChildCount());
1370:       assertFalse(node0.isFalse());
1371:       assertEquals(2468, node0.getType());
1372:       assertFalse(node0.isSetterDef());
1373:       assertFalse(node0.isThis());
1374:       assertFalse(node0.isThrow());
1375:       assertFalse(node0.isStringKey());
1376:       assertFalse(node0.isParamList());
1377:       assertFalse(node0.isRegExp());
1378:       assertFalse(node0.isScript());
1379:       assertFalse(node0.isTry());
1380:       assertFalse(node0.isBlock());
1381:       assertFalse(node0.hasMoreThanOneChild());
1382:       assertFalse(node0.isHook());
1383:       assertEquals((-1), node0.getLineno());
1384:       assertFalse(node0.isWith());
1385:       assertFalse(node0.isCatch());
1386:       assertFalse(node0.isInstanceOf());
1387:       assertFalse(node1.isComma());
1388:       assertFalse(node1.isThis());
1389:       assertFalse(node1.isObjectLit());
1390:       assertFalse(node1.isThrow());
1391:       assertFalse(node1.isGetProp());
1392:       assertFalse(node1.isSwitch());
1393:       assertFalse(node1.isScript());
1394:       assertFalse(node1.isString());
1395:       assertFalse(node1.isNot());
1396:       assertEquals((-1), node1.getCharno());
1397:       assertFalse(node1.isCast());
1398:       assertFalse(node1.isFalse());
1399:       assertFalse(node1.isAnd());
1400:       assertFalse(node1.isLabelName());
1401:       assertFalse(node1.isNE());
1402:       assertFalse(node1.isNumber());
1403:       assertFalse(node1.isIf());
1404:       assertFalse(node1.isFor());
1405:       assertFalse(node1.isGetterDef());
1406:       assertFalse(node1.isIn());
1407:       assertFalse(node1.isTry());
1408:       assertFalse(node1.hasOneChild());
1409:       assertFalse(node1.isCase());
1410:       assertFalse(node1.isInc());
1411:       assertFalse(node1.isRegExp());
1412:       assertFalse(node1.isWith());
1413:       assertFalse(node1.isBlock());
1414:       assertFalse(node1.isHook());
1415:       assertFalse(node1.isCatch());
1416:       assertFalse(node1.hasMoreThanOneChild());
1417:       assertFalse(node1.isInstanceOf());
1418:       assertEquals((-1), node1.getLineno());
1419:       assertFalse(node1.isSetterDef());
1420:       assertFalse(node1.isParamList());
1421:       assertFalse(node1.isNull());
1422:       assertEquals(0, node1.getChildCount());
1423:       assertFalse(node1.isVar());
1424:       assertFalse(node1.isAdd());
1425:       assertFalse(node1.isNew());
1426:       assertFalse(node1.isFunction());
1427:       assertFalse(node1.isDefaultCase());
1428:       assertEquals(2468, node1.getType());
1429:       assertFalse(node1.isDebugger());
1430:       assertFalse(node1.isStringKey());
1431:       assertFalse(node1.isContinue());
1432:       assertFalse(node1.isArrayLit());
1433:       assertFalse(node1.isTypeOf());
1434:       assertFalse(node1.isAssignAdd());
1435:       assertFalse(node1.isReturn());
1436:       assertFalse(node1.isOr());
1437:       assertFalse(node1.isAssign());
1438:       assertFalse(node1.isDec());
1439:       assertFalse(node1.isLabel());
1440:       assertEquals((-1), node1.getSourcePosition());
1441:       assertFalse(node1.hasChildren());
1442:       assertFalse(node1.isEmpty());
1443:       assertFalse(node1.isDo());
1444:       assertFalse(node1.isVoid());
1445:       assertFalse(node1.isTrue());
1446:       assertFalse(node1.isExprResult());
1447:       assertFalse(node1.isWhile());
1448:       assertFalse(node1.isCall());
1449:       assertFalse(node1.isDelProp());
1450:       assertFalse(node1.isName());
1451:       assertFalse(node1.isGetElem());
1452:       assertFalse(node1.isBreak());
1453:       assertNotSame(node0, node1);
1454:       assertNotSame(node1, node0);
1455:       assertFalse(boolean6);
1456:       assertEquals(55, Node.INFERRED_FUNCTION);
1457:       assertEquals(8, Node.FLAG_NO_THROWS);
1458:       assertEquals(4095, Node.COLUMN_MASK);
1459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1461:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1462:       assertEquals(39, Node.EMPTY_BLOCK);
1463:       assertEquals(54, Node.SLASH_V);
1464:       assertEquals(50, Node.FREE_CALL);
1465:       assertEquals(43, Node.IS_CONSTANT_NAME);
1466:       assertEquals(40, Node.ORIGINALNAME_PROP);
1467:       assertEquals(12, Node.COLUMN_BITS);
1468:       assertEquals(46, Node.IS_NAMESPACE);
1469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1470:       assertEquals(2, Node.POST_FLAG);
1471:       assertEquals(30, Node.VAR_ARGS_NAME);
1472:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1473:       assertEquals(57, Node.LAST_PROP);
1474:       assertEquals(47, Node.IS_DISPATCHER);
1475:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1476:       assertEquals(29, Node.JSDOC_INFO_PROP);
1477:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1478:       assertEquals(32, Node.INCRDECR_PROP);
1479:       assertEquals(1, Node.DECR_FLAG);
1480:       assertEquals(52, Node.LENGTH);
1481:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1482:       assertEquals(53, Node.INPUT_ID);
1483:       assertEquals(57, Node.REFLECTED_OBJECT);
1484:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1485:       assertEquals(36, Node.QUOTED_PROP);
1486:       assertEquals(56, Node.CHANGE_TIME);
1487:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1488:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1489:       assertEquals(37, Node.OPT_ARG_NAME);
1490:       assertEquals(48, Node.DIRECTIVES);
1491:       assertEquals(49, Node.DIRECT_EVAL);
1492:       assertEquals(32, Node.INCRDECR_PROP);
1493:       assertEquals(46, Node.IS_NAMESPACE);
1494:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1495:       assertEquals(37, Node.OPT_ARG_NAME);
1496:       assertEquals(57, Node.LAST_PROP);
1497:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1498:       assertEquals(47, Node.IS_DISPATCHER);
1499:       assertEquals(2, Node.POST_FLAG);
1500:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1501:       assertEquals(30, Node.VAR_ARGS_NAME);
1502:       assertEquals(1, Node.DECR_FLAG);
1503:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1504:       assertEquals(12, Node.COLUMN_BITS);
1505:       assertEquals(40, Node.ORIGINALNAME_PROP);
1506:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1507:       assertEquals(50, Node.FREE_CALL);
1508:       assertEquals(54, Node.SLASH_V);
1509:       assertEquals(43, Node.IS_CONSTANT_NAME);
1510:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1511:       assertEquals(8, Node.FLAG_NO_THROWS);
1512:       assertEquals(39, Node.EMPTY_BLOCK);
1513:       assertEquals(4095, Node.COLUMN_MASK);
1514:       assertEquals(55, Node.INFERRED_FUNCTION);
1515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1516:       assertEquals(52, Node.LENGTH);
1517:       assertEquals(57, Node.REFLECTED_OBJECT);
1518:       assertEquals(53, Node.INPUT_ID);
1519:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1520:       assertEquals(29, Node.JSDOC_INFO_PROP);
1521:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1522:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1523:       assertEquals(49, Node.DIRECT_EVAL);
1524:       assertEquals(36, Node.QUOTED_PROP);
1525:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1526:       assertEquals(48, Node.DIRECTIVES);
1527:       assertEquals(56, Node.CHANGE_TIME);
1528:       assertFalse(node0.equals((Object)node1));
1529:       assertFalse(node1.equals((Object)node0));
1530:       assertFalse(boolean6 == boolean1);
1531:       assertTrue(boolean6 == boolean4);
1532:       assertTrue(boolean6 == boolean5);
1533:       assertTrue(boolean6 == boolean0);
1534:       assertTrue(boolean6 == boolean2);
1535:       assertTrue(boolean6 == boolean3);
1536:       
1537:       Node node2 = node0.getChildBefore((Node) null);
1538:       assertFalse(node0.isNumber());
1539:       assertFalse(node0.isTypeOf());
1540:       assertFalse(node0.hasChildren());
1541:       assertEquals((-1), node0.getSourcePosition());
1542:       assertFalse(node0.isDec());
1543:       assertFalse(node0.isAssignAdd());
1544:       assertFalse(node0.isLabel());
1545:       assertFalse(node0.isLabelName());
1546:       assertFalse(node0.isReturn());
1547:       assertFalse(node0.hasOneChild());
1548:       assertFalse(node0.isOr());
1549:       assertFalse(node0.isNew());
1550:       assertFalse(node0.isDo());
1551:       assertFalse(node0.isAnd());
1552:       assertFalse(node0.isVar());
1553:       assertFalse(node0.isCast());
1554:       assertFalse(node0.isContinue());
1555:       assertFalse(node0.isNull());
1556:       assertFalse(node0.isGetProp());
1557:       assertFalse(node0.isBreak());
1558:       assertFalse(node0.isComma());
1559:       assertFalse(node0.isName());
1560:       assertFalse(node0.isObjectLit());
1561:       assertFalse(node0.isAdd());
1562:       assertFalse(node0.isNot());
1563:       assertFalse(node0.isTrue());
1564:       assertFalse(node0.isExprResult());
1565:       assertFalse(node0.isVoid());
1566:       assertFalse(node0.isWhile());
1567:       assertFalse(node0.isCall());
1568:       assertFalse(node0.isAssign());
1569:       assertFalse(node0.isGetElem());
1570:       assertFalse(node0.isNE());
1571:       assertFalse(node0.isDelProp());
1572:       assertFalse(node0.isGetterDef());
1573:       assertFalse(node0.isFor());
1574:       assertFalse(node0.isIf());
1575:       assertFalse(node0.isCase());
1576:       assertFalse(node0.isEmpty());
1577:       assertFalse(node0.isIn());
1578:       assertFalse(node0.isString());
1579:       assertFalse(node0.isSwitch());
1580:       assertFalse(node0.isFunction());
1581:       assertFalse(node0.isInc());
1582:       assertEquals((-1), node0.getCharno());
1583:       assertFalse(node0.isDebugger());
1584:       assertFalse(node0.isDefaultCase());
1585:       assertFalse(node0.isArrayLit());
1586:       assertEquals(0, node0.getChildCount());
1587:       assertFalse(node0.isFalse());
1588:       assertEquals(2468, node0.getType());
1589:       assertFalse(node0.isSetterDef());
1590:       assertFalse(node0.isThis());
1591:       assertFalse(node0.isThrow());
1592:       assertFalse(node0.isStringKey());
1593:       assertFalse(node0.isParamList());
1594:       assertFalse(node0.isRegExp());
1595:       assertFalse(node0.isScript());
1596:       assertFalse(node0.isTry());
1597:       assertFalse(node0.isBlock());
1598:       assertFalse(node0.hasMoreThanOneChild());
1599:       assertFalse(node0.isHook());
1600:       assertEquals((-1), node0.getLineno());
1601:       assertFalse(node0.isWith());
1602:       assertFalse(node0.isCatch());
1603:       assertFalse(node0.isInstanceOf());
1604:       assertNotSame(node0, node1);
1605:       assertNull(node2);
1606:       assertEquals(55, Node.INFERRED_FUNCTION);
1607:       assertEquals(8, Node.FLAG_NO_THROWS);
1608:       assertEquals(4095, Node.COLUMN_MASK);
1609:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1610:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1611:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1612:       assertEquals(39, Node.EMPTY_BLOCK);
1613:       assertEquals(54, Node.SLASH_V);
1614:       assertEquals(50, Node.FREE_CALL);
1615:       assertEquals(43, Node.IS_CONSTANT_NAME);
1616:       assertEquals(40, Node.ORIGINALNAME_PROP);
1617:       assertEquals(12, Node.COLUMN_BITS);
1618:       assertEquals(46, Node.IS_NAMESPACE);
1619:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1620:       assertEquals(2, Node.POST_FLAG);
1621:       assertEquals(30, Node.VAR_ARGS_NAME);
1622:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1623:       assertEquals(57, Node.LAST_PROP);
1624:       assertEquals(47, Node.IS_DISPATCHER);
1625:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1626:       assertEquals(29, Node.JSDOC_INFO_PROP);
1627:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1628:       assertEquals(32, Node.INCRDECR_PROP);
1629:       assertEquals(1, Node.DECR_FLAG);
1630:       assertEquals(52, Node.LENGTH);
1631:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1632:       assertEquals(53, Node.INPUT_ID);
1633:       assertEquals(57, Node.REFLECTED_OBJECT);
1634:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1635:       assertEquals(36, Node.QUOTED_PROP);
1636:       assertEquals(56, Node.CHANGE_TIME);
1637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1639:       assertEquals(37, Node.OPT_ARG_NAME);
1640:       assertEquals(48, Node.DIRECTIVES);
1641:       assertEquals(49, Node.DIRECT_EVAL);
1642:       assertFalse(node0.equals((Object)node1));
1643:   }
1644: }
RegularFileObject[/tmp/EvoSuite_86_1628255790867/com/google/javascript/rhino/Node_86_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:31 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_86_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_86_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_86_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:31.460 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertNotNull(node0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean0 = node0.isOnlyModifiesThisCall();
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(boolean0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

node0.putProp(2769, "8IX=/g0 F~");
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

HashSet<String> hashSet0 = new HashSet<String>();
assertTrue(hashSet0.isEmpty());
assertEquals(0, hashSet0.size());
assertNotNull(hashSet0);
assertFalse(hashSet0.contains("8IX=/g0 F~"));

boolean boolean1 = hashSet0.add((String) null);
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);

boolean boolean2 = hashSet0.add((String) null);
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertFalse(boolean2);
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

node0.removeProp(0);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean3 = hashSet0.remove("Jcu{'f75U");
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("Jcu{'f75U"));
assertFalse(boolean3);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean1);

node0.setDirectives(hashSet0);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("Jcu{'f75U"));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

node0.addSuppression("Jcu{'f75U");
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean4 = node0.isOr();
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(boolean4);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);

boolean boolean5 = node0.isEmpty();
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(boolean5);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean0);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);
assertFalse(boolean5 == boolean1);

Node node1 = node0.cloneNode();
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(2468, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node1.equals((Object)node0));

boolean boolean6 = node1.isComma();
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isThis());
assertFalse(node1.isObjectLit());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isFunction());
assertFalse(node1.isDefaultCase());
assertEquals(2468, node1.getType());
assertFalse(node1.isDebugger());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.hasChildren());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isWhile());
assertFalse(node1.isCall());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isBreak());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(boolean6);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean3);

Node node2 = node0.getChildBefore((Node) null);
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isLabelName());
assertFalse(node0.isReturn());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.isAnd());
assertFalse(node0.isVar());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isNull());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isWhile());
assertFalse(node0.isCall());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertNotSame(node0, node1);
assertNull(node2);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertFalse(node0.equals((Object)node1));


[MASTER] 13:16:36.923 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_106_1628255796647/com/google/javascript/rhino/Node_106_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_106_1628255796647/com/google/javascript/rhino/Node_106_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:36.923 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:36.923 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:36.923 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 523
[MASTER] 13:16:36.925 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_106_1628255796647/com/google/javascript/rhino/Node_106_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:36 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.NavigableSet;
13: import java.util.TreeSet;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_106_tmp__ESTest extends Node_106_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(0);
24:       assertFalse(node0.isString());
25:       assertFalse(node0.isCase());
26:       assertEquals((-1), node0.getCharno());
27:       assertFalse(node0.isSwitch());
28:       assertFalse(node0.isHook());
29:       assertFalse(node0.isFalse());
30:       assertEquals(0, node0.getType());
31:       assertFalse(node0.isIf());
32:       assertFalse(node0.isDelProp());
33:       assertFalse(node0.isBreak());
34:       assertFalse(node0.isNE());
35:       assertFalse(node0.isThrow());
36:       assertFalse(node0.isIn());
37:       assertFalse(node0.isInc());
38:       assertFalse(node0.isEmpty());
39:       assertFalse(node0.isDefaultCase());
40:       assertFalse(node0.isWith());
41:       assertFalse(node0.isRegExp());
42:       assertFalse(node0.isArrayLit());
43:       assertEquals(0, node0.getChildCount());
44:       assertFalse(node0.isCatch());
45:       assertFalse(node0.isInstanceOf());
46:       assertFalse(node0.isGetterDef());
47:       assertFalse(node0.isNumber());
48:       assertFalse(node0.isLabelName());
49:       assertFalse(node0.isParamList());
50:       assertFalse(node0.isThis());
51:       assertFalse(node0.isFor());
52:       assertFalse(node0.isStringKey());
53:       assertFalse(node0.isTry());
54:       assertFalse(node0.hasOneChild());
55:       assertFalse(node0.isScript());
56:       assertFalse(node0.isWhile());
57:       assertFalse(node0.isDo());
58:       assertFalse(node0.isBlock());
59:       assertFalse(node0.isReturn());
60:       assertFalse(node0.isLabel());
61:       assertEquals((-1), node0.getLineno());
62:       assertFalse(node0.isCall());
63:       assertFalse(node0.isContinue());
64:       assertFalse(node0.hasMoreThanOneChild());
65:       assertFalse(node0.isName());
66:       assertFalse(node0.isVar());
67:       assertFalse(node0.isNull());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isNew());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.isSetterDef());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isNot());
74:       assertFalse(node0.isVoid());
75:       assertFalse(node0.isTrue());
76:       assertFalse(node0.isAnd());
77:       assertFalse(node0.isDebugger());
78:       assertFalse(node0.isExprResult());
79:       assertFalse(node0.isFunction());
80:       assertFalse(node0.isGetElem());
81:       assertFalse(node0.isCast());
82:       assertFalse(node0.hasChildren());
83:       assertEquals((-1), node0.getSourcePosition());
84:       assertFalse(node0.isTypeOf());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isDec());
87:       assertFalse(node0.isAssign());
88:       assertFalse(node0.isObjectLit());
89:       assertFalse(node0.isGetProp());
90:       assertNotNull(node0);
91:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
92:       assertEquals(53, Node.INPUT_ID);
93:       assertEquals(36, Node.QUOTED_PROP);
94:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
95:       assertEquals(43, Node.IS_CONSTANT_NAME);
96:       assertEquals(56, Node.CHANGE_TIME);
97:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
98:       assertEquals(39, Node.EMPTY_BLOCK);
99:       assertEquals(47, Node.IS_DISPATCHER);
100:       assertEquals(8, Node.FLAG_NO_THROWS);
101:       assertEquals(2, Node.POST_FLAG);
102:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
103:       assertEquals(55, Node.INFERRED_FUNCTION);
104:       assertEquals(29, Node.JSDOC_INFO_PROP);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(57, Node.LAST_PROP);
108:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
109:       assertEquals(54, Node.SLASH_V);
110:       assertEquals(57, Node.REFLECTED_OBJECT);
111:       assertEquals(30, Node.VAR_ARGS_NAME);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(40, Node.ORIGINALNAME_PROP);
114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
115:       assertEquals(48, Node.DIRECTIVES);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(37, Node.OPT_ARG_NAME);
118:       assertEquals(46, Node.IS_NAMESPACE);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(50, Node.FREE_CALL);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(1, Node.DECR_FLAG);
124:       assertEquals(12, Node.COLUMN_BITS);
125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
126:       assertEquals(32, Node.INCRDECR_PROP);
127:       
128:       TreeSet<String> treeSet0 = new TreeSet<String>();
129:       assertNotNull(treeSet0);
130:       
131:       NavigableSet<String> navigableSet0 = treeSet0.tailSet("k.~!4+De5arG>r", false);
132:       assertTrue(navigableSet0.isEmpty());
133:       assertEquals(0, navigableSet0.size());
134:       assertNotNull(navigableSet0);
135:       assertFalse(treeSet0.contains("k.~!4+De5arG>r"));
136:       assertFalse(navigableSet0.contains("k.~!4+De5arG>r"));
137:       
138:       node0.setDirectives(navigableSet0);
139:       assertFalse(node0.isString());
140:       assertFalse(node0.isCase());
141:       assertEquals((-1), node0.getCharno());
142:       assertFalse(node0.isSwitch());
143:       assertFalse(node0.isHook());
144:       assertFalse(node0.isFalse());
145:       assertEquals(0, node0.getType());
146:       assertFalse(node0.isIf());
147:       assertFalse(node0.isDelProp());
148:       assertFalse(node0.isBreak());
149:       assertFalse(node0.isNE());
150:       assertFalse(node0.isThrow());
151:       assertFalse(node0.isIn());
152:       assertFalse(node0.isInc());
153:       assertFalse(node0.isEmpty());
154:       assertFalse(node0.isDefaultCase());
155:       assertFalse(node0.isWith());
156:       assertFalse(node0.isRegExp());
157:       assertFalse(node0.isArrayLit());
158:       assertEquals(0, node0.getChildCount());
159:       assertFalse(node0.isCatch());
160:       assertFalse(node0.isInstanceOf());
161:       assertFalse(node0.isGetterDef());
162:       assertFalse(node0.isNumber());
163:       assertFalse(node0.isLabelName());
164:       assertFalse(node0.isParamList());
165:       assertFalse(node0.isThis());
166:       assertFalse(node0.isFor());
167:       assertFalse(node0.isStringKey());
168:       assertFalse(node0.isTry());
169:       assertFalse(node0.hasOneChild());
170:       assertFalse(node0.isScript());
171:       assertFalse(node0.isWhile());
172:       assertFalse(node0.isDo());
173:       assertFalse(node0.isBlock());
174:       assertFalse(node0.isReturn());
175:       assertFalse(node0.isLabel());
176:       assertEquals((-1), node0.getLineno());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isContinue());
179:       assertFalse(node0.hasMoreThanOneChild());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isVar());
182:       assertFalse(node0.isNull());
183:       assertFalse(node0.isAssignAdd());
184:       assertFalse(node0.isNew());
185:       assertFalse(node0.isOr());
186:       assertFalse(node0.isSetterDef());
187:       assertFalse(node0.isAdd());
188:       assertFalse(node0.isNot());
189:       assertFalse(node0.isVoid());
190:       assertFalse(node0.isTrue());
191:       assertFalse(node0.isAnd());
192:       assertFalse(node0.isDebugger());
193:       assertFalse(node0.isExprResult());
194:       assertFalse(node0.isFunction());
195:       assertFalse(node0.isGetElem());
196:       assertFalse(node0.isCast());
197:       assertFalse(node0.hasChildren());
198:       assertEquals((-1), node0.getSourcePosition());
199:       assertFalse(node0.isTypeOf());
200:       assertFalse(node0.isComma());
201:       assertFalse(node0.isDec());
202:       assertFalse(node0.isAssign());
203:       assertFalse(node0.isObjectLit());
204:       assertFalse(node0.isGetProp());
205:       assertTrue(navigableSet0.isEmpty());
206:       assertEquals(0, navigableSet0.size());
207:       assertFalse(treeSet0.contains("k.~!4+De5arG>r"));
208:       assertFalse(navigableSet0.contains("k.~!4+De5arG>r"));
209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
210:       assertEquals(53, Node.INPUT_ID);
211:       assertEquals(36, Node.QUOTED_PROP);
212:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
213:       assertEquals(43, Node.IS_CONSTANT_NAME);
214:       assertEquals(56, Node.CHANGE_TIME);
215:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
216:       assertEquals(39, Node.EMPTY_BLOCK);
217:       assertEquals(47, Node.IS_DISPATCHER);
218:       assertEquals(8, Node.FLAG_NO_THROWS);
219:       assertEquals(2, Node.POST_FLAG);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(55, Node.INFERRED_FUNCTION);
222:       assertEquals(29, Node.JSDOC_INFO_PROP);
223:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(57, Node.LAST_PROP);
226:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
227:       assertEquals(54, Node.SLASH_V);
228:       assertEquals(57, Node.REFLECTED_OBJECT);
229:       assertEquals(30, Node.VAR_ARGS_NAME);
230:       assertEquals(52, Node.LENGTH);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
233:       assertEquals(48, Node.DIRECTIVES);
234:       assertEquals(49, Node.DIRECT_EVAL);
235:       assertEquals(37, Node.OPT_ARG_NAME);
236:       assertEquals(46, Node.IS_NAMESPACE);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(4095, Node.COLUMN_MASK);
239:       assertEquals(50, Node.FREE_CALL);
240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
241:       assertEquals(1, Node.DECR_FLAG);
242:       assertEquals(12, Node.COLUMN_BITS);
243:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
244:       assertEquals(32, Node.INCRDECR_PROP);
245:       
246:       node0.addSuppression("this");
247:       assertFalse(node0.isString());
248:       assertFalse(node0.isCase());
249:       assertEquals((-1), node0.getCharno());
250:       assertFalse(node0.isSwitch());
251:       assertFalse(node0.isHook());
252:       assertFalse(node0.isFalse());
253:       assertEquals(0, node0.getType());
254:       assertFalse(node0.isIf());
255:       assertFalse(node0.isDelProp());
256:       assertFalse(node0.isBreak());
257:       assertFalse(node0.isNE());
258:       assertFalse(node0.isThrow());
259:       assertFalse(node0.isIn());
260:       assertFalse(node0.isInc());
261:       assertFalse(node0.isEmpty());
262:       assertFalse(node0.isDefaultCase());
263:       assertFalse(node0.isWith());
264:       assertFalse(node0.isRegExp());
265:       assertFalse(node0.isArrayLit());
266:       assertEquals(0, node0.getChildCount());
267:       assertFalse(node0.isCatch());
268:       assertFalse(node0.isInstanceOf());
269:       assertFalse(node0.isGetterDef());
270:       assertFalse(node0.isNumber());
271:       assertFalse(node0.isLabelName());
272:       assertFalse(node0.isParamList());
273:       assertFalse(node0.isThis());
274:       assertFalse(node0.isFor());
275:       assertFalse(node0.isStringKey());
276:       assertFalse(node0.isTry());
277:       assertFalse(node0.hasOneChild());
278:       assertFalse(node0.isScript());
279:       assertFalse(node0.isWhile());
280:       assertFalse(node0.isDo());
281:       assertFalse(node0.isBlock());
282:       assertFalse(node0.isReturn());
283:       assertFalse(node0.isLabel());
284:       assertEquals((-1), node0.getLineno());
285:       assertFalse(node0.isCall());
286:       assertFalse(node0.isContinue());
287:       assertFalse(node0.hasMoreThanOneChild());
288:       assertFalse(node0.isName());
289:       assertFalse(node0.isVar());
290:       assertFalse(node0.isNull());
291:       assertFalse(node0.isAssignAdd());
292:       assertFalse(node0.isNew());
293:       assertFalse(node0.isOr());
294:       assertFalse(node0.isSetterDef());
295:       assertFalse(node0.isAdd());
296:       assertFalse(node0.isNot());
297:       assertFalse(node0.isVoid());
298:       assertFalse(node0.isTrue());
299:       assertFalse(node0.isAnd());
300:       assertFalse(node0.isDebugger());
301:       assertFalse(node0.isExprResult());
302:       assertFalse(node0.isFunction());
303:       assertFalse(node0.isGetElem());
304:       assertFalse(node0.isCast());
305:       assertFalse(node0.hasChildren());
306:       assertEquals((-1), node0.getSourcePosition());
307:       assertFalse(node0.isTypeOf());
308:       assertFalse(node0.isComma());
309:       assertFalse(node0.isDec());
310:       assertFalse(node0.isAssign());
311:       assertFalse(node0.isObjectLit());
312:       assertFalse(node0.isGetProp());
313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
314:       assertEquals(53, Node.INPUT_ID);
315:       assertEquals(36, Node.QUOTED_PROP);
316:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
317:       assertEquals(43, Node.IS_CONSTANT_NAME);
318:       assertEquals(56, Node.CHANGE_TIME);
319:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
320:       assertEquals(39, Node.EMPTY_BLOCK);
321:       assertEquals(47, Node.IS_DISPATCHER);
322:       assertEquals(8, Node.FLAG_NO_THROWS);
323:       assertEquals(2, Node.POST_FLAG);
324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
325:       assertEquals(55, Node.INFERRED_FUNCTION);
326:       assertEquals(29, Node.JSDOC_INFO_PROP);
327:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(57, Node.LAST_PROP);
330:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(57, Node.REFLECTED_OBJECT);
333:       assertEquals(30, Node.VAR_ARGS_NAME);
334:       assertEquals(52, Node.LENGTH);
335:       assertEquals(40, Node.ORIGINALNAME_PROP);
336:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
337:       assertEquals(48, Node.DIRECTIVES);
338:       assertEquals(49, Node.DIRECT_EVAL);
339:       assertEquals(37, Node.OPT_ARG_NAME);
340:       assertEquals(46, Node.IS_NAMESPACE);
341:       assertEquals(51, Node.STATIC_SOURCE_FILE);
342:       assertEquals(4095, Node.COLUMN_MASK);
343:       assertEquals(50, Node.FREE_CALL);
344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
345:       assertEquals(1, Node.DECR_FLAG);
346:       assertEquals(12, Node.COLUMN_BITS);
347:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
348:       assertEquals(32, Node.INCRDECR_PROP);
349:       
350:       boolean boolean0 = node0.isOr();
351:       assertFalse(node0.isString());
352:       assertFalse(node0.isCase());
353:       assertEquals((-1), node0.getCharno());
354:       assertFalse(node0.isSwitch());
355:       assertFalse(node0.isHook());
356:       assertFalse(node0.isFalse());
357:       assertEquals(0, node0.getType());
358:       assertFalse(node0.isIf());
359:       assertFalse(node0.isDelProp());
360:       assertFalse(node0.isBreak());
361:       assertFalse(node0.isNE());
362:       assertFalse(node0.isThrow());
363:       assertFalse(node0.isIn());
364:       assertFalse(node0.isInc());
365:       assertFalse(node0.isEmpty());
366:       assertFalse(node0.isDefaultCase());
367:       assertFalse(node0.isWith());
368:       assertFalse(node0.isRegExp());
369:       assertFalse(node0.isArrayLit());
370:       assertEquals(0, node0.getChildCount());
371:       assertFalse(node0.isCatch());
372:       assertFalse(node0.isInstanceOf());
373:       assertFalse(node0.isGetterDef());
374:       assertFalse(node0.isNumber());
375:       assertFalse(node0.isLabelName());
376:       assertFalse(node0.isParamList());
377:       assertFalse(node0.isThis());
378:       assertFalse(node0.isFor());
379:       assertFalse(node0.isStringKey());
380:       assertFalse(node0.isTry());
381:       assertFalse(node0.hasOneChild());
382:       assertFalse(node0.isScript());
383:       assertFalse(node0.isWhile());
384:       assertFalse(node0.isDo());
385:       assertFalse(node0.isBlock());
386:       assertFalse(node0.isReturn());
387:       assertFalse(node0.isLabel());
388:       assertEquals((-1), node0.getLineno());
389:       assertFalse(node0.isCall());
390:       assertFalse(node0.isContinue());
391:       assertFalse(node0.hasMoreThanOneChild());
392:       assertFalse(node0.isName());
393:       assertFalse(node0.isVar());
394:       assertFalse(node0.isNull());
395:       assertFalse(node0.isAssignAdd());
396:       assertFalse(node0.isNew());
397:       assertFalse(node0.isOr());
398:       assertFalse(node0.isSetterDef());
399:       assertFalse(node0.isAdd());
400:       assertFalse(node0.isNot());
401:       assertFalse(node0.isVoid());
402:       assertFalse(node0.isTrue());
403:       assertFalse(node0.isAnd());
404:       assertFalse(node0.isDebugger());
405:       assertFalse(node0.isExprResult());
406:       assertFalse(node0.isFunction());
407:       assertFalse(node0.isGetElem());
408:       assertFalse(node0.isCast());
409:       assertFalse(node0.hasChildren());
410:       assertEquals((-1), node0.getSourcePosition());
411:       assertFalse(node0.isTypeOf());
412:       assertFalse(node0.isComma());
413:       assertFalse(node0.isDec());
414:       assertFalse(node0.isAssign());
415:       assertFalse(node0.isObjectLit());
416:       assertFalse(node0.isGetProp());
417:       assertFalse(boolean0);
418:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
419:       assertEquals(53, Node.INPUT_ID);
420:       assertEquals(36, Node.QUOTED_PROP);
421:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
422:       assertEquals(43, Node.IS_CONSTANT_NAME);
423:       assertEquals(56, Node.CHANGE_TIME);
424:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
425:       assertEquals(39, Node.EMPTY_BLOCK);
426:       assertEquals(47, Node.IS_DISPATCHER);
427:       assertEquals(8, Node.FLAG_NO_THROWS);
428:       assertEquals(2, Node.POST_FLAG);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(55, Node.INFERRED_FUNCTION);
431:       assertEquals(29, Node.JSDOC_INFO_PROP);
432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
433:       assertEquals(15, Node.NO_SIDE_EFFECTS);
434:       assertEquals(57, Node.LAST_PROP);
435:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
436:       assertEquals(54, Node.SLASH_V);
437:       assertEquals(57, Node.REFLECTED_OBJECT);
438:       assertEquals(30, Node.VAR_ARGS_NAME);
439:       assertEquals(52, Node.LENGTH);
440:       assertEquals(40, Node.ORIGINALNAME_PROP);
441:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
442:       assertEquals(48, Node.DIRECTIVES);
443:       assertEquals(49, Node.DIRECT_EVAL);
444:       assertEquals(37, Node.OPT_ARG_NAME);
445:       assertEquals(46, Node.IS_NAMESPACE);
446:       assertEquals(51, Node.STATIC_SOURCE_FILE);
447:       assertEquals(4095, Node.COLUMN_MASK);
448:       assertEquals(50, Node.FREE_CALL);
449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
450:       assertEquals(1, Node.DECR_FLAG);
451:       assertEquals(12, Node.COLUMN_BITS);
452:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
453:       assertEquals(32, Node.INCRDECR_PROP);
454:       
455:       Iterable<Node> iterable0 = node0.children();
456:       assertFalse(node0.isString());
457:       assertFalse(node0.isCase());
458:       assertEquals((-1), node0.getCharno());
459:       assertFalse(node0.isSwitch());
460:       assertFalse(node0.isHook());
461:       assertFalse(node0.isFalse());
462:       assertEquals(0, node0.getType());
463:       assertFalse(node0.isIf());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isBreak());
466:       assertFalse(node0.isNE());
467:       assertFalse(node0.isThrow());
468:       assertFalse(node0.isIn());
469:       assertFalse(node0.isInc());
470:       assertFalse(node0.isEmpty());
471:       assertFalse(node0.isDefaultCase());
472:       assertFalse(node0.isWith());
473:       assertFalse(node0.isRegExp());
474:       assertFalse(node0.isArrayLit());
475:       assertEquals(0, node0.getChildCount());
476:       assertFalse(node0.isCatch());
477:       assertFalse(node0.isInstanceOf());
478:       assertFalse(node0.isGetterDef());
479:       assertFalse(node0.isNumber());
480:       assertFalse(node0.isLabelName());
481:       assertFalse(node0.isParamList());
482:       assertFalse(node0.isThis());
483:       assertFalse(node0.isFor());
484:       assertFalse(node0.isStringKey());
485:       assertFalse(node0.isTry());
486:       assertFalse(node0.hasOneChild());
487:       assertFalse(node0.isScript());
488:       assertFalse(node0.isWhile());
489:       assertFalse(node0.isDo());
490:       assertFalse(node0.isBlock());
491:       assertFalse(node0.isReturn());
492:       assertFalse(node0.isLabel());
493:       assertEquals((-1), node0.getLineno());
494:       assertFalse(node0.isCall());
495:       assertFalse(node0.isContinue());
496:       assertFalse(node0.hasMoreThanOneChild());
497:       assertFalse(node0.isName());
498:       assertFalse(node0.isVar());
499:       assertFalse(node0.isNull());
500:       assertFalse(node0.isAssignAdd());
501:       assertFalse(node0.isNew());
502:       assertFalse(node0.isOr());
503:       assertFalse(node0.isSetterDef());
504:       assertFalse(node0.isAdd());
505:       assertFalse(node0.isNot());
506:       assertFalse(node0.isVoid());
507:       assertFalse(node0.isTrue());
508:       assertFalse(node0.isAnd());
509:       assertFalse(node0.isDebugger());
510:       assertFalse(node0.isExprResult());
511:       assertFalse(node0.isFunction());
512:       assertFalse(node0.isGetElem());
513:       assertFalse(node0.isCast());
514:       assertFalse(node0.hasChildren());
515:       assertEquals((-1), node0.getSourcePosition());
516:       assertFalse(node0.isTypeOf());
517:       assertFalse(node0.isComma());
518:       assertFalse(node0.isDec());
519:       assertFalse(node0.isAssign());
520:       assertFalse(node0.isObjectLit());
521:       assertFalse(node0.isGetProp());
522:       assertNotNull(iterable0);
523:       assertFalse(iterable0.contains(node0));
524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
525:       assertEquals(53, Node.INPUT_ID);
526:       assertEquals(36, Node.QUOTED_PROP);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(43, Node.IS_CONSTANT_NAME);
529:       assertEquals(56, Node.CHANGE_TIME);
530:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
531:       assertEquals(39, Node.EMPTY_BLOCK);
532:       assertEquals(47, Node.IS_DISPATCHER);
533:       assertEquals(8, Node.FLAG_NO_THROWS);
534:       assertEquals(2, Node.POST_FLAG);
535:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
536:       assertEquals(55, Node.INFERRED_FUNCTION);
537:       assertEquals(29, Node.JSDOC_INFO_PROP);
538:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       assertEquals(57, Node.LAST_PROP);
541:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(30, Node.VAR_ARGS_NAME);
545:       assertEquals(52, Node.LENGTH);
546:       assertEquals(40, Node.ORIGINALNAME_PROP);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(48, Node.DIRECTIVES);
549:       assertEquals(49, Node.DIRECT_EVAL);
550:       assertEquals(37, Node.OPT_ARG_NAME);
551:       assertEquals(46, Node.IS_NAMESPACE);
552:       assertEquals(51, Node.STATIC_SOURCE_FILE);
553:       assertEquals(4095, Node.COLUMN_MASK);
554:       assertEquals(50, Node.FREE_CALL);
555:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
556:       assertEquals(1, Node.DECR_FLAG);
557:       assertEquals(12, Node.COLUMN_BITS);
558:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
559:       assertEquals(32, Node.INCRDECR_PROP);
560:       
561:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
562:       assertFalse(node0.isString());
563:       assertFalse(node0.isCase());
564:       assertEquals((-1), node0.getCharno());
565:       assertFalse(node0.isSwitch());
566:       assertFalse(node0.isHook());
567:       assertFalse(node0.isFalse());
568:       assertEquals(0, node0.getType());
569:       assertFalse(node0.isIf());
570:       assertFalse(node0.isDelProp());
571:       assertFalse(node0.isBreak());
572:       assertFalse(node0.isNE());
573:       assertFalse(node0.isThrow());
574:       assertFalse(node0.isIn());
575:       assertFalse(node0.isInc());
576:       assertFalse(node0.isEmpty());
577:       assertFalse(node0.isDefaultCase());
578:       assertFalse(node0.isWith());
579:       assertFalse(node0.isRegExp());
580:       assertFalse(node0.isArrayLit());
581:       assertEquals(0, node0.getChildCount());
582:       assertFalse(node0.isCatch());
583:       assertFalse(node0.isInstanceOf());
584:       assertFalse(node0.isGetterDef());
585:       assertFalse(node0.isNumber());
586:       assertFalse(node0.isLabelName());
587:       assertFalse(node0.isParamList());
588:       assertFalse(node0.isThis());
589:       assertFalse(node0.isFor());
590:       assertFalse(node0.isStringKey());
591:       assertFalse(node0.isTry());
592:       assertFalse(node0.hasOneChild());
593:       assertFalse(node0.isScript());
594:       assertFalse(node0.isWhile());
595:       assertFalse(node0.isDo());
596:       assertFalse(node0.isBlock());
597:       assertFalse(node0.isReturn());
598:       assertFalse(node0.isLabel());
599:       assertEquals((-1), node0.getLineno());
600:       assertFalse(node0.isCall());
601:       assertFalse(node0.isContinue());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertFalse(node0.isName());
604:       assertFalse(node0.isVar());
605:       assertFalse(node0.isNull());
606:       assertFalse(node0.isAssignAdd());
607:       assertFalse(node0.isNew());
608:       assertFalse(node0.isOr());
609:       assertFalse(node0.isSetterDef());
610:       assertFalse(node0.isAdd());
611:       assertFalse(node0.isNot());
612:       assertFalse(node0.isVoid());
613:       assertFalse(node0.isTrue());
614:       assertFalse(node0.isAnd());
615:       assertFalse(node0.isDebugger());
616:       assertFalse(node0.isExprResult());
617:       assertFalse(node0.isFunction());
618:       assertFalse(node0.isGetElem());
619:       assertFalse(node0.isCast());
620:       assertFalse(node0.hasChildren());
621:       assertEquals((-1), node0.getSourcePosition());
622:       assertFalse(node0.isTypeOf());
623:       assertFalse(node0.isComma());
624:       assertFalse(node0.isDec());
625:       assertFalse(node0.isAssign());
626:       assertFalse(node0.isObjectLit());
627:       assertFalse(node0.isGetProp());
628:       assertNotNull(node_FileLevelJsDocBuilder0);
629:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
630:       assertEquals(53, Node.INPUT_ID);
631:       assertEquals(36, Node.QUOTED_PROP);
632:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
633:       assertEquals(43, Node.IS_CONSTANT_NAME);
634:       assertEquals(56, Node.CHANGE_TIME);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(39, Node.EMPTY_BLOCK);
637:       assertEquals(47, Node.IS_DISPATCHER);
638:       assertEquals(8, Node.FLAG_NO_THROWS);
639:       assertEquals(2, Node.POST_FLAG);
640:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
641:       assertEquals(55, Node.INFERRED_FUNCTION);
642:       assertEquals(29, Node.JSDOC_INFO_PROP);
643:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
645:       assertEquals(57, Node.LAST_PROP);
646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
647:       assertEquals(54, Node.SLASH_V);
648:       assertEquals(57, Node.REFLECTED_OBJECT);
649:       assertEquals(30, Node.VAR_ARGS_NAME);
650:       assertEquals(52, Node.LENGTH);
651:       assertEquals(40, Node.ORIGINALNAME_PROP);
652:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
653:       assertEquals(48, Node.DIRECTIVES);
654:       assertEquals(49, Node.DIRECT_EVAL);
655:       assertEquals(37, Node.OPT_ARG_NAME);
656:       assertEquals(46, Node.IS_NAMESPACE);
657:       assertEquals(51, Node.STATIC_SOURCE_FILE);
658:       assertEquals(4095, Node.COLUMN_MASK);
659:       assertEquals(50, Node.FREE_CALL);
660:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
661:       assertEquals(1, Node.DECR_FLAG);
662:       assertEquals(12, Node.COLUMN_BITS);
663:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
664:       assertEquals(32, Node.INCRDECR_PROP);
665:       
666:       node_FileLevelJsDocBuilder0.append("");
667:       assertFalse(node0.isString());
668:       assertFalse(node0.isCase());
669:       assertEquals((-1), node0.getCharno());
670:       assertFalse(node0.isSwitch());
671:       assertFalse(node0.isHook());
672:       assertFalse(node0.isFalse());
673:       assertEquals(0, node0.getType());
674:       assertFalse(node0.isIf());
675:       assertFalse(node0.isDelProp());
676:       assertFalse(node0.isBreak());
677:       assertFalse(node0.isNE());
678:       assertFalse(node0.isThrow());
679:       assertFalse(node0.isIn());
680:       assertFalse(node0.isInc());
681:       assertFalse(node0.isEmpty());
682:       assertFalse(node0.isDefaultCase());
683:       assertFalse(node0.isWith());
684:       assertFalse(node0.isRegExp());
685:       assertFalse(node0.isArrayLit());
686:       assertEquals(0, node0.getChildCount());
687:       assertFalse(node0.isCatch());
688:       assertFalse(node0.isInstanceOf());
689:       assertFalse(node0.isGetterDef());
690:       assertFalse(node0.isNumber());
691:       assertFalse(node0.isLabelName());
692:       assertFalse(node0.isParamList());
693:       assertFalse(node0.isThis());
694:       assertFalse(node0.isFor());
695:       assertFalse(node0.isStringKey());
696:       assertFalse(node0.isTry());
697:       assertFalse(node0.hasOneChild());
698:       assertFalse(node0.isScript());
699:       assertFalse(node0.isWhile());
700:       assertFalse(node0.isDo());
701:       assertFalse(node0.isBlock());
702:       assertFalse(node0.isReturn());
703:       assertFalse(node0.isLabel());
704:       assertEquals((-1), node0.getLineno());
705:       assertFalse(node0.isCall());
706:       assertFalse(node0.isContinue());
707:       assertFalse(node0.hasMoreThanOneChild());
708:       assertFalse(node0.isName());
709:       assertFalse(node0.isVar());
710:       assertFalse(node0.isNull());
711:       assertFalse(node0.isAssignAdd());
712:       assertFalse(node0.isNew());
713:       assertFalse(node0.isOr());
714:       assertFalse(node0.isSetterDef());
715:       assertFalse(node0.isAdd());
716:       assertFalse(node0.isNot());
717:       assertFalse(node0.isVoid());
718:       assertFalse(node0.isTrue());
719:       assertFalse(node0.isAnd());
720:       assertFalse(node0.isDebugger());
721:       assertFalse(node0.isExprResult());
722:       assertFalse(node0.isFunction());
723:       assertFalse(node0.isGetElem());
724:       assertFalse(node0.isCast());
725:       assertFalse(node0.hasChildren());
726:       assertEquals((-1), node0.getSourcePosition());
727:       assertFalse(node0.isTypeOf());
728:       assertFalse(node0.isComma());
729:       assertFalse(node0.isDec());
730:       assertFalse(node0.isAssign());
731:       assertFalse(node0.isObjectLit());
732:       assertFalse(node0.isGetProp());
733:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
734:       assertEquals(53, Node.INPUT_ID);
735:       assertEquals(36, Node.QUOTED_PROP);
736:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
737:       assertEquals(43, Node.IS_CONSTANT_NAME);
738:       assertEquals(56, Node.CHANGE_TIME);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(39, Node.EMPTY_BLOCK);
741:       assertEquals(47, Node.IS_DISPATCHER);
742:       assertEquals(8, Node.FLAG_NO_THROWS);
743:       assertEquals(2, Node.POST_FLAG);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(55, Node.INFERRED_FUNCTION);
746:       assertEquals(29, Node.JSDOC_INFO_PROP);
747:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
748:       assertEquals(15, Node.NO_SIDE_EFFECTS);
749:       assertEquals(57, Node.LAST_PROP);
750:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
751:       assertEquals(54, Node.SLASH_V);
752:       assertEquals(57, Node.REFLECTED_OBJECT);
753:       assertEquals(30, Node.VAR_ARGS_NAME);
754:       assertEquals(52, Node.LENGTH);
755:       assertEquals(40, Node.ORIGINALNAME_PROP);
756:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(49, Node.DIRECT_EVAL);
759:       assertEquals(37, Node.OPT_ARG_NAME);
760:       assertEquals(46, Node.IS_NAMESPACE);
761:       assertEquals(51, Node.STATIC_SOURCE_FILE);
762:       assertEquals(4095, Node.COLUMN_MASK);
763:       assertEquals(50, Node.FREE_CALL);
764:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
765:       assertEquals(1, Node.DECR_FLAG);
766:       assertEquals(12, Node.COLUMN_BITS);
767:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
768:       assertEquals(32, Node.INCRDECR_PROP);
769:       
770:       boolean boolean1 = node0.isSetterDef();
771:       assertFalse(node0.isString());
772:       assertFalse(node0.isCase());
773:       assertEquals((-1), node0.getCharno());
774:       assertFalse(node0.isSwitch());
775:       assertFalse(node0.isHook());
776:       assertFalse(node0.isFalse());
777:       assertEquals(0, node0.getType());
778:       assertFalse(node0.isIf());
779:       assertFalse(node0.isDelProp());
780:       assertFalse(node0.isBreak());
781:       assertFalse(node0.isNE());
782:       assertFalse(node0.isThrow());
783:       assertFalse(node0.isIn());
784:       assertFalse(node0.isInc());
785:       assertFalse(node0.isEmpty());
786:       assertFalse(node0.isDefaultCase());
787:       assertFalse(node0.isWith());
788:       assertFalse(node0.isRegExp());
789:       assertFalse(node0.isArrayLit());
790:       assertEquals(0, node0.getChildCount());
791:       assertFalse(node0.isCatch());
792:       assertFalse(node0.isInstanceOf());
793:       assertFalse(node0.isGetterDef());
794:       assertFalse(node0.isNumber());
795:       assertFalse(node0.isLabelName());
796:       assertFalse(node0.isParamList());
797:       assertFalse(node0.isThis());
798:       assertFalse(node0.isFor());
799:       assertFalse(node0.isStringKey());
800:       assertFalse(node0.isTry());
801:       assertFalse(node0.hasOneChild());
802:       assertFalse(node0.isScript());
803:       assertFalse(node0.isWhile());
804:       assertFalse(node0.isDo());
805:       assertFalse(node0.isBlock());
806:       assertFalse(node0.isReturn());
807:       assertFalse(node0.isLabel());
808:       assertEquals((-1), node0.getLineno());
809:       assertFalse(node0.isCall());
810:       assertFalse(node0.isContinue());
811:       assertFalse(node0.hasMoreThanOneChild());
812:       assertFalse(node0.isName());
813:       assertFalse(node0.isVar());
814:       assertFalse(node0.isNull());
815:       assertFalse(node0.isAssignAdd());
816:       assertFalse(node0.isNew());
817:       assertFalse(node0.isOr());
818:       assertFalse(node0.isSetterDef());
819:       assertFalse(node0.isAdd());
820:       assertFalse(node0.isNot());
821:       assertFalse(node0.isVoid());
822:       assertFalse(node0.isTrue());
823:       assertFalse(node0.isAnd());
824:       assertFalse(node0.isDebugger());
825:       assertFalse(node0.isExprResult());
826:       assertFalse(node0.isFunction());
827:       assertFalse(node0.isGetElem());
828:       assertFalse(node0.isCast());
829:       assertFalse(node0.hasChildren());
830:       assertEquals((-1), node0.getSourcePosition());
831:       assertFalse(node0.isTypeOf());
832:       assertFalse(node0.isComma());
833:       assertFalse(node0.isDec());
834:       assertFalse(node0.isAssign());
835:       assertFalse(node0.isObjectLit());
836:       assertFalse(node0.isGetProp());
837:       assertFalse(boolean1);
838:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
839:       assertEquals(53, Node.INPUT_ID);
840:       assertEquals(36, Node.QUOTED_PROP);
841:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
842:       assertEquals(43, Node.IS_CONSTANT_NAME);
843:       assertEquals(56, Node.CHANGE_TIME);
844:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
845:       assertEquals(39, Node.EMPTY_BLOCK);
846:       assertEquals(47, Node.IS_DISPATCHER);
847:       assertEquals(8, Node.FLAG_NO_THROWS);
848:       assertEquals(2, Node.POST_FLAG);
849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
850:       assertEquals(55, Node.INFERRED_FUNCTION);
851:       assertEquals(29, Node.JSDOC_INFO_PROP);
852:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
854:       assertEquals(57, Node.LAST_PROP);
855:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
856:       assertEquals(54, Node.SLASH_V);
857:       assertEquals(57, Node.REFLECTED_OBJECT);
858:       assertEquals(30, Node.VAR_ARGS_NAME);
859:       assertEquals(52, Node.LENGTH);
860:       assertEquals(40, Node.ORIGINALNAME_PROP);
861:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
862:       assertEquals(48, Node.DIRECTIVES);
863:       assertEquals(49, Node.DIRECT_EVAL);
864:       assertEquals(37, Node.OPT_ARG_NAME);
865:       assertEquals(46, Node.IS_NAMESPACE);
866:       assertEquals(51, Node.STATIC_SOURCE_FILE);
867:       assertEquals(4095, Node.COLUMN_MASK);
868:       assertEquals(50, Node.FREE_CALL);
869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
870:       assertEquals(1, Node.DECR_FLAG);
871:       assertEquals(12, Node.COLUMN_BITS);
872:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
873:       assertEquals(32, Node.INCRDECR_PROP);
874:       assertTrue(boolean1 == boolean0);
875:       
876:       Node node1 = Node.newString("string");
877:       assertFalse(node1.isIn());
878:       assertFalse(node1.isNE());
879:       assertEquals((-1), node1.getCharno());
880:       assertFalse(node1.isDelProp());
881:       assertFalse(node1.isIf());
882:       assertFalse(node1.isSwitch());
883:       assertFalse(node1.isHook());
884:       assertFalse(node1.isGetterDef());
885:       assertFalse(node1.isRegExp());
886:       assertFalse(node1.isComma());
887:       assertFalse(node1.isGetProp());
888:       assertFalse(node1.isThis());
889:       assertFalse(node1.isCase());
890:       assertFalse(node1.isFor());
891:       assertFalse(node1.isTry());
892:       assertFalse(node1.isCatch());
893:       assertFalse(node1.isInstanceOf());
894:       assertFalse(node1.isNot());
895:       assertFalse(node1.isObjectLit());
896:       assertFalse(node1.isWith());
897:       assertFalse(node1.isDebugger());
898:       assertFalse(node1.isAnd());
899:       assertFalse(node1.isCast());
900:       assertFalse(node1.isFunction());
901:       assertFalse(node1.isFalse());
902:       assertFalse(node1.isSetterDef());
903:       assertFalse(node1.isInc());
904:       assertEquals(40, node1.getType());
905:       assertFalse(node1.isThrow());
906:       assertFalse(node1.isReturn());
907:       assertFalse(node1.isLabel());
908:       assertFalse(node1.isOr());
909:       assertFalse(node1.isContinue());
910:       assertFalse(node1.hasMoreThanOneChild());
911:       assertEquals((-1), node1.getSourcePosition());
912:       assertEquals((-1), node1.getLineno());
913:       assertFalse(node1.isLabelName());
914:       assertFalse(node1.hasOneChild());
915:       assertFalse(node1.isCall());
916:       assertFalse(node1.isGetElem());
917:       assertFalse(node1.isAssign());
918:       assertFalse(node1.isNumber());
919:       assertFalse(node1.isScript());
920:       assertFalse(node1.isTypeOf());
921:       assertFalse(node1.isDec());
922:       assertFalse(node1.hasChildren());
923:       assertFalse(node1.isBlock());
924:       assertTrue(node1.isString());
925:       assertFalse(node1.isWhile());
926:       assertEquals(0, node1.getChildCount());
927:       assertFalse(node1.isNull());
928:       assertFalse(node1.isTrue());
929:       assertFalse(node1.isExprResult());
930:       assertFalse(node1.isBreak());
931:       assertFalse(node1.isName());
932:       assertFalse(node1.isStringKey());
933:       assertFalse(node1.isVoid());
934:       assertFalse(node1.isParamList());
935:       assertFalse(node1.isVar());
936:       assertFalse(node1.isArrayLit());
937:       assertFalse(node1.isEmpty());
938:       assertFalse(node1.isAdd());
939:       assertFalse(node1.isNew());
940:       assertFalse(node1.isDo());
941:       assertFalse(node1.isDefaultCase());
942:       assertFalse(node1.isAssignAdd());
943:       assertNotNull(node1);
944:       assertEquals(43, Node.IS_CONSTANT_NAME);
945:       assertEquals(55, Node.INFERRED_FUNCTION);
946:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
947:       assertEquals(53, Node.INPUT_ID);
948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
949:       assertEquals(8, Node.FLAG_NO_THROWS);
950:       assertEquals(36, Node.QUOTED_PROP);
951:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
952:       assertEquals(50, Node.FREE_CALL);
953:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
954:       assertEquals(56, Node.CHANGE_TIME);
955:       assertEquals(48, Node.DIRECTIVES);
956:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
957:       assertEquals(37, Node.OPT_ARG_NAME);
958:       assertEquals(32, Node.INCRDECR_PROP);
959:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
960:       assertEquals(4095, Node.COLUMN_MASK);
961:       assertEquals(12, Node.COLUMN_BITS);
962:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
963:       assertEquals(30, Node.VAR_ARGS_NAME);
964:       assertEquals(49, Node.DIRECT_EVAL);
965:       assertEquals(57, Node.LAST_PROP);
966:       assertEquals(15, Node.NO_SIDE_EFFECTS);
967:       assertEquals(1, Node.DECR_FLAG);
968:       assertEquals(52, Node.LENGTH);
969:       assertEquals(46, Node.IS_NAMESPACE);
970:       assertEquals(54, Node.SLASH_V);
971:       assertEquals(51, Node.STATIC_SOURCE_FILE);
972:       assertEquals(57, Node.REFLECTED_OBJECT);
973:       assertEquals(29, Node.JSDOC_INFO_PROP);
974:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
975:       assertEquals(39, Node.EMPTY_BLOCK);
976:       assertEquals(40, Node.ORIGINALNAME_PROP);
977:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
978:       assertEquals(2, Node.POST_FLAG);
979:       assertEquals(47, Node.IS_DISPATCHER);
980:       assertFalse(node1.equals((Object)node0));
981:       
982:       Node node2 = new Node(306654252, node1, node0, node0, node0);
983:       assertFalse(node0.isString());
984:       assertFalse(node0.isCase());
985:       assertEquals((-1), node0.getCharno());
986:       assertFalse(node0.isSwitch());
987:       assertFalse(node0.isHook());
988:       assertFalse(node0.isFalse());
989:       assertEquals(0, node0.getType());
990:       assertFalse(node0.isIf());
991:       assertFalse(node0.isDelProp());
992:       assertFalse(node0.isBreak());
993:       assertFalse(node0.isNE());
994:       assertFalse(node0.isThrow());
995:       assertFalse(node0.isIn());
996:       assertFalse(node0.isInc());
997:       assertFalse(node0.isEmpty());
998:       assertFalse(node0.isDefaultCase());
999:       assertFalse(node0.isWith());
1000:       assertFalse(node0.isRegExp());
1001:       assertFalse(node0.isArrayLit());
1002:       assertEquals(0, node0.getChildCount());
1003:       assertFalse(node0.isCatch());
1004:       assertFalse(node0.isInstanceOf());
1005:       assertFalse(node0.isGetterDef());
1006:       assertFalse(node0.isNumber());
1007:       assertFalse(node0.isLabelName());
1008:       assertFalse(node0.isParamList());
1009:       assertFalse(node0.isThis());
1010:       assertFalse(node0.isFor());
1011:       assertFalse(node0.isStringKey());
1012:       assertFalse(node0.isTry());
1013:       assertFalse(node0.hasOneChild());
1014:       assertFalse(node0.isScript());
1015:       assertFalse(node0.isWhile());
1016:       assertFalse(node0.isDo());
1017:       assertFalse(node0.isBlock());
1018:       assertFalse(node0.isReturn());
1019:       assertFalse(node0.isLabel());
1020:       assertEquals((-1), node0.getLineno());
1021:       assertFalse(node0.isCall());
1022:       assertFalse(node0.isContinue());
1023:       assertFalse(node0.hasMoreThanOneChild());
1024:       assertFalse(node0.isName());
1025:       assertFalse(node0.isVar());
1026:       assertFalse(node0.isNull());
1027:       assertFalse(node0.isAssignAdd());
1028:       assertFalse(node0.isNew());
1029:       assertFalse(node0.isOr());
1030:       assertFalse(node0.isSetterDef());
1031:       assertFalse(node0.isAdd());
1032:       assertFalse(node0.isNot());
1033:       assertFalse(node0.isVoid());
1034:       assertFalse(node0.isTrue());
1035:       assertFalse(node0.isAnd());
1036:       assertFalse(node0.isDebugger());
1037:       assertFalse(node0.isExprResult());
1038:       assertFalse(node0.isFunction());
1039:       assertFalse(node0.isGetElem());
1040:       assertFalse(node0.isCast());
1041:       assertFalse(node0.hasChildren());
1042:       assertEquals((-1), node0.getSourcePosition());
1043:       assertFalse(node0.isTypeOf());
1044:       assertFalse(node0.isComma());
1045:       assertFalse(node0.isDec());
1046:       assertFalse(node0.isAssign());
1047:       assertFalse(node0.isObjectLit());
1048:       assertFalse(node0.isGetProp());
1049:       assertFalse(node1.isIn());
1050:       assertFalse(node1.isNE());
1051:       assertEquals((-1), node1.getCharno());
1052:       assertFalse(node1.isDelProp());
1053:       assertFalse(node1.isIf());
1054:       assertFalse(node1.isSwitch());
1055:       assertFalse(node1.isHook());
1056:       assertFalse(node1.isGetterDef());
1057:       assertFalse(node1.isRegExp());
1058:       assertFalse(node1.isComma());
1059:       assertFalse(node1.isGetProp());
1060:       assertFalse(node1.isThis());
1061:       assertFalse(node1.isCase());
1062:       assertFalse(node1.isFor());
1063:       assertFalse(node1.isTry());
1064:       assertFalse(node1.isCatch());
1065:       assertFalse(node1.isInstanceOf());
1066:       assertFalse(node1.isNot());
1067:       assertFalse(node1.isObjectLit());
1068:       assertFalse(node1.isWith());
1069:       assertFalse(node1.isDebugger());
1070:       assertFalse(node1.isAnd());
1071:       assertFalse(node1.isCast());
1072:       assertFalse(node1.isFunction());
1073:       assertFalse(node1.isFalse());
1074:       assertFalse(node1.isSetterDef());
1075:       assertFalse(node1.isInc());
1076:       assertEquals(40, node1.getType());
1077:       assertFalse(node1.isThrow());
1078:       assertFalse(node1.isReturn());
1079:       assertFalse(node1.isLabel());
1080:       assertFalse(node1.isOr());
1081:       assertFalse(node1.isContinue());
1082:       assertFalse(node1.hasMoreThanOneChild());
1083:       assertEquals((-1), node1.getSourcePosition());
1084:       assertEquals((-1), node1.getLineno());
1085:       assertFalse(node1.isLabelName());
1086:       assertFalse(node1.hasOneChild());
1087:       assertFalse(node1.isCall());
1088:       assertFalse(node1.isGetElem());
1089:       assertFalse(node1.isAssign());
1090:       assertFalse(node1.isNumber());
1091:       assertFalse(node1.isScript());
1092:       assertFalse(node1.isTypeOf());
1093:       assertFalse(node1.isDec());
1094:       assertFalse(node1.hasChildren());
1095:       assertFalse(node1.isBlock());
1096:       assertTrue(node1.isString());
1097:       assertFalse(node1.isWhile());
1098:       assertEquals(0, node1.getChildCount());
1099:       assertFalse(node1.isNull());
1100:       assertFalse(node1.isTrue());
1101:       assertFalse(node1.isExprResult());
1102:       assertFalse(node1.isBreak());
1103:       assertFalse(node1.isName());
1104:       assertFalse(node1.isStringKey());
1105:       assertFalse(node1.isVoid());
1106:       assertFalse(node1.isParamList());
1107:       assertFalse(node1.isVar());
1108:       assertFalse(node1.isArrayLit());
1109:       assertFalse(node1.isEmpty());
1110:       assertFalse(node1.isAdd());
1111:       assertFalse(node1.isNew());
1112:       assertFalse(node1.isDo());
1113:       assertFalse(node1.isDefaultCase());
1114:       assertFalse(node1.isAssignAdd());
1115:       assertFalse(node2.isTrue());
1116:       assertFalse(node2.isArrayLit());
1117:       assertFalse(node2.isDefaultCase());
1118:       assertFalse(node2.isVoid());
1119:       assertFalse(node2.isTry());
1120:       assertFalse(node2.isFor());
1121:       assertFalse(node2.isCatch());
1122:       assertFalse(node2.isFunction());
1123:       assertFalse(node2.isRegExp());
1124:       assertFalse(node2.isParamList());
1125:       assertFalse(node2.isCase());
1126:       assertFalse(node2.isString());
1127:       assertFalse(node2.isStringKey());
1128:       assertEquals((-1), node2.getCharno());
1129:       assertFalse(node2.isDebugger());
1130:       assertFalse(node2.isGetterDef());
1131:       assertFalse(node2.isHook());
1132:       assertFalse(node2.isBlock());
1133:       assertFalse(node2.isInc());
1134:       assertFalse(node2.isThrow());
1135:       assertFalse(node2.isThis());
1136:       assertFalse(node2.isContinue());
1137:       assertFalse(node2.isFalse());
1138:       assertTrue(node2.hasChildren());
1139:       assertEquals(2, node2.getChildCount());
1140:       assertEquals((-1), node2.getLineno());
1141:       assertFalse(node2.isInstanceOf());
1142:       assertFalse(node2.isSetterDef());
1143:       assertFalse(node2.isNE());
1144:       assertFalse(node2.isIf());
1145:       assertFalse(node2.isIn());
1146:       assertFalse(node2.isExprResult());
1147:       assertFalse(node2.hasOneChild());
1148:       assertFalse(node2.isLabelName());
1149:       assertFalse(node2.isWith());
1150:       assertFalse(node2.isAssign());
1151:       assertFalse(node2.isGetElem());
1152:       assertFalse(node2.isCast());
1153:       assertFalse(node2.isDec());
1154:       assertFalse(node2.isTypeOf());
1155:       assertFalse(node2.isReturn());
1156:       assertFalse(node2.isGetProp());
1157:       assertEquals(306654252, node2.getType());
1158:       assertFalse(node2.isAnd());
1159:       assertFalse(node2.isNot());
1160:       assertFalse(node2.isScript());
1161:       assertEquals((-1), node2.getSourcePosition());
1162:       assertFalse(node2.isNumber());
1163:       assertFalse(node2.isObjectLit());
1164:       assertFalse(node2.isNew());
1165:       assertFalse(node2.isVar());
1166:       assertFalse(node2.isAdd());
1167:       assertFalse(node2.isSwitch());
1168:       assertTrue(node2.hasMoreThanOneChild());
1169:       assertFalse(node2.isName());
1170:       assertFalse(node2.isWhile());
1171:       assertFalse(node2.isBreak());
1172:       assertFalse(node2.isCall());
1173:       assertFalse(node2.isComma());
1174:       assertFalse(node2.isAssignAdd());
1175:       assertFalse(node2.isOr());
1176:       assertFalse(node2.isLabel());
1177:       assertFalse(node2.isDelProp());
1178:       assertFalse(node2.isDo());
1179:       assertFalse(node2.isEmpty());
1180:       assertFalse(node2.isNull());
1181:       assertNotNull(node2);
1182:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1183:       assertEquals(53, Node.INPUT_ID);
1184:       assertEquals(36, Node.QUOTED_PROP);
1185:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1186:       assertEquals(43, Node.IS_CONSTANT_NAME);
1187:       assertEquals(56, Node.CHANGE_TIME);
1188:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1189:       assertEquals(39, Node.EMPTY_BLOCK);
1190:       assertEquals(47, Node.IS_DISPATCHER);
1191:       assertEquals(8, Node.FLAG_NO_THROWS);
1192:       assertEquals(2, Node.POST_FLAG);
1193:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1194:       assertEquals(55, Node.INFERRED_FUNCTION);
1195:       assertEquals(29, Node.JSDOC_INFO_PROP);
1196:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1197:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1198:       assertEquals(57, Node.LAST_PROP);
1199:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1200:       assertEquals(54, Node.SLASH_V);
1201:       assertEquals(57, Node.REFLECTED_OBJECT);
1202:       assertEquals(30, Node.VAR_ARGS_NAME);
1203:       assertEquals(52, Node.LENGTH);
1204:       assertEquals(40, Node.ORIGINALNAME_PROP);
1205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1206:       assertEquals(48, Node.DIRECTIVES);
1207:       assertEquals(49, Node.DIRECT_EVAL);
1208:       assertEquals(37, Node.OPT_ARG_NAME);
1209:       assertEquals(46, Node.IS_NAMESPACE);
1210:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1211:       assertEquals(4095, Node.COLUMN_MASK);
1212:       assertEquals(50, Node.FREE_CALL);
1213:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1214:       assertEquals(1, Node.DECR_FLAG);
1215:       assertEquals(12, Node.COLUMN_BITS);
1216:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1217:       assertEquals(32, Node.INCRDECR_PROP);
1218:       assertEquals(43, Node.IS_CONSTANT_NAME);
1219:       assertEquals(55, Node.INFERRED_FUNCTION);
1220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1221:       assertEquals(53, Node.INPUT_ID);
1222:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1223:       assertEquals(8, Node.FLAG_NO_THROWS);
1224:       assertEquals(36, Node.QUOTED_PROP);
1225:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1226:       assertEquals(50, Node.FREE_CALL);
1227:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1228:       assertEquals(56, Node.CHANGE_TIME);
1229:       assertEquals(48, Node.DIRECTIVES);
1230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1231:       assertEquals(37, Node.OPT_ARG_NAME);
1232:       assertEquals(32, Node.INCRDECR_PROP);
1233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1234:       assertEquals(4095, Node.COLUMN_MASK);
1235:       assertEquals(12, Node.COLUMN_BITS);
1236:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1237:       assertEquals(30, Node.VAR_ARGS_NAME);
1238:       assertEquals(49, Node.DIRECT_EVAL);
1239:       assertEquals(57, Node.LAST_PROP);
1240:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1241:       assertEquals(1, Node.DECR_FLAG);
1242:       assertEquals(52, Node.LENGTH);
1243:       assertEquals(46, Node.IS_NAMESPACE);
1244:       assertEquals(54, Node.SLASH_V);
1245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1246:       assertEquals(57, Node.REFLECTED_OBJECT);
1247:       assertEquals(29, Node.JSDOC_INFO_PROP);
1248:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1249:       assertEquals(39, Node.EMPTY_BLOCK);
1250:       assertEquals(40, Node.ORIGINALNAME_PROP);
1251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1252:       assertEquals(2, Node.POST_FLAG);
1253:       assertEquals(47, Node.IS_DISPATCHER);
1254:       assertEquals(40, Node.ORIGINALNAME_PROP);
1255:       assertEquals(50, Node.FREE_CALL);
1256:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1257:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1258:       assertEquals(57, Node.REFLECTED_OBJECT);
1259:       assertEquals(54, Node.SLASH_V);
1260:       assertEquals(48, Node.DIRECTIVES);
1261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1262:       assertEquals(1, Node.DECR_FLAG);
1263:       assertEquals(4095, Node.COLUMN_MASK);
1264:       assertEquals(46, Node.IS_NAMESPACE);
1265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1266:       assertEquals(12, Node.COLUMN_BITS);
1267:       assertEquals(32, Node.INCRDECR_PROP);
1268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1269:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1270:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1271:       assertEquals(56, Node.CHANGE_TIME);
1272:       assertEquals(47, Node.IS_DISPATCHER);
1273:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1274:       assertEquals(37, Node.OPT_ARG_NAME);
1275:       assertEquals(2, Node.POST_FLAG);
1276:       assertEquals(43, Node.IS_CONSTANT_NAME);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(55, Node.INFERRED_FUNCTION);
1279:       assertEquals(49, Node.DIRECT_EVAL);
1280:       assertEquals(30, Node.VAR_ARGS_NAME);
1281:       assertEquals(36, Node.QUOTED_PROP);
1282:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1283:       assertEquals(52, Node.LENGTH);
1284:       assertEquals(8, Node.FLAG_NO_THROWS);
1285:       assertEquals(57, Node.LAST_PROP);
1286:       assertEquals(29, Node.JSDOC_INFO_PROP);
1287:       assertEquals(53, Node.INPUT_ID);
1288:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1289:       assertEquals(39, Node.EMPTY_BLOCK);
1290:       assertFalse(node0.equals((Object)node1));
1291:       assertFalse(node1.equals((Object)node0));
1292:       assertFalse(node2.equals((Object)node0));
1293:       assertFalse(node2.equals((Object)node1));
1294:       
1295:       int int0 = node0.getIndexOfChild(node0);
1296:       assertFalse(node0.isString());
1297:       assertFalse(node0.isCase());
1298:       assertEquals((-1), node0.getCharno());
1299:       assertFalse(node0.isSwitch());
1300:       assertFalse(node0.isHook());
1301:       assertFalse(node0.isFalse());
1302:       assertEquals(0, node0.getType());
1303:       assertFalse(node0.isIf());
1304:       assertFalse(node0.isDelProp());
1305:       assertFalse(node0.isBreak());
1306:       assertFalse(node0.isNE());
1307:       assertFalse(node0.isThrow());
1308:       assertFalse(node0.isIn());
1309:       assertFalse(node0.isInc());
1310:       assertFalse(node0.isEmpty());
1311:       assertFalse(node0.isDefaultCase());
1312:       assertFalse(node0.isWith());
1313:       assertFalse(node0.isRegExp());
1314:       assertFalse(node0.isArrayLit());
1315:       assertEquals(0, node0.getChildCount());
1316:       assertFalse(node0.isCatch());
1317:       assertFalse(node0.isInstanceOf());
1318:       assertFalse(node0.isGetterDef());
1319:       assertFalse(node0.isNumber());
1320:       assertFalse(node0.isLabelName());
1321:       assertFalse(node0.isParamList());
1322:       assertFalse(node0.isThis());
1323:       assertFalse(node0.isFor());
1324:       assertFalse(node0.isStringKey());
1325:       assertFalse(node0.isTry());
1326:       assertFalse(node0.hasOneChild());
1327:       assertFalse(node0.isScript());
1328:       assertFalse(node0.isWhile());
1329:       assertFalse(node0.isDo());
1330:       assertFalse(node0.isBlock());
1331:       assertFalse(node0.isReturn());
1332:       assertFalse(node0.isLabel());
1333:       assertEquals((-1), node0.getLineno());
1334:       assertFalse(node0.isCall());
1335:       assertFalse(node0.isContinue());
1336:       assertFalse(node0.hasMoreThanOneChild());
1337:       assertFalse(node0.isName());
1338:       assertFalse(node0.isVar());
1339:       assertFalse(node0.isNull());
1340:       assertFalse(node0.isAssignAdd());
1341:       assertFalse(node0.isNew());
1342:       assertFalse(node0.isOr());
1343:       assertFalse(node0.isSetterDef());
1344:       assertFalse(node0.isAdd());
1345:       assertFalse(node0.isNot());
1346:       assertFalse(node0.isVoid());
1347:       assertFalse(node0.isTrue());
1348:       assertFalse(node0.isAnd());
1349:       assertFalse(node0.isDebugger());
1350:       assertFalse(node0.isExprResult());
1351:       assertFalse(node0.isFunction());
1352:       assertFalse(node0.isGetElem());
1353:       assertFalse(node0.isCast());
1354:       assertFalse(node0.hasChildren());
1355:       assertEquals((-1), node0.getSourcePosition());
1356:       assertFalse(node0.isTypeOf());
1357:       assertFalse(node0.isComma());
1358:       assertFalse(node0.isDec());
1359:       assertFalse(node0.isAssign());
1360:       assertFalse(node0.isObjectLit());
1361:       assertFalse(node0.isGetProp());
1362:       assertNotSame(node0, node2);
1363:       assertEquals((-1), int0);
1364:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1365:       assertEquals(53, Node.INPUT_ID);
1366:       assertEquals(36, Node.QUOTED_PROP);
1367:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1368:       assertEquals(43, Node.IS_CONSTANT_NAME);
1369:       assertEquals(56, Node.CHANGE_TIME);
1370:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1371:       assertEquals(39, Node.EMPTY_BLOCK);
1372:       assertEquals(47, Node.IS_DISPATCHER);
1373:       assertEquals(8, Node.FLAG_NO_THROWS);
1374:       assertEquals(2, Node.POST_FLAG);
1375:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1376:       assertEquals(55, Node.INFERRED_FUNCTION);
1377:       assertEquals(29, Node.JSDOC_INFO_PROP);
1378:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1380:       assertEquals(57, Node.LAST_PROP);
1381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1382:       assertEquals(54, Node.SLASH_V);
1383:       assertEquals(57, Node.REFLECTED_OBJECT);
1384:       assertEquals(30, Node.VAR_ARGS_NAME);
1385:       assertEquals(52, Node.LENGTH);
1386:       assertEquals(40, Node.ORIGINALNAME_PROP);
1387:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1388:       assertEquals(48, Node.DIRECTIVES);
1389:       assertEquals(49, Node.DIRECT_EVAL);
1390:       assertEquals(37, Node.OPT_ARG_NAME);
1391:       assertEquals(46, Node.IS_NAMESPACE);
1392:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1393:       assertEquals(4095, Node.COLUMN_MASK);
1394:       assertEquals(50, Node.FREE_CALL);
1395:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1396:       assertEquals(1, Node.DECR_FLAG);
1397:       assertEquals(12, Node.COLUMN_BITS);
1398:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1399:       assertEquals(32, Node.INCRDECR_PROP);
1400:       assertFalse(node0.equals((Object)node1));
1401:       assertFalse(node0.equals((Object)node2));
1402:       
1403:       boolean boolean2 = node0.isInstanceOf();
1404:       assertFalse(node0.isString());
1405:       assertFalse(node0.isCase());
1406:       assertEquals((-1), node0.getCharno());
1407:       assertFalse(node0.isSwitch());
1408:       assertFalse(node0.isHook());
1409:       assertFalse(node0.isFalse());
1410:       assertEquals(0, node0.getType());
1411:       assertFalse(node0.isIf());
1412:       assertFalse(node0.isDelProp());
1413:       assertFalse(node0.isBreak());
1414:       assertFalse(node0.isNE());
1415:       assertFalse(node0.isThrow());
1416:       assertFalse(node0.isIn());
1417:       assertFalse(node0.isInc());
1418:       assertFalse(node0.isEmpty());
1419:       assertFalse(node0.isDefaultCase());
1420:       assertFalse(node0.isWith());
1421:       assertFalse(node0.isRegExp());
1422:       assertFalse(node0.isArrayLit());
1423:       assertEquals(0, node0.getChildCount());
1424:       assertFalse(node0.isCatch());
1425:       assertFalse(node0.isInstanceOf());
1426:       assertFalse(node0.isGetterDef());
1427:       assertFalse(node0.isNumber());
1428:       assertFalse(node0.isLabelName());
1429:       assertFalse(node0.isParamList());
1430:       assertFalse(node0.isThis());
1431:       assertFalse(node0.isFor());
1432:       assertFalse(node0.isStringKey());
1433:       assertFalse(node0.isTry());
1434:       assertFalse(node0.hasOneChild());
1435:       assertFalse(node0.isScript());
1436:       assertFalse(node0.isWhile());
1437:       assertFalse(node0.isDo());
1438:       assertFalse(node0.isBlock());
1439:       assertFalse(node0.isReturn());
1440:       assertFalse(node0.isLabel());
1441:       assertEquals((-1), node0.getLineno());
1442:       assertFalse(node0.isCall());
1443:       assertFalse(node0.isContinue());
1444:       assertFalse(node0.hasMoreThanOneChild());
1445:       assertFalse(node0.isName());
1446:       assertFalse(node0.isVar());
1447:       assertFalse(node0.isNull());
1448:       assertFalse(node0.isAssignAdd());
1449:       assertFalse(node0.isNew());
1450:       assertFalse(node0.isOr());
1451:       assertFalse(node0.isSetterDef());
1452:       assertFalse(node0.isAdd());
1453:       assertFalse(node0.isNot());
1454:       assertFalse(node0.isVoid());
1455:       assertFalse(node0.isTrue());
1456:       assertFalse(node0.isAnd());
1457:       assertFalse(node0.isDebugger());
1458:       assertFalse(node0.isExprResult());
1459:       assertFalse(node0.isFunction());
1460:       assertFalse(node0.isGetElem());
1461:       assertFalse(node0.isCast());
1462:       assertFalse(node0.hasChildren());
1463:       assertEquals((-1), node0.getSourcePosition());
1464:       assertFalse(node0.isTypeOf());
1465:       assertFalse(node0.isComma());
1466:       assertFalse(node0.isDec());
1467:       assertFalse(node0.isAssign());
1468:       assertFalse(node0.isObjectLit());
1469:       assertFalse(node0.isGetProp());
1470:       assertNotSame(node0, node2);
1471:       assertFalse(boolean2);
1472:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1473:       assertEquals(53, Node.INPUT_ID);
1474:       assertEquals(36, Node.QUOTED_PROP);
1475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1476:       assertEquals(43, Node.IS_CONSTANT_NAME);
1477:       assertEquals(56, Node.CHANGE_TIME);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(39, Node.EMPTY_BLOCK);
1480:       assertEquals(47, Node.IS_DISPATCHER);
1481:       assertEquals(8, Node.FLAG_NO_THROWS);
1482:       assertEquals(2, Node.POST_FLAG);
1483:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1484:       assertEquals(55, Node.INFERRED_FUNCTION);
1485:       assertEquals(29, Node.JSDOC_INFO_PROP);
1486:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1487:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1488:       assertEquals(57, Node.LAST_PROP);
1489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1490:       assertEquals(54, Node.SLASH_V);
1491:       assertEquals(57, Node.REFLECTED_OBJECT);
1492:       assertEquals(30, Node.VAR_ARGS_NAME);
1493:       assertEquals(52, Node.LENGTH);
1494:       assertEquals(40, Node.ORIGINALNAME_PROP);
1495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1496:       assertEquals(48, Node.DIRECTIVES);
1497:       assertEquals(49, Node.DIRECT_EVAL);
1498:       assertEquals(37, Node.OPT_ARG_NAME);
1499:       assertEquals(46, Node.IS_NAMESPACE);
1500:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1501:       assertEquals(4095, Node.COLUMN_MASK);
1502:       assertEquals(50, Node.FREE_CALL);
1503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1504:       assertEquals(1, Node.DECR_FLAG);
1505:       assertEquals(12, Node.COLUMN_BITS);
1506:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1507:       assertEquals(32, Node.INCRDECR_PROP);
1508:       assertFalse(node0.equals((Object)node1));
1509:       assertFalse(node0.equals((Object)node2));
1510:       assertTrue(boolean2 == boolean0);
1511:       assertTrue(boolean2 == boolean1);
1512:       
1513:       boolean boolean3 = node0.isReturn();
1514:       assertFalse(node0.isString());
1515:       assertFalse(node0.isCase());
1516:       assertEquals((-1), node0.getCharno());
1517:       assertFalse(node0.isSwitch());
1518:       assertFalse(node0.isHook());
1519:       assertFalse(node0.isFalse());
1520:       assertEquals(0, node0.getType());
1521:       assertFalse(node0.isIf());
1522:       assertFalse(node0.isDelProp());
1523:       assertFalse(node0.isBreak());
1524:       assertFalse(node0.isNE());
1525:       assertFalse(node0.isThrow());
1526:       assertFalse(node0.isIn());
1527:       assertFalse(node0.isInc());
1528:       assertFalse(node0.isEmpty());
1529:       assertFalse(node0.isDefaultCase());
1530:       assertFalse(node0.isWith());
1531:       assertFalse(node0.isRegExp());
1532:       assertFalse(node0.isArrayLit());
1533:       assertEquals(0, node0.getChildCount());
1534:       assertFalse(node0.isCatch());
1535:       assertFalse(node0.isInstanceOf());
1536:       assertFalse(node0.isGetterDef());
1537:       assertFalse(node0.isNumber());
1538:       assertFalse(node0.isLabelName());
1539:       assertFalse(node0.isParamList());
1540:       assertFalse(node0.isThis());
1541:       assertFalse(node0.isFor());
1542:       assertFalse(node0.isStringKey());
1543:       assertFalse(node0.isTry());
1544:       assertFalse(node0.hasOneChild());
1545:       assertFalse(node0.isScript());
1546:       assertFalse(node0.isWhile());
1547:       assertFalse(node0.isDo());
1548:       assertFalse(node0.isBlock());
1549:       assertFalse(node0.isReturn());
1550:       assertFalse(node0.isLabel());
1551:       assertEquals((-1), node0.getLineno());
1552:       assertFalse(node0.isCall());
1553:       assertFalse(node0.isContinue());
1554:       assertFalse(node0.hasMoreThanOneChild());
1555:       assertFalse(node0.isName());
1556:       assertFalse(node0.isVar());
1557:       assertFalse(node0.isNull());
1558:       assertFalse(node0.isAssignAdd());
1559:       assertFalse(node0.isNew());
1560:       assertFalse(node0.isOr());
1561:       assertFalse(node0.isSetterDef());
1562:       assertFalse(node0.isAdd());
1563:       assertFalse(node0.isNot());
1564:       assertFalse(node0.isVoid());
1565:       assertFalse(node0.isTrue());
1566:       assertFalse(node0.isAnd());
1567:       assertFalse(node0.isDebugger());
1568:       assertFalse(node0.isExprResult());
1569:       assertFalse(node0.isFunction());
1570:       assertFalse(node0.isGetElem());
1571:       assertFalse(node0.isCast());
1572:       assertFalse(node0.hasChildren());
1573:       assertEquals((-1), node0.getSourcePosition());
1574:       assertFalse(node0.isTypeOf());
1575:       assertFalse(node0.isComma());
1576:       assertFalse(node0.isDec());
1577:       assertFalse(node0.isAssign());
1578:       assertFalse(node0.isObjectLit());
1579:       assertFalse(node0.isGetProp());
1580:       assertNotSame(node0, node2);
1581:       assertFalse(boolean3);
1582:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1583:       assertEquals(53, Node.INPUT_ID);
1584:       assertEquals(36, Node.QUOTED_PROP);
1585:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1586:       assertEquals(43, Node.IS_CONSTANT_NAME);
1587:       assertEquals(56, Node.CHANGE_TIME);
1588:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1589:       assertEquals(39, Node.EMPTY_BLOCK);
1590:       assertEquals(47, Node.IS_DISPATCHER);
1591:       assertEquals(8, Node.FLAG_NO_THROWS);
1592:       assertEquals(2, Node.POST_FLAG);
1593:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1594:       assertEquals(55, Node.INFERRED_FUNCTION);
1595:       assertEquals(29, Node.JSDOC_INFO_PROP);
1596:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1597:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1598:       assertEquals(57, Node.LAST_PROP);
1599:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1600:       assertEquals(54, Node.SLASH_V);
1601:       assertEquals(57, Node.REFLECTED_OBJECT);
1602:       assertEquals(30, Node.VAR_ARGS_NAME);
1603:       assertEquals(52, Node.LENGTH);
1604:       assertEquals(40, Node.ORIGINALNAME_PROP);
1605:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1606:       assertEquals(48, Node.DIRECTIVES);
1607:       assertEquals(49, Node.DIRECT_EVAL);
1608:       assertEquals(37, Node.OPT_ARG_NAME);
1609:       assertEquals(46, Node.IS_NAMESPACE);
1610:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1611:       assertEquals(4095, Node.COLUMN_MASK);
1612:       assertEquals(50, Node.FREE_CALL);
1613:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1614:       assertEquals(1, Node.DECR_FLAG);
1615:       assertEquals(12, Node.COLUMN_BITS);
1616:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1617:       assertEquals(32, Node.INCRDECR_PROP);
1618:       assertFalse(node0.equals((Object)node1));
1619:       assertFalse(node0.equals((Object)node2));
1620:       assertTrue(boolean3 == boolean1);
1621:       assertTrue(boolean3 == boolean2);
1622:       assertTrue(boolean3 == boolean0);
1623:       
1624:       Node node3 = Node.newNumber((double) 47);
1625:       assertEquals(39, node3.getType());
1626:       assertFalse(node3.isContinue());
1627:       assertFalse(node3.isWhile());
1628:       assertFalse(node3.hasMoreThanOneChild());
1629:       assertFalse(node3.isOr());
1630:       assertFalse(node3.isNew());
1631:       assertFalse(node3.isAdd());
1632:       assertFalse(node3.isBlock());
1633:       assertFalse(node3.isAssignAdd());
1634:       assertFalse(node3.isLabel());
1635:       assertFalse(node3.isReturn());
1636:       assertFalse(node3.isDo());
1637:       assertFalse(node3.isName());
1638:       assertFalse(node3.isGetElem());
1639:       assertFalse(node3.isCall());
1640:       assertFalse(node3.isNull());
1641:       assertFalse(node3.isTypeOf());
1642:       assertFalse(node3.hasChildren());
1643:       assertFalse(node3.isDec());
1644:       assertFalse(node3.isAssign());
1645:       assertFalse(node3.isExprResult());
1646:       assertEquals((-1), node3.getLineno());
1647:       assertFalse(node3.isWith());
1648:       assertFalse(node3.isCatch());
1649:       assertFalse(node3.isRegExp());
1650:       assertFalse(node3.isInstanceOf());
1651:       assertEquals(0, node3.getChildCount());
1652:       assertFalse(node3.isThis());
1653:       assertFalse(node3.isScript());
1654:       assertFalse(node3.hasOneChild());
1655:       assertFalse(node3.isDefaultCase());
1656:       assertFalse(node3.isTry());
1657:       assertFalse(node3.isStringKey());
1658:       assertFalse(node3.isVar());
1659:       assertFalse(node3.isGetterDef());
1660:       assertEquals((-1), node3.getCharno());
1661:       assertFalse(node3.isParamList());
1662:       assertFalse(node3.isArrayLit());
1663:       assertFalse(node3.isSwitch());
1664:       assertFalse(node3.isLabelName());
1665:       assertFalse(node3.isCase());
1666:       assertFalse(node3.isString());
1667:       assertFalse(node3.isIn());
1668:       assertFalse(node3.isInc());
1669:       assertTrue(node3.isNumber());
1670:       assertFalse(node3.isFor());
1671:       assertFalse(node3.isEmpty());
1672:       assertFalse(node3.isHook());
1673:       assertFalse(node3.isComma());
1674:       assertFalse(node3.isTrue());
1675:       assertFalse(node3.isNE());
1676:       assertFalse(node3.isIf());
1677:       assertFalse(node3.isBreak());
1678:       assertFalse(node3.isDelProp());
1679:       assertFalse(node3.isVoid());
1680:       assertFalse(node3.isAnd());
1681:       assertFalse(node3.isFunction());
1682:       assertFalse(node3.isObjectLit());
1683:       assertFalse(node3.isDebugger());
1684:       assertFalse(node3.isNot());
1685:       assertFalse(node3.isGetProp());
1686:       assertFalse(node3.isSetterDef());
1687:       assertFalse(node3.isFalse());
1688:       assertFalse(node3.isThrow());
1689:       assertFalse(node3.isCast());
1690:       assertEquals((-1), node3.getSourcePosition());
1691:       assertNotNull(node3);
1692:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1693:       assertEquals(43, Node.IS_CONSTANT_NAME);
1694:       assertEquals(36, Node.QUOTED_PROP);
1695:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1696:       assertEquals(53, Node.INPUT_ID);
1697:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1698:       assertEquals(4095, Node.COLUMN_MASK);
1699:       assertEquals(47, Node.IS_DISPATCHER);
1700:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1701:       assertEquals(8, Node.FLAG_NO_THROWS);
1702:       assertEquals(39, Node.EMPTY_BLOCK);
1703:       assertEquals(37, Node.OPT_ARG_NAME);
1704:       assertEquals(56, Node.CHANGE_TIME);
1705:       assertEquals(48, Node.DIRECTIVES);
1706:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1707:       assertEquals(29, Node.JSDOC_INFO_PROP);
1708:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1709:       assertEquals(55, Node.INFERRED_FUNCTION);
1710:       assertEquals(57, Node.REFLECTED_OBJECT);
1711:       assertEquals(57, Node.LAST_PROP);
1712:       assertEquals(52, Node.LENGTH);
1713:       assertEquals(49, Node.DIRECT_EVAL);
1714:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1715:       assertEquals(1, Node.DECR_FLAG);
1716:       assertEquals(32, Node.INCRDECR_PROP);
1717:       assertEquals(30, Node.VAR_ARGS_NAME);
1718:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1719:       assertEquals(12, Node.COLUMN_BITS);
1720:       assertEquals(2, Node.POST_FLAG);
1721:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1723:       assertEquals(40, Node.ORIGINALNAME_PROP);
1724:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1725:       assertEquals(50, Node.FREE_CALL);
1726:       assertEquals(46, Node.IS_NAMESPACE);
1727:       assertEquals(54, Node.SLASH_V);
1728:       assertFalse(node3.equals((Object)node2));
1729:       assertFalse(node3.equals((Object)node1));
1730:       assertFalse(node3.equals((Object)node0));
1731:       
1732:       // Undeclared exception!
1733:       try { 
1734:         node0.removeChild(node1);
1735:         fail("Expecting exception: NullPointerException");
1736:       
1737:       } catch(NullPointerException e) {
1738:          //
1739:          // no message in exception (getMessage() returned null)
1740:          //
1741:          verifyException("com.google.javascript.rhino.Node", e);
1742:       }
1743:   }
1744: }
RegularFileObject[/tmp/EvoSuite_106_1628255796647/com/google/javascript/rhino/Node_106_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:36 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_106_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_106_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_106_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:37.062 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotNull(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);

TreeSet<String> treeSet0 = new TreeSet<String>();
assertNotNull(treeSet0);

NavigableSet<String> navigableSet0 = treeSet0.tailSet("k.~!4+De5arG>r", false);
assertTrue(navigableSet0.isEmpty());
assertEquals(0, navigableSet0.size());
assertNotNull(navigableSet0);
assertFalse(treeSet0.contains("k.~!4+De5arG>r"));
assertFalse(navigableSet0.contains("k.~!4+De5arG>r"));

node0.setDirectives(navigableSet0);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertTrue(navigableSet0.isEmpty());
assertEquals(0, navigableSet0.size());
assertFalse(treeSet0.contains("k.~!4+De5arG>r"));
assertFalse(navigableSet0.contains("k.~!4+De5arG>r"));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);

node0.addSuppression("this");
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean0 = node0.isOr();
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean1 = node0.isSetterDef();
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertTrue(boolean1 == boolean0);

Node node1 = Node.newString("string");
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertNotNull(node1);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(306654252, node1, node0, node0, node0);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isGetterDef());
assertFalse(node1.isRegExp());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThis());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isWhile());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isNull());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node2.isTrue());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isCatch());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isParamList());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isThis());
assertFalse(node2.isContinue());
assertFalse(node2.isFalse());
assertTrue(node2.hasChildren());
assertEquals(2, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isIn());
assertFalse(node2.isExprResult());
assertFalse(node2.hasOneChild());
assertFalse(node2.isLabelName());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isCast());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertEquals(306654252, node2.getType());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNumber());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isSwitch());
assertTrue(node2.hasMoreThanOneChild());
assertFalse(node2.isName());
assertFalse(node2.isWhile());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isComma());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isDelProp());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isNull());
assertNotNull(node2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

int int0 = node0.getIndexOfChild(node0);
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotSame(node0, node2);
assertEquals((-1), int0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));

boolean boolean2 = node0.isInstanceOf();
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotSame(node0, node2);
assertFalse(boolean2);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

boolean boolean3 = node0.isReturn();
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertEquals(0, node0.getType());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isArrayLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isStringKey());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNot());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertNotSame(node0, node2);
assertFalse(boolean3);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);

Node node3 = Node.newNumber((double) 47);
assertEquals(39, node3.getType());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isBlock());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isDo());
assertFalse(node3.isName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isNull());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isWith());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isInstanceOf());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isThis());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isTry());
assertFalse(node3.isStringKey());
assertFalse(node3.isVar());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isLabelName());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertFalse(node3.isInc());
assertTrue(node3.isNumber());
assertFalse(node3.isFor());
assertFalse(node3.isEmpty());
assertFalse(node3.isHook());
assertFalse(node3.isComma());
assertFalse(node3.isTrue());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isBreak());
assertFalse(node3.isDelProp());
assertFalse(node3.isVoid());
assertFalse(node3.isAnd());
assertFalse(node3.isFunction());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertFalse(node3.isNot());
assertFalse(node3.isGetProp());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertEquals((-1), node3.getSourcePosition());
assertNotNull(node3);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));

node0.removeChild(node1);

[MASTER] 13:16:43.262 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_122_1628255802566/com/google/javascript/rhino/Node_122_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_122_1628255802566/com/google/javascript/rhino/Node_122_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:43.262 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:43.262 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:43.263 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 859
[MASTER] 13:16:43.265 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_122_1628255802566/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:42 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.HashSet;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.testdata.EvoSuiteFile;
15: import org.evosuite.runtime.testdata.FileSystemHandling;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_122_tmp__ESTest extends Node_122_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
24:       assertFalse(node0.isOr());
25:       assertFalse(node0.isLabel());
26:       assertEquals((-1), node0.getLineno());
27:       assertEquals((-1), node0.getSourcePosition());
28:       assertFalse(node0.hasChildren());
29:       assertFalse(node0.isReturn());
30:       assertFalse(node0.isAssignAdd());
31:       assertFalse(node0.isGetElem());
32:       assertFalse(node0.isLabelName());
33:       assertFalse(node0.isAssign());
34:       assertFalse(node0.isDec());
35:       assertFalse(node0.isTypeOf());
36:       assertFalse(node0.hasMoreThanOneChild());
37:       assertFalse(node0.isCast());
38:       assertFalse(node0.isContinue());
39:       assertFalse(node0.isBlock());
40:       assertFalse(node0.isWhile());
41:       assertFalse(node0.isStringKey());
42:       assertFalse(node0.isObjectLit());
43:       assertFalse(node0.isNot());
44:       assertFalse(node0.hasOneChild());
45:       assertFalse(node0.isNumber());
46:       assertFalse(node0.isScript());
47:       assertFalse(node0.isThis());
48:       assertFalse(node0.isSetterDef());
49:       assertFalse(node0.isAnd());
50:       assertFalse(node0.isThrow());
51:       assertFalse(node0.isFalse());
52:       assertEquals(2468, node0.getType());
53:       assertFalse(node0.isInstanceOf());
54:       assertFalse(node0.isRegExp());
55:       assertFalse(node0.isCatch());
56:       assertFalse(node0.isWith());
57:       assertFalse(node0.isFunction());
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isIn());
60:       assertFalse(node0.isIf());
61:       assertFalse(node0.isDelProp());
62:       assertFalse(node0.isNE());
63:       assertFalse(node0.isFor());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isTry());
66:       assertEquals((-1), node0.getCharno());
67:       assertFalse(node0.isDebugger());
68:       assertFalse(node0.isHook());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isCase());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isString());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isComma());
75:       assertFalse(node0.isNull());
76:       assertFalse(node0.isParamList());
77:       assertFalse(node0.isCall());
78:       assertFalse(node0.isName());
79:       assertFalse(node0.isBreak());
80:       assertEquals(0, node0.getChildCount());
81:       assertFalse(node0.isVoid());
82:       assertFalse(node0.isAdd());
83:       assertFalse(node0.isTrue());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isDefaultCase());
87:       assertFalse(node0.isVar());
88:       assertFalse(node0.isDo());
89:       assertFalse(node0.isEmpty());
90:       assertNotNull(node0);
91:       assertEquals(4095, Node.COLUMN_MASK);
92:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
93:       assertEquals(55, Node.INFERRED_FUNCTION);
94:       assertEquals(43, Node.IS_CONSTANT_NAME);
95:       assertEquals(36, Node.QUOTED_PROP);
96:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
97:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
98:       assertEquals(48, Node.DIRECTIVES);
99:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
100:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
101:       assertEquals(50, Node.FREE_CALL);
102:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(32, Node.INCRDECR_PROP);
105:       assertEquals(1, Node.DECR_FLAG);
106:       assertEquals(51, Node.STATIC_SOURCE_FILE);
107:       assertEquals(12, Node.COLUMN_BITS);
108:       assertEquals(46, Node.IS_NAMESPACE);
109:       assertEquals(2, Node.POST_FLAG);
110:       assertEquals(30, Node.VAR_ARGS_NAME);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(56, Node.CHANGE_TIME);
113:       assertEquals(49, Node.DIRECT_EVAL);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(40, Node.ORIGINALNAME_PROP);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(15, Node.NO_SIDE_EFFECTS);
120:       assertEquals(8, Node.FLAG_NO_THROWS);
121:       assertEquals(39, Node.EMPTY_BLOCK);
122:       assertEquals(57, Node.LAST_PROP);
123:       assertEquals(47, Node.IS_DISPATCHER);
124:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
125:       assertEquals(29, Node.JSDOC_INFO_PROP);
126:       assertEquals(53, Node.INPUT_ID);
127:       
128:       boolean boolean0 = node0.isOnlyModifiesThisCall();
129:       assertFalse(node0.isOr());
130:       assertFalse(node0.isLabel());
131:       assertEquals((-1), node0.getLineno());
132:       assertEquals((-1), node0.getSourcePosition());
133:       assertFalse(node0.hasChildren());
134:       assertFalse(node0.isReturn());
135:       assertFalse(node0.isAssignAdd());
136:       assertFalse(node0.isGetElem());
137:       assertFalse(node0.isLabelName());
138:       assertFalse(node0.isAssign());
139:       assertFalse(node0.isDec());
140:       assertFalse(node0.isTypeOf());
141:       assertFalse(node0.hasMoreThanOneChild());
142:       assertFalse(node0.isCast());
143:       assertFalse(node0.isContinue());
144:       assertFalse(node0.isBlock());
145:       assertFalse(node0.isWhile());
146:       assertFalse(node0.isStringKey());
147:       assertFalse(node0.isObjectLit());
148:       assertFalse(node0.isNot());
149:       assertFalse(node0.hasOneChild());
150:       assertFalse(node0.isNumber());
151:       assertFalse(node0.isScript());
152:       assertFalse(node0.isThis());
153:       assertFalse(node0.isSetterDef());
154:       assertFalse(node0.isAnd());
155:       assertFalse(node0.isThrow());
156:       assertFalse(node0.isFalse());
157:       assertEquals(2468, node0.getType());
158:       assertFalse(node0.isInstanceOf());
159:       assertFalse(node0.isRegExp());
160:       assertFalse(node0.isCatch());
161:       assertFalse(node0.isWith());
162:       assertFalse(node0.isFunction());
163:       assertFalse(node0.isInc());
164:       assertFalse(node0.isIn());
165:       assertFalse(node0.isIf());
166:       assertFalse(node0.isDelProp());
167:       assertFalse(node0.isNE());
168:       assertFalse(node0.isFor());
169:       assertFalse(node0.isArrayLit());
170:       assertFalse(node0.isTry());
171:       assertEquals((-1), node0.getCharno());
172:       assertFalse(node0.isDebugger());
173:       assertFalse(node0.isHook());
174:       assertFalse(node0.isSwitch());
175:       assertFalse(node0.isCase());
176:       assertFalse(node0.isGetterDef());
177:       assertFalse(node0.isString());
178:       assertFalse(node0.isGetProp());
179:       assertFalse(node0.isComma());
180:       assertFalse(node0.isNull());
181:       assertFalse(node0.isParamList());
182:       assertFalse(node0.isCall());
183:       assertFalse(node0.isName());
184:       assertFalse(node0.isBreak());
185:       assertEquals(0, node0.getChildCount());
186:       assertFalse(node0.isVoid());
187:       assertFalse(node0.isAdd());
188:       assertFalse(node0.isTrue());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.isNew());
191:       assertFalse(node0.isDefaultCase());
192:       assertFalse(node0.isVar());
193:       assertFalse(node0.isDo());
194:       assertFalse(node0.isEmpty());
195:       assertFalse(boolean0);
196:       assertEquals(4095, Node.COLUMN_MASK);
197:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
198:       assertEquals(55, Node.INFERRED_FUNCTION);
199:       assertEquals(43, Node.IS_CONSTANT_NAME);
200:       assertEquals(36, Node.QUOTED_PROP);
201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
202:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
203:       assertEquals(48, Node.DIRECTIVES);
204:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
205:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
206:       assertEquals(50, Node.FREE_CALL);
207:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
208:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
209:       assertEquals(32, Node.INCRDECR_PROP);
210:       assertEquals(1, Node.DECR_FLAG);
211:       assertEquals(51, Node.STATIC_SOURCE_FILE);
212:       assertEquals(12, Node.COLUMN_BITS);
213:       assertEquals(46, Node.IS_NAMESPACE);
214:       assertEquals(2, Node.POST_FLAG);
215:       assertEquals(30, Node.VAR_ARGS_NAME);
216:       assertEquals(54, Node.SLASH_V);
217:       assertEquals(56, Node.CHANGE_TIME);
218:       assertEquals(49, Node.DIRECT_EVAL);
219:       assertEquals(37, Node.OPT_ARG_NAME);
220:       assertEquals(57, Node.REFLECTED_OBJECT);
221:       assertEquals(40, Node.ORIGINALNAME_PROP);
222:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
223:       assertEquals(52, Node.LENGTH);
224:       assertEquals(15, Node.NO_SIDE_EFFECTS);
225:       assertEquals(8, Node.FLAG_NO_THROWS);
226:       assertEquals(39, Node.EMPTY_BLOCK);
227:       assertEquals(57, Node.LAST_PROP);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
230:       assertEquals(29, Node.JSDOC_INFO_PROP);
231:       assertEquals(53, Node.INPUT_ID);
232:       
233:       node0.putProp(2769, "8IX=/g0 F~");
234:       assertFalse(node0.isOr());
235:       assertFalse(node0.isLabel());
236:       assertEquals((-1), node0.getLineno());
237:       assertEquals((-1), node0.getSourcePosition());
238:       assertFalse(node0.hasChildren());
239:       assertFalse(node0.isReturn());
240:       assertFalse(node0.isAssignAdd());
241:       assertFalse(node0.isGetElem());
242:       assertFalse(node0.isLabelName());
243:       assertFalse(node0.isAssign());
244:       assertFalse(node0.isDec());
245:       assertFalse(node0.isTypeOf());
246:       assertFalse(node0.hasMoreThanOneChild());
247:       assertFalse(node0.isCast());
248:       assertFalse(node0.isContinue());
249:       assertFalse(node0.isBlock());
250:       assertFalse(node0.isWhile());
251:       assertFalse(node0.isStringKey());
252:       assertFalse(node0.isObjectLit());
253:       assertFalse(node0.isNot());
254:       assertFalse(node0.hasOneChild());
255:       assertFalse(node0.isNumber());
256:       assertFalse(node0.isScript());
257:       assertFalse(node0.isThis());
258:       assertFalse(node0.isSetterDef());
259:       assertFalse(node0.isAnd());
260:       assertFalse(node0.isThrow());
261:       assertFalse(node0.isFalse());
262:       assertEquals(2468, node0.getType());
263:       assertFalse(node0.isInstanceOf());
264:       assertFalse(node0.isRegExp());
265:       assertFalse(node0.isCatch());
266:       assertFalse(node0.isWith());
267:       assertFalse(node0.isFunction());
268:       assertFalse(node0.isInc());
269:       assertFalse(node0.isIn());
270:       assertFalse(node0.isIf());
271:       assertFalse(node0.isDelProp());
272:       assertFalse(node0.isNE());
273:       assertFalse(node0.isFor());
274:       assertFalse(node0.isArrayLit());
275:       assertFalse(node0.isTry());
276:       assertEquals((-1), node0.getCharno());
277:       assertFalse(node0.isDebugger());
278:       assertFalse(node0.isHook());
279:       assertFalse(node0.isSwitch());
280:       assertFalse(node0.isCase());
281:       assertFalse(node0.isGetterDef());
282:       assertFalse(node0.isString());
283:       assertFalse(node0.isGetProp());
284:       assertFalse(node0.isComma());
285:       assertFalse(node0.isNull());
286:       assertFalse(node0.isParamList());
287:       assertFalse(node0.isCall());
288:       assertFalse(node0.isName());
289:       assertFalse(node0.isBreak());
290:       assertEquals(0, node0.getChildCount());
291:       assertFalse(node0.isVoid());
292:       assertFalse(node0.isAdd());
293:       assertFalse(node0.isTrue());
294:       assertFalse(node0.isExprResult());
295:       assertFalse(node0.isNew());
296:       assertFalse(node0.isDefaultCase());
297:       assertFalse(node0.isVar());
298:       assertFalse(node0.isDo());
299:       assertFalse(node0.isEmpty());
300:       assertEquals(4095, Node.COLUMN_MASK);
301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
302:       assertEquals(55, Node.INFERRED_FUNCTION);
303:       assertEquals(43, Node.IS_CONSTANT_NAME);
304:       assertEquals(36, Node.QUOTED_PROP);
305:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
307:       assertEquals(48, Node.DIRECTIVES);
308:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
310:       assertEquals(50, Node.FREE_CALL);
311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
312:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
313:       assertEquals(32, Node.INCRDECR_PROP);
314:       assertEquals(1, Node.DECR_FLAG);
315:       assertEquals(51, Node.STATIC_SOURCE_FILE);
316:       assertEquals(12, Node.COLUMN_BITS);
317:       assertEquals(46, Node.IS_NAMESPACE);
318:       assertEquals(2, Node.POST_FLAG);
319:       assertEquals(30, Node.VAR_ARGS_NAME);
320:       assertEquals(54, Node.SLASH_V);
321:       assertEquals(56, Node.CHANGE_TIME);
322:       assertEquals(49, Node.DIRECT_EVAL);
323:       assertEquals(37, Node.OPT_ARG_NAME);
324:       assertEquals(57, Node.REFLECTED_OBJECT);
325:       assertEquals(40, Node.ORIGINALNAME_PROP);
326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
327:       assertEquals(52, Node.LENGTH);
328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(57, Node.LAST_PROP);
332:       assertEquals(47, Node.IS_DISPATCHER);
333:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
334:       assertEquals(29, Node.JSDOC_INFO_PROP);
335:       assertEquals(53, Node.INPUT_ID);
336:       
337:       HashSet<String> hashSet0 = new HashSet<String>();
338:       assertEquals(0, hashSet0.size());
339:       assertTrue(hashSet0.isEmpty());
340:       assertNotNull(hashSet0);
341:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
342:       
343:       boolean boolean1 = hashSet0.add((String) null);
344:       assertEquals(1, hashSet0.size());
345:       assertFalse(hashSet0.isEmpty());
346:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
347:       assertTrue(boolean1);
348:       assertFalse(boolean1 == boolean0);
349:       
350:       boolean boolean2 = hashSet0.add((String) null);
351:       assertEquals(1, hashSet0.size());
352:       assertFalse(hashSet0.isEmpty());
353:       assertFalse(hashSet0.contains("8IX=/g0 F~"));
354:       assertFalse(boolean2);
355:       assertFalse(boolean2 == boolean1);
356:       assertTrue(boolean2 == boolean0);
357:       
358:       node0.removeProp(0);
359:       assertFalse(node0.isOr());
360:       assertFalse(node0.isLabel());
361:       assertEquals((-1), node0.getLineno());
362:       assertEquals((-1), node0.getSourcePosition());
363:       assertFalse(node0.hasChildren());
364:       assertFalse(node0.isReturn());
365:       assertFalse(node0.isAssignAdd());
366:       assertFalse(node0.isGetElem());
367:       assertFalse(node0.isLabelName());
368:       assertFalse(node0.isAssign());
369:       assertFalse(node0.isDec());
370:       assertFalse(node0.isTypeOf());
371:       assertFalse(node0.hasMoreThanOneChild());
372:       assertFalse(node0.isCast());
373:       assertFalse(node0.isContinue());
374:       assertFalse(node0.isBlock());
375:       assertFalse(node0.isWhile());
376:       assertFalse(node0.isStringKey());
377:       assertFalse(node0.isObjectLit());
378:       assertFalse(node0.isNot());
379:       assertFalse(node0.hasOneChild());
380:       assertFalse(node0.isNumber());
381:       assertFalse(node0.isScript());
382:       assertFalse(node0.isThis());
383:       assertFalse(node0.isSetterDef());
384:       assertFalse(node0.isAnd());
385:       assertFalse(node0.isThrow());
386:       assertFalse(node0.isFalse());
387:       assertEquals(2468, node0.getType());
388:       assertFalse(node0.isInstanceOf());
389:       assertFalse(node0.isRegExp());
390:       assertFalse(node0.isCatch());
391:       assertFalse(node0.isWith());
392:       assertFalse(node0.isFunction());
393:       assertFalse(node0.isInc());
394:       assertFalse(node0.isIn());
395:       assertFalse(node0.isIf());
396:       assertFalse(node0.isDelProp());
397:       assertFalse(node0.isNE());
398:       assertFalse(node0.isFor());
399:       assertFalse(node0.isArrayLit());
400:       assertFalse(node0.isTry());
401:       assertEquals((-1), node0.getCharno());
402:       assertFalse(node0.isDebugger());
403:       assertFalse(node0.isHook());
404:       assertFalse(node0.isSwitch());
405:       assertFalse(node0.isCase());
406:       assertFalse(node0.isGetterDef());
407:       assertFalse(node0.isString());
408:       assertFalse(node0.isGetProp());
409:       assertFalse(node0.isComma());
410:       assertFalse(node0.isNull());
411:       assertFalse(node0.isParamList());
412:       assertFalse(node0.isCall());
413:       assertFalse(node0.isName());
414:       assertFalse(node0.isBreak());
415:       assertEquals(0, node0.getChildCount());
416:       assertFalse(node0.isVoid());
417:       assertFalse(node0.isAdd());
418:       assertFalse(node0.isTrue());
419:       assertFalse(node0.isExprResult());
420:       assertFalse(node0.isNew());
421:       assertFalse(node0.isDefaultCase());
422:       assertFalse(node0.isVar());
423:       assertFalse(node0.isDo());
424:       assertFalse(node0.isEmpty());
425:       assertEquals(4095, Node.COLUMN_MASK);
426:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
427:       assertEquals(55, Node.INFERRED_FUNCTION);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
432:       assertEquals(48, Node.DIRECTIVES);
433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
434:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
435:       assertEquals(50, Node.FREE_CALL);
436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
437:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
438:       assertEquals(32, Node.INCRDECR_PROP);
439:       assertEquals(1, Node.DECR_FLAG);
440:       assertEquals(51, Node.STATIC_SOURCE_FILE);
441:       assertEquals(12, Node.COLUMN_BITS);
442:       assertEquals(46, Node.IS_NAMESPACE);
443:       assertEquals(2, Node.POST_FLAG);
444:       assertEquals(30, Node.VAR_ARGS_NAME);
445:       assertEquals(54, Node.SLASH_V);
446:       assertEquals(56, Node.CHANGE_TIME);
447:       assertEquals(49, Node.DIRECT_EVAL);
448:       assertEquals(37, Node.OPT_ARG_NAME);
449:       assertEquals(57, Node.REFLECTED_OBJECT);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
452:       assertEquals(52, Node.LENGTH);
453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
454:       assertEquals(8, Node.FLAG_NO_THROWS);
455:       assertEquals(39, Node.EMPTY_BLOCK);
456:       assertEquals(57, Node.LAST_PROP);
457:       assertEquals(47, Node.IS_DISPATCHER);
458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
459:       assertEquals(29, Node.JSDOC_INFO_PROP);
460:       assertEquals(53, Node.INPUT_ID);
461:       
462:       boolean boolean3 = hashSet0.remove("Jcu{'f75U");
463:       assertEquals(1, hashSet0.size());
464:       assertFalse(hashSet0.isEmpty());
465:       assertFalse(hashSet0.contains("Jcu{'f75U"));
466:       assertFalse(boolean3);
467:       assertTrue(boolean3 == boolean2);
468:       assertFalse(boolean3 == boolean1);
469:       assertTrue(boolean3 == boolean0);
470:       
471:       node0.setDirectives(hashSet0);
472:       assertFalse(node0.isOr());
473:       assertFalse(node0.isLabel());
474:       assertEquals((-1), node0.getLineno());
475:       assertEquals((-1), node0.getSourcePosition());
476:       assertFalse(node0.hasChildren());
477:       assertFalse(node0.isReturn());
478:       assertFalse(node0.isAssignAdd());
479:       assertFalse(node0.isGetElem());
480:       assertFalse(node0.isLabelName());
481:       assertFalse(node0.isAssign());
482:       assertFalse(node0.isDec());
483:       assertFalse(node0.isTypeOf());
484:       assertFalse(node0.hasMoreThanOneChild());
485:       assertFalse(node0.isCast());
486:       assertFalse(node0.isContinue());
487:       assertFalse(node0.isBlock());
488:       assertFalse(node0.isWhile());
489:       assertFalse(node0.isStringKey());
490:       assertFalse(node0.isObjectLit());
491:       assertFalse(node0.isNot());
492:       assertFalse(node0.hasOneChild());
493:       assertFalse(node0.isNumber());
494:       assertFalse(node0.isScript());
495:       assertFalse(node0.isThis());
496:       assertFalse(node0.isSetterDef());
497:       assertFalse(node0.isAnd());
498:       assertFalse(node0.isThrow());
499:       assertFalse(node0.isFalse());
500:       assertEquals(2468, node0.getType());
501:       assertFalse(node0.isInstanceOf());
502:       assertFalse(node0.isRegExp());
503:       assertFalse(node0.isCatch());
504:       assertFalse(node0.isWith());
505:       assertFalse(node0.isFunction());
506:       assertFalse(node0.isInc());
507:       assertFalse(node0.isIn());
508:       assertFalse(node0.isIf());
509:       assertFalse(node0.isDelProp());
510:       assertFalse(node0.isNE());
511:       assertFalse(node0.isFor());
512:       assertFalse(node0.isArrayLit());
513:       assertFalse(node0.isTry());
514:       assertEquals((-1), node0.getCharno());
515:       assertFalse(node0.isDebugger());
516:       assertFalse(node0.isHook());
517:       assertFalse(node0.isSwitch());
518:       assertFalse(node0.isCase());
519:       assertFalse(node0.isGetterDef());
520:       assertFalse(node0.isString());
521:       assertFalse(node0.isGetProp());
522:       assertFalse(node0.isComma());
523:       assertFalse(node0.isNull());
524:       assertFalse(node0.isParamList());
525:       assertFalse(node0.isCall());
526:       assertFalse(node0.isName());
527:       assertFalse(node0.isBreak());
528:       assertEquals(0, node0.getChildCount());
529:       assertFalse(node0.isVoid());
530:       assertFalse(node0.isAdd());
531:       assertFalse(node0.isTrue());
532:       assertFalse(node0.isExprResult());
533:       assertFalse(node0.isNew());
534:       assertFalse(node0.isDefaultCase());
535:       assertFalse(node0.isVar());
536:       assertFalse(node0.isDo());
537:       assertFalse(node0.isEmpty());
538:       assertEquals(1, hashSet0.size());
539:       assertFalse(hashSet0.isEmpty());
540:       assertFalse(hashSet0.contains("Jcu{'f75U"));
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
543:       assertEquals(55, Node.INFERRED_FUNCTION);
544:       assertEquals(43, Node.IS_CONSTANT_NAME);
545:       assertEquals(36, Node.QUOTED_PROP);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(48, Node.DIRECTIVES);
549:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
550:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
551:       assertEquals(50, Node.FREE_CALL);
552:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
554:       assertEquals(32, Node.INCRDECR_PROP);
555:       assertEquals(1, Node.DECR_FLAG);
556:       assertEquals(51, Node.STATIC_SOURCE_FILE);
557:       assertEquals(12, Node.COLUMN_BITS);
558:       assertEquals(46, Node.IS_NAMESPACE);
559:       assertEquals(2, Node.POST_FLAG);
560:       assertEquals(30, Node.VAR_ARGS_NAME);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(56, Node.CHANGE_TIME);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(37, Node.OPT_ARG_NAME);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(40, Node.ORIGINALNAME_PROP);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(15, Node.NO_SIDE_EFFECTS);
570:       assertEquals(8, Node.FLAG_NO_THROWS);
571:       assertEquals(39, Node.EMPTY_BLOCK);
572:       assertEquals(57, Node.LAST_PROP);
573:       assertEquals(47, Node.IS_DISPATCHER);
574:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
575:       assertEquals(29, Node.JSDOC_INFO_PROP);
576:       assertEquals(53, Node.INPUT_ID);
577:       
578:       node0.addSuppression("Jcu{'f75U");
579:       assertFalse(node0.isOr());
580:       assertFalse(node0.isLabel());
581:       assertEquals((-1), node0.getLineno());
582:       assertEquals((-1), node0.getSourcePosition());
583:       assertFalse(node0.hasChildren());
584:       assertFalse(node0.isReturn());
585:       assertFalse(node0.isAssignAdd());
586:       assertFalse(node0.isGetElem());
587:       assertFalse(node0.isLabelName());
588:       assertFalse(node0.isAssign());
589:       assertFalse(node0.isDec());
590:       assertFalse(node0.isTypeOf());
591:       assertFalse(node0.hasMoreThanOneChild());
592:       assertFalse(node0.isCast());
593:       assertFalse(node0.isContinue());
594:       assertFalse(node0.isBlock());
595:       assertFalse(node0.isWhile());
596:       assertFalse(node0.isStringKey());
597:       assertFalse(node0.isObjectLit());
598:       assertFalse(node0.isNot());
599:       assertFalse(node0.hasOneChild());
600:       assertFalse(node0.isNumber());
601:       assertFalse(node0.isScript());
602:       assertFalse(node0.isThis());
603:       assertFalse(node0.isSetterDef());
604:       assertFalse(node0.isAnd());
605:       assertFalse(node0.isThrow());
606:       assertFalse(node0.isFalse());
607:       assertEquals(2468, node0.getType());
608:       assertFalse(node0.isInstanceOf());
609:       assertFalse(node0.isRegExp());
610:       assertFalse(node0.isCatch());
611:       assertFalse(node0.isWith());
612:       assertFalse(node0.isFunction());
613:       assertFalse(node0.isInc());
614:       assertFalse(node0.isIn());
615:       assertFalse(node0.isIf());
616:       assertFalse(node0.isDelProp());
617:       assertFalse(node0.isNE());
618:       assertFalse(node0.isFor());
619:       assertFalse(node0.isArrayLit());
620:       assertFalse(node0.isTry());
621:       assertEquals((-1), node0.getCharno());
622:       assertFalse(node0.isDebugger());
623:       assertFalse(node0.isHook());
624:       assertFalse(node0.isSwitch());
625:       assertFalse(node0.isCase());
626:       assertFalse(node0.isGetterDef());
627:       assertFalse(node0.isString());
628:       assertFalse(node0.isGetProp());
629:       assertFalse(node0.isComma());
630:       assertFalse(node0.isNull());
631:       assertFalse(node0.isParamList());
632:       assertFalse(node0.isCall());
633:       assertFalse(node0.isName());
634:       assertFalse(node0.isBreak());
635:       assertEquals(0, node0.getChildCount());
636:       assertFalse(node0.isVoid());
637:       assertFalse(node0.isAdd());
638:       assertFalse(node0.isTrue());
639:       assertFalse(node0.isExprResult());
640:       assertFalse(node0.isNew());
641:       assertFalse(node0.isDefaultCase());
642:       assertFalse(node0.isVar());
643:       assertFalse(node0.isDo());
644:       assertFalse(node0.isEmpty());
645:       assertEquals(4095, Node.COLUMN_MASK);
646:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
647:       assertEquals(55, Node.INFERRED_FUNCTION);
648:       assertEquals(43, Node.IS_CONSTANT_NAME);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
651:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
652:       assertEquals(48, Node.DIRECTIVES);
653:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
654:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
657:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
658:       assertEquals(32, Node.INCRDECR_PROP);
659:       assertEquals(1, Node.DECR_FLAG);
660:       assertEquals(51, Node.STATIC_SOURCE_FILE);
661:       assertEquals(12, Node.COLUMN_BITS);
662:       assertEquals(46, Node.IS_NAMESPACE);
663:       assertEquals(2, Node.POST_FLAG);
664:       assertEquals(30, Node.VAR_ARGS_NAME);
665:       assertEquals(54, Node.SLASH_V);
666:       assertEquals(56, Node.CHANGE_TIME);
667:       assertEquals(49, Node.DIRECT_EVAL);
668:       assertEquals(37, Node.OPT_ARG_NAME);
669:       assertEquals(57, Node.REFLECTED_OBJECT);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
672:       assertEquals(52, Node.LENGTH);
673:       assertEquals(15, Node.NO_SIDE_EFFECTS);
674:       assertEquals(8, Node.FLAG_NO_THROWS);
675:       assertEquals(39, Node.EMPTY_BLOCK);
676:       assertEquals(57, Node.LAST_PROP);
677:       assertEquals(47, Node.IS_DISPATCHER);
678:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
679:       assertEquals(29, Node.JSDOC_INFO_PROP);
680:       assertEquals(53, Node.INPUT_ID);
681:       
682:       boolean boolean4 = node0.isOr();
683:       assertFalse(node0.isOr());
684:       assertFalse(node0.isLabel());
685:       assertEquals((-1), node0.getLineno());
686:       assertEquals((-1), node0.getSourcePosition());
687:       assertFalse(node0.hasChildren());
688:       assertFalse(node0.isReturn());
689:       assertFalse(node0.isAssignAdd());
690:       assertFalse(node0.isGetElem());
691:       assertFalse(node0.isLabelName());
692:       assertFalse(node0.isAssign());
693:       assertFalse(node0.isDec());
694:       assertFalse(node0.isTypeOf());
695:       assertFalse(node0.hasMoreThanOneChild());
696:       assertFalse(node0.isCast());
697:       assertFalse(node0.isContinue());
698:       assertFalse(node0.isBlock());
699:       assertFalse(node0.isWhile());
700:       assertFalse(node0.isStringKey());
701:       assertFalse(node0.isObjectLit());
702:       assertFalse(node0.isNot());
703:       assertFalse(node0.hasOneChild());
704:       assertFalse(node0.isNumber());
705:       assertFalse(node0.isScript());
706:       assertFalse(node0.isThis());
707:       assertFalse(node0.isSetterDef());
708:       assertFalse(node0.isAnd());
709:       assertFalse(node0.isThrow());
710:       assertFalse(node0.isFalse());
711:       assertEquals(2468, node0.getType());
712:       assertFalse(node0.isInstanceOf());
713:       assertFalse(node0.isRegExp());
714:       assertFalse(node0.isCatch());
715:       assertFalse(node0.isWith());
716:       assertFalse(node0.isFunction());
717:       assertFalse(node0.isInc());
718:       assertFalse(node0.isIn());
719:       assertFalse(node0.isIf());
720:       assertFalse(node0.isDelProp());
721:       assertFalse(node0.isNE());
722:       assertFalse(node0.isFor());
723:       assertFalse(node0.isArrayLit());
724:       assertFalse(node0.isTry());
725:       assertEquals((-1), node0.getCharno());
726:       assertFalse(node0.isDebugger());
727:       assertFalse(node0.isHook());
728:       assertFalse(node0.isSwitch());
729:       assertFalse(node0.isCase());
730:       assertFalse(node0.isGetterDef());
731:       assertFalse(node0.isString());
732:       assertFalse(node0.isGetProp());
733:       assertFalse(node0.isComma());
734:       assertFalse(node0.isNull());
735:       assertFalse(node0.isParamList());
736:       assertFalse(node0.isCall());
737:       assertFalse(node0.isName());
738:       assertFalse(node0.isBreak());
739:       assertEquals(0, node0.getChildCount());
740:       assertFalse(node0.isVoid());
741:       assertFalse(node0.isAdd());
742:       assertFalse(node0.isTrue());
743:       assertFalse(node0.isExprResult());
744:       assertFalse(node0.isNew());
745:       assertFalse(node0.isDefaultCase());
746:       assertFalse(node0.isVar());
747:       assertFalse(node0.isDo());
748:       assertFalse(node0.isEmpty());
749:       assertFalse(boolean4);
750:       assertEquals(4095, Node.COLUMN_MASK);
751:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
752:       assertEquals(55, Node.INFERRED_FUNCTION);
753:       assertEquals(43, Node.IS_CONSTANT_NAME);
754:       assertEquals(36, Node.QUOTED_PROP);
755:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
756:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
757:       assertEquals(48, Node.DIRECTIVES);
758:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
759:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
760:       assertEquals(50, Node.FREE_CALL);
761:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
762:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
763:       assertEquals(32, Node.INCRDECR_PROP);
764:       assertEquals(1, Node.DECR_FLAG);
765:       assertEquals(51, Node.STATIC_SOURCE_FILE);
766:       assertEquals(12, Node.COLUMN_BITS);
767:       assertEquals(46, Node.IS_NAMESPACE);
768:       assertEquals(2, Node.POST_FLAG);
769:       assertEquals(30, Node.VAR_ARGS_NAME);
770:       assertEquals(54, Node.SLASH_V);
771:       assertEquals(56, Node.CHANGE_TIME);
772:       assertEquals(49, Node.DIRECT_EVAL);
773:       assertEquals(37, Node.OPT_ARG_NAME);
774:       assertEquals(57, Node.REFLECTED_OBJECT);
775:       assertEquals(40, Node.ORIGINALNAME_PROP);
776:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
777:       assertEquals(52, Node.LENGTH);
778:       assertEquals(15, Node.NO_SIDE_EFFECTS);
779:       assertEquals(8, Node.FLAG_NO_THROWS);
780:       assertEquals(39, Node.EMPTY_BLOCK);
781:       assertEquals(57, Node.LAST_PROP);
782:       assertEquals(47, Node.IS_DISPATCHER);
783:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
784:       assertEquals(29, Node.JSDOC_INFO_PROP);
785:       assertEquals(53, Node.INPUT_ID);
786:       assertTrue(boolean4 == boolean0);
787:       assertFalse(boolean4 == boolean1);
788:       assertTrue(boolean4 == boolean3);
789:       assertTrue(boolean4 == boolean2);
790:       
791:       Iterable<Node> iterable0 = node0.children();
792:       assertFalse(node0.isOr());
793:       assertFalse(node0.isLabel());
794:       assertEquals((-1), node0.getLineno());
795:       assertEquals((-1), node0.getSourcePosition());
796:       assertFalse(node0.hasChildren());
797:       assertFalse(node0.isReturn());
798:       assertFalse(node0.isAssignAdd());
799:       assertFalse(node0.isGetElem());
800:       assertFalse(node0.isLabelName());
801:       assertFalse(node0.isAssign());
802:       assertFalse(node0.isDec());
803:       assertFalse(node0.isTypeOf());
804:       assertFalse(node0.hasMoreThanOneChild());
805:       assertFalse(node0.isCast());
806:       assertFalse(node0.isContinue());
807:       assertFalse(node0.isBlock());
808:       assertFalse(node0.isWhile());
809:       assertFalse(node0.isStringKey());
810:       assertFalse(node0.isObjectLit());
811:       assertFalse(node0.isNot());
812:       assertFalse(node0.hasOneChild());
813:       assertFalse(node0.isNumber());
814:       assertFalse(node0.isScript());
815:       assertFalse(node0.isThis());
816:       assertFalse(node0.isSetterDef());
817:       assertFalse(node0.isAnd());
818:       assertFalse(node0.isThrow());
819:       assertFalse(node0.isFalse());
820:       assertEquals(2468, node0.getType());
821:       assertFalse(node0.isInstanceOf());
822:       assertFalse(node0.isRegExp());
823:       assertFalse(node0.isCatch());
824:       assertFalse(node0.isWith());
825:       assertFalse(node0.isFunction());
826:       assertFalse(node0.isInc());
827:       assertFalse(node0.isIn());
828:       assertFalse(node0.isIf());
829:       assertFalse(node0.isDelProp());
830:       assertFalse(node0.isNE());
831:       assertFalse(node0.isFor());
832:       assertFalse(node0.isArrayLit());
833:       assertFalse(node0.isTry());
834:       assertEquals((-1), node0.getCharno());
835:       assertFalse(node0.isDebugger());
836:       assertFalse(node0.isHook());
837:       assertFalse(node0.isSwitch());
838:       assertFalse(node0.isCase());
839:       assertFalse(node0.isGetterDef());
840:       assertFalse(node0.isString());
841:       assertFalse(node0.isGetProp());
842:       assertFalse(node0.isComma());
843:       assertFalse(node0.isNull());
844:       assertFalse(node0.isParamList());
845:       assertFalse(node0.isCall());
846:       assertFalse(node0.isName());
847:       assertFalse(node0.isBreak());
848:       assertEquals(0, node0.getChildCount());
849:       assertFalse(node0.isVoid());
850:       assertFalse(node0.isAdd());
851:       assertFalse(node0.isTrue());
852:       assertFalse(node0.isExprResult());
853:       assertFalse(node0.isNew());
854:       assertFalse(node0.isDefaultCase());
855:       assertFalse(node0.isVar());
856:       assertFalse(node0.isDo());
857:       assertFalse(node0.isEmpty());
858:       assertNotNull(iterable0);
859:       assertFalse(iterable0.contains(node0));
860:       assertEquals(4095, Node.COLUMN_MASK);
861:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
862:       assertEquals(55, Node.INFERRED_FUNCTION);
863:       assertEquals(43, Node.IS_CONSTANT_NAME);
864:       assertEquals(36, Node.QUOTED_PROP);
865:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
866:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
867:       assertEquals(48, Node.DIRECTIVES);
868:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
869:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
870:       assertEquals(50, Node.FREE_CALL);
871:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
872:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
873:       assertEquals(32, Node.INCRDECR_PROP);
874:       assertEquals(1, Node.DECR_FLAG);
875:       assertEquals(51, Node.STATIC_SOURCE_FILE);
876:       assertEquals(12, Node.COLUMN_BITS);
877:       assertEquals(46, Node.IS_NAMESPACE);
878:       assertEquals(2, Node.POST_FLAG);
879:       assertEquals(30, Node.VAR_ARGS_NAME);
880:       assertEquals(54, Node.SLASH_V);
881:       assertEquals(56, Node.CHANGE_TIME);
882:       assertEquals(49, Node.DIRECT_EVAL);
883:       assertEquals(37, Node.OPT_ARG_NAME);
884:       assertEquals(57, Node.REFLECTED_OBJECT);
885:       assertEquals(40, Node.ORIGINALNAME_PROP);
886:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
887:       assertEquals(52, Node.LENGTH);
888:       assertEquals(15, Node.NO_SIDE_EFFECTS);
889:       assertEquals(8, Node.FLAG_NO_THROWS);
890:       assertEquals(39, Node.EMPTY_BLOCK);
891:       assertEquals(57, Node.LAST_PROP);
892:       assertEquals(47, Node.IS_DISPATCHER);
893:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
894:       assertEquals(29, Node.JSDOC_INFO_PROP);
895:       assertEquals(53, Node.INPUT_ID);
896:       
897:       boolean boolean5 = node0.isAnd();
898:       assertFalse(node0.isOr());
899:       assertFalse(node0.isLabel());
900:       assertEquals((-1), node0.getLineno());
901:       assertEquals((-1), node0.getSourcePosition());
902:       assertFalse(node0.hasChildren());
903:       assertFalse(node0.isReturn());
904:       assertFalse(node0.isAssignAdd());
905:       assertFalse(node0.isGetElem());
906:       assertFalse(node0.isLabelName());
907:       assertFalse(node0.isAssign());
908:       assertFalse(node0.isDec());
909:       assertFalse(node0.isTypeOf());
910:       assertFalse(node0.hasMoreThanOneChild());
911:       assertFalse(node0.isCast());
912:       assertFalse(node0.isContinue());
913:       assertFalse(node0.isBlock());
914:       assertFalse(node0.isWhile());
915:       assertFalse(node0.isStringKey());
916:       assertFalse(node0.isObjectLit());
917:       assertFalse(node0.isNot());
918:       assertFalse(node0.hasOneChild());
919:       assertFalse(node0.isNumber());
920:       assertFalse(node0.isScript());
921:       assertFalse(node0.isThis());
922:       assertFalse(node0.isSetterDef());
923:       assertFalse(node0.isAnd());
924:       assertFalse(node0.isThrow());
925:       assertFalse(node0.isFalse());
926:       assertEquals(2468, node0.getType());
927:       assertFalse(node0.isInstanceOf());
928:       assertFalse(node0.isRegExp());
929:       assertFalse(node0.isCatch());
930:       assertFalse(node0.isWith());
931:       assertFalse(node0.isFunction());
932:       assertFalse(node0.isInc());
933:       assertFalse(node0.isIn());
934:       assertFalse(node0.isIf());
935:       assertFalse(node0.isDelProp());
936:       assertFalse(node0.isNE());
937:       assertFalse(node0.isFor());
938:       assertFalse(node0.isArrayLit());
939:       assertFalse(node0.isTry());
940:       assertEquals((-1), node0.getCharno());
941:       assertFalse(node0.isDebugger());
942:       assertFalse(node0.isHook());
943:       assertFalse(node0.isSwitch());
944:       assertFalse(node0.isCase());
945:       assertFalse(node0.isGetterDef());
946:       assertFalse(node0.isString());
947:       assertFalse(node0.isGetProp());
948:       assertFalse(node0.isComma());
949:       assertFalse(node0.isNull());
950:       assertFalse(node0.isParamList());
951:       assertFalse(node0.isCall());
952:       assertFalse(node0.isName());
953:       assertFalse(node0.isBreak());
954:       assertEquals(0, node0.getChildCount());
955:       assertFalse(node0.isVoid());
956:       assertFalse(node0.isAdd());
957:       assertFalse(node0.isTrue());
958:       assertFalse(node0.isExprResult());
959:       assertFalse(node0.isNew());
960:       assertFalse(node0.isDefaultCase());
961:       assertFalse(node0.isVar());
962:       assertFalse(node0.isDo());
963:       assertFalse(node0.isEmpty());
964:       assertFalse(boolean5);
965:       assertEquals(4095, Node.COLUMN_MASK);
966:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
967:       assertEquals(55, Node.INFERRED_FUNCTION);
968:       assertEquals(43, Node.IS_CONSTANT_NAME);
969:       assertEquals(36, Node.QUOTED_PROP);
970:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
971:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
972:       assertEquals(48, Node.DIRECTIVES);
973:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
974:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
975:       assertEquals(50, Node.FREE_CALL);
976:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
977:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
978:       assertEquals(32, Node.INCRDECR_PROP);
979:       assertEquals(1, Node.DECR_FLAG);
980:       assertEquals(51, Node.STATIC_SOURCE_FILE);
981:       assertEquals(12, Node.COLUMN_BITS);
982:       assertEquals(46, Node.IS_NAMESPACE);
983:       assertEquals(2, Node.POST_FLAG);
984:       assertEquals(30, Node.VAR_ARGS_NAME);
985:       assertEquals(54, Node.SLASH_V);
986:       assertEquals(56, Node.CHANGE_TIME);
987:       assertEquals(49, Node.DIRECT_EVAL);
988:       assertEquals(37, Node.OPT_ARG_NAME);
989:       assertEquals(57, Node.REFLECTED_OBJECT);
990:       assertEquals(40, Node.ORIGINALNAME_PROP);
991:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
992:       assertEquals(52, Node.LENGTH);
993:       assertEquals(15, Node.NO_SIDE_EFFECTS);
994:       assertEquals(8, Node.FLAG_NO_THROWS);
995:       assertEquals(39, Node.EMPTY_BLOCK);
996:       assertEquals(57, Node.LAST_PROP);
997:       assertEquals(47, Node.IS_DISPATCHER);
998:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
999:       assertEquals(29, Node.JSDOC_INFO_PROP);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertTrue(boolean5 == boolean0);
1002:       assertFalse(boolean5 == boolean1);
1003:       assertTrue(boolean5 == boolean4);
1004:       assertTrue(boolean5 == boolean2);
1005:       assertTrue(boolean5 == boolean3);
1006:       
1007:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
1008:       assertEquals(16, node_SideEffectFlags0.valueOf());
1009:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1010:       assertNotNull(node_SideEffectFlags0);
1011:       
1012:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
1013:       assertEquals(16, node_SideEffectFlags0.valueOf());
1014:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1015:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1016:       assertEquals(16, node_SideEffectFlags1.valueOf());
1017:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1018:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1019:       assertNotNull(node_SideEffectFlags1);
1020:       
1021:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
1022:       assertEquals(16, node_SideEffectFlags0.valueOf());
1023:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1024:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1025:       assertEquals(16, node_SideEffectFlags1.valueOf());
1026:       assertEquals(16, node_SideEffectFlags2.valueOf());
1027:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1028:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1029:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1030:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1031:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1032:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1033:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1034:       assertNotNull(node_SideEffectFlags2);
1035:       
1036:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
1037:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1038:       assertEquals(31, node_SideEffectFlags3.valueOf());
1039:       assertEquals(31, node_SideEffectFlags0.valueOf());
1040:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1041:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1042:       assertEquals(31, node_SideEffectFlags1.valueOf());
1043:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1044:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1045:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1046:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1047:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1048:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1049:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1050:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1051:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1052:       assertNotNull(node_SideEffectFlags3);
1053:       
1054:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
1055:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
1056:       assertEquals(24, node_SideEffectFlags4.valueOf());
1057:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1058:       assertEquals(24, node_SideEffectFlags0.valueOf());
1059:       assertEquals(24, node_SideEffectFlags1.valueOf());
1060:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1061:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1062:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1063:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1064:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1065:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1066:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1067:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1068:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1069:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1070:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1071:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1072:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1073:       assertNotNull(node_SideEffectFlags4);
1074:       
1075:       boolean boolean6 = node0.isFromExterns();
1076:       assertFalse(node0.isOr());
1077:       assertFalse(node0.isLabel());
1078:       assertEquals((-1), node0.getLineno());
1079:       assertEquals((-1), node0.getSourcePosition());
1080:       assertFalse(node0.hasChildren());
1081:       assertFalse(node0.isReturn());
1082:       assertFalse(node0.isAssignAdd());
1083:       assertFalse(node0.isGetElem());
1084:       assertFalse(node0.isLabelName());
1085:       assertFalse(node0.isAssign());
1086:       assertFalse(node0.isDec());
1087:       assertFalse(node0.isTypeOf());
1088:       assertFalse(node0.hasMoreThanOneChild());
1089:       assertFalse(node0.isCast());
1090:       assertFalse(node0.isContinue());
1091:       assertFalse(node0.isBlock());
1092:       assertFalse(node0.isWhile());
1093:       assertFalse(node0.isStringKey());
1094:       assertFalse(node0.isObjectLit());
1095:       assertFalse(node0.isNot());
1096:       assertFalse(node0.hasOneChild());
1097:       assertFalse(node0.isNumber());
1098:       assertFalse(node0.isScript());
1099:       assertFalse(node0.isThis());
1100:       assertFalse(node0.isSetterDef());
1101:       assertFalse(node0.isAnd());
1102:       assertFalse(node0.isThrow());
1103:       assertFalse(node0.isFalse());
1104:       assertEquals(2468, node0.getType());
1105:       assertFalse(node0.isInstanceOf());
1106:       assertFalse(node0.isRegExp());
1107:       assertFalse(node0.isCatch());
1108:       assertFalse(node0.isWith());
1109:       assertFalse(node0.isFunction());
1110:       assertFalse(node0.isInc());
1111:       assertFalse(node0.isIn());
1112:       assertFalse(node0.isIf());
1113:       assertFalse(node0.isDelProp());
1114:       assertFalse(node0.isNE());
1115:       assertFalse(node0.isFor());
1116:       assertFalse(node0.isArrayLit());
1117:       assertFalse(node0.isTry());
1118:       assertEquals((-1), node0.getCharno());
1119:       assertFalse(node0.isDebugger());
1120:       assertFalse(node0.isHook());
1121:       assertFalse(node0.isSwitch());
1122:       assertFalse(node0.isCase());
1123:       assertFalse(node0.isGetterDef());
1124:       assertFalse(node0.isString());
1125:       assertFalse(node0.isGetProp());
1126:       assertFalse(node0.isComma());
1127:       assertFalse(node0.isNull());
1128:       assertFalse(node0.isParamList());
1129:       assertFalse(node0.isCall());
1130:       assertFalse(node0.isName());
1131:       assertFalse(node0.isBreak());
1132:       assertEquals(0, node0.getChildCount());
1133:       assertFalse(node0.isVoid());
1134:       assertFalse(node0.isAdd());
1135:       assertFalse(node0.isTrue());
1136:       assertFalse(node0.isExprResult());
1137:       assertFalse(node0.isNew());
1138:       assertFalse(node0.isDefaultCase());
1139:       assertFalse(node0.isVar());
1140:       assertFalse(node0.isDo());
1141:       assertFalse(node0.isEmpty());
1142:       assertFalse(boolean6);
1143:       assertEquals(4095, Node.COLUMN_MASK);
1144:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1145:       assertEquals(55, Node.INFERRED_FUNCTION);
1146:       assertEquals(43, Node.IS_CONSTANT_NAME);
1147:       assertEquals(36, Node.QUOTED_PROP);
1148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1150:       assertEquals(48, Node.DIRECTIVES);
1151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1153:       assertEquals(50, Node.FREE_CALL);
1154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1156:       assertEquals(32, Node.INCRDECR_PROP);
1157:       assertEquals(1, Node.DECR_FLAG);
1158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1159:       assertEquals(12, Node.COLUMN_BITS);
1160:       assertEquals(46, Node.IS_NAMESPACE);
1161:       assertEquals(2, Node.POST_FLAG);
1162:       assertEquals(30, Node.VAR_ARGS_NAME);
1163:       assertEquals(54, Node.SLASH_V);
1164:       assertEquals(56, Node.CHANGE_TIME);
1165:       assertEquals(49, Node.DIRECT_EVAL);
1166:       assertEquals(37, Node.OPT_ARG_NAME);
1167:       assertEquals(57, Node.REFLECTED_OBJECT);
1168:       assertEquals(40, Node.ORIGINALNAME_PROP);
1169:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1170:       assertEquals(52, Node.LENGTH);
1171:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1172:       assertEquals(8, Node.FLAG_NO_THROWS);
1173:       assertEquals(39, Node.EMPTY_BLOCK);
1174:       assertEquals(57, Node.LAST_PROP);
1175:       assertEquals(47, Node.IS_DISPATCHER);
1176:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1177:       assertEquals(29, Node.JSDOC_INFO_PROP);
1178:       assertEquals(53, Node.INPUT_ID);
1179:       assertTrue(boolean6 == boolean3);
1180:       assertTrue(boolean6 == boolean5);
1181:       assertFalse(boolean6 == boolean1);
1182:       assertTrue(boolean6 == boolean2);
1183:       assertTrue(boolean6 == boolean0);
1184:       assertTrue(boolean6 == boolean4);
1185:       
1186:       boolean boolean7 = node0.isInstanceOf();
1187:       assertFalse(node0.isOr());
1188:       assertFalse(node0.isLabel());
1189:       assertEquals((-1), node0.getLineno());
1190:       assertEquals((-1), node0.getSourcePosition());
1191:       assertFalse(node0.hasChildren());
1192:       assertFalse(node0.isReturn());
1193:       assertFalse(node0.isAssignAdd());
1194:       assertFalse(node0.isGetElem());
1195:       assertFalse(node0.isLabelName());
1196:       assertFalse(node0.isAssign());
1197:       assertFalse(node0.isDec());
1198:       assertFalse(node0.isTypeOf());
1199:       assertFalse(node0.hasMoreThanOneChild());
1200:       assertFalse(node0.isCast());
1201:       assertFalse(node0.isContinue());
1202:       assertFalse(node0.isBlock());
1203:       assertFalse(node0.isWhile());
1204:       assertFalse(node0.isStringKey());
1205:       assertFalse(node0.isObjectLit());
1206:       assertFalse(node0.isNot());
1207:       assertFalse(node0.hasOneChild());
1208:       assertFalse(node0.isNumber());
1209:       assertFalse(node0.isScript());
1210:       assertFalse(node0.isThis());
1211:       assertFalse(node0.isSetterDef());
1212:       assertFalse(node0.isAnd());
1213:       assertFalse(node0.isThrow());
1214:       assertFalse(node0.isFalse());
1215:       assertEquals(2468, node0.getType());
1216:       assertFalse(node0.isInstanceOf());
1217:       assertFalse(node0.isRegExp());
1218:       assertFalse(node0.isCatch());
1219:       assertFalse(node0.isWith());
1220:       assertFalse(node0.isFunction());
1221:       assertFalse(node0.isInc());
1222:       assertFalse(node0.isIn());
1223:       assertFalse(node0.isIf());
1224:       assertFalse(node0.isDelProp());
1225:       assertFalse(node0.isNE());
1226:       assertFalse(node0.isFor());
1227:       assertFalse(node0.isArrayLit());
1228:       assertFalse(node0.isTry());
1229:       assertEquals((-1), node0.getCharno());
1230:       assertFalse(node0.isDebugger());
1231:       assertFalse(node0.isHook());
1232:       assertFalse(node0.isSwitch());
1233:       assertFalse(node0.isCase());
1234:       assertFalse(node0.isGetterDef());
1235:       assertFalse(node0.isString());
1236:       assertFalse(node0.isGetProp());
1237:       assertFalse(node0.isComma());
1238:       assertFalse(node0.isNull());
1239:       assertFalse(node0.isParamList());
1240:       assertFalse(node0.isCall());
1241:       assertFalse(node0.isName());
1242:       assertFalse(node0.isBreak());
1243:       assertEquals(0, node0.getChildCount());
1244:       assertFalse(node0.isVoid());
1245:       assertFalse(node0.isAdd());
1246:       assertFalse(node0.isTrue());
1247:       assertFalse(node0.isExprResult());
1248:       assertFalse(node0.isNew());
1249:       assertFalse(node0.isDefaultCase());
1250:       assertFalse(node0.isVar());
1251:       assertFalse(node0.isDo());
1252:       assertFalse(node0.isEmpty());
1253:       assertFalse(boolean7);
1254:       assertEquals(4095, Node.COLUMN_MASK);
1255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1256:       assertEquals(55, Node.INFERRED_FUNCTION);
1257:       assertEquals(43, Node.IS_CONSTANT_NAME);
1258:       assertEquals(36, Node.QUOTED_PROP);
1259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1261:       assertEquals(48, Node.DIRECTIVES);
1262:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1264:       assertEquals(50, Node.FREE_CALL);
1265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1266:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1267:       assertEquals(32, Node.INCRDECR_PROP);
1268:       assertEquals(1, Node.DECR_FLAG);
1269:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1270:       assertEquals(12, Node.COLUMN_BITS);
1271:       assertEquals(46, Node.IS_NAMESPACE);
1272:       assertEquals(2, Node.POST_FLAG);
1273:       assertEquals(30, Node.VAR_ARGS_NAME);
1274:       assertEquals(54, Node.SLASH_V);
1275:       assertEquals(56, Node.CHANGE_TIME);
1276:       assertEquals(49, Node.DIRECT_EVAL);
1277:       assertEquals(37, Node.OPT_ARG_NAME);
1278:       assertEquals(57, Node.REFLECTED_OBJECT);
1279:       assertEquals(40, Node.ORIGINALNAME_PROP);
1280:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1281:       assertEquals(52, Node.LENGTH);
1282:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1283:       assertEquals(8, Node.FLAG_NO_THROWS);
1284:       assertEquals(39, Node.EMPTY_BLOCK);
1285:       assertEquals(57, Node.LAST_PROP);
1286:       assertEquals(47, Node.IS_DISPATCHER);
1287:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1288:       assertEquals(29, Node.JSDOC_INFO_PROP);
1289:       assertEquals(53, Node.INPUT_ID);
1290:       assertTrue(boolean7 == boolean5);
1291:       assertTrue(boolean7 == boolean6);
1292:       assertFalse(boolean7 == boolean1);
1293:       
1294:       boolean boolean8 = FileSystemHandling.createFolder((EvoSuiteFile) null);
1295:       assertFalse(boolean8);
1296:       
1297:       Node node1 = node0.cloneTree();
1298:       assertFalse(node0.isOr());
1299:       assertFalse(node0.isLabel());
1300:       assertEquals((-1), node0.getLineno());
1301:       assertEquals((-1), node0.getSourcePosition());
1302:       assertFalse(node0.hasChildren());
1303:       assertFalse(node0.isReturn());
1304:       assertFalse(node0.isAssignAdd());
1305:       assertFalse(node0.isGetElem());
1306:       assertFalse(node0.isLabelName());
1307:       assertFalse(node0.isAssign());
1308:       assertFalse(node0.isDec());
1309:       assertFalse(node0.isTypeOf());
1310:       assertFalse(node0.hasMoreThanOneChild());
1311:       assertFalse(node0.isCast());
1312:       assertFalse(node0.isContinue());
1313:       assertFalse(node0.isBlock());
1314:       assertFalse(node0.isWhile());
1315:       assertFalse(node0.isStringKey());
1316:       assertFalse(node0.isObjectLit());
1317:       assertFalse(node0.isNot());
1318:       assertFalse(node0.hasOneChild());
1319:       assertFalse(node0.isNumber());
1320:       assertFalse(node0.isScript());
1321:       assertFalse(node0.isThis());
1322:       assertFalse(node0.isSetterDef());
1323:       assertFalse(node0.isAnd());
1324:       assertFalse(node0.isThrow());
1325:       assertFalse(node0.isFalse());
1326:       assertEquals(2468, node0.getType());
1327:       assertFalse(node0.isInstanceOf());
1328:       assertFalse(node0.isRegExp());
1329:       assertFalse(node0.isCatch());
1330:       assertFalse(node0.isWith());
1331:       assertFalse(node0.isFunction());
1332:       assertFalse(node0.isInc());
1333:       assertFalse(node0.isIn());
1334:       assertFalse(node0.isIf());
1335:       assertFalse(node0.isDelProp());
1336:       assertFalse(node0.isNE());
1337:       assertFalse(node0.isFor());
1338:       assertFalse(node0.isArrayLit());
1339:       assertFalse(node0.isTry());
1340:       assertEquals((-1), node0.getCharno());
1341:       assertFalse(node0.isDebugger());
1342:       assertFalse(node0.isHook());
1343:       assertFalse(node0.isSwitch());
1344:       assertFalse(node0.isCase());
1345:       assertFalse(node0.isGetterDef());
1346:       assertFalse(node0.isString());
1347:       assertFalse(node0.isGetProp());
1348:       assertFalse(node0.isComma());
1349:       assertFalse(node0.isNull());
1350:       assertFalse(node0.isParamList());
1351:       assertFalse(node0.isCall());
1352:       assertFalse(node0.isName());
1353:       assertFalse(node0.isBreak());
1354:       assertEquals(0, node0.getChildCount());
1355:       assertFalse(node0.isVoid());
1356:       assertFalse(node0.isAdd());
1357:       assertFalse(node0.isTrue());
1358:       assertFalse(node0.isExprResult());
1359:       assertFalse(node0.isNew());
1360:       assertFalse(node0.isDefaultCase());
1361:       assertFalse(node0.isVar());
1362:       assertFalse(node0.isDo());
1363:       assertFalse(node0.isEmpty());
1364:       assertFalse(node1.isCase());
1365:       assertFalse(node1.isString());
1366:       assertFalse(node1.isSwitch());
1367:       assertFalse(node1.isHook());
1368:       assertFalse(node1.isFalse());
1369:       assertFalse(node1.isFor());
1370:       assertFalse(node1.isArrayLit());
1371:       assertFalse(node1.isTry());
1372:       assertEquals((-1), node1.getCharno());
1373:       assertFalse(node1.isGetProp());
1374:       assertFalse(node1.isDebugger());
1375:       assertFalse(node1.isGetterDef());
1376:       assertFalse(node1.isObjectLit());
1377:       assertFalse(node1.isWith());
1378:       assertFalse(node1.isNot());
1379:       assertFalse(node1.isScript());
1380:       assertFalse(node1.isAnd());
1381:       assertFalse(node1.isInstanceOf());
1382:       assertFalse(node1.isThis());
1383:       assertFalse(node1.isCatch());
1384:       assertFalse(node1.isCast());
1385:       assertEquals(2468, node1.getType());
1386:       assertFalse(node1.isFunction());
1387:       assertFalse(node1.isRegExp());
1388:       assertFalse(node1.isThrow());
1389:       assertFalse(node1.isSetterDef());
1390:       assertFalse(node1.isNE());
1391:       assertFalse(node1.isIf());
1392:       assertFalse(node1.isInc());
1393:       assertFalse(node1.isIn());
1394:       assertFalse(node1.isDo());
1395:       assertFalse(node1.isWhile());
1396:       assertFalse(node1.isAssignAdd());
1397:       assertFalse(node1.isLabel());
1398:       assertEquals((-1), node1.getLineno());
1399:       assertFalse(node1.isBlock());
1400:       assertFalse(node1.isReturn());
1401:       assertFalse(node1.hasMoreThanOneChild());
1402:       assertFalse(node1.isContinue());
1403:       assertFalse(node1.isDec());
1404:       assertFalse(node1.isTypeOf());
1405:       assertFalse(node1.isLabelName());
1406:       assertFalse(node1.isAssign());
1407:       assertFalse(node1.isStringKey());
1408:       assertFalse(node1.hasChildren());
1409:       assertFalse(node1.hasOneChild());
1410:       assertFalse(node1.isParamList());
1411:       assertEquals((-1), node1.getSourcePosition());
1412:       assertFalse(node1.isNumber());
1413:       assertFalse(node1.isDefaultCase());
1414:       assertFalse(node1.isVoid());
1415:       assertFalse(node1.isExprResult());
1416:       assertFalse(node1.isComma());
1417:       assertEquals(0, node1.getChildCount());
1418:       assertFalse(node1.isEmpty());
1419:       assertFalse(node1.isBreak());
1420:       assertFalse(node1.isCall());
1421:       assertFalse(node1.isNull());
1422:       assertFalse(node1.isGetElem());
1423:       assertFalse(node1.isVar());
1424:       assertFalse(node1.isDelProp());
1425:       assertFalse(node1.isName());
1426:       assertFalse(node1.isOr());
1427:       assertFalse(node1.isNew());
1428:       assertFalse(node1.isAdd());
1429:       assertFalse(node1.isTrue());
1430:       assertNotSame(node0, node1);
1431:       assertNotSame(node1, node0);
1432:       assertNotNull(node1);
1433:       assertEquals(4095, Node.COLUMN_MASK);
1434:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1435:       assertEquals(55, Node.INFERRED_FUNCTION);
1436:       assertEquals(43, Node.IS_CONSTANT_NAME);
1437:       assertEquals(36, Node.QUOTED_PROP);
1438:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1439:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1440:       assertEquals(48, Node.DIRECTIVES);
1441:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1442:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1443:       assertEquals(50, Node.FREE_CALL);
1444:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1445:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1446:       assertEquals(32, Node.INCRDECR_PROP);
1447:       assertEquals(1, Node.DECR_FLAG);
1448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1449:       assertEquals(12, Node.COLUMN_BITS);
1450:       assertEquals(46, Node.IS_NAMESPACE);
1451:       assertEquals(2, Node.POST_FLAG);
1452:       assertEquals(30, Node.VAR_ARGS_NAME);
1453:       assertEquals(54, Node.SLASH_V);
1454:       assertEquals(56, Node.CHANGE_TIME);
1455:       assertEquals(49, Node.DIRECT_EVAL);
1456:       assertEquals(37, Node.OPT_ARG_NAME);
1457:       assertEquals(57, Node.REFLECTED_OBJECT);
1458:       assertEquals(40, Node.ORIGINALNAME_PROP);
1459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1460:       assertEquals(52, Node.LENGTH);
1461:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1462:       assertEquals(8, Node.FLAG_NO_THROWS);
1463:       assertEquals(39, Node.EMPTY_BLOCK);
1464:       assertEquals(57, Node.LAST_PROP);
1465:       assertEquals(47, Node.IS_DISPATCHER);
1466:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1467:       assertEquals(29, Node.JSDOC_INFO_PROP);
1468:       assertEquals(53, Node.INPUT_ID);
1469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1470:       assertEquals(43, Node.IS_CONSTANT_NAME);
1471:       assertEquals(36, Node.QUOTED_PROP);
1472:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1473:       assertEquals(4095, Node.COLUMN_MASK);
1474:       assertEquals(46, Node.IS_NAMESPACE);
1475:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1476:       assertEquals(12, Node.COLUMN_BITS);
1477:       assertEquals(1, Node.DECR_FLAG);
1478:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1479:       assertEquals(50, Node.FREE_CALL);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1482:       assertEquals(54, Node.SLASH_V);
1483:       assertEquals(52, Node.LENGTH);
1484:       assertEquals(57, Node.LAST_PROP);
1485:       assertEquals(30, Node.VAR_ARGS_NAME);
1486:       assertEquals(57, Node.REFLECTED_OBJECT);
1487:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1488:       assertEquals(40, Node.ORIGINALNAME_PROP);
1489:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1490:       assertEquals(49, Node.DIRECT_EVAL);
1491:       assertEquals(37, Node.OPT_ARG_NAME);
1492:       assertEquals(2, Node.POST_FLAG);
1493:       assertEquals(48, Node.DIRECTIVES);
1494:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1495:       assertEquals(8, Node.FLAG_NO_THROWS);
1496:       assertEquals(56, Node.CHANGE_TIME);
1497:       assertEquals(47, Node.IS_DISPATCHER);
1498:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1499:       assertEquals(55, Node.INFERRED_FUNCTION);
1500:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1501:       assertEquals(29, Node.JSDOC_INFO_PROP);
1502:       assertEquals(53, Node.INPUT_ID);
1503:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1504:       assertEquals(39, Node.EMPTY_BLOCK);
1505:       
1506:       boolean boolean9 = node0.isDo();
1507:       assertFalse(node0.isOr());
1508:       assertFalse(node0.isLabel());
1509:       assertEquals((-1), node0.getLineno());
1510:       assertEquals((-1), node0.getSourcePosition());
1511:       assertFalse(node0.hasChildren());
1512:       assertFalse(node0.isReturn());
1513:       assertFalse(node0.isAssignAdd());
1514:       assertFalse(node0.isGetElem());
1515:       assertFalse(node0.isLabelName());
1516:       assertFalse(node0.isAssign());
1517:       assertFalse(node0.isDec());
1518:       assertFalse(node0.isTypeOf());
1519:       assertFalse(node0.hasMoreThanOneChild());
1520:       assertFalse(node0.isCast());
1521:       assertFalse(node0.isContinue());
1522:       assertFalse(node0.isBlock());
1523:       assertFalse(node0.isWhile());
1524:       assertFalse(node0.isStringKey());
1525:       assertFalse(node0.isObjectLit());
1526:       assertFalse(node0.isNot());
1527:       assertFalse(node0.hasOneChild());
1528:       assertFalse(node0.isNumber());
1529:       assertFalse(node0.isScript());
1530:       assertFalse(node0.isThis());
1531:       assertFalse(node0.isSetterDef());
1532:       assertFalse(node0.isAnd());
1533:       assertFalse(node0.isThrow());
1534:       assertFalse(node0.isFalse());
1535:       assertEquals(2468, node0.getType());
1536:       assertFalse(node0.isInstanceOf());
1537:       assertFalse(node0.isRegExp());
1538:       assertFalse(node0.isCatch());
1539:       assertFalse(node0.isWith());
1540:       assertFalse(node0.isFunction());
1541:       assertFalse(node0.isInc());
1542:       assertFalse(node0.isIn());
1543:       assertFalse(node0.isIf());
1544:       assertFalse(node0.isDelProp());
1545:       assertFalse(node0.isNE());
1546:       assertFalse(node0.isFor());
1547:       assertFalse(node0.isArrayLit());
1548:       assertFalse(node0.isTry());
1549:       assertEquals((-1), node0.getCharno());
1550:       assertFalse(node0.isDebugger());
1551:       assertFalse(node0.isHook());
1552:       assertFalse(node0.isSwitch());
1553:       assertFalse(node0.isCase());
1554:       assertFalse(node0.isGetterDef());
1555:       assertFalse(node0.isString());
1556:       assertFalse(node0.isGetProp());
1557:       assertFalse(node0.isComma());
1558:       assertFalse(node0.isNull());
1559:       assertFalse(node0.isParamList());
1560:       assertFalse(node0.isCall());
1561:       assertFalse(node0.isName());
1562:       assertFalse(node0.isBreak());
1563:       assertEquals(0, node0.getChildCount());
1564:       assertFalse(node0.isVoid());
1565:       assertFalse(node0.isAdd());
1566:       assertFalse(node0.isTrue());
1567:       assertFalse(node0.isExprResult());
1568:       assertFalse(node0.isNew());
1569:       assertFalse(node0.isDefaultCase());
1570:       assertFalse(node0.isVar());
1571:       assertFalse(node0.isDo());
1572:       assertFalse(node0.isEmpty());
1573:       assertNotSame(node0, node1);
1574:       assertFalse(boolean9);
1575:       assertEquals(4095, Node.COLUMN_MASK);
1576:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1577:       assertEquals(55, Node.INFERRED_FUNCTION);
1578:       assertEquals(43, Node.IS_CONSTANT_NAME);
1579:       assertEquals(36, Node.QUOTED_PROP);
1580:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1582:       assertEquals(48, Node.DIRECTIVES);
1583:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1584:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1585:       assertEquals(50, Node.FREE_CALL);
1586:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1588:       assertEquals(32, Node.INCRDECR_PROP);
1589:       assertEquals(1, Node.DECR_FLAG);
1590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1591:       assertEquals(12, Node.COLUMN_BITS);
1592:       assertEquals(46, Node.IS_NAMESPACE);
1593:       assertEquals(2, Node.POST_FLAG);
1594:       assertEquals(30, Node.VAR_ARGS_NAME);
1595:       assertEquals(54, Node.SLASH_V);
1596:       assertEquals(56, Node.CHANGE_TIME);
1597:       assertEquals(49, Node.DIRECT_EVAL);
1598:       assertEquals(37, Node.OPT_ARG_NAME);
1599:       assertEquals(57, Node.REFLECTED_OBJECT);
1600:       assertEquals(40, Node.ORIGINALNAME_PROP);
1601:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1602:       assertEquals(52, Node.LENGTH);
1603:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1604:       assertEquals(8, Node.FLAG_NO_THROWS);
1605:       assertEquals(39, Node.EMPTY_BLOCK);
1606:       assertEquals(57, Node.LAST_PROP);
1607:       assertEquals(47, Node.IS_DISPATCHER);
1608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1609:       assertEquals(29, Node.JSDOC_INFO_PROP);
1610:       assertEquals(53, Node.INPUT_ID);
1611:       
1612:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
1613:       assertFalse(node0.isOr());
1614:       assertFalse(node0.isLabel());
1615:       assertEquals((-1), node0.getLineno());
1616:       assertEquals((-1), node0.getSourcePosition());
1617:       assertFalse(node0.hasChildren());
1618:       assertFalse(node0.isReturn());
1619:       assertFalse(node0.isAssignAdd());
1620:       assertFalse(node0.isGetElem());
1621:       assertFalse(node0.isLabelName());
1622:       assertFalse(node0.isAssign());
1623:       assertFalse(node0.isDec());
1624:       assertFalse(node0.isTypeOf());
1625:       assertFalse(node0.hasMoreThanOneChild());
1626:       assertFalse(node0.isCast());
1627:       assertFalse(node0.isContinue());
1628:       assertFalse(node0.isBlock());
1629:       assertFalse(node0.isWhile());
1630:       assertFalse(node0.isStringKey());
1631:       assertFalse(node0.isObjectLit());
1632:       assertFalse(node0.isNot());
1633:       assertFalse(node0.hasOneChild());
1634:       assertFalse(node0.isNumber());
1635:       assertFalse(node0.isScript());
1636:       assertFalse(node0.isThis());
1637:       assertFalse(node0.isSetterDef());
1638:       assertFalse(node0.isAnd());
1639:       assertFalse(node0.isThrow());
1640:       assertFalse(node0.isFalse());
1641:       assertEquals(2468, node0.getType());
1642:       assertFalse(node0.isInstanceOf());
1643:       assertFalse(node0.isRegExp());
1644:       assertFalse(node0.isCatch());
1645:       assertFalse(node0.isWith());
1646:       assertFalse(node0.isFunction());
1647:       assertFalse(node0.isInc());
1648:       assertFalse(node0.isIn());
1649:       assertFalse(node0.isIf());
1650:       assertFalse(node0.isDelProp());
1651:       assertFalse(node0.isNE());
1652:       assertFalse(node0.isFor());
1653:       assertFalse(node0.isArrayLit());
1654:       assertFalse(node0.isTry());
1655:       assertEquals((-1), node0.getCharno());
1656:       assertFalse(node0.isDebugger());
1657:       assertFalse(node0.isHook());
1658:       assertFalse(node0.isSwitch());
1659:       assertFalse(node0.isCase());
1660:       assertFalse(node0.isGetterDef());
1661:       assertFalse(node0.isString());
1662:       assertFalse(node0.isGetProp());
1663:       assertFalse(node0.isComma());
1664:       assertFalse(node0.isNull());
1665:       assertFalse(node0.isParamList());
1666:       assertFalse(node0.isCall());
1667:       assertFalse(node0.isName());
1668:       assertFalse(node0.isBreak());
1669:       assertEquals(0, node0.getChildCount());
1670:       assertFalse(node0.isVoid());
1671:       assertFalse(node0.isAdd());
1672:       assertFalse(node0.isTrue());
1673:       assertFalse(node0.isExprResult());
1674:       assertFalse(node0.isNew());
1675:       assertFalse(node0.isDefaultCase());
1676:       assertFalse(node0.isVar());
1677:       assertFalse(node0.isDo());
1678:       assertFalse(node0.isEmpty());
1679:       assertFalse(node1.isCase());
1680:       assertFalse(node1.isString());
1681:       assertFalse(node1.isSwitch());
1682:       assertFalse(node1.isHook());
1683:       assertFalse(node1.isFalse());
1684:       assertFalse(node1.isFor());
1685:       assertFalse(node1.isArrayLit());
1686:       assertFalse(node1.isTry());
1687:       assertEquals((-1), node1.getCharno());
1688:       assertFalse(node1.isGetProp());
1689:       assertFalse(node1.isDebugger());
1690:       assertFalse(node1.isGetterDef());
1691:       assertFalse(node1.isObjectLit());
1692:       assertFalse(node1.isWith());
1693:       assertFalse(node1.isNot());
1694:       assertFalse(node1.isScript());
1695:       assertFalse(node1.isAnd());
1696:       assertFalse(node1.isInstanceOf());
1697:       assertFalse(node1.isThis());
1698:       assertFalse(node1.isCatch());
1699:       assertFalse(node1.isCast());
1700:       assertEquals(2468, node1.getType());
1701:       assertFalse(node1.isFunction());
1702:       assertFalse(node1.isRegExp());
1703:       assertFalse(node1.isThrow());
1704:       assertFalse(node1.isSetterDef());
1705:       assertFalse(node1.isNE());
1706:       assertFalse(node1.isIf());
1707:       assertFalse(node1.isInc());
1708:       assertFalse(node1.isIn());
1709:       assertFalse(node1.isDo());
1710:       assertFalse(node1.isWhile());
1711:       assertFalse(node1.isAssignAdd());
1712:       assertFalse(node1.isLabel());
1713:       assertEquals((-1), node1.getLineno());
1714:       assertFalse(node1.isBlock());
1715:       assertFalse(node1.isReturn());
1716:       assertFalse(node1.hasMoreThanOneChild());
1717:       assertFalse(node1.isContinue());
1718:       assertFalse(node1.isDec());
1719:       assertFalse(node1.isTypeOf());
1720:       assertFalse(node1.isLabelName());
1721:       assertFalse(node1.isAssign());
1722:       assertFalse(node1.isStringKey());
1723:       assertFalse(node1.hasChildren());
1724:       assertFalse(node1.hasOneChild());
1725:       assertFalse(node1.isParamList());
1726:       assertEquals((-1), node1.getSourcePosition());
1727:       assertFalse(node1.isNumber());
1728:       assertFalse(node1.isDefaultCase());
1729:       assertFalse(node1.isVoid());
1730:       assertFalse(node1.isExprResult());
1731:       assertFalse(node1.isComma());
1732:       assertEquals(0, node1.getChildCount());
1733:       assertFalse(node1.isEmpty());
1734:       assertFalse(node1.isBreak());
1735:       assertFalse(node1.isCall());
1736:       assertFalse(node1.isNull());
1737:       assertFalse(node1.isGetElem());
1738:       assertFalse(node1.isVar());
1739:       assertFalse(node1.isDelProp());
1740:       assertFalse(node1.isName());
1741:       assertFalse(node1.isOr());
1742:       assertFalse(node1.isNew());
1743:       assertFalse(node1.isAdd());
1744:       assertFalse(node1.isTrue());
1745:       assertNotSame(node0, node1);
1746:       assertNotSame(node1, node0);
1747:       assertNull(node_NodeMismatch0);
1748:       assertEquals(4095, Node.COLUMN_MASK);
1749:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1750:       assertEquals(55, Node.INFERRED_FUNCTION);
1751:       assertEquals(43, Node.IS_CONSTANT_NAME);
1752:       assertEquals(36, Node.QUOTED_PROP);
1753:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1754:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1755:       assertEquals(48, Node.DIRECTIVES);
1756:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1757:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1758:       assertEquals(50, Node.FREE_CALL);
1759:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1760:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1761:       assertEquals(32, Node.INCRDECR_PROP);
1762:       assertEquals(1, Node.DECR_FLAG);
1763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1764:       assertEquals(12, Node.COLUMN_BITS);
1765:       assertEquals(46, Node.IS_NAMESPACE);
1766:       assertEquals(2, Node.POST_FLAG);
1767:       assertEquals(30, Node.VAR_ARGS_NAME);
1768:       assertEquals(54, Node.SLASH_V);
1769:       assertEquals(56, Node.CHANGE_TIME);
1770:       assertEquals(49, Node.DIRECT_EVAL);
1771:       assertEquals(37, Node.OPT_ARG_NAME);
1772:       assertEquals(57, Node.REFLECTED_OBJECT);
1773:       assertEquals(40, Node.ORIGINALNAME_PROP);
1774:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1775:       assertEquals(52, Node.LENGTH);
1776:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1777:       assertEquals(8, Node.FLAG_NO_THROWS);
1778:       assertEquals(39, Node.EMPTY_BLOCK);
1779:       assertEquals(57, Node.LAST_PROP);
1780:       assertEquals(47, Node.IS_DISPATCHER);
1781:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1782:       assertEquals(29, Node.JSDOC_INFO_PROP);
1783:       assertEquals(53, Node.INPUT_ID);
1784:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1785:       assertEquals(43, Node.IS_CONSTANT_NAME);
1786:       assertEquals(36, Node.QUOTED_PROP);
1787:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1788:       assertEquals(4095, Node.COLUMN_MASK);
1789:       assertEquals(46, Node.IS_NAMESPACE);
1790:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1791:       assertEquals(12, Node.COLUMN_BITS);
1792:       assertEquals(1, Node.DECR_FLAG);
1793:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1794:       assertEquals(50, Node.FREE_CALL);
1795:       assertEquals(32, Node.INCRDECR_PROP);
1796:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1797:       assertEquals(54, Node.SLASH_V);
1798:       assertEquals(52, Node.LENGTH);
1799:       assertEquals(57, Node.LAST_PROP);
1800:       assertEquals(30, Node.VAR_ARGS_NAME);
1801:       assertEquals(57, Node.REFLECTED_OBJECT);
1802:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1803:       assertEquals(40, Node.ORIGINALNAME_PROP);
1804:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1805:       assertEquals(49, Node.DIRECT_EVAL);
1806:       assertEquals(37, Node.OPT_ARG_NAME);
1807:       assertEquals(2, Node.POST_FLAG);
1808:       assertEquals(48, Node.DIRECTIVES);
1809:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1810:       assertEquals(8, Node.FLAG_NO_THROWS);
1811:       assertEquals(56, Node.CHANGE_TIME);
1812:       assertEquals(47, Node.IS_DISPATCHER);
1813:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1814:       assertEquals(55, Node.INFERRED_FUNCTION);
1815:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1816:       assertEquals(29, Node.JSDOC_INFO_PROP);
1817:       assertEquals(53, Node.INPUT_ID);
1818:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1819:       assertEquals(39, Node.EMPTY_BLOCK);
1820:       
1821:       boolean boolean10 = node0.isQuotedString();
1822:       assertFalse(node0.isOr());
1823:       assertFalse(node0.isLabel());
1824:       assertEquals((-1), node0.getLineno());
1825:       assertEquals((-1), node0.getSourcePosition());
1826:       assertFalse(node0.hasChildren());
1827:       assertFalse(node0.isReturn());
1828:       assertFalse(node0.isAssignAdd());
1829:       assertFalse(node0.isGetElem());
1830:       assertFalse(node0.isLabelName());
1831:       assertFalse(node0.isAssign());
1832:       assertFalse(node0.isDec());
1833:       assertFalse(node0.isTypeOf());
1834:       assertFalse(node0.hasMoreThanOneChild());
1835:       assertFalse(node0.isCast());
1836:       assertFalse(node0.isContinue());
1837:       assertFalse(node0.isBlock());
1838:       assertFalse(node0.isWhile());
1839:       assertFalse(node0.isStringKey());
1840:       assertFalse(node0.isObjectLit());
1841:       assertFalse(node0.isNot());
1842:       assertFalse(node0.hasOneChild());
1843:       assertFalse(node0.isNumber());
1844:       assertFalse(node0.isScript());
1845:       assertFalse(node0.isThis());
1846:       assertFalse(node0.isSetterDef());
1847:       assertFalse(node0.isAnd());
1848:       assertFalse(node0.isThrow());
1849:       assertFalse(node0.isFalse());
1850:       assertEquals(2468, node0.getType());
1851:       assertFalse(node0.isInstanceOf());
1852:       assertFalse(node0.isRegExp());
1853:       assertFalse(node0.isCatch());
1854:       assertFalse(node0.isWith());
1855:       assertFalse(node0.isFunction());
1856:       assertFalse(node0.isInc());
1857:       assertFalse(node0.isIn());
1858:       assertFalse(node0.isIf());
1859:       assertFalse(node0.isDelProp());
1860:       assertFalse(node0.isNE());
1861:       assertFalse(node0.isFor());
1862:       assertFalse(node0.isArrayLit());
1863:       assertFalse(node0.isTry());
1864:       assertEquals((-1), node0.getCharno());
1865:       assertFalse(node0.isDebugger());
1866:       assertFalse(node0.isHook());
1867:       assertFalse(node0.isSwitch());
1868:       assertFalse(node0.isCase());
1869:       assertFalse(node0.isGetterDef());
1870:       assertFalse(node0.isString());
1871:       assertFalse(node0.isGetProp());
1872:       assertFalse(node0.isComma());
1873:       assertFalse(node0.isNull());
1874:       assertFalse(node0.isParamList());
1875:       assertFalse(node0.isCall());
1876:       assertFalse(node0.isName());
1877:       assertFalse(node0.isBreak());
1878:       assertEquals(0, node0.getChildCount());
1879:       assertFalse(node0.isVoid());
1880:       assertFalse(node0.isAdd());
1881:       assertFalse(node0.isTrue());
1882:       assertFalse(node0.isExprResult());
1883:       assertFalse(node0.isNew());
1884:       assertFalse(node0.isDefaultCase());
1885:       assertFalse(node0.isVar());
1886:       assertFalse(node0.isDo());
1887:       assertFalse(node0.isEmpty());
1888:       assertNotSame(node0, node1);
1889:       assertFalse(boolean10);
1890:       assertEquals(4095, Node.COLUMN_MASK);
1891:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1892:       assertEquals(55, Node.INFERRED_FUNCTION);
1893:       assertEquals(43, Node.IS_CONSTANT_NAME);
1894:       assertEquals(36, Node.QUOTED_PROP);
1895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1896:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1897:       assertEquals(48, Node.DIRECTIVES);
1898:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1900:       assertEquals(50, Node.FREE_CALL);
1901:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1902:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1903:       assertEquals(32, Node.INCRDECR_PROP);
1904:       assertEquals(1, Node.DECR_FLAG);
1905:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1906:       assertEquals(12, Node.COLUMN_BITS);
1907:       assertEquals(46, Node.IS_NAMESPACE);
1908:       assertEquals(2, Node.POST_FLAG);
1909:       assertEquals(30, Node.VAR_ARGS_NAME);
1910:       assertEquals(54, Node.SLASH_V);
1911:       assertEquals(56, Node.CHANGE_TIME);
1912:       assertEquals(49, Node.DIRECT_EVAL);
1913:       assertEquals(37, Node.OPT_ARG_NAME);
1914:       assertEquals(57, Node.REFLECTED_OBJECT);
1915:       assertEquals(40, Node.ORIGINALNAME_PROP);
1916:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1917:       assertEquals(52, Node.LENGTH);
1918:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1919:       assertEquals(8, Node.FLAG_NO_THROWS);
1920:       assertEquals(39, Node.EMPTY_BLOCK);
1921:       assertEquals(57, Node.LAST_PROP);
1922:       assertEquals(47, Node.IS_DISPATCHER);
1923:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1924:       assertEquals(29, Node.JSDOC_INFO_PROP);
1925:       assertEquals(53, Node.INPUT_ID);
1926:       
1927:       boolean boolean11 = node1.isNot();
1928:       assertFalse(node0.isOr());
1929:       assertFalse(node0.isLabel());
1930:       assertEquals((-1), node0.getLineno());
1931:       assertEquals((-1), node0.getSourcePosition());
1932:       assertFalse(node0.hasChildren());
1933:       assertFalse(node0.isReturn());
1934:       assertFalse(node0.isAssignAdd());
1935:       assertFalse(node0.isGetElem());
1936:       assertFalse(node0.isLabelName());
1937:       assertFalse(node0.isAssign());
1938:       assertFalse(node0.isDec());
1939:       assertFalse(node0.isTypeOf());
1940:       assertFalse(node0.hasMoreThanOneChild());
1941:       assertFalse(node0.isCast());
1942:       assertFalse(node0.isContinue());
1943:       assertFalse(node0.isBlock());
1944:       assertFalse(node0.isWhile());
1945:       assertFalse(node0.isStringKey());
1946:       assertFalse(node0.isObjectLit());
1947:       assertFalse(node0.isNot());
1948:       assertFalse(node0.hasOneChild());
1949:       assertFalse(node0.isNumber());
1950:       assertFalse(node0.isScript());
1951:       assertFalse(node0.isThis());
1952:       assertFalse(node0.isSetterDef());
1953:       assertFalse(node0.isAnd());
1954:       assertFalse(node0.isThrow());
1955:       assertFalse(node0.isFalse());
1956:       assertEquals(2468, node0.getType());
1957:       assertFalse(node0.isInstanceOf());
1958:       assertFalse(node0.isRegExp());
1959:       assertFalse(node0.isCatch());
1960:       assertFalse(node0.isWith());
1961:       assertFalse(node0.isFunction());
1962:       assertFalse(node0.isInc());
1963:       assertFalse(node0.isIn());
1964:       assertFalse(node0.isIf());
1965:       assertFalse(node0.isDelProp());
1966:       assertFalse(node0.isNE());
1967:       assertFalse(node0.isFor());
1968:       assertFalse(node0.isArrayLit());
1969:       assertFalse(node0.isTry());
1970:       assertEquals((-1), node0.getCharno());
1971:       assertFalse(node0.isDebugger());
1972:       assertFalse(node0.isHook());
1973:       assertFalse(node0.isSwitch());
1974:       assertFalse(node0.isCase());
1975:       assertFalse(node0.isGetterDef());
1976:       assertFalse(node0.isString());
1977:       assertFalse(node0.isGetProp());
1978:       assertFalse(node0.isComma());
1979:       assertFalse(node0.isNull());
1980:       assertFalse(node0.isParamList());
1981:       assertFalse(node0.isCall());
1982:       assertFalse(node0.isName());
1983:       assertFalse(node0.isBreak());
1984:       assertEquals(0, node0.getChildCount());
1985:       assertFalse(node0.isVoid());
1986:       assertFalse(node0.isAdd());
1987:       assertFalse(node0.isTrue());
1988:       assertFalse(node0.isExprResult());
1989:       assertFalse(node0.isNew());
1990:       assertFalse(node0.isDefaultCase());
1991:       assertFalse(node0.isVar());
1992:       assertFalse(node0.isDo());
1993:       assertFalse(node0.isEmpty());
1994:       assertFalse(node1.isCase());
1995:       assertFalse(node1.isString());
1996:       assertFalse(node1.isSwitch());
1997:       assertFalse(node1.isHook());
1998:       assertFalse(node1.isFalse());
1999:       assertFalse(node1.isFor());
2000:       assertFalse(node1.isArrayLit());
2001:       assertFalse(node1.isTry());
2002:       assertEquals((-1), node1.getCharno());
2003:       assertFalse(node1.isGetProp());
2004:       assertFalse(node1.isDebugger());
2005:       assertFalse(node1.isGetterDef());
2006:       assertFalse(node1.isObjectLit());
2007:       assertFalse(node1.isWith());
2008:       assertFalse(node1.isNot());
2009:       assertFalse(node1.isScript());
2010:       assertFalse(node1.isAnd());
2011:       assertFalse(node1.isInstanceOf());
2012:       assertFalse(node1.isThis());
2013:       assertFalse(node1.isCatch());
2014:       assertFalse(node1.isCast());
2015:       assertEquals(2468, node1.getType());
2016:       assertFalse(node1.isFunction());
2017:       assertFalse(node1.isRegExp());
2018:       assertFalse(node1.isThrow());
2019:       assertFalse(node1.isSetterDef());
2020:       assertFalse(node1.isNE());
2021:       assertFalse(node1.isIf());
2022:       assertFalse(node1.isInc());
2023:       assertFalse(node1.isIn());
2024:       assertFalse(node1.isDo());
2025:       assertFalse(node1.isWhile());
2026:       assertFalse(node1.isAssignAdd());
2027:       assertFalse(node1.isLabel());
2028:       assertEquals((-1), node1.getLineno());
2029:       assertFalse(node1.isBlock());
2030:       assertFalse(node1.isReturn());
2031:       assertFalse(node1.hasMoreThanOneChild());
2032:       assertFalse(node1.isContinue());
2033:       assertFalse(node1.isDec());
2034:       assertFalse(node1.isTypeOf());
2035:       assertFalse(node1.isLabelName());
2036:       assertFalse(node1.isAssign());
2037:       assertFalse(node1.isStringKey());
2038:       assertFalse(node1.hasChildren());
2039:       assertFalse(node1.hasOneChild());
2040:       assertFalse(node1.isParamList());
2041:       assertEquals((-1), node1.getSourcePosition());
2042:       assertFalse(node1.isNumber());
2043:       assertFalse(node1.isDefaultCase());
2044:       assertFalse(node1.isVoid());
2045:       assertFalse(node1.isExprResult());
2046:       assertFalse(node1.isComma());
2047:       assertEquals(0, node1.getChildCount());
2048:       assertFalse(node1.isEmpty());
2049:       assertFalse(node1.isBreak());
2050:       assertFalse(node1.isCall());
2051:       assertFalse(node1.isNull());
2052:       assertFalse(node1.isGetElem());
2053:       assertFalse(node1.isVar());
2054:       assertFalse(node1.isDelProp());
2055:       assertFalse(node1.isName());
2056:       assertFalse(node1.isOr());
2057:       assertFalse(node1.isNew());
2058:       assertFalse(node1.isAdd());
2059:       assertFalse(node1.isTrue());
2060:       assertNotSame(node0, node1);
2061:       assertNotSame(node1, node0);
2062:       assertFalse(boolean11);
2063:       assertEquals(4095, Node.COLUMN_MASK);
2064:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2065:       assertEquals(55, Node.INFERRED_FUNCTION);
2066:       assertEquals(43, Node.IS_CONSTANT_NAME);
2067:       assertEquals(36, Node.QUOTED_PROP);
2068:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2069:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2070:       assertEquals(48, Node.DIRECTIVES);
2071:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2073:       assertEquals(50, Node.FREE_CALL);
2074:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2075:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2076:       assertEquals(32, Node.INCRDECR_PROP);
2077:       assertEquals(1, Node.DECR_FLAG);
2078:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2079:       assertEquals(12, Node.COLUMN_BITS);
2080:       assertEquals(46, Node.IS_NAMESPACE);
2081:       assertEquals(2, Node.POST_FLAG);
2082:       assertEquals(30, Node.VAR_ARGS_NAME);
2083:       assertEquals(54, Node.SLASH_V);
2084:       assertEquals(56, Node.CHANGE_TIME);
2085:       assertEquals(49, Node.DIRECT_EVAL);
2086:       assertEquals(37, Node.OPT_ARG_NAME);
2087:       assertEquals(57, Node.REFLECTED_OBJECT);
2088:       assertEquals(40, Node.ORIGINALNAME_PROP);
2089:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2090:       assertEquals(52, Node.LENGTH);
2091:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2092:       assertEquals(8, Node.FLAG_NO_THROWS);
2093:       assertEquals(39, Node.EMPTY_BLOCK);
2094:       assertEquals(57, Node.LAST_PROP);
2095:       assertEquals(47, Node.IS_DISPATCHER);
2096:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2097:       assertEquals(29, Node.JSDOC_INFO_PROP);
2098:       assertEquals(53, Node.INPUT_ID);
2099:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2100:       assertEquals(43, Node.IS_CONSTANT_NAME);
2101:       assertEquals(36, Node.QUOTED_PROP);
2102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2103:       assertEquals(4095, Node.COLUMN_MASK);
2104:       assertEquals(46, Node.IS_NAMESPACE);
2105:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2106:       assertEquals(12, Node.COLUMN_BITS);
2107:       assertEquals(1, Node.DECR_FLAG);
2108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2109:       assertEquals(50, Node.FREE_CALL);
2110:       assertEquals(32, Node.INCRDECR_PROP);
2111:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2112:       assertEquals(54, Node.SLASH_V);
2113:       assertEquals(52, Node.LENGTH);
2114:       assertEquals(57, Node.LAST_PROP);
2115:       assertEquals(30, Node.VAR_ARGS_NAME);
2116:       assertEquals(57, Node.REFLECTED_OBJECT);
2117:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2118:       assertEquals(40, Node.ORIGINALNAME_PROP);
2119:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2120:       assertEquals(49, Node.DIRECT_EVAL);
2121:       assertEquals(37, Node.OPT_ARG_NAME);
2122:       assertEquals(2, Node.POST_FLAG);
2123:       assertEquals(48, Node.DIRECTIVES);
2124:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2125:       assertEquals(8, Node.FLAG_NO_THROWS);
2126:       assertEquals(56, Node.CHANGE_TIME);
2127:       assertEquals(47, Node.IS_DISPATCHER);
2128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2129:       assertEquals(55, Node.INFERRED_FUNCTION);
2130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2131:       assertEquals(29, Node.JSDOC_INFO_PROP);
2132:       assertEquals(53, Node.INPUT_ID);
2133:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2134:       assertEquals(39, Node.EMPTY_BLOCK);
2135:       
2136:       Node node2 = new Node(48, node0, 301, 64);
2137:       assertFalse(node0.isOr());
2138:       assertFalse(node0.isLabel());
2139:       assertEquals((-1), node0.getLineno());
2140:       assertEquals((-1), node0.getSourcePosition());
2141:       assertFalse(node0.hasChildren());
2142:       assertFalse(node0.isReturn());
2143:       assertFalse(node0.isAssignAdd());
2144:       assertFalse(node0.isGetElem());
2145:       assertFalse(node0.isLabelName());
2146:       assertFalse(node0.isAssign());
2147:       assertFalse(node0.isDec());
2148:       assertFalse(node0.isTypeOf());
2149:       assertFalse(node0.hasMoreThanOneChild());
2150:       assertFalse(node0.isCast());
2151:       assertFalse(node0.isContinue());
2152:       assertFalse(node0.isBlock());
2153:       assertFalse(node0.isWhile());
2154:       assertFalse(node0.isStringKey());
2155:       assertFalse(node0.isObjectLit());
2156:       assertFalse(node0.isNot());
2157:       assertFalse(node0.hasOneChild());
2158:       assertFalse(node0.isNumber());
2159:       assertFalse(node0.isScript());
2160:       assertFalse(node0.isThis());
2161:       assertFalse(node0.isSetterDef());
2162:       assertFalse(node0.isAnd());
2163:       assertFalse(node0.isThrow());
2164:       assertFalse(node0.isFalse());
2165:       assertEquals(2468, node0.getType());
2166:       assertFalse(node0.isInstanceOf());
2167:       assertFalse(node0.isRegExp());
2168:       assertFalse(node0.isCatch());
2169:       assertFalse(node0.isWith());
2170:       assertFalse(node0.isFunction());
2171:       assertFalse(node0.isInc());
2172:       assertFalse(node0.isIn());
2173:       assertFalse(node0.isIf());
2174:       assertFalse(node0.isDelProp());
2175:       assertFalse(node0.isNE());
2176:       assertFalse(node0.isFor());
2177:       assertFalse(node0.isArrayLit());
2178:       assertFalse(node0.isTry());
2179:       assertEquals((-1), node0.getCharno());
2180:       assertFalse(node0.isDebugger());
2181:       assertFalse(node0.isHook());
2182:       assertFalse(node0.isSwitch());
2183:       assertFalse(node0.isCase());
2184:       assertFalse(node0.isGetterDef());
2185:       assertFalse(node0.isString());
2186:       assertFalse(node0.isGetProp());
2187:       assertFalse(node0.isComma());
2188:       assertFalse(node0.isNull());
2189:       assertFalse(node0.isParamList());
2190:       assertFalse(node0.isCall());
2191:       assertFalse(node0.isName());
2192:       assertFalse(node0.isBreak());
2193:       assertEquals(0, node0.getChildCount());
2194:       assertFalse(node0.isVoid());
2195:       assertFalse(node0.isAdd());
2196:       assertFalse(node0.isTrue());
2197:       assertFalse(node0.isExprResult());
2198:       assertFalse(node0.isNew());
2199:       assertFalse(node0.isDefaultCase());
2200:       assertFalse(node0.isVar());
2201:       assertFalse(node0.isDo());
2202:       assertFalse(node0.isEmpty());
2203:       assertFalse(node2.isSwitch());
2204:       assertFalse(node2.isString());
2205:       assertFalse(node2.isInc());
2206:       assertFalse(node2.isCase());
2207:       assertFalse(node2.isIn());
2208:       assertFalse(node2.isIf());
2209:       assertFalse(node2.isDelProp());
2210:       assertFalse(node2.isGetterDef());
2211:       assertFalse(node2.isNE());
2212:       assertFalse(node2.isGetProp());
2213:       assertTrue(node2.hasChildren());
2214:       assertFalse(node2.isBreak());
2215:       assertFalse(node2.isInstanceOf());
2216:       assertFalse(node2.isHook());
2217:       assertFalse(node2.isFor());
2218:       assertTrue(node2.hasOneChild());
2219:       assertFalse(node2.isComma());
2220:       assertFalse(node2.isThis());
2221:       assertEquals(1, node2.getChildCount());
2222:       assertFalse(node2.isRegExp());
2223:       assertFalse(node2.isFunction());
2224:       assertFalse(node2.isWith());
2225:       assertFalse(node2.isAnd());
2226:       assertFalse(node2.isObjectLit());
2227:       assertFalse(node2.isNot());
2228:       assertFalse(node2.isDebugger());
2229:       assertEquals(48, node2.getType());
2230:       assertFalse(node2.isSetterDef());
2231:       assertEquals(301, node2.getLineno());
2232:       assertFalse(node2.isCast());
2233:       assertFalse(node2.isContinue());
2234:       assertFalse(node2.isThrow());
2235:       assertFalse(node2.isFalse());
2236:       assertFalse(node2.isWhile());
2237:       assertFalse(node2.isNew());
2238:       assertFalse(node2.isAdd());
2239:       assertFalse(node2.isDo());
2240:       assertEquals(1232960, node2.getSourcePosition());
2241:       assertFalse(node2.isStringKey());
2242:       assertFalse(node2.isOr());
2243:       assertFalse(node2.isNumber());
2244:       assertFalse(node2.isDec());
2245:       assertFalse(node2.isNull());
2246:       assertFalse(node2.isTypeOf());
2247:       assertFalse(node2.isGetElem());
2248:       assertFalse(node2.isCall());
2249:       assertFalse(node2.isName());
2250:       assertFalse(node2.isCatch());
2251:       assertFalse(node2.hasMoreThanOneChild());
2252:       assertFalse(node2.isBlock());
2253:       assertFalse(node2.isAssign());
2254:       assertFalse(node2.isReturn());
2255:       assertFalse(node2.isDefaultCase());
2256:       assertFalse(node2.isScript());
2257:       assertFalse(node2.isVoid());
2258:       assertFalse(node2.isTry());
2259:       assertFalse(node2.isExprResult());
2260:       assertFalse(node2.isTrue());
2261:       assertEquals(64, node2.getCharno());
2262:       assertFalse(node2.isParamList());
2263:       assertFalse(node2.isEmpty());
2264:       assertFalse(node2.isLabelName());
2265:       assertFalse(node2.isArrayLit());
2266:       assertFalse(node2.isVar());
2267:       assertFalse(node2.isAssignAdd());
2268:       assertFalse(node2.isLabel());
2269:       assertNotNull(node2);
2270:       assertEquals(4095, Node.COLUMN_MASK);
2271:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2272:       assertEquals(55, Node.INFERRED_FUNCTION);
2273:       assertEquals(43, Node.IS_CONSTANT_NAME);
2274:       assertEquals(36, Node.QUOTED_PROP);
2275:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2276:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2277:       assertEquals(48, Node.DIRECTIVES);
2278:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2279:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2280:       assertEquals(50, Node.FREE_CALL);
2281:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2282:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2283:       assertEquals(32, Node.INCRDECR_PROP);
2284:       assertEquals(1, Node.DECR_FLAG);
2285:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2286:       assertEquals(12, Node.COLUMN_BITS);
2287:       assertEquals(46, Node.IS_NAMESPACE);
2288:       assertEquals(2, Node.POST_FLAG);
2289:       assertEquals(30, Node.VAR_ARGS_NAME);
2290:       assertEquals(54, Node.SLASH_V);
2291:       assertEquals(56, Node.CHANGE_TIME);
2292:       assertEquals(49, Node.DIRECT_EVAL);
2293:       assertEquals(37, Node.OPT_ARG_NAME);
2294:       assertEquals(57, Node.REFLECTED_OBJECT);
2295:       assertEquals(40, Node.ORIGINALNAME_PROP);
2296:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2297:       assertEquals(52, Node.LENGTH);
2298:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2299:       assertEquals(8, Node.FLAG_NO_THROWS);
2300:       assertEquals(39, Node.EMPTY_BLOCK);
2301:       assertEquals(57, Node.LAST_PROP);
2302:       assertEquals(47, Node.IS_DISPATCHER);
2303:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2304:       assertEquals(29, Node.JSDOC_INFO_PROP);
2305:       assertEquals(53, Node.INPUT_ID);
2306:       assertEquals(53, Node.INPUT_ID);
2307:       assertEquals(36, Node.QUOTED_PROP);
2308:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2309:       assertEquals(43, Node.IS_CONSTANT_NAME);
2310:       assertEquals(29, Node.JSDOC_INFO_PROP);
2311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2312:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2313:       assertEquals(55, Node.INFERRED_FUNCTION);
2314:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2315:       assertEquals(37, Node.OPT_ARG_NAME);
2316:       assertEquals(32, Node.INCRDECR_PROP);
2317:       assertEquals(48, Node.DIRECTIVES);
2318:       assertEquals(12, Node.COLUMN_BITS);
2319:       assertEquals(56, Node.CHANGE_TIME);
2320:       assertEquals(49, Node.DIRECT_EVAL);
2321:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2322:       assertEquals(4095, Node.COLUMN_MASK);
2323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2324:       assertEquals(52, Node.LENGTH);
2325:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2326:       assertEquals(57, Node.LAST_PROP);
2327:       assertEquals(57, Node.REFLECTED_OBJECT);
2328:       assertEquals(54, Node.SLASH_V);
2329:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2330:       assertEquals(50, Node.FREE_CALL);
2331:       assertEquals(1, Node.DECR_FLAG);
2332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2333:       assertEquals(8, Node.FLAG_NO_THROWS);
2334:       assertEquals(39, Node.EMPTY_BLOCK);
2335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2336:       assertEquals(47, Node.IS_DISPATCHER);
2337:       assertEquals(46, Node.IS_NAMESPACE);
2338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2339:       assertEquals(30, Node.VAR_ARGS_NAME);
2340:       assertEquals(2, Node.POST_FLAG);
2341:       assertEquals(40, Node.ORIGINALNAME_PROP);
2342:       
2343:       boolean boolean12 = node2.isThrow();
2344:       assertFalse(node0.isOr());
2345:       assertFalse(node0.isLabel());
2346:       assertEquals((-1), node0.getLineno());
2347:       assertEquals((-1), node0.getSourcePosition());
2348:       assertFalse(node0.hasChildren());
2349:       assertFalse(node0.isReturn());
2350:       assertFalse(node0.isAssignAdd());
2351:       assertFalse(node0.isGetElem());
2352:       assertFalse(node0.isLabelName());
2353:       assertFalse(node0.isAssign());
2354:       assertFalse(node0.isDec());
2355:       assertFalse(node0.isTypeOf());
2356:       assertFalse(node0.hasMoreThanOneChild());
2357:       assertFalse(node0.isCast());
2358:       assertFalse(node0.isContinue());
2359:       assertFalse(node0.isBlock());
2360:       assertFalse(node0.isWhile());
2361:       assertFalse(node0.isStringKey());
2362:       assertFalse(node0.isObjectLit());
2363:       assertFalse(node0.isNot());
2364:       assertFalse(node0.hasOneChild());
2365:       assertFalse(node0.isNumber());
2366:       assertFalse(node0.isScript());
2367:       assertFalse(node0.isThis());
2368:       assertFalse(node0.isSetterDef());
2369:       assertFalse(node0.isAnd());
2370:       assertFalse(node0.isThrow());
2371:       assertFalse(node0.isFalse());
2372:       assertEquals(2468, node0.getType());
2373:       assertFalse(node0.isInstanceOf());
2374:       assertFalse(node0.isRegExp());
2375:       assertFalse(node0.isCatch());
2376:       assertFalse(node0.isWith());
2377:       assertFalse(node0.isFunction());
2378:       assertFalse(node0.isInc());
2379:       assertFalse(node0.isIn());
2380:       assertFalse(node0.isIf());
2381:       assertFalse(node0.isDelProp());
2382:       assertFalse(node0.isNE());
2383:       assertFalse(node0.isFor());
2384:       assertFalse(node0.isArrayLit());
2385:       assertFalse(node0.isTry());
2386:       assertEquals((-1), node0.getCharno());
2387:       assertFalse(node0.isDebugger());
2388:       assertFalse(node0.isHook());
2389:       assertFalse(node0.isSwitch());
2390:       assertFalse(node0.isCase());
2391:       assertFalse(node0.isGetterDef());
2392:       assertFalse(node0.isString());
2393:       assertFalse(node0.isGetProp());
2394:       assertFalse(node0.isComma());
2395:       assertFalse(node0.isNull());
2396:       assertFalse(node0.isParamList());
2397:       assertFalse(node0.isCall());
2398:       assertFalse(node0.isName());
2399:       assertFalse(node0.isBreak());
2400:       assertEquals(0, node0.getChildCount());
2401:       assertFalse(node0.isVoid());
2402:       assertFalse(node0.isAdd());
2403:       assertFalse(node0.isTrue());
2404:       assertFalse(node0.isExprResult());
2405:       assertFalse(node0.isNew());
2406:       assertFalse(node0.isDefaultCase());
2407:       assertFalse(node0.isVar());
2408:       assertFalse(node0.isDo());
2409:       assertFalse(node0.isEmpty());
2410:       assertFalse(node2.isSwitch());
2411:       assertFalse(node2.isString());
2412:       assertFalse(node2.isInc());
2413:       assertFalse(node2.isCase());
2414:       assertFalse(node2.isIn());
2415:       assertFalse(node2.isIf());
2416:       assertFalse(node2.isDelProp());
2417:       assertFalse(node2.isGetterDef());
2418:       assertFalse(node2.isNE());
2419:       assertFalse(node2.isGetProp());
2420:       assertTrue(node2.hasChildren());
2421:       assertFalse(node2.isBreak());
2422:       assertFalse(node2.isInstanceOf());
2423:       assertFalse(node2.isHook());
2424:       assertFalse(node2.isFor());
2425:       assertTrue(node2.hasOneChild());
2426:       assertFalse(node2.isComma());
2427:       assertFalse(node2.isThis());
2428:       assertEquals(1, node2.getChildCount());
2429:       assertFalse(node2.isRegExp());
2430:       assertFalse(node2.isFunction());
2431:       assertFalse(node2.isWith());
2432:       assertFalse(node2.isAnd());
2433:       assertFalse(node2.isObjectLit());
2434:       assertFalse(node2.isNot());
2435:       assertFalse(node2.isDebugger());
2436:       assertEquals(48, node2.getType());
2437:       assertFalse(node2.isSetterDef());
2438:       assertEquals(301, node2.getLineno());
2439:       assertFalse(node2.isCast());
2440:       assertFalse(node2.isContinue());
2441:       assertFalse(node2.isThrow());
2442:       assertFalse(node2.isFalse());
2443:       assertFalse(node2.isWhile());
2444:       assertFalse(node2.isNew());
2445:       assertFalse(node2.isAdd());
2446:       assertFalse(node2.isDo());
2447:       assertEquals(1232960, node2.getSourcePosition());
2448:       assertFalse(node2.isStringKey());
2449:       assertFalse(node2.isOr());
2450:       assertFalse(node2.isNumber());
2451:       assertFalse(node2.isDec());
2452:       assertFalse(node2.isNull());
2453:       assertFalse(node2.isTypeOf());
2454:       assertFalse(node2.isGetElem());
2455:       assertFalse(node2.isCall());
2456:       assertFalse(node2.isName());
2457:       assertFalse(node2.isCatch());
2458:       assertFalse(node2.hasMoreThanOneChild());
2459:       assertFalse(node2.isBlock());
2460:       assertFalse(node2.isAssign());
2461:       assertFalse(node2.isReturn());
2462:       assertFalse(node2.isDefaultCase());
2463:       assertFalse(node2.isScript());
2464:       assertFalse(node2.isVoid());
2465:       assertFalse(node2.isTry());
2466:       assertFalse(node2.isExprResult());
2467:       assertFalse(node2.isTrue());
2468:       assertEquals(64, node2.getCharno());
2469:       assertFalse(node2.isParamList());
2470:       assertFalse(node2.isEmpty());
2471:       assertFalse(node2.isLabelName());
2472:       assertFalse(node2.isArrayLit());
2473:       assertFalse(node2.isVar());
2474:       assertFalse(node2.isAssignAdd());
2475:       assertFalse(node2.isLabel());
2476:       assertNotSame(node0, node1);
2477:       assertFalse(boolean12);
2478:       assertEquals(4095, Node.COLUMN_MASK);
2479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2480:       assertEquals(55, Node.INFERRED_FUNCTION);
2481:       assertEquals(43, Node.IS_CONSTANT_NAME);
2482:       assertEquals(36, Node.QUOTED_PROP);
2483:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2484:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2485:       assertEquals(48, Node.DIRECTIVES);
2486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2487:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2488:       assertEquals(50, Node.FREE_CALL);
2489:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2491:       assertEquals(32, Node.INCRDECR_PROP);
2492:       assertEquals(1, Node.DECR_FLAG);
2493:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2494:       assertEquals(12, Node.COLUMN_BITS);
2495:       assertEquals(46, Node.IS_NAMESPACE);
2496:       assertEquals(2, Node.POST_FLAG);
2497:       assertEquals(30, Node.VAR_ARGS_NAME);
2498:       assertEquals(54, Node.SLASH_V);
2499:       assertEquals(56, Node.CHANGE_TIME);
2500:       assertEquals(49, Node.DIRECT_EVAL);
2501:       assertEquals(37, Node.OPT_ARG_NAME);
2502:       assertEquals(57, Node.REFLECTED_OBJECT);
2503:       assertEquals(40, Node.ORIGINALNAME_PROP);
2504:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2505:       assertEquals(52, Node.LENGTH);
2506:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2507:       assertEquals(8, Node.FLAG_NO_THROWS);
2508:       assertEquals(39, Node.EMPTY_BLOCK);
2509:       assertEquals(57, Node.LAST_PROP);
2510:       assertEquals(47, Node.IS_DISPATCHER);
2511:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2512:       assertEquals(29, Node.JSDOC_INFO_PROP);
2513:       assertEquals(53, Node.INPUT_ID);
2514:       assertEquals(53, Node.INPUT_ID);
2515:       assertEquals(36, Node.QUOTED_PROP);
2516:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2517:       assertEquals(43, Node.IS_CONSTANT_NAME);
2518:       assertEquals(29, Node.JSDOC_INFO_PROP);
2519:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2520:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2521:       assertEquals(55, Node.INFERRED_FUNCTION);
2522:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2523:       assertEquals(37, Node.OPT_ARG_NAME);
2524:       assertEquals(32, Node.INCRDECR_PROP);
2525:       assertEquals(48, Node.DIRECTIVES);
2526:       assertEquals(12, Node.COLUMN_BITS);
2527:       assertEquals(56, Node.CHANGE_TIME);
2528:       assertEquals(49, Node.DIRECT_EVAL);
2529:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2530:       assertEquals(4095, Node.COLUMN_MASK);
2531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2532:       assertEquals(52, Node.LENGTH);
2533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2534:       assertEquals(57, Node.LAST_PROP);
2535:       assertEquals(57, Node.REFLECTED_OBJECT);
2536:       assertEquals(54, Node.SLASH_V);
2537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2538:       assertEquals(50, Node.FREE_CALL);
2539:       assertEquals(1, Node.DECR_FLAG);
2540:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2541:       assertEquals(8, Node.FLAG_NO_THROWS);
2542:       assertEquals(39, Node.EMPTY_BLOCK);
2543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2544:       assertEquals(47, Node.IS_DISPATCHER);
2545:       assertEquals(46, Node.IS_NAMESPACE);
2546:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2547:       assertEquals(30, Node.VAR_ARGS_NAME);
2548:       assertEquals(2, Node.POST_FLAG);
2549:       assertEquals(40, Node.ORIGINALNAME_PROP);
2550:   }
2551: }
RegularFileObject[/tmp/EvoSuite_122_1628255802566/com/google/javascript/rhino/Node_122_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_122_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_122_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_122_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:43.586 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(2468, "8IX=/g0 F~", 2769, (-1020));
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNotNull(node0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean0 = node0.isOnlyModifiesThisCall();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

node0.putProp(2769, "8IX=/g0 F~");
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

HashSet<String> hashSet0 = new HashSet<String>();
assertEquals(0, hashSet0.size());
assertTrue(hashSet0.isEmpty());
assertNotNull(hashSet0);
assertFalse(hashSet0.contains("8IX=/g0 F~"));

boolean boolean1 = hashSet0.add((String) null);
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);

boolean boolean2 = hashSet0.add((String) null);
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("8IX=/g0 F~"));
assertFalse(boolean2);
assertFalse(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

node0.removeProp(0);
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean3 = hashSet0.remove("Jcu{'f75U");
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("Jcu{'f75U"));
assertFalse(boolean3);
assertTrue(boolean3 == boolean2);
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);

node0.setDirectives(hashSet0);
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(1, hashSet0.size());
assertFalse(hashSet0.isEmpty());
assertFalse(hashSet0.contains("Jcu{'f75U"));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

node0.addSuppression("Jcu{'f75U");
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean4 = node0.isOr();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(boolean4);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertTrue(boolean4 == boolean0);
assertFalse(boolean4 == boolean1);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean2);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean5 = node0.isAnd();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(boolean5);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertTrue(boolean5 == boolean0);
assertFalse(boolean5 == boolean1);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertTrue(boolean5 == boolean3);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(16);
assertEquals(16, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesArguments();
assertEquals(16, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertEquals(16, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags1.valueOf());
assertEquals(16, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.clearAllFlags();
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags3.valueOf());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags1.setMutatesGlobalState();
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(24, node_SideEffectFlags0.valueOf());
assertEquals(24, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertNotNull(node_SideEffectFlags4);

boolean boolean6 = node0.isFromExterns();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(boolean6);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean5);
assertFalse(boolean6 == boolean1);
assertTrue(boolean6 == boolean2);
assertTrue(boolean6 == boolean0);
assertTrue(boolean6 == boolean4);

boolean boolean7 = node0.isInstanceOf();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(boolean7);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean6);
assertFalse(boolean7 == boolean1);

boolean boolean8 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean8);

Node node1 = node0.cloneTree();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertEquals(2468, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isStringKey());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean9 = node0.isDo();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNotSame(node0, node1);
assertFalse(boolean9);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeTypeAwareEqualsImpl(node1);
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertEquals(2468, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isStringKey());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNull(node_NodeMismatch0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean10 = node0.isQuotedString();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertNotSame(node0, node1);
assertFalse(boolean10);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);

boolean boolean11 = node1.isNot();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isFor());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertEquals(2468, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isDo());
assertFalse(node1.isWhile());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isStringKey());
assertFalse(node1.hasChildren());
assertFalse(node1.hasOneChild());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isEmpty());
assertFalse(node1.isBreak());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isGetElem());
assertFalse(node1.isVar());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(boolean11);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Node node2 = new Node(48, node0, 301, 64);
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isGetProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertEquals(48, node2.getType());
assertFalse(node2.isSetterDef());
assertEquals(301, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertEquals(1232960, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertEquals(64, node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertNotNull(node2);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean12 = node2.isThrow();
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getLineno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isStringKey());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isThis());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAnd());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertEquals(2468, node0.getType());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isBreak());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isEmpty());
assertFalse(node2.isSwitch());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNE());
assertFalse(node2.isGetProp());
assertTrue(node2.hasChildren());
assertFalse(node2.isBreak());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isComma());
assertFalse(node2.isThis());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertEquals(48, node2.getType());
assertFalse(node2.isSetterDef());
assertEquals(301, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isWhile());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertEquals(1232960, node2.getSourcePosition());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isNumber());
assertFalse(node2.isDec());
assertFalse(node2.isNull());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isAssign());
assertFalse(node2.isReturn());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isScript());
assertFalse(node2.isVoid());
assertFalse(node2.isTry());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertEquals(64, node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isEmpty());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertNotSame(node0, node1);
assertFalse(boolean12);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);


[MASTER] 13:16:46.969 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_135_1628255806877/com/google/javascript/rhino/Node_135_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_135_1628255806877/com/google/javascript/rhino/Node_135_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:46.969 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:46.969 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:46.969 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 519
[MASTER] 13:16:46.970 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_135_1628255806877/com/google/javascript/rhino/Node_135_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:46 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.NavigableSet;
13: import java.util.TreeSet;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_135_tmp__ESTest extends Node_135_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(0);
24:       assertFalse(node0.isIf());
25:       assertFalse(node0.isDelProp());
26:       assertFalse(node0.isGetterDef());
27:       assertFalse(node0.isEmpty());
28:       assertFalse(node0.isNE());
29:       assertFalse(node0.isFor());
30:       assertFalse(node0.isIn());
31:       assertFalse(node0.isCase());
32:       assertFalse(node0.isTry());
33:       assertFalse(node0.isTrue());
34:       assertFalse(node0.isInc());
35:       assertFalse(node0.isCatch());
36:       assertFalse(node0.isRegExp());
37:       assertEquals(0, node0.getType());
38:       assertFalse(node0.isVoid());
39:       assertFalse(node0.isBreak());
40:       assertFalse(node0.isSetterDef());
41:       assertFalse(node0.isComma());
42:       assertFalse(node0.isFalse());
43:       assertFalse(node0.isGetProp());
44:       assertFalse(node0.isThrow());
45:       assertFalse(node0.isString());
46:       assertFalse(node0.isObjectLit());
47:       assertFalse(node0.isContinue());
48:       assertFalse(node0.isDebugger());
49:       assertFalse(node0.isNot());
50:       assertFalse(node0.isFunction());
51:       assertFalse(node0.isCast());
52:       assertFalse(node0.isAnd());
53:       assertFalse(node0.hasChildren());
54:       assertEquals((-1), node0.getSourcePosition());
55:       assertFalse(node0.isDec());
56:       assertFalse(node0.isGetElem());
57:       assertFalse(node0.isOr());
58:       assertFalse(node0.isAssign());
59:       assertFalse(node0.isNumber());
60:       assertFalse(node0.isTypeOf());
61:       assertFalse(node0.hasOneChild());
62:       assertFalse(node0.isLabel());
63:       assertFalse(node0.isReturn());
64:       assertFalse(node0.isAssignAdd());
65:       assertFalse(node0.isDo());
66:       assertFalse(node0.isWhile());
67:       assertFalse(node0.isExprResult());
68:       assertFalse(node0.hasMoreThanOneChild());
69:       assertFalse(node0.isWith());
70:       assertEquals((-1), node0.getLineno());
71:       assertFalse(node0.isInstanceOf());
72:       assertFalse(node0.isCall());
73:       assertFalse(node0.isName());
74:       assertFalse(node0.isNull());
75:       assertFalse(node0.isThis());
76:       assertEquals(0, node0.getChildCount());
77:       assertFalse(node0.isVar());
78:       assertFalse(node0.isAdd());
79:       assertFalse(node0.isBlock());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.isNew());
82:       assertFalse(node0.isDefaultCase());
83:       assertFalse(node0.isScript());
84:       assertEquals((-1), node0.getCharno());
85:       assertFalse(node0.isArrayLit());
86:       assertFalse(node0.isStringKey());
87:       assertFalse(node0.isParamList());
88:       assertFalse(node0.isSwitch());
89:       assertFalse(node0.isLabelName());
90:       assertNotNull(node0);
91:       assertEquals(48, Node.DIRECTIVES);
92:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(55, Node.INFERRED_FUNCTION);
95:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
96:       assertEquals(39, Node.EMPTY_BLOCK);
97:       assertEquals(4095, Node.COLUMN_MASK);
98:       assertEquals(53, Node.INPUT_ID);
99:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
100:       assertEquals(52, Node.LENGTH);
101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
103:       assertEquals(29, Node.JSDOC_INFO_PROP);
104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
105:       assertEquals(49, Node.DIRECT_EVAL);
106:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
107:       assertEquals(56, Node.CHANGE_TIME);
108:       assertEquals(36, Node.QUOTED_PROP);
109:       assertEquals(57, Node.REFLECTED_OBJECT);
110:       assertEquals(32, Node.INCRDECR_PROP);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(1, Node.DECR_FLAG);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(2, Node.POST_FLAG);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(47, Node.IS_DISPATCHER);
119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
120:       assertEquals(54, Node.SLASH_V);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(43, Node.IS_CONSTANT_NAME);
125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
126:       assertEquals(46, Node.IS_NAMESPACE);
127:       
128:       TreeSet<String> treeSet0 = new TreeSet<String>();
129:       assertNotNull(treeSet0);
130:       
131:       NavigableSet<String> navigableSet0 = new TreeSet<String>();
132:       assertTrue(navigableSet0.isEmpty());
133:       assertEquals(0, navigableSet0.size());
134:       assertNotNull(navigableSet0);
135:       
136:       node0.setDirectives(navigableSet0);
137:       assertFalse(node0.isIf());
138:       assertFalse(node0.isDelProp());
139:       assertFalse(node0.isGetterDef());
140:       assertFalse(node0.isEmpty());
141:       assertFalse(node0.isNE());
142:       assertFalse(node0.isFor());
143:       assertFalse(node0.isIn());
144:       assertFalse(node0.isCase());
145:       assertFalse(node0.isTry());
146:       assertFalse(node0.isTrue());
147:       assertFalse(node0.isInc());
148:       assertFalse(node0.isCatch());
149:       assertFalse(node0.isRegExp());
150:       assertEquals(0, node0.getType());
151:       assertFalse(node0.isVoid());
152:       assertFalse(node0.isBreak());
153:       assertFalse(node0.isSetterDef());
154:       assertFalse(node0.isComma());
155:       assertFalse(node0.isFalse());
156:       assertFalse(node0.isGetProp());
157:       assertFalse(node0.isThrow());
158:       assertFalse(node0.isString());
159:       assertFalse(node0.isObjectLit());
160:       assertFalse(node0.isContinue());
161:       assertFalse(node0.isDebugger());
162:       assertFalse(node0.isNot());
163:       assertFalse(node0.isFunction());
164:       assertFalse(node0.isCast());
165:       assertFalse(node0.isAnd());
166:       assertFalse(node0.hasChildren());
167:       assertEquals((-1), node0.getSourcePosition());
168:       assertFalse(node0.isDec());
169:       assertFalse(node0.isGetElem());
170:       assertFalse(node0.isOr());
171:       assertFalse(node0.isAssign());
172:       assertFalse(node0.isNumber());
173:       assertFalse(node0.isTypeOf());
174:       assertFalse(node0.hasOneChild());
175:       assertFalse(node0.isLabel());
176:       assertFalse(node0.isReturn());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isDo());
179:       assertFalse(node0.isWhile());
180:       assertFalse(node0.isExprResult());
181:       assertFalse(node0.hasMoreThanOneChild());
182:       assertFalse(node0.isWith());
183:       assertEquals((-1), node0.getLineno());
184:       assertFalse(node0.isInstanceOf());
185:       assertFalse(node0.isCall());
186:       assertFalse(node0.isName());
187:       assertFalse(node0.isNull());
188:       assertFalse(node0.isThis());
189:       assertEquals(0, node0.getChildCount());
190:       assertFalse(node0.isVar());
191:       assertFalse(node0.isAdd());
192:       assertFalse(node0.isBlock());
193:       assertFalse(node0.isHook());
194:       assertFalse(node0.isNew());
195:       assertFalse(node0.isDefaultCase());
196:       assertFalse(node0.isScript());
197:       assertEquals((-1), node0.getCharno());
198:       assertFalse(node0.isArrayLit());
199:       assertFalse(node0.isStringKey());
200:       assertFalse(node0.isParamList());
201:       assertFalse(node0.isSwitch());
202:       assertFalse(node0.isLabelName());
203:       assertTrue(navigableSet0.isEmpty());
204:       assertEquals(0, navigableSet0.size());
205:       assertEquals(48, Node.DIRECTIVES);
206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
207:       assertEquals(8, Node.FLAG_NO_THROWS);
208:       assertEquals(55, Node.INFERRED_FUNCTION);
209:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
210:       assertEquals(39, Node.EMPTY_BLOCK);
211:       assertEquals(4095, Node.COLUMN_MASK);
212:       assertEquals(53, Node.INPUT_ID);
213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(29, Node.JSDOC_INFO_PROP);
218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
219:       assertEquals(49, Node.DIRECT_EVAL);
220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
221:       assertEquals(56, Node.CHANGE_TIME);
222:       assertEquals(36, Node.QUOTED_PROP);
223:       assertEquals(57, Node.REFLECTED_OBJECT);
224:       assertEquals(32, Node.INCRDECR_PROP);
225:       assertEquals(37, Node.OPT_ARG_NAME);
226:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
227:       assertEquals(30, Node.VAR_ARGS_NAME);
228:       assertEquals(1, Node.DECR_FLAG);
229:       assertEquals(57, Node.LAST_PROP);
230:       assertEquals(2, Node.POST_FLAG);
231:       assertEquals(12, Node.COLUMN_BITS);
232:       assertEquals(47, Node.IS_DISPATCHER);
233:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
234:       assertEquals(54, Node.SLASH_V);
235:       assertEquals(40, Node.ORIGINALNAME_PROP);
236:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
237:       assertEquals(50, Node.FREE_CALL);
238:       assertEquals(43, Node.IS_CONSTANT_NAME);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       
242:       node0.addSuppression("this");
243:       assertFalse(node0.isIf());
244:       assertFalse(node0.isDelProp());
245:       assertFalse(node0.isGetterDef());
246:       assertFalse(node0.isEmpty());
247:       assertFalse(node0.isNE());
248:       assertFalse(node0.isFor());
249:       assertFalse(node0.isIn());
250:       assertFalse(node0.isCase());
251:       assertFalse(node0.isTry());
252:       assertFalse(node0.isTrue());
253:       assertFalse(node0.isInc());
254:       assertFalse(node0.isCatch());
255:       assertFalse(node0.isRegExp());
256:       assertEquals(0, node0.getType());
257:       assertFalse(node0.isVoid());
258:       assertFalse(node0.isBreak());
259:       assertFalse(node0.isSetterDef());
260:       assertFalse(node0.isComma());
261:       assertFalse(node0.isFalse());
262:       assertFalse(node0.isGetProp());
263:       assertFalse(node0.isThrow());
264:       assertFalse(node0.isString());
265:       assertFalse(node0.isObjectLit());
266:       assertFalse(node0.isContinue());
267:       assertFalse(node0.isDebugger());
268:       assertFalse(node0.isNot());
269:       assertFalse(node0.isFunction());
270:       assertFalse(node0.isCast());
271:       assertFalse(node0.isAnd());
272:       assertFalse(node0.hasChildren());
273:       assertEquals((-1), node0.getSourcePosition());
274:       assertFalse(node0.isDec());
275:       assertFalse(node0.isGetElem());
276:       assertFalse(node0.isOr());
277:       assertFalse(node0.isAssign());
278:       assertFalse(node0.isNumber());
279:       assertFalse(node0.isTypeOf());
280:       assertFalse(node0.hasOneChild());
281:       assertFalse(node0.isLabel());
282:       assertFalse(node0.isReturn());
283:       assertFalse(node0.isAssignAdd());
284:       assertFalse(node0.isDo());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isExprResult());
287:       assertFalse(node0.hasMoreThanOneChild());
288:       assertFalse(node0.isWith());
289:       assertEquals((-1), node0.getLineno());
290:       assertFalse(node0.isInstanceOf());
291:       assertFalse(node0.isCall());
292:       assertFalse(node0.isName());
293:       assertFalse(node0.isNull());
294:       assertFalse(node0.isThis());
295:       assertEquals(0, node0.getChildCount());
296:       assertFalse(node0.isVar());
297:       assertFalse(node0.isAdd());
298:       assertFalse(node0.isBlock());
299:       assertFalse(node0.isHook());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isDefaultCase());
302:       assertFalse(node0.isScript());
303:       assertEquals((-1), node0.getCharno());
304:       assertFalse(node0.isArrayLit());
305:       assertFalse(node0.isStringKey());
306:       assertFalse(node0.isParamList());
307:       assertFalse(node0.isSwitch());
308:       assertFalse(node0.isLabelName());
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
311:       assertEquals(8, Node.FLAG_NO_THROWS);
312:       assertEquals(55, Node.INFERRED_FUNCTION);
313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
314:       assertEquals(39, Node.EMPTY_BLOCK);
315:       assertEquals(4095, Node.COLUMN_MASK);
316:       assertEquals(53, Node.INPUT_ID);
317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
318:       assertEquals(52, Node.LENGTH);
319:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
320:       assertEquals(15, Node.NO_SIDE_EFFECTS);
321:       assertEquals(29, Node.JSDOC_INFO_PROP);
322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
323:       assertEquals(49, Node.DIRECT_EVAL);
324:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
325:       assertEquals(56, Node.CHANGE_TIME);
326:       assertEquals(36, Node.QUOTED_PROP);
327:       assertEquals(57, Node.REFLECTED_OBJECT);
328:       assertEquals(32, Node.INCRDECR_PROP);
329:       assertEquals(37, Node.OPT_ARG_NAME);
330:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
331:       assertEquals(30, Node.VAR_ARGS_NAME);
332:       assertEquals(1, Node.DECR_FLAG);
333:       assertEquals(57, Node.LAST_PROP);
334:       assertEquals(2, Node.POST_FLAG);
335:       assertEquals(12, Node.COLUMN_BITS);
336:       assertEquals(47, Node.IS_DISPATCHER);
337:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
338:       assertEquals(54, Node.SLASH_V);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
341:       assertEquals(50, Node.FREE_CALL);
342:       assertEquals(43, Node.IS_CONSTANT_NAME);
343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
344:       assertEquals(46, Node.IS_NAMESPACE);
345:       
346:       boolean boolean0 = node0.isOr();
347:       assertFalse(node0.isIf());
348:       assertFalse(node0.isDelProp());
349:       assertFalse(node0.isGetterDef());
350:       assertFalse(node0.isEmpty());
351:       assertFalse(node0.isNE());
352:       assertFalse(node0.isFor());
353:       assertFalse(node0.isIn());
354:       assertFalse(node0.isCase());
355:       assertFalse(node0.isTry());
356:       assertFalse(node0.isTrue());
357:       assertFalse(node0.isInc());
358:       assertFalse(node0.isCatch());
359:       assertFalse(node0.isRegExp());
360:       assertEquals(0, node0.getType());
361:       assertFalse(node0.isVoid());
362:       assertFalse(node0.isBreak());
363:       assertFalse(node0.isSetterDef());
364:       assertFalse(node0.isComma());
365:       assertFalse(node0.isFalse());
366:       assertFalse(node0.isGetProp());
367:       assertFalse(node0.isThrow());
368:       assertFalse(node0.isString());
369:       assertFalse(node0.isObjectLit());
370:       assertFalse(node0.isContinue());
371:       assertFalse(node0.isDebugger());
372:       assertFalse(node0.isNot());
373:       assertFalse(node0.isFunction());
374:       assertFalse(node0.isCast());
375:       assertFalse(node0.isAnd());
376:       assertFalse(node0.hasChildren());
377:       assertEquals((-1), node0.getSourcePosition());
378:       assertFalse(node0.isDec());
379:       assertFalse(node0.isGetElem());
380:       assertFalse(node0.isOr());
381:       assertFalse(node0.isAssign());
382:       assertFalse(node0.isNumber());
383:       assertFalse(node0.isTypeOf());
384:       assertFalse(node0.hasOneChild());
385:       assertFalse(node0.isLabel());
386:       assertFalse(node0.isReturn());
387:       assertFalse(node0.isAssignAdd());
388:       assertFalse(node0.isDo());
389:       assertFalse(node0.isWhile());
390:       assertFalse(node0.isExprResult());
391:       assertFalse(node0.hasMoreThanOneChild());
392:       assertFalse(node0.isWith());
393:       assertEquals((-1), node0.getLineno());
394:       assertFalse(node0.isInstanceOf());
395:       assertFalse(node0.isCall());
396:       assertFalse(node0.isName());
397:       assertFalse(node0.isNull());
398:       assertFalse(node0.isThis());
399:       assertEquals(0, node0.getChildCount());
400:       assertFalse(node0.isVar());
401:       assertFalse(node0.isAdd());
402:       assertFalse(node0.isBlock());
403:       assertFalse(node0.isHook());
404:       assertFalse(node0.isNew());
405:       assertFalse(node0.isDefaultCase());
406:       assertFalse(node0.isScript());
407:       assertEquals((-1), node0.getCharno());
408:       assertFalse(node0.isArrayLit());
409:       assertFalse(node0.isStringKey());
410:       assertFalse(node0.isParamList());
411:       assertFalse(node0.isSwitch());
412:       assertFalse(node0.isLabelName());
413:       assertFalse(boolean0);
414:       assertEquals(48, Node.DIRECTIVES);
415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
416:       assertEquals(8, Node.FLAG_NO_THROWS);
417:       assertEquals(55, Node.INFERRED_FUNCTION);
418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
419:       assertEquals(39, Node.EMPTY_BLOCK);
420:       assertEquals(4095, Node.COLUMN_MASK);
421:       assertEquals(53, Node.INPUT_ID);
422:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
423:       assertEquals(52, Node.LENGTH);
424:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
425:       assertEquals(15, Node.NO_SIDE_EFFECTS);
426:       assertEquals(29, Node.JSDOC_INFO_PROP);
427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
428:       assertEquals(49, Node.DIRECT_EVAL);
429:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
430:       assertEquals(56, Node.CHANGE_TIME);
431:       assertEquals(36, Node.QUOTED_PROP);
432:       assertEquals(57, Node.REFLECTED_OBJECT);
433:       assertEquals(32, Node.INCRDECR_PROP);
434:       assertEquals(37, Node.OPT_ARG_NAME);
435:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
436:       assertEquals(30, Node.VAR_ARGS_NAME);
437:       assertEquals(1, Node.DECR_FLAG);
438:       assertEquals(57, Node.LAST_PROP);
439:       assertEquals(2, Node.POST_FLAG);
440:       assertEquals(12, Node.COLUMN_BITS);
441:       assertEquals(47, Node.IS_DISPATCHER);
442:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
443:       assertEquals(54, Node.SLASH_V);
444:       assertEquals(40, Node.ORIGINALNAME_PROP);
445:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
446:       assertEquals(50, Node.FREE_CALL);
447:       assertEquals(43, Node.IS_CONSTANT_NAME);
448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
449:       assertEquals(46, Node.IS_NAMESPACE);
450:       
451:       Iterable<Node> iterable0 = node0.children();
452:       assertFalse(node0.isIf());
453:       assertFalse(node0.isDelProp());
454:       assertFalse(node0.isGetterDef());
455:       assertFalse(node0.isEmpty());
456:       assertFalse(node0.isNE());
457:       assertFalse(node0.isFor());
458:       assertFalse(node0.isIn());
459:       assertFalse(node0.isCase());
460:       assertFalse(node0.isTry());
461:       assertFalse(node0.isTrue());
462:       assertFalse(node0.isInc());
463:       assertFalse(node0.isCatch());
464:       assertFalse(node0.isRegExp());
465:       assertEquals(0, node0.getType());
466:       assertFalse(node0.isVoid());
467:       assertFalse(node0.isBreak());
468:       assertFalse(node0.isSetterDef());
469:       assertFalse(node0.isComma());
470:       assertFalse(node0.isFalse());
471:       assertFalse(node0.isGetProp());
472:       assertFalse(node0.isThrow());
473:       assertFalse(node0.isString());
474:       assertFalse(node0.isObjectLit());
475:       assertFalse(node0.isContinue());
476:       assertFalse(node0.isDebugger());
477:       assertFalse(node0.isNot());
478:       assertFalse(node0.isFunction());
479:       assertFalse(node0.isCast());
480:       assertFalse(node0.isAnd());
481:       assertFalse(node0.hasChildren());
482:       assertEquals((-1), node0.getSourcePosition());
483:       assertFalse(node0.isDec());
484:       assertFalse(node0.isGetElem());
485:       assertFalse(node0.isOr());
486:       assertFalse(node0.isAssign());
487:       assertFalse(node0.isNumber());
488:       assertFalse(node0.isTypeOf());
489:       assertFalse(node0.hasOneChild());
490:       assertFalse(node0.isLabel());
491:       assertFalse(node0.isReturn());
492:       assertFalse(node0.isAssignAdd());
493:       assertFalse(node0.isDo());
494:       assertFalse(node0.isWhile());
495:       assertFalse(node0.isExprResult());
496:       assertFalse(node0.hasMoreThanOneChild());
497:       assertFalse(node0.isWith());
498:       assertEquals((-1), node0.getLineno());
499:       assertFalse(node0.isInstanceOf());
500:       assertFalse(node0.isCall());
501:       assertFalse(node0.isName());
502:       assertFalse(node0.isNull());
503:       assertFalse(node0.isThis());
504:       assertEquals(0, node0.getChildCount());
505:       assertFalse(node0.isVar());
506:       assertFalse(node0.isAdd());
507:       assertFalse(node0.isBlock());
508:       assertFalse(node0.isHook());
509:       assertFalse(node0.isNew());
510:       assertFalse(node0.isDefaultCase());
511:       assertFalse(node0.isScript());
512:       assertEquals((-1), node0.getCharno());
513:       assertFalse(node0.isArrayLit());
514:       assertFalse(node0.isStringKey());
515:       assertFalse(node0.isParamList());
516:       assertFalse(node0.isSwitch());
517:       assertFalse(node0.isLabelName());
518:       assertNotNull(iterable0);
519:       assertFalse(iterable0.contains(node0));
520:       assertEquals(48, Node.DIRECTIVES);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(8, Node.FLAG_NO_THROWS);
523:       assertEquals(55, Node.INFERRED_FUNCTION);
524:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
525:       assertEquals(39, Node.EMPTY_BLOCK);
526:       assertEquals(4095, Node.COLUMN_MASK);
527:       assertEquals(53, Node.INPUT_ID);
528:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
529:       assertEquals(52, Node.LENGTH);
530:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
531:       assertEquals(15, Node.NO_SIDE_EFFECTS);
532:       assertEquals(29, Node.JSDOC_INFO_PROP);
533:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
534:       assertEquals(49, Node.DIRECT_EVAL);
535:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
536:       assertEquals(56, Node.CHANGE_TIME);
537:       assertEquals(36, Node.QUOTED_PROP);
538:       assertEquals(57, Node.REFLECTED_OBJECT);
539:       assertEquals(32, Node.INCRDECR_PROP);
540:       assertEquals(37, Node.OPT_ARG_NAME);
541:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
542:       assertEquals(30, Node.VAR_ARGS_NAME);
543:       assertEquals(1, Node.DECR_FLAG);
544:       assertEquals(57, Node.LAST_PROP);
545:       assertEquals(2, Node.POST_FLAG);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(47, Node.IS_DISPATCHER);
548:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
549:       assertEquals(54, Node.SLASH_V);
550:       assertEquals(40, Node.ORIGINALNAME_PROP);
551:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
552:       assertEquals(50, Node.FREE_CALL);
553:       assertEquals(43, Node.IS_CONSTANT_NAME);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(46, Node.IS_NAMESPACE);
556:       
557:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
558:       assertFalse(node0.isIf());
559:       assertFalse(node0.isDelProp());
560:       assertFalse(node0.isGetterDef());
561:       assertFalse(node0.isEmpty());
562:       assertFalse(node0.isNE());
563:       assertFalse(node0.isFor());
564:       assertFalse(node0.isIn());
565:       assertFalse(node0.isCase());
566:       assertFalse(node0.isTry());
567:       assertFalse(node0.isTrue());
568:       assertFalse(node0.isInc());
569:       assertFalse(node0.isCatch());
570:       assertFalse(node0.isRegExp());
571:       assertEquals(0, node0.getType());
572:       assertFalse(node0.isVoid());
573:       assertFalse(node0.isBreak());
574:       assertFalse(node0.isSetterDef());
575:       assertFalse(node0.isComma());
576:       assertFalse(node0.isFalse());
577:       assertFalse(node0.isGetProp());
578:       assertFalse(node0.isThrow());
579:       assertFalse(node0.isString());
580:       assertFalse(node0.isObjectLit());
581:       assertFalse(node0.isContinue());
582:       assertFalse(node0.isDebugger());
583:       assertFalse(node0.isNot());
584:       assertFalse(node0.isFunction());
585:       assertFalse(node0.isCast());
586:       assertFalse(node0.isAnd());
587:       assertFalse(node0.hasChildren());
588:       assertEquals((-1), node0.getSourcePosition());
589:       assertFalse(node0.isDec());
590:       assertFalse(node0.isGetElem());
591:       assertFalse(node0.isOr());
592:       assertFalse(node0.isAssign());
593:       assertFalse(node0.isNumber());
594:       assertFalse(node0.isTypeOf());
595:       assertFalse(node0.hasOneChild());
596:       assertFalse(node0.isLabel());
597:       assertFalse(node0.isReturn());
598:       assertFalse(node0.isAssignAdd());
599:       assertFalse(node0.isDo());
600:       assertFalse(node0.isWhile());
601:       assertFalse(node0.isExprResult());
602:       assertFalse(node0.hasMoreThanOneChild());
603:       assertFalse(node0.isWith());
604:       assertEquals((-1), node0.getLineno());
605:       assertFalse(node0.isInstanceOf());
606:       assertFalse(node0.isCall());
607:       assertFalse(node0.isName());
608:       assertFalse(node0.isNull());
609:       assertFalse(node0.isThis());
610:       assertEquals(0, node0.getChildCount());
611:       assertFalse(node0.isVar());
612:       assertFalse(node0.isAdd());
613:       assertFalse(node0.isBlock());
614:       assertFalse(node0.isHook());
615:       assertFalse(node0.isNew());
616:       assertFalse(node0.isDefaultCase());
617:       assertFalse(node0.isScript());
618:       assertEquals((-1), node0.getCharno());
619:       assertFalse(node0.isArrayLit());
620:       assertFalse(node0.isStringKey());
621:       assertFalse(node0.isParamList());
622:       assertFalse(node0.isSwitch());
623:       assertFalse(node0.isLabelName());
624:       assertNotNull(node_FileLevelJsDocBuilder0);
625:       assertEquals(48, Node.DIRECTIVES);
626:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
627:       assertEquals(8, Node.FLAG_NO_THROWS);
628:       assertEquals(55, Node.INFERRED_FUNCTION);
629:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
630:       assertEquals(39, Node.EMPTY_BLOCK);
631:       assertEquals(4095, Node.COLUMN_MASK);
632:       assertEquals(53, Node.INPUT_ID);
633:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
634:       assertEquals(52, Node.LENGTH);
635:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
636:       assertEquals(15, Node.NO_SIDE_EFFECTS);
637:       assertEquals(29, Node.JSDOC_INFO_PROP);
638:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
639:       assertEquals(49, Node.DIRECT_EVAL);
640:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
641:       assertEquals(56, Node.CHANGE_TIME);
642:       assertEquals(36, Node.QUOTED_PROP);
643:       assertEquals(57, Node.REFLECTED_OBJECT);
644:       assertEquals(32, Node.INCRDECR_PROP);
645:       assertEquals(37, Node.OPT_ARG_NAME);
646:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
647:       assertEquals(30, Node.VAR_ARGS_NAME);
648:       assertEquals(1, Node.DECR_FLAG);
649:       assertEquals(57, Node.LAST_PROP);
650:       assertEquals(2, Node.POST_FLAG);
651:       assertEquals(12, Node.COLUMN_BITS);
652:       assertEquals(47, Node.IS_DISPATCHER);
653:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
654:       assertEquals(54, Node.SLASH_V);
655:       assertEquals(40, Node.ORIGINALNAME_PROP);
656:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
657:       assertEquals(50, Node.FREE_CALL);
658:       assertEquals(43, Node.IS_CONSTANT_NAME);
659:       assertEquals(51, Node.STATIC_SOURCE_FILE);
660:       assertEquals(46, Node.IS_NAMESPACE);
661:       
662:       node_FileLevelJsDocBuilder0.append("");
663:       assertFalse(node0.isIf());
664:       assertFalse(node0.isDelProp());
665:       assertFalse(node0.isGetterDef());
666:       assertFalse(node0.isEmpty());
667:       assertFalse(node0.isNE());
668:       assertFalse(node0.isFor());
669:       assertFalse(node0.isIn());
670:       assertFalse(node0.isCase());
671:       assertFalse(node0.isTry());
672:       assertFalse(node0.isTrue());
673:       assertFalse(node0.isInc());
674:       assertFalse(node0.isCatch());
675:       assertFalse(node0.isRegExp());
676:       assertEquals(0, node0.getType());
677:       assertFalse(node0.isVoid());
678:       assertFalse(node0.isBreak());
679:       assertFalse(node0.isSetterDef());
680:       assertFalse(node0.isComma());
681:       assertFalse(node0.isFalse());
682:       assertFalse(node0.isGetProp());
683:       assertFalse(node0.isThrow());
684:       assertFalse(node0.isString());
685:       assertFalse(node0.isObjectLit());
686:       assertFalse(node0.isContinue());
687:       assertFalse(node0.isDebugger());
688:       assertFalse(node0.isNot());
689:       assertFalse(node0.isFunction());
690:       assertFalse(node0.isCast());
691:       assertFalse(node0.isAnd());
692:       assertFalse(node0.hasChildren());
693:       assertEquals((-1), node0.getSourcePosition());
694:       assertFalse(node0.isDec());
695:       assertFalse(node0.isGetElem());
696:       assertFalse(node0.isOr());
697:       assertFalse(node0.isAssign());
698:       assertFalse(node0.isNumber());
699:       assertFalse(node0.isTypeOf());
700:       assertFalse(node0.hasOneChild());
701:       assertFalse(node0.isLabel());
702:       assertFalse(node0.isReturn());
703:       assertFalse(node0.isAssignAdd());
704:       assertFalse(node0.isDo());
705:       assertFalse(node0.isWhile());
706:       assertFalse(node0.isExprResult());
707:       assertFalse(node0.hasMoreThanOneChild());
708:       assertFalse(node0.isWith());
709:       assertEquals((-1), node0.getLineno());
710:       assertFalse(node0.isInstanceOf());
711:       assertFalse(node0.isCall());
712:       assertFalse(node0.isName());
713:       assertFalse(node0.isNull());
714:       assertFalse(node0.isThis());
715:       assertEquals(0, node0.getChildCount());
716:       assertFalse(node0.isVar());
717:       assertFalse(node0.isAdd());
718:       assertFalse(node0.isBlock());
719:       assertFalse(node0.isHook());
720:       assertFalse(node0.isNew());
721:       assertFalse(node0.isDefaultCase());
722:       assertFalse(node0.isScript());
723:       assertEquals((-1), node0.getCharno());
724:       assertFalse(node0.isArrayLit());
725:       assertFalse(node0.isStringKey());
726:       assertFalse(node0.isParamList());
727:       assertFalse(node0.isSwitch());
728:       assertFalse(node0.isLabelName());
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
731:       assertEquals(8, Node.FLAG_NO_THROWS);
732:       assertEquals(55, Node.INFERRED_FUNCTION);
733:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
734:       assertEquals(39, Node.EMPTY_BLOCK);
735:       assertEquals(4095, Node.COLUMN_MASK);
736:       assertEquals(53, Node.INPUT_ID);
737:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
738:       assertEquals(52, Node.LENGTH);
739:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
740:       assertEquals(15, Node.NO_SIDE_EFFECTS);
741:       assertEquals(29, Node.JSDOC_INFO_PROP);
742:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
743:       assertEquals(49, Node.DIRECT_EVAL);
744:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
745:       assertEquals(56, Node.CHANGE_TIME);
746:       assertEquals(36, Node.QUOTED_PROP);
747:       assertEquals(57, Node.REFLECTED_OBJECT);
748:       assertEquals(32, Node.INCRDECR_PROP);
749:       assertEquals(37, Node.OPT_ARG_NAME);
750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
751:       assertEquals(30, Node.VAR_ARGS_NAME);
752:       assertEquals(1, Node.DECR_FLAG);
753:       assertEquals(57, Node.LAST_PROP);
754:       assertEquals(2, Node.POST_FLAG);
755:       assertEquals(12, Node.COLUMN_BITS);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
758:       assertEquals(54, Node.SLASH_V);
759:       assertEquals(40, Node.ORIGINALNAME_PROP);
760:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
761:       assertEquals(50, Node.FREE_CALL);
762:       assertEquals(43, Node.IS_CONSTANT_NAME);
763:       assertEquals(51, Node.STATIC_SOURCE_FILE);
764:       assertEquals(46, Node.IS_NAMESPACE);
765:       
766:       boolean boolean1 = node0.isEquivalentTo(node0);
767:       assertFalse(node0.isIf());
768:       assertFalse(node0.isDelProp());
769:       assertFalse(node0.isGetterDef());
770:       assertFalse(node0.isEmpty());
771:       assertFalse(node0.isNE());
772:       assertFalse(node0.isFor());
773:       assertFalse(node0.isIn());
774:       assertFalse(node0.isCase());
775:       assertFalse(node0.isTry());
776:       assertFalse(node0.isTrue());
777:       assertFalse(node0.isInc());
778:       assertFalse(node0.isCatch());
779:       assertFalse(node0.isRegExp());
780:       assertEquals(0, node0.getType());
781:       assertFalse(node0.isVoid());
782:       assertFalse(node0.isBreak());
783:       assertFalse(node0.isSetterDef());
784:       assertFalse(node0.isComma());
785:       assertFalse(node0.isFalse());
786:       assertFalse(node0.isGetProp());
787:       assertFalse(node0.isThrow());
788:       assertFalse(node0.isString());
789:       assertFalse(node0.isObjectLit());
790:       assertFalse(node0.isContinue());
791:       assertFalse(node0.isDebugger());
792:       assertFalse(node0.isNot());
793:       assertFalse(node0.isFunction());
794:       assertFalse(node0.isCast());
795:       assertFalse(node0.isAnd());
796:       assertFalse(node0.hasChildren());
797:       assertEquals((-1), node0.getSourcePosition());
798:       assertFalse(node0.isDec());
799:       assertFalse(node0.isGetElem());
800:       assertFalse(node0.isOr());
801:       assertFalse(node0.isAssign());
802:       assertFalse(node0.isNumber());
803:       assertFalse(node0.isTypeOf());
804:       assertFalse(node0.hasOneChild());
805:       assertFalse(node0.isLabel());
806:       assertFalse(node0.isReturn());
807:       assertFalse(node0.isAssignAdd());
808:       assertFalse(node0.isDo());
809:       assertFalse(node0.isWhile());
810:       assertFalse(node0.isExprResult());
811:       assertFalse(node0.hasMoreThanOneChild());
812:       assertFalse(node0.isWith());
813:       assertEquals((-1), node0.getLineno());
814:       assertFalse(node0.isInstanceOf());
815:       assertFalse(node0.isCall());
816:       assertFalse(node0.isName());
817:       assertFalse(node0.isNull());
818:       assertFalse(node0.isThis());
819:       assertEquals(0, node0.getChildCount());
820:       assertFalse(node0.isVar());
821:       assertFalse(node0.isAdd());
822:       assertFalse(node0.isBlock());
823:       assertFalse(node0.isHook());
824:       assertFalse(node0.isNew());
825:       assertFalse(node0.isDefaultCase());
826:       assertFalse(node0.isScript());
827:       assertEquals((-1), node0.getCharno());
828:       assertFalse(node0.isArrayLit());
829:       assertFalse(node0.isStringKey());
830:       assertFalse(node0.isParamList());
831:       assertFalse(node0.isSwitch());
832:       assertFalse(node0.isLabelName());
833:       assertTrue(boolean1);
834:       assertEquals(48, Node.DIRECTIVES);
835:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
836:       assertEquals(8, Node.FLAG_NO_THROWS);
837:       assertEquals(55, Node.INFERRED_FUNCTION);
838:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
839:       assertEquals(39, Node.EMPTY_BLOCK);
840:       assertEquals(4095, Node.COLUMN_MASK);
841:       assertEquals(53, Node.INPUT_ID);
842:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
843:       assertEquals(52, Node.LENGTH);
844:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
845:       assertEquals(15, Node.NO_SIDE_EFFECTS);
846:       assertEquals(29, Node.JSDOC_INFO_PROP);
847:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
848:       assertEquals(49, Node.DIRECT_EVAL);
849:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
850:       assertEquals(56, Node.CHANGE_TIME);
851:       assertEquals(36, Node.QUOTED_PROP);
852:       assertEquals(57, Node.REFLECTED_OBJECT);
853:       assertEquals(32, Node.INCRDECR_PROP);
854:       assertEquals(37, Node.OPT_ARG_NAME);
855:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
856:       assertEquals(30, Node.VAR_ARGS_NAME);
857:       assertEquals(1, Node.DECR_FLAG);
858:       assertEquals(57, Node.LAST_PROP);
859:       assertEquals(2, Node.POST_FLAG);
860:       assertEquals(12, Node.COLUMN_BITS);
861:       assertEquals(47, Node.IS_DISPATCHER);
862:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
863:       assertEquals(54, Node.SLASH_V);
864:       assertEquals(40, Node.ORIGINALNAME_PROP);
865:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
866:       assertEquals(50, Node.FREE_CALL);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
869:       assertEquals(46, Node.IS_NAMESPACE);
870:       assertFalse(boolean1 == boolean0);
871:       
872:       Node node1 = new Node(32, node0, 57, 49);
873:       assertFalse(node0.isIf());
874:       assertFalse(node0.isDelProp());
875:       assertFalse(node0.isGetterDef());
876:       assertFalse(node0.isEmpty());
877:       assertFalse(node0.isNE());
878:       assertFalse(node0.isFor());
879:       assertFalse(node0.isIn());
880:       assertFalse(node0.isCase());
881:       assertFalse(node0.isTry());
882:       assertFalse(node0.isTrue());
883:       assertFalse(node0.isInc());
884:       assertFalse(node0.isCatch());
885:       assertFalse(node0.isRegExp());
886:       assertEquals(0, node0.getType());
887:       assertFalse(node0.isVoid());
888:       assertFalse(node0.isBreak());
889:       assertFalse(node0.isSetterDef());
890:       assertFalse(node0.isComma());
891:       assertFalse(node0.isFalse());
892:       assertFalse(node0.isGetProp());
893:       assertFalse(node0.isThrow());
894:       assertFalse(node0.isString());
895:       assertFalse(node0.isObjectLit());
896:       assertFalse(node0.isContinue());
897:       assertFalse(node0.isDebugger());
898:       assertFalse(node0.isNot());
899:       assertFalse(node0.isFunction());
900:       assertFalse(node0.isCast());
901:       assertFalse(node0.isAnd());
902:       assertFalse(node0.hasChildren());
903:       assertEquals((-1), node0.getSourcePosition());
904:       assertFalse(node0.isDec());
905:       assertFalse(node0.isGetElem());
906:       assertFalse(node0.isOr());
907:       assertFalse(node0.isAssign());
908:       assertFalse(node0.isNumber());
909:       assertFalse(node0.isTypeOf());
910:       assertFalse(node0.hasOneChild());
911:       assertFalse(node0.isLabel());
912:       assertFalse(node0.isReturn());
913:       assertFalse(node0.isAssignAdd());
914:       assertFalse(node0.isDo());
915:       assertFalse(node0.isWhile());
916:       assertFalse(node0.isExprResult());
917:       assertFalse(node0.hasMoreThanOneChild());
918:       assertFalse(node0.isWith());
919:       assertEquals((-1), node0.getLineno());
920:       assertFalse(node0.isInstanceOf());
921:       assertFalse(node0.isCall());
922:       assertFalse(node0.isName());
923:       assertFalse(node0.isNull());
924:       assertFalse(node0.isThis());
925:       assertEquals(0, node0.getChildCount());
926:       assertFalse(node0.isVar());
927:       assertFalse(node0.isAdd());
928:       assertFalse(node0.isBlock());
929:       assertFalse(node0.isHook());
930:       assertFalse(node0.isNew());
931:       assertFalse(node0.isDefaultCase());
932:       assertFalse(node0.isScript());
933:       assertEquals((-1), node0.getCharno());
934:       assertFalse(node0.isArrayLit());
935:       assertFalse(node0.isStringKey());
936:       assertFalse(node0.isParamList());
937:       assertFalse(node0.isSwitch());
938:       assertFalse(node0.isLabelName());
939:       assertFalse(node1.isLabel());
940:       assertFalse(node1.isAssignAdd());
941:       assertFalse(node1.isReturn());
942:       assertFalse(node1.hasMoreThanOneChild());
943:       assertFalse(node1.isNumber());
944:       assertFalse(node1.isOr());
945:       assertFalse(node1.isDec());
946:       assertFalse(node1.isAssign());
947:       assertFalse(node1.isLabelName());
948:       assertEquals(57, node1.getLineno());
949:       assertFalse(node1.isGetElem());
950:       assertFalse(node1.isContinue());
951:       assertFalse(node1.isCast());
952:       assertFalse(node1.isNew());
953:       assertFalse(node1.isAdd());
954:       assertFalse(node1.isVar());
955:       assertFalse(node1.isSetterDef());
956:       assertFalse(node1.isDo());
957:       assertFalse(node1.isGetProp());
958:       assertFalse(node1.isNull());
959:       assertFalse(node1.isObjectLit());
960:       assertFalse(node1.isComma());
961:       assertFalse(node1.isName());
962:       assertFalse(node1.isFalse());
963:       assertFalse(node1.isCall());
964:       assertFalse(node1.isAnd());
965:       assertEquals(233521, node1.getSourcePosition());
966:       assertFalse(node1.isVoid());
967:       assertFalse(node1.isBreak());
968:       assertFalse(node1.isExprResult());
969:       assertFalse(node1.isDebugger());
970:       assertFalse(node1.isNot());
971:       assertTrue(node1.hasOneChild());
972:       assertFalse(node1.isWhile());
973:       assertFalse(node1.isString());
974:       assertTrue(node1.hasChildren());
975:       assertFalse(node1.isNE());
976:       assertFalse(node1.isIn());
977:       assertFalse(node1.isGetterDef());
978:       assertEquals(1, node1.getChildCount());
979:       assertFalse(node1.isArrayLit());
980:       assertFalse(node1.isIf());
981:       assertFalse(node1.isSwitch());
982:       assertFalse(node1.isDelProp());
983:       assertTrue(node1.isTypeOf());
984:       assertEquals(32, node1.getType());
985:       assertFalse(node1.isTrue());
986:       assertFalse(node1.isFunction());
987:       assertFalse(node1.isEmpty());
988:       assertFalse(node1.isThrow());
989:       assertFalse(node1.isDefaultCase());
990:       assertFalse(node1.isInc());
991:       assertFalse(node1.isParamList());
992:       assertFalse(node1.isInstanceOf());
993:       assertEquals(49, node1.getCharno());
994:       assertFalse(node1.isThis());
995:       assertFalse(node1.isWith());
996:       assertFalse(node1.isCatch());
997:       assertFalse(node1.isStringKey());
998:       assertFalse(node1.isBlock());
999:       assertFalse(node1.isTry());
1000:       assertFalse(node1.isRegExp());
1001:       assertFalse(node1.isHook());
1002:       assertFalse(node1.isCase());
1003:       assertFalse(node1.isFor());
1004:       assertFalse(node1.isScript());
1005:       assertNotNull(node1);
1006:       assertEquals(48, Node.DIRECTIVES);
1007:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1008:       assertEquals(8, Node.FLAG_NO_THROWS);
1009:       assertEquals(55, Node.INFERRED_FUNCTION);
1010:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1011:       assertEquals(39, Node.EMPTY_BLOCK);
1012:       assertEquals(4095, Node.COLUMN_MASK);
1013:       assertEquals(53, Node.INPUT_ID);
1014:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1015:       assertEquals(52, Node.LENGTH);
1016:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1017:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1018:       assertEquals(29, Node.JSDOC_INFO_PROP);
1019:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1020:       assertEquals(49, Node.DIRECT_EVAL);
1021:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1022:       assertEquals(56, Node.CHANGE_TIME);
1023:       assertEquals(36, Node.QUOTED_PROP);
1024:       assertEquals(57, Node.REFLECTED_OBJECT);
1025:       assertEquals(32, Node.INCRDECR_PROP);
1026:       assertEquals(37, Node.OPT_ARG_NAME);
1027:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1028:       assertEquals(30, Node.VAR_ARGS_NAME);
1029:       assertEquals(1, Node.DECR_FLAG);
1030:       assertEquals(57, Node.LAST_PROP);
1031:       assertEquals(2, Node.POST_FLAG);
1032:       assertEquals(12, Node.COLUMN_BITS);
1033:       assertEquals(47, Node.IS_DISPATCHER);
1034:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1035:       assertEquals(54, Node.SLASH_V);
1036:       assertEquals(40, Node.ORIGINALNAME_PROP);
1037:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1038:       assertEquals(50, Node.FREE_CALL);
1039:       assertEquals(43, Node.IS_CONSTANT_NAME);
1040:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1041:       assertEquals(46, Node.IS_NAMESPACE);
1042:       assertEquals(55, Node.INFERRED_FUNCTION);
1043:       assertEquals(4095, Node.COLUMN_MASK);
1044:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1045:       assertEquals(8, Node.FLAG_NO_THROWS);
1046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1047:       assertEquals(36, Node.QUOTED_PROP);
1048:       assertEquals(48, Node.DIRECTIVES);
1049:       assertEquals(43, Node.IS_CONSTANT_NAME);
1050:       assertEquals(52, Node.LENGTH);
1051:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1052:       assertEquals(40, Node.ORIGINALNAME_PROP);
1053:       assertEquals(29, Node.JSDOC_INFO_PROP);
1054:       assertEquals(53, Node.INPUT_ID);
1055:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1056:       assertEquals(39, Node.EMPTY_BLOCK);
1057:       assertEquals(57, Node.LAST_PROP);
1058:       assertEquals(2, Node.POST_FLAG);
1059:       assertEquals(30, Node.VAR_ARGS_NAME);
1060:       assertEquals(47, Node.IS_DISPATCHER);
1061:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1062:       assertEquals(1, Node.DECR_FLAG);
1063:       assertEquals(49, Node.DIRECT_EVAL);
1064:       assertEquals(32, Node.INCRDECR_PROP);
1065:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1066:       assertEquals(37, Node.OPT_ARG_NAME);
1067:       assertEquals(56, Node.CHANGE_TIME);
1068:       assertEquals(57, Node.REFLECTED_OBJECT);
1069:       assertEquals(46, Node.IS_NAMESPACE);
1070:       assertEquals(54, Node.SLASH_V);
1071:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1072:       assertEquals(50, Node.FREE_CALL);
1073:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1074:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1075:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1076:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1077:       assertEquals(12, Node.COLUMN_BITS);
1078:       assertFalse(node1.equals((Object)node0));
1079:       
1080:       Node node2 = null;
1081:       try {
1082:         node2 = new Node(306654261, node1, node0, node0, node0);
1083:         fail("Expecting exception: IllegalArgumentException");
1084:       
1085:       } catch(IllegalArgumentException e) {
1086:          //
1087:          // no message in exception (getMessage() returned null)
1088:          //
1089:          verifyException("com.google.common.base.Preconditions", e);
1090:       }
1091:   }
1092: }
RegularFileObject[/tmp/EvoSuite_135_1628255806877/com/google/javascript/rhino/Node_135_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:46 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_135_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_135_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_135_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:47.003 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertNotNull(node0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

TreeSet<String> treeSet0 = new TreeSet<String>();
assertNotNull(treeSet0);

NavigableSet<String> navigableSet0 = new TreeSet<String>();
assertTrue(navigableSet0.isEmpty());
assertEquals(0, navigableSet0.size());
assertNotNull(navigableSet0);

node0.setDirectives(navigableSet0);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertTrue(navigableSet0.isEmpty());
assertEquals(0, navigableSet0.size());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

node0.addSuppression("this");
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

boolean boolean0 = node0.isOr();
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);

boolean boolean1 = node0.isEquivalentTo(node0);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertTrue(boolean1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertFalse(boolean1 == boolean0);

Node node1 = new Node(32, node0, 57, 49);
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isInc());
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertEquals(0, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isString());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isExprResult());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isLabelName());
assertEquals(57, node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isVar());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isGetProp());
assertFalse(node1.isNull());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isAnd());
assertEquals(233521, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isDelProp());
assertTrue(node1.isTypeOf());
assertEquals(32, node1.getType());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isEmpty());
assertFalse(node1.isThrow());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInc());
assertFalse(node1.isParamList());
assertFalse(node1.isInstanceOf());
assertEquals(49, node1.getCharno());
assertFalse(node1.isThis());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isScript());
assertNotNull(node1);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(306654261, node1, node0, node0, node0);

[MASTER] 13:16:52.891 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_152_1628255812470/com/google/javascript/rhino/Node_152_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_152_1628255812470/com/google/javascript/rhino/Node_152_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:52.892 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:52.892 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:52.893 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 522
[MASTER] 13:16:52.894 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_152_1628255812470/com/google/javascript/rhino/Node_152_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.NavigableSet;
12: import java.util.TreeSet;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_152_tmp__ESTest extends Node_152_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = new Node(0);
23:       assertFalse(node0.hasOneChild());
24:       assertFalse(node0.isNumber());
25:       assertEquals((-1), node0.getSourcePosition());
26:       assertFalse(node0.isNot());
27:       assertFalse(node0.isScript());
28:       assertFalse(node0.isObjectLit());
29:       assertFalse(node0.isAssignAdd());
30:       assertFalse(node0.isLabel());
31:       assertFalse(node0.isAnd());
32:       assertFalse(node0.isLabelName());
33:       assertFalse(node0.isFalse());
34:       assertFalse(node0.isContinue());
35:       assertFalse(node0.isCast());
36:       assertFalse(node0.isVar());
37:       assertFalse(node0.isWhile());
38:       assertFalse(node0.isString());
39:       assertFalse(node0.isDo());
40:       assertFalse(node0.isNew());
41:       assertFalse(node0.isGetProp());
42:       assertFalse(node0.isAdd());
43:       assertFalse(node0.isOr());
44:       assertFalse(node0.isReturn());
45:       assertFalse(node0.isNull());
46:       assertFalse(node0.isDec());
47:       assertFalse(node0.isBreak());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isComma());
50:       assertFalse(node0.isAssign());
51:       assertFalse(node0.isVoid());
52:       assertFalse(node0.isDelProp());
53:       assertFalse(node0.isName());
54:       assertFalse(node0.isTypeOf());
55:       assertFalse(node0.isGetElem());
56:       assertFalse(node0.isCall());
57:       assertEquals(0, node0.getType());
58:       assertFalse(node0.isExprResult());
59:       assertFalse(node0.isArrayLit());
60:       assertFalse(node0.isTry());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isTrue());
63:       assertFalse(node0.isFor());
64:       assertFalse(node0.isDefaultCase());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isEmpty());
67:       assertEquals(0, node0.getChildCount());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isFunction());
70:       assertFalse(node0.isSwitch());
71:       assertFalse(node0.isHook());
72:       assertFalse(node0.isStringKey());
73:       assertFalse(node0.isThrow());
74:       assertEquals((-1), node0.getCharno());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isCase());
77:       assertFalse(node0.isSetterDef());
78:       assertFalse(node0.isInc());
79:       assertFalse(node0.isInstanceOf());
80:       assertFalse(node0.isIn());
81:       assertFalse(node0.hasMoreThanOneChild());
82:       assertEquals((-1), node0.getLineno());
83:       assertFalse(node0.isNE());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isIf());
86:       assertFalse(node0.isWith());
87:       assertFalse(node0.isRegExp());
88:       assertFalse(node0.isCatch());
89:       assertNotNull(node0);
90:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
91:       assertEquals(50, Node.FREE_CALL);
92:       assertEquals(40, Node.ORIGINALNAME_PROP);
93:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
94:       assertEquals(52, Node.LENGTH);
95:       assertEquals(8, Node.FLAG_NO_THROWS);
96:       assertEquals(39, Node.EMPTY_BLOCK);
97:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
98:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
99:       assertEquals(57, Node.LAST_PROP);
100:       assertEquals(30, Node.VAR_ARGS_NAME);
101:       assertEquals(1, Node.DECR_FLAG);
102:       assertEquals(51, Node.STATIC_SOURCE_FILE);
103:       assertEquals(46, Node.IS_NAMESPACE);
104:       assertEquals(54, Node.SLASH_V);
105:       assertEquals(43, Node.IS_CONSTANT_NAME);
106:       assertEquals(29, Node.JSDOC_INFO_PROP);
107:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
108:       assertEquals(47, Node.IS_DISPATCHER);
109:       assertEquals(2, Node.POST_FLAG);
110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
111:       assertEquals(53, Node.INPUT_ID);
112:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
113:       assertEquals(12, Node.COLUMN_BITS);
114:       assertEquals(32, Node.INCRDECR_PROP);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
117:       assertEquals(15, Node.NO_SIDE_EFFECTS);
118:       assertEquals(36, Node.QUOTED_PROP);
119:       assertEquals(4095, Node.COLUMN_MASK);
120:       assertEquals(55, Node.INFERRED_FUNCTION);
121:       assertEquals(48, Node.DIRECTIVES);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(57, Node.REFLECTED_OBJECT);
124:       assertEquals(56, Node.CHANGE_TIME);
125:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
126:       
127:       TreeSet<String> treeSet0 = new TreeSet<String>();
128:       assertNotNull(treeSet0);
129:       
130:       NavigableSet<String> navigableSet0 = treeSet0.tailSet("k.~!4+De5arG>r", false);
131:       assertEquals(0, navigableSet0.size());
132:       assertTrue(navigableSet0.isEmpty());
133:       assertNotNull(navigableSet0);
134:       assertFalse(treeSet0.contains("k.~!4+De5arG>r"));
135:       assertFalse(navigableSet0.contains("k.~!4+De5arG>r"));
136:       
137:       node0.setDirectives(navigableSet0);
138:       assertFalse(node0.hasOneChild());
139:       assertFalse(node0.isNumber());
140:       assertEquals((-1), node0.getSourcePosition());
141:       assertFalse(node0.isNot());
142:       assertFalse(node0.isScript());
143:       assertFalse(node0.isObjectLit());
144:       assertFalse(node0.isAssignAdd());
145:       assertFalse(node0.isLabel());
146:       assertFalse(node0.isAnd());
147:       assertFalse(node0.isLabelName());
148:       assertFalse(node0.isFalse());
149:       assertFalse(node0.isContinue());
150:       assertFalse(node0.isCast());
151:       assertFalse(node0.isVar());
152:       assertFalse(node0.isWhile());
153:       assertFalse(node0.isString());
154:       assertFalse(node0.isDo());
155:       assertFalse(node0.isNew());
156:       assertFalse(node0.isGetProp());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isOr());
159:       assertFalse(node0.isReturn());
160:       assertFalse(node0.isNull());
161:       assertFalse(node0.isDec());
162:       assertFalse(node0.isBreak());
163:       assertFalse(node0.hasChildren());
164:       assertFalse(node0.isComma());
165:       assertFalse(node0.isAssign());
166:       assertFalse(node0.isVoid());
167:       assertFalse(node0.isDelProp());
168:       assertFalse(node0.isName());
169:       assertFalse(node0.isTypeOf());
170:       assertFalse(node0.isGetElem());
171:       assertFalse(node0.isCall());
172:       assertEquals(0, node0.getType());
173:       assertFalse(node0.isExprResult());
174:       assertFalse(node0.isArrayLit());
175:       assertFalse(node0.isTry());
176:       assertFalse(node0.isDebugger());
177:       assertFalse(node0.isTrue());
178:       assertFalse(node0.isFor());
179:       assertFalse(node0.isDefaultCase());
180:       assertFalse(node0.isGetterDef());
181:       assertFalse(node0.isEmpty());
182:       assertEquals(0, node0.getChildCount());
183:       assertFalse(node0.isParamList());
184:       assertFalse(node0.isFunction());
185:       assertFalse(node0.isSwitch());
186:       assertFalse(node0.isHook());
187:       assertFalse(node0.isStringKey());
188:       assertFalse(node0.isThrow());
189:       assertEquals((-1), node0.getCharno());
190:       assertFalse(node0.isBlock());
191:       assertFalse(node0.isCase());
192:       assertFalse(node0.isSetterDef());
193:       assertFalse(node0.isInc());
194:       assertFalse(node0.isInstanceOf());
195:       assertFalse(node0.isIn());
196:       assertFalse(node0.hasMoreThanOneChild());
197:       assertEquals((-1), node0.getLineno());
198:       assertFalse(node0.isNE());
199:       assertFalse(node0.isThis());
200:       assertFalse(node0.isIf());
201:       assertFalse(node0.isWith());
202:       assertFalse(node0.isRegExp());
203:       assertFalse(node0.isCatch());
204:       assertEquals(0, navigableSet0.size());
205:       assertTrue(navigableSet0.isEmpty());
206:       assertFalse(treeSet0.contains("k.~!4+De5arG>r"));
207:       assertFalse(navigableSet0.contains("k.~!4+De5arG>r"));
208:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
209:       assertEquals(50, Node.FREE_CALL);
210:       assertEquals(40, Node.ORIGINALNAME_PROP);
211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
212:       assertEquals(52, Node.LENGTH);
213:       assertEquals(8, Node.FLAG_NO_THROWS);
214:       assertEquals(39, Node.EMPTY_BLOCK);
215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
216:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(30, Node.VAR_ARGS_NAME);
219:       assertEquals(1, Node.DECR_FLAG);
220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
221:       assertEquals(46, Node.IS_NAMESPACE);
222:       assertEquals(54, Node.SLASH_V);
223:       assertEquals(43, Node.IS_CONSTANT_NAME);
224:       assertEquals(29, Node.JSDOC_INFO_PROP);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
229:       assertEquals(53, Node.INPUT_ID);
230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
231:       assertEquals(12, Node.COLUMN_BITS);
232:       assertEquals(32, Node.INCRDECR_PROP);
233:       assertEquals(49, Node.DIRECT_EVAL);
234:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
236:       assertEquals(36, Node.QUOTED_PROP);
237:       assertEquals(4095, Node.COLUMN_MASK);
238:       assertEquals(55, Node.INFERRED_FUNCTION);
239:       assertEquals(48, Node.DIRECTIVES);
240:       assertEquals(37, Node.OPT_ARG_NAME);
241:       assertEquals(57, Node.REFLECTED_OBJECT);
242:       assertEquals(56, Node.CHANGE_TIME);
243:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
244:       
245:       node0.addSuppression("this");
246:       assertFalse(node0.hasOneChild());
247:       assertFalse(node0.isNumber());
248:       assertEquals((-1), node0.getSourcePosition());
249:       assertFalse(node0.isNot());
250:       assertFalse(node0.isScript());
251:       assertFalse(node0.isObjectLit());
252:       assertFalse(node0.isAssignAdd());
253:       assertFalse(node0.isLabel());
254:       assertFalse(node0.isAnd());
255:       assertFalse(node0.isLabelName());
256:       assertFalse(node0.isFalse());
257:       assertFalse(node0.isContinue());
258:       assertFalse(node0.isCast());
259:       assertFalse(node0.isVar());
260:       assertFalse(node0.isWhile());
261:       assertFalse(node0.isString());
262:       assertFalse(node0.isDo());
263:       assertFalse(node0.isNew());
264:       assertFalse(node0.isGetProp());
265:       assertFalse(node0.isAdd());
266:       assertFalse(node0.isOr());
267:       assertFalse(node0.isReturn());
268:       assertFalse(node0.isNull());
269:       assertFalse(node0.isDec());
270:       assertFalse(node0.isBreak());
271:       assertFalse(node0.hasChildren());
272:       assertFalse(node0.isComma());
273:       assertFalse(node0.isAssign());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isDelProp());
276:       assertFalse(node0.isName());
277:       assertFalse(node0.isTypeOf());
278:       assertFalse(node0.isGetElem());
279:       assertFalse(node0.isCall());
280:       assertEquals(0, node0.getType());
281:       assertFalse(node0.isExprResult());
282:       assertFalse(node0.isArrayLit());
283:       assertFalse(node0.isTry());
284:       assertFalse(node0.isDebugger());
285:       assertFalse(node0.isTrue());
286:       assertFalse(node0.isFor());
287:       assertFalse(node0.isDefaultCase());
288:       assertFalse(node0.isGetterDef());
289:       assertFalse(node0.isEmpty());
290:       assertEquals(0, node0.getChildCount());
291:       assertFalse(node0.isParamList());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isSwitch());
294:       assertFalse(node0.isHook());
295:       assertFalse(node0.isStringKey());
296:       assertFalse(node0.isThrow());
297:       assertEquals((-1), node0.getCharno());
298:       assertFalse(node0.isBlock());
299:       assertFalse(node0.isCase());
300:       assertFalse(node0.isSetterDef());
301:       assertFalse(node0.isInc());
302:       assertFalse(node0.isInstanceOf());
303:       assertFalse(node0.isIn());
304:       assertFalse(node0.hasMoreThanOneChild());
305:       assertEquals((-1), node0.getLineno());
306:       assertFalse(node0.isNE());
307:       assertFalse(node0.isThis());
308:       assertFalse(node0.isIf());
309:       assertFalse(node0.isWith());
310:       assertFalse(node0.isRegExp());
311:       assertFalse(node0.isCatch());
312:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
313:       assertEquals(50, Node.FREE_CALL);
314:       assertEquals(40, Node.ORIGINALNAME_PROP);
315:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
316:       assertEquals(52, Node.LENGTH);
317:       assertEquals(8, Node.FLAG_NO_THROWS);
318:       assertEquals(39, Node.EMPTY_BLOCK);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
321:       assertEquals(57, Node.LAST_PROP);
322:       assertEquals(30, Node.VAR_ARGS_NAME);
323:       assertEquals(1, Node.DECR_FLAG);
324:       assertEquals(51, Node.STATIC_SOURCE_FILE);
325:       assertEquals(46, Node.IS_NAMESPACE);
326:       assertEquals(54, Node.SLASH_V);
327:       assertEquals(43, Node.IS_CONSTANT_NAME);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(2, Node.POST_FLAG);
332:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
333:       assertEquals(53, Node.INPUT_ID);
334:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
335:       assertEquals(12, Node.COLUMN_BITS);
336:       assertEquals(32, Node.INCRDECR_PROP);
337:       assertEquals(49, Node.DIRECT_EVAL);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
340:       assertEquals(36, Node.QUOTED_PROP);
341:       assertEquals(4095, Node.COLUMN_MASK);
342:       assertEquals(55, Node.INFERRED_FUNCTION);
343:       assertEquals(48, Node.DIRECTIVES);
344:       assertEquals(37, Node.OPT_ARG_NAME);
345:       assertEquals(57, Node.REFLECTED_OBJECT);
346:       assertEquals(56, Node.CHANGE_TIME);
347:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
348:       
349:       boolean boolean0 = node0.isOr();
350:       assertFalse(node0.hasOneChild());
351:       assertFalse(node0.isNumber());
352:       assertEquals((-1), node0.getSourcePosition());
353:       assertFalse(node0.isNot());
354:       assertFalse(node0.isScript());
355:       assertFalse(node0.isObjectLit());
356:       assertFalse(node0.isAssignAdd());
357:       assertFalse(node0.isLabel());
358:       assertFalse(node0.isAnd());
359:       assertFalse(node0.isLabelName());
360:       assertFalse(node0.isFalse());
361:       assertFalse(node0.isContinue());
362:       assertFalse(node0.isCast());
363:       assertFalse(node0.isVar());
364:       assertFalse(node0.isWhile());
365:       assertFalse(node0.isString());
366:       assertFalse(node0.isDo());
367:       assertFalse(node0.isNew());
368:       assertFalse(node0.isGetProp());
369:       assertFalse(node0.isAdd());
370:       assertFalse(node0.isOr());
371:       assertFalse(node0.isReturn());
372:       assertFalse(node0.isNull());
373:       assertFalse(node0.isDec());
374:       assertFalse(node0.isBreak());
375:       assertFalse(node0.hasChildren());
376:       assertFalse(node0.isComma());
377:       assertFalse(node0.isAssign());
378:       assertFalse(node0.isVoid());
379:       assertFalse(node0.isDelProp());
380:       assertFalse(node0.isName());
381:       assertFalse(node0.isTypeOf());
382:       assertFalse(node0.isGetElem());
383:       assertFalse(node0.isCall());
384:       assertEquals(0, node0.getType());
385:       assertFalse(node0.isExprResult());
386:       assertFalse(node0.isArrayLit());
387:       assertFalse(node0.isTry());
388:       assertFalse(node0.isDebugger());
389:       assertFalse(node0.isTrue());
390:       assertFalse(node0.isFor());
391:       assertFalse(node0.isDefaultCase());
392:       assertFalse(node0.isGetterDef());
393:       assertFalse(node0.isEmpty());
394:       assertEquals(0, node0.getChildCount());
395:       assertFalse(node0.isParamList());
396:       assertFalse(node0.isFunction());
397:       assertFalse(node0.isSwitch());
398:       assertFalse(node0.isHook());
399:       assertFalse(node0.isStringKey());
400:       assertFalse(node0.isThrow());
401:       assertEquals((-1), node0.getCharno());
402:       assertFalse(node0.isBlock());
403:       assertFalse(node0.isCase());
404:       assertFalse(node0.isSetterDef());
405:       assertFalse(node0.isInc());
406:       assertFalse(node0.isInstanceOf());
407:       assertFalse(node0.isIn());
408:       assertFalse(node0.hasMoreThanOneChild());
409:       assertEquals((-1), node0.getLineno());
410:       assertFalse(node0.isNE());
411:       assertFalse(node0.isThis());
412:       assertFalse(node0.isIf());
413:       assertFalse(node0.isWith());
414:       assertFalse(node0.isRegExp());
415:       assertFalse(node0.isCatch());
416:       assertFalse(boolean0);
417:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(40, Node.ORIGINALNAME_PROP);
420:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
421:       assertEquals(52, Node.LENGTH);
422:       assertEquals(8, Node.FLAG_NO_THROWS);
423:       assertEquals(39, Node.EMPTY_BLOCK);
424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
425:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
426:       assertEquals(57, Node.LAST_PROP);
427:       assertEquals(30, Node.VAR_ARGS_NAME);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
430:       assertEquals(46, Node.IS_NAMESPACE);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(43, Node.IS_CONSTANT_NAME);
433:       assertEquals(29, Node.JSDOC_INFO_PROP);
434:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertEquals(2, Node.POST_FLAG);
437:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
438:       assertEquals(53, Node.INPUT_ID);
439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
440:       assertEquals(12, Node.COLUMN_BITS);
441:       assertEquals(32, Node.INCRDECR_PROP);
442:       assertEquals(49, Node.DIRECT_EVAL);
443:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
444:       assertEquals(15, Node.NO_SIDE_EFFECTS);
445:       assertEquals(36, Node.QUOTED_PROP);
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(55, Node.INFERRED_FUNCTION);
448:       assertEquals(48, Node.DIRECTIVES);
449:       assertEquals(37, Node.OPT_ARG_NAME);
450:       assertEquals(57, Node.REFLECTED_OBJECT);
451:       assertEquals(56, Node.CHANGE_TIME);
452:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
453:       
454:       Iterable<Node> iterable0 = node0.children();
455:       assertFalse(node0.hasOneChild());
456:       assertFalse(node0.isNumber());
457:       assertEquals((-1), node0.getSourcePosition());
458:       assertFalse(node0.isNot());
459:       assertFalse(node0.isScript());
460:       assertFalse(node0.isObjectLit());
461:       assertFalse(node0.isAssignAdd());
462:       assertFalse(node0.isLabel());
463:       assertFalse(node0.isAnd());
464:       assertFalse(node0.isLabelName());
465:       assertFalse(node0.isFalse());
466:       assertFalse(node0.isContinue());
467:       assertFalse(node0.isCast());
468:       assertFalse(node0.isVar());
469:       assertFalse(node0.isWhile());
470:       assertFalse(node0.isString());
471:       assertFalse(node0.isDo());
472:       assertFalse(node0.isNew());
473:       assertFalse(node0.isGetProp());
474:       assertFalse(node0.isAdd());
475:       assertFalse(node0.isOr());
476:       assertFalse(node0.isReturn());
477:       assertFalse(node0.isNull());
478:       assertFalse(node0.isDec());
479:       assertFalse(node0.isBreak());
480:       assertFalse(node0.hasChildren());
481:       assertFalse(node0.isComma());
482:       assertFalse(node0.isAssign());
483:       assertFalse(node0.isVoid());
484:       assertFalse(node0.isDelProp());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isTypeOf());
487:       assertFalse(node0.isGetElem());
488:       assertFalse(node0.isCall());
489:       assertEquals(0, node0.getType());
490:       assertFalse(node0.isExprResult());
491:       assertFalse(node0.isArrayLit());
492:       assertFalse(node0.isTry());
493:       assertFalse(node0.isDebugger());
494:       assertFalse(node0.isTrue());
495:       assertFalse(node0.isFor());
496:       assertFalse(node0.isDefaultCase());
497:       assertFalse(node0.isGetterDef());
498:       assertFalse(node0.isEmpty());
499:       assertEquals(0, node0.getChildCount());
500:       assertFalse(node0.isParamList());
501:       assertFalse(node0.isFunction());
502:       assertFalse(node0.isSwitch());
503:       assertFalse(node0.isHook());
504:       assertFalse(node0.isStringKey());
505:       assertFalse(node0.isThrow());
506:       assertEquals((-1), node0.getCharno());
507:       assertFalse(node0.isBlock());
508:       assertFalse(node0.isCase());
509:       assertFalse(node0.isSetterDef());
510:       assertFalse(node0.isInc());
511:       assertFalse(node0.isInstanceOf());
512:       assertFalse(node0.isIn());
513:       assertFalse(node0.hasMoreThanOneChild());
514:       assertEquals((-1), node0.getLineno());
515:       assertFalse(node0.isNE());
516:       assertFalse(node0.isThis());
517:       assertFalse(node0.isIf());
518:       assertFalse(node0.isWith());
519:       assertFalse(node0.isRegExp());
520:       assertFalse(node0.isCatch());
521:       assertNotNull(iterable0);
522:       assertFalse(iterable0.contains(node0));
523:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
524:       assertEquals(50, Node.FREE_CALL);
525:       assertEquals(40, Node.ORIGINALNAME_PROP);
526:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
527:       assertEquals(52, Node.LENGTH);
528:       assertEquals(8, Node.FLAG_NO_THROWS);
529:       assertEquals(39, Node.EMPTY_BLOCK);
530:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(57, Node.LAST_PROP);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(1, Node.DECR_FLAG);
535:       assertEquals(51, Node.STATIC_SOURCE_FILE);
536:       assertEquals(46, Node.IS_NAMESPACE);
537:       assertEquals(54, Node.SLASH_V);
538:       assertEquals(43, Node.IS_CONSTANT_NAME);
539:       assertEquals(29, Node.JSDOC_INFO_PROP);
540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
541:       assertEquals(47, Node.IS_DISPATCHER);
542:       assertEquals(2, Node.POST_FLAG);
543:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
544:       assertEquals(53, Node.INPUT_ID);
545:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(32, Node.INCRDECR_PROP);
548:       assertEquals(49, Node.DIRECT_EVAL);
549:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
551:       assertEquals(36, Node.QUOTED_PROP);
552:       assertEquals(4095, Node.COLUMN_MASK);
553:       assertEquals(55, Node.INFERRED_FUNCTION);
554:       assertEquals(48, Node.DIRECTIVES);
555:       assertEquals(37, Node.OPT_ARG_NAME);
556:       assertEquals(57, Node.REFLECTED_OBJECT);
557:       assertEquals(56, Node.CHANGE_TIME);
558:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
559:       
560:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
561:       assertFalse(node0.hasOneChild());
562:       assertFalse(node0.isNumber());
563:       assertEquals((-1), node0.getSourcePosition());
564:       assertFalse(node0.isNot());
565:       assertFalse(node0.isScript());
566:       assertFalse(node0.isObjectLit());
567:       assertFalse(node0.isAssignAdd());
568:       assertFalse(node0.isLabel());
569:       assertFalse(node0.isAnd());
570:       assertFalse(node0.isLabelName());
571:       assertFalse(node0.isFalse());
572:       assertFalse(node0.isContinue());
573:       assertFalse(node0.isCast());
574:       assertFalse(node0.isVar());
575:       assertFalse(node0.isWhile());
576:       assertFalse(node0.isString());
577:       assertFalse(node0.isDo());
578:       assertFalse(node0.isNew());
579:       assertFalse(node0.isGetProp());
580:       assertFalse(node0.isAdd());
581:       assertFalse(node0.isOr());
582:       assertFalse(node0.isReturn());
583:       assertFalse(node0.isNull());
584:       assertFalse(node0.isDec());
585:       assertFalse(node0.isBreak());
586:       assertFalse(node0.hasChildren());
587:       assertFalse(node0.isComma());
588:       assertFalse(node0.isAssign());
589:       assertFalse(node0.isVoid());
590:       assertFalse(node0.isDelProp());
591:       assertFalse(node0.isName());
592:       assertFalse(node0.isTypeOf());
593:       assertFalse(node0.isGetElem());
594:       assertFalse(node0.isCall());
595:       assertEquals(0, node0.getType());
596:       assertFalse(node0.isExprResult());
597:       assertFalse(node0.isArrayLit());
598:       assertFalse(node0.isTry());
599:       assertFalse(node0.isDebugger());
600:       assertFalse(node0.isTrue());
601:       assertFalse(node0.isFor());
602:       assertFalse(node0.isDefaultCase());
603:       assertFalse(node0.isGetterDef());
604:       assertFalse(node0.isEmpty());
605:       assertEquals(0, node0.getChildCount());
606:       assertFalse(node0.isParamList());
607:       assertFalse(node0.isFunction());
608:       assertFalse(node0.isSwitch());
609:       assertFalse(node0.isHook());
610:       assertFalse(node0.isStringKey());
611:       assertFalse(node0.isThrow());
612:       assertEquals((-1), node0.getCharno());
613:       assertFalse(node0.isBlock());
614:       assertFalse(node0.isCase());
615:       assertFalse(node0.isSetterDef());
616:       assertFalse(node0.isInc());
617:       assertFalse(node0.isInstanceOf());
618:       assertFalse(node0.isIn());
619:       assertFalse(node0.hasMoreThanOneChild());
620:       assertEquals((-1), node0.getLineno());
621:       assertFalse(node0.isNE());
622:       assertFalse(node0.isThis());
623:       assertFalse(node0.isIf());
624:       assertFalse(node0.isWith());
625:       assertFalse(node0.isRegExp());
626:       assertFalse(node0.isCatch());
627:       assertNotNull(node_FileLevelJsDocBuilder0);
628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
629:       assertEquals(50, Node.FREE_CALL);
630:       assertEquals(40, Node.ORIGINALNAME_PROP);
631:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
632:       assertEquals(52, Node.LENGTH);
633:       assertEquals(8, Node.FLAG_NO_THROWS);
634:       assertEquals(39, Node.EMPTY_BLOCK);
635:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
636:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
637:       assertEquals(57, Node.LAST_PROP);
638:       assertEquals(30, Node.VAR_ARGS_NAME);
639:       assertEquals(1, Node.DECR_FLAG);
640:       assertEquals(51, Node.STATIC_SOURCE_FILE);
641:       assertEquals(46, Node.IS_NAMESPACE);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(43, Node.IS_CONSTANT_NAME);
644:       assertEquals(29, Node.JSDOC_INFO_PROP);
645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
646:       assertEquals(47, Node.IS_DISPATCHER);
647:       assertEquals(2, Node.POST_FLAG);
648:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
649:       assertEquals(53, Node.INPUT_ID);
650:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
651:       assertEquals(12, Node.COLUMN_BITS);
652:       assertEquals(32, Node.INCRDECR_PROP);
653:       assertEquals(49, Node.DIRECT_EVAL);
654:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
655:       assertEquals(15, Node.NO_SIDE_EFFECTS);
656:       assertEquals(36, Node.QUOTED_PROP);
657:       assertEquals(4095, Node.COLUMN_MASK);
658:       assertEquals(55, Node.INFERRED_FUNCTION);
659:       assertEquals(48, Node.DIRECTIVES);
660:       assertEquals(37, Node.OPT_ARG_NAME);
661:       assertEquals(57, Node.REFLECTED_OBJECT);
662:       assertEquals(56, Node.CHANGE_TIME);
663:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
664:       
665:       node_FileLevelJsDocBuilder0.append("");
666:       assertFalse(node0.hasOneChild());
667:       assertFalse(node0.isNumber());
668:       assertEquals((-1), node0.getSourcePosition());
669:       assertFalse(node0.isNot());
670:       assertFalse(node0.isScript());
671:       assertFalse(node0.isObjectLit());
672:       assertFalse(node0.isAssignAdd());
673:       assertFalse(node0.isLabel());
674:       assertFalse(node0.isAnd());
675:       assertFalse(node0.isLabelName());
676:       assertFalse(node0.isFalse());
677:       assertFalse(node0.isContinue());
678:       assertFalse(node0.isCast());
679:       assertFalse(node0.isVar());
680:       assertFalse(node0.isWhile());
681:       assertFalse(node0.isString());
682:       assertFalse(node0.isDo());
683:       assertFalse(node0.isNew());
684:       assertFalse(node0.isGetProp());
685:       assertFalse(node0.isAdd());
686:       assertFalse(node0.isOr());
687:       assertFalse(node0.isReturn());
688:       assertFalse(node0.isNull());
689:       assertFalse(node0.isDec());
690:       assertFalse(node0.isBreak());
691:       assertFalse(node0.hasChildren());
692:       assertFalse(node0.isComma());
693:       assertFalse(node0.isAssign());
694:       assertFalse(node0.isVoid());
695:       assertFalse(node0.isDelProp());
696:       assertFalse(node0.isName());
697:       assertFalse(node0.isTypeOf());
698:       assertFalse(node0.isGetElem());
699:       assertFalse(node0.isCall());
700:       assertEquals(0, node0.getType());
701:       assertFalse(node0.isExprResult());
702:       assertFalse(node0.isArrayLit());
703:       assertFalse(node0.isTry());
704:       assertFalse(node0.isDebugger());
705:       assertFalse(node0.isTrue());
706:       assertFalse(node0.isFor());
707:       assertFalse(node0.isDefaultCase());
708:       assertFalse(node0.isGetterDef());
709:       assertFalse(node0.isEmpty());
710:       assertEquals(0, node0.getChildCount());
711:       assertFalse(node0.isParamList());
712:       assertFalse(node0.isFunction());
713:       assertFalse(node0.isSwitch());
714:       assertFalse(node0.isHook());
715:       assertFalse(node0.isStringKey());
716:       assertFalse(node0.isThrow());
717:       assertEquals((-1), node0.getCharno());
718:       assertFalse(node0.isBlock());
719:       assertFalse(node0.isCase());
720:       assertFalse(node0.isSetterDef());
721:       assertFalse(node0.isInc());
722:       assertFalse(node0.isInstanceOf());
723:       assertFalse(node0.isIn());
724:       assertFalse(node0.hasMoreThanOneChild());
725:       assertEquals((-1), node0.getLineno());
726:       assertFalse(node0.isNE());
727:       assertFalse(node0.isThis());
728:       assertFalse(node0.isIf());
729:       assertFalse(node0.isWith());
730:       assertFalse(node0.isRegExp());
731:       assertFalse(node0.isCatch());
732:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
733:       assertEquals(50, Node.FREE_CALL);
734:       assertEquals(40, Node.ORIGINALNAME_PROP);
735:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
736:       assertEquals(52, Node.LENGTH);
737:       assertEquals(8, Node.FLAG_NO_THROWS);
738:       assertEquals(39, Node.EMPTY_BLOCK);
739:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
740:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
741:       assertEquals(57, Node.LAST_PROP);
742:       assertEquals(30, Node.VAR_ARGS_NAME);
743:       assertEquals(1, Node.DECR_FLAG);
744:       assertEquals(51, Node.STATIC_SOURCE_FILE);
745:       assertEquals(46, Node.IS_NAMESPACE);
746:       assertEquals(54, Node.SLASH_V);
747:       assertEquals(43, Node.IS_CONSTANT_NAME);
748:       assertEquals(29, Node.JSDOC_INFO_PROP);
749:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
750:       assertEquals(47, Node.IS_DISPATCHER);
751:       assertEquals(2, Node.POST_FLAG);
752:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
753:       assertEquals(53, Node.INPUT_ID);
754:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
755:       assertEquals(12, Node.COLUMN_BITS);
756:       assertEquals(32, Node.INCRDECR_PROP);
757:       assertEquals(49, Node.DIRECT_EVAL);
758:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
760:       assertEquals(36, Node.QUOTED_PROP);
761:       assertEquals(4095, Node.COLUMN_MASK);
762:       assertEquals(55, Node.INFERRED_FUNCTION);
763:       assertEquals(48, Node.DIRECTIVES);
764:       assertEquals(37, Node.OPT_ARG_NAME);
765:       assertEquals(57, Node.REFLECTED_OBJECT);
766:       assertEquals(56, Node.CHANGE_TIME);
767:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
768:       
769:       boolean boolean1 = node0.isSetterDef();
770:       assertFalse(node0.hasOneChild());
771:       assertFalse(node0.isNumber());
772:       assertEquals((-1), node0.getSourcePosition());
773:       assertFalse(node0.isNot());
774:       assertFalse(node0.isScript());
775:       assertFalse(node0.isObjectLit());
776:       assertFalse(node0.isAssignAdd());
777:       assertFalse(node0.isLabel());
778:       assertFalse(node0.isAnd());
779:       assertFalse(node0.isLabelName());
780:       assertFalse(node0.isFalse());
781:       assertFalse(node0.isContinue());
782:       assertFalse(node0.isCast());
783:       assertFalse(node0.isVar());
784:       assertFalse(node0.isWhile());
785:       assertFalse(node0.isString());
786:       assertFalse(node0.isDo());
787:       assertFalse(node0.isNew());
788:       assertFalse(node0.isGetProp());
789:       assertFalse(node0.isAdd());
790:       assertFalse(node0.isOr());
791:       assertFalse(node0.isReturn());
792:       assertFalse(node0.isNull());
793:       assertFalse(node0.isDec());
794:       assertFalse(node0.isBreak());
795:       assertFalse(node0.hasChildren());
796:       assertFalse(node0.isComma());
797:       assertFalse(node0.isAssign());
798:       assertFalse(node0.isVoid());
799:       assertFalse(node0.isDelProp());
800:       assertFalse(node0.isName());
801:       assertFalse(node0.isTypeOf());
802:       assertFalse(node0.isGetElem());
803:       assertFalse(node0.isCall());
804:       assertEquals(0, node0.getType());
805:       assertFalse(node0.isExprResult());
806:       assertFalse(node0.isArrayLit());
807:       assertFalse(node0.isTry());
808:       assertFalse(node0.isDebugger());
809:       assertFalse(node0.isTrue());
810:       assertFalse(node0.isFor());
811:       assertFalse(node0.isDefaultCase());
812:       assertFalse(node0.isGetterDef());
813:       assertFalse(node0.isEmpty());
814:       assertEquals(0, node0.getChildCount());
815:       assertFalse(node0.isParamList());
816:       assertFalse(node0.isFunction());
817:       assertFalse(node0.isSwitch());
818:       assertFalse(node0.isHook());
819:       assertFalse(node0.isStringKey());
820:       assertFalse(node0.isThrow());
821:       assertEquals((-1), node0.getCharno());
822:       assertFalse(node0.isBlock());
823:       assertFalse(node0.isCase());
824:       assertFalse(node0.isSetterDef());
825:       assertFalse(node0.isInc());
826:       assertFalse(node0.isInstanceOf());
827:       assertFalse(node0.isIn());
828:       assertFalse(node0.hasMoreThanOneChild());
829:       assertEquals((-1), node0.getLineno());
830:       assertFalse(node0.isNE());
831:       assertFalse(node0.isThis());
832:       assertFalse(node0.isIf());
833:       assertFalse(node0.isWith());
834:       assertFalse(node0.isRegExp());
835:       assertFalse(node0.isCatch());
836:       assertFalse(boolean1);
837:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
838:       assertEquals(50, Node.FREE_CALL);
839:       assertEquals(40, Node.ORIGINALNAME_PROP);
840:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
841:       assertEquals(52, Node.LENGTH);
842:       assertEquals(8, Node.FLAG_NO_THROWS);
843:       assertEquals(39, Node.EMPTY_BLOCK);
844:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
845:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
846:       assertEquals(57, Node.LAST_PROP);
847:       assertEquals(30, Node.VAR_ARGS_NAME);
848:       assertEquals(1, Node.DECR_FLAG);
849:       assertEquals(51, Node.STATIC_SOURCE_FILE);
850:       assertEquals(46, Node.IS_NAMESPACE);
851:       assertEquals(54, Node.SLASH_V);
852:       assertEquals(43, Node.IS_CONSTANT_NAME);
853:       assertEquals(29, Node.JSDOC_INFO_PROP);
854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
855:       assertEquals(47, Node.IS_DISPATCHER);
856:       assertEquals(2, Node.POST_FLAG);
857:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
858:       assertEquals(53, Node.INPUT_ID);
859:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
860:       assertEquals(12, Node.COLUMN_BITS);
861:       assertEquals(32, Node.INCRDECR_PROP);
862:       assertEquals(49, Node.DIRECT_EVAL);
863:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
864:       assertEquals(15, Node.NO_SIDE_EFFECTS);
865:       assertEquals(36, Node.QUOTED_PROP);
866:       assertEquals(4095, Node.COLUMN_MASK);
867:       assertEquals(55, Node.INFERRED_FUNCTION);
868:       assertEquals(48, Node.DIRECTIVES);
869:       assertEquals(37, Node.OPT_ARG_NAME);
870:       assertEquals(57, Node.REFLECTED_OBJECT);
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
873:       assertTrue(boolean1 == boolean0);
874:       
875:       Node node1 = new Node(56, node0, node0, 30, 0);
876:       assertFalse(node0.hasOneChild());
877:       assertFalse(node0.isNumber());
878:       assertEquals((-1), node0.getSourcePosition());
879:       assertFalse(node0.isNot());
880:       assertFalse(node0.isScript());
881:       assertFalse(node0.isObjectLit());
882:       assertFalse(node0.isAssignAdd());
883:       assertFalse(node0.isLabel());
884:       assertFalse(node0.isAnd());
885:       assertFalse(node0.isLabelName());
886:       assertFalse(node0.isFalse());
887:       assertFalse(node0.isContinue());
888:       assertFalse(node0.isCast());
889:       assertFalse(node0.isVar());
890:       assertFalse(node0.isWhile());
891:       assertFalse(node0.isString());
892:       assertFalse(node0.isDo());
893:       assertFalse(node0.isNew());
894:       assertFalse(node0.isGetProp());
895:       assertFalse(node0.isAdd());
896:       assertFalse(node0.isOr());
897:       assertFalse(node0.isReturn());
898:       assertFalse(node0.isNull());
899:       assertFalse(node0.isDec());
900:       assertFalse(node0.isBreak());
901:       assertFalse(node0.hasChildren());
902:       assertFalse(node0.isComma());
903:       assertFalse(node0.isAssign());
904:       assertFalse(node0.isVoid());
905:       assertFalse(node0.isDelProp());
906:       assertFalse(node0.isName());
907:       assertFalse(node0.isTypeOf());
908:       assertFalse(node0.isGetElem());
909:       assertFalse(node0.isCall());
910:       assertEquals(0, node0.getType());
911:       assertFalse(node0.isExprResult());
912:       assertFalse(node0.isArrayLit());
913:       assertFalse(node0.isTry());
914:       assertFalse(node0.isDebugger());
915:       assertFalse(node0.isTrue());
916:       assertFalse(node0.isFor());
917:       assertFalse(node0.isDefaultCase());
918:       assertFalse(node0.isGetterDef());
919:       assertFalse(node0.isEmpty());
920:       assertEquals(0, node0.getChildCount());
921:       assertFalse(node0.isParamList());
922:       assertFalse(node0.isFunction());
923:       assertFalse(node0.isSwitch());
924:       assertFalse(node0.isHook());
925:       assertFalse(node0.isStringKey());
926:       assertFalse(node0.isThrow());
927:       assertEquals((-1), node0.getCharno());
928:       assertFalse(node0.isBlock());
929:       assertFalse(node0.isCase());
930:       assertFalse(node0.isSetterDef());
931:       assertFalse(node0.isInc());
932:       assertFalse(node0.isInstanceOf());
933:       assertFalse(node0.isIn());
934:       assertFalse(node0.hasMoreThanOneChild());
935:       assertEquals((-1), node0.getLineno());
936:       assertFalse(node0.isNE());
937:       assertFalse(node0.isThis());
938:       assertFalse(node0.isIf());
939:       assertFalse(node0.isWith());
940:       assertFalse(node0.isRegExp());
941:       assertFalse(node0.isCatch());
942:       assertFalse(node1.isStringKey());
943:       assertFalse(node1.isName());
944:       assertFalse(node1.isSetterDef());
945:       assertFalse(node1.isAdd());
946:       assertFalse(node1.isCall());
947:       assertFalse(node1.isParamList());
948:       assertEquals(56, node1.getType());
949:       assertFalse(node1.isNull());
950:       assertFalse(node1.hasMoreThanOneChild());
951:       assertFalse(node1.isCatch());
952:       assertFalse(node1.isTry());
953:       assertFalse(node1.isRegExp());
954:       assertFalse(node1.isTypeOf());
955:       assertFalse(node1.isDec());
956:       assertFalse(node1.isWhile());
957:       assertFalse(node1.isBlock());
958:       assertFalse(node1.isReturn());
959:       assertFalse(node1.isLabelName());
960:       assertFalse(node1.isAssign());
961:       assertFalse(node1.isDelProp());
962:       assertFalse(node1.isArrayLit());
963:       assertFalse(node1.isEmpty());
964:       assertFalse(node1.isGetElem());
965:       assertFalse(node1.isVoid());
966:       assertFalse(node1.isOr());
967:       assertFalse(node1.isNumber());
968:       assertFalse(node1.isGetterDef());
969:       assertFalse(node1.isTrue());
970:       assertFalse(node1.isDo());
971:       assertFalse(node1.isNew());
972:       assertFalse(node1.isAssignAdd());
973:       assertFalse(node1.isDefaultCase());
974:       assertFalse(node1.isVar());
975:       assertFalse(node1.isLabel());
976:       assertFalse(node1.isThrow());
977:       assertFalse(node1.isFalse());
978:       assertFalse(node1.isBreak());
979:       assertFalse(node1.isSwitch());
980:       assertEquals(122880, node1.getSourcePosition());
981:       assertFalse(node1.isCase());
982:       assertFalse(node1.isWith());
983:       assertFalse(node1.isNot());
984:       assertFalse(node1.isObjectLit());
985:       assertEquals(30, node1.getLineno());
986:       assertFalse(node1.isInstanceOf());
987:       assertFalse(node1.isString());
988:       assertFalse(node1.isScript());
989:       assertTrue(node1.hasChildren());
990:       assertFalse(node1.isExprResult());
991:       assertFalse(node1.isGetProp());
992:       assertFalse(node1.isComma());
993:       assertEquals(1, node1.getChildCount());
994:       assertFalse(node1.isFor());
995:       assertTrue(node1.hasOneChild());
996:       assertFalse(node1.isHook());
997:       assertFalse(node1.isThis());
998:       assertFalse(node1.isCast());
999:       assertFalse(node1.isDebugger());
1000:       assertFalse(node1.isIf());
1001:       assertFalse(node1.isNE());
1002:       assertEquals(0, node1.getCharno());
1003:       assertFalse(node1.isContinue());
1004:       assertFalse(node1.isAnd());
1005:       assertFalse(node1.isIn());
1006:       assertFalse(node1.isInc());
1007:       assertFalse(node1.isFunction());
1008:       assertNotNull(node1);
1009:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1010:       assertEquals(50, Node.FREE_CALL);
1011:       assertEquals(40, Node.ORIGINALNAME_PROP);
1012:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1013:       assertEquals(52, Node.LENGTH);
1014:       assertEquals(8, Node.FLAG_NO_THROWS);
1015:       assertEquals(39, Node.EMPTY_BLOCK);
1016:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1017:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1018:       assertEquals(57, Node.LAST_PROP);
1019:       assertEquals(30, Node.VAR_ARGS_NAME);
1020:       assertEquals(1, Node.DECR_FLAG);
1021:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1022:       assertEquals(46, Node.IS_NAMESPACE);
1023:       assertEquals(54, Node.SLASH_V);
1024:       assertEquals(43, Node.IS_CONSTANT_NAME);
1025:       assertEquals(29, Node.JSDOC_INFO_PROP);
1026:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1027:       assertEquals(47, Node.IS_DISPATCHER);
1028:       assertEquals(2, Node.POST_FLAG);
1029:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1030:       assertEquals(53, Node.INPUT_ID);
1031:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1032:       assertEquals(12, Node.COLUMN_BITS);
1033:       assertEquals(32, Node.INCRDECR_PROP);
1034:       assertEquals(49, Node.DIRECT_EVAL);
1035:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1036:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1037:       assertEquals(36, Node.QUOTED_PROP);
1038:       assertEquals(4095, Node.COLUMN_MASK);
1039:       assertEquals(55, Node.INFERRED_FUNCTION);
1040:       assertEquals(48, Node.DIRECTIVES);
1041:       assertEquals(37, Node.OPT_ARG_NAME);
1042:       assertEquals(57, Node.REFLECTED_OBJECT);
1043:       assertEquals(56, Node.CHANGE_TIME);
1044:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1045:       assertEquals(56, Node.CHANGE_TIME);
1046:       assertEquals(2, Node.POST_FLAG);
1047:       assertEquals(37, Node.OPT_ARG_NAME);
1048:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1049:       assertEquals(47, Node.IS_DISPATCHER);
1050:       assertEquals(32, Node.INCRDECR_PROP);
1051:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1052:       assertEquals(46, Node.IS_NAMESPACE);
1053:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1054:       assertEquals(53, Node.INPUT_ID);
1055:       assertEquals(29, Node.JSDOC_INFO_PROP);
1056:       assertEquals(36, Node.QUOTED_PROP);
1057:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1058:       assertEquals(49, Node.DIRECT_EVAL);
1059:       assertEquals(1, Node.DECR_FLAG);
1060:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1061:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1062:       assertEquals(12, Node.COLUMN_BITS);
1063:       assertEquals(4095, Node.COLUMN_MASK);
1064:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1065:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1066:       assertEquals(39, Node.EMPTY_BLOCK);
1067:       assertEquals(48, Node.DIRECTIVES);
1068:       assertEquals(57, Node.REFLECTED_OBJECT);
1069:       assertEquals(55, Node.INFERRED_FUNCTION);
1070:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1071:       assertEquals(50, Node.FREE_CALL);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1074:       assertEquals(52, Node.LENGTH);
1075:       assertEquals(43, Node.IS_CONSTANT_NAME);
1076:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1077:       assertEquals(54, Node.SLASH_V);
1078:       assertEquals(57, Node.LAST_PROP);
1079:       assertEquals(40, Node.ORIGINALNAME_PROP);
1080:       assertEquals(30, Node.VAR_ARGS_NAME);
1081:       assertFalse(node1.equals((Object)node0));
1082:       
1083:       Node node2 = node0.copyInformationFrom(node1);
1084:       assertFalse(node0.hasOneChild());
1085:       assertEquals(0, node0.getCharno());
1086:       assertFalse(node0.isNumber());
1087:       assertFalse(node0.isNot());
1088:       assertFalse(node0.isScript());
1089:       assertFalse(node0.isObjectLit());
1090:       assertFalse(node0.isAssignAdd());
1091:       assertFalse(node0.isLabel());
1092:       assertFalse(node0.isAnd());
1093:       assertFalse(node0.isLabelName());
1094:       assertFalse(node0.isFalse());
1095:       assertFalse(node0.isContinue());
1096:       assertFalse(node0.isCast());
1097:       assertFalse(node0.isVar());
1098:       assertFalse(node0.isWhile());
1099:       assertFalse(node0.isString());
1100:       assertFalse(node0.isDo());
1101:       assertFalse(node0.isNew());
1102:       assertFalse(node0.isGetProp());
1103:       assertFalse(node0.isAdd());
1104:       assertFalse(node0.isOr());
1105:       assertEquals(30, node0.getLineno());
1106:       assertFalse(node0.isReturn());
1107:       assertFalse(node0.isNull());
1108:       assertFalse(node0.isDec());
1109:       assertFalse(node0.isBreak());
1110:       assertFalse(node0.hasChildren());
1111:       assertFalse(node0.isComma());
1112:       assertFalse(node0.isAssign());
1113:       assertFalse(node0.isVoid());
1114:       assertFalse(node0.isDelProp());
1115:       assertFalse(node0.isName());
1116:       assertFalse(node0.isTypeOf());
1117:       assertFalse(node0.isGetElem());
1118:       assertFalse(node0.isCall());
1119:       assertEquals(0, node0.getType());
1120:       assertFalse(node0.isExprResult());
1121:       assertFalse(node0.isArrayLit());
1122:       assertFalse(node0.isTry());
1123:       assertFalse(node0.isDebugger());
1124:       assertFalse(node0.isTrue());
1125:       assertFalse(node0.isFor());
1126:       assertFalse(node0.isDefaultCase());
1127:       assertFalse(node0.isGetterDef());
1128:       assertFalse(node0.isEmpty());
1129:       assertEquals(0, node0.getChildCount());
1130:       assertFalse(node0.isParamList());
1131:       assertFalse(node0.isFunction());
1132:       assertFalse(node0.isSwitch());
1133:       assertFalse(node0.isHook());
1134:       assertFalse(node0.isStringKey());
1135:       assertFalse(node0.isThrow());
1136:       assertFalse(node0.isBlock());
1137:       assertFalse(node0.isCase());
1138:       assertFalse(node0.isSetterDef());
1139:       assertFalse(node0.isInc());
1140:       assertFalse(node0.isInstanceOf());
1141:       assertFalse(node0.isIn());
1142:       assertFalse(node0.hasMoreThanOneChild());
1143:       assertEquals(122880, node0.getSourcePosition());
1144:       assertFalse(node0.isNE());
1145:       assertFalse(node0.isThis());
1146:       assertFalse(node0.isIf());
1147:       assertFalse(node0.isWith());
1148:       assertFalse(node0.isRegExp());
1149:       assertFalse(node0.isCatch());
1150:       assertFalse(node1.isStringKey());
1151:       assertFalse(node1.isName());
1152:       assertFalse(node1.isSetterDef());
1153:       assertFalse(node1.isAdd());
1154:       assertFalse(node1.isCall());
1155:       assertFalse(node1.isParamList());
1156:       assertEquals(56, node1.getType());
1157:       assertFalse(node1.isNull());
1158:       assertFalse(node1.hasMoreThanOneChild());
1159:       assertFalse(node1.isCatch());
1160:       assertFalse(node1.isTry());
1161:       assertFalse(node1.isRegExp());
1162:       assertFalse(node1.isTypeOf());
1163:       assertFalse(node1.isDec());
1164:       assertFalse(node1.isWhile());
1165:       assertFalse(node1.isBlock());
1166:       assertFalse(node1.isReturn());
1167:       assertFalse(node1.isLabelName());
1168:       assertFalse(node1.isAssign());
1169:       assertFalse(node1.isDelProp());
1170:       assertFalse(node1.isArrayLit());
1171:       assertFalse(node1.isEmpty());
1172:       assertFalse(node1.isGetElem());
1173:       assertFalse(node1.isVoid());
1174:       assertFalse(node1.isOr());
1175:       assertFalse(node1.isNumber());
1176:       assertFalse(node1.isGetterDef());
1177:       assertFalse(node1.isTrue());
1178:       assertFalse(node1.isDo());
1179:       assertFalse(node1.isNew());
1180:       assertFalse(node1.isAssignAdd());
1181:       assertFalse(node1.isDefaultCase());
1182:       assertFalse(node1.isVar());
1183:       assertFalse(node1.isLabel());
1184:       assertFalse(node1.isThrow());
1185:       assertFalse(node1.isFalse());
1186:       assertFalse(node1.isBreak());
1187:       assertFalse(node1.isSwitch());
1188:       assertEquals(122880, node1.getSourcePosition());
1189:       assertFalse(node1.isCase());
1190:       assertFalse(node1.isWith());
1191:       assertFalse(node1.isNot());
1192:       assertFalse(node1.isObjectLit());
1193:       assertEquals(30, node1.getLineno());
1194:       assertFalse(node1.isInstanceOf());
1195:       assertFalse(node1.isString());
1196:       assertFalse(node1.isScript());
1197:       assertTrue(node1.hasChildren());
1198:       assertFalse(node1.isExprResult());
1199:       assertFalse(node1.isGetProp());
1200:       assertFalse(node1.isComma());
1201:       assertEquals(1, node1.getChildCount());
1202:       assertFalse(node1.isFor());
1203:       assertTrue(node1.hasOneChild());
1204:       assertFalse(node1.isHook());
1205:       assertFalse(node1.isThis());
1206:       assertFalse(node1.isCast());
1207:       assertFalse(node1.isDebugger());
1208:       assertFalse(node1.isIf());
1209:       assertFalse(node1.isNE());
1210:       assertEquals(0, node1.getCharno());
1211:       assertFalse(node1.isContinue());
1212:       assertFalse(node1.isAnd());
1213:       assertFalse(node1.isIn());
1214:       assertFalse(node1.isInc());
1215:       assertFalse(node1.isFunction());
1216:       assertFalse(node2.isCast());
1217:       assertFalse(node2.isAssign());
1218:       assertFalse(node2.isDec());
1219:       assertFalse(node2.hasChildren());
1220:       assertEquals(0, node2.getCharno());
1221:       assertFalse(node2.isExprResult());
1222:       assertFalse(node2.isTypeOf());
1223:       assertFalse(node2.isLabelName());
1224:       assertFalse(node2.isGetElem());
1225:       assertFalse(node2.hasMoreThanOneChild());
1226:       assertFalse(node2.isObjectLit());
1227:       assertFalse(node2.isInstanceOf());
1228:       assertFalse(node2.isAnd());
1229:       assertFalse(node2.isWith());
1230:       assertFalse(node2.isWhile());
1231:       assertFalse(node2.isReturn());
1232:       assertFalse(node2.isNot());
1233:       assertFalse(node2.isThis());
1234:       assertFalse(node2.isScript());
1235:       assertFalse(node2.isNumber());
1236:       assertFalse(node2.hasOneChild());
1237:       assertFalse(node2.isGetProp());
1238:       assertFalse(node2.isThrow());
1239:       assertFalse(node2.isFalse());
1240:       assertFalse(node2.isBlock());
1241:       assertFalse(node2.isHook());
1242:       assertEquals(122880, node2.getSourcePosition());
1243:       assertFalse(node2.isIn());
1244:       assertFalse(node2.isContinue());
1245:       assertFalse(node2.isSetterDef());
1246:       assertFalse(node2.isInc());
1247:       assertFalse(node2.isFor());
1248:       assertFalse(node2.isGetterDef());
1249:       assertFalse(node2.isDebugger());
1250:       assertFalse(node2.isFunction());
1251:       assertFalse(node2.isTrue());
1252:       assertFalse(node2.isRegExp());
1253:       assertFalse(node2.isVoid());
1254:       assertFalse(node2.isNE());
1255:       assertFalse(node2.isIf());
1256:       assertFalse(node2.isDelProp());
1257:       assertEquals(30, node2.getLineno());
1258:       assertFalse(node2.isArrayLit());
1259:       assertFalse(node2.isCatch());
1260:       assertFalse(node2.isString());
1261:       assertFalse(node2.isTry());
1262:       assertFalse(node2.isCase());
1263:       assertFalse(node2.isCall());
1264:       assertFalse(node2.isVar());
1265:       assertFalse(node2.isName());
1266:       assertFalse(node2.isStringKey());
1267:       assertFalse(node2.isNull());
1268:       assertFalse(node2.isSwitch());
1269:       assertFalse(node2.isParamList());
1270:       assertFalse(node2.isComma());
1271:       assertEquals(0, node2.getType());
1272:       assertFalse(node2.isBreak());
1273:       assertFalse(node2.isOr());
1274:       assertEquals(0, node2.getChildCount());
1275:       assertFalse(node2.isLabel());
1276:       assertFalse(node2.isDefaultCase());
1277:       assertFalse(node2.isAssignAdd());
1278:       assertFalse(node2.isEmpty());
1279:       assertFalse(node2.isAdd());
1280:       assertFalse(node2.isDo());
1281:       assertFalse(node2.isNew());
1282:       assertSame(node0, node2);
1283:       assertNotSame(node0, node1);
1284:       assertNotSame(node1, node2);
1285:       assertNotSame(node1, node0);
1286:       assertNotSame(node2, node1);
1287:       assertSame(node2, node0);
1288:       assertNotNull(node2);
1289:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1290:       assertEquals(50, Node.FREE_CALL);
1291:       assertEquals(40, Node.ORIGINALNAME_PROP);
1292:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1293:       assertEquals(52, Node.LENGTH);
1294:       assertEquals(8, Node.FLAG_NO_THROWS);
1295:       assertEquals(39, Node.EMPTY_BLOCK);
1296:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1297:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1298:       assertEquals(57, Node.LAST_PROP);
1299:       assertEquals(30, Node.VAR_ARGS_NAME);
1300:       assertEquals(1, Node.DECR_FLAG);
1301:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1302:       assertEquals(46, Node.IS_NAMESPACE);
1303:       assertEquals(54, Node.SLASH_V);
1304:       assertEquals(43, Node.IS_CONSTANT_NAME);
1305:       assertEquals(29, Node.JSDOC_INFO_PROP);
1306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1307:       assertEquals(47, Node.IS_DISPATCHER);
1308:       assertEquals(2, Node.POST_FLAG);
1309:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1310:       assertEquals(53, Node.INPUT_ID);
1311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1312:       assertEquals(12, Node.COLUMN_BITS);
1313:       assertEquals(32, Node.INCRDECR_PROP);
1314:       assertEquals(49, Node.DIRECT_EVAL);
1315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1317:       assertEquals(36, Node.QUOTED_PROP);
1318:       assertEquals(4095, Node.COLUMN_MASK);
1319:       assertEquals(55, Node.INFERRED_FUNCTION);
1320:       assertEquals(48, Node.DIRECTIVES);
1321:       assertEquals(37, Node.OPT_ARG_NAME);
1322:       assertEquals(57, Node.REFLECTED_OBJECT);
1323:       assertEquals(56, Node.CHANGE_TIME);
1324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1325:       assertEquals(56, Node.CHANGE_TIME);
1326:       assertEquals(2, Node.POST_FLAG);
1327:       assertEquals(37, Node.OPT_ARG_NAME);
1328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1329:       assertEquals(47, Node.IS_DISPATCHER);
1330:       assertEquals(32, Node.INCRDECR_PROP);
1331:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1332:       assertEquals(46, Node.IS_NAMESPACE);
1333:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1334:       assertEquals(53, Node.INPUT_ID);
1335:       assertEquals(29, Node.JSDOC_INFO_PROP);
1336:       assertEquals(36, Node.QUOTED_PROP);
1337:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1338:       assertEquals(49, Node.DIRECT_EVAL);
1339:       assertEquals(1, Node.DECR_FLAG);
1340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1341:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1342:       assertEquals(12, Node.COLUMN_BITS);
1343:       assertEquals(4095, Node.COLUMN_MASK);
1344:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1345:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1346:       assertEquals(39, Node.EMPTY_BLOCK);
1347:       assertEquals(48, Node.DIRECTIVES);
1348:       assertEquals(57, Node.REFLECTED_OBJECT);
1349:       assertEquals(55, Node.INFERRED_FUNCTION);
1350:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1351:       assertEquals(50, Node.FREE_CALL);
1352:       assertEquals(8, Node.FLAG_NO_THROWS);
1353:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1354:       assertEquals(52, Node.LENGTH);
1355:       assertEquals(43, Node.IS_CONSTANT_NAME);
1356:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1357:       assertEquals(54, Node.SLASH_V);
1358:       assertEquals(57, Node.LAST_PROP);
1359:       assertEquals(40, Node.ORIGINALNAME_PROP);
1360:       assertEquals(30, Node.VAR_ARGS_NAME);
1361:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1362:       assertEquals(50, Node.FREE_CALL);
1363:       assertEquals(40, Node.ORIGINALNAME_PROP);
1364:       assertEquals(8, Node.FLAG_NO_THROWS);
1365:       assertEquals(39, Node.EMPTY_BLOCK);
1366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1367:       assertEquals(52, Node.LENGTH);
1368:       assertEquals(57, Node.REFLECTED_OBJECT);
1369:       assertEquals(48, Node.DIRECTIVES);
1370:       assertEquals(54, Node.SLASH_V);
1371:       assertEquals(49, Node.DIRECT_EVAL);
1372:       assertEquals(1, Node.DECR_FLAG);
1373:       assertEquals(4095, Node.COLUMN_MASK);
1374:       assertEquals(32, Node.INCRDECR_PROP);
1375:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1376:       assertEquals(12, Node.COLUMN_BITS);
1377:       assertEquals(47, Node.IS_DISPATCHER);
1378:       assertEquals(2, Node.POST_FLAG);
1379:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1380:       assertEquals(37, Node.OPT_ARG_NAME);
1381:       assertEquals(29, Node.JSDOC_INFO_PROP);
1382:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1383:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1384:       assertEquals(46, Node.IS_NAMESPACE);
1385:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1386:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1387:       assertEquals(43, Node.IS_CONSTANT_NAME);
1388:       assertEquals(56, Node.CHANGE_TIME);
1389:       assertEquals(57, Node.LAST_PROP);
1390:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1391:       assertEquals(30, Node.VAR_ARGS_NAME);
1392:       assertEquals(36, Node.QUOTED_PROP);
1393:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1394:       assertEquals(53, Node.INPUT_ID);
1395:       assertEquals(55, Node.INFERRED_FUNCTION);
1396:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1397:       assertFalse(node0.equals((Object)node1));
1398:       assertFalse(node1.equals((Object)node0));
1399:       assertFalse(node2.equals((Object)node1));
1400:       
1401:       boolean boolean2 = node1.isEmpty();
1402:       assertFalse(node0.hasOneChild());
1403:       assertEquals(0, node0.getCharno());
1404:       assertFalse(node0.isNumber());
1405:       assertFalse(node0.isNot());
1406:       assertFalse(node0.isScript());
1407:       assertFalse(node0.isObjectLit());
1408:       assertFalse(node0.isAssignAdd());
1409:       assertFalse(node0.isLabel());
1410:       assertFalse(node0.isAnd());
1411:       assertFalse(node0.isLabelName());
1412:       assertFalse(node0.isFalse());
1413:       assertFalse(node0.isContinue());
1414:       assertFalse(node0.isCast());
1415:       assertFalse(node0.isVar());
1416:       assertFalse(node0.isWhile());
1417:       assertFalse(node0.isString());
1418:       assertFalse(node0.isDo());
1419:       assertFalse(node0.isNew());
1420:       assertFalse(node0.isGetProp());
1421:       assertFalse(node0.isAdd());
1422:       assertFalse(node0.isOr());
1423:       assertEquals(30, node0.getLineno());
1424:       assertFalse(node0.isReturn());
1425:       assertFalse(node0.isNull());
1426:       assertFalse(node0.isDec());
1427:       assertFalse(node0.isBreak());
1428:       assertFalse(node0.hasChildren());
1429:       assertFalse(node0.isComma());
1430:       assertFalse(node0.isAssign());
1431:       assertFalse(node0.isVoid());
1432:       assertFalse(node0.isDelProp());
1433:       assertFalse(node0.isName());
1434:       assertFalse(node0.isTypeOf());
1435:       assertFalse(node0.isGetElem());
1436:       assertFalse(node0.isCall());
1437:       assertEquals(0, node0.getType());
1438:       assertFalse(node0.isExprResult());
1439:       assertFalse(node0.isArrayLit());
1440:       assertFalse(node0.isTry());
1441:       assertFalse(node0.isDebugger());
1442:       assertFalse(node0.isTrue());
1443:       assertFalse(node0.isFor());
1444:       assertFalse(node0.isDefaultCase());
1445:       assertFalse(node0.isGetterDef());
1446:       assertFalse(node0.isEmpty());
1447:       assertEquals(0, node0.getChildCount());
1448:       assertFalse(node0.isParamList());
1449:       assertFalse(node0.isFunction());
1450:       assertFalse(node0.isSwitch());
1451:       assertFalse(node0.isHook());
1452:       assertFalse(node0.isStringKey());
1453:       assertFalse(node0.isThrow());
1454:       assertFalse(node0.isBlock());
1455:       assertFalse(node0.isCase());
1456:       assertFalse(node0.isSetterDef());
1457:       assertFalse(node0.isInc());
1458:       assertFalse(node0.isInstanceOf());
1459:       assertFalse(node0.isIn());
1460:       assertFalse(node0.hasMoreThanOneChild());
1461:       assertEquals(122880, node0.getSourcePosition());
1462:       assertFalse(node0.isNE());
1463:       assertFalse(node0.isThis());
1464:       assertFalse(node0.isIf());
1465:       assertFalse(node0.isWith());
1466:       assertFalse(node0.isRegExp());
1467:       assertFalse(node0.isCatch());
1468:       assertFalse(node1.isStringKey());
1469:       assertFalse(node1.isName());
1470:       assertFalse(node1.isSetterDef());
1471:       assertFalse(node1.isAdd());
1472:       assertFalse(node1.isCall());
1473:       assertFalse(node1.isParamList());
1474:       assertEquals(56, node1.getType());
1475:       assertFalse(node1.isNull());
1476:       assertFalse(node1.hasMoreThanOneChild());
1477:       assertFalse(node1.isCatch());
1478:       assertFalse(node1.isTry());
1479:       assertFalse(node1.isRegExp());
1480:       assertFalse(node1.isTypeOf());
1481:       assertFalse(node1.isDec());
1482:       assertFalse(node1.isWhile());
1483:       assertFalse(node1.isBlock());
1484:       assertFalse(node1.isReturn());
1485:       assertFalse(node1.isLabelName());
1486:       assertFalse(node1.isAssign());
1487:       assertFalse(node1.isDelProp());
1488:       assertFalse(node1.isArrayLit());
1489:       assertFalse(node1.isEmpty());
1490:       assertFalse(node1.isGetElem());
1491:       assertFalse(node1.isVoid());
1492:       assertFalse(node1.isOr());
1493:       assertFalse(node1.isNumber());
1494:       assertFalse(node1.isGetterDef());
1495:       assertFalse(node1.isTrue());
1496:       assertFalse(node1.isDo());
1497:       assertFalse(node1.isNew());
1498:       assertFalse(node1.isAssignAdd());
1499:       assertFalse(node1.isDefaultCase());
1500:       assertFalse(node1.isVar());
1501:       assertFalse(node1.isLabel());
1502:       assertFalse(node1.isThrow());
1503:       assertFalse(node1.isFalse());
1504:       assertFalse(node1.isBreak());
1505:       assertFalse(node1.isSwitch());
1506:       assertEquals(122880, node1.getSourcePosition());
1507:       assertFalse(node1.isCase());
1508:       assertFalse(node1.isWith());
1509:       assertFalse(node1.isNot());
1510:       assertFalse(node1.isObjectLit());
1511:       assertEquals(30, node1.getLineno());
1512:       assertFalse(node1.isInstanceOf());
1513:       assertFalse(node1.isString());
1514:       assertFalse(node1.isScript());
1515:       assertTrue(node1.hasChildren());
1516:       assertFalse(node1.isExprResult());
1517:       assertFalse(node1.isGetProp());
1518:       assertFalse(node1.isComma());
1519:       assertEquals(1, node1.getChildCount());
1520:       assertFalse(node1.isFor());
1521:       assertTrue(node1.hasOneChild());
1522:       assertFalse(node1.isHook());
1523:       assertFalse(node1.isThis());
1524:       assertFalse(node1.isCast());
1525:       assertFalse(node1.isDebugger());
1526:       assertFalse(node1.isIf());
1527:       assertFalse(node1.isNE());
1528:       assertEquals(0, node1.getCharno());
1529:       assertFalse(node1.isContinue());
1530:       assertFalse(node1.isAnd());
1531:       assertFalse(node1.isIn());
1532:       assertFalse(node1.isInc());
1533:       assertFalse(node1.isFunction());
1534:       assertSame(node0, node2);
1535:       assertNotSame(node0, node1);
1536:       assertNotSame(node1, node2);
1537:       assertNotSame(node1, node0);
1538:       assertFalse(boolean2);
1539:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1540:       assertEquals(50, Node.FREE_CALL);
1541:       assertEquals(40, Node.ORIGINALNAME_PROP);
1542:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1543:       assertEquals(52, Node.LENGTH);
1544:       assertEquals(8, Node.FLAG_NO_THROWS);
1545:       assertEquals(39, Node.EMPTY_BLOCK);
1546:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1547:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1548:       assertEquals(57, Node.LAST_PROP);
1549:       assertEquals(30, Node.VAR_ARGS_NAME);
1550:       assertEquals(1, Node.DECR_FLAG);
1551:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1552:       assertEquals(46, Node.IS_NAMESPACE);
1553:       assertEquals(54, Node.SLASH_V);
1554:       assertEquals(43, Node.IS_CONSTANT_NAME);
1555:       assertEquals(29, Node.JSDOC_INFO_PROP);
1556:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1557:       assertEquals(47, Node.IS_DISPATCHER);
1558:       assertEquals(2, Node.POST_FLAG);
1559:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1560:       assertEquals(53, Node.INPUT_ID);
1561:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1562:       assertEquals(12, Node.COLUMN_BITS);
1563:       assertEquals(32, Node.INCRDECR_PROP);
1564:       assertEquals(49, Node.DIRECT_EVAL);
1565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1566:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1567:       assertEquals(36, Node.QUOTED_PROP);
1568:       assertEquals(4095, Node.COLUMN_MASK);
1569:       assertEquals(55, Node.INFERRED_FUNCTION);
1570:       assertEquals(48, Node.DIRECTIVES);
1571:       assertEquals(37, Node.OPT_ARG_NAME);
1572:       assertEquals(57, Node.REFLECTED_OBJECT);
1573:       assertEquals(56, Node.CHANGE_TIME);
1574:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1575:       assertEquals(56, Node.CHANGE_TIME);
1576:       assertEquals(2, Node.POST_FLAG);
1577:       assertEquals(37, Node.OPT_ARG_NAME);
1578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1579:       assertEquals(47, Node.IS_DISPATCHER);
1580:       assertEquals(32, Node.INCRDECR_PROP);
1581:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1582:       assertEquals(46, Node.IS_NAMESPACE);
1583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1584:       assertEquals(53, Node.INPUT_ID);
1585:       assertEquals(29, Node.JSDOC_INFO_PROP);
1586:       assertEquals(36, Node.QUOTED_PROP);
1587:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1588:       assertEquals(49, Node.DIRECT_EVAL);
1589:       assertEquals(1, Node.DECR_FLAG);
1590:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1591:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1592:       assertEquals(12, Node.COLUMN_BITS);
1593:       assertEquals(4095, Node.COLUMN_MASK);
1594:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1595:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1596:       assertEquals(39, Node.EMPTY_BLOCK);
1597:       assertEquals(48, Node.DIRECTIVES);
1598:       assertEquals(57, Node.REFLECTED_OBJECT);
1599:       assertEquals(55, Node.INFERRED_FUNCTION);
1600:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1601:       assertEquals(50, Node.FREE_CALL);
1602:       assertEquals(8, Node.FLAG_NO_THROWS);
1603:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1604:       assertEquals(52, Node.LENGTH);
1605:       assertEquals(43, Node.IS_CONSTANT_NAME);
1606:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1607:       assertEquals(54, Node.SLASH_V);
1608:       assertEquals(57, Node.LAST_PROP);
1609:       assertEquals(40, Node.ORIGINALNAME_PROP);
1610:       assertEquals(30, Node.VAR_ARGS_NAME);
1611:       assertFalse(node0.equals((Object)node1));
1612:       assertFalse(node1.equals((Object)node2));
1613:       assertFalse(node1.equals((Object)node0));
1614:       assertTrue(boolean2 == boolean0);
1615:       assertTrue(boolean2 == boolean1);
1616:       
1617:       String string0 = node2.getSourceFileName();
1618:       assertFalse(node0.hasOneChild());
1619:       assertEquals(0, node0.getCharno());
1620:       assertFalse(node0.isNumber());
1621:       assertFalse(node0.isNot());
1622:       assertFalse(node0.isScript());
1623:       assertFalse(node0.isObjectLit());
1624:       assertFalse(node0.isAssignAdd());
1625:       assertFalse(node0.isLabel());
1626:       assertFalse(node0.isAnd());
1627:       assertFalse(node0.isLabelName());
1628:       assertFalse(node0.isFalse());
1629:       assertFalse(node0.isContinue());
1630:       assertFalse(node0.isCast());
1631:       assertFalse(node0.isVar());
1632:       assertFalse(node0.isWhile());
1633:       assertFalse(node0.isString());
1634:       assertFalse(node0.isDo());
1635:       assertFalse(node0.isNew());
1636:       assertFalse(node0.isGetProp());
1637:       assertFalse(node0.isAdd());
1638:       assertFalse(node0.isOr());
1639:       assertEquals(30, node0.getLineno());
1640:       assertFalse(node0.isReturn());
1641:       assertFalse(node0.isNull());
1642:       assertFalse(node0.isDec());
1643:       assertFalse(node0.isBreak());
1644:       assertFalse(node0.hasChildren());
1645:       assertFalse(node0.isComma());
1646:       assertFalse(node0.isAssign());
1647:       assertFalse(node0.isVoid());
1648:       assertFalse(node0.isDelProp());
1649:       assertFalse(node0.isName());
1650:       assertFalse(node0.isTypeOf());
1651:       assertFalse(node0.isGetElem());
1652:       assertFalse(node0.isCall());
1653:       assertEquals(0, node0.getType());
1654:       assertFalse(node0.isExprResult());
1655:       assertFalse(node0.isArrayLit());
1656:       assertFalse(node0.isTry());
1657:       assertFalse(node0.isDebugger());
1658:       assertFalse(node0.isTrue());
1659:       assertFalse(node0.isFor());
1660:       assertFalse(node0.isDefaultCase());
1661:       assertFalse(node0.isGetterDef());
1662:       assertFalse(node0.isEmpty());
1663:       assertEquals(0, node0.getChildCount());
1664:       assertFalse(node0.isParamList());
1665:       assertFalse(node0.isFunction());
1666:       assertFalse(node0.isSwitch());
1667:       assertFalse(node0.isHook());
1668:       assertFalse(node0.isStringKey());
1669:       assertFalse(node0.isThrow());
1670:       assertFalse(node0.isBlock());
1671:       assertFalse(node0.isCase());
1672:       assertFalse(node0.isSetterDef());
1673:       assertFalse(node0.isInc());
1674:       assertFalse(node0.isInstanceOf());
1675:       assertFalse(node0.isIn());
1676:       assertFalse(node0.hasMoreThanOneChild());
1677:       assertEquals(122880, node0.getSourcePosition());
1678:       assertFalse(node0.isNE());
1679:       assertFalse(node0.isThis());
1680:       assertFalse(node0.isIf());
1681:       assertFalse(node0.isWith());
1682:       assertFalse(node0.isRegExp());
1683:       assertFalse(node0.isCatch());
1684:       assertFalse(node1.isStringKey());
1685:       assertFalse(node1.isName());
1686:       assertFalse(node1.isSetterDef());
1687:       assertFalse(node1.isAdd());
1688:       assertFalse(node1.isCall());
1689:       assertFalse(node1.isParamList());
1690:       assertEquals(56, node1.getType());
1691:       assertFalse(node1.isNull());
1692:       assertFalse(node1.hasMoreThanOneChild());
1693:       assertFalse(node1.isCatch());
1694:       assertFalse(node1.isTry());
1695:       assertFalse(node1.isRegExp());
1696:       assertFalse(node1.isTypeOf());
1697:       assertFalse(node1.isDec());
1698:       assertFalse(node1.isWhile());
1699:       assertFalse(node1.isBlock());
1700:       assertFalse(node1.isReturn());
1701:       assertFalse(node1.isLabelName());
1702:       assertFalse(node1.isAssign());
1703:       assertFalse(node1.isDelProp());
1704:       assertFalse(node1.isArrayLit());
1705:       assertFalse(node1.isEmpty());
1706:       assertFalse(node1.isGetElem());
1707:       assertFalse(node1.isVoid());
1708:       assertFalse(node1.isOr());
1709:       assertFalse(node1.isNumber());
1710:       assertFalse(node1.isGetterDef());
1711:       assertFalse(node1.isTrue());
1712:       assertFalse(node1.isDo());
1713:       assertFalse(node1.isNew());
1714:       assertFalse(node1.isAssignAdd());
1715:       assertFalse(node1.isDefaultCase());
1716:       assertFalse(node1.isVar());
1717:       assertFalse(node1.isLabel());
1718:       assertFalse(node1.isThrow());
1719:       assertFalse(node1.isFalse());
1720:       assertFalse(node1.isBreak());
1721:       assertFalse(node1.isSwitch());
1722:       assertEquals(122880, node1.getSourcePosition());
1723:       assertFalse(node1.isCase());
1724:       assertFalse(node1.isWith());
1725:       assertFalse(node1.isNot());
1726:       assertFalse(node1.isObjectLit());
1727:       assertEquals(30, node1.getLineno());
1728:       assertFalse(node1.isInstanceOf());
1729:       assertFalse(node1.isString());
1730:       assertFalse(node1.isScript());
1731:       assertTrue(node1.hasChildren());
1732:       assertFalse(node1.isExprResult());
1733:       assertFalse(node1.isGetProp());
1734:       assertFalse(node1.isComma());
1735:       assertEquals(1, node1.getChildCount());
1736:       assertFalse(node1.isFor());
1737:       assertTrue(node1.hasOneChild());
1738:       assertFalse(node1.isHook());
1739:       assertFalse(node1.isThis());
1740:       assertFalse(node1.isCast());
1741:       assertFalse(node1.isDebugger());
1742:       assertFalse(node1.isIf());
1743:       assertFalse(node1.isNE());
1744:       assertEquals(0, node1.getCharno());
1745:       assertFalse(node1.isContinue());
1746:       assertFalse(node1.isAnd());
1747:       assertFalse(node1.isIn());
1748:       assertFalse(node1.isInc());
1749:       assertFalse(node1.isFunction());
1750:       assertFalse(node2.isCast());
1751:       assertFalse(node2.isAssign());
1752:       assertFalse(node2.isDec());
1753:       assertFalse(node2.hasChildren());
1754:       assertEquals(0, node2.getCharno());
1755:       assertFalse(node2.isExprResult());
1756:       assertFalse(node2.isTypeOf());
1757:       assertFalse(node2.isLabelName());
1758:       assertFalse(node2.isGetElem());
1759:       assertFalse(node2.hasMoreThanOneChild());
1760:       assertFalse(node2.isObjectLit());
1761:       assertFalse(node2.isInstanceOf());
1762:       assertFalse(node2.isAnd());
1763:       assertFalse(node2.isWith());
1764:       assertFalse(node2.isWhile());
1765:       assertFalse(node2.isReturn());
1766:       assertFalse(node2.isNot());
1767:       assertFalse(node2.isThis());
1768:       assertFalse(node2.isScript());
1769:       assertFalse(node2.isNumber());
1770:       assertFalse(node2.hasOneChild());
1771:       assertFalse(node2.isGetProp());
1772:       assertFalse(node2.isThrow());
1773:       assertFalse(node2.isFalse());
1774:       assertFalse(node2.isBlock());
1775:       assertFalse(node2.isHook());
1776:       assertEquals(122880, node2.getSourcePosition());
1777:       assertFalse(node2.isIn());
1778:       assertFalse(node2.isContinue());
1779:       assertFalse(node2.isSetterDef());
1780:       assertFalse(node2.isInc());
1781:       assertFalse(node2.isFor());
1782:       assertFalse(node2.isGetterDef());
1783:       assertFalse(node2.isDebugger());
1784:       assertFalse(node2.isFunction());
1785:       assertFalse(node2.isTrue());
1786:       assertFalse(node2.isRegExp());
1787:       assertFalse(node2.isVoid());
1788:       assertFalse(node2.isNE());
1789:       assertFalse(node2.isIf());
1790:       assertFalse(node2.isDelProp());
1791:       assertEquals(30, node2.getLineno());
1792:       assertFalse(node2.isArrayLit());
1793:       assertFalse(node2.isCatch());
1794:       assertFalse(node2.isString());
1795:       assertFalse(node2.isTry());
1796:       assertFalse(node2.isCase());
1797:       assertFalse(node2.isCall());
1798:       assertFalse(node2.isVar());
1799:       assertFalse(node2.isName());
1800:       assertFalse(node2.isStringKey());
1801:       assertFalse(node2.isNull());
1802:       assertFalse(node2.isSwitch());
1803:       assertFalse(node2.isParamList());
1804:       assertFalse(node2.isComma());
1805:       assertEquals(0, node2.getType());
1806:       assertFalse(node2.isBreak());
1807:       assertFalse(node2.isOr());
1808:       assertEquals(0, node2.getChildCount());
1809:       assertFalse(node2.isLabel());
1810:       assertFalse(node2.isDefaultCase());
1811:       assertFalse(node2.isAssignAdd());
1812:       assertFalse(node2.isEmpty());
1813:       assertFalse(node2.isAdd());
1814:       assertFalse(node2.isDo());
1815:       assertFalse(node2.isNew());
1816:       assertSame(node0, node2);
1817:       assertNotSame(node0, node1);
1818:       assertNotSame(node1, node2);
1819:       assertNotSame(node1, node0);
1820:       assertNotSame(node2, node1);
1821:       assertSame(node2, node0);
1822:       assertNull(string0);
1823:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1824:       assertEquals(50, Node.FREE_CALL);
1825:       assertEquals(40, Node.ORIGINALNAME_PROP);
1826:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1827:       assertEquals(52, Node.LENGTH);
1828:       assertEquals(8, Node.FLAG_NO_THROWS);
1829:       assertEquals(39, Node.EMPTY_BLOCK);
1830:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1831:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1832:       assertEquals(57, Node.LAST_PROP);
1833:       assertEquals(30, Node.VAR_ARGS_NAME);
1834:       assertEquals(1, Node.DECR_FLAG);
1835:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1836:       assertEquals(46, Node.IS_NAMESPACE);
1837:       assertEquals(54, Node.SLASH_V);
1838:       assertEquals(43, Node.IS_CONSTANT_NAME);
1839:       assertEquals(29, Node.JSDOC_INFO_PROP);
1840:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1841:       assertEquals(47, Node.IS_DISPATCHER);
1842:       assertEquals(2, Node.POST_FLAG);
1843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1844:       assertEquals(53, Node.INPUT_ID);
1845:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1846:       assertEquals(12, Node.COLUMN_BITS);
1847:       assertEquals(32, Node.INCRDECR_PROP);
1848:       assertEquals(49, Node.DIRECT_EVAL);
1849:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1850:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1851:       assertEquals(36, Node.QUOTED_PROP);
1852:       assertEquals(4095, Node.COLUMN_MASK);
1853:       assertEquals(55, Node.INFERRED_FUNCTION);
1854:       assertEquals(48, Node.DIRECTIVES);
1855:       assertEquals(37, Node.OPT_ARG_NAME);
1856:       assertEquals(57, Node.REFLECTED_OBJECT);
1857:       assertEquals(56, Node.CHANGE_TIME);
1858:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1859:       assertEquals(56, Node.CHANGE_TIME);
1860:       assertEquals(2, Node.POST_FLAG);
1861:       assertEquals(37, Node.OPT_ARG_NAME);
1862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1863:       assertEquals(47, Node.IS_DISPATCHER);
1864:       assertEquals(32, Node.INCRDECR_PROP);
1865:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1866:       assertEquals(46, Node.IS_NAMESPACE);
1867:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1868:       assertEquals(53, Node.INPUT_ID);
1869:       assertEquals(29, Node.JSDOC_INFO_PROP);
1870:       assertEquals(36, Node.QUOTED_PROP);
1871:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1872:       assertEquals(49, Node.DIRECT_EVAL);
1873:       assertEquals(1, Node.DECR_FLAG);
1874:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1875:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1876:       assertEquals(12, Node.COLUMN_BITS);
1877:       assertEquals(4095, Node.COLUMN_MASK);
1878:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1879:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1880:       assertEquals(39, Node.EMPTY_BLOCK);
1881:       assertEquals(48, Node.DIRECTIVES);
1882:       assertEquals(57, Node.REFLECTED_OBJECT);
1883:       assertEquals(55, Node.INFERRED_FUNCTION);
1884:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1885:       assertEquals(50, Node.FREE_CALL);
1886:       assertEquals(8, Node.FLAG_NO_THROWS);
1887:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1888:       assertEquals(52, Node.LENGTH);
1889:       assertEquals(43, Node.IS_CONSTANT_NAME);
1890:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1891:       assertEquals(54, Node.SLASH_V);
1892:       assertEquals(57, Node.LAST_PROP);
1893:       assertEquals(40, Node.ORIGINALNAME_PROP);
1894:       assertEquals(30, Node.VAR_ARGS_NAME);
1895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1896:       assertEquals(50, Node.FREE_CALL);
1897:       assertEquals(40, Node.ORIGINALNAME_PROP);
1898:       assertEquals(8, Node.FLAG_NO_THROWS);
1899:       assertEquals(39, Node.EMPTY_BLOCK);
1900:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1901:       assertEquals(52, Node.LENGTH);
1902:       assertEquals(57, Node.REFLECTED_OBJECT);
1903:       assertEquals(48, Node.DIRECTIVES);
1904:       assertEquals(54, Node.SLASH_V);
1905:       assertEquals(49, Node.DIRECT_EVAL);
1906:       assertEquals(1, Node.DECR_FLAG);
1907:       assertEquals(4095, Node.COLUMN_MASK);
1908:       assertEquals(32, Node.INCRDECR_PROP);
1909:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1910:       assertEquals(12, Node.COLUMN_BITS);
1911:       assertEquals(47, Node.IS_DISPATCHER);
1912:       assertEquals(2, Node.POST_FLAG);
1913:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1914:       assertEquals(37, Node.OPT_ARG_NAME);
1915:       assertEquals(29, Node.JSDOC_INFO_PROP);
1916:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1917:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1918:       assertEquals(46, Node.IS_NAMESPACE);
1919:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1920:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1921:       assertEquals(43, Node.IS_CONSTANT_NAME);
1922:       assertEquals(56, Node.CHANGE_TIME);
1923:       assertEquals(57, Node.LAST_PROP);
1924:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1925:       assertEquals(30, Node.VAR_ARGS_NAME);
1926:       assertEquals(36, Node.QUOTED_PROP);
1927:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1928:       assertEquals(53, Node.INPUT_ID);
1929:       assertEquals(55, Node.INFERRED_FUNCTION);
1930:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1931:       assertFalse(node0.equals((Object)node1));
1932:       assertFalse(node1.equals((Object)node2));
1933:       assertFalse(node1.equals((Object)node0));
1934:       assertFalse(node2.equals((Object)node1));
1935:   }
1936: }
RegularFileObject[/tmp/EvoSuite_152_1628255812470/com/google/javascript/rhino/Node_152_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_152_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_152_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.javascript.rhino.jstype.TernaryValue$1",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.TernaryValue$3",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.javascript.rhino.jstype.TernaryValue$2",
92:       "com.google.common.collect.Lists$TransformingRandomAccessList",
93:       "com.google.javascript.rhino.Node$PropListItem",
94:       "com.google.javascript.rhino.Node$IntPropListItem",
95:       "com.google.common.collect.Sets$2",
96:       "com.google.common.collect.Maps$KeySet",
97:       "com.google.common.collect.Sets$3",
98:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
99:       "com.google.common.collect.LinkedHashMultimap",
100:       "com.google.javascript.rhino.Node",
101:       "com.google.javascript.rhino.jstype.ObjectType",
102:       "com.google.common.collect.Sets$1",
103:       "com.google.common.collect.ImmutableMapKeySet",
104:       "com.google.javascript.rhino.JSDocInfo$Marker",
105:       "com.google.common.collect.RegularImmutableMap",
106:       "com.google.common.collect.RegularImmutableBiMap",
107:       "com.google.javascript.rhino.Node$NodeMismatch",
108:       "com.google.javascript.rhino.jstype.RecordType",
109:       "com.google.common.collect.SortedMapDifference",
110:       "com.google.common.collect.RegularImmutableSet",
111:       "com.google.javascript.rhino.jstype.ModificationVisitor",
112:       "com.google.javascript.rhino.jstype.PropertyMap$1",
113:       "com.google.common.collect.AbstractMapEntry",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.JSType$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.common.collect.Iterables",
127:       "com.google.javascript.rhino.jstype.JSType",
128:       "com.google.common.collect.ImmutableAsList",
129:       "com.google.javascript.rhino.Node$StringNode",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.common.collect.SingletonImmutableSet",
135:       "com.google.javascript.rhino.jstype.NamedType",
136:       "com.google.common.collect.Iterators$13",
137:       "com.google.javascript.rhino.InputId",
138:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
139:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
140:       "com.google.common.collect.AbstractMapBasedMultimap",
141:       "com.google.common.collect.Lists$Partition",
142:       "com.google.common.collect.Lists",
143:       "com.google.javascript.rhino.Node$SideEffectFlags",
144:       "com.google.common.collect.UnmodifiableListIterator",
145:       "com.google.javascript.rhino.jstype.NullType",
146:       "com.google.common.collect.Lists$TransformingSequentialList",
147:       "com.google.javascript.rhino.ErrorReporter",
148:       "com.google.javascript.rhino.jstype.UnknownType",
149:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
150:       "com.google.javascript.rhino.jstype.ValueType",
151:       "com.google.javascript.rhino.jstype.PropertyMap",
152:       "com.google.javascript.rhino.Token",
153:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
154:       "com.google.common.collect.ObjectArrays",
155:       "com.google.javascript.rhino.jstype.StaticSourceFile",
156:       "com.google.javascript.rhino.jstype.BooleanType",
157:       "com.google.javascript.rhino.jstype.NoObjectType",
158:       "com.google.common.collect.AbstractIterator",
159:       "com.google.javascript.rhino.jstype.FunctionBuilder",
160:       "com.google.javascript.rhino.jstype.JSType$TypePair",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.common.collect.ImmutableList$1",
164:       "com.google.common.collect.MapDifference",
165:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
166:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
167:       "com.google.common.collect.Sets$ImprovedAbstractSet",
168:       "com.google.javascript.rhino.jstype.FunctionType",
169:       "com.google.common.base.Preconditions",
170:       "com.google.common.collect.UnmodifiableIterator",
171:       "com.google.javascript.rhino.JSDocInfo",
172:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
173:       "com.google.javascript.rhino.jstype.Property",
174:       "com.google.common.collect.ImmutableMapValues",
175:       "com.google.common.collect.ImmutableEntry",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.common.collect.AbstractIndexedListIterator",
205:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.EmptyImmutableSet",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_152_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.javascript.rhino.Token",
266:       "com.google.common.base.Preconditions",
267:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
268:       "com.google.common.base.Joiner",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.javascript.rhino.SimpleErrorReporter",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.EnumType",
339:       "com.google.javascript.rhino.jstype.EnumElementType",
340:       "com.google.common.collect.Sets",
341:       "com.google.javascript.rhino.JSDocInfo",
342:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
343:       "com.google.javascript.rhino.Node$AncestorIterable$1",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.Iterables",
346:       "com.google.javascript.rhino.jstype.TernaryValue",
347:       "com.google.javascript.rhino.jstype.JSType$2",
348:       "com.google.common.collect.ImmutableSet",
349:       "com.google.common.collect.EmptyImmutableSet",
350:       "com.google.common.collect.AbstractIndexedListIterator",
351:       "com.google.common.collect.Iterators$11",
352:       "com.google.javascript.rhino.jstype.JSType$TypePair",
353:       "com.google.javascript.rhino.InputId",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.Platform",
358:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
359:       "com.google.javascript.rhino.JSDocInfo$Marker",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.JSTypeExpression",
362:       "com.google.common.collect.AbstractMultimap$Values",
363:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
364:       "com.google.common.collect.AbstractMapBasedMultimap$1",
365:       "com.google.common.collect.Multimaps$Entries",
366:       "com.google.common.collect.AbstractMultimap$Entries",
367:       "com.google.common.collect.AbstractMapBasedMultimap$2"
368:     );
369:   }
370: }

[MASTER] 13:16:52.990 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertNotNull(node0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

TreeSet<String> treeSet0 = new TreeSet<String>();
assertNotNull(treeSet0);

NavigableSet<String> navigableSet0 = treeSet0.tailSet("k.~!4+De5arG>r", false);
assertEquals(0, navigableSet0.size());
assertTrue(navigableSet0.isEmpty());
assertNotNull(navigableSet0);
assertFalse(treeSet0.contains("k.~!4+De5arG>r"));
assertFalse(navigableSet0.contains("k.~!4+De5arG>r"));

node0.setDirectives(navigableSet0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals(0, navigableSet0.size());
assertTrue(navigableSet0.isEmpty());
assertFalse(treeSet0.contains("k.~!4+De5arG>r"));
assertFalse(navigableSet0.contains("k.~!4+De5arG>r"));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node0.addSuppression("this");
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean0 = node0.isOr();
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertNotNull(iterable0);
assertFalse(iterable0.contains(node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node_FileLevelJsDocBuilder0.append("");
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

boolean boolean1 = node0.isSetterDef();
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertTrue(boolean1 == boolean0);

Node node1 = new Node(56, node0, node0, 30, 0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals(56, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertEquals(122880, node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(30, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertNotNull(node1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node1.equals((Object)node0));

Node node2 = node0.copyInformationFrom(node1);
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(30, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(122880, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals(56, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertEquals(122880, node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(30, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(0, node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(122880, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertEquals(30, node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isComma());
assertEquals(0, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node1);
assertSame(node2, node0);
assertNotNull(node2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

boolean boolean2 = node1.isEmpty();
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(30, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(122880, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals(56, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertEquals(122880, node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(30, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(boolean2);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);

String string0 = node2.getSourceFileName();
assertFalse(node0.hasOneChild());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isGetProp());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals(30, node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isDec());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isName());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getType());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isFor());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isParamList());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isStringKey());
assertFalse(node0.isThrow());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(122880, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals(56, node1.getType());
assertFalse(node1.isNull());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isReturn());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTrue());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isSwitch());
assertEquals(122880, node1.getSourcePosition());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(30, node1.getLineno());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertTrue(node1.hasOneChild());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isCast());
assertFalse(node1.isDebugger());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertEquals(0, node1.getCharno());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFunction());
assertFalse(node2.isCast());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertEquals(0, node2.getCharno());
assertFalse(node2.isExprResult());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isObjectLit());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isWith());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals(122880, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isVoid());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertEquals(30, node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isCatch());
assertFalse(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isCall());
assertFalse(node2.isVar());
assertFalse(node2.isName());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isComma());
assertEquals(0, node2.getType());
assertFalse(node2.isBreak());
assertFalse(node2.isOr());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node1);
assertSame(node2, node0);
assertNull(string0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));


[MASTER] 13:17:11.724 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:12.687 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:13.079 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/11
* Done!

* Computation finished
