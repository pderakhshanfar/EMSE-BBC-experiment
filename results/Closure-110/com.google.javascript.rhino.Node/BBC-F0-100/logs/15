* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 11494
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 2976596053
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:03:39.267 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:03:47.137 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 13:03:47.139 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;
[MASTER] 13:03:54.103 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 122,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 723,0,0| Number of FF evals: 921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 490,0,0| Number of FF evals: 256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 2089,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 2089,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 4856,1908,0| Number of FF evals: 6098
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 2089,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 2240,0,0| Number of FF evals: 1298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 2089,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 2089,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 634,0,0| Number of FF evals: 1218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 4422,3556,0| Number of FF evals: 10713
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 88,0,0| Number of FF evals: 557
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 976,0,0| Number of FF evals: 517
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 2154,1498,30| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - true: 388,0,0| Number of FF evals: 439
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 72,0,0| Number of FF evals: 943
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 175,85,1| Number of FF evals: 3835
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 6229,4984,0| Number of FF evals: 6043
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 2089,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 2089,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 1988,0,0| Number of FF evals: 1253
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 5043,4425,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 605,0,0| Number of FF evals: 474
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 3381,1773,0| Number of FF evals: 4909
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 11485,9420,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 134,0,0| Number of FF evals: 635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 298,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 211,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 3196,1716,0| Number of FF evals: 5640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 7,0,0| Number of FF evals: 478
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 211,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 7,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 1924,1285,0| Number of FF evals: 5540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 1651,0,0| Number of FF evals: 819
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 122,0,0| Number of FF evals: 328
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2254,2107,897| Number of FF evals: 13702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 211,0,0| Number of FF evals: 131
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 1795,0,0| Number of FF evals: 661
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 74,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 3043,2514,14| Number of FF evals: 10317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 723,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 605,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 481,0,0| Number of FF evals: 358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 9999,9236,17| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 94,0,0| Number of FF evals: 617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 723,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 44,0,0| Number of FF evals: 47
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2070,1431,49| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 94,0,0| Number of FF evals: 730
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 5751,2636,0| Number of FF evals: 3749
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 3085,2916,0| Number of FF evals: 10325
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 2240,0,0| Number of FF evals: 1182
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 854,655,163| Number of FF evals: 8958
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1777: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1776: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1779: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 3020,0,0| Number of FF evals: 1409
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1778: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 1289,0,0| Number of FF evals: 928
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1457,0,0| Number of FF evals: 812
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 298,0,0| Number of FF evals: 680
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 5202,4534,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 3986,1264,0| Number of FF evals: 2560
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 217,0,0| Number of FF evals: 830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 9869,8825,70| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 67,0,0| Number of FF evals: 473
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 479,35,0| Number of FF evals: 3842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 2293,2065,176| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 658,6,0| Number of FF evals: 1704
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 490,0,0| Number of FF evals: 276
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 122,0,0| Number of FF evals: 98
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 490,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 10942,10402,0| Number of FF evals: 12461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 18221,16460,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 2262,2117,874| Number of FF evals: 13702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 364,0,0| Number of FF evals: 1374
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 53,0,0| Number of FF evals: 906
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 605,0,0| Number of FF evals: 722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 2160,1503,32| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 1941,0,0| Number of FF evals: 774
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 839,0,0| Number of FF evals: 849
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 779,0,0| Number of FF evals: 854
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 605,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 1243,0,0| Number of FF evals: 669
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 5760,5249,71| Number of FF evals: 13413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 6554,3685,0| Number of FF evals: 5164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 7769,6524,0| Number of FF evals: 8399
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 1243,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 476,0,0| Number of FF evals: 256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 476,0,0| Number of FF evals: 256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 7792,5365,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 605,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 5609,3205,0| Number of FF evals: 3538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 723,0,0| Number of FF evals: 435
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 728,281,146| Number of FF evals: 2755
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 211,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 5609,3205,0| Number of FF evals: 3538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 7554,6810,0| Number of FF evals: 12717
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 5609,3205,0| Number of FF evals: 3538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 35278,29546,0| Number of FF evals: 8865
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 211,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5067,4438,13| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 1375,0,0| Number of FF evals: 1462
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 8331,5689,20| Number of FF evals: 13631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 1142,156,0| Number of FF evals: 3023
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 388,0,0| Number of FF evals: 478
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 721,10,0| Number of FF evals: 2061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 1651,0,0| Number of FF evals: 1355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 52956,47224,25043| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 6669,937,0| Number of FF evals: 1798
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 5146,2504,0| Number of FF evals: 3550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 52956,47224,24648| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 2088,1449,49| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 66,0,0| Number of FF evals: 501
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 1513,0,0| Number of FF evals: 1106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2329,1665,104| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 38,0,0| Number of FF evals: 449
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1859,0,0| Number of FF evals: 1104
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 141,0,0| Number of FF evals: 606
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2094,1438,6| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 4455,2049,0| Number of FF evals: 3021
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 66,0,0| Number of FF evals: 501
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 11290,8001,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 976,0,0| Number of FF evals: 443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 159,0,0| Number of FF evals: 629
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 89,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 94,0,0| Number of FF evals: 300
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 5241,4571,0| Number of FF evals: 13802
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 111,0,0| Number of FF evals: 486
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOptionalArg()Z: root-Branch: 490,0,0| Number of FF evals: 468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 13999,10941,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 2240,0,0| Number of FF evals: 790
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 11,0,0| Number of FF evals: 601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 211,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 1452,361,0| Number of FF evals: 1994
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2369,1705,106| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 44,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 709,532,88| Number of FF evals: 5528
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1516,864,0| Number of FF evals: 10371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 1651,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 397,220,23| Number of FF evals: 2857
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 15,0,0| Number of FF evals: 188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 490,0,0| Number of FF evals: 941
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 72,0,0| Number of FF evals: 883
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 4283,3988,552| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 40651,34919,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 757,657,41| Number of FF evals: 9044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 74,0,0| Number of FF evals: 414
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 35278,29546,0| Number of FF evals: 8901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 13,0,0| Number of FF evals: 94
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 605,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 4832,448,0| Number of FF evals: 1867
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 6162,5510,215| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 239,0,0| Number of FF evals: 594
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 976,0,0| Number of FF evals: 443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 3565,0,0| Number of FF evals: 1230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 298,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 62,0,0| Number of FF evals: 682
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 67,0,0| Number of FF evals: 474
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 2730,0,0| Number of FF evals: 928
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1947,0,0| Number of FF evals: 973
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 44,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 20932,18528,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 976,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 2304,1634,30| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 5609,3205,0| Number of FF evals: 3600
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 723,0,0| Number of FF evals: 569
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 8137,5718,0| Number of FF evals: 5165
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 490,0,0| Number of FF evals: 309
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVarArgs()Z: root-Branch: 2089,0,0| Number of FF evals: 1081
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 1941,0,0| Number of FF evals: 708
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 6597,3140,0| Number of FF evals: 5623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 11393,7936,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 122,0,0| Number of FF evals: 92
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 1795,0,0| Number of FF evals: 1264
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 5399,2848,0| Number of FF evals: 3561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 3675,1620,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 10841,8437,3| Number of FF evals: 6319
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 2954,2528,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 35278,29546,0| Number of FF evals: 8900
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 10045,7641,0| Number of FF evals: 5681
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 5609,3205,0| Number of FF evals: 3626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 35278,29546,0| Number of FF evals: 8901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 605,0,0| Number of FF evals: 288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 5609,3205,0| Number of FF evals: 3600
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 605,0,0| Number of FF evals: 608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 44,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 40651,34919,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 298,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1513,0,0| Number of FF evals: 747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 52956,47224,24930| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 35278,29546,0| Number of FF evals: 8901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 1289,321,0| Number of FF evals: 1994
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 723,0,0| Number of FF evals: 345
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 8844,5796,0| Number of FF evals: 5941
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 55,0,0| Number of FF evals: 276
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 122,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 1680,518,0| Number of FF evals: 3541
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 211,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 976,0,0| Number of FF evals: 597
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 66,0,0| Number of FF evals: 560
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 1289,321,0| Number of FF evals: 1994
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 211,0,0| Number of FF evals: 852
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 88,0,0| Number of FF evals: 558
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 919,494,0| Number of FF evals: 3515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 3127,2509,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 1651,0,0| Number of FF evals: 1020
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 2267,1615,27| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 211,0,0| Number of FF evals: 608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 88,0,0| Number of FF evals: 610
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 7826,2094,0| Number of FF evals: 2064
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 2568,0,0| Number of FF evals: 968
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 1651,0,0| Number of FF evals: 834
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 3740,0,0| Number of FF evals: 1135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 9969,9219,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 490,0,0| Number of FF evals: 242
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 15657,13253,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 3182,2494,0| Number of FF evals: 4876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 7134,2653,0| Number of FF evals: 2828
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 605,0,0| Number of FF evals: 1185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 2354,1874,0| Number of FF evals: 9520
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 1651,0,0| Number of FF evals: 826
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 535,0,0| Number of FF evals: 433
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 11,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 3565,0,0| Number of FF evals: 1193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 490,0,0| Number of FF evals: 940
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 2233,1581,29| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 11,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 388,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 11,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1704,1051,4| Number of FF evals: 11184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 490,0,0| Number of FF evals: 909
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 1795,0,0| Number of FF evals: 670
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 88,0,0| Number of FF evals: 534
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 1527,1124,0| Number of FF evals: 4980
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 1651,0,0| Number of FF evals: 629
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 6906,2522,0| Number of FF evals: 3380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 570,0,0| Number of FF evals: 493
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - false: 122,0,0| Number of FF evals: 499
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 330,0,0| Number of FF evals: 740
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 88,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1575,1249,0| Number of FF evals: 6209
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 5844,5186,0| Number of FF evals: 9590
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 1375,0,0| Number of FF evals: 536
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 2293,2065,176| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 1903,1328,0| Number of FF evals: 2056
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 388,0,0| Number of FF evals: 577
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1243,0,0| Number of FF evals: 757
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 3356,2865,0| Number of FF evals: 13761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 3869,2375,0| Number of FF evals: 4863
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 735,64,0| Number of FF evals: 2201
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 9949,6830,0| Number of FF evals: 5487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 3356,2865,0| Number of FF evals: 13761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 1225,1125,41| Number of FF evals: 13702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 88,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 490,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 723,0,0| Number of FF evals: 341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 38,0,0| Number of FF evals: 500
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 340,0,0| Number of FF evals: 889
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 2843,2303,0| Number of FF evals: 4875
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 4880,4084,0| Number of FF evals: 8756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1791: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1792: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 3565,0,0| Number of FF evals: 1116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 557,0,0| Number of FF evals: 1752
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 757,657,42| Number of FF evals: 9044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 88,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 3003,0,0| Number of FF evals: 1496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 88,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1797: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1722,1165,0| Number of FF evals: 6398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 66,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 66,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 17638,11906,0| Number of FF evals: 4299
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 7,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 5514,3039,0| Number of FF evals: 3544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 2240,0,0| Number of FF evals: 1126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 7,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 211,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 7,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 490,0,0| Number of FF evals: 936
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 7,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 582,0,0| Number of FF evals: 613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 490,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 44,0,0| Number of FF evals: 1101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 1645,1381,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 2923,2343,0| Number of FF evals: 10092
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 66,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 490,0,0| Number of FF evals: 902
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 2946,2417,0| Number of FF evals: 10120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 66,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 66,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 1651,0,0| Number of FF evals: 619
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 66,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 2946,2417,0| Number of FF evals: 10120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 5919,187,0| Number of FF evals: 1640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 2946,2417,0| Number of FF evals: 10120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 844,63,0| Number of FF evals: 1907
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 2946,2417,0| Number of FF evals: 10120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 918,332,0| Number of FF evals: 3479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 725,73,0| Number of FF evals: 2454
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 2293,2065,176| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 44,0,0| Number of FF evals: 207
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2154,1501,32| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 4720,4071,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 89,0,0| Number of FF evals: 356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 8,0,0| Number of FF evals: 786
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 976,0,0| Number of FF evals: 429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 8335,7918,0| Number of FF evals: 13594
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 298,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 6488,5490,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 1840,0,0| Number of FF evals: 1092
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 9019,7673,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 3565,0,0| Number of FF evals: 1116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 490,0,0| Number of FF evals: 893
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 4319,0,0| Number of FF evals: 1729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 122,0,0| Number of FF evals: 637
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 5178,0,0| Number of FF evals: 1450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getObjectValue()Ljava/lang/Object;: Line 312: 122,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 1513,0,0| Number of FF evals: 726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 723,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 83,0,0| Number of FF evals: 483
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 645,0,0| Number of FF evals: 1438
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1144,653,0| Number of FF evals: 4773
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 35278,29546,0| Number of FF evals: 8865
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 2089,0,0| Number of FF evals: 1037
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 111,0,0| Number of FF evals: 266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 490,0,0| Number of FF evals: 481
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 122,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 2684,0,0| Number of FF evals: 1460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 672,0,0| Number of FF evals: 562
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - true: 34,0,0| Number of FF evals: 844
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 723,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1386,676,0| Number of FF evals: 3240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 10857,6637,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 1883,0,0| Number of FF evals: 1472
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 136,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 5786,4172,0| Number of FF evals: 5311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 87,0,0| Number of FF evals: 1036
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 2294,1941,0| Number of FF evals: 9370
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 490,0,0| Number of FF evals: 878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 211,0,0| Number of FF evals: 133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 3740,0,0| Number of FF evals: 1400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 723,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 723,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 122,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 298,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 8707,7696,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 3847,3430,0| Number of FF evals: 8679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 211,0,0| Number of FF evals: 155
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 1941,0,0| Number of FF evals: 1122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 1439,1022,0| Number of FF evals: 4714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 18,0,0| Number of FF evals: 302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 685,0,0| Number of FF evals: 1162
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 9791,8755,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 490,0,0| Number of FF evals: 759
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 3225,2778,1622| Number of FF evals: 13027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 7355,4680,0| Number of FF evals: 10189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 1150,289,0| Number of FF evals: 2002
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 161,0,0| Number of FF evals: 708
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1575,1249,0| Number of FF evals: 6209
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 258,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 605,0,0| Number of FF evals: 628
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 211,0,0| Number of FF evals: 396
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 3370,1835,0| Number of FF evals: 3489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 3247,707,0| Number of FF evals: 3446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 1294,0,0| Number of FF evals: 842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 2730,0,0| Number of FF evals: 892
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 723,0,0| Number of FF evals: 345
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 52956,47224,24754| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 18785,16381,248| Number of FF evals: 11802
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 2898,0,0| Number of FF evals: 970
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 10078,9314,95| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 145,0,0| Number of FF evals: 530
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 499,0,0| Number of FF evals: 586
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 1394,0,0| Number of FF evals: 902
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2247,2100,897| Number of FF evals: 13631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 219,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 573,0,0| Number of FF evals: 1657
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2247,2100,897| Number of FF evals: 13631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 298,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 751,0,0| Number of FF evals: 1334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 7,0,0| Number of FF evals: 685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 728,281,145| Number of FF evals: 2755
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 490,0,0| Number of FF evals: 886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 6597,3140,0| Number of FF evals: 5579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - true: 31,0,0| Number of FF evals: 396
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 490,0,0| Number of FF evals: 886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 298,0,0| Number of FF evals: 448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 1651,0,0| Number of FF evals: 1432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 6597,3140,0| Number of FF evals: 5579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 31,0,0| Number of FF evals: 267
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - false: 102,0,0| Number of FF evals: 353
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 6597,3140,0| Number of FF evals: 5579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 4948,2514,0| Number of FF evals: 4675
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 122,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 607,0,0| Number of FF evals: 937
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 6597,3140,0| Number of FF evals: 5579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 14810,12441,0| Number of FF evals: 10088
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 6597,3140,0| Number of FF evals: 5579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 6597,3140,0| Number of FF evals: 5579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 122,0,0| Number of FF evals: 115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 1941,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 136,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 236,0,0| Number of FF evals: 1080
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 2568,0,0| Number of FF evals: 866
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 34,0,0| Number of FF evals: 232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 298,0,0| Number of FF evals: 168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 5868,5101,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 5868,5101,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 7,0,0| Number of FF evals: 479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1513,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 10,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 7193,6356,6| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 11,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 122,0,0| Number of FF evals: 208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 2898,0,0| Number of FF evals: 1048
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 6451,3012,0| Number of FF evals: 5623
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 5919,187,0| Number of FF evals: 1639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 1305,322,0| Number of FF evals: 1766
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 490,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3803,2913,0| Number of FF evals: 8626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 490,0,0| Number of FF evals: 920
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 175,85,1| Number of FF evals: 3835
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 2730,0,0| Number of FF evals: 1303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 1868,0,0| Number of FF evals: 1497
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 723,0,0| Number of FF evals: 365
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 805,145,0| Number of FF evals: 2888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1570,1480,528| Number of FF evals: 13702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 388,0,0| Number of FF evals: 297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 15357,11309,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 298,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVarArgs()Z: Line 1917: 2089,0,0| Number of FF evals: 716
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1888: 122,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.lookupProperty(I)Lcom/google/javascript/rhino/Node$PropListItem;: I12 Branch 98 IF_ICMPEQ L764 - true: 1,0,0| Number of FF evals: 1173
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: Line 1889: 122,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 4,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 723,0,0| Number of FF evals: 545
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 11678,5946,0| Number of FF evals: 2948
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 122,0,0| Number of FF evals: 93
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 1052,0,0| Number of FF evals: 775
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 976,0,0| Number of FF evals: 817
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 14043,8311,0| Number of FF evals: 3612
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 702,0,0| Number of FF evals: 1169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 3515,3024,3| Number of FF evals: 13761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 13888,8156,0| Number of FF evals: 3497
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 640,0,0| Number of FF evals: 1192
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 14720,13386,610| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 820,329,0| Number of FF evals: 3164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 4319,0,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 6831,5461,0| Number of FF evals: 7419
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 4319,0,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - false: 397,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 211,0,0| Number of FF evals: 356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 1513,0,0| Number of FF evals: 561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 44,0,0| Number of FF evals: 288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 2898,0,0| Number of FF evals: 1093
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 1651,0,0| Number of FF evals: 639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 2089,0,0| Number of FF evals: 1047
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 83,0,0| Number of FF evals: 483
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 210,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 64,0,0| Number of FF evals: 876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 10022,9259,40| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 2730,0,0| Number of FF evals: 1006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 7323,3714,0| Number of FF evals: 4431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 91,0,0| Number of FF evals: 369
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 122,0,0| Number of FF evals: 84
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 723,0,0| Number of FF evals: 333
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 44,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 605,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 397,220,26| Number of FF evals: 2864
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 1103,612,0| Number of FF evals: 4546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 10518,8298,3| Number of FF evals: 10981
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1978: 122,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 15785,15148,0| Number of FF evals: 13665
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 723,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 74,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 1806,0,0| Number of FF evals: 1627
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1974: 122,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: Line 1977: 122,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 10211,8876,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 10211,8876,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 641,2,1| Number of FF evals: 1668
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2247,2100,897| Number of FF evals: 13631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 8875,6441,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 490,0,0| Number of FF evals: 909
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 490,0,0| Number of FF evals: 243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 9816,8778,23| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 122,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 122,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 122,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLength()I: root-Branch: 122,0,0| Number of FF evals: 178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 5178,0,0| Number of FF evals: 1491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 44,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 122,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1570,1480,528| Number of FF evals: 13702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 531: 298,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 530: 298,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 7826,2094,0| Number of FF evals: 2398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 18475,12743,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 9007,7726,0| Number of FF evals: 9622
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 1651,0,0| Number of FF evals: 1428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 211,0,0| Number of FF evals: 502
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 605,0,0| Number of FF evals: 291
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 7245,1513,1358| Number of FF evals: 1953
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 6077,3640,0| Number of FF evals: 9268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 230,0,0| Number of FF evals: 629
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 1109,0,0| Number of FF evals: 460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 1294,0,0| Number of FF evals: 665
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 4044,3324,0| Number of FF evals: 9384
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 388,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 1031,381,0| Number of FF evals: 3234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 1294,0,0| Number of FF evals: 665
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 490,0,0| Number of FF evals: 885
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 779,0,0| Number of FF evals: 1265
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 2051,1639,0| Number of FF evals: 10093
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 906,250,2| Number of FF evals: 4472
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 605,0,0| Number of FF evals: 424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 139,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 1651,0,0| Number of FF evals: 639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 490,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 12250,11710,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 976,0,0| Number of FF evals: 443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 303,104,21| Number of FF evals: 2854
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 976,0,0| Number of FF evals: 443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 1651,0,0| Number of FF evals: 639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 388,0,0| Number of FF evals: 224
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 1651,0,0| Number of FF evals: 639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 1651,0,0| Number of FF evals: 639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 1651,0,0| Number of FF evals: 639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 2843,2303,0| Number of FF evals: 4875
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 2299,1635,104| Number of FF evals: 13738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 72,0,0| Number of FF evals: 603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 1651,0,0| Number of FF evals: 639
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 570,0,0| Number of FF evals: 1079
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 88,0,0| Number of FF evals: 664
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 246,0,0| Number of FF evals: 455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 10211,8876,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 371,0,0| Number of FF evals: 1183
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 11678,5946,0| Number of FF evals: 2944
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 2077,1438,49| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 10211,8876,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 44,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 10211,8876,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 10211,8876,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 7273,4809,0| Number of FF evals: 12767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 16,0,0| Number of FF evals: 121
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 8237,6902,0| Number of FF evals: 8398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 10211,8876,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 2684,0,0| Number of FF evals: 1460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 10211,8876,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 1795,0,0| Number of FF evals: 1129
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 8237,6902,0| Number of FF evals: 8398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 8237,6902,0| Number of FF evals: 8398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 6500,5576,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 2089,0,0| Number of FF evals: 1046
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 2240,0,0| Number of FF evals: 795
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 921,0,0| Number of FF evals: 682
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 6889,6300,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLength()I: Line 1132: 122,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 6889,6300,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 6304,5821,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 35278,29546,0| Number of FF evals: 8865
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOptionalArg()Z: Line 1935: 490,0,0| Number of FF evals: 246
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 6355,5870,49| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 44,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 44,0,0| Number of FF evals: 407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 92,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 6459,4149,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 18090,16119,211| Number of FF evals: 13200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 122,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 605,0,0| Number of FF evals: 292
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 723,0,0| Number of FF evals: 1265
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 122,0,0| Number of FF evals: 383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 10393,9595,2648| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 6669,937,0| Number of FF evals: 1798
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 1243,0,0| Number of FF evals: 504
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 1651,0,0| Number of FF evals: 938
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 10393,9595,2658| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getProp(I)Ljava/lang/Object;: I9 Branch 104 IFNONNULL L814 - true: 28,0,0| Number of FF evals: 640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 7878,7180,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 13090,11077,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 6029,4209,0| Number of FF evals: 13307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 476,0,0| Number of FF evals: 482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1840,0,0| Number of FF evals: 1097
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 2240,0,0| Number of FF evals: 775
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 122,0,0| Number of FF evals: 729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 2240,0,0| Number of FF evals: 775
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 4476,3947,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 388,0,0| Number of FF evals: 246
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 1651,0,0| Number of FF evals: 1361
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 6581,4047,0| Number of FF evals: 6324
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 490,0,0| Number of FF evals: 1042
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 976,0,0| Number of FF evals: 964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 452,0,0| Number of FF evals: 1641
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 723,0,0| Number of FF evals: 333
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 110,0,0| Number of FF evals: 151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 6983,5556,0| Number of FF evals: 11727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 44,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1105,1017,55| Number of FF evals: 13702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 1513,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 5040,2820,0| Number of FF evals: 4974
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 388,0,0| Number of FF evals: 232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 3669,2003,0| Number of FF evals: 9846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 122,0,0| Number of FF evals: 353
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 122,0,0| Number of FF evals: 722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 11105,9798,0| Number of FF evals: 8832
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 298,0,0| Number of FF evals: 442
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 7840,6825,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 298,0,0| Number of FF evals: 2962
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 44,0,0| Number of FF evals: 53
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 8969,7689,0| Number of FF evals: 9625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 2946,2417,0| Number of FF evals: 10140
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 723,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 2089,0,0| Number of FF evals: 717
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 44,0,0| Number of FF evals: 53
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 14818,13683,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 723,0,0| Number of FF evals: 357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 9279,7999,3| Number of FF evals: 11331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 15946,15521,2| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 298,0,0| Number of FF evals: 606
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 10393,9595,2648| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 482,0,0| Number of FF evals: 816
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 490,0,0| Number of FF evals: 940
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 752,100,0| Number of FF evals: 2477
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 66,0,0| Number of FF evals: 571
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 66,0,0| Number of FF evals: 570
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 606,0,0| Number of FF evals: 937
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 7245,1513,1358| Number of FF evals: 1921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 1651,0,0| Number of FF evals: 680
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 14842,12308,0| Number of FF evals: 10561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 17638,11906,0| Number of FF evals: 4301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 7245,1513,1358| Number of FF evals: 1921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - true: 34,0,0| Number of FF evals: 1161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 976,0,0| Number of FF evals: 649
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 1243,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 490,0,0| Number of FF evals: 935
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 1243,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 292,0,0| Number of FF evals: 1161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 1243,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 1243,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setJSDocInfo(Lcom/google/javascript/rhino/JSDocInfo;)Lcom/google/javascript/rhino/Node;: root-Branch: 122,0,0| Number of FF evals: 857
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 1243,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 7095,4434,0| Number of FF evals: 5409
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 723,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 1284,645,2| Number of FF evals: 8384
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 490,0,0| Number of FF evals: 923
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 52956,47224,0| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 2094,1438,6| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 490,0,0| Number of FF evals: 942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 298,0,0| Number of FF evals: 961
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 14512,11978,0| Number of FF evals: 9976
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 3337,2815,10| Number of FF evals: 11061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 52956,47224,25147| Number of FF evals: 13830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 18,0,0| Number of FF evals: 395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 5844,5280,72| Number of FF evals: 13631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 8,0,0| Number of FF evals: 774
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 7,0,0| Number of FF evals: 168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 161,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 13888,8156,0| Number of FF evals: 3416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 605,0,0| Number of FF evals: 307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 122,0,0| Number of FF evals: 608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 605,0,0| Number of FF evals: 308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 298,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 5494,2586,0| Number of FF evals: 2947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4411,3706,0| Number of FF evals: 10399
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 865,0,0| Number of FF evals: 423
* Search finished after 605s and 324 generations, 199561 statements, best individual has fitness: 3032.0
* Minimizing test suite
[MASTER] 13:15:00.274 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 792
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 714
* Number of covered goals: 612
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 104
* Number of covered goals: 104
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 466
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 4536
* Number of covered goals: 2042
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 80%
* Total number of goals: 714
* Number of covered goals: 572
* Generated 652 tests with total length 10573
* Resulting test suite's coverage: 77% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:16:10.646 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7285333333333334% of time used, but only 41/652 tests minimized), falling back to using all assertions
[MASTER] 13:16:27.031 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 13:16:37.359 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 13:16:52.438 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_93_1628255812259/com/google/javascript/rhino/Node_93_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_93_1628255812259/com/google/javascript/rhino/Node_93_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:52.438 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:52.438 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:52.457 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1052
[MASTER] 13:16:52.458 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1278
[MASTER] 13:16:52.460 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_93_1628255812259/com/google/javascript/rhino/Node_93_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:52 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.LinkedHashSet;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_93_tmp__ESTest extends Node_93_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.0, 1004, (-1206));
22:       assertFalse(node0.isBlock());
23:       assertFalse(node0.isVar());
24:       assertFalse(node0.isAdd());
25:       assertFalse(node0.isCall());
26:       assertFalse(node0.isName());
27:       assertFalse(node0.isNew());
28:       assertFalse(node0.isWhile());
29:       assertEquals(39, node0.getType());
30:       assertFalse(node0.isContinue());
31:       assertFalse(node0.hasMoreThanOneChild());
32:       assertFalse(node0.isReturn());
33:       assertFalse(node0.isParamList());
34:       assertFalse(node0.isStringKey());
35:       assertFalse(node0.isDebugger());
36:       assertEquals((-1), node0.getSourcePosition());
37:       assertFalse(node0.isExprResult());
38:       assertFalse(node0.isArrayLit());
39:       assertFalse(node0.isLabelName());
40:       assertFalse(node0.isVoid());
41:       assertFalse(node0.hasChildren());
42:       assertFalse(node0.isDefaultCase());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.isTypeOf());
45:       assertFalse(node0.isDec());
46:       assertEquals(0, node0.getChildCount());
47:       assertFalse(node0.isAssign());
48:       assertFalse(node0.isLabel());
49:       assertFalse(node0.isAssignAdd());
50:       assertFalse(node0.isDelProp());
51:       assertFalse(node0.isDo());
52:       assertFalse(node0.isNull());
53:       assertFalse(node0.isEmpty());
54:       assertFalse(node0.isTrue());
55:       assertFalse(node0.isOr());
56:       assertFalse(node0.isHook());
57:       assertFalse(node0.isInc());
58:       assertFalse(node0.isSwitch());
59:       assertFalse(node0.isBreak());
60:       assertFalse(node0.isThrow());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isComma());
63:       assertFalse(node0.isFalse());
64:       assertTrue(node0.isNumber());
65:       assertFalse(node0.isGetProp());
66:       assertFalse(node0.isAnd());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isString());
69:       assertFalse(node0.isScript());
70:       assertEquals((-1), node0.getCharno());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isNot());
73:       assertFalse(node0.isObjectLit());
74:       assertFalse(node0.isCast());
75:       assertFalse(node0.hasOneChild());
76:       assertFalse(node0.isTry());
77:       assertFalse(node0.isWith());
78:       assertFalse(node0.isFor());
79:       assertFalse(node0.isCatch());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isRegExp());
82:       assertEquals((-1), node0.getLineno());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isInstanceOf());
85:       assertFalse(node0.isSetterDef());
86:       assertFalse(node0.isIf());
87:       assertFalse(node0.isNE());
88:       assertEquals(40, Node.ORIGINALNAME_PROP);
89:       assertEquals(57, Node.REFLECTED_OBJECT);
90:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
91:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
92:       assertEquals(52, Node.LENGTH);
93:       assertEquals(50, Node.FREE_CALL);
94:       assertEquals(8, Node.FLAG_NO_THROWS);
95:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
96:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
97:       assertEquals(15, Node.NO_SIDE_EFFECTS);
98:       assertEquals(39, Node.EMPTY_BLOCK);
99:       assertEquals(57, Node.LAST_PROP);
100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
101:       assertEquals(55, Node.INFERRED_FUNCTION);
102:       assertEquals(12, Node.COLUMN_BITS);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(4095, Node.COLUMN_MASK);
105:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
106:       assertEquals(48, Node.DIRECTIVES);
107:       assertEquals(37, Node.OPT_ARG_NAME);
108:       assertEquals(56, Node.CHANGE_TIME);
109:       assertEquals(49, Node.DIRECT_EVAL);
110:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
111:       assertEquals(29, Node.JSDOC_INFO_PROP);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(32, Node.INCRDECR_PROP);
118:       assertEquals(1, Node.DECR_FLAG);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(46, Node.IS_NAMESPACE);
123:       assertEquals(43, Node.IS_CONSTANT_NAME);
124:       assertNotNull(node0);
125:       
126:       boolean boolean0 = node0.isInc();
127:       assertFalse(node0.isBlock());
128:       assertFalse(node0.isVar());
129:       assertFalse(node0.isAdd());
130:       assertFalse(node0.isCall());
131:       assertFalse(node0.isName());
132:       assertFalse(node0.isNew());
133:       assertFalse(node0.isWhile());
134:       assertEquals(39, node0.getType());
135:       assertFalse(node0.isContinue());
136:       assertFalse(node0.hasMoreThanOneChild());
137:       assertFalse(node0.isReturn());
138:       assertFalse(node0.isParamList());
139:       assertFalse(node0.isStringKey());
140:       assertFalse(node0.isDebugger());
141:       assertEquals((-1), node0.getSourcePosition());
142:       assertFalse(node0.isExprResult());
143:       assertFalse(node0.isArrayLit());
144:       assertFalse(node0.isLabelName());
145:       assertFalse(node0.isVoid());
146:       assertFalse(node0.hasChildren());
147:       assertFalse(node0.isDefaultCase());
148:       assertFalse(node0.isGetElem());
149:       assertFalse(node0.isTypeOf());
150:       assertFalse(node0.isDec());
151:       assertEquals(0, node0.getChildCount());
152:       assertFalse(node0.isAssign());
153:       assertFalse(node0.isLabel());
154:       assertFalse(node0.isAssignAdd());
155:       assertFalse(node0.isDelProp());
156:       assertFalse(node0.isDo());
157:       assertFalse(node0.isNull());
158:       assertFalse(node0.isEmpty());
159:       assertFalse(node0.isTrue());
160:       assertFalse(node0.isOr());
161:       assertFalse(node0.isHook());
162:       assertFalse(node0.isInc());
163:       assertFalse(node0.isSwitch());
164:       assertFalse(node0.isBreak());
165:       assertFalse(node0.isThrow());
166:       assertFalse(node0.isThis());
167:       assertFalse(node0.isComma());
168:       assertFalse(node0.isFalse());
169:       assertTrue(node0.isNumber());
170:       assertFalse(node0.isGetProp());
171:       assertFalse(node0.isAnd());
172:       assertFalse(node0.isCase());
173:       assertFalse(node0.isString());
174:       assertFalse(node0.isScript());
175:       assertEquals((-1), node0.getCharno());
176:       assertFalse(node0.isGetterDef());
177:       assertFalse(node0.isNot());
178:       assertFalse(node0.isObjectLit());
179:       assertFalse(node0.isCast());
180:       assertFalse(node0.hasOneChild());
181:       assertFalse(node0.isTry());
182:       assertFalse(node0.isWith());
183:       assertFalse(node0.isFor());
184:       assertFalse(node0.isCatch());
185:       assertFalse(node0.isFunction());
186:       assertFalse(node0.isRegExp());
187:       assertEquals((-1), node0.getLineno());
188:       assertFalse(node0.isIn());
189:       assertFalse(node0.isInstanceOf());
190:       assertFalse(node0.isSetterDef());
191:       assertFalse(node0.isIf());
192:       assertFalse(node0.isNE());
193:       assertFalse(boolean0);
194:       assertEquals(40, Node.ORIGINALNAME_PROP);
195:       assertEquals(57, Node.REFLECTED_OBJECT);
196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
197:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
198:       assertEquals(52, Node.LENGTH);
199:       assertEquals(50, Node.FREE_CALL);
200:       assertEquals(8, Node.FLAG_NO_THROWS);
201:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
203:       assertEquals(15, Node.NO_SIDE_EFFECTS);
204:       assertEquals(39, Node.EMPTY_BLOCK);
205:       assertEquals(57, Node.LAST_PROP);
206:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
207:       assertEquals(55, Node.INFERRED_FUNCTION);
208:       assertEquals(12, Node.COLUMN_BITS);
209:       assertEquals(36, Node.QUOTED_PROP);
210:       assertEquals(4095, Node.COLUMN_MASK);
211:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
212:       assertEquals(48, Node.DIRECTIVES);
213:       assertEquals(37, Node.OPT_ARG_NAME);
214:       assertEquals(56, Node.CHANGE_TIME);
215:       assertEquals(49, Node.DIRECT_EVAL);
216:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
217:       assertEquals(29, Node.JSDOC_INFO_PROP);
218:       assertEquals(47, Node.IS_DISPATCHER);
219:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
220:       assertEquals(2, Node.POST_FLAG);
221:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
222:       assertEquals(53, Node.INPUT_ID);
223:       assertEquals(32, Node.INCRDECR_PROP);
224:       assertEquals(1, Node.DECR_FLAG);
225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
226:       assertEquals(30, Node.VAR_ARGS_NAME);
227:       assertEquals(54, Node.SLASH_V);
228:       assertEquals(46, Node.IS_NAMESPACE);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       
231:       int int0 = node0.getSideEffectFlags();
232:       assertFalse(node0.isBlock());
233:       assertFalse(node0.isVar());
234:       assertFalse(node0.isAdd());
235:       assertFalse(node0.isCall());
236:       assertFalse(node0.isName());
237:       assertFalse(node0.isNew());
238:       assertFalse(node0.isWhile());
239:       assertEquals(39, node0.getType());
240:       assertFalse(node0.isContinue());
241:       assertFalse(node0.hasMoreThanOneChild());
242:       assertFalse(node0.isReturn());
243:       assertFalse(node0.isParamList());
244:       assertFalse(node0.isStringKey());
245:       assertFalse(node0.isDebugger());
246:       assertEquals((-1), node0.getSourcePosition());
247:       assertFalse(node0.isExprResult());
248:       assertFalse(node0.isArrayLit());
249:       assertFalse(node0.isLabelName());
250:       assertFalse(node0.isVoid());
251:       assertFalse(node0.hasChildren());
252:       assertFalse(node0.isDefaultCase());
253:       assertFalse(node0.isGetElem());
254:       assertFalse(node0.isTypeOf());
255:       assertFalse(node0.isDec());
256:       assertEquals(0, node0.getChildCount());
257:       assertFalse(node0.isAssign());
258:       assertFalse(node0.isLabel());
259:       assertFalse(node0.isAssignAdd());
260:       assertFalse(node0.isDelProp());
261:       assertFalse(node0.isDo());
262:       assertFalse(node0.isNull());
263:       assertFalse(node0.isEmpty());
264:       assertFalse(node0.isTrue());
265:       assertFalse(node0.isOr());
266:       assertFalse(node0.isHook());
267:       assertFalse(node0.isInc());
268:       assertFalse(node0.isSwitch());
269:       assertFalse(node0.isBreak());
270:       assertFalse(node0.isThrow());
271:       assertFalse(node0.isThis());
272:       assertFalse(node0.isComma());
273:       assertFalse(node0.isFalse());
274:       assertTrue(node0.isNumber());
275:       assertFalse(node0.isGetProp());
276:       assertFalse(node0.isAnd());
277:       assertFalse(node0.isCase());
278:       assertFalse(node0.isString());
279:       assertFalse(node0.isScript());
280:       assertEquals((-1), node0.getCharno());
281:       assertFalse(node0.isGetterDef());
282:       assertFalse(node0.isNot());
283:       assertFalse(node0.isObjectLit());
284:       assertFalse(node0.isCast());
285:       assertFalse(node0.hasOneChild());
286:       assertFalse(node0.isTry());
287:       assertFalse(node0.isWith());
288:       assertFalse(node0.isFor());
289:       assertFalse(node0.isCatch());
290:       assertFalse(node0.isFunction());
291:       assertFalse(node0.isRegExp());
292:       assertEquals((-1), node0.getLineno());
293:       assertFalse(node0.isIn());
294:       assertFalse(node0.isInstanceOf());
295:       assertFalse(node0.isSetterDef());
296:       assertFalse(node0.isIf());
297:       assertFalse(node0.isNE());
298:       assertEquals(0, int0);
299:       assertEquals(40, Node.ORIGINALNAME_PROP);
300:       assertEquals(57, Node.REFLECTED_OBJECT);
301:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
302:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
303:       assertEquals(52, Node.LENGTH);
304:       assertEquals(50, Node.FREE_CALL);
305:       assertEquals(8, Node.FLAG_NO_THROWS);
306:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
307:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
309:       assertEquals(39, Node.EMPTY_BLOCK);
310:       assertEquals(57, Node.LAST_PROP);
311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
312:       assertEquals(55, Node.INFERRED_FUNCTION);
313:       assertEquals(12, Node.COLUMN_BITS);
314:       assertEquals(36, Node.QUOTED_PROP);
315:       assertEquals(4095, Node.COLUMN_MASK);
316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
317:       assertEquals(48, Node.DIRECTIVES);
318:       assertEquals(37, Node.OPT_ARG_NAME);
319:       assertEquals(56, Node.CHANGE_TIME);
320:       assertEquals(49, Node.DIRECT_EVAL);
321:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
322:       assertEquals(29, Node.JSDOC_INFO_PROP);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
325:       assertEquals(2, Node.POST_FLAG);
326:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
327:       assertEquals(53, Node.INPUT_ID);
328:       assertEquals(32, Node.INCRDECR_PROP);
329:       assertEquals(1, Node.DECR_FLAG);
330:       assertEquals(51, Node.STATIC_SOURCE_FILE);
331:       assertEquals(30, Node.VAR_ARGS_NAME);
332:       assertEquals(54, Node.SLASH_V);
333:       assertEquals(46, Node.IS_NAMESPACE);
334:       assertEquals(43, Node.IS_CONSTANT_NAME);
335:       
336:       Node node1 = new Node((-252), 42, 0);
337:       assertFalse(node1.isSwitch());
338:       assertFalse(node1.isHook());
339:       assertFalse(node1.isThrow());
340:       assertFalse(node1.isString());
341:       assertFalse(node1.isCase());
342:       assertFalse(node1.isInc());
343:       assertFalse(node1.isGetProp());
344:       assertFalse(node1.isAnd());
345:       assertEquals(172032, node1.getSourcePosition());
346:       assertFalse(node1.isFalse());
347:       assertFalse(node1.isArrayLit());
348:       assertFalse(node1.isVoid());
349:       assertFalse(node1.isTrue());
350:       assertFalse(node1.isDebugger());
351:       assertEquals(42, node1.getLineno());
352:       assertFalse(node1.isDefaultCase());
353:       assertFalse(node1.isNot());
354:       assertFalse(node1.isObjectLit());
355:       assertFalse(node1.isEmpty());
356:       assertFalse(node1.isReturn());
357:       assertFalse(node1.isOr());
358:       assertFalse(node1.isComma());
359:       assertFalse(node1.isNull());
360:       assertFalse(node1.hasChildren());
361:       assertFalse(node1.isBreak());
362:       assertEquals((-252), node1.getType());
363:       assertFalse(node1.isTypeOf());
364:       assertFalse(node1.isDec());
365:       assertFalse(node1.isName());
366:       assertFalse(node1.isDelProp());
367:       assertFalse(node1.isAssign());
368:       assertFalse(node1.isCall());
369:       assertFalse(node1.isExprResult());
370:       assertFalse(node1.isGetElem());
371:       assertFalse(node1.isNew());
372:       assertFalse(node1.isBlock());
373:       assertFalse(node1.isStringKey());
374:       assertFalse(node1.isVar());
375:       assertFalse(node1.isWhile());
376:       assertFalse(node1.isDo());
377:       assertFalse(node1.isSetterDef());
378:       assertFalse(node1.isAdd());
379:       assertFalse(node1.isLabel());
380:       assertFalse(node1.isAssignAdd());
381:       assertEquals(0, node1.getChildCount());
382:       assertFalse(node1.isParamList());
383:       assertFalse(node1.isLabelName());
384:       assertFalse(node1.isFunction());
385:       assertFalse(node1.isContinue());
386:       assertFalse(node1.isCast());
387:       assertFalse(node1.hasOneChild());
388:       assertFalse(node1.isTry());
389:       assertEquals(0, node1.getCharno());
390:       assertFalse(node1.isFor());
391:       assertFalse(node1.isNumber());
392:       assertFalse(node1.isGetterDef());
393:       assertFalse(node1.isScript());
394:       assertFalse(node1.isIn());
395:       assertFalse(node1.isThis());
396:       assertFalse(node1.isNE());
397:       assertFalse(node1.isWith());
398:       assertFalse(node1.isIf());
399:       assertFalse(node1.isRegExp());
400:       assertFalse(node1.isCatch());
401:       assertFalse(node1.hasMoreThanOneChild());
402:       assertFalse(node1.isInstanceOf());
403:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
404:       assertEquals(50, Node.FREE_CALL);
405:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
406:       assertEquals(40, Node.ORIGINALNAME_PROP);
407:       assertEquals(39, Node.EMPTY_BLOCK);
408:       assertEquals(48, Node.DIRECTIVES);
409:       assertEquals(54, Node.SLASH_V);
410:       assertEquals(52, Node.LENGTH);
411:       assertEquals(8, Node.FLAG_NO_THROWS);
412:       assertEquals(57, Node.REFLECTED_OBJECT);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(4095, Node.COLUMN_MASK);
416:       assertEquals(32, Node.INCRDECR_PROP);
417:       assertEquals(12, Node.COLUMN_BITS);
418:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
422:       assertEquals(29, Node.JSDOC_INFO_PROP);
423:       assertEquals(53, Node.INPUT_ID);
424:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
425:       assertEquals(37, Node.OPT_ARG_NAME);
426:       assertEquals(46, Node.IS_NAMESPACE);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(56, Node.CHANGE_TIME);
429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(30, Node.VAR_ARGS_NAME);
433:       assertEquals(55, Node.INFERRED_FUNCTION);
434:       assertEquals(15, Node.NO_SIDE_EFFECTS);
435:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
436:       assertEquals(2, Node.POST_FLAG);
437:       assertEquals(57, Node.LAST_PROP);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       assertNotNull(node1);
440:       assertFalse(node1.equals((Object)node0));
441:       
442:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
443:       assertTrue(linkedHashSet0.isEmpty());
444:       assertEquals(0, linkedHashSet0.size());
445:       assertNotNull(linkedHashSet0);
446:       
447:       node1.setDirectives(linkedHashSet0);
448:       assertFalse(node1.isSwitch());
449:       assertFalse(node1.isHook());
450:       assertFalse(node1.isThrow());
451:       assertFalse(node1.isString());
452:       assertFalse(node1.isCase());
453:       assertFalse(node1.isInc());
454:       assertFalse(node1.isGetProp());
455:       assertFalse(node1.isAnd());
456:       assertEquals(172032, node1.getSourcePosition());
457:       assertFalse(node1.isFalse());
458:       assertFalse(node1.isArrayLit());
459:       assertFalse(node1.isVoid());
460:       assertFalse(node1.isTrue());
461:       assertFalse(node1.isDebugger());
462:       assertEquals(42, node1.getLineno());
463:       assertFalse(node1.isDefaultCase());
464:       assertFalse(node1.isNot());
465:       assertFalse(node1.isObjectLit());
466:       assertFalse(node1.isEmpty());
467:       assertFalse(node1.isReturn());
468:       assertFalse(node1.isOr());
469:       assertFalse(node1.isComma());
470:       assertFalse(node1.isNull());
471:       assertFalse(node1.hasChildren());
472:       assertFalse(node1.isBreak());
473:       assertEquals((-252), node1.getType());
474:       assertFalse(node1.isTypeOf());
475:       assertFalse(node1.isDec());
476:       assertFalse(node1.isName());
477:       assertFalse(node1.isDelProp());
478:       assertFalse(node1.isAssign());
479:       assertFalse(node1.isCall());
480:       assertFalse(node1.isExprResult());
481:       assertFalse(node1.isGetElem());
482:       assertFalse(node1.isNew());
483:       assertFalse(node1.isBlock());
484:       assertFalse(node1.isStringKey());
485:       assertFalse(node1.isVar());
486:       assertFalse(node1.isWhile());
487:       assertFalse(node1.isDo());
488:       assertFalse(node1.isSetterDef());
489:       assertFalse(node1.isAdd());
490:       assertFalse(node1.isLabel());
491:       assertFalse(node1.isAssignAdd());
492:       assertEquals(0, node1.getChildCount());
493:       assertFalse(node1.isParamList());
494:       assertFalse(node1.isLabelName());
495:       assertFalse(node1.isFunction());
496:       assertFalse(node1.isContinue());
497:       assertFalse(node1.isCast());
498:       assertFalse(node1.hasOneChild());
499:       assertFalse(node1.isTry());
500:       assertEquals(0, node1.getCharno());
501:       assertFalse(node1.isFor());
502:       assertFalse(node1.isNumber());
503:       assertFalse(node1.isGetterDef());
504:       assertFalse(node1.isScript());
505:       assertFalse(node1.isIn());
506:       assertFalse(node1.isThis());
507:       assertFalse(node1.isNE());
508:       assertFalse(node1.isWith());
509:       assertFalse(node1.isIf());
510:       assertFalse(node1.isRegExp());
511:       assertFalse(node1.isCatch());
512:       assertFalse(node1.hasMoreThanOneChild());
513:       assertFalse(node1.isInstanceOf());
514:       assertTrue(linkedHashSet0.isEmpty());
515:       assertEquals(0, linkedHashSet0.size());
516:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
517:       assertEquals(50, Node.FREE_CALL);
518:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
519:       assertEquals(40, Node.ORIGINALNAME_PROP);
520:       assertEquals(39, Node.EMPTY_BLOCK);
521:       assertEquals(48, Node.DIRECTIVES);
522:       assertEquals(54, Node.SLASH_V);
523:       assertEquals(52, Node.LENGTH);
524:       assertEquals(8, Node.FLAG_NO_THROWS);
525:       assertEquals(57, Node.REFLECTED_OBJECT);
526:       assertEquals(1, Node.DECR_FLAG);
527:       assertEquals(49, Node.DIRECT_EVAL);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(32, Node.INCRDECR_PROP);
530:       assertEquals(12, Node.COLUMN_BITS);
531:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
533:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
535:       assertEquals(29, Node.JSDOC_INFO_PROP);
536:       assertEquals(53, Node.INPUT_ID);
537:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
538:       assertEquals(37, Node.OPT_ARG_NAME);
539:       assertEquals(46, Node.IS_NAMESPACE);
540:       assertEquals(43, Node.IS_CONSTANT_NAME);
541:       assertEquals(56, Node.CHANGE_TIME);
542:       assertEquals(51, Node.STATIC_SOURCE_FILE);
543:       assertEquals(36, Node.QUOTED_PROP);
544:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
545:       assertEquals(30, Node.VAR_ARGS_NAME);
546:       assertEquals(55, Node.INFERRED_FUNCTION);
547:       assertEquals(15, Node.NO_SIDE_EFFECTS);
548:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
549:       assertEquals(2, Node.POST_FLAG);
550:       assertEquals(57, Node.LAST_PROP);
551:       assertEquals(47, Node.IS_DISPATCHER);
552:       assertFalse(node1.equals((Object)node0));
553:       
554:       boolean boolean1 = node1.isRegExp();
555:       assertFalse(node1.isSwitch());
556:       assertFalse(node1.isHook());
557:       assertFalse(node1.isThrow());
558:       assertFalse(node1.isString());
559:       assertFalse(node1.isCase());
560:       assertFalse(node1.isInc());
561:       assertFalse(node1.isGetProp());
562:       assertFalse(node1.isAnd());
563:       assertEquals(172032, node1.getSourcePosition());
564:       assertFalse(node1.isFalse());
565:       assertFalse(node1.isArrayLit());
566:       assertFalse(node1.isVoid());
567:       assertFalse(node1.isTrue());
568:       assertFalse(node1.isDebugger());
569:       assertEquals(42, node1.getLineno());
570:       assertFalse(node1.isDefaultCase());
571:       assertFalse(node1.isNot());
572:       assertFalse(node1.isObjectLit());
573:       assertFalse(node1.isEmpty());
574:       assertFalse(node1.isReturn());
575:       assertFalse(node1.isOr());
576:       assertFalse(node1.isComma());
577:       assertFalse(node1.isNull());
578:       assertFalse(node1.hasChildren());
579:       assertFalse(node1.isBreak());
580:       assertEquals((-252), node1.getType());
581:       assertFalse(node1.isTypeOf());
582:       assertFalse(node1.isDec());
583:       assertFalse(node1.isName());
584:       assertFalse(node1.isDelProp());
585:       assertFalse(node1.isAssign());
586:       assertFalse(node1.isCall());
587:       assertFalse(node1.isExprResult());
588:       assertFalse(node1.isGetElem());
589:       assertFalse(node1.isNew());
590:       assertFalse(node1.isBlock());
591:       assertFalse(node1.isStringKey());
592:       assertFalse(node1.isVar());
593:       assertFalse(node1.isWhile());
594:       assertFalse(node1.isDo());
595:       assertFalse(node1.isSetterDef());
596:       assertFalse(node1.isAdd());
597:       assertFalse(node1.isLabel());
598:       assertFalse(node1.isAssignAdd());
599:       assertEquals(0, node1.getChildCount());
600:       assertFalse(node1.isParamList());
601:       assertFalse(node1.isLabelName());
602:       assertFalse(node1.isFunction());
603:       assertFalse(node1.isContinue());
604:       assertFalse(node1.isCast());
605:       assertFalse(node1.hasOneChild());
606:       assertFalse(node1.isTry());
607:       assertEquals(0, node1.getCharno());
608:       assertFalse(node1.isFor());
609:       assertFalse(node1.isNumber());
610:       assertFalse(node1.isGetterDef());
611:       assertFalse(node1.isScript());
612:       assertFalse(node1.isIn());
613:       assertFalse(node1.isThis());
614:       assertFalse(node1.isNE());
615:       assertFalse(node1.isWith());
616:       assertFalse(node1.isIf());
617:       assertFalse(node1.isRegExp());
618:       assertFalse(node1.isCatch());
619:       assertFalse(node1.hasMoreThanOneChild());
620:       assertFalse(node1.isInstanceOf());
621:       assertFalse(boolean1);
622:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
623:       assertEquals(50, Node.FREE_CALL);
624:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
625:       assertEquals(40, Node.ORIGINALNAME_PROP);
626:       assertEquals(39, Node.EMPTY_BLOCK);
627:       assertEquals(48, Node.DIRECTIVES);
628:       assertEquals(54, Node.SLASH_V);
629:       assertEquals(52, Node.LENGTH);
630:       assertEquals(8, Node.FLAG_NO_THROWS);
631:       assertEquals(57, Node.REFLECTED_OBJECT);
632:       assertEquals(1, Node.DECR_FLAG);
633:       assertEquals(49, Node.DIRECT_EVAL);
634:       assertEquals(4095, Node.COLUMN_MASK);
635:       assertEquals(32, Node.INCRDECR_PROP);
636:       assertEquals(12, Node.COLUMN_BITS);
637:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
638:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
639:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
640:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
641:       assertEquals(29, Node.JSDOC_INFO_PROP);
642:       assertEquals(53, Node.INPUT_ID);
643:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
644:       assertEquals(37, Node.OPT_ARG_NAME);
645:       assertEquals(46, Node.IS_NAMESPACE);
646:       assertEquals(43, Node.IS_CONSTANT_NAME);
647:       assertEquals(56, Node.CHANGE_TIME);
648:       assertEquals(51, Node.STATIC_SOURCE_FILE);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
651:       assertEquals(30, Node.VAR_ARGS_NAME);
652:       assertEquals(55, Node.INFERRED_FUNCTION);
653:       assertEquals(15, Node.NO_SIDE_EFFECTS);
654:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
655:       assertEquals(2, Node.POST_FLAG);
656:       assertEquals(57, Node.LAST_PROP);
657:       assertEquals(47, Node.IS_DISPATCHER);
658:       assertFalse(node1.equals((Object)node0));
659:       assertTrue(boolean1 == boolean0);
660:       
661:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
662:       assertEquals(53, node_SideEffectFlags0.valueOf());
663:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
664:       assertNotNull(node_SideEffectFlags0);
665:       
666:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
667:       assertEquals(53, node_SideEffectFlags0.valueOf());
668:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
669:       assertEquals(53, node_SideEffectFlags1.valueOf());
670:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
671:       assertNotNull(node_SideEffectFlags1);
672:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
673:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
674:       
675:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
676:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
677:       assertEquals(48, node_SideEffectFlags0.valueOf());
678:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
679:       assertEquals(48, node_SideEffectFlags1.valueOf());
680:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
681:       assertEquals(48, node_SideEffectFlags2.valueOf());
682:       assertNotNull(node_SideEffectFlags2);
683:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
684:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
685:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
686:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
687:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
688:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
689:       
690:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
691:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
692:       assertEquals(48, node_SideEffectFlags0.valueOf());
693:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
694:       assertEquals(48, node_SideEffectFlags1.valueOf());
695:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
696:       assertEquals(48, node_SideEffectFlags2.valueOf());
697:       assertEquals(48, node_SideEffectFlags3.valueOf());
698:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
699:       assertNotNull(node_SideEffectFlags3);
700:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
701:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
702:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
703:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
704:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
705:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
706:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
707:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
708:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
709:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
710:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
711:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
712:       
713:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
714:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
715:       assertEquals(32, node_SideEffectFlags0.valueOf());
716:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
717:       assertEquals(32, node_SideEffectFlags1.valueOf());
718:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
719:       assertEquals(32, node_SideEffectFlags2.valueOf());
720:       assertEquals(32, node_SideEffectFlags3.valueOf());
721:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
722:       assertEquals(32, node_SideEffectFlags4.valueOf());
723:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
724:       assertNotNull(node_SideEffectFlags4);
725:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
726:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
727:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
728:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
729:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
730:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
731:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
732:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
733:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
734:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
735:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
736:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
737:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
738:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
739:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
740:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
741:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
742:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
743:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
744:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
745:       
746:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
747:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
748:       assertEquals(32, node_SideEffectFlags0.valueOf());
749:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
750:       assertEquals(32, node_SideEffectFlags1.valueOf());
751:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
752:       assertEquals(32, node_SideEffectFlags2.valueOf());
753:       assertEquals(32, node_SideEffectFlags3.valueOf());
754:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
755:       assertEquals(32, node_SideEffectFlags4.valueOf());
756:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
757:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
758:       assertEquals(32, node_SideEffectFlags5.valueOf());
759:       assertNotNull(node_SideEffectFlags5);
760:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
761:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
762:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
763:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
764:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
765:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
766:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
767:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
768:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
769:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
770:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
771:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
772:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
773:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
774:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
775:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
776:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
777:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
778:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
779:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
780:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
781:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
782:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
783:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
784:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
785:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
786:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
787:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
788:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
789:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
790:       
791:       boolean boolean2 = node_SideEffectFlags5.areAllFlagsSet();
792:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
793:       assertEquals(32, node_SideEffectFlags0.valueOf());
794:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
795:       assertEquals(32, node_SideEffectFlags1.valueOf());
796:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
797:       assertEquals(32, node_SideEffectFlags2.valueOf());
798:       assertEquals(32, node_SideEffectFlags3.valueOf());
799:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
800:       assertEquals(32, node_SideEffectFlags4.valueOf());
801:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
802:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
803:       assertEquals(32, node_SideEffectFlags5.valueOf());
804:       assertFalse(boolean2);
805:       assertTrue(boolean2 == boolean0);
806:       assertTrue(boolean2 == boolean1);
807:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
808:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
809:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
810:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
811:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
812:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
813:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
814:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
815:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
816:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
817:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
818:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
819:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
820:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
821:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
822:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
823:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
824:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
825:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
826:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
827:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
828:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
829:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
830:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
831:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
832:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
833:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
834:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
835:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
836:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
837:       
838:       boolean boolean3 = node1.isHook();
839:       assertFalse(node1.isSwitch());
840:       assertFalse(node1.isHook());
841:       assertFalse(node1.isThrow());
842:       assertFalse(node1.isString());
843:       assertFalse(node1.isCase());
844:       assertFalse(node1.isInc());
845:       assertFalse(node1.isGetProp());
846:       assertFalse(node1.isAnd());
847:       assertEquals(172032, node1.getSourcePosition());
848:       assertFalse(node1.isFalse());
849:       assertFalse(node1.isArrayLit());
850:       assertFalse(node1.isVoid());
851:       assertFalse(node1.isTrue());
852:       assertFalse(node1.isDebugger());
853:       assertEquals(42, node1.getLineno());
854:       assertFalse(node1.isDefaultCase());
855:       assertFalse(node1.isNot());
856:       assertFalse(node1.isObjectLit());
857:       assertFalse(node1.isEmpty());
858:       assertFalse(node1.isReturn());
859:       assertFalse(node1.isOr());
860:       assertFalse(node1.isComma());
861:       assertFalse(node1.isNull());
862:       assertFalse(node1.hasChildren());
863:       assertFalse(node1.isBreak());
864:       assertEquals((-252), node1.getType());
865:       assertFalse(node1.isTypeOf());
866:       assertFalse(node1.isDec());
867:       assertFalse(node1.isName());
868:       assertFalse(node1.isDelProp());
869:       assertFalse(node1.isAssign());
870:       assertFalse(node1.isCall());
871:       assertFalse(node1.isExprResult());
872:       assertFalse(node1.isGetElem());
873:       assertFalse(node1.isNew());
874:       assertFalse(node1.isBlock());
875:       assertFalse(node1.isStringKey());
876:       assertFalse(node1.isVar());
877:       assertFalse(node1.isWhile());
878:       assertFalse(node1.isDo());
879:       assertFalse(node1.isSetterDef());
880:       assertFalse(node1.isAdd());
881:       assertFalse(node1.isLabel());
882:       assertFalse(node1.isAssignAdd());
883:       assertEquals(0, node1.getChildCount());
884:       assertFalse(node1.isParamList());
885:       assertFalse(node1.isLabelName());
886:       assertFalse(node1.isFunction());
887:       assertFalse(node1.isContinue());
888:       assertFalse(node1.isCast());
889:       assertFalse(node1.hasOneChild());
890:       assertFalse(node1.isTry());
891:       assertEquals(0, node1.getCharno());
892:       assertFalse(node1.isFor());
893:       assertFalse(node1.isNumber());
894:       assertFalse(node1.isGetterDef());
895:       assertFalse(node1.isScript());
896:       assertFalse(node1.isIn());
897:       assertFalse(node1.isThis());
898:       assertFalse(node1.isNE());
899:       assertFalse(node1.isWith());
900:       assertFalse(node1.isIf());
901:       assertFalse(node1.isRegExp());
902:       assertFalse(node1.isCatch());
903:       assertFalse(node1.hasMoreThanOneChild());
904:       assertFalse(node1.isInstanceOf());
905:       assertFalse(boolean3);
906:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
907:       assertEquals(50, Node.FREE_CALL);
908:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
909:       assertEquals(40, Node.ORIGINALNAME_PROP);
910:       assertEquals(39, Node.EMPTY_BLOCK);
911:       assertEquals(48, Node.DIRECTIVES);
912:       assertEquals(54, Node.SLASH_V);
913:       assertEquals(52, Node.LENGTH);
914:       assertEquals(8, Node.FLAG_NO_THROWS);
915:       assertEquals(57, Node.REFLECTED_OBJECT);
916:       assertEquals(1, Node.DECR_FLAG);
917:       assertEquals(49, Node.DIRECT_EVAL);
918:       assertEquals(4095, Node.COLUMN_MASK);
919:       assertEquals(32, Node.INCRDECR_PROP);
920:       assertEquals(12, Node.COLUMN_BITS);
921:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
922:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
924:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
925:       assertEquals(29, Node.JSDOC_INFO_PROP);
926:       assertEquals(53, Node.INPUT_ID);
927:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
928:       assertEquals(37, Node.OPT_ARG_NAME);
929:       assertEquals(46, Node.IS_NAMESPACE);
930:       assertEquals(43, Node.IS_CONSTANT_NAME);
931:       assertEquals(56, Node.CHANGE_TIME);
932:       assertEquals(51, Node.STATIC_SOURCE_FILE);
933:       assertEquals(36, Node.QUOTED_PROP);
934:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
935:       assertEquals(30, Node.VAR_ARGS_NAME);
936:       assertEquals(55, Node.INFERRED_FUNCTION);
937:       assertEquals(15, Node.NO_SIDE_EFFECTS);
938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
939:       assertEquals(2, Node.POST_FLAG);
940:       assertEquals(57, Node.LAST_PROP);
941:       assertEquals(47, Node.IS_DISPATCHER);
942:       assertFalse(node1.equals((Object)node0));
943:       assertTrue(boolean3 == boolean2);
944:       assertTrue(boolean3 == boolean1);
945:       assertTrue(boolean3 == boolean0);
946:       
947:       Iterable<Node> iterable0 = node0.children();
948:       assertFalse(node0.isBlock());
949:       assertFalse(node0.isVar());
950:       assertFalse(node0.isAdd());
951:       assertFalse(node0.isCall());
952:       assertFalse(node0.isName());
953:       assertFalse(node0.isNew());
954:       assertFalse(node0.isWhile());
955:       assertEquals(39, node0.getType());
956:       assertFalse(node0.isContinue());
957:       assertFalse(node0.hasMoreThanOneChild());
958:       assertFalse(node0.isReturn());
959:       assertFalse(node0.isParamList());
960:       assertFalse(node0.isStringKey());
961:       assertFalse(node0.isDebugger());
962:       assertEquals((-1), node0.getSourcePosition());
963:       assertFalse(node0.isExprResult());
964:       assertFalse(node0.isArrayLit());
965:       assertFalse(node0.isLabelName());
966:       assertFalse(node0.isVoid());
967:       assertFalse(node0.hasChildren());
968:       assertFalse(node0.isDefaultCase());
969:       assertFalse(node0.isGetElem());
970:       assertFalse(node0.isTypeOf());
971:       assertFalse(node0.isDec());
972:       assertEquals(0, node0.getChildCount());
973:       assertFalse(node0.isAssign());
974:       assertFalse(node0.isLabel());
975:       assertFalse(node0.isAssignAdd());
976:       assertFalse(node0.isDelProp());
977:       assertFalse(node0.isDo());
978:       assertFalse(node0.isNull());
979:       assertFalse(node0.isEmpty());
980:       assertFalse(node0.isTrue());
981:       assertFalse(node0.isOr());
982:       assertFalse(node0.isHook());
983:       assertFalse(node0.isInc());
984:       assertFalse(node0.isSwitch());
985:       assertFalse(node0.isBreak());
986:       assertFalse(node0.isThrow());
987:       assertFalse(node0.isThis());
988:       assertFalse(node0.isComma());
989:       assertFalse(node0.isFalse());
990:       assertTrue(node0.isNumber());
991:       assertFalse(node0.isGetProp());
992:       assertFalse(node0.isAnd());
993:       assertFalse(node0.isCase());
994:       assertFalse(node0.isString());
995:       assertFalse(node0.isScript());
996:       assertEquals((-1), node0.getCharno());
997:       assertFalse(node0.isGetterDef());
998:       assertFalse(node0.isNot());
999:       assertFalse(node0.isObjectLit());
1000:       assertFalse(node0.isCast());
1001:       assertFalse(node0.hasOneChild());
1002:       assertFalse(node0.isTry());
1003:       assertFalse(node0.isWith());
1004:       assertFalse(node0.isFor());
1005:       assertFalse(node0.isCatch());
1006:       assertFalse(node0.isFunction());
1007:       assertFalse(node0.isRegExp());
1008:       assertEquals((-1), node0.getLineno());
1009:       assertFalse(node0.isIn());
1010:       assertFalse(node0.isInstanceOf());
1011:       assertFalse(node0.isSetterDef());
1012:       assertFalse(node0.isIf());
1013:       assertFalse(node0.isNE());
1014:       assertEquals(40, Node.ORIGINALNAME_PROP);
1015:       assertEquals(57, Node.REFLECTED_OBJECT);
1016:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1017:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1018:       assertEquals(52, Node.LENGTH);
1019:       assertEquals(50, Node.FREE_CALL);
1020:       assertEquals(8, Node.FLAG_NO_THROWS);
1021:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1022:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1023:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1024:       assertEquals(39, Node.EMPTY_BLOCK);
1025:       assertEquals(57, Node.LAST_PROP);
1026:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1027:       assertEquals(55, Node.INFERRED_FUNCTION);
1028:       assertEquals(12, Node.COLUMN_BITS);
1029:       assertEquals(36, Node.QUOTED_PROP);
1030:       assertEquals(4095, Node.COLUMN_MASK);
1031:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1032:       assertEquals(48, Node.DIRECTIVES);
1033:       assertEquals(37, Node.OPT_ARG_NAME);
1034:       assertEquals(56, Node.CHANGE_TIME);
1035:       assertEquals(49, Node.DIRECT_EVAL);
1036:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1037:       assertEquals(29, Node.JSDOC_INFO_PROP);
1038:       assertEquals(47, Node.IS_DISPATCHER);
1039:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1040:       assertEquals(2, Node.POST_FLAG);
1041:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1042:       assertEquals(53, Node.INPUT_ID);
1043:       assertEquals(32, Node.INCRDECR_PROP);
1044:       assertEquals(1, Node.DECR_FLAG);
1045:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1046:       assertEquals(30, Node.VAR_ARGS_NAME);
1047:       assertEquals(54, Node.SLASH_V);
1048:       assertEquals(46, Node.IS_NAMESPACE);
1049:       assertEquals(43, Node.IS_CONSTANT_NAME);
1050:       assertNotNull(iterable0);
1051:       assertFalse(node0.equals((Object)node1));
1052:       assertFalse(iterable0.contains(node0));
1053:       
1054:       node0.putProp(29, node_SideEffectFlags1);
1055:       assertFalse(node0.isBlock());
1056:       assertFalse(node0.isVar());
1057:       assertFalse(node0.isAdd());
1058:       assertFalse(node0.isCall());
1059:       assertFalse(node0.isName());
1060:       assertFalse(node0.isNew());
1061:       assertFalse(node0.isWhile());
1062:       assertEquals(39, node0.getType());
1063:       assertFalse(node0.isContinue());
1064:       assertFalse(node0.hasMoreThanOneChild());
1065:       assertFalse(node0.isReturn());
1066:       assertFalse(node0.isParamList());
1067:       assertFalse(node0.isStringKey());
1068:       assertFalse(node0.isDebugger());
1069:       assertEquals((-1), node0.getSourcePosition());
1070:       assertFalse(node0.isExprResult());
1071:       assertFalse(node0.isArrayLit());
1072:       assertFalse(node0.isLabelName());
1073:       assertFalse(node0.isVoid());
1074:       assertFalse(node0.hasChildren());
1075:       assertFalse(node0.isDefaultCase());
1076:       assertFalse(node0.isGetElem());
1077:       assertFalse(node0.isTypeOf());
1078:       assertFalse(node0.isDec());
1079:       assertEquals(0, node0.getChildCount());
1080:       assertFalse(node0.isAssign());
1081:       assertFalse(node0.isLabel());
1082:       assertFalse(node0.isAssignAdd());
1083:       assertFalse(node0.isDelProp());
1084:       assertFalse(node0.isDo());
1085:       assertFalse(node0.isNull());
1086:       assertFalse(node0.isEmpty());
1087:       assertFalse(node0.isTrue());
1088:       assertFalse(node0.isOr());
1089:       assertFalse(node0.isHook());
1090:       assertFalse(node0.isInc());
1091:       assertFalse(node0.isSwitch());
1092:       assertFalse(node0.isBreak());
1093:       assertFalse(node0.isThrow());
1094:       assertFalse(node0.isThis());
1095:       assertFalse(node0.isComma());
1096:       assertFalse(node0.isFalse());
1097:       assertTrue(node0.isNumber());
1098:       assertFalse(node0.isGetProp());
1099:       assertFalse(node0.isAnd());
1100:       assertFalse(node0.isCase());
1101:       assertFalse(node0.isString());
1102:       assertFalse(node0.isScript());
1103:       assertEquals((-1), node0.getCharno());
1104:       assertFalse(node0.isGetterDef());
1105:       assertFalse(node0.isNot());
1106:       assertFalse(node0.isObjectLit());
1107:       assertFalse(node0.isCast());
1108:       assertFalse(node0.hasOneChild());
1109:       assertFalse(node0.isTry());
1110:       assertFalse(node0.isWith());
1111:       assertFalse(node0.isFor());
1112:       assertFalse(node0.isCatch());
1113:       assertFalse(node0.isFunction());
1114:       assertFalse(node0.isRegExp());
1115:       assertEquals((-1), node0.getLineno());
1116:       assertFalse(node0.isIn());
1117:       assertFalse(node0.isInstanceOf());
1118:       assertFalse(node0.isSetterDef());
1119:       assertFalse(node0.isIf());
1120:       assertFalse(node0.isNE());
1121:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1122:       assertEquals(32, node_SideEffectFlags0.valueOf());
1123:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1124:       assertEquals(32, node_SideEffectFlags1.valueOf());
1125:       assertEquals(40, Node.ORIGINALNAME_PROP);
1126:       assertEquals(57, Node.REFLECTED_OBJECT);
1127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1128:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1129:       assertEquals(52, Node.LENGTH);
1130:       assertEquals(50, Node.FREE_CALL);
1131:       assertEquals(8, Node.FLAG_NO_THROWS);
1132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1133:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1134:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1135:       assertEquals(39, Node.EMPTY_BLOCK);
1136:       assertEquals(57, Node.LAST_PROP);
1137:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1138:       assertEquals(55, Node.INFERRED_FUNCTION);
1139:       assertEquals(12, Node.COLUMN_BITS);
1140:       assertEquals(36, Node.QUOTED_PROP);
1141:       assertEquals(4095, Node.COLUMN_MASK);
1142:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1143:       assertEquals(48, Node.DIRECTIVES);
1144:       assertEquals(37, Node.OPT_ARG_NAME);
1145:       assertEquals(56, Node.CHANGE_TIME);
1146:       assertEquals(49, Node.DIRECT_EVAL);
1147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1148:       assertEquals(29, Node.JSDOC_INFO_PROP);
1149:       assertEquals(47, Node.IS_DISPATCHER);
1150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1151:       assertEquals(2, Node.POST_FLAG);
1152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1153:       assertEquals(53, Node.INPUT_ID);
1154:       assertEquals(32, Node.INCRDECR_PROP);
1155:       assertEquals(1, Node.DECR_FLAG);
1156:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1157:       assertEquals(30, Node.VAR_ARGS_NAME);
1158:       assertEquals(54, Node.SLASH_V);
1159:       assertEquals(46, Node.IS_NAMESPACE);
1160:       assertEquals(43, Node.IS_CONSTANT_NAME);
1161:       assertFalse(node0.equals((Object)node1));
1162:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1163:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1164:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1165:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1166:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1167:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1168:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1169:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1170:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1171:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1172:       
1173:       Iterable<Node> iterable1 = node0.children();
1174:       assertFalse(node0.isBlock());
1175:       assertFalse(node0.isVar());
1176:       assertFalse(node0.isAdd());
1177:       assertFalse(node0.isCall());
1178:       assertFalse(node0.isName());
1179:       assertFalse(node0.isNew());
1180:       assertFalse(node0.isWhile());
1181:       assertEquals(39, node0.getType());
1182:       assertFalse(node0.isContinue());
1183:       assertFalse(node0.hasMoreThanOneChild());
1184:       assertFalse(node0.isReturn());
1185:       assertFalse(node0.isParamList());
1186:       assertFalse(node0.isStringKey());
1187:       assertFalse(node0.isDebugger());
1188:       assertEquals((-1), node0.getSourcePosition());
1189:       assertFalse(node0.isExprResult());
1190:       assertFalse(node0.isArrayLit());
1191:       assertFalse(node0.isLabelName());
1192:       assertFalse(node0.isVoid());
1193:       assertFalse(node0.hasChildren());
1194:       assertFalse(node0.isDefaultCase());
1195:       assertFalse(node0.isGetElem());
1196:       assertFalse(node0.isTypeOf());
1197:       assertFalse(node0.isDec());
1198:       assertEquals(0, node0.getChildCount());
1199:       assertFalse(node0.isAssign());
1200:       assertFalse(node0.isLabel());
1201:       assertFalse(node0.isAssignAdd());
1202:       assertFalse(node0.isDelProp());
1203:       assertFalse(node0.isDo());
1204:       assertFalse(node0.isNull());
1205:       assertFalse(node0.isEmpty());
1206:       assertFalse(node0.isTrue());
1207:       assertFalse(node0.isOr());
1208:       assertFalse(node0.isHook());
1209:       assertFalse(node0.isInc());
1210:       assertFalse(node0.isSwitch());
1211:       assertFalse(node0.isBreak());
1212:       assertFalse(node0.isThrow());
1213:       assertFalse(node0.isThis());
1214:       assertFalse(node0.isComma());
1215:       assertFalse(node0.isFalse());
1216:       assertTrue(node0.isNumber());
1217:       assertFalse(node0.isGetProp());
1218:       assertFalse(node0.isAnd());
1219:       assertFalse(node0.isCase());
1220:       assertFalse(node0.isString());
1221:       assertFalse(node0.isScript());
1222:       assertEquals((-1), node0.getCharno());
1223:       assertFalse(node0.isGetterDef());
1224:       assertFalse(node0.isNot());
1225:       assertFalse(node0.isObjectLit());
1226:       assertFalse(node0.isCast());
1227:       assertFalse(node0.hasOneChild());
1228:       assertFalse(node0.isTry());
1229:       assertFalse(node0.isWith());
1230:       assertFalse(node0.isFor());
1231:       assertFalse(node0.isCatch());
1232:       assertFalse(node0.isFunction());
1233:       assertFalse(node0.isRegExp());
1234:       assertEquals((-1), node0.getLineno());
1235:       assertFalse(node0.isIn());
1236:       assertFalse(node0.isInstanceOf());
1237:       assertFalse(node0.isSetterDef());
1238:       assertFalse(node0.isIf());
1239:       assertFalse(node0.isNE());
1240:       assertEquals(40, Node.ORIGINALNAME_PROP);
1241:       assertEquals(57, Node.REFLECTED_OBJECT);
1242:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1243:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1244:       assertEquals(52, Node.LENGTH);
1245:       assertEquals(50, Node.FREE_CALL);
1246:       assertEquals(8, Node.FLAG_NO_THROWS);
1247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1249:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1250:       assertEquals(39, Node.EMPTY_BLOCK);
1251:       assertEquals(57, Node.LAST_PROP);
1252:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1253:       assertEquals(55, Node.INFERRED_FUNCTION);
1254:       assertEquals(12, Node.COLUMN_BITS);
1255:       assertEquals(36, Node.QUOTED_PROP);
1256:       assertEquals(4095, Node.COLUMN_MASK);
1257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1258:       assertEquals(48, Node.DIRECTIVES);
1259:       assertEquals(37, Node.OPT_ARG_NAME);
1260:       assertEquals(56, Node.CHANGE_TIME);
1261:       assertEquals(49, Node.DIRECT_EVAL);
1262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1263:       assertEquals(29, Node.JSDOC_INFO_PROP);
1264:       assertEquals(47, Node.IS_DISPATCHER);
1265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1266:       assertEquals(2, Node.POST_FLAG);
1267:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1268:       assertEquals(53, Node.INPUT_ID);
1269:       assertEquals(32, Node.INCRDECR_PROP);
1270:       assertEquals(1, Node.DECR_FLAG);
1271:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1272:       assertEquals(30, Node.VAR_ARGS_NAME);
1273:       assertEquals(54, Node.SLASH_V);
1274:       assertEquals(46, Node.IS_NAMESPACE);
1275:       assertEquals(43, Node.IS_CONSTANT_NAME);
1276:       assertNotNull(iterable1);
1277:       assertFalse(node0.equals((Object)node1));
1278:       assertFalse(iterable1.contains(node0));
1279:       assertSame(iterable1, iterable0);
1280:       
1281:       Node node2 = Node.newNumber((double) 49, 1277, (-2432));
1282:       assertFalse(node2.isIn());
1283:       assertTrue(node2.isNumber());
1284:       assertFalse(node2.isString());
1285:       assertFalse(node2.isIf());
1286:       assertFalse(node2.isDelProp());
1287:       assertFalse(node2.isGetterDef());
1288:       assertEquals((-1), node2.getCharno());
1289:       assertFalse(node2.isNE());
1290:       assertFalse(node2.isSwitch());
1291:       assertFalse(node2.isArrayLit());
1292:       assertFalse(node2.isFalse());
1293:       assertFalse(node2.isFunction());
1294:       assertFalse(node2.isInc());
1295:       assertFalse(node2.isEmpty());
1296:       assertFalse(node2.isDefaultCase());
1297:       assertFalse(node2.isThrow());
1298:       assertFalse(node2.isGetProp());
1299:       assertFalse(node2.isObjectLit());
1300:       assertFalse(node2.isBreak());
1301:       assertFalse(node2.isNull());
1302:       assertFalse(node2.isNot());
1303:       assertFalse(node2.isDebugger());
1304:       assertFalse(node2.isAnd());
1305:       assertFalse(node2.isVoid());
1306:       assertFalse(node2.isTrue());
1307:       assertFalse(node2.isName());
1308:       assertFalse(node2.isGetElem());
1309:       assertFalse(node2.isCall());
1310:       assertFalse(node2.isExprResult());
1311:       assertFalse(node2.hasChildren());
1312:       assertFalse(node2.isTypeOf());
1313:       assertFalse(node2.isAssign());
1314:       assertFalse(node2.isDec());
1315:       assertFalse(node2.isComma());
1316:       assertFalse(node2.isWhile());
1317:       assertFalse(node2.isReturn());
1318:       assertFalse(node2.isLabel());
1319:       assertFalse(node2.isOr());
1320:       assertEquals((-1), node2.getLineno());
1321:       assertFalse(node2.isContinue());
1322:       assertFalse(node2.hasMoreThanOneChild());
1323:       assertFalse(node2.isLabelName());
1324:       assertEquals((-1), node2.getSourcePosition());
1325:       assertFalse(node2.isNew());
1326:       assertFalse(node2.isCast());
1327:       assertFalse(node2.isAdd());
1328:       assertFalse(node2.isDo());
1329:       assertFalse(node2.isVar());
1330:       assertFalse(node2.isAssignAdd());
1331:       assertEquals(0, node2.getChildCount());
1332:       assertFalse(node2.isSetterDef());
1333:       assertFalse(node2.isInstanceOf());
1334:       assertFalse(node2.isCatch());
1335:       assertFalse(node2.isStringKey());
1336:       assertFalse(node2.isParamList());
1337:       assertFalse(node2.isHook());
1338:       assertFalse(node2.isTry());
1339:       assertFalse(node2.hasOneChild());
1340:       assertFalse(node2.isScript());
1341:       assertFalse(node2.isWith());
1342:       assertFalse(node2.isRegExp());
1343:       assertEquals(39, node2.getType());
1344:       assertFalse(node2.isCase());
1345:       assertFalse(node2.isThis());
1346:       assertFalse(node2.isBlock());
1347:       assertFalse(node2.isFor());
1348:       assertEquals(1, Node.DECR_FLAG);
1349:       assertEquals(30, Node.VAR_ARGS_NAME);
1350:       assertEquals(49, Node.DIRECT_EVAL);
1351:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1352:       assertEquals(57, Node.LAST_PROP);
1353:       assertEquals(12, Node.COLUMN_BITS);
1354:       assertEquals(46, Node.IS_NAMESPACE);
1355:       assertEquals(54, Node.SLASH_V);
1356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1357:       assertEquals(37, Node.OPT_ARG_NAME);
1358:       assertEquals(2, Node.POST_FLAG);
1359:       assertEquals(40, Node.ORIGINALNAME_PROP);
1360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1361:       assertEquals(50, Node.FREE_CALL);
1362:       assertEquals(32, Node.INCRDECR_PROP);
1363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1364:       assertEquals(43, Node.IS_CONSTANT_NAME);
1365:       assertEquals(36, Node.QUOTED_PROP);
1366:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1367:       assertEquals(48, Node.DIRECTIVES);
1368:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1369:       assertEquals(4095, Node.COLUMN_MASK);
1370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1371:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1372:       assertEquals(56, Node.CHANGE_TIME);
1373:       assertEquals(57, Node.REFLECTED_OBJECT);
1374:       assertEquals(47, Node.IS_DISPATCHER);
1375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1376:       assertEquals(53, Node.INPUT_ID);
1377:       assertEquals(52, Node.LENGTH);
1378:       assertEquals(8, Node.FLAG_NO_THROWS);
1379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1380:       assertEquals(39, Node.EMPTY_BLOCK);
1381:       assertEquals(55, Node.INFERRED_FUNCTION);
1382:       assertEquals(29, Node.JSDOC_INFO_PROP);
1383:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1384:       assertNotNull(node2);
1385:       assertFalse(node2.equals((Object)node0));
1386:       assertFalse(node2.equals((Object)node1));
1387:       assertNotSame(node2, node0);
1388:   }
1389: }
RegularFileObject[/tmp/EvoSuite_93_1628255812259/com/google/javascript/rhino/Node_93_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:52 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_93_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_93_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.AbstractIndexedListIterator",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_93_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.NamedType",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.javascript.rhino.SimpleErrorReporter",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
345:       "com.google.common.collect.Sets",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.AbstractIndexedListIterator",
356:       "com.google.common.collect.Iterators$11",
357:       "com.google.javascript.rhino.jstype.TemplatizedType",
358:       "com.google.common.collect.ImmutableSet",
359:       "com.google.common.collect.EmptyImmutableSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.JSTypeExpression",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
369:     );
370:   }
371: }

[MASTER] 13:16:52.515 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 1004, (-1206));
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node0);

boolean boolean0 = node0.isInc();
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(boolean0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

int int0 = node0.getSideEffectFlags();
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(0, int0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node1 = new Node((-252), 42, 0);
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertEquals(172032, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(42, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertEquals((-252), node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(0, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, linkedHashSet0.size());
assertNotNull(linkedHashSet0);

node1.setDirectives(linkedHashSet0);
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertEquals(172032, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(42, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertEquals((-252), node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(0, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, linkedHashSet0.size());
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node1.isRegExp();
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertEquals(172032, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(42, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertEquals((-252), node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(0, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(boolean1);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
assertEquals(53, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertEquals(53, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(53, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags2.valueOf());
assertEquals(48, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags2.valueOf());
assertEquals(32, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags2.valueOf());
assertEquals(32, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);

boolean boolean2 = node_SideEffectFlags5.areAllFlagsSet();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags2.valueOf());
assertEquals(32, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags5.valueOf());
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);

boolean boolean3 = node1.isHook();
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isThrow());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isGetProp());
assertFalse(node1.isAnd());
assertEquals(172032, node1.getSourcePosition());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertEquals(42, node1.getLineno());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.hasChildren());
assertFalse(node1.isBreak());
assertEquals((-252), node1.getType());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isAssign());
assertFalse(node1.isCall());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isStringKey());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isParamList());
assertFalse(node1.isLabelName());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertEquals(0, node1.getCharno());
assertFalse(node1.isFor());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isIn());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertFalse(node1.isWith());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(boolean3);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));

node0.putProp(29, node_SideEffectFlags1);
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags1.valueOf());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);

Iterable<Node> iterable1 = node0.children();
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isExprResult());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isVoid());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetElem());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(iterable1);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable1.contains(node0));
assertSame(iterable1, iterable0);

Node node2 = Node.newNumber((double) 49, 1277, (-2432));
assertFalse(node2.isIn());
assertTrue(node2.isNumber());
assertFalse(node2.isString());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFalse());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isThrow());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isExprResult());
assertFalse(node2.hasChildren());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isWhile());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabelName());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isNew());
assertFalse(node2.isCast());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isHook());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());
assertFalse(node2.isScript());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertEquals(39, node2.getType());
assertFalse(node2.isCase());
assertFalse(node2.isThis());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertNotNull(node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertNotSame(node2, node0);


[MASTER] 13:16:54.525 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_105_1628255814319/com/google/javascript/rhino/Node_105_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_105_1628255814319/com/google/javascript/rhino/Node_105_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:54.525 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:54.525 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:54.526 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 951
[MASTER] 13:16:54.529 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_105_1628255814319/com/google/javascript/rhino/Node_105_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.LinkedHashSet;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_105_tmp__ESTest extends Node_105_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(0.0, 1004, (-1206));
23:       assertFalse(node0.isExprResult());
24:       assertFalse(node0.isNot());
25:       assertFalse(node0.isScript());
26:       assertFalse(node0.hasOneChild());
27:       assertFalse(node0.isReturn());
28:       assertFalse(node0.isInstanceOf());
29:       assertFalse(node0.isTypeOf());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.hasMoreThanOneChild());
32:       assertFalse(node0.hasChildren());
33:       assertFalse(node0.isOr());
34:       assertFalse(node0.isAssign());
35:       assertFalse(node0.isDec());
36:       assertFalse(node0.isComma());
37:       assertFalse(node0.isGetElem());
38:       assertFalse(node0.isWith());
39:       assertFalse(node0.isBreak());
40:       assertEquals((-1), node0.getLineno());
41:       assertFalse(node0.isBlock());
42:       assertFalse(node0.isAdd());
43:       assertFalse(node0.isNew());
44:       assertFalse(node0.isHook());
45:       assertEquals((-1), node0.getCharno());
46:       assertFalse(node0.isCase());
47:       assertEquals(39, node0.getType());
48:       assertFalse(node0.isVar());
49:       assertFalse(node0.isDo());
50:       assertFalse(node0.isLabel());
51:       assertFalse(node0.isAssignAdd());
52:       assertFalse(node0.isParamList());
53:       assertFalse(node0.isGetterDef());
54:       assertEquals(0, node0.getChildCount());
55:       assertFalse(node0.isStringKey());
56:       assertFalse(node0.isArrayLit());
57:       assertFalse(node0.isSwitch());
58:       assertFalse(node0.isLabelName());
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isRegExp());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isFunction());
63:       assertFalse(node0.isFor());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isNE());
68:       assertFalse(node0.isNull());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isName());
71:       assertFalse(node0.isCall());
72:       assertFalse(node0.isCatch());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.isWhile());
79:       assertFalse(node0.isThrow());
80:       assertFalse(node0.isSetterDef());
81:       assertTrue(node0.isNumber());
82:       assertFalse(node0.isGetProp());
83:       assertEquals((-1), node0.getSourcePosition());
84:       assertFalse(node0.isObjectLit());
85:       assertFalse(node0.isFalse());
86:       assertFalse(node0.isAnd());
87:       assertFalse(node0.isContinue());
88:       assertFalse(node0.isCast());
89:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
90:       assertEquals(29, Node.JSDOC_INFO_PROP);
91:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(36, Node.QUOTED_PROP);
95:       assertEquals(56, Node.CHANGE_TIME);
96:       assertEquals(53, Node.INPUT_ID);
97:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
98:       assertEquals(55, Node.INFERRED_FUNCTION);
99:       assertEquals(51, Node.STATIC_SOURCE_FILE);
100:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(57, Node.LAST_PROP);
103:       assertEquals(2, Node.POST_FLAG);
104:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
105:       assertEquals(47, Node.IS_DISPATCHER);
106:       assertEquals(30, Node.VAR_ARGS_NAME);
107:       assertEquals(40, Node.ORIGINALNAME_PROP);
108:       assertEquals(57, Node.REFLECTED_OBJECT);
109:       assertEquals(8, Node.FLAG_NO_THROWS);
110:       assertEquals(39, Node.EMPTY_BLOCK);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(54, Node.SLASH_V);
113:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
114:       assertEquals(52, Node.LENGTH);
115:       assertEquals(50, Node.FREE_CALL);
116:       assertEquals(4095, Node.COLUMN_MASK);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(48, Node.DIRECTIVES);
119:       assertEquals(1, Node.DECR_FLAG);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(32, Node.INCRDECR_PROP);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
125:       assertNotNull(node0);
126:       
127:       boolean boolean0 = node0.isInc();
128:       assertFalse(node0.isExprResult());
129:       assertFalse(node0.isNot());
130:       assertFalse(node0.isScript());
131:       assertFalse(node0.hasOneChild());
132:       assertFalse(node0.isReturn());
133:       assertFalse(node0.isInstanceOf());
134:       assertFalse(node0.isTypeOf());
135:       assertFalse(node0.isThis());
136:       assertFalse(node0.hasMoreThanOneChild());
137:       assertFalse(node0.hasChildren());
138:       assertFalse(node0.isOr());
139:       assertFalse(node0.isAssign());
140:       assertFalse(node0.isDec());
141:       assertFalse(node0.isComma());
142:       assertFalse(node0.isGetElem());
143:       assertFalse(node0.isWith());
144:       assertFalse(node0.isBreak());
145:       assertEquals((-1), node0.getLineno());
146:       assertFalse(node0.isBlock());
147:       assertFalse(node0.isAdd());
148:       assertFalse(node0.isNew());
149:       assertFalse(node0.isHook());
150:       assertEquals((-1), node0.getCharno());
151:       assertFalse(node0.isCase());
152:       assertEquals(39, node0.getType());
153:       assertFalse(node0.isVar());
154:       assertFalse(node0.isDo());
155:       assertFalse(node0.isLabel());
156:       assertFalse(node0.isAssignAdd());
157:       assertFalse(node0.isParamList());
158:       assertFalse(node0.isGetterDef());
159:       assertEquals(0, node0.getChildCount());
160:       assertFalse(node0.isStringKey());
161:       assertFalse(node0.isArrayLit());
162:       assertFalse(node0.isSwitch());
163:       assertFalse(node0.isLabelName());
164:       assertFalse(node0.isTrue());
165:       assertFalse(node0.isRegExp());
166:       assertFalse(node0.isDebugger());
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isFor());
169:       assertFalse(node0.isEmpty());
170:       assertFalse(node0.isDefaultCase());
171:       assertFalse(node0.isTry());
172:       assertFalse(node0.isNE());
173:       assertFalse(node0.isNull());
174:       assertFalse(node0.isIn());
175:       assertFalse(node0.isName());
176:       assertFalse(node0.isCall());
177:       assertFalse(node0.isCatch());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isDelProp());
180:       assertFalse(node0.isVoid());
181:       assertFalse(node0.isInc());
182:       assertFalse(node0.isString());
183:       assertFalse(node0.isWhile());
184:       assertFalse(node0.isThrow());
185:       assertFalse(node0.isSetterDef());
186:       assertTrue(node0.isNumber());
187:       assertFalse(node0.isGetProp());
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.isObjectLit());
190:       assertFalse(node0.isFalse());
191:       assertFalse(node0.isAnd());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isCast());
194:       assertFalse(boolean0);
195:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
196:       assertEquals(29, Node.JSDOC_INFO_PROP);
197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
198:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
199:       assertEquals(43, Node.IS_CONSTANT_NAME);
200:       assertEquals(36, Node.QUOTED_PROP);
201:       assertEquals(56, Node.CHANGE_TIME);
202:       assertEquals(53, Node.INPUT_ID);
203:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
204:       assertEquals(55, Node.INFERRED_FUNCTION);
205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
206:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
207:       assertEquals(46, Node.IS_NAMESPACE);
208:       assertEquals(57, Node.LAST_PROP);
209:       assertEquals(2, Node.POST_FLAG);
210:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
211:       assertEquals(47, Node.IS_DISPATCHER);
212:       assertEquals(30, Node.VAR_ARGS_NAME);
213:       assertEquals(40, Node.ORIGINALNAME_PROP);
214:       assertEquals(57, Node.REFLECTED_OBJECT);
215:       assertEquals(8, Node.FLAG_NO_THROWS);
216:       assertEquals(39, Node.EMPTY_BLOCK);
217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
218:       assertEquals(54, Node.SLASH_V);
219:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
220:       assertEquals(52, Node.LENGTH);
221:       assertEquals(50, Node.FREE_CALL);
222:       assertEquals(4095, Node.COLUMN_MASK);
223:       assertEquals(12, Node.COLUMN_BITS);
224:       assertEquals(48, Node.DIRECTIVES);
225:       assertEquals(1, Node.DECR_FLAG);
226:       assertEquals(49, Node.DIRECT_EVAL);
227:       assertEquals(32, Node.INCRDECR_PROP);
228:       assertEquals(37, Node.OPT_ARG_NAME);
229:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       
232:       int int0 = Node.VAR_ARGS_NAME;
233:       assertEquals(30, int0);
234:       
235:       Node node1 = new Node((-252), 42, 0);
236:       assertFalse(node1.isName());
237:       assertFalse(node1.isStringKey());
238:       assertFalse(node1.isNull());
239:       assertFalse(node1.isVar());
240:       assertFalse(node1.isParamList());
241:       assertEquals(0, node1.getChildCount());
242:       assertFalse(node1.isCatch());
243:       assertFalse(node1.isCall());
244:       assertFalse(node1.isWhile());
245:       assertFalse(node1.hasMoreThanOneChild());
246:       assertFalse(node1.isRegExp());
247:       assertFalse(node1.isDebugger());
248:       assertFalse(node1.isReturn());
249:       assertFalse(node1.isBlock());
250:       assertFalse(node1.isTry());
251:       assertFalse(node1.isLabelName());
252:       assertFalse(node1.isAssign());
253:       assertFalse(node1.isEmpty());
254:       assertFalse(node1.isDelProp());
255:       assertFalse(node1.isGetterDef());
256:       assertFalse(node1.isNumber());
257:       assertFalse(node1.isTypeOf());
258:       assertFalse(node1.isDec());
259:       assertEquals(42, node1.getLineno());
260:       assertFalse(node1.hasChildren());
261:       assertFalse(node1.isLabel());
262:       assertFalse(node1.isVoid());
263:       assertFalse(node1.isArrayLit());
264:       assertFalse(node1.isExprResult());
265:       assertFalse(node1.isGetElem());
266:       assertFalse(node1.isDo());
267:       assertFalse(node1.isDefaultCase());
268:       assertFalse(node1.isTrue());
269:       assertFalse(node1.isOr());
270:       assertFalse(node1.isAdd());
271:       assertFalse(node1.isAssignAdd());
272:       assertFalse(node1.isNew());
273:       assertFalse(node1.isFalse());
274:       assertFalse(node1.isComma());
275:       assertFalse(node1.isThrow());
276:       assertFalse(node1.isHook());
277:       assertFalse(node1.isThis());
278:       assertFalse(node1.isSwitch());
279:       assertFalse(node1.isInstanceOf());
280:       assertFalse(node1.isBreak());
281:       assertFalse(node1.isCase());
282:       assertFalse(node1.isNot());
283:       assertFalse(node1.isString());
284:       assertFalse(node1.isObjectLit());
285:       assertFalse(node1.isAnd());
286:       assertFalse(node1.isWith());
287:       assertEquals((-252), node1.getType());
288:       assertFalse(node1.isScript());
289:       assertFalse(node1.hasOneChild());
290:       assertFalse(node1.isGetProp());
291:       assertFalse(node1.isFor());
292:       assertFalse(node1.isIf());
293:       assertFalse(node1.isNE());
294:       assertFalse(node1.isFunction());
295:       assertFalse(node1.isCast());
296:       assertEquals(172032, node1.getSourcePosition());
297:       assertFalse(node1.isContinue());
298:       assertEquals(0, node1.getCharno());
299:       assertFalse(node1.isIn());
300:       assertFalse(node1.isSetterDef());
301:       assertFalse(node1.isInc());
302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
303:       assertEquals(8, Node.FLAG_NO_THROWS);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(48, Node.DIRECTIVES);
306:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
307:       assertEquals(40, Node.ORIGINALNAME_PROP);
308:       assertEquals(4095, Node.COLUMN_MASK);
309:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
310:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
311:       assertEquals(57, Node.LAST_PROP);
312:       assertEquals(49, Node.DIRECT_EVAL);
313:       assertEquals(15, Node.NO_SIDE_EFFECTS);
314:       assertEquals(53, Node.INPUT_ID);
315:       assertEquals(55, Node.INFERRED_FUNCTION);
316:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
317:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
318:       assertEquals(52, Node.LENGTH);
319:       assertEquals(36, Node.QUOTED_PROP);
320:       assertEquals(57, Node.REFLECTED_OBJECT);
321:       assertEquals(2, Node.POST_FLAG);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(29, Node.JSDOC_INFO_PROP);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
326:       assertEquals(37, Node.OPT_ARG_NAME);
327:       assertEquals(12, Node.COLUMN_BITS);
328:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
329:       assertEquals(30, Node.VAR_ARGS_NAME);
330:       assertEquals(47, Node.IS_DISPATCHER);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(43, Node.IS_CONSTANT_NAME);
333:       assertEquals(1, Node.DECR_FLAG);
334:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
335:       assertEquals(46, Node.IS_NAMESPACE);
336:       assertEquals(50, Node.FREE_CALL);
337:       assertEquals(51, Node.STATIC_SOURCE_FILE);
338:       assertNotNull(node1);
339:       assertFalse(node1.equals((Object)node0));
340:       
341:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
342:       assertEquals(0, linkedHashSet0.size());
343:       assertTrue(linkedHashSet0.isEmpty());
344:       assertNotNull(linkedHashSet0);
345:       
346:       node1.setDirectives(linkedHashSet0);
347:       assertFalse(node1.isName());
348:       assertFalse(node1.isStringKey());
349:       assertFalse(node1.isNull());
350:       assertFalse(node1.isVar());
351:       assertFalse(node1.isParamList());
352:       assertEquals(0, node1.getChildCount());
353:       assertFalse(node1.isCatch());
354:       assertFalse(node1.isCall());
355:       assertFalse(node1.isWhile());
356:       assertFalse(node1.hasMoreThanOneChild());
357:       assertFalse(node1.isRegExp());
358:       assertFalse(node1.isDebugger());
359:       assertFalse(node1.isReturn());
360:       assertFalse(node1.isBlock());
361:       assertFalse(node1.isTry());
362:       assertFalse(node1.isLabelName());
363:       assertFalse(node1.isAssign());
364:       assertFalse(node1.isEmpty());
365:       assertFalse(node1.isDelProp());
366:       assertFalse(node1.isGetterDef());
367:       assertFalse(node1.isNumber());
368:       assertFalse(node1.isTypeOf());
369:       assertFalse(node1.isDec());
370:       assertEquals(42, node1.getLineno());
371:       assertFalse(node1.hasChildren());
372:       assertFalse(node1.isLabel());
373:       assertFalse(node1.isVoid());
374:       assertFalse(node1.isArrayLit());
375:       assertFalse(node1.isExprResult());
376:       assertFalse(node1.isGetElem());
377:       assertFalse(node1.isDo());
378:       assertFalse(node1.isDefaultCase());
379:       assertFalse(node1.isTrue());
380:       assertFalse(node1.isOr());
381:       assertFalse(node1.isAdd());
382:       assertFalse(node1.isAssignAdd());
383:       assertFalse(node1.isNew());
384:       assertFalse(node1.isFalse());
385:       assertFalse(node1.isComma());
386:       assertFalse(node1.isThrow());
387:       assertFalse(node1.isHook());
388:       assertFalse(node1.isThis());
389:       assertFalse(node1.isSwitch());
390:       assertFalse(node1.isInstanceOf());
391:       assertFalse(node1.isBreak());
392:       assertFalse(node1.isCase());
393:       assertFalse(node1.isNot());
394:       assertFalse(node1.isString());
395:       assertFalse(node1.isObjectLit());
396:       assertFalse(node1.isAnd());
397:       assertFalse(node1.isWith());
398:       assertEquals((-252), node1.getType());
399:       assertFalse(node1.isScript());
400:       assertFalse(node1.hasOneChild());
401:       assertFalse(node1.isGetProp());
402:       assertFalse(node1.isFor());
403:       assertFalse(node1.isIf());
404:       assertFalse(node1.isNE());
405:       assertFalse(node1.isFunction());
406:       assertFalse(node1.isCast());
407:       assertEquals(172032, node1.getSourcePosition());
408:       assertFalse(node1.isContinue());
409:       assertEquals(0, node1.getCharno());
410:       assertFalse(node1.isIn());
411:       assertFalse(node1.isSetterDef());
412:       assertFalse(node1.isInc());
413:       assertEquals(0, linkedHashSet0.size());
414:       assertTrue(linkedHashSet0.isEmpty());
415:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
416:       assertEquals(8, Node.FLAG_NO_THROWS);
417:       assertEquals(39, Node.EMPTY_BLOCK);
418:       assertEquals(48, Node.DIRECTIVES);
419:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
420:       assertEquals(40, Node.ORIGINALNAME_PROP);
421:       assertEquals(4095, Node.COLUMN_MASK);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
424:       assertEquals(57, Node.LAST_PROP);
425:       assertEquals(49, Node.DIRECT_EVAL);
426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
427:       assertEquals(53, Node.INPUT_ID);
428:       assertEquals(55, Node.INFERRED_FUNCTION);
429:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
430:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
431:       assertEquals(52, Node.LENGTH);
432:       assertEquals(36, Node.QUOTED_PROP);
433:       assertEquals(57, Node.REFLECTED_OBJECT);
434:       assertEquals(2, Node.POST_FLAG);
435:       assertEquals(56, Node.CHANGE_TIME);
436:       assertEquals(29, Node.JSDOC_INFO_PROP);
437:       assertEquals(32, Node.INCRDECR_PROP);
438:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
439:       assertEquals(37, Node.OPT_ARG_NAME);
440:       assertEquals(12, Node.COLUMN_BITS);
441:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
442:       assertEquals(30, Node.VAR_ARGS_NAME);
443:       assertEquals(47, Node.IS_DISPATCHER);
444:       assertEquals(54, Node.SLASH_V);
445:       assertEquals(43, Node.IS_CONSTANT_NAME);
446:       assertEquals(1, Node.DECR_FLAG);
447:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
448:       assertEquals(46, Node.IS_NAMESPACE);
449:       assertEquals(50, Node.FREE_CALL);
450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
451:       assertFalse(node1.equals((Object)node0));
452:       
453:       boolean boolean1 = node1.isRegExp();
454:       assertFalse(node1.isName());
455:       assertFalse(node1.isStringKey());
456:       assertFalse(node1.isNull());
457:       assertFalse(node1.isVar());
458:       assertFalse(node1.isParamList());
459:       assertEquals(0, node1.getChildCount());
460:       assertFalse(node1.isCatch());
461:       assertFalse(node1.isCall());
462:       assertFalse(node1.isWhile());
463:       assertFalse(node1.hasMoreThanOneChild());
464:       assertFalse(node1.isRegExp());
465:       assertFalse(node1.isDebugger());
466:       assertFalse(node1.isReturn());
467:       assertFalse(node1.isBlock());
468:       assertFalse(node1.isTry());
469:       assertFalse(node1.isLabelName());
470:       assertFalse(node1.isAssign());
471:       assertFalse(node1.isEmpty());
472:       assertFalse(node1.isDelProp());
473:       assertFalse(node1.isGetterDef());
474:       assertFalse(node1.isNumber());
475:       assertFalse(node1.isTypeOf());
476:       assertFalse(node1.isDec());
477:       assertEquals(42, node1.getLineno());
478:       assertFalse(node1.hasChildren());
479:       assertFalse(node1.isLabel());
480:       assertFalse(node1.isVoid());
481:       assertFalse(node1.isArrayLit());
482:       assertFalse(node1.isExprResult());
483:       assertFalse(node1.isGetElem());
484:       assertFalse(node1.isDo());
485:       assertFalse(node1.isDefaultCase());
486:       assertFalse(node1.isTrue());
487:       assertFalse(node1.isOr());
488:       assertFalse(node1.isAdd());
489:       assertFalse(node1.isAssignAdd());
490:       assertFalse(node1.isNew());
491:       assertFalse(node1.isFalse());
492:       assertFalse(node1.isComma());
493:       assertFalse(node1.isThrow());
494:       assertFalse(node1.isHook());
495:       assertFalse(node1.isThis());
496:       assertFalse(node1.isSwitch());
497:       assertFalse(node1.isInstanceOf());
498:       assertFalse(node1.isBreak());
499:       assertFalse(node1.isCase());
500:       assertFalse(node1.isNot());
501:       assertFalse(node1.isString());
502:       assertFalse(node1.isObjectLit());
503:       assertFalse(node1.isAnd());
504:       assertFalse(node1.isWith());
505:       assertEquals((-252), node1.getType());
506:       assertFalse(node1.isScript());
507:       assertFalse(node1.hasOneChild());
508:       assertFalse(node1.isGetProp());
509:       assertFalse(node1.isFor());
510:       assertFalse(node1.isIf());
511:       assertFalse(node1.isNE());
512:       assertFalse(node1.isFunction());
513:       assertFalse(node1.isCast());
514:       assertEquals(172032, node1.getSourcePosition());
515:       assertFalse(node1.isContinue());
516:       assertEquals(0, node1.getCharno());
517:       assertFalse(node1.isIn());
518:       assertFalse(node1.isSetterDef());
519:       assertFalse(node1.isInc());
520:       assertFalse(boolean1);
521:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
522:       assertEquals(8, Node.FLAG_NO_THROWS);
523:       assertEquals(39, Node.EMPTY_BLOCK);
524:       assertEquals(48, Node.DIRECTIVES);
525:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
526:       assertEquals(40, Node.ORIGINALNAME_PROP);
527:       assertEquals(4095, Node.COLUMN_MASK);
528:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
529:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
530:       assertEquals(57, Node.LAST_PROP);
531:       assertEquals(49, Node.DIRECT_EVAL);
532:       assertEquals(15, Node.NO_SIDE_EFFECTS);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(55, Node.INFERRED_FUNCTION);
535:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
536:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
537:       assertEquals(52, Node.LENGTH);
538:       assertEquals(36, Node.QUOTED_PROP);
539:       assertEquals(57, Node.REFLECTED_OBJECT);
540:       assertEquals(2, Node.POST_FLAG);
541:       assertEquals(56, Node.CHANGE_TIME);
542:       assertEquals(29, Node.JSDOC_INFO_PROP);
543:       assertEquals(32, Node.INCRDECR_PROP);
544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
545:       assertEquals(37, Node.OPT_ARG_NAME);
546:       assertEquals(12, Node.COLUMN_BITS);
547:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
548:       assertEquals(30, Node.VAR_ARGS_NAME);
549:       assertEquals(47, Node.IS_DISPATCHER);
550:       assertEquals(54, Node.SLASH_V);
551:       assertEquals(43, Node.IS_CONSTANT_NAME);
552:       assertEquals(1, Node.DECR_FLAG);
553:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
554:       assertEquals(46, Node.IS_NAMESPACE);
555:       assertEquals(50, Node.FREE_CALL);
556:       assertEquals(51, Node.STATIC_SOURCE_FILE);
557:       assertFalse(node1.equals((Object)node0));
558:       assertTrue(boolean1 == boolean0);
559:       
560:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
561:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
562:       assertEquals(53, node_SideEffectFlags0.valueOf());
563:       assertNotNull(node_SideEffectFlags0);
564:       
565:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
566:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
567:       assertEquals(53, node_SideEffectFlags0.valueOf());
568:       assertEquals(53, node_SideEffectFlags1.valueOf());
569:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
570:       assertNotNull(node_SideEffectFlags1);
571:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
572:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
573:       
574:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
575:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
576:       assertEquals(48, node_SideEffectFlags0.valueOf());
577:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
578:       assertEquals(48, node_SideEffectFlags1.valueOf());
579:       assertEquals(48, node_SideEffectFlags2.valueOf());
580:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
581:       assertNotNull(node_SideEffectFlags2);
582:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
583:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
584:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
585:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
586:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
587:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
588:       
589:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
590:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
591:       assertEquals(48, node_SideEffectFlags0.valueOf());
592:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
593:       assertEquals(48, node_SideEffectFlags1.valueOf());
594:       assertEquals(48, node_SideEffectFlags2.valueOf());
595:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
596:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
597:       assertEquals(48, node_SideEffectFlags3.valueOf());
598:       assertNotNull(node_SideEffectFlags3);
599:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
600:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
601:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
602:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
603:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
604:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
605:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
606:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
607:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
608:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
609:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
610:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
611:       
612:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
613:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
614:       assertEquals(32, node_SideEffectFlags0.valueOf());
615:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
616:       assertEquals(32, node_SideEffectFlags1.valueOf());
617:       assertEquals(32, node_SideEffectFlags2.valueOf());
618:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
619:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
620:       assertEquals(32, node_SideEffectFlags3.valueOf());
621:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
622:       assertEquals(32, node_SideEffectFlags4.valueOf());
623:       assertNotNull(node_SideEffectFlags4);
624:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
625:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
626:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
627:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
628:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
629:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
630:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
631:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
632:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
633:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
634:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
635:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
636:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
637:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
638:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
639:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
640:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
641:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
642:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
643:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
644:       
645:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
646:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
647:       assertEquals(32, node_SideEffectFlags0.valueOf());
648:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
649:       assertEquals(32, node_SideEffectFlags1.valueOf());
650:       assertEquals(32, node_SideEffectFlags2.valueOf());
651:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
652:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
653:       assertEquals(32, node_SideEffectFlags3.valueOf());
654:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
655:       assertEquals(32, node_SideEffectFlags4.valueOf());
656:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
657:       assertEquals(32, node_SideEffectFlags5.valueOf());
658:       assertNotNull(node_SideEffectFlags5);
659:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
660:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
661:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
662:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
663:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
664:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
665:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
666:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
667:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
668:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
669:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
670:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
671:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
672:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
673:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
674:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
675:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
676:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
677:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
678:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
679:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
680:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
681:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
682:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
683:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
684:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
685:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
686:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
687:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
688:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
689:       
690:       boolean boolean2 = node_SideEffectFlags5.areAllFlagsSet();
691:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
692:       assertEquals(32, node_SideEffectFlags0.valueOf());
693:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
694:       assertEquals(32, node_SideEffectFlags1.valueOf());
695:       assertEquals(32, node_SideEffectFlags2.valueOf());
696:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
697:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
698:       assertEquals(32, node_SideEffectFlags3.valueOf());
699:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
700:       assertEquals(32, node_SideEffectFlags4.valueOf());
701:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
702:       assertEquals(32, node_SideEffectFlags5.valueOf());
703:       assertFalse(boolean2);
704:       assertTrue(boolean2 == boolean0);
705:       assertTrue(boolean2 == boolean1);
706:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
707:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
708:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
709:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
710:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
711:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
712:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
713:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
714:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
715:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
716:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
717:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
718:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
719:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
720:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
721:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
722:       assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
723:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
724:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
725:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
726:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
727:       assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
728:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
729:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
730:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
731:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
732:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
733:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
734:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
735:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
736:       
737:       boolean boolean3 = node1.isHook();
738:       assertFalse(node1.isName());
739:       assertFalse(node1.isStringKey());
740:       assertFalse(node1.isNull());
741:       assertFalse(node1.isVar());
742:       assertFalse(node1.isParamList());
743:       assertEquals(0, node1.getChildCount());
744:       assertFalse(node1.isCatch());
745:       assertFalse(node1.isCall());
746:       assertFalse(node1.isWhile());
747:       assertFalse(node1.hasMoreThanOneChild());
748:       assertFalse(node1.isRegExp());
749:       assertFalse(node1.isDebugger());
750:       assertFalse(node1.isReturn());
751:       assertFalse(node1.isBlock());
752:       assertFalse(node1.isTry());
753:       assertFalse(node1.isLabelName());
754:       assertFalse(node1.isAssign());
755:       assertFalse(node1.isEmpty());
756:       assertFalse(node1.isDelProp());
757:       assertFalse(node1.isGetterDef());
758:       assertFalse(node1.isNumber());
759:       assertFalse(node1.isTypeOf());
760:       assertFalse(node1.isDec());
761:       assertEquals(42, node1.getLineno());
762:       assertFalse(node1.hasChildren());
763:       assertFalse(node1.isLabel());
764:       assertFalse(node1.isVoid());
765:       assertFalse(node1.isArrayLit());
766:       assertFalse(node1.isExprResult());
767:       assertFalse(node1.isGetElem());
768:       assertFalse(node1.isDo());
769:       assertFalse(node1.isDefaultCase());
770:       assertFalse(node1.isTrue());
771:       assertFalse(node1.isOr());
772:       assertFalse(node1.isAdd());
773:       assertFalse(node1.isAssignAdd());
774:       assertFalse(node1.isNew());
775:       assertFalse(node1.isFalse());
776:       assertFalse(node1.isComma());
777:       assertFalse(node1.isThrow());
778:       assertFalse(node1.isHook());
779:       assertFalse(node1.isThis());
780:       assertFalse(node1.isSwitch());
781:       assertFalse(node1.isInstanceOf());
782:       assertFalse(node1.isBreak());
783:       assertFalse(node1.isCase());
784:       assertFalse(node1.isNot());
785:       assertFalse(node1.isString());
786:       assertFalse(node1.isObjectLit());
787:       assertFalse(node1.isAnd());
788:       assertFalse(node1.isWith());
789:       assertEquals((-252), node1.getType());
790:       assertFalse(node1.isScript());
791:       assertFalse(node1.hasOneChild());
792:       assertFalse(node1.isGetProp());
793:       assertFalse(node1.isFor());
794:       assertFalse(node1.isIf());
795:       assertFalse(node1.isNE());
796:       assertFalse(node1.isFunction());
797:       assertFalse(node1.isCast());
798:       assertEquals(172032, node1.getSourcePosition());
799:       assertFalse(node1.isContinue());
800:       assertEquals(0, node1.getCharno());
801:       assertFalse(node1.isIn());
802:       assertFalse(node1.isSetterDef());
803:       assertFalse(node1.isInc());
804:       assertFalse(boolean3);
805:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
806:       assertEquals(8, Node.FLAG_NO_THROWS);
807:       assertEquals(39, Node.EMPTY_BLOCK);
808:       assertEquals(48, Node.DIRECTIVES);
809:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
810:       assertEquals(40, Node.ORIGINALNAME_PROP);
811:       assertEquals(4095, Node.COLUMN_MASK);
812:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
813:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
814:       assertEquals(57, Node.LAST_PROP);
815:       assertEquals(49, Node.DIRECT_EVAL);
816:       assertEquals(15, Node.NO_SIDE_EFFECTS);
817:       assertEquals(53, Node.INPUT_ID);
818:       assertEquals(55, Node.INFERRED_FUNCTION);
819:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
820:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
821:       assertEquals(52, Node.LENGTH);
822:       assertEquals(36, Node.QUOTED_PROP);
823:       assertEquals(57, Node.REFLECTED_OBJECT);
824:       assertEquals(2, Node.POST_FLAG);
825:       assertEquals(56, Node.CHANGE_TIME);
826:       assertEquals(29, Node.JSDOC_INFO_PROP);
827:       assertEquals(32, Node.INCRDECR_PROP);
828:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
829:       assertEquals(37, Node.OPT_ARG_NAME);
830:       assertEquals(12, Node.COLUMN_BITS);
831:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
832:       assertEquals(30, Node.VAR_ARGS_NAME);
833:       assertEquals(47, Node.IS_DISPATCHER);
834:       assertEquals(54, Node.SLASH_V);
835:       assertEquals(43, Node.IS_CONSTANT_NAME);
836:       assertEquals(1, Node.DECR_FLAG);
837:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
838:       assertEquals(46, Node.IS_NAMESPACE);
839:       assertEquals(50, Node.FREE_CALL);
840:       assertEquals(51, Node.STATIC_SOURCE_FILE);
841:       assertFalse(node1.equals((Object)node0));
842:       assertTrue(boolean3 == boolean0);
843:       assertTrue(boolean3 == boolean2);
844:       assertTrue(boolean3 == boolean1);
845:       
846:       Iterable<Node> iterable0 = node0.children();
847:       assertFalse(node0.isExprResult());
848:       assertFalse(node0.isNot());
849:       assertFalse(node0.isScript());
850:       assertFalse(node0.hasOneChild());
851:       assertFalse(node0.isReturn());
852:       assertFalse(node0.isInstanceOf());
853:       assertFalse(node0.isTypeOf());
854:       assertFalse(node0.isThis());
855:       assertFalse(node0.hasMoreThanOneChild());
856:       assertFalse(node0.hasChildren());
857:       assertFalse(node0.isOr());
858:       assertFalse(node0.isAssign());
859:       assertFalse(node0.isDec());
860:       assertFalse(node0.isComma());
861:       assertFalse(node0.isGetElem());
862:       assertFalse(node0.isWith());
863:       assertFalse(node0.isBreak());
864:       assertEquals((-1), node0.getLineno());
865:       assertFalse(node0.isBlock());
866:       assertFalse(node0.isAdd());
867:       assertFalse(node0.isNew());
868:       assertFalse(node0.isHook());
869:       assertEquals((-1), node0.getCharno());
870:       assertFalse(node0.isCase());
871:       assertEquals(39, node0.getType());
872:       assertFalse(node0.isVar());
873:       assertFalse(node0.isDo());
874:       assertFalse(node0.isLabel());
875:       assertFalse(node0.isAssignAdd());
876:       assertFalse(node0.isParamList());
877:       assertFalse(node0.isGetterDef());
878:       assertEquals(0, node0.getChildCount());
879:       assertFalse(node0.isStringKey());
880:       assertFalse(node0.isArrayLit());
881:       assertFalse(node0.isSwitch());
882:       assertFalse(node0.isLabelName());
883:       assertFalse(node0.isTrue());
884:       assertFalse(node0.isRegExp());
885:       assertFalse(node0.isDebugger());
886:       assertFalse(node0.isFunction());
887:       assertFalse(node0.isFor());
888:       assertFalse(node0.isEmpty());
889:       assertFalse(node0.isDefaultCase());
890:       assertFalse(node0.isTry());
891:       assertFalse(node0.isNE());
892:       assertFalse(node0.isNull());
893:       assertFalse(node0.isIn());
894:       assertFalse(node0.isName());
895:       assertFalse(node0.isCall());
896:       assertFalse(node0.isCatch());
897:       assertFalse(node0.isIf());
898:       assertFalse(node0.isDelProp());
899:       assertFalse(node0.isVoid());
900:       assertFalse(node0.isInc());
901:       assertFalse(node0.isString());
902:       assertFalse(node0.isWhile());
903:       assertFalse(node0.isThrow());
904:       assertFalse(node0.isSetterDef());
905:       assertTrue(node0.isNumber());
906:       assertFalse(node0.isGetProp());
907:       assertEquals((-1), node0.getSourcePosition());
908:       assertFalse(node0.isObjectLit());
909:       assertFalse(node0.isFalse());
910:       assertFalse(node0.isAnd());
911:       assertFalse(node0.isContinue());
912:       assertFalse(node0.isCast());
913:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
914:       assertEquals(29, Node.JSDOC_INFO_PROP);
915:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
916:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
917:       assertEquals(43, Node.IS_CONSTANT_NAME);
918:       assertEquals(36, Node.QUOTED_PROP);
919:       assertEquals(56, Node.CHANGE_TIME);
920:       assertEquals(53, Node.INPUT_ID);
921:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
922:       assertEquals(55, Node.INFERRED_FUNCTION);
923:       assertEquals(51, Node.STATIC_SOURCE_FILE);
924:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
925:       assertEquals(46, Node.IS_NAMESPACE);
926:       assertEquals(57, Node.LAST_PROP);
927:       assertEquals(2, Node.POST_FLAG);
928:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
929:       assertEquals(47, Node.IS_DISPATCHER);
930:       assertEquals(30, Node.VAR_ARGS_NAME);
931:       assertEquals(40, Node.ORIGINALNAME_PROP);
932:       assertEquals(57, Node.REFLECTED_OBJECT);
933:       assertEquals(8, Node.FLAG_NO_THROWS);
934:       assertEquals(39, Node.EMPTY_BLOCK);
935:       assertEquals(15, Node.NO_SIDE_EFFECTS);
936:       assertEquals(54, Node.SLASH_V);
937:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
938:       assertEquals(52, Node.LENGTH);
939:       assertEquals(50, Node.FREE_CALL);
940:       assertEquals(4095, Node.COLUMN_MASK);
941:       assertEquals(12, Node.COLUMN_BITS);
942:       assertEquals(48, Node.DIRECTIVES);
943:       assertEquals(1, Node.DECR_FLAG);
944:       assertEquals(49, Node.DIRECT_EVAL);
945:       assertEquals(32, Node.INCRDECR_PROP);
946:       assertEquals(37, Node.OPT_ARG_NAME);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
949:       assertNotNull(iterable0);
950:       assertFalse(node0.equals((Object)node1));
951:       assertFalse(iterable0.contains(node1));
952:       
953:       node0.putProp(29, node_SideEffectFlags1);
954:       assertFalse(node0.isExprResult());
955:       assertFalse(node0.isNot());
956:       assertFalse(node0.isScript());
957:       assertFalse(node0.hasOneChild());
958:       assertFalse(node0.isReturn());
959:       assertFalse(node0.isInstanceOf());
960:       assertFalse(node0.isTypeOf());
961:       assertFalse(node0.isThis());
962:       assertFalse(node0.hasMoreThanOneChild());
963:       assertFalse(node0.hasChildren());
964:       assertFalse(node0.isOr());
965:       assertFalse(node0.isAssign());
966:       assertFalse(node0.isDec());
967:       assertFalse(node0.isComma());
968:       assertFalse(node0.isGetElem());
969:       assertFalse(node0.isWith());
970:       assertFalse(node0.isBreak());
971:       assertEquals((-1), node0.getLineno());
972:       assertFalse(node0.isBlock());
973:       assertFalse(node0.isAdd());
974:       assertFalse(node0.isNew());
975:       assertFalse(node0.isHook());
976:       assertEquals((-1), node0.getCharno());
977:       assertFalse(node0.isCase());
978:       assertEquals(39, node0.getType());
979:       assertFalse(node0.isVar());
980:       assertFalse(node0.isDo());
981:       assertFalse(node0.isLabel());
982:       assertFalse(node0.isAssignAdd());
983:       assertFalse(node0.isParamList());
984:       assertFalse(node0.isGetterDef());
985:       assertEquals(0, node0.getChildCount());
986:       assertFalse(node0.isStringKey());
987:       assertFalse(node0.isArrayLit());
988:       assertFalse(node0.isSwitch());
989:       assertFalse(node0.isLabelName());
990:       assertFalse(node0.isTrue());
991:       assertFalse(node0.isRegExp());
992:       assertFalse(node0.isDebugger());
993:       assertFalse(node0.isFunction());
994:       assertFalse(node0.isFor());
995:       assertFalse(node0.isEmpty());
996:       assertFalse(node0.isDefaultCase());
997:       assertFalse(node0.isTry());
998:       assertFalse(node0.isNE());
999:       assertFalse(node0.isNull());
1000:       assertFalse(node0.isIn());
1001:       assertFalse(node0.isName());
1002:       assertFalse(node0.isCall());
1003:       assertFalse(node0.isCatch());
1004:       assertFalse(node0.isIf());
1005:       assertFalse(node0.isDelProp());
1006:       assertFalse(node0.isVoid());
1007:       assertFalse(node0.isInc());
1008:       assertFalse(node0.isString());
1009:       assertFalse(node0.isWhile());
1010:       assertFalse(node0.isThrow());
1011:       assertFalse(node0.isSetterDef());
1012:       assertTrue(node0.isNumber());
1013:       assertFalse(node0.isGetProp());
1014:       assertEquals((-1), node0.getSourcePosition());
1015:       assertFalse(node0.isObjectLit());
1016:       assertFalse(node0.isFalse());
1017:       assertFalse(node0.isAnd());
1018:       assertFalse(node0.isContinue());
1019:       assertFalse(node0.isCast());
1020:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1021:       assertEquals(32, node_SideEffectFlags0.valueOf());
1022:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1023:       assertEquals(32, node_SideEffectFlags1.valueOf());
1024:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1025:       assertEquals(29, Node.JSDOC_INFO_PROP);
1026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1027:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1028:       assertEquals(43, Node.IS_CONSTANT_NAME);
1029:       assertEquals(36, Node.QUOTED_PROP);
1030:       assertEquals(56, Node.CHANGE_TIME);
1031:       assertEquals(53, Node.INPUT_ID);
1032:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1033:       assertEquals(55, Node.INFERRED_FUNCTION);
1034:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1035:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1036:       assertEquals(46, Node.IS_NAMESPACE);
1037:       assertEquals(57, Node.LAST_PROP);
1038:       assertEquals(2, Node.POST_FLAG);
1039:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1040:       assertEquals(47, Node.IS_DISPATCHER);
1041:       assertEquals(30, Node.VAR_ARGS_NAME);
1042:       assertEquals(40, Node.ORIGINALNAME_PROP);
1043:       assertEquals(57, Node.REFLECTED_OBJECT);
1044:       assertEquals(8, Node.FLAG_NO_THROWS);
1045:       assertEquals(39, Node.EMPTY_BLOCK);
1046:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1047:       assertEquals(54, Node.SLASH_V);
1048:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1049:       assertEquals(52, Node.LENGTH);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(4095, Node.COLUMN_MASK);
1052:       assertEquals(12, Node.COLUMN_BITS);
1053:       assertEquals(48, Node.DIRECTIVES);
1054:       assertEquals(1, Node.DECR_FLAG);
1055:       assertEquals(49, Node.DIRECT_EVAL);
1056:       assertEquals(32, Node.INCRDECR_PROP);
1057:       assertEquals(37, Node.OPT_ARG_NAME);
1058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1060:       assertFalse(node0.equals((Object)node1));
1061:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1062:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1063:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1064:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1065:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1066:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1067:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1068:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1069:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1070:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1071:       
1072:       // Undeclared exception!
1073:       try { 
1074:         node0.clonePropsFrom(node1);
1075:         fail("Expecting exception: IllegalStateException");
1076:       
1077:       } catch(IllegalStateException e) {
1078:          //
1079:          // Node has existing properties.
1080:          //
1081:          verifyException("com.google.common.base.Preconditions", e);
1082:       }
1083:   }
1084: }
RegularFileObject[/tmp/EvoSuite_105_1628255814319/com/google/javascript/rhino/Node_105_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_105_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_105_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.AbstractIndexedListIterator",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_105_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.NamedType",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.javascript.rhino.SimpleErrorReporter",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
345:       "com.google.common.collect.Sets",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.AbstractIndexedListIterator",
356:       "com.google.common.collect.Iterators$11",
357:       "com.google.javascript.rhino.jstype.TemplatizedType",
358:       "com.google.common.collect.ImmutableSet",
359:       "com.google.common.collect.EmptyImmutableSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.JSTypeExpression",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
369:     );
370:   }
371: }

[MASTER] 13:16:54.583 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 1004, (-1206));
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node0);

boolean boolean0 = node0.isInc();
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

int int0 = Node.VAR_ARGS_NAME;
assertEquals(30, int0);

Node node1 = new Node((-252), 42, 0);
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals(42, node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertEquals((-252), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertEquals(172032, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertNotNull(linkedHashSet0);

node1.setDirectives(linkedHashSet0);
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals(42, node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertEquals((-252), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertEquals(172032, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));

boolean boolean1 = node1.isRegExp();
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals(42, node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertEquals((-252), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertEquals(172032, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(boolean1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(53);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(53, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(53, node_SideEffectFlags0.valueOf());
assertEquals(53, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertEquals(48, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags1.valueOf());
assertEquals(48, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(48, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setReturnsTainted();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags1.valueOf());
assertEquals(32, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags4.setMutatesArguments();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags1.valueOf());
assertEquals(32, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);

boolean boolean2 = node_SideEffectFlags5.areAllFlagsSet();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags1.valueOf());
assertEquals(32, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags4.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags5.valueOf());
assertFalse(boolean2);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags5);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);

boolean boolean3 = node1.isHook();
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isReturn());
assertFalse(node1.isBlock());
assertFalse(node1.isTry());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals(42, node1.getLineno());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isVoid());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isFalse());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isSwitch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertEquals((-252), node1.getType());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertEquals(172032, node1.getSourcePosition());
assertFalse(node1.isContinue());
assertEquals(0, node1.getCharno());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(boolean3);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);

Iterable<Node> iterable0 = node0.children();
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));

node0.putProp(29, node_SideEffectFlags1);
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThis());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isOr());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isGetElem());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertFalse(node0.isNull());
assertFalse(node0.isIn());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isSetterDef());
assertTrue(node0.isNumber());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isFalse());
assertFalse(node0.isAnd());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(32, node_SideEffectFlags1.valueOf());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

node0.clonePropsFrom(node1);

[MASTER] 13:16:57.311 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_117_1628255816949/com/google/javascript/rhino/Node_117_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_117_1628255816949/com/google/javascript/rhino/Node_117_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:57.315 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:57.315 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:57.316 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable1 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1681
[MASTER] 13:16:57.318 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_117_1628255816949/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:56 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.ErrorReporter;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.jstype.BooleanLiteralSet;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import com.google.javascript.rhino.jstype.TemplateType;
16: import java.util.LinkedHashSet;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.junit.runner.RunWith;
20: 
21: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
22: public class Node_117_tmp__ESTest extends Node_117_tmp__ESTest_scaffolding {
23: 
24:   @Test(timeout = 4000)
25:   public void test0()  throws Throwable  {
26:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
27:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
28:       assertEquals(0, node_SideEffectFlags0.valueOf());
29:       assertNotNull(node_SideEffectFlags0);
30:       
31:       node_SideEffectFlags0.clearSideEffectFlags();
32:       assertEquals(15, node_SideEffectFlags0.valueOf());
33:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
34:       
35:       Node node0 = Node.newString(365, "4");
36:       assertFalse(node0.isNew());
37:       assertFalse(node0.isCall());
38:       assertFalse(node0.isAdd());
39:       assertFalse(node0.isName());
40:       assertFalse(node0.isParamList());
41:       assertFalse(node0.isStringKey());
42:       assertFalse(node0.isNull());
43:       assertFalse(node0.isReturn());
44:       assertEquals((-1), node0.getLineno());
45:       assertEquals(365, node0.getType());
46:       assertFalse(node0.isCatch());
47:       assertFalse(node0.hasMoreThanOneChild());
48:       assertFalse(node0.isAssign());
49:       assertFalse(node0.isWhile());
50:       assertFalse(node0.isDec());
51:       assertFalse(node0.isRegExp());
52:       assertFalse(node0.isTypeOf());
53:       assertFalse(node0.hasChildren());
54:       assertFalse(node0.isBlock());
55:       assertFalse(node0.isFunction());
56:       assertFalse(node0.isCast());
57:       assertFalse(node0.isNot());
58:       assertFalse(node0.isIf());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isNE());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isAnd());
63:       assertEquals((-1), node0.getSourcePosition());
64:       assertFalse(node0.isIn());
65:       assertFalse(node0.isSetterDef());
66:       assertFalse(node0.isContinue());
67:       assertFalse(node0.isFalse());
68:       assertFalse(node0.isThrow());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isString());
71:       assertFalse(node0.isSwitch());
72:       assertEquals((-1), node0.getCharno());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isInstanceOf());
75:       assertFalse(node0.isBreak());
76:       assertFalse(node0.isWith());
77:       assertFalse(node0.isCase());
78:       assertFalse(node0.isThis());
79:       assertFalse(node0.isComma());
80:       assertFalse(node0.isHook());
81:       assertFalse(node0.isFor());
82:       assertFalse(node0.hasOneChild());
83:       assertFalse(node0.isTry());
84:       assertFalse(node0.isVoid());
85:       assertFalse(node0.isArrayLit());
86:       assertFalse(node0.isGetElem());
87:       assertFalse(node0.isScript());
88:       assertFalse(node0.isExprResult());
89:       assertFalse(node0.isEmpty());
90:       assertFalse(node0.isLabelName());
91:       assertFalse(node0.isNumber());
92:       assertFalse(node0.isDelProp());
93:       assertFalse(node0.isGetterDef());
94:       assertFalse(node0.isTrue());
95:       assertFalse(node0.isOr());
96:       assertFalse(node0.isAssignAdd());
97:       assertFalse(node0.isLabel());
98:       assertEquals(0, node0.getChildCount());
99:       assertFalse(node0.isDo());
100:       assertFalse(node0.isDefaultCase());
101:       assertFalse(node0.isVar());
102:       assertEquals(40, Node.ORIGINALNAME_PROP);
103:       assertEquals(50, Node.FREE_CALL);
104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(54, Node.SLASH_V);
108:       assertEquals(48, Node.DIRECTIVES);
109:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
111:       assertEquals(55, Node.INFERRED_FUNCTION);
112:       assertEquals(49, Node.DIRECT_EVAL);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(8, Node.FLAG_NO_THROWS);
118:       assertEquals(57, Node.LAST_PROP);
119:       assertEquals(29, Node.JSDOC_INFO_PROP);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(15, Node.NO_SIDE_EFFECTS);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
124:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
125:       assertEquals(56, Node.CHANGE_TIME);
126:       assertEquals(47, Node.IS_DISPATCHER);
127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
128:       assertEquals(37, Node.OPT_ARG_NAME);
129:       assertEquals(2, Node.POST_FLAG);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(4095, Node.COLUMN_MASK);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(12, Node.COLUMN_BITS);
136:       assertEquals(32, Node.INCRDECR_PROP);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       assertNotNull(node0);
139:       
140:       Node node1 = new Node(9, 31, 12);
141:       assertFalse(node1.isStringKey());
142:       assertFalse(node1.isCall());
143:       assertFalse(node1.isNull());
144:       assertFalse(node1.isVar());
145:       assertFalse(node1.isParamList());
146:       assertFalse(node1.isName());
147:       assertFalse(node1.isBlock());
148:       assertFalse(node1.isCatch());
149:       assertEquals(0, node1.getChildCount());
150:       assertFalse(node1.isWhile());
151:       assertFalse(node1.isTry());
152:       assertFalse(node1.isDebugger());
153:       assertFalse(node1.isNumber());
154:       assertFalse(node1.isFor());
155:       assertFalse(node1.isNE());
156:       assertFalse(node1.hasOneChild());
157:       assertFalse(node1.isIf());
158:       assertFalse(node1.isRegExp());
159:       assertFalse(node1.isCast());
160:       assertFalse(node1.isContinue());
161:       assertFalse(node1.isWith());
162:       assertFalse(node1.isFunction());
163:       assertFalse(node1.hasMoreThanOneChild());
164:       assertFalse(node1.isSetterDef());
165:       assertFalse(node1.isInc());
166:       assertFalse(node1.isIn());
167:       assertFalse(node1.isThrow());
168:       assertFalse(node1.isBreak());
169:       assertEquals(31, node1.getLineno());
170:       assertEquals(126988, node1.getSourcePosition());
171:       assertFalse(node1.isHook());
172:       assertFalse(node1.isThis());
173:       assertFalse(node1.isInstanceOf());
174:       assertFalse(node1.isComma());
175:       assertFalse(node1.isFalse());
176:       assertEquals(12, node1.getCharno());
177:       assertFalse(node1.isNot());
178:       assertFalse(node1.isString());
179:       assertFalse(node1.isCase());
180:       assertFalse(node1.isAnd());
181:       assertFalse(node1.isSwitch());
182:       assertFalse(node1.isGetProp());
183:       assertFalse(node1.isScript());
184:       assertFalse(node1.isGetterDef());
185:       assertFalse(node1.isObjectLit());
186:       assertFalse(node1.isLabelName());
187:       assertFalse(node1.isAssign());
188:       assertFalse(node1.isEmpty());
189:       assertFalse(node1.hasChildren());
190:       assertFalse(node1.isGetElem());
191:       assertFalse(node1.isArrayLit());
192:       assertFalse(node1.isDelProp());
193:       assertFalse(node1.isLabel());
194:       assertFalse(node1.isAssignAdd());
195:       assertFalse(node1.isReturn());
196:       assertFalse(node1.isExprResult());
197:       assertFalse(node1.isTypeOf());
198:       assertFalse(node1.isDec());
199:       assertFalse(node1.isDo());
200:       assertEquals(9, node1.getType());
201:       assertFalse(node1.isVoid());
202:       assertFalse(node1.isDefaultCase());
203:       assertFalse(node1.isOr());
204:       assertFalse(node1.isAdd());
205:       assertFalse(node1.isNew());
206:       assertFalse(node1.isTrue());
207:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
208:       assertEquals(8, Node.FLAG_NO_THROWS);
209:       assertEquals(39, Node.EMPTY_BLOCK);
210:       assertEquals(48, Node.DIRECTIVES);
211:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
212:       assertEquals(50, Node.FREE_CALL);
213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(55, Node.INFERRED_FUNCTION);
216:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
217:       assertEquals(15, Node.NO_SIDE_EFFECTS);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
220:       assertEquals(53, Node.INPUT_ID);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
223:       assertEquals(57, Node.REFLECTED_OBJECT);
224:       assertEquals(49, Node.DIRECT_EVAL);
225:       assertEquals(56, Node.CHANGE_TIME);
226:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(47, Node.IS_DISPATCHER);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertEquals(37, Node.OPT_ARG_NAME);
231:       assertEquals(29, Node.JSDOC_INFO_PROP);
232:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
233:       assertEquals(12, Node.COLUMN_BITS);
234:       assertEquals(1, Node.DECR_FLAG);
235:       assertEquals(32, Node.INCRDECR_PROP);
236:       assertEquals(57, Node.LAST_PROP);
237:       assertEquals(54, Node.SLASH_V);
238:       assertEquals(30, Node.VAR_ARGS_NAME);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(46, Node.IS_NAMESPACE);
242:       assertEquals(43, Node.IS_CONSTANT_NAME);
243:       assertNotNull(node1);
244:       assertFalse(node1.equals((Object)node0));
245:       
246:       node0.setWasEmptyNode(true);
247:       assertFalse(node0.isNew());
248:       assertFalse(node0.isCall());
249:       assertFalse(node0.isAdd());
250:       assertFalse(node0.isName());
251:       assertFalse(node0.isParamList());
252:       assertFalse(node0.isStringKey());
253:       assertFalse(node0.isNull());
254:       assertFalse(node0.isReturn());
255:       assertEquals((-1), node0.getLineno());
256:       assertEquals(365, node0.getType());
257:       assertFalse(node0.isCatch());
258:       assertFalse(node0.hasMoreThanOneChild());
259:       assertFalse(node0.isAssign());
260:       assertFalse(node0.isWhile());
261:       assertFalse(node0.isDec());
262:       assertFalse(node0.isRegExp());
263:       assertFalse(node0.isTypeOf());
264:       assertFalse(node0.hasChildren());
265:       assertFalse(node0.isBlock());
266:       assertFalse(node0.isFunction());
267:       assertFalse(node0.isCast());
268:       assertFalse(node0.isNot());
269:       assertFalse(node0.isIf());
270:       assertFalse(node0.isObjectLit());
271:       assertFalse(node0.isNE());
272:       assertFalse(node0.isDebugger());
273:       assertFalse(node0.isAnd());
274:       assertEquals((-1), node0.getSourcePosition());
275:       assertFalse(node0.isIn());
276:       assertFalse(node0.isSetterDef());
277:       assertFalse(node0.isContinue());
278:       assertFalse(node0.isFalse());
279:       assertFalse(node0.isThrow());
280:       assertFalse(node0.isInc());
281:       assertFalse(node0.isString());
282:       assertFalse(node0.isSwitch());
283:       assertEquals((-1), node0.getCharno());
284:       assertFalse(node0.isGetProp());
285:       assertFalse(node0.isInstanceOf());
286:       assertFalse(node0.isBreak());
287:       assertFalse(node0.isWith());
288:       assertFalse(node0.isCase());
289:       assertFalse(node0.isThis());
290:       assertFalse(node0.isComma());
291:       assertFalse(node0.isHook());
292:       assertFalse(node0.isFor());
293:       assertFalse(node0.hasOneChild());
294:       assertFalse(node0.isTry());
295:       assertFalse(node0.isVoid());
296:       assertFalse(node0.isArrayLit());
297:       assertFalse(node0.isGetElem());
298:       assertFalse(node0.isScript());
299:       assertFalse(node0.isExprResult());
300:       assertFalse(node0.isEmpty());
301:       assertFalse(node0.isLabelName());
302:       assertFalse(node0.isNumber());
303:       assertFalse(node0.isDelProp());
304:       assertFalse(node0.isGetterDef());
305:       assertFalse(node0.isTrue());
306:       assertFalse(node0.isOr());
307:       assertFalse(node0.isAssignAdd());
308:       assertFalse(node0.isLabel());
309:       assertEquals(0, node0.getChildCount());
310:       assertFalse(node0.isDo());
311:       assertFalse(node0.isDefaultCase());
312:       assertFalse(node0.isVar());
313:       assertEquals(40, Node.ORIGINALNAME_PROP);
314:       assertEquals(50, Node.FREE_CALL);
315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
316:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(48, Node.DIRECTIVES);
320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
321:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
322:       assertEquals(55, Node.INFERRED_FUNCTION);
323:       assertEquals(49, Node.DIRECT_EVAL);
324:       assertEquals(30, Node.VAR_ARGS_NAME);
325:       assertEquals(36, Node.QUOTED_PROP);
326:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
327:       assertEquals(52, Node.LENGTH);
328:       assertEquals(8, Node.FLAG_NO_THROWS);
329:       assertEquals(57, Node.LAST_PROP);
330:       assertEquals(29, Node.JSDOC_INFO_PROP);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(15, Node.NO_SIDE_EFFECTS);
333:       assertEquals(39, Node.EMPTY_BLOCK);
334:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
336:       assertEquals(56, Node.CHANGE_TIME);
337:       assertEquals(47, Node.IS_DISPATCHER);
338:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
339:       assertEquals(37, Node.OPT_ARG_NAME);
340:       assertEquals(2, Node.POST_FLAG);
341:       assertEquals(43, Node.IS_CONSTANT_NAME);
342:       assertEquals(1, Node.DECR_FLAG);
343:       assertEquals(4095, Node.COLUMN_MASK);
344:       assertEquals(46, Node.IS_NAMESPACE);
345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
346:       assertEquals(12, Node.COLUMN_BITS);
347:       assertEquals(32, Node.INCRDECR_PROP);
348:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
349:       assertFalse(node0.equals((Object)node1));
350:       
351:       node1.setType(98);
352:       assertTrue(node1.isHook());
353:       assertFalse(node1.isStringKey());
354:       assertFalse(node1.isCall());
355:       assertFalse(node1.isNull());
356:       assertFalse(node1.isVar());
357:       assertFalse(node1.isParamList());
358:       assertFalse(node1.isName());
359:       assertFalse(node1.isBlock());
360:       assertFalse(node1.isCatch());
361:       assertEquals(0, node1.getChildCount());
362:       assertFalse(node1.isWhile());
363:       assertFalse(node1.isTry());
364:       assertFalse(node1.isDebugger());
365:       assertFalse(node1.isNumber());
366:       assertFalse(node1.isFor());
367:       assertFalse(node1.isNE());
368:       assertFalse(node1.hasOneChild());
369:       assertFalse(node1.isIf());
370:       assertFalse(node1.isRegExp());
371:       assertFalse(node1.isCast());
372:       assertEquals(98, node1.getType());
373:       assertFalse(node1.isContinue());
374:       assertFalse(node1.isWith());
375:       assertFalse(node1.isFunction());
376:       assertFalse(node1.hasMoreThanOneChild());
377:       assertFalse(node1.isSetterDef());
378:       assertFalse(node1.isInc());
379:       assertFalse(node1.isIn());
380:       assertFalse(node1.isThrow());
381:       assertFalse(node1.isBreak());
382:       assertEquals(31, node1.getLineno());
383:       assertEquals(126988, node1.getSourcePosition());
384:       assertFalse(node1.isThis());
385:       assertFalse(node1.isInstanceOf());
386:       assertFalse(node1.isComma());
387:       assertFalse(node1.isFalse());
388:       assertEquals(12, node1.getCharno());
389:       assertFalse(node1.isNot());
390:       assertFalse(node1.isString());
391:       assertFalse(node1.isCase());
392:       assertFalse(node1.isAnd());
393:       assertFalse(node1.isSwitch());
394:       assertFalse(node1.isGetProp());
395:       assertFalse(node1.isScript());
396:       assertFalse(node1.isGetterDef());
397:       assertFalse(node1.isObjectLit());
398:       assertFalse(node1.isLabelName());
399:       assertFalse(node1.isAssign());
400:       assertFalse(node1.isEmpty());
401:       assertFalse(node1.hasChildren());
402:       assertFalse(node1.isGetElem());
403:       assertFalse(node1.isArrayLit());
404:       assertFalse(node1.isDelProp());
405:       assertFalse(node1.isLabel());
406:       assertFalse(node1.isAssignAdd());
407:       assertFalse(node1.isReturn());
408:       assertFalse(node1.isExprResult());
409:       assertFalse(node1.isTypeOf());
410:       assertFalse(node1.isDec());
411:       assertFalse(node1.isDo());
412:       assertFalse(node1.isVoid());
413:       assertFalse(node1.isDefaultCase());
414:       assertFalse(node1.isOr());
415:       assertFalse(node1.isAdd());
416:       assertFalse(node1.isNew());
417:       assertFalse(node1.isTrue());
418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
419:       assertEquals(8, Node.FLAG_NO_THROWS);
420:       assertEquals(39, Node.EMPTY_BLOCK);
421:       assertEquals(48, Node.DIRECTIVES);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(50, Node.FREE_CALL);
424:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
425:       assertEquals(4095, Node.COLUMN_MASK);
426:       assertEquals(55, Node.INFERRED_FUNCTION);
427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
428:       assertEquals(15, Node.NO_SIDE_EFFECTS);
429:       assertEquals(36, Node.QUOTED_PROP);
430:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
431:       assertEquals(53, Node.INPUT_ID);
432:       assertEquals(52, Node.LENGTH);
433:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
434:       assertEquals(57, Node.REFLECTED_OBJECT);
435:       assertEquals(49, Node.DIRECT_EVAL);
436:       assertEquals(56, Node.CHANGE_TIME);
437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
438:       assertEquals(2, Node.POST_FLAG);
439:       assertEquals(47, Node.IS_DISPATCHER);
440:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
441:       assertEquals(37, Node.OPT_ARG_NAME);
442:       assertEquals(29, Node.JSDOC_INFO_PROP);
443:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
444:       assertEquals(12, Node.COLUMN_BITS);
445:       assertEquals(1, Node.DECR_FLAG);
446:       assertEquals(32, Node.INCRDECR_PROP);
447:       assertEquals(57, Node.LAST_PROP);
448:       assertEquals(54, Node.SLASH_V);
449:       assertEquals(30, Node.VAR_ARGS_NAME);
450:       assertEquals(40, Node.ORIGINALNAME_PROP);
451:       assertEquals(51, Node.STATIC_SOURCE_FILE);
452:       assertEquals(46, Node.IS_NAMESPACE);
453:       assertEquals(43, Node.IS_CONSTANT_NAME);
454:       assertFalse(node1.equals((Object)node0));
455:       
456:       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
457:       assertEquals(0, linkedHashSet0.size());
458:       assertTrue(linkedHashSet0.isEmpty());
459:       assertNotNull(linkedHashSet0);
460:       assertFalse(linkedHashSet0.contains("4"));
461:       
462:       node1.setDirectives(linkedHashSet0);
463:       assertTrue(node1.isHook());
464:       assertFalse(node1.isStringKey());
465:       assertFalse(node1.isCall());
466:       assertFalse(node1.isNull());
467:       assertFalse(node1.isVar());
468:       assertFalse(node1.isParamList());
469:       assertFalse(node1.isName());
470:       assertFalse(node1.isBlock());
471:       assertFalse(node1.isCatch());
472:       assertEquals(0, node1.getChildCount());
473:       assertFalse(node1.isWhile());
474:       assertFalse(node1.isTry());
475:       assertFalse(node1.isDebugger());
476:       assertFalse(node1.isNumber());
477:       assertFalse(node1.isFor());
478:       assertFalse(node1.isNE());
479:       assertFalse(node1.hasOneChild());
480:       assertFalse(node1.isIf());
481:       assertFalse(node1.isRegExp());
482:       assertFalse(node1.isCast());
483:       assertEquals(98, node1.getType());
484:       assertFalse(node1.isContinue());
485:       assertFalse(node1.isWith());
486:       assertFalse(node1.isFunction());
487:       assertFalse(node1.hasMoreThanOneChild());
488:       assertFalse(node1.isSetterDef());
489:       assertFalse(node1.isInc());
490:       assertFalse(node1.isIn());
491:       assertFalse(node1.isThrow());
492:       assertFalse(node1.isBreak());
493:       assertEquals(31, node1.getLineno());
494:       assertEquals(126988, node1.getSourcePosition());
495:       assertFalse(node1.isThis());
496:       assertFalse(node1.isInstanceOf());
497:       assertFalse(node1.isComma());
498:       assertFalse(node1.isFalse());
499:       assertEquals(12, node1.getCharno());
500:       assertFalse(node1.isNot());
501:       assertFalse(node1.isString());
502:       assertFalse(node1.isCase());
503:       assertFalse(node1.isAnd());
504:       assertFalse(node1.isSwitch());
505:       assertFalse(node1.isGetProp());
506:       assertFalse(node1.isScript());
507:       assertFalse(node1.isGetterDef());
508:       assertFalse(node1.isObjectLit());
509:       assertFalse(node1.isLabelName());
510:       assertFalse(node1.isAssign());
511:       assertFalse(node1.isEmpty());
512:       assertFalse(node1.hasChildren());
513:       assertFalse(node1.isGetElem());
514:       assertFalse(node1.isArrayLit());
515:       assertFalse(node1.isDelProp());
516:       assertFalse(node1.isLabel());
517:       assertFalse(node1.isAssignAdd());
518:       assertFalse(node1.isReturn());
519:       assertFalse(node1.isExprResult());
520:       assertFalse(node1.isTypeOf());
521:       assertFalse(node1.isDec());
522:       assertFalse(node1.isDo());
523:       assertFalse(node1.isVoid());
524:       assertFalse(node1.isDefaultCase());
525:       assertFalse(node1.isOr());
526:       assertFalse(node1.isAdd());
527:       assertFalse(node1.isNew());
528:       assertFalse(node1.isTrue());
529:       assertEquals(0, linkedHashSet0.size());
530:       assertTrue(linkedHashSet0.isEmpty());
531:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
536:       assertEquals(50, Node.FREE_CALL);
537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
538:       assertEquals(4095, Node.COLUMN_MASK);
539:       assertEquals(55, Node.INFERRED_FUNCTION);
540:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
544:       assertEquals(53, Node.INPUT_ID);
545:       assertEquals(52, Node.LENGTH);
546:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
547:       assertEquals(57, Node.REFLECTED_OBJECT);
548:       assertEquals(49, Node.DIRECT_EVAL);
549:       assertEquals(56, Node.CHANGE_TIME);
550:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
551:       assertEquals(2, Node.POST_FLAG);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
554:       assertEquals(37, Node.OPT_ARG_NAME);
555:       assertEquals(29, Node.JSDOC_INFO_PROP);
556:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
557:       assertEquals(12, Node.COLUMN_BITS);
558:       assertEquals(1, Node.DECR_FLAG);
559:       assertEquals(32, Node.INCRDECR_PROP);
560:       assertEquals(57, Node.LAST_PROP);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(30, Node.VAR_ARGS_NAME);
563:       assertEquals(40, Node.ORIGINALNAME_PROP);
564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
565:       assertEquals(46, Node.IS_NAMESPACE);
566:       assertEquals(43, Node.IS_CONSTANT_NAME);
567:       assertFalse(node1.equals((Object)node0));
568:       assertFalse(linkedHashSet0.contains("4"));
569:       
570:       boolean boolean0 = node1.isRegExp();
571:       assertTrue(node1.isHook());
572:       assertFalse(node1.isStringKey());
573:       assertFalse(node1.isCall());
574:       assertFalse(node1.isNull());
575:       assertFalse(node1.isVar());
576:       assertFalse(node1.isParamList());
577:       assertFalse(node1.isName());
578:       assertFalse(node1.isBlock());
579:       assertFalse(node1.isCatch());
580:       assertEquals(0, node1.getChildCount());
581:       assertFalse(node1.isWhile());
582:       assertFalse(node1.isTry());
583:       assertFalse(node1.isDebugger());
584:       assertFalse(node1.isNumber());
585:       assertFalse(node1.isFor());
586:       assertFalse(node1.isNE());
587:       assertFalse(node1.hasOneChild());
588:       assertFalse(node1.isIf());
589:       assertFalse(node1.isRegExp());
590:       assertFalse(node1.isCast());
591:       assertEquals(98, node1.getType());
592:       assertFalse(node1.isContinue());
593:       assertFalse(node1.isWith());
594:       assertFalse(node1.isFunction());
595:       assertFalse(node1.hasMoreThanOneChild());
596:       assertFalse(node1.isSetterDef());
597:       assertFalse(node1.isInc());
598:       assertFalse(node1.isIn());
599:       assertFalse(node1.isThrow());
600:       assertFalse(node1.isBreak());
601:       assertEquals(31, node1.getLineno());
602:       assertEquals(126988, node1.getSourcePosition());
603:       assertFalse(node1.isThis());
604:       assertFalse(node1.isInstanceOf());
605:       assertFalse(node1.isComma());
606:       assertFalse(node1.isFalse());
607:       assertEquals(12, node1.getCharno());
608:       assertFalse(node1.isNot());
609:       assertFalse(node1.isString());
610:       assertFalse(node1.isCase());
611:       assertFalse(node1.isAnd());
612:       assertFalse(node1.isSwitch());
613:       assertFalse(node1.isGetProp());
614:       assertFalse(node1.isScript());
615:       assertFalse(node1.isGetterDef());
616:       assertFalse(node1.isObjectLit());
617:       assertFalse(node1.isLabelName());
618:       assertFalse(node1.isAssign());
619:       assertFalse(node1.isEmpty());
620:       assertFalse(node1.hasChildren());
621:       assertFalse(node1.isGetElem());
622:       assertFalse(node1.isArrayLit());
623:       assertFalse(node1.isDelProp());
624:       assertFalse(node1.isLabel());
625:       assertFalse(node1.isAssignAdd());
626:       assertFalse(node1.isReturn());
627:       assertFalse(node1.isExprResult());
628:       assertFalse(node1.isTypeOf());
629:       assertFalse(node1.isDec());
630:       assertFalse(node1.isDo());
631:       assertFalse(node1.isVoid());
632:       assertFalse(node1.isDefaultCase());
633:       assertFalse(node1.isOr());
634:       assertFalse(node1.isAdd());
635:       assertFalse(node1.isNew());
636:       assertFalse(node1.isTrue());
637:       assertFalse(boolean0);
638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
639:       assertEquals(8, Node.FLAG_NO_THROWS);
640:       assertEquals(39, Node.EMPTY_BLOCK);
641:       assertEquals(48, Node.DIRECTIVES);
642:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
643:       assertEquals(50, Node.FREE_CALL);
644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
645:       assertEquals(4095, Node.COLUMN_MASK);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
649:       assertEquals(36, Node.QUOTED_PROP);
650:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
651:       assertEquals(53, Node.INPUT_ID);
652:       assertEquals(52, Node.LENGTH);
653:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
654:       assertEquals(57, Node.REFLECTED_OBJECT);
655:       assertEquals(49, Node.DIRECT_EVAL);
656:       assertEquals(56, Node.CHANGE_TIME);
657:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
658:       assertEquals(2, Node.POST_FLAG);
659:       assertEquals(47, Node.IS_DISPATCHER);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(37, Node.OPT_ARG_NAME);
662:       assertEquals(29, Node.JSDOC_INFO_PROP);
663:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
664:       assertEquals(12, Node.COLUMN_BITS);
665:       assertEquals(1, Node.DECR_FLAG);
666:       assertEquals(32, Node.INCRDECR_PROP);
667:       assertEquals(57, Node.LAST_PROP);
668:       assertEquals(54, Node.SLASH_V);
669:       assertEquals(30, Node.VAR_ARGS_NAME);
670:       assertEquals(40, Node.ORIGINALNAME_PROP);
671:       assertEquals(51, Node.STATIC_SOURCE_FILE);
672:       assertEquals(46, Node.IS_NAMESPACE);
673:       assertEquals(43, Node.IS_CONSTANT_NAME);
674:       assertFalse(node1.equals((Object)node0));
675:       
676:       Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(56);
677:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
678:       assertEquals(56, node_SideEffectFlags1.valueOf());
679:       assertNotNull(node_SideEffectFlags1);
680:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
681:       
682:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
683:       assertEquals(31, node_SideEffectFlags0.valueOf());
684:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
685:       assertEquals(31, node_SideEffectFlags2.valueOf());
686:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
687:       assertNotNull(node_SideEffectFlags2);
688:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
689:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
690:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
691:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
692:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
693:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
694:       
695:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
696:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
697:       assertEquals(23, node_SideEffectFlags0.valueOf());
698:       assertEquals(23, node_SideEffectFlags2.valueOf());
699:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
700:       assertEquals(23, node_SideEffectFlags3.valueOf());
701:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
702:       assertNotNull(node_SideEffectFlags3);
703:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
704:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
705:       assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
706:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
707:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
708:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
709:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
710:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
711:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
712:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
713:       assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
714:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
715:       
716:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
717:       assertEquals(16, node_SideEffectFlags0.valueOf());
718:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
719:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
720:       assertEquals(16, node_SideEffectFlags2.valueOf());
721:       assertFalse(node_SideEffectFlags4.areAllFlagsSet());
722:       assertEquals(16, node_SideEffectFlags4.valueOf());
723:       assertNotNull(node_SideEffectFlags4);
724:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
725:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
726:       assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags1));
727:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
728:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
729:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
730:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
731:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
732:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
733:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
734:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
735:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
736:       assertNotSame(node_SideEffectFlags4, node_SideEffectFlags1);
737:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
738:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
739:       
740:       Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags((-1118));
741:       assertEquals((-1118), node_SideEffectFlags5.valueOf());
742:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
743:       assertNotNull(node_SideEffectFlags5);
744:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags1));
745:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags2));
746:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags3));
747:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags4));
748:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags0));
749:       
750:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
751:       assertEquals((-1120), node_SideEffectFlags5.valueOf());
752:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
753:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
754:       assertEquals((-1120), node_SideEffectFlags6.valueOf());
755:       assertNotNull(node_SideEffectFlags6);
756:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags1));
757:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags2));
758:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags3));
759:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags4));
760:       assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags0));
761:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
762:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
763:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
764:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
765:       assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
766:       assertNotSame(node_SideEffectFlags5, node_SideEffectFlags1);
767:       assertNotSame(node_SideEffectFlags5, node_SideEffectFlags2);
768:       assertNotSame(node_SideEffectFlags5, node_SideEffectFlags3);
769:       assertNotSame(node_SideEffectFlags5, node_SideEffectFlags4);
770:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
771:       assertNotSame(node_SideEffectFlags5, node_SideEffectFlags0);
772:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
773:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
774:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
775:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
776:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
777:       assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);
778:       
779:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.setReturnsTainted();
780:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
781:       assertEquals(0, node_SideEffectFlags0.valueOf());
782:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
783:       assertEquals(0, node_SideEffectFlags2.valueOf());
784:       assertEquals(0, node_SideEffectFlags4.valueOf());
785:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
786:       assertEquals(0, node_SideEffectFlags7.valueOf());
787:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
788:       assertNotNull(node_SideEffectFlags7);
789:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
790:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags5));
791:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
792:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags5));
793:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
794:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags6));
795:       assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags1));
796:       assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags5));
797:       assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags6));
798:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
799:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
800:       assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags6));
801:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
802:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
803:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
804:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags5);
805:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
806:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
807:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
808:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags5);
809:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
810:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
811:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
812:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
813:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
814:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags6);
815:       assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
816:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
817:       assertNotSame(node_SideEffectFlags4, node_SideEffectFlags1);
818:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
819:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
820:       assertNotSame(node_SideEffectFlags4, node_SideEffectFlags5);
821:       assertNotSame(node_SideEffectFlags4, node_SideEffectFlags6);
822:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
823:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
824:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
825:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
826:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
827:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
828:       assertNotSame(node_SideEffectFlags7, node_SideEffectFlags6);
829:       
830:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags1.setMutatesArguments();
831:       assertFalse(node_SideEffectFlags8.areAllFlagsSet());
832:       assertEquals(56, node_SideEffectFlags8.valueOf());
833:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
834:       assertEquals(56, node_SideEffectFlags1.valueOf());
835:       assertNotNull(node_SideEffectFlags8);
836:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
837:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
838:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
839:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
840:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
841:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
842:       assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
843:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags3));
844:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags5));
845:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags2));
846:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags7));
847:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags6));
848:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
849:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags4));
850:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
851:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
852:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
853:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
854:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
855:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
856:       assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
857:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
858:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags3);
859:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags5);
860:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags2);
861:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
862:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags7);
863:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags6);
864:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
865:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags4);
866:       
867:       boolean boolean1 = node_SideEffectFlags0.areAllFlagsSet();
868:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
869:       assertEquals(0, node_SideEffectFlags0.valueOf());
870:       assertTrue(boolean1);
871:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags8));
872:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
873:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags5));
874:       assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
875:       assertFalse(boolean1 == boolean0);
876:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
877:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
878:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags8);
879:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
880:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags5);
881:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
882:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
883:       assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
884:       
885:       boolean boolean2 = node1.isHook();
886:       assertTrue(node1.isHook());
887:       assertFalse(node1.isStringKey());
888:       assertFalse(node1.isCall());
889:       assertFalse(node1.isNull());
890:       assertFalse(node1.isVar());
891:       assertFalse(node1.isParamList());
892:       assertFalse(node1.isName());
893:       assertFalse(node1.isBlock());
894:       assertFalse(node1.isCatch());
895:       assertEquals(0, node1.getChildCount());
896:       assertFalse(node1.isWhile());
897:       assertFalse(node1.isTry());
898:       assertFalse(node1.isDebugger());
899:       assertFalse(node1.isNumber());
900:       assertFalse(node1.isFor());
901:       assertFalse(node1.isNE());
902:       assertFalse(node1.hasOneChild());
903:       assertFalse(node1.isIf());
904:       assertFalse(node1.isRegExp());
905:       assertFalse(node1.isCast());
906:       assertEquals(98, node1.getType());
907:       assertFalse(node1.isContinue());
908:       assertFalse(node1.isWith());
909:       assertFalse(node1.isFunction());
910:       assertFalse(node1.hasMoreThanOneChild());
911:       assertFalse(node1.isSetterDef());
912:       assertFalse(node1.isInc());
913:       assertFalse(node1.isIn());
914:       assertFalse(node1.isThrow());
915:       assertFalse(node1.isBreak());
916:       assertEquals(31, node1.getLineno());
917:       assertEquals(126988, node1.getSourcePosition());
918:       assertFalse(node1.isThis());
919:       assertFalse(node1.isInstanceOf());
920:       assertFalse(node1.isComma());
921:       assertFalse(node1.isFalse());
922:       assertEquals(12, node1.getCharno());
923:       assertFalse(node1.isNot());
924:       assertFalse(node1.isString());
925:       assertFalse(node1.isCase());
926:       assertFalse(node1.isAnd());
927:       assertFalse(node1.isSwitch());
928:       assertFalse(node1.isGetProp());
929:       assertFalse(node1.isScript());
930:       assertFalse(node1.isGetterDef());
931:       assertFalse(node1.isObjectLit());
932:       assertFalse(node1.isLabelName());
933:       assertFalse(node1.isAssign());
934:       assertFalse(node1.isEmpty());
935:       assertFalse(node1.hasChildren());
936:       assertFalse(node1.isGetElem());
937:       assertFalse(node1.isArrayLit());
938:       assertFalse(node1.isDelProp());
939:       assertFalse(node1.isLabel());
940:       assertFalse(node1.isAssignAdd());
941:       assertFalse(node1.isReturn());
942:       assertFalse(node1.isExprResult());
943:       assertFalse(node1.isTypeOf());
944:       assertFalse(node1.isDec());
945:       assertFalse(node1.isDo());
946:       assertFalse(node1.isVoid());
947:       assertFalse(node1.isDefaultCase());
948:       assertFalse(node1.isOr());
949:       assertFalse(node1.isAdd());
950:       assertFalse(node1.isNew());
951:       assertFalse(node1.isTrue());
952:       assertTrue(boolean2);
953:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
954:       assertEquals(8, Node.FLAG_NO_THROWS);
955:       assertEquals(39, Node.EMPTY_BLOCK);
956:       assertEquals(48, Node.DIRECTIVES);
957:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
958:       assertEquals(50, Node.FREE_CALL);
959:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
960:       assertEquals(4095, Node.COLUMN_MASK);
961:       assertEquals(55, Node.INFERRED_FUNCTION);
962:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
963:       assertEquals(15, Node.NO_SIDE_EFFECTS);
964:       assertEquals(36, Node.QUOTED_PROP);
965:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
966:       assertEquals(53, Node.INPUT_ID);
967:       assertEquals(52, Node.LENGTH);
968:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
969:       assertEquals(57, Node.REFLECTED_OBJECT);
970:       assertEquals(49, Node.DIRECT_EVAL);
971:       assertEquals(56, Node.CHANGE_TIME);
972:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
973:       assertEquals(2, Node.POST_FLAG);
974:       assertEquals(47, Node.IS_DISPATCHER);
975:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
976:       assertEquals(37, Node.OPT_ARG_NAME);
977:       assertEquals(29, Node.JSDOC_INFO_PROP);
978:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
979:       assertEquals(12, Node.COLUMN_BITS);
980:       assertEquals(1, Node.DECR_FLAG);
981:       assertEquals(32, Node.INCRDECR_PROP);
982:       assertEquals(57, Node.LAST_PROP);
983:       assertEquals(54, Node.SLASH_V);
984:       assertEquals(30, Node.VAR_ARGS_NAME);
985:       assertEquals(40, Node.ORIGINALNAME_PROP);
986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
987:       assertEquals(46, Node.IS_NAMESPACE);
988:       assertEquals(43, Node.IS_CONSTANT_NAME);
989:       assertTrue(boolean2 == boolean1);
990:       assertFalse(boolean2 == boolean0);
991:       assertFalse(node1.equals((Object)node0));
992:       
993:       Node node2 = new Node(50, node0, (-367), 2);
994:       assertFalse(node0.isNew());
995:       assertFalse(node0.isCall());
996:       assertFalse(node0.isAdd());
997:       assertFalse(node0.isName());
998:       assertFalse(node0.isParamList());
999:       assertFalse(node0.isStringKey());
1000:       assertFalse(node0.isNull());
1001:       assertFalse(node0.isReturn());
1002:       assertEquals((-1), node0.getLineno());
1003:       assertEquals(365, node0.getType());
1004:       assertFalse(node0.isCatch());
1005:       assertFalse(node0.hasMoreThanOneChild());
1006:       assertFalse(node0.isAssign());
1007:       assertFalse(node0.isWhile());
1008:       assertFalse(node0.isDec());
1009:       assertFalse(node0.isRegExp());
1010:       assertFalse(node0.isTypeOf());
1011:       assertFalse(node0.hasChildren());
1012:       assertFalse(node0.isBlock());
1013:       assertFalse(node0.isFunction());
1014:       assertFalse(node0.isCast());
1015:       assertFalse(node0.isNot());
1016:       assertFalse(node0.isIf());
1017:       assertFalse(node0.isObjectLit());
1018:       assertFalse(node0.isNE());
1019:       assertFalse(node0.isDebugger());
1020:       assertFalse(node0.isAnd());
1021:       assertEquals((-1), node0.getSourcePosition());
1022:       assertFalse(node0.isIn());
1023:       assertFalse(node0.isSetterDef());
1024:       assertFalse(node0.isContinue());
1025:       assertFalse(node0.isFalse());
1026:       assertFalse(node0.isThrow());
1027:       assertFalse(node0.isInc());
1028:       assertFalse(node0.isString());
1029:       assertFalse(node0.isSwitch());
1030:       assertEquals((-1), node0.getCharno());
1031:       assertFalse(node0.isGetProp());
1032:       assertFalse(node0.isInstanceOf());
1033:       assertFalse(node0.isBreak());
1034:       assertFalse(node0.isWith());
1035:       assertFalse(node0.isCase());
1036:       assertFalse(node0.isThis());
1037:       assertFalse(node0.isComma());
1038:       assertFalse(node0.isHook());
1039:       assertFalse(node0.isFor());
1040:       assertFalse(node0.hasOneChild());
1041:       assertFalse(node0.isTry());
1042:       assertFalse(node0.isVoid());
1043:       assertFalse(node0.isArrayLit());
1044:       assertFalse(node0.isGetElem());
1045:       assertFalse(node0.isScript());
1046:       assertFalse(node0.isExprResult());
1047:       assertFalse(node0.isEmpty());
1048:       assertFalse(node0.isLabelName());
1049:       assertFalse(node0.isNumber());
1050:       assertFalse(node0.isDelProp());
1051:       assertFalse(node0.isGetterDef());
1052:       assertFalse(node0.isTrue());
1053:       assertFalse(node0.isOr());
1054:       assertFalse(node0.isAssignAdd());
1055:       assertFalse(node0.isLabel());
1056:       assertEquals(0, node0.getChildCount());
1057:       assertFalse(node0.isDo());
1058:       assertFalse(node0.isDefaultCase());
1059:       assertFalse(node0.isVar());
1060:       assertFalse(node2.isFalse());
1061:       assertFalse(node2.isThrow());
1062:       assertFalse(node2.isBreak());
1063:       assertEquals(50, node2.getType());
1064:       assertFalse(node2.isThis());
1065:       assertFalse(node2.isInc());
1066:       assertFalse(node2.isComma());
1067:       assertFalse(node2.isGetProp());
1068:       assertFalse(node2.isHook());
1069:       assertFalse(node2.isInstanceOf());
1070:       assertFalse(node2.isIn());
1071:       assertFalse(node2.isWith());
1072:       assertTrue(node2.hasChildren());
1073:       assertFalse(node2.isExprResult());
1074:       assertFalse(node2.isNE());
1075:       assertFalse(node2.isDelProp());
1076:       assertFalse(node2.isIf());
1077:       assertFalse(node2.isFor());
1078:       assertFalse(node2.isLabelName());
1079:       assertFalse(node2.isEmpty());
1080:       assertFalse(node2.isArrayLit());
1081:       assertFalse(node2.isNumber());
1082:       assertFalse(node2.isGetterDef());
1083:       assertFalse(node2.isTry());
1084:       assertEquals(1, node2.getChildCount());
1085:       assertFalse(node2.isLabel());
1086:       assertFalse(node2.isDefaultCase());
1087:       assertFalse(node2.isAssignAdd());
1088:       assertFalse(node2.isCase());
1089:       assertFalse(node2.isScript());
1090:       assertEquals((-1), node2.getCharno());
1091:       assertFalse(node2.isParamList());
1092:       assertFalse(node2.isSwitch());
1093:       assertFalse(node2.isStringKey());
1094:       assertFalse(node2.isName());
1095:       assertFalse(node2.isCall());
1096:       assertFalse(node2.isBlock());
1097:       assertFalse(node2.isNew());
1098:       assertFalse(node2.isAdd());
1099:       assertFalse(node2.isSetterDef());
1100:       assertFalse(node2.isVar());
1101:       assertFalse(node2.isWhile());
1102:       assertFalse(node2.isDo());
1103:       assertFalse(node2.isRegExp());
1104:       assertFalse(node2.isCatch());
1105:       assertFalse(node2.hasMoreThanOneChild());
1106:       assertFalse(node2.isOr());
1107:       assertFalse(node2.isVoid());
1108:       assertEquals((-1), node2.getLineno());
1109:       assertFalse(node2.isTrue());
1110:       assertFalse(node2.isNull());
1111:       assertFalse(node2.isGetElem());
1112:       assertFalse(node2.isAssign());
1113:       assertTrue(node2.hasOneChild());
1114:       assertEquals((-1), node2.getSourcePosition());
1115:       assertFalse(node2.isTypeOf());
1116:       assertFalse(node2.isDec());
1117:       assertFalse(node2.isCast());
1118:       assertFalse(node2.isReturn());
1119:       assertFalse(node2.isNot());
1120:       assertFalse(node2.isString());
1121:       assertFalse(node2.isObjectLit());
1122:       assertFalse(node2.isFunction());
1123:       assertFalse(node2.isContinue());
1124:       assertFalse(node2.isDebugger());
1125:       assertFalse(node2.isAnd());
1126:       assertEquals(40, Node.ORIGINALNAME_PROP);
1127:       assertEquals(50, Node.FREE_CALL);
1128:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1130:       assertEquals(57, Node.REFLECTED_OBJECT);
1131:       assertEquals(54, Node.SLASH_V);
1132:       assertEquals(48, Node.DIRECTIVES);
1133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1134:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1135:       assertEquals(55, Node.INFERRED_FUNCTION);
1136:       assertEquals(49, Node.DIRECT_EVAL);
1137:       assertEquals(30, Node.VAR_ARGS_NAME);
1138:       assertEquals(36, Node.QUOTED_PROP);
1139:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1140:       assertEquals(52, Node.LENGTH);
1141:       assertEquals(8, Node.FLAG_NO_THROWS);
1142:       assertEquals(57, Node.LAST_PROP);
1143:       assertEquals(29, Node.JSDOC_INFO_PROP);
1144:       assertEquals(53, Node.INPUT_ID);
1145:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1146:       assertEquals(39, Node.EMPTY_BLOCK);
1147:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1149:       assertEquals(56, Node.CHANGE_TIME);
1150:       assertEquals(47, Node.IS_DISPATCHER);
1151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1152:       assertEquals(37, Node.OPT_ARG_NAME);
1153:       assertEquals(2, Node.POST_FLAG);
1154:       assertEquals(43, Node.IS_CONSTANT_NAME);
1155:       assertEquals(1, Node.DECR_FLAG);
1156:       assertEquals(4095, Node.COLUMN_MASK);
1157:       assertEquals(46, Node.IS_NAMESPACE);
1158:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1159:       assertEquals(12, Node.COLUMN_BITS);
1160:       assertEquals(32, Node.INCRDECR_PROP);
1161:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1162:       assertEquals(8, Node.FLAG_NO_THROWS);
1163:       assertEquals(39, Node.EMPTY_BLOCK);
1164:       assertEquals(48, Node.DIRECTIVES);
1165:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1166:       assertEquals(55, Node.INFERRED_FUNCTION);
1167:       assertEquals(57, Node.REFLECTED_OBJECT);
1168:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1169:       assertEquals(52, Node.LENGTH);
1170:       assertEquals(50, Node.FREE_CALL);
1171:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1172:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       assertEquals(54, Node.SLASH_V);
1175:       assertEquals(43, Node.IS_CONSTANT_NAME);
1176:       assertEquals(40, Node.ORIGINALNAME_PROP);
1177:       assertEquals(30, Node.VAR_ARGS_NAME);
1178:       assertEquals(2, Node.POST_FLAG);
1179:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1180:       assertEquals(47, Node.IS_DISPATCHER);
1181:       assertEquals(37, Node.OPT_ARG_NAME);
1182:       assertEquals(46, Node.IS_NAMESPACE);
1183:       assertEquals(56, Node.CHANGE_TIME);
1184:       assertEquals(32, Node.INCRDECR_PROP);
1185:       assertEquals(1, Node.DECR_FLAG);
1186:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1187:       assertEquals(29, Node.JSDOC_INFO_PROP);
1188:       assertEquals(53, Node.INPUT_ID);
1189:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1190:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1191:       assertEquals(36, Node.QUOTED_PROP);
1192:       assertEquals(49, Node.DIRECT_EVAL);
1193:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1194:       assertEquals(4095, Node.COLUMN_MASK);
1195:       assertEquals(12, Node.COLUMN_BITS);
1196:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1197:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1198:       assertNotNull(node2);
1199:       assertFalse(node0.equals((Object)node1));
1200:       assertFalse(node2.equals((Object)node1));
1201:       assertFalse(node2.equals((Object)node0));
1202:       
1203:       Iterable<Node> iterable0 = node2.children();
1204:       assertFalse(node0.isNew());
1205:       assertFalse(node0.isCall());
1206:       assertFalse(node0.isAdd());
1207:       assertFalse(node0.isName());
1208:       assertFalse(node0.isParamList());
1209:       assertFalse(node0.isStringKey());
1210:       assertFalse(node0.isNull());
1211:       assertFalse(node0.isReturn());
1212:       assertEquals((-1), node0.getLineno());
1213:       assertEquals(365, node0.getType());
1214:       assertFalse(node0.isCatch());
1215:       assertFalse(node0.hasMoreThanOneChild());
1216:       assertFalse(node0.isAssign());
1217:       assertFalse(node0.isWhile());
1218:       assertFalse(node0.isDec());
1219:       assertFalse(node0.isRegExp());
1220:       assertFalse(node0.isTypeOf());
1221:       assertFalse(node0.hasChildren());
1222:       assertFalse(node0.isBlock());
1223:       assertFalse(node0.isFunction());
1224:       assertFalse(node0.isCast());
1225:       assertFalse(node0.isNot());
1226:       assertFalse(node0.isIf());
1227:       assertFalse(node0.isObjectLit());
1228:       assertFalse(node0.isNE());
1229:       assertFalse(node0.isDebugger());
1230:       assertFalse(node0.isAnd());
1231:       assertEquals((-1), node0.getSourcePosition());
1232:       assertFalse(node0.isIn());
1233:       assertFalse(node0.isSetterDef());
1234:       assertFalse(node0.isContinue());
1235:       assertFalse(node0.isFalse());
1236:       assertFalse(node0.isThrow());
1237:       assertFalse(node0.isInc());
1238:       assertFalse(node0.isString());
1239:       assertFalse(node0.isSwitch());
1240:       assertEquals((-1), node0.getCharno());
1241:       assertFalse(node0.isGetProp());
1242:       assertFalse(node0.isInstanceOf());
1243:       assertFalse(node0.isBreak());
1244:       assertFalse(node0.isWith());
1245:       assertFalse(node0.isCase());
1246:       assertFalse(node0.isThis());
1247:       assertFalse(node0.isComma());
1248:       assertFalse(node0.isHook());
1249:       assertFalse(node0.isFor());
1250:       assertFalse(node0.hasOneChild());
1251:       assertFalse(node0.isTry());
1252:       assertFalse(node0.isVoid());
1253:       assertFalse(node0.isArrayLit());
1254:       assertFalse(node0.isGetElem());
1255:       assertFalse(node0.isScript());
1256:       assertFalse(node0.isExprResult());
1257:       assertFalse(node0.isEmpty());
1258:       assertFalse(node0.isLabelName());
1259:       assertFalse(node0.isNumber());
1260:       assertFalse(node0.isDelProp());
1261:       assertFalse(node0.isGetterDef());
1262:       assertFalse(node0.isTrue());
1263:       assertFalse(node0.isOr());
1264:       assertFalse(node0.isAssignAdd());
1265:       assertFalse(node0.isLabel());
1266:       assertEquals(0, node0.getChildCount());
1267:       assertFalse(node0.isDo());
1268:       assertFalse(node0.isDefaultCase());
1269:       assertFalse(node0.isVar());
1270:       assertFalse(node2.isFalse());
1271:       assertFalse(node2.isThrow());
1272:       assertFalse(node2.isBreak());
1273:       assertEquals(50, node2.getType());
1274:       assertFalse(node2.isThis());
1275:       assertFalse(node2.isInc());
1276:       assertFalse(node2.isComma());
1277:       assertFalse(node2.isGetProp());
1278:       assertFalse(node2.isHook());
1279:       assertFalse(node2.isInstanceOf());
1280:       assertFalse(node2.isIn());
1281:       assertFalse(node2.isWith());
1282:       assertTrue(node2.hasChildren());
1283:       assertFalse(node2.isExprResult());
1284:       assertFalse(node2.isNE());
1285:       assertFalse(node2.isDelProp());
1286:       assertFalse(node2.isIf());
1287:       assertFalse(node2.isFor());
1288:       assertFalse(node2.isLabelName());
1289:       assertFalse(node2.isEmpty());
1290:       assertFalse(node2.isArrayLit());
1291:       assertFalse(node2.isNumber());
1292:       assertFalse(node2.isGetterDef());
1293:       assertFalse(node2.isTry());
1294:       assertEquals(1, node2.getChildCount());
1295:       assertFalse(node2.isLabel());
1296:       assertFalse(node2.isDefaultCase());
1297:       assertFalse(node2.isAssignAdd());
1298:       assertFalse(node2.isCase());
1299:       assertFalse(node2.isScript());
1300:       assertEquals((-1), node2.getCharno());
1301:       assertFalse(node2.isParamList());
1302:       assertFalse(node2.isSwitch());
1303:       assertFalse(node2.isStringKey());
1304:       assertFalse(node2.isName());
1305:       assertFalse(node2.isCall());
1306:       assertFalse(node2.isBlock());
1307:       assertFalse(node2.isNew());
1308:       assertFalse(node2.isAdd());
1309:       assertFalse(node2.isSetterDef());
1310:       assertFalse(node2.isVar());
1311:       assertFalse(node2.isWhile());
1312:       assertFalse(node2.isDo());
1313:       assertFalse(node2.isRegExp());
1314:       assertFalse(node2.isCatch());
1315:       assertFalse(node2.hasMoreThanOneChild());
1316:       assertFalse(node2.isOr());
1317:       assertFalse(node2.isVoid());
1318:       assertEquals((-1), node2.getLineno());
1319:       assertFalse(node2.isTrue());
1320:       assertFalse(node2.isNull());
1321:       assertFalse(node2.isGetElem());
1322:       assertFalse(node2.isAssign());
1323:       assertTrue(node2.hasOneChild());
1324:       assertEquals((-1), node2.getSourcePosition());
1325:       assertFalse(node2.isTypeOf());
1326:       assertFalse(node2.isDec());
1327:       assertFalse(node2.isCast());
1328:       assertFalse(node2.isReturn());
1329:       assertFalse(node2.isNot());
1330:       assertFalse(node2.isString());
1331:       assertFalse(node2.isObjectLit());
1332:       assertFalse(node2.isFunction());
1333:       assertFalse(node2.isContinue());
1334:       assertFalse(node2.isDebugger());
1335:       assertFalse(node2.isAnd());
1336:       assertEquals(40, Node.ORIGINALNAME_PROP);
1337:       assertEquals(50, Node.FREE_CALL);
1338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1340:       assertEquals(57, Node.REFLECTED_OBJECT);
1341:       assertEquals(54, Node.SLASH_V);
1342:       assertEquals(48, Node.DIRECTIVES);
1343:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1345:       assertEquals(55, Node.INFERRED_FUNCTION);
1346:       assertEquals(49, Node.DIRECT_EVAL);
1347:       assertEquals(30, Node.VAR_ARGS_NAME);
1348:       assertEquals(36, Node.QUOTED_PROP);
1349:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1350:       assertEquals(52, Node.LENGTH);
1351:       assertEquals(8, Node.FLAG_NO_THROWS);
1352:       assertEquals(57, Node.LAST_PROP);
1353:       assertEquals(29, Node.JSDOC_INFO_PROP);
1354:       assertEquals(53, Node.INPUT_ID);
1355:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1356:       assertEquals(39, Node.EMPTY_BLOCK);
1357:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1358:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1359:       assertEquals(56, Node.CHANGE_TIME);
1360:       assertEquals(47, Node.IS_DISPATCHER);
1361:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1362:       assertEquals(37, Node.OPT_ARG_NAME);
1363:       assertEquals(2, Node.POST_FLAG);
1364:       assertEquals(43, Node.IS_CONSTANT_NAME);
1365:       assertEquals(1, Node.DECR_FLAG);
1366:       assertEquals(4095, Node.COLUMN_MASK);
1367:       assertEquals(46, Node.IS_NAMESPACE);
1368:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1369:       assertEquals(12, Node.COLUMN_BITS);
1370:       assertEquals(32, Node.INCRDECR_PROP);
1371:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1372:       assertEquals(8, Node.FLAG_NO_THROWS);
1373:       assertEquals(39, Node.EMPTY_BLOCK);
1374:       assertEquals(48, Node.DIRECTIVES);
1375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1376:       assertEquals(55, Node.INFERRED_FUNCTION);
1377:       assertEquals(57, Node.REFLECTED_OBJECT);
1378:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1379:       assertEquals(52, Node.LENGTH);
1380:       assertEquals(50, Node.FREE_CALL);
1381:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1382:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1383:       assertEquals(57, Node.LAST_PROP);
1384:       assertEquals(54, Node.SLASH_V);
1385:       assertEquals(43, Node.IS_CONSTANT_NAME);
1386:       assertEquals(40, Node.ORIGINALNAME_PROP);
1387:       assertEquals(30, Node.VAR_ARGS_NAME);
1388:       assertEquals(2, Node.POST_FLAG);
1389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1390:       assertEquals(47, Node.IS_DISPATCHER);
1391:       assertEquals(37, Node.OPT_ARG_NAME);
1392:       assertEquals(46, Node.IS_NAMESPACE);
1393:       assertEquals(56, Node.CHANGE_TIME);
1394:       assertEquals(32, Node.INCRDECR_PROP);
1395:       assertEquals(1, Node.DECR_FLAG);
1396:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1397:       assertEquals(29, Node.JSDOC_INFO_PROP);
1398:       assertEquals(53, Node.INPUT_ID);
1399:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1400:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1401:       assertEquals(36, Node.QUOTED_PROP);
1402:       assertEquals(49, Node.DIRECT_EVAL);
1403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1404:       assertEquals(4095, Node.COLUMN_MASK);
1405:       assertEquals(12, Node.COLUMN_BITS);
1406:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1408:       assertNotNull(iterable0);
1409:       assertFalse(node0.equals((Object)node2));
1410:       assertFalse(node0.equals((Object)node1));
1411:       assertFalse(node2.equals((Object)node1));
1412:       assertFalse(node2.equals((Object)node0));
1413:       assertNotSame(node2, node1);
1414:       
1415:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
1416:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1417:       assertNotNull(jSTypeRegistry0);
1418:       
1419:       TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Tr[CAR");
1420:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1421:       assertFalse(templateType0.isFunctionPrototypeType());
1422:       assertFalse(templateType0.isTemplatizedType());
1423:       assertEquals("Tr[CAR", templateType0.getReferenceName());
1424:       assertFalse(templateType0.isEnumElementType());
1425:       assertFalse(templateType0.isEnumType());
1426:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1427:       assertFalse(templateType0.isBooleanValueType());
1428:       assertFalse(templateType0.isRecordType());
1429:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1430:       assertFalse(templateType0.hasCachedValues());
1431:       assertFalse(templateType0.isNumberValueType());
1432:       assertFalse(templateType0.isUnionType());
1433:       assertFalse(templateType0.isStringValueType());
1434:       assertFalse(templateType0.isFunctionType());
1435:       assertTrue(templateType0.isObject());
1436:       assertFalse(templateType0.isResolved());
1437:       assertTrue(templateType0.isTemplateType());
1438:       assertFalse(templateType0.isNullType());
1439:       assertFalse(templateType0.isVoidType());
1440:       assertFalse(templateType0.isNominalConstructor());
1441:       assertEquals(1, JSType.ENUMDECL);
1442:       assertEquals(0, JSType.NOT_ENUMDECL);
1443:       assertNotNull(templateType0);
1444:       
1445:       node0.putProp(31, templateType0);
1446:       assertFalse(node0.isNew());
1447:       assertFalse(node0.isCall());
1448:       assertFalse(node0.isAdd());
1449:       assertFalse(node0.isName());
1450:       assertFalse(node0.isParamList());
1451:       assertFalse(node0.isStringKey());
1452:       assertFalse(node0.isNull());
1453:       assertFalse(node0.isReturn());
1454:       assertEquals((-1), node0.getLineno());
1455:       assertEquals(365, node0.getType());
1456:       assertFalse(node0.isCatch());
1457:       assertFalse(node0.hasMoreThanOneChild());
1458:       assertFalse(node0.isAssign());
1459:       assertFalse(node0.isWhile());
1460:       assertFalse(node0.isDec());
1461:       assertFalse(node0.isRegExp());
1462:       assertFalse(node0.isTypeOf());
1463:       assertFalse(node0.hasChildren());
1464:       assertFalse(node0.isBlock());
1465:       assertFalse(node0.isFunction());
1466:       assertFalse(node0.isCast());
1467:       assertFalse(node0.isNot());
1468:       assertFalse(node0.isIf());
1469:       assertFalse(node0.isObjectLit());
1470:       assertFalse(node0.isNE());
1471:       assertFalse(node0.isDebugger());
1472:       assertFalse(node0.isAnd());
1473:       assertEquals((-1), node0.getSourcePosition());
1474:       assertFalse(node0.isIn());
1475:       assertFalse(node0.isSetterDef());
1476:       assertFalse(node0.isContinue());
1477:       assertFalse(node0.isFalse());
1478:       assertFalse(node0.isThrow());
1479:       assertFalse(node0.isInc());
1480:       assertFalse(node0.isString());
1481:       assertFalse(node0.isSwitch());
1482:       assertEquals((-1), node0.getCharno());
1483:       assertFalse(node0.isGetProp());
1484:       assertFalse(node0.isInstanceOf());
1485:       assertFalse(node0.isBreak());
1486:       assertFalse(node0.isWith());
1487:       assertFalse(node0.isCase());
1488:       assertFalse(node0.isThis());
1489:       assertFalse(node0.isComma());
1490:       assertFalse(node0.isHook());
1491:       assertFalse(node0.isFor());
1492:       assertFalse(node0.hasOneChild());
1493:       assertFalse(node0.isTry());
1494:       assertFalse(node0.isVoid());
1495:       assertFalse(node0.isArrayLit());
1496:       assertFalse(node0.isGetElem());
1497:       assertFalse(node0.isScript());
1498:       assertFalse(node0.isExprResult());
1499:       assertFalse(node0.isEmpty());
1500:       assertFalse(node0.isLabelName());
1501:       assertFalse(node0.isNumber());
1502:       assertFalse(node0.isDelProp());
1503:       assertFalse(node0.isGetterDef());
1504:       assertFalse(node0.isTrue());
1505:       assertFalse(node0.isOr());
1506:       assertFalse(node0.isAssignAdd());
1507:       assertFalse(node0.isLabel());
1508:       assertEquals(0, node0.getChildCount());
1509:       assertFalse(node0.isDo());
1510:       assertFalse(node0.isDefaultCase());
1511:       assertFalse(node0.isVar());
1512:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1513:       assertFalse(templateType0.isFunctionPrototypeType());
1514:       assertFalse(templateType0.isTemplatizedType());
1515:       assertEquals("Tr[CAR", templateType0.getReferenceName());
1516:       assertFalse(templateType0.isEnumElementType());
1517:       assertFalse(templateType0.isEnumType());
1518:       assertTrue(templateType0.hasAnyTemplateTypesInternal());
1519:       assertFalse(templateType0.isBooleanValueType());
1520:       assertFalse(templateType0.isRecordType());
1521:       assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
1522:       assertFalse(templateType0.hasCachedValues());
1523:       assertFalse(templateType0.isNumberValueType());
1524:       assertFalse(templateType0.isUnionType());
1525:       assertFalse(templateType0.isStringValueType());
1526:       assertFalse(templateType0.isFunctionType());
1527:       assertTrue(templateType0.isObject());
1528:       assertFalse(templateType0.isResolved());
1529:       assertTrue(templateType0.isTemplateType());
1530:       assertFalse(templateType0.isNullType());
1531:       assertFalse(templateType0.isVoidType());
1532:       assertFalse(templateType0.isNominalConstructor());
1533:       assertEquals(40, Node.ORIGINALNAME_PROP);
1534:       assertEquals(50, Node.FREE_CALL);
1535:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1536:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1537:       assertEquals(57, Node.REFLECTED_OBJECT);
1538:       assertEquals(54, Node.SLASH_V);
1539:       assertEquals(48, Node.DIRECTIVES);
1540:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1541:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1542:       assertEquals(55, Node.INFERRED_FUNCTION);
1543:       assertEquals(49, Node.DIRECT_EVAL);
1544:       assertEquals(30, Node.VAR_ARGS_NAME);
1545:       assertEquals(36, Node.QUOTED_PROP);
1546:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1547:       assertEquals(52, Node.LENGTH);
1548:       assertEquals(8, Node.FLAG_NO_THROWS);
1549:       assertEquals(57, Node.LAST_PROP);
1550:       assertEquals(29, Node.JSDOC_INFO_PROP);
1551:       assertEquals(53, Node.INPUT_ID);
1552:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1553:       assertEquals(39, Node.EMPTY_BLOCK);
1554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1555:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1556:       assertEquals(56, Node.CHANGE_TIME);
1557:       assertEquals(47, Node.IS_DISPATCHER);
1558:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1559:       assertEquals(37, Node.OPT_ARG_NAME);
1560:       assertEquals(2, Node.POST_FLAG);
1561:       assertEquals(43, Node.IS_CONSTANT_NAME);
1562:       assertEquals(1, Node.DECR_FLAG);
1563:       assertEquals(4095, Node.COLUMN_MASK);
1564:       assertEquals(46, Node.IS_NAMESPACE);
1565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1566:       assertEquals(12, Node.COLUMN_BITS);
1567:       assertEquals(32, Node.INCRDECR_PROP);
1568:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1569:       assertEquals(1, JSType.ENUMDECL);
1570:       assertEquals(0, JSType.NOT_ENUMDECL);
1571:       assertFalse(node0.equals((Object)node2));
1572:       assertFalse(node0.equals((Object)node1));
1573:       
1574:       Iterable<Node> iterable1 = node0.children();
1575:       assertFalse(node0.isNew());
1576:       assertFalse(node0.isCall());
1577:       assertFalse(node0.isAdd());
1578:       assertFalse(node0.isName());
1579:       assertFalse(node0.isParamList());
1580:       assertFalse(node0.isStringKey());
1581:       assertFalse(node0.isNull());
1582:       assertFalse(node0.isReturn());
1583:       assertEquals((-1), node0.getLineno());
1584:       assertEquals(365, node0.getType());
1585:       assertFalse(node0.isCatch());
1586:       assertFalse(node0.hasMoreThanOneChild());
1587:       assertFalse(node0.isAssign());
1588:       assertFalse(node0.isWhile());
1589:       assertFalse(node0.isDec());
1590:       assertFalse(node0.isRegExp());
1591:       assertFalse(node0.isTypeOf());
1592:       assertFalse(node0.hasChildren());
1593:       assertFalse(node0.isBlock());
1594:       assertFalse(node0.isFunction());
1595:       assertFalse(node0.isCast());
1596:       assertFalse(node0.isNot());
1597:       assertFalse(node0.isIf());
1598:       assertFalse(node0.isObjectLit());
1599:       assertFalse(node0.isNE());
1600:       assertFalse(node0.isDebugger());
1601:       assertFalse(node0.isAnd());
1602:       assertEquals((-1), node0.getSourcePosition());
1603:       assertFalse(node0.isIn());
1604:       assertFalse(node0.isSetterDef());
1605:       assertFalse(node0.isContinue());
1606:       assertFalse(node0.isFalse());
1607:       assertFalse(node0.isThrow());
1608:       assertFalse(node0.isInc());
1609:       assertFalse(node0.isString());
1610:       assertFalse(node0.isSwitch());
1611:       assertEquals((-1), node0.getCharno());
1612:       assertFalse(node0.isGetProp());
1613:       assertFalse(node0.isInstanceOf());
1614:       assertFalse(node0.isBreak());
1615:       assertFalse(node0.isWith());
1616:       assertFalse(node0.isCase());
1617:       assertFalse(node0.isThis());
1618:       assertFalse(node0.isComma());
1619:       assertFalse(node0.isHook());
1620:       assertFalse(node0.isFor());
1621:       assertFalse(node0.hasOneChild());
1622:       assertFalse(node0.isTry());
1623:       assertFalse(node0.isVoid());
1624:       assertFalse(node0.isArrayLit());
1625:       assertFalse(node0.isGetElem());
1626:       assertFalse(node0.isScript());
1627:       assertFalse(node0.isExprResult());
1628:       assertFalse(node0.isEmpty());
1629:       assertFalse(node0.isLabelName());
1630:       assertFalse(node0.isNumber());
1631:       assertFalse(node0.isDelProp());
1632:       assertFalse(node0.isGetterDef());
1633:       assertFalse(node0.isTrue());
1634:       assertFalse(node0.isOr());
1635:       assertFalse(node0.isAssignAdd());
1636:       assertFalse(node0.isLabel());
1637:       assertEquals(0, node0.getChildCount());
1638:       assertFalse(node0.isDo());
1639:       assertFalse(node0.isDefaultCase());
1640:       assertFalse(node0.isVar());
1641:       assertEquals(40, Node.ORIGINALNAME_PROP);
1642:       assertEquals(50, Node.FREE_CALL);
1643:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1644:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1645:       assertEquals(57, Node.REFLECTED_OBJECT);
1646:       assertEquals(54, Node.SLASH_V);
1647:       assertEquals(48, Node.DIRECTIVES);
1648:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1649:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1650:       assertEquals(55, Node.INFERRED_FUNCTION);
1651:       assertEquals(49, Node.DIRECT_EVAL);
1652:       assertEquals(30, Node.VAR_ARGS_NAME);
1653:       assertEquals(36, Node.QUOTED_PROP);
1654:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1655:       assertEquals(52, Node.LENGTH);
1656:       assertEquals(8, Node.FLAG_NO_THROWS);
1657:       assertEquals(57, Node.LAST_PROP);
1658:       assertEquals(29, Node.JSDOC_INFO_PROP);
1659:       assertEquals(53, Node.INPUT_ID);
1660:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1661:       assertEquals(39, Node.EMPTY_BLOCK);
1662:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1663:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1664:       assertEquals(56, Node.CHANGE_TIME);
1665:       assertEquals(47, Node.IS_DISPATCHER);
1666:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1667:       assertEquals(37, Node.OPT_ARG_NAME);
1668:       assertEquals(2, Node.POST_FLAG);
1669:       assertEquals(43, Node.IS_CONSTANT_NAME);
1670:       assertEquals(1, Node.DECR_FLAG);
1671:       assertEquals(4095, Node.COLUMN_MASK);
1672:       assertEquals(46, Node.IS_NAMESPACE);
1673:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1674:       assertEquals(12, Node.COLUMN_BITS);
1675:       assertEquals(32, Node.INCRDECR_PROP);
1676:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1677:       assertNotNull(iterable1);
1678:       assertFalse(node0.equals((Object)node2));
1679:       assertFalse(node0.equals((Object)node1));
1680:       assertFalse(iterable1.equals((Object)iterable0));
1681:       assertFalse(iterable1.contains(node1));
1682:       
1683:       Node node3 = Node.newNumber((double) 4095, 32, 16);
1684:       assertFalse(node3.isNull());
1685:       assertFalse(node3.isParamList());
1686:       assertFalse(node3.isName());
1687:       assertFalse(node3.isCall());
1688:       assertFalse(node3.isSetterDef());
1689:       assertFalse(node3.isStringKey());
1690:       assertFalse(node3.isRegExp());
1691:       assertFalse(node3.isWhile());
1692:       assertFalse(node3.isTry());
1693:       assertFalse(node3.isVoid());
1694:       assertFalse(node3.isCatch());
1695:       assertFalse(node3.hasMoreThanOneChild());
1696:       assertFalse(node3.isFor());
1697:       assertFalse(node3.isBlock());
1698:       assertFalse(node3.isReturn());
1699:       assertEquals(39, node3.getType());
1700:       assertFalse(node3.isTypeOf());
1701:       assertFalse(node3.isDec());
1702:       assertFalse(node3.isDelProp());
1703:       assertFalse(node3.isGetterDef());
1704:       assertFalse(node3.isGetElem());
1705:       assertFalse(node3.isLabelName());
1706:       assertFalse(node3.isEmpty());
1707:       assertFalse(node3.isArrayLit());
1708:       assertFalse(node3.isOr());
1709:       assertFalse(node3.isTrue());
1710:       assertFalse(node3.isSwitch());
1711:       assertFalse(node3.isDefaultCase());
1712:       assertFalse(node3.isAdd());
1713:       assertFalse(node3.isNew());
1714:       assertFalse(node3.isDo());
1715:       assertEquals(0, node3.getChildCount());
1716:       assertFalse(node3.isVar());
1717:       assertFalse(node3.isAssignAdd());
1718:       assertFalse(node3.isLabel());
1719:       assertFalse(node3.isComma());
1720:       assertFalse(node3.isGetProp());
1721:       assertFalse(node3.isBreak());
1722:       assertFalse(node3.isObjectLit());
1723:       assertFalse(node3.isAnd());
1724:       assertFalse(node3.isNot());
1725:       assertFalse(node3.isScript());
1726:       assertEquals(131088, node3.getSourcePosition());
1727:       assertFalse(node3.isString());
1728:       assertFalse(node3.isWith());
1729:       assertFalse(node3.isCase());
1730:       assertFalse(node3.isExprResult());
1731:       assertFalse(node3.hasOneChild());
1732:       assertFalse(node3.isInstanceOf());
1733:       assertFalse(node3.isAssign());
1734:       assertFalse(node3.isThis());
1735:       assertFalse(node3.isHook());
1736:       assertFalse(node3.hasChildren());
1737:       assertEquals(16, node3.getCharno());
1738:       assertFalse(node3.isNE());
1739:       assertFalse(node3.isIf());
1740:       assertTrue(node3.isNumber());
1741:       assertEquals(32, node3.getLineno());
1742:       assertFalse(node3.isIn());
1743:       assertFalse(node3.isDebugger());
1744:       assertFalse(node3.isFunction());
1745:       assertFalse(node3.isInc());
1746:       assertFalse(node3.isCast());
1747:       assertFalse(node3.isContinue());
1748:       assertFalse(node3.isFalse());
1749:       assertFalse(node3.isThrow());
1750:       assertEquals(4095, Node.COLUMN_MASK);
1751:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1752:       assertEquals(8, Node.FLAG_NO_THROWS);
1753:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1754:       assertEquals(43, Node.IS_CONSTANT_NAME);
1755:       assertEquals(40, Node.ORIGINALNAME_PROP);
1756:       assertEquals(48, Node.DIRECTIVES);
1757:       assertEquals(52, Node.LENGTH);
1758:       assertEquals(53, Node.INPUT_ID);
1759:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1760:       assertEquals(57, Node.REFLECTED_OBJECT);
1761:       assertEquals(36, Node.QUOTED_PROP);
1762:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1763:       assertEquals(29, Node.JSDOC_INFO_PROP);
1764:       assertEquals(57, Node.LAST_PROP);
1765:       assertEquals(55, Node.INFERRED_FUNCTION);
1766:       assertEquals(39, Node.EMPTY_BLOCK);
1767:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1768:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1769:       assertEquals(32, Node.INCRDECR_PROP);
1770:       assertEquals(46, Node.IS_NAMESPACE);
1771:       assertEquals(2, Node.POST_FLAG);
1772:       assertEquals(12, Node.COLUMN_BITS);
1773:       assertEquals(47, Node.IS_DISPATCHER);
1774:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1775:       assertEquals(30, Node.VAR_ARGS_NAME);
1776:       assertEquals(49, Node.DIRECT_EVAL);
1777:       assertEquals(56, Node.CHANGE_TIME);
1778:       assertEquals(37, Node.OPT_ARG_NAME);
1779:       assertEquals(54, Node.SLASH_V);
1780:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1781:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1782:       assertEquals(50, Node.FREE_CALL);
1783:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1784:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1785:       assertEquals(1, Node.DECR_FLAG);
1786:       assertNotNull(node3);
1787:       assertFalse(node3.equals((Object)node0));
1788:       assertFalse(node3.equals((Object)node1));
1789:       assertFalse(node3.equals((Object)node2));
1790:   }
1791: }
RegularFileObject[/tmp/EvoSuite_117_1628255816949/com/google/javascript/rhino/Node_117_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:57 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_117_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_117_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.common.collect.AbstractMapBasedMultimap$1",
120:       "com.google.common.collect.AbstractMapBasedMultimap$2",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.common.collect.AbstractMultimap$Values",
129:       "com.google.javascript.rhino.jstype.ProxyObjectType",
130:       "com.google.common.collect.Sets$SetView",
131:       "com.google.common.collect.RegularImmutableAsList",
132:       "com.google.javascript.rhino.jstype.TemplateType",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
137:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
138:       "com.google.common.collect.AbstractMapBasedMultimap",
139:       "com.google.common.collect.Lists$Partition",
140:       "com.google.common.collect.Lists",
141:       "com.google.javascript.rhino.Node$SideEffectFlags",
142:       "com.google.common.collect.UnmodifiableListIterator",
143:       "com.google.javascript.rhino.jstype.NullType",
144:       "com.google.common.collect.Lists$TransformingSequentialList",
145:       "com.google.javascript.rhino.ErrorReporter",
146:       "com.google.javascript.rhino.jstype.UnknownType",
147:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
148:       "com.google.javascript.rhino.jstype.ValueType",
149:       "com.google.javascript.rhino.jstype.PropertyMap",
150:       "com.google.javascript.rhino.Token",
151:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
152:       "com.google.common.collect.ObjectArrays",
153:       "com.google.javascript.rhino.jstype.StaticSourceFile",
154:       "com.google.javascript.rhino.jstype.BooleanType",
155:       "com.google.javascript.rhino.jstype.NoObjectType",
156:       "com.google.common.collect.AbstractIterator",
157:       "com.google.javascript.rhino.jstype.FunctionBuilder",
158:       "com.google.javascript.rhino.jstype.JSType$TypePair",
159:       "com.google.common.base.Joiner$MapJoiner",
160:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
161:       "com.google.common.collect.ImmutableList$1",
162:       "com.google.common.collect.MapDifference",
163:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
164:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
165:       "com.google.common.collect.Sets$ImprovedAbstractSet",
166:       "com.google.javascript.rhino.jstype.FunctionType",
167:       "com.google.common.base.Preconditions",
168:       "com.google.common.collect.UnmodifiableIterator",
169:       "com.google.javascript.rhino.JSDocInfo",
170:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
171:       "com.google.javascript.rhino.jstype.Property",
172:       "com.google.common.collect.ImmutableMapValues",
173:       "com.google.common.collect.ImmutableEntry",
174:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMultimap$Entries",
186:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
187:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
188:       "com.google.javascript.rhino.jstype.EnumElementType",
189:       "com.google.javascript.rhino.jstype.UnionType",
190:       "com.google.common.base.Objects",
191:       "com.google.javascript.rhino.Node$NumberNode",
192:       "com.google.common.collect.SingletonImmutableList",
193:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
194:       "com.google.common.collect.ImmutableCollection$Builder",
195:       "com.google.javascript.rhino.jstype.StaticSlot",
196:       "com.google.common.collect.Iterators$6",
197:       "com.google.common.collect.BiMap",
198:       "com.google.common.collect.Iterators$7",
199:       "com.google.common.collect.AbstractSetMultimap",
200:       "com.google.common.base.Function",
201:       "com.google.common.collect.ImmutableSet",
202:       "com.google.common.collect.Lists$AbstractListWrapper",
203:       "com.google.common.collect.ImmutableMap",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.AbstractIndexedListIterator",
206:       "com.google.common.collect.Maps$1",
207:       "com.google.javascript.rhino.jstype.EnumType",
208:       "com.google.common.collect.Iterators$1",
209:       "com.google.common.collect.Iterators$2",
210:       "com.google.javascript.rhino.jstype.NamespaceType",
211:       "com.google.common.collect.Iterators$3",
212:       "com.google.common.collect.Sets",
213:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
214:       "com.google.javascript.rhino.Node$ObjectPropListItem",
215:       "com.google.common.collect.Lists$StringAsImmutableList",
216:       "com.google.common.collect.Lists$2",
217:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
218:       "com.google.common.collect.ImmutableList$Builder",
219:       "com.google.common.collect.Lists$1",
220:       "com.google.javascript.rhino.jstype.StaticReference",
221:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
222:       "com.google.common.collect.Multiset",
223:       "com.google.common.collect.Multimaps$Entries",
224:       "com.google.common.collect.AbstractMultimap",
225:       "com.google.common.collect.Multimap",
226:       "com.google.common.collect.Iterators",
227:       "com.google.common.collect.Maps$ImprovedAbstractMap",
228:       "com.google.common.collect.ImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
230:       "com.google.common.collect.ImmutableList",
231:       "com.google.common.collect.SingletonImmutableBiMap",
232:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
233:       "com.google.javascript.rhino.jstype.StringType",
234:       "com.google.javascript.rhino.Node$AbstractPropListItem",
235:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
236:       "com.google.javascript.rhino.jstype.TemplatizedType",
237:       "com.google.javascript.rhino.jstype.Visitor",
238:       "com.google.javascript.rhino.jstype.NoResolvedType",
239:       "com.google.javascript.rhino.jstype.JSTypeNative",
240:       "com.google.javascript.rhino.jstype.AllType",
241:       "com.google.common.collect.Maps",
242:       "com.google.common.collect.SetMultimap",
243:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
244:       "com.google.common.collect.Maps$EntryTransformer",
245:       "com.google.javascript.rhino.JSTypeExpression",
246:       "com.google.common.collect.Iterators$MergingIterator"
247:     );
248:   } 
249: 
250:   private static void resetClasses() {
251:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_117_tmp__ESTest_scaffolding.class.getClassLoader()); 
252: 
253:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
254:       "com.google.javascript.rhino.Node",
255:       "com.google.javascript.rhino.Node$NumberNode",
256:       "com.google.javascript.rhino.Node$StringNode",
257:       "com.google.javascript.rhino.Node$AbstractPropListItem",
258:       "com.google.javascript.rhino.Node$ObjectPropListItem",
259:       "com.google.javascript.rhino.Node$IntPropListItem",
260:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
261:       "com.google.javascript.rhino.Node$AncestorIterable",
262:       "com.google.javascript.rhino.Node$NodeMismatch",
263:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
264:       "com.google.javascript.rhino.Node$SideEffectFlags",
265:       "com.google.common.base.Preconditions",
266:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
267:       "com.google.javascript.rhino.Token",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Joiner$1",
271:       "com.google.common.collect.Collections2",
272:       "com.google.common.base.Joiner$MapJoiner",
273:       "com.google.common.collect.Maps",
274:       "com.google.common.collect.AbstractMultimap",
275:       "com.google.common.collect.AbstractMapBasedMultimap",
276:       "com.google.common.collect.AbstractSetMultimap",
277:       "com.google.common.collect.LinkedHashMultimap",
278:       "com.google.common.collect.AbstractMapEntry",
279:       "com.google.common.collect.ImmutableEntry",
280:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
281:       "com.google.common.collect.AbstractListMultimap",
282:       "com.google.common.collect.ArrayListMultimap",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
284:       "com.google.common.collect.ImmutableCollection",
285:       "com.google.common.collect.RegularImmutableList",
286:       "com.google.common.collect.ObjectArrays",
287:       "com.google.common.collect.ImmutableList",
288:       "com.google.javascript.rhino.jstype.ModificationVisitor",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
290:       "com.google.common.collect.ImmutableCollection$Builder",
291:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
292:       "com.google.common.collect.ImmutableList$Builder",
293:       "com.google.common.collect.UnmodifiableIterator",
294:       "com.google.common.collect.UnmodifiableListIterator",
295:       "com.google.common.collect.Iterators$1",
296:       "com.google.common.collect.Iterators$2",
297:       "com.google.common.collect.Iterators",
298:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
299:       "com.google.javascript.rhino.jstype.JSType$1",
300:       "com.google.javascript.rhino.jstype.JSType",
301:       "com.google.javascript.rhino.jstype.ObjectType",
302:       "com.google.javascript.rhino.jstype.ProxyObjectType",
303:       "com.google.javascript.rhino.jstype.TemplateType",
304:       "com.google.javascript.rhino.jstype.ValueType",
305:       "com.google.javascript.rhino.jstype.BooleanType",
306:       "com.google.javascript.rhino.jstype.NullType",
307:       "com.google.javascript.rhino.jstype.NumberType",
308:       "com.google.javascript.rhino.jstype.StringType",
309:       "com.google.javascript.rhino.jstype.UnknownType",
310:       "com.google.javascript.rhino.jstype.VoidType",
311:       "com.google.javascript.rhino.jstype.AllType",
312:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
313:       "com.google.common.collect.ImmutableMap",
314:       "com.google.common.collect.ImmutableBiMap",
315:       "com.google.common.collect.EmptyImmutableBiMap",
316:       "com.google.javascript.rhino.jstype.PropertyMap$1",
317:       "com.google.javascript.rhino.jstype.PropertyMap",
318:       "com.google.javascript.rhino.jstype.FunctionType",
319:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
320:       "com.google.javascript.rhino.jstype.ArrowType",
321:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
322:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
323:       "com.google.javascript.rhino.jstype.InstanceObjectType",
324:       "com.google.javascript.rhino.jstype.Property",
325:       "com.google.common.collect.Lists",
326:       "com.google.javascript.rhino.jstype.NoObjectType",
327:       "com.google.javascript.rhino.jstype.NoType",
328:       "com.google.javascript.rhino.jstype.NoResolvedType",
329:       "com.google.common.collect.SingletonImmutableList",
330:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
331:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
332:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
333:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
334:       "com.google.javascript.rhino.jstype.UnionType",
335:       "com.google.javascript.rhino.jstype.FunctionBuilder",
336:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
337:       "com.google.javascript.rhino.jstype.NamedType",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.javascript.rhino.SimpleErrorReporter",
340:       "com.google.common.base.Objects",
341:       "com.google.javascript.rhino.jstype.EnumType",
342:       "com.google.javascript.rhino.jstype.EnumElementType",
343:       "com.google.javascript.rhino.JSDocInfo",
344:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
345:       "com.google.common.collect.Sets",
346:       "com.google.javascript.rhino.Node$AncestorIterable$1",
347:       "com.google.common.collect.AbstractMultimap$Values",
348:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
349:       "com.google.common.collect.AbstractMapBasedMultimap$1",
350:       "com.google.common.collect.Multimaps$Entries",
351:       "com.google.common.collect.AbstractMultimap$Entries",
352:       "com.google.common.collect.AbstractMapBasedMultimap$2",
353:       "com.google.common.collect.Iterables",
354:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
355:       "com.google.common.collect.AbstractIndexedListIterator",
356:       "com.google.common.collect.Iterators$11",
357:       "com.google.javascript.rhino.jstype.TemplatizedType",
358:       "com.google.common.collect.ImmutableSet",
359:       "com.google.common.collect.EmptyImmutableSet",
360:       "com.google.common.collect.Platform",
361:       "com.google.common.collect.Sets$ImprovedAbstractSet",
362:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
363:       "com.google.common.collect.Hashing",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
365:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
366:       "com.google.javascript.rhino.JSTypeExpression",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
369:     );
370:   }
371: }

[MASTER] 13:16:57.493 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

node_SideEffectFlags0.clearSideEffectFlags();
assertEquals(15, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node node0 = Node.newString(365, "4");
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertEquals(365, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isIf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node0);

Node node1 = new Node(9, 31, 12);
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals(31, node1.getLineno());
assertEquals(126988, node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(12, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertEquals(9, node1.getType());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));

node0.setWasEmptyNode(true);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertEquals(365, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isIf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node1));

node1.setType(98);
assertTrue(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCast());
assertEquals(98, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals(31, node1.getLineno());
assertEquals(126988, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(12, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));

LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertNotNull(linkedHashSet0);
assertFalse(linkedHashSet0.contains("4"));

node1.setDirectives(linkedHashSet0);
assertTrue(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCast());
assertEquals(98, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals(31, node1.getLineno());
assertEquals(126988, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(12, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));
assertFalse(linkedHashSet0.contains("4"));

boolean boolean0 = node1.isRegExp();
assertTrue(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCast());
assertEquals(98, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals(31, node1.getLineno());
assertEquals(126988, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(12, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertFalse(boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node1.equals((Object)node0));

Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags(56);
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(56, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.clearAllFlags();
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setThrows();
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags0.valueOf());
assertEquals(23, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags3.equals((Object)node_SideEffectFlags1));
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags2.setMutatesGlobalState();
assertEquals(16, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(16, node_SideEffectFlags4.valueOf());
assertNotNull(node_SideEffectFlags4);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags1));
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags5 = new Node.SideEffectFlags((-1118));
assertEquals((-1118), node_SideEffectFlags5.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertNotNull(node_SideEffectFlags5);
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags0));

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags5.setMutatesThis();
assertEquals((-1120), node_SideEffectFlags5.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertEquals((-1120), node_SideEffectFlags6.valueOf());
assertNotNull(node_SideEffectFlags6);
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags5.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags6.equals((Object)node_SideEffectFlags3));
assertNotSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags6, node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags4.setReturnsTainted();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertNotNull(node_SideEffectFlags7);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags4.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags1));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags7.equals((Object)node_SideEffectFlags6));
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags4, node_SideEffectFlags7);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags4, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags4, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags7, node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags1.setMutatesArguments();
assertFalse(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(56, node_SideEffectFlags8.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(56, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags8);
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags4));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags7));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags8.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags3));
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags2));
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags7));
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags4));
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags4);

boolean boolean1 = node_SideEffectFlags0.areAllFlagsSet();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(boolean1);
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags8));
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags6));
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags5));
assertFalse(node_SideEffectFlags0.equals((Object)node_SideEffectFlags1));
assertFalse(boolean1 == boolean0);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertNotSame(node_SideEffectFlags0, node_SideEffectFlags1);

boolean boolean2 = node1.isHook();
assertTrue(node1.isHook());
assertFalse(node1.isStringKey());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isNumber());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.hasOneChild());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isCast());
assertEquals(98, node1.getType());
assertFalse(node1.isContinue());
assertFalse(node1.isWith());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertEquals(31, node1.getLineno());
assertEquals(126988, node1.getSourcePosition());
assertFalse(node1.isThis());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertEquals(12, node1.getCharno());
assertFalse(node1.isNot());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isAnd());
assertFalse(node1.isSwitch());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isEmpty());
assertFalse(node1.hasChildren());
assertFalse(node1.isGetElem());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isDo());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isTrue());
assertTrue(boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(node1.equals((Object)node0));

Node node2 = new Node(50, node0, (-367), 2);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertEquals(365, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isIf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertEquals(50, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertTrue(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCast());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertNotNull(node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

Iterable<Node> iterable0 = node2.children();
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertEquals(365, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isIf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertEquals(50, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isInc());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isHook());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.isWith());
assertTrue(node2.hasChildren());
assertFalse(node2.isExprResult());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isEmpty());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isTry());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isLabel());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isSetterDef());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isCast());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotSame(node2, node1);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) null);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

TemplateType templateType0 = jSTypeRegistry0.createTemplateType("Tr[CAR");
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isTemplatizedType());
assertEquals("Tr[CAR", templateType0.getReferenceName());
assertFalse(templateType0.isEnumElementType());
assertFalse(templateType0.isEnumType());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.isBooleanValueType());
assertFalse(templateType0.isRecordType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isUnionType());
assertFalse(templateType0.isStringValueType());
assertFalse(templateType0.isFunctionType());
assertTrue(templateType0.isObject());
assertFalse(templateType0.isResolved());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.isNominalConstructor());
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertNotNull(templateType0);

node0.putProp(31, templateType0);
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertEquals(365, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isIf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertFalse(templateType0.isFunctionPrototypeType());
assertFalse(templateType0.isTemplatizedType());
assertEquals("Tr[CAR", templateType0.getReferenceName());
assertFalse(templateType0.isEnumElementType());
assertFalse(templateType0.isEnumType());
assertTrue(templateType0.hasAnyTemplateTypesInternal());
assertFalse(templateType0.isBooleanValueType());
assertFalse(templateType0.isRecordType());
assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
assertFalse(templateType0.hasCachedValues());
assertFalse(templateType0.isNumberValueType());
assertFalse(templateType0.isUnionType());
assertFalse(templateType0.isStringValueType());
assertFalse(templateType0.isFunctionType());
assertTrue(templateType0.isObject());
assertFalse(templateType0.isResolved());
assertTrue(templateType0.isTemplateType());
assertFalse(templateType0.isNullType());
assertFalse(templateType0.isVoidType());
assertFalse(templateType0.isNominalConstructor());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, JSType.ENUMDECL);
assertEquals(0, JSType.NOT_ENUMDECL);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));

Iterable<Node> iterable1 = node0.children();
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertEquals(365, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isDec());
assertFalse(node0.isRegExp());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isNot());
assertFalse(node0.isIf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isEmpty());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVar());
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(iterable1);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable1.equals((Object)iterable0));
assertFalse(iterable1.contains(node1));

Node node3 = Node.newNumber((double) 4095, 32, 16);
assertFalse(node3.isNull());
assertFalse(node3.isParamList());
assertFalse(node3.isName());
assertFalse(node3.isCall());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isRegExp());
assertFalse(node3.isWhile());
assertFalse(node3.isTry());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isFor());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertEquals(39, node3.getType());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertFalse(node3.isGetElem());
assertFalse(node3.isLabelName());
assertFalse(node3.isEmpty());
assertFalse(node3.isArrayLit());
assertFalse(node3.isOr());
assertFalse(node3.isTrue());
assertFalse(node3.isSwitch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isDo());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isVar());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isComma());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertEquals(131088, node3.getSourcePosition());
assertFalse(node3.isString());
assertFalse(node3.isWith());
assertFalse(node3.isCase());
assertFalse(node3.isExprResult());
assertFalse(node3.hasOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isAssign());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.hasChildren());
assertEquals(16, node3.getCharno());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.isNumber());
assertEquals(32, node3.getLineno());
assertFalse(node3.isIn());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isInc());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node3);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));


[MASTER] 13:17:30.339 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:30.733 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:31.095 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:31.378 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:31.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:33.425 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:33.807 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:34.160 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:17:34.433 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/15
* Done!

* Computation finished
