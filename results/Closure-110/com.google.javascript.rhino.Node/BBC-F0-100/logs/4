* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 19610
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3738640855
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 12:59:39.519 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 12:59:41.028 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 12:59:41.028 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
[MASTER] 12:59:42.699 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false
[MASTER] 12:59:42.702 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true
[MASTER] 12:59:47.506 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true
[MASTER] 12:59:47.527 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 7165: com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z:177 - ReplaceComparisonOperator != -> -1
[MASTER] 13:00:05.547 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 125,0,0| Number of FF evals: 660
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 43,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 3434,166,0| Number of FF evals: 3523
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 2050,0,0| Number of FF evals: 1140
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 50,0,0| Number of FF evals: 635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 825,215,0| Number of FF evals: 4079
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 62,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 406,0,0| Number of FF evals: 269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 2258,1952,14| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 2833,2670,31| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 2,0,0| Number of FF evals: 886
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 10864,8747,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 2632,0,0| Number of FF evals: 1189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 3866,3034,0| Number of FF evals: 11428
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 4722,0,0| Number of FF evals: 1609
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 7401,6384,0| Number of FF evals: 14608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 7604,6488,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 305,0,0| Number of FF evals: 1081
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 43,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 759,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 20798,14282,0| Number of FF evals: 16199
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 75,0,0| Number of FF evals: 817
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 759,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 15758,13594,0| Number of FF evals: 17357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 759,0,0| Number of FF evals: 455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2661,2352,376| Number of FF evals: 14803
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 1007,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 279,0,0| Number of FF evals: 930
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 1412,622,8| Number of FF evals: 4642
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 12273,10879,18| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2499,2194,3| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 1782,560,383| Number of FF evals: 3273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 32,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 1006,722,0| Number of FF evals: 9188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 211,0,0| Number of FF evals: 463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 1518,1267,240| Number of FF evals: 9975
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 635,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 2270,0,0| Number of FF evals: 1566
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 98,0,0| Number of FF evals: 334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: Line 1323: 43,0,0| Number of FF evals: 55
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1743,0,0| Number of FF evals: 1175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 16251,13604,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 1476,201,0| Number of FF evals: 3837
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 871,802,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 12232,10707,107| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 43,0,0| Number of FF evals: 601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 86,0,0| Number of FF evals: 254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 129,0,0| Number of FF evals: 2297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 332,241,57| Number of FF evals: 5990
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: root-Branch: 43,0,0| Number of FF evals: 311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1177,875,16| Number of FF evals: 15116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 43,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 11046,10291,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 7056,6477,0| Number of FF evals: 13874
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 2916,2519,1280| Number of FF evals: 10128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 126,0,0| Number of FF evals: 622
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 5,0,0| Number of FF evals: 606
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 125,0,0| Number of FF evals: 120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 125,0,0| Number of FF evals: 120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 176,0,0| Number of FF evals: 855
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 125,0,0| Number of FF evals: 120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 1186,0,0| Number of FF evals: 1133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 47,0,0| Number of FF evals: 185
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 4040,0,0| Number of FF evals: 1301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 43,0,0| Number of FF evals: 785
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 25000,21970,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - true: 345,0,0| Number of FF evals: 1514
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 8667,6550,0| Number of FF evals: 13232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 6391,220,0| Number of FF evals: 2494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 1425,0,0| Number of FF evals: 532
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 406,0,0| Number of FF evals: 452
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 1425,0,0| Number of FF evals: 532
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 3885,1672,0| Number of FF evals: 5690
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 1425,0,0| Number of FF evals: 532
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 121,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 121,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 1007,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 121,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 1544,0,0| Number of FF evals: 1074
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 211,0,0| Number of FF evals: 847
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 35,0,0| Number of FF evals: 511
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 1544,0,0| Number of FF evals: 1074
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 7799,5885,0| Number of FF evals: 12779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1544,0,0| Number of FF evals: 1074
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 5398,4562,20| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 406,0,0| Number of FF evals: 747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 6188,5820,668| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 43,0,0| Number of FF evals: 632
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 10850,6607,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 2,0,0| Number of FF evals: 289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 10495,8643,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 71852,62600,50624| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 44528,35276,0| Number of FF evals: 10254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 37,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 71852,62600,50621| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 179,0,0| Number of FF evals: 894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 3863,0,0| Number of FF evals: 1166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 184,0,0| Number of FF evals: 920
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1168,409,0| Number of FF evals: 3587
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 392,0,0| Number of FF evals: 729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 176,0,0| Number of FF evals: 830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 43,0,0| Number of FF evals: 811
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 3538,3167,0| Number of FF evals: 4767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 43,0,0| Number of FF evals: 875
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 1181,0,0| Number of FF evals: 1629
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 885,0,0| Number of FF evals: 683
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 211,0,0| Number of FF evals: 655
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 1135,0,0| Number of FF evals: 461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 105,0,0| Number of FF evals: 509
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestors()Lcom/google/javascript/rhino/Node$AncestorIterable;: Line 1344: 43,0,0| Number of FF evals: 55
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 716,0,0| Number of FF evals: 1313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 7207,5386,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 3767,2462,0| Number of FF evals: 8400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 43,0,0| Number of FF evals: 310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 4901,0,0| Number of FF evals: 1355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 43,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 406,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 5,0,0| Number of FF evals: 348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 5782,0,0| Number of FF evals: 2187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 2050,0,0| Number of FF evals: 670
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 7260,4589,0| Number of FF evals: 5848
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1155,798,7| Number of FF evals: 13255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 4040,0,0| Number of FF evals: 1170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 43,0,0| Number of FF evals: 879
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 33,0,0| Number of FF evals: 888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2606,2304,321| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 43,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 2,0,0| Number of FF evals: 695
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 4580,4286,1207| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 3647,3039,264| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 43,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 7393,5392,0| Number of FF evals: 6942
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 94,0,0| Number of FF evals: 334
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 7848,6983,416| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 125,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 71852,62600,0| Number of FF evals: 17390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 28,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 43,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 125,0,0| Number of FF evals: 210
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 3018,0,0| Number of FF evals: 1535
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 4040,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 35606,31678,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 125,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 2294,1989,3| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 1544,0,0| Number of FF evals: 1146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 24630,18153,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 1276,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 12873,9995,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 12873,9995,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 406,0,0| Number of FF evals: 197
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 43,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 1007,0,0| Number of FF evals: 749
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1543,0,0| Number of FF evals: 1204
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 3448,2076,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 2464,0,0| Number of FF evals: 1404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 4039,3390,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 3395,0,0| Number of FF evals: 1749
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1544,0,0| Number of FF evals: 1198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 43,0,0| Number of FF evals: 371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 3522,0,0| Number of FF evals: 1056
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 1544,0,0| Number of FF evals: 1146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 43,0,0| Number of FF evals: 294
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 125,0,0| Number of FF evals: 697
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 125,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 71852,62600,50623| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 1831,106,0| Number of FF evals: 2466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 15639,13373,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 3522,0,0| Number of FF evals: 1080
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 6459,6009,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 43,0,0| Number of FF evals: 352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 1831,106,0| Number of FF evals: 2466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 19,0,0| Number of FF evals: 68
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 527,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2893,2341,0| Number of FF evals: 14510
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 406,0,0| Number of FF evals: 228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 406,0,0| Number of FF evals: 228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 308,6,0| Number of FF evals: 2568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 36029,33179,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 759,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 114,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 156,0,0| Number of FF evals: 529
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 406,0,0| Number of FF evals: 487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 242,0,0| Number of FF evals: 543
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 759,0,0| Number of FF evals: 482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 3348,0,0| Number of FF evals: 982
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 43,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 12251,10861,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 2050,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 1276,0,0| Number of FF evals: 482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 9522,8743,0| Number of FF evals: 6971
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 2549,1380,0| Number of FF evals: 4671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 5080,0,0| Number of FF evals: 1418
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 5496,3952,0| Number of FF evals: 6597
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 5080,0,0| Number of FF evals: 1418
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 598,0,0| Number of FF evals: 2009
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 43,0,0| Number of FF evals: 858
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 759,0,0| Number of FF evals: 463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 635,0,0| Number of FF evals: 643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 3075,373,0| Number of FF evals: 2793
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 43,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 3053,2748,101| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 305,0,0| Number of FF evals: 379
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 2328,1999,41| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 43,0,0| Number of FF evals: 866
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 1114,0,0| Number of FF evals: 2083
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 43,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 26,0,0| Number of FF evals: 148
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 753,432,70| Number of FF evals: 8597
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 579,129,0| Number of FF evals: 3763
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 7921,7327,0| Number of FF evals: 14718
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 25,0,0| Number of FF evals: 1276
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 406,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 68,0,0| Number of FF evals: 1634
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 24546,20758,0| Number of FF evals: 9107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 71852,62600,0| Number of FF evals: 17390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 43,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 4292,3572,0| Number of FF evals: 17273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 16394,13937,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 4315,2523,0| Number of FF evals: 15710
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 24489,19419,0| Number of FF evals: 13926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 885,0,0| Number of FF evals: 381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 4292,3572,0| Number of FF evals: 17273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 885,0,0| Number of FF evals: 381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: Line 2166: 406,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 71852,62600,0| Number of FF evals: 17390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3647,3039,264| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 406,0,0| Number of FF evals: 589
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 496,0,0| Number of FF evals: 1465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 1631,876,0| Number of FF evals: 4671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 6226,4327,0| Number of FF evals: 7647
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 3647,3039,264| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 44,0,0| Number of FF evals: 221
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 45,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 24379,15127,0| Number of FF evals: 5648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 2552,1228,0| Number of FF evals: 5501
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 125,0,0| Number of FF evals: 271
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 161,0,0| Number of FF evals: 1325
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 759,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 43,0,0| Number of FF evals: 219
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 43,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 7358,0,0| Number of FF evals: 1907
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3031,2213,0| Number of FF evals: 17394
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3691,3303,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 43,0,0| Number of FF evals: 858
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 881,91,0| Number of FF evals: 2625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 881,91,0| Number of FF evals: 2625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 43503,34251,0| Number of FF evals: 10009
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 881,91,0| Number of FF evals: 2625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 407,0,0| Number of FF evals: 901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 881,91,0| Number of FF evals: 2625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 12584,11242,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 43,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1373,1068,290| Number of FF evals: 13959
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 4901,0,0| Number of FF evals: 1426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 68,0,0| Number of FF evals: 1638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2270,1969,9| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 5913,502,0| Number of FF evals: 3954
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 112,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 10,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 406,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 406,0,0| Number of FF evals: 213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 9754,8338,0| Number of FF evals: 17395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 17442,16409,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 577,163,0| Number of FF evals: 3668
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 3614,2289,0| Number of FF evals: 4766
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 43,0,0| Number of FF evals: 876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 299,0,0| Number of FF evals: 288
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 635,0,0| Number of FF evals: 378
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 125,0,0| Number of FF evals: 196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 663,0,0| Number of FF evals: 2073
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 389,85,31| Number of FF evals: 3877
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 4058,3350,0| Number of FF evals: 16869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1386,0,0| Number of FF evals: 598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 43,0,0| Number of FF evals: 853
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 14,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 14007,10046,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 2718,0,0| Number of FF evals: 2014
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 10993,6743,0| Number of FF evals: 11070
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 175,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 2,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 5,0,0| Number of FF evals: 607
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 2050,0,0| Number of FF evals: 1040
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 43,0,0| Number of FF evals: 869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 2140,1758,0| Number of FF evals: 8756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 406,0,0| Number of FF evals: 199
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 3348,0,0| Number of FF evals: 1475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 211,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 11938,3733,0| Number of FF evals: 4458
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 9712,8324,0| Number of FF evals: 17395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 1116,0,0| Number of FF evals: 2086
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 125,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 40,0,0| Number of FF evals: 401
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 161,0,0| Number of FF evals: 683
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 12104,10600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 7358,0,0| Number of FF evals: 1945
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 4175,3645,372| Number of FF evals: 17175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 3649,1465,0| Number of FF evals: 7389
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 9835,8302,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 579,129,0| Number of FF evals: 3763
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 885,0,0| Number of FF evals: 379
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 366,0,0| Number of FF evals: 643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 12157,9900,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 2614,1704,0| Number of FF evals: 8159
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 43,0,0| Number of FF evals: 552
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 1135,0,0| Number of FF evals: 422
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 4,0,0| Number of FF evals: 527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 71852,62600,50624| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 600,0,0| Number of FF evals: 533
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 3319,441,0| Number of FF evals: 2835
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 5080,0,0| Number of FF evals: 1617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 12389,10964,103| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 408,0,0| Number of FF evals: 662
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 120,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 3423,3119,419| Number of FF evals: 16849
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 14265,12231,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 599,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2586,2282,376| Number of FF evals: 14254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 305,0,0| Number of FF evals: 164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 1950,0,0| Number of FF evals: 1789
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 27,0,0| Number of FF evals: 384
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 43,0,0| Number of FF evals: 819
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 1007,0,0| Number of FF evals: 507
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 12873,9995,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 43,0,0| Number of FF evals: 862
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 12873,9995,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 8,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 12873,9995,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 434,120,0| Number of FF evals: 3521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 580,259,60| Number of FF evals: 6061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 12873,9995,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 6205,5024,0| Number of FF evals: 6824
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 12873,9995,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 12873,9995,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 2,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 133,0,0| Number of FF evals: 570
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 406,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 125,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 8043,7176,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 8043,7176,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 75,0,0| Number of FF evals: 816
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 125,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 17188,15240,22| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 1571,0,0| Number of FF evals: 1245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 885,0,0| Number of FF evals: 574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 3319,441,0| Number of FF evals: 2919
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 12565,9687,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 43503,34251,0| Number of FF evals: 10006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 2011,0,0| Number of FF evals: 1442
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 43,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 1630,32,0| Number of FF evals: 2605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 43,0,0| Number of FF evals: 880
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 2957,2779,38| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 25,0,0| Number of FF evals: 981
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 175,0,0| Number of FF evals: 204
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 694,401,37| Number of FF evals: 7414
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2957,2779,38| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 20625,17886,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 759,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 125,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 759,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 1571,0,0| Number of FF evals: 564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 11,0,0| Number of FF evals: 177
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 125,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 125,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 16443,7191,0| Number of FF evals: 3937
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 125,0,0| Number of FF evals: 107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 233,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 43,0,0| Number of FF evals: 199
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 1135,0,0| Number of FF evals: 902
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 3863,0,0| Number of FF evals: 1190
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 54,0,0| Number of FF evals: 413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 4408,3687,0| Number of FF evals: 17273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 4105,0,0| Number of FF evals: 1520
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 75,0,0| Number of FF evals: 573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 6360,5149,27| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2881,2160,0| Number of FF evals: 11208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 299,0,0| Number of FF evals: 274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 14996,12572,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 299,0,0| Number of FF evals: 274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 125,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 43,0,0| Number of FF evals: 659
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 3303,441,0| Number of FF evals: 2919
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 3748,61,0| Number of FF evals: 2624
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 125,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 663,0,0| Number of FF evals: 2073
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 12313,10905,44| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 4,0,0| Number of FF evals: 527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 1135,0,0| Number of FF evals: 530
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 18105,15323,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 517,0,0| Number of FF evals: 1062
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 3522,0,0| Number of FF evals: 1040
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 125,0,0| Number of FF evals: 90
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 18,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2026,1996,374| Number of FF evals: 15941
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 4292,3572,0| Number of FF evals: 17273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 505,0,0| Number of FF evals: 742
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 24693,18907,0| Number of FF evals: 16956
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 10707,8393,0| Number of FF evals: 8316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 162,0,0| Number of FF evals: 354
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 2050,0,0| Number of FF evals: 1044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 11657,9403,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 11657,9403,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1060,739,52| Number of FF evals: 12727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 3580,3276,429| Number of FF evals: 16849
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 14944,14530,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 43,0,0| Number of FF evals: 881
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getParent()Lcom/google/javascript/rhino/Node;: root-Branch: 43,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 406,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 12142,10631,31| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 1571,0,0| Number of FF evals: 564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 1571,0,0| Number of FF evals: 564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 1571,0,0| Number of FF evals: 564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 1571,0,0| Number of FF evals: 564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 2885,2720,48| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 13140,10677,0| Number of FF evals: 9783
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 2194,1091,0| Number of FF evals: 5963
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 44,0,0| Number of FF evals: 223
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 406,0,0| Number of FF evals: 792
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 6970,6614,0| Number of FF evals: 13991
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 99,0,0| Number of FF evals: 504
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 5151,2795,0| Number of FF evals: 6039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 1145,90,0| Number of FF evals: 2726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 43,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 43,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 43,0,0| Number of FF evals: 875
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 35,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 436,0,0| Number of FF evals: 1220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 334,28,0| Number of FF evals: 3345
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 3522,0,0| Number of FF evals: 1509
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 5,0,0| Number of FF evals: 291
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 759,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 11113,10358,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 223,0,0| Number of FF evals: 1561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 43,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 3459,3265,531| Number of FF evals: 17244
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 43,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 759,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 305,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 759,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 759,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 2024,1269,0| Number of FF evals: 5523
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 759,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 356,54,0| Number of FF evals: 3538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 759,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 43,0,0| Number of FF evals: 874
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 2,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 11657,9403,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 16443,7191,0| Number of FF evals: 3932
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 881,500,40| Number of FF evals: 8266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 11657,9403,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 43,0,0| Number of FF evals: 881
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 11657,9403,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 11657,9403,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 850,0,0| Number of FF evals: 2076
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 473,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 9268,7014,0| Number of FF evals: 13232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 11657,9403,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 14,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 11657,9403,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 9268,7014,0| Number of FF evals: 13232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 9268,7014,0| Number of FF evals: 13232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 43,0,0| Number of FF evals: 852
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 23388,20655,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 211,0,0| Number of FF evals: 157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 70,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 8794,7320,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 8794,7320,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 11142,9724,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 71852,62600,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 11341,9821,97| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 43,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - false: 406,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 14805,12563,8| Number of FF evals: 7884
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 21349,16338,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 14465,13140,431| Number of FF evals: 17302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1571,0,0| Number of FF evals: 559
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 43,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 2536,0,0| Number of FF evals: 1229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 5292,3738,1244| Number of FF evals: 12556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 44528,35276,0| Number of FF evals: 10254
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 1834,280,113| Number of FF evals: 2946
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: Line 889: 2050,0,0| Number of FF evals: 671
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 14013,12076,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 13989,13535,0| Number of FF evals: 11939
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 211,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 1130,324,0| Number of FF evals: 3108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 1425,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 577,163,0| Number of FF evals: 3670
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 3048,2258,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 4046,0,0| Number of FF evals: 2217
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 1860,35,0| Number of FF evals: 2427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 635,0,0| Number of FF evals: 293
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 125,0,0| Number of FF evals: 629
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 2550,1752,392| Number of FF evals: 10014
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 2536,0,0| Number of FF evals: 831
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 11897,8551,0| Number of FF evals: 9255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 1156,0,0| Number of FF evals: 1256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2509,2262,97| Number of FF evals: 14803
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 3863,0,0| Number of FF evals: 1131
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 1552,0,0| Number of FF evals: 1749
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 97,0,0| Number of FF evals: 536
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 13474,11089,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1571,0,0| Number of FF evals: 649
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 406,0,0| Number of FF evals: 522
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 418,0,0| Number of FF evals: 1700
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 12795,8007,0| Number of FF evals: 8588
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 406,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 2237,1106,0| Number of FF evals: 6239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 881,91,0| Number of FF evals: 2689
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 43,0,0| Number of FF evals: 74
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 2134,1493,0| Number of FF evals: 10395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 2194,1063,0| Number of FF evals: 5893
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 27288,24438,2| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 406,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 3800,543,0| Number of FF evals: 2498
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 1834,280,113| Number of FF evals: 2947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 5583,3496,0| Number of FF evals: 12298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 43,0,0| Number of FF evals: 836
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 197,0,0| Number of FF evals: 1193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 320,18,0| Number of FF evals: 2891
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 6209,5006,0| Number of FF evals: 6824
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 24379,15127,0| Number of FF evals: 5649
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 43,0,0| Number of FF evals: 827
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 4040,0,0| Number of FF evals: 1160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 43,0,0| Number of FF evals: 856
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 4040,0,0| Number of FF evals: 1160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 41,0,0| Number of FF evals: 136
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 4040,0,0| Number of FF evals: 1160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 4040,0,0| Number of FF evals: 1160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 4040,0,0| Number of FF evals: 1160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 15605,9968,0| Number of FF evals: 13151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 43,0,0| Number of FF evals: 241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 456,151,0| Number of FF evals: 5354
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 43,0,0| Number of FF evals: 859
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 71852,62600,0| Number of FF evals: 17390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1149,843,14| Number of FF evals: 14236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 43,0,0| Number of FF evals: 881
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 1571,0,0| Number of FF evals: 1131
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 9107,7904,0| Number of FF evals: 8170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 4,0,0| Number of FF evals: 172
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 879,90,0| Number of FF evals: 2689
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 71852,62600,50625| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 5058,4264,0| Number of FF evals: 17397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 98,0,0| Number of FF evals: 354
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 3863,0,0| Number of FF evals: 1129
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 4722,0,0| Number of FF evals: 1347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 43,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 43,0,0| Number of FF evals: 304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 7021,5766,0| Number of FF evals: 17392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 289,0,0| Number of FF evals: 980
* Search finished after 605s and 408 generations, 203298 statements, best individual has fitness: 3038.0
* Minimizing test suite
[MASTER] 13:11:05.494 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 794
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 87%
* Total number of goals: 714
* Number of covered goals: 618
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 88%
* Total number of goals: 530
* Number of covered goals: 465
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 4536
* Number of covered goals: 2025
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 714
* Number of covered goals: 576
* Generated 692 tests with total length 10738
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:12:11.876 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6755666666666666% of time used, but only 26/692 tests minimized), falling back to using all assertions
[MASTER] 13:12:31.520 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 10%
* Compiling and checking tests
[MASTER] 13:12:43.670 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 12 seconds more than allowed.
[MASTER] 13:13:04.767 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_94_1628255584666/com/google/javascript/rhino/Node_94_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_94_1628255584666/com/google/javascript/rhino/Node_94_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:04.768 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:04.768 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:04.774 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 13:13:04.776 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_94_1628255584666/com/google/javascript/rhino/Node_94_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:04 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_94_tmp__ESTest extends Node_94_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("uv]46a9:im@r", (-5430), (-5430));
21:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
22:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
23:       assertEquals(39, Node.EMPTY_BLOCK);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(50, Node.FREE_CALL);
26:       assertEquals(8, Node.FLAG_NO_THROWS);
27:       assertEquals(4095, Node.COLUMN_MASK);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(48, Node.DIRECTIVES);
31:       assertEquals(43, Node.IS_CONSTANT_NAME);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(32, Node.INCRDECR_PROP);
36:       assertEquals(1, Node.DECR_FLAG);
37:       assertEquals(2, Node.POST_FLAG);
38:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
39:       assertEquals(37, Node.OPT_ARG_NAME);
40:       assertEquals(56, Node.CHANGE_TIME);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
44:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
45:       assertEquals(51, Node.STATIC_SOURCE_FILE);
46:       assertEquals(46, Node.IS_NAMESPACE);
47:       assertEquals(49, Node.DIRECT_EVAL);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(36, Node.QUOTED_PROP);
50:       assertEquals(15, Node.NO_SIDE_EFFECTS);
51:       assertEquals(53, Node.INPUT_ID);
52:       assertEquals(30, Node.VAR_ARGS_NAME);
53:       assertEquals(52, Node.LENGTH);
54:       assertEquals(55, Node.INFERRED_FUNCTION);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(57, Node.LAST_PROP);
57:       assertFalse(node0.hasOneChild());
58:       assertFalse(node0.isExprResult());
59:       assertFalse(node0.isGetElem());
60:       assertFalse(node0.isScript());
61:       assertFalse(node0.isCast());
62:       assertFalse(node0.isWith());
63:       assertFalse(node0.hasChildren());
64:       assertFalse(node0.isDec());
65:       assertFalse(node0.isTypeOf());
66:       assertFalse(node0.isAssign());
67:       assertEquals((-1), node0.getLineno());
68:       assertFalse(node0.isReturn());
69:       assertFalse(node0.isAssignAdd());
70:       assertFalse(node0.isOr());
71:       assertFalse(node0.hasMoreThanOneChild());
72:       assertFalse(node0.isInstanceOf());
73:       assertFalse(node0.isBreak());
74:       assertTrue(node0.isString());
75:       assertFalse(node0.isNew());
76:       assertFalse(node0.isAdd());
77:       assertFalse(node0.isCase());
78:       assertFalse(node0.isDo());
79:       assertFalse(node0.isThis());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.isHook());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isLabel());
84:       assertEquals(0, node0.getChildCount());
85:       assertFalse(node0.isNumber());
86:       assertFalse(node0.isLabelName());
87:       assertFalse(node0.isGetterDef());
88:       assertFalse(node0.isSwitch());
89:       assertFalse(node0.isParamList());
90:       assertEquals((-1), node0.getCharno());
91:       assertFalse(node0.isStringKey());
92:       assertFalse(node0.isVoid());
93:       assertFalse(node0.isTry());
94:       assertFalse(node0.isFunction());
95:       assertFalse(node0.isArrayLit());
96:       assertFalse(node0.isEmpty());
97:       assertFalse(node0.isDefaultCase());
98:       assertFalse(node0.isRegExp());
99:       assertEquals(40, node0.getType());
100:       assertFalse(node0.isFor());
101:       assertFalse(node0.isIn());
102:       assertFalse(node0.isSetterDef());
103:       assertFalse(node0.isCatch());
104:       assertFalse(node0.isIf());
105:       assertFalse(node0.isName());
106:       assertFalse(node0.isDelProp());
107:       assertFalse(node0.isTrue());
108:       assertFalse(node0.isNull());
109:       assertFalse(node0.isNE());
110:       assertFalse(node0.isInc());
111:       assertFalse(node0.isCall());
112:       assertFalse(node0.isWhile());
113:       assertFalse(node0.isFalse());
114:       assertFalse(node0.isComma());
115:       assertFalse(node0.isThrow());
116:       assertFalse(node0.isGetProp());
117:       assertFalse(node0.isContinue());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.isObjectLit());
120:       assertFalse(node0.isNot());
121:       assertFalse(node0.isAnd());
122:       assertFalse(node0.isDebugger());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
129:       assertEquals(39, Node.EMPTY_BLOCK);
130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
131:       assertEquals(50, Node.FREE_CALL);
132:       assertEquals(8, Node.FLAG_NO_THROWS);
133:       assertEquals(4095, Node.COLUMN_MASK);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(57, Node.REFLECTED_OBJECT);
136:       assertEquals(48, Node.DIRECTIVES);
137:       assertEquals(43, Node.IS_CONSTANT_NAME);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(32, Node.INCRDECR_PROP);
142:       assertEquals(1, Node.DECR_FLAG);
143:       assertEquals(2, Node.POST_FLAG);
144:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
145:       assertEquals(37, Node.OPT_ARG_NAME);
146:       assertEquals(56, Node.CHANGE_TIME);
147:       assertEquals(47, Node.IS_DISPATCHER);
148:       assertEquals(29, Node.JSDOC_INFO_PROP);
149:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
150:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
151:       assertEquals(51, Node.STATIC_SOURCE_FILE);
152:       assertEquals(46, Node.IS_NAMESPACE);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(53, Node.INPUT_ID);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(52, Node.LENGTH);
160:       assertEquals(55, Node.INFERRED_FUNCTION);
161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
162:       assertEquals(57, Node.LAST_PROP);
163:       assertFalse(node0.hasOneChild());
164:       assertFalse(node0.isExprResult());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.isScript());
167:       assertFalse(node0.isCast());
168:       assertFalse(node0.isWith());
169:       assertFalse(node0.hasChildren());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.isTypeOf());
172:       assertFalse(node0.isAssign());
173:       assertEquals((-1), node0.getLineno());
174:       assertFalse(node0.isReturn());
175:       assertFalse(node0.isAssignAdd());
176:       assertFalse(node0.isOr());
177:       assertFalse(node0.hasMoreThanOneChild());
178:       assertFalse(node0.isInstanceOf());
179:       assertFalse(node0.isBreak());
180:       assertTrue(node0.isString());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isAdd());
183:       assertFalse(node0.isCase());
184:       assertFalse(node0.isDo());
185:       assertFalse(node0.isThis());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isHook());
188:       assertFalse(node0.isVar());
189:       assertFalse(node0.isLabel());
190:       assertEquals(0, node0.getChildCount());
191:       assertFalse(node0.isNumber());
192:       assertFalse(node0.isLabelName());
193:       assertFalse(node0.isGetterDef());
194:       assertFalse(node0.isSwitch());
195:       assertFalse(node0.isParamList());
196:       assertEquals((-1), node0.getCharno());
197:       assertFalse(node0.isStringKey());
198:       assertFalse(node0.isVoid());
199:       assertFalse(node0.isTry());
200:       assertFalse(node0.isFunction());
201:       assertFalse(node0.isArrayLit());
202:       assertFalse(node0.isEmpty());
203:       assertFalse(node0.isDefaultCase());
204:       assertFalse(node0.isRegExp());
205:       assertEquals(40, node0.getType());
206:       assertFalse(node0.isFor());
207:       assertFalse(node0.isIn());
208:       assertFalse(node0.isSetterDef());
209:       assertFalse(node0.isCatch());
210:       assertFalse(node0.isIf());
211:       assertFalse(node0.isName());
212:       assertFalse(node0.isDelProp());
213:       assertFalse(node0.isTrue());
214:       assertFalse(node0.isNull());
215:       assertFalse(node0.isNE());
216:       assertFalse(node0.isInc());
217:       assertFalse(node0.isCall());
218:       assertFalse(node0.isWhile());
219:       assertFalse(node0.isFalse());
220:       assertFalse(node0.isComma());
221:       assertFalse(node0.isThrow());
222:       assertFalse(node0.isGetProp());
223:       assertFalse(node0.isContinue());
224:       assertEquals((-1), node0.getSourcePosition());
225:       assertFalse(node0.isObjectLit());
226:       assertFalse(node0.isNot());
227:       assertFalse(node0.isAnd());
228:       assertFalse(node0.isDebugger());
229:       assertNotNull(iterable0);
230:       
231:       String string0 = node0.getString();
232:       assertEquals("uv]46a9:im@r", string0);
233:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
234:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
235:       assertEquals(39, Node.EMPTY_BLOCK);
236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
237:       assertEquals(50, Node.FREE_CALL);
238:       assertEquals(8, Node.FLAG_NO_THROWS);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(40, Node.ORIGINALNAME_PROP);
241:       assertEquals(57, Node.REFLECTED_OBJECT);
242:       assertEquals(48, Node.DIRECTIVES);
243:       assertEquals(43, Node.IS_CONSTANT_NAME);
244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(12, Node.COLUMN_BITS);
247:       assertEquals(32, Node.INCRDECR_PROP);
248:       assertEquals(1, Node.DECR_FLAG);
249:       assertEquals(2, Node.POST_FLAG);
250:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
251:       assertEquals(37, Node.OPT_ARG_NAME);
252:       assertEquals(56, Node.CHANGE_TIME);
253:       assertEquals(47, Node.IS_DISPATCHER);
254:       assertEquals(29, Node.JSDOC_INFO_PROP);
255:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(51, Node.STATIC_SOURCE_FILE);
258:       assertEquals(46, Node.IS_NAMESPACE);
259:       assertEquals(49, Node.DIRECT_EVAL);
260:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
261:       assertEquals(36, Node.QUOTED_PROP);
262:       assertEquals(15, Node.NO_SIDE_EFFECTS);
263:       assertEquals(53, Node.INPUT_ID);
264:       assertEquals(30, Node.VAR_ARGS_NAME);
265:       assertEquals(52, Node.LENGTH);
266:       assertEquals(55, Node.INFERRED_FUNCTION);
267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
268:       assertEquals(57, Node.LAST_PROP);
269:       assertFalse(node0.hasOneChild());
270:       assertFalse(node0.isExprResult());
271:       assertFalse(node0.isGetElem());
272:       assertFalse(node0.isScript());
273:       assertFalse(node0.isCast());
274:       assertFalse(node0.isWith());
275:       assertFalse(node0.hasChildren());
276:       assertFalse(node0.isDec());
277:       assertFalse(node0.isTypeOf());
278:       assertFalse(node0.isAssign());
279:       assertEquals((-1), node0.getLineno());
280:       assertFalse(node0.isReturn());
281:       assertFalse(node0.isAssignAdd());
282:       assertFalse(node0.isOr());
283:       assertFalse(node0.hasMoreThanOneChild());
284:       assertFalse(node0.isInstanceOf());
285:       assertFalse(node0.isBreak());
286:       assertTrue(node0.isString());
287:       assertFalse(node0.isNew());
288:       assertFalse(node0.isAdd());
289:       assertFalse(node0.isCase());
290:       assertFalse(node0.isDo());
291:       assertFalse(node0.isThis());
292:       assertFalse(node0.isBlock());
293:       assertFalse(node0.isHook());
294:       assertFalse(node0.isVar());
295:       assertFalse(node0.isLabel());
296:       assertEquals(0, node0.getChildCount());
297:       assertFalse(node0.isNumber());
298:       assertFalse(node0.isLabelName());
299:       assertFalse(node0.isGetterDef());
300:       assertFalse(node0.isSwitch());
301:       assertFalse(node0.isParamList());
302:       assertEquals((-1), node0.getCharno());
303:       assertFalse(node0.isStringKey());
304:       assertFalse(node0.isVoid());
305:       assertFalse(node0.isTry());
306:       assertFalse(node0.isFunction());
307:       assertFalse(node0.isArrayLit());
308:       assertFalse(node0.isEmpty());
309:       assertFalse(node0.isDefaultCase());
310:       assertFalse(node0.isRegExp());
311:       assertEquals(40, node0.getType());
312:       assertFalse(node0.isFor());
313:       assertFalse(node0.isIn());
314:       assertFalse(node0.isSetterDef());
315:       assertFalse(node0.isCatch());
316:       assertFalse(node0.isIf());
317:       assertFalse(node0.isName());
318:       assertFalse(node0.isDelProp());
319:       assertFalse(node0.isTrue());
320:       assertFalse(node0.isNull());
321:       assertFalse(node0.isNE());
322:       assertFalse(node0.isInc());
323:       assertFalse(node0.isCall());
324:       assertFalse(node0.isWhile());
325:       assertFalse(node0.isFalse());
326:       assertFalse(node0.isComma());
327:       assertFalse(node0.isThrow());
328:       assertFalse(node0.isGetProp());
329:       assertFalse(node0.isContinue());
330:       assertEquals((-1), node0.getSourcePosition());
331:       assertFalse(node0.isObjectLit());
332:       assertFalse(node0.isNot());
333:       assertFalse(node0.isAnd());
334:       assertFalse(node0.isDebugger());
335:       assertNotNull(string0);
336:       
337:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
338:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
339:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
340:       assertEquals(39, Node.EMPTY_BLOCK);
341:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
342:       assertEquals(50, Node.FREE_CALL);
343:       assertEquals(8, Node.FLAG_NO_THROWS);
344:       assertEquals(4095, Node.COLUMN_MASK);
345:       assertEquals(40, Node.ORIGINALNAME_PROP);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(48, Node.DIRECTIVES);
348:       assertEquals(43, Node.IS_CONSTANT_NAME);
349:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
350:       assertEquals(54, Node.SLASH_V);
351:       assertEquals(12, Node.COLUMN_BITS);
352:       assertEquals(32, Node.INCRDECR_PROP);
353:       assertEquals(1, Node.DECR_FLAG);
354:       assertEquals(2, Node.POST_FLAG);
355:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
356:       assertEquals(37, Node.OPT_ARG_NAME);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(47, Node.IS_DISPATCHER);
359:       assertEquals(29, Node.JSDOC_INFO_PROP);
360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
362:       assertEquals(51, Node.STATIC_SOURCE_FILE);
363:       assertEquals(46, Node.IS_NAMESPACE);
364:       assertEquals(49, Node.DIRECT_EVAL);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
368:       assertEquals(53, Node.INPUT_ID);
369:       assertEquals(30, Node.VAR_ARGS_NAME);
370:       assertEquals(52, Node.LENGTH);
371:       assertEquals(55, Node.INFERRED_FUNCTION);
372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
373:       assertEquals(57, Node.LAST_PROP);
374:       assertFalse(node0.hasOneChild());
375:       assertFalse(node0.isExprResult());
376:       assertFalse(node0.isGetElem());
377:       assertFalse(node0.isScript());
378:       assertFalse(node0.isCast());
379:       assertFalse(node0.isWith());
380:       assertFalse(node0.hasChildren());
381:       assertFalse(node0.isDec());
382:       assertFalse(node0.isTypeOf());
383:       assertFalse(node0.isAssign());
384:       assertEquals((-1), node0.getLineno());
385:       assertFalse(node0.isReturn());
386:       assertFalse(node0.isAssignAdd());
387:       assertFalse(node0.isOr());
388:       assertFalse(node0.hasMoreThanOneChild());
389:       assertFalse(node0.isInstanceOf());
390:       assertFalse(node0.isBreak());
391:       assertTrue(node0.isString());
392:       assertFalse(node0.isNew());
393:       assertFalse(node0.isAdd());
394:       assertFalse(node0.isCase());
395:       assertFalse(node0.isDo());
396:       assertFalse(node0.isThis());
397:       assertFalse(node0.isBlock());
398:       assertFalse(node0.isHook());
399:       assertFalse(node0.isVar());
400:       assertFalse(node0.isLabel());
401:       assertEquals(0, node0.getChildCount());
402:       assertFalse(node0.isNumber());
403:       assertFalse(node0.isLabelName());
404:       assertFalse(node0.isGetterDef());
405:       assertFalse(node0.isSwitch());
406:       assertFalse(node0.isParamList());
407:       assertEquals((-1), node0.getCharno());
408:       assertFalse(node0.isStringKey());
409:       assertFalse(node0.isVoid());
410:       assertFalse(node0.isTry());
411:       assertFalse(node0.isFunction());
412:       assertFalse(node0.isArrayLit());
413:       assertFalse(node0.isEmpty());
414:       assertFalse(node0.isDefaultCase());
415:       assertFalse(node0.isRegExp());
416:       assertEquals(40, node0.getType());
417:       assertFalse(node0.isFor());
418:       assertFalse(node0.isIn());
419:       assertFalse(node0.isSetterDef());
420:       assertFalse(node0.isCatch());
421:       assertFalse(node0.isIf());
422:       assertFalse(node0.isName());
423:       assertFalse(node0.isDelProp());
424:       assertFalse(node0.isTrue());
425:       assertFalse(node0.isNull());
426:       assertFalse(node0.isNE());
427:       assertFalse(node0.isInc());
428:       assertFalse(node0.isCall());
429:       assertFalse(node0.isWhile());
430:       assertFalse(node0.isFalse());
431:       assertFalse(node0.isComma());
432:       assertFalse(node0.isThrow());
433:       assertFalse(node0.isGetProp());
434:       assertFalse(node0.isContinue());
435:       assertEquals((-1), node0.getSourcePosition());
436:       assertFalse(node0.isObjectLit());
437:       assertFalse(node0.isNot());
438:       assertFalse(node0.isAnd());
439:       assertFalse(node0.isDebugger());
440:       assertNotNull(node_FileLevelJsDocBuilder0);
441:       
442:       boolean boolean0 = node0.getBooleanProp((-5430));
443:       assertFalse(boolean0);
444:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
445:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
446:       assertEquals(39, Node.EMPTY_BLOCK);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(50, Node.FREE_CALL);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertEquals(4095, Node.COLUMN_MASK);
451:       assertEquals(40, Node.ORIGINALNAME_PROP);
452:       assertEquals(57, Node.REFLECTED_OBJECT);
453:       assertEquals(48, Node.DIRECTIVES);
454:       assertEquals(43, Node.IS_CONSTANT_NAME);
455:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
456:       assertEquals(54, Node.SLASH_V);
457:       assertEquals(12, Node.COLUMN_BITS);
458:       assertEquals(32, Node.INCRDECR_PROP);
459:       assertEquals(1, Node.DECR_FLAG);
460:       assertEquals(2, Node.POST_FLAG);
461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:       assertEquals(37, Node.OPT_ARG_NAME);
463:       assertEquals(56, Node.CHANGE_TIME);
464:       assertEquals(47, Node.IS_DISPATCHER);
465:       assertEquals(29, Node.JSDOC_INFO_PROP);
466:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
467:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
468:       assertEquals(51, Node.STATIC_SOURCE_FILE);
469:       assertEquals(46, Node.IS_NAMESPACE);
470:       assertEquals(49, Node.DIRECT_EVAL);
471:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
472:       assertEquals(36, Node.QUOTED_PROP);
473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
474:       assertEquals(53, Node.INPUT_ID);
475:       assertEquals(30, Node.VAR_ARGS_NAME);
476:       assertEquals(52, Node.LENGTH);
477:       assertEquals(55, Node.INFERRED_FUNCTION);
478:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
479:       assertEquals(57, Node.LAST_PROP);
480:       assertFalse(node0.hasOneChild());
481:       assertFalse(node0.isExprResult());
482:       assertFalse(node0.isGetElem());
483:       assertFalse(node0.isScript());
484:       assertFalse(node0.isCast());
485:       assertFalse(node0.isWith());
486:       assertFalse(node0.hasChildren());
487:       assertFalse(node0.isDec());
488:       assertFalse(node0.isTypeOf());
489:       assertFalse(node0.isAssign());
490:       assertEquals((-1), node0.getLineno());
491:       assertFalse(node0.isReturn());
492:       assertFalse(node0.isAssignAdd());
493:       assertFalse(node0.isOr());
494:       assertFalse(node0.hasMoreThanOneChild());
495:       assertFalse(node0.isInstanceOf());
496:       assertFalse(node0.isBreak());
497:       assertTrue(node0.isString());
498:       assertFalse(node0.isNew());
499:       assertFalse(node0.isAdd());
500:       assertFalse(node0.isCase());
501:       assertFalse(node0.isDo());
502:       assertFalse(node0.isThis());
503:       assertFalse(node0.isBlock());
504:       assertFalse(node0.isHook());
505:       assertFalse(node0.isVar());
506:       assertFalse(node0.isLabel());
507:       assertEquals(0, node0.getChildCount());
508:       assertFalse(node0.isNumber());
509:       assertFalse(node0.isLabelName());
510:       assertFalse(node0.isGetterDef());
511:       assertFalse(node0.isSwitch());
512:       assertFalse(node0.isParamList());
513:       assertEquals((-1), node0.getCharno());
514:       assertFalse(node0.isStringKey());
515:       assertFalse(node0.isVoid());
516:       assertFalse(node0.isTry());
517:       assertFalse(node0.isFunction());
518:       assertFalse(node0.isArrayLit());
519:       assertFalse(node0.isEmpty());
520:       assertFalse(node0.isDefaultCase());
521:       assertFalse(node0.isRegExp());
522:       assertEquals(40, node0.getType());
523:       assertFalse(node0.isFor());
524:       assertFalse(node0.isIn());
525:       assertFalse(node0.isSetterDef());
526:       assertFalse(node0.isCatch());
527:       assertFalse(node0.isIf());
528:       assertFalse(node0.isName());
529:       assertFalse(node0.isDelProp());
530:       assertFalse(node0.isTrue());
531:       assertFalse(node0.isNull());
532:       assertFalse(node0.isNE());
533:       assertFalse(node0.isInc());
534:       assertFalse(node0.isCall());
535:       assertFalse(node0.isWhile());
536:       assertFalse(node0.isFalse());
537:       assertFalse(node0.isComma());
538:       assertFalse(node0.isThrow());
539:       assertFalse(node0.isGetProp());
540:       assertFalse(node0.isContinue());
541:       assertEquals((-1), node0.getSourcePosition());
542:       assertFalse(node0.isObjectLit());
543:       assertFalse(node0.isNot());
544:       assertFalse(node0.isAnd());
545:       assertFalse(node0.isDebugger());
546:       
547:       boolean boolean1 = node0.isFor();
548:       assertFalse(boolean1);
549:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
550:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
551:       assertEquals(39, Node.EMPTY_BLOCK);
552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
553:       assertEquals(50, Node.FREE_CALL);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(4095, Node.COLUMN_MASK);
556:       assertEquals(40, Node.ORIGINALNAME_PROP);
557:       assertEquals(57, Node.REFLECTED_OBJECT);
558:       assertEquals(48, Node.DIRECTIVES);
559:       assertEquals(43, Node.IS_CONSTANT_NAME);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(12, Node.COLUMN_BITS);
563:       assertEquals(32, Node.INCRDECR_PROP);
564:       assertEquals(1, Node.DECR_FLAG);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
567:       assertEquals(37, Node.OPT_ARG_NAME);
568:       assertEquals(56, Node.CHANGE_TIME);
569:       assertEquals(47, Node.IS_DISPATCHER);
570:       assertEquals(29, Node.JSDOC_INFO_PROP);
571:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
572:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
573:       assertEquals(51, Node.STATIC_SOURCE_FILE);
574:       assertEquals(46, Node.IS_NAMESPACE);
575:       assertEquals(49, Node.DIRECT_EVAL);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(15, Node.NO_SIDE_EFFECTS);
579:       assertEquals(53, Node.INPUT_ID);
580:       assertEquals(30, Node.VAR_ARGS_NAME);
581:       assertEquals(52, Node.LENGTH);
582:       assertEquals(55, Node.INFERRED_FUNCTION);
583:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
584:       assertEquals(57, Node.LAST_PROP);
585:       assertTrue(boolean1 == boolean0);
586:       assertFalse(node0.hasOneChild());
587:       assertFalse(node0.isExprResult());
588:       assertFalse(node0.isGetElem());
589:       assertFalse(node0.isScript());
590:       assertFalse(node0.isCast());
591:       assertFalse(node0.isWith());
592:       assertFalse(node0.hasChildren());
593:       assertFalse(node0.isDec());
594:       assertFalse(node0.isTypeOf());
595:       assertFalse(node0.isAssign());
596:       assertEquals((-1), node0.getLineno());
597:       assertFalse(node0.isReturn());
598:       assertFalse(node0.isAssignAdd());
599:       assertFalse(node0.isOr());
600:       assertFalse(node0.hasMoreThanOneChild());
601:       assertFalse(node0.isInstanceOf());
602:       assertFalse(node0.isBreak());
603:       assertTrue(node0.isString());
604:       assertFalse(node0.isNew());
605:       assertFalse(node0.isAdd());
606:       assertFalse(node0.isCase());
607:       assertFalse(node0.isDo());
608:       assertFalse(node0.isThis());
609:       assertFalse(node0.isBlock());
610:       assertFalse(node0.isHook());
611:       assertFalse(node0.isVar());
612:       assertFalse(node0.isLabel());
613:       assertEquals(0, node0.getChildCount());
614:       assertFalse(node0.isNumber());
615:       assertFalse(node0.isLabelName());
616:       assertFalse(node0.isGetterDef());
617:       assertFalse(node0.isSwitch());
618:       assertFalse(node0.isParamList());
619:       assertEquals((-1), node0.getCharno());
620:       assertFalse(node0.isStringKey());
621:       assertFalse(node0.isVoid());
622:       assertFalse(node0.isTry());
623:       assertFalse(node0.isFunction());
624:       assertFalse(node0.isArrayLit());
625:       assertFalse(node0.isEmpty());
626:       assertFalse(node0.isDefaultCase());
627:       assertFalse(node0.isRegExp());
628:       assertEquals(40, node0.getType());
629:       assertFalse(node0.isFor());
630:       assertFalse(node0.isIn());
631:       assertFalse(node0.isSetterDef());
632:       assertFalse(node0.isCatch());
633:       assertFalse(node0.isIf());
634:       assertFalse(node0.isName());
635:       assertFalse(node0.isDelProp());
636:       assertFalse(node0.isTrue());
637:       assertFalse(node0.isNull());
638:       assertFalse(node0.isNE());
639:       assertFalse(node0.isInc());
640:       assertFalse(node0.isCall());
641:       assertFalse(node0.isWhile());
642:       assertFalse(node0.isFalse());
643:       assertFalse(node0.isComma());
644:       assertFalse(node0.isThrow());
645:       assertFalse(node0.isGetProp());
646:       assertFalse(node0.isContinue());
647:       assertEquals((-1), node0.getSourcePosition());
648:       assertFalse(node0.isObjectLit());
649:       assertFalse(node0.isNot());
650:       assertFalse(node0.isAnd());
651:       assertFalse(node0.isDebugger());
652:       
653:       boolean boolean2 = node0.isUnscopedQualifiedName();
654:       assertFalse(boolean2);
655:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
656:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
657:       assertEquals(39, Node.EMPTY_BLOCK);
658:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
659:       assertEquals(50, Node.FREE_CALL);
660:       assertEquals(8, Node.FLAG_NO_THROWS);
661:       assertEquals(4095, Node.COLUMN_MASK);
662:       assertEquals(40, Node.ORIGINALNAME_PROP);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(48, Node.DIRECTIVES);
665:       assertEquals(43, Node.IS_CONSTANT_NAME);
666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
667:       assertEquals(54, Node.SLASH_V);
668:       assertEquals(12, Node.COLUMN_BITS);
669:       assertEquals(32, Node.INCRDECR_PROP);
670:       assertEquals(1, Node.DECR_FLAG);
671:       assertEquals(2, Node.POST_FLAG);
672:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
673:       assertEquals(37, Node.OPT_ARG_NAME);
674:       assertEquals(56, Node.CHANGE_TIME);
675:       assertEquals(47, Node.IS_DISPATCHER);
676:       assertEquals(29, Node.JSDOC_INFO_PROP);
677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
678:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
679:       assertEquals(51, Node.STATIC_SOURCE_FILE);
680:       assertEquals(46, Node.IS_NAMESPACE);
681:       assertEquals(49, Node.DIRECT_EVAL);
682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
683:       assertEquals(36, Node.QUOTED_PROP);
684:       assertEquals(15, Node.NO_SIDE_EFFECTS);
685:       assertEquals(53, Node.INPUT_ID);
686:       assertEquals(30, Node.VAR_ARGS_NAME);
687:       assertEquals(52, Node.LENGTH);
688:       assertEquals(55, Node.INFERRED_FUNCTION);
689:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
690:       assertEquals(57, Node.LAST_PROP);
691:       assertTrue(boolean2 == boolean1);
692:       assertTrue(boolean2 == boolean0);
693:       assertFalse(node0.hasOneChild());
694:       assertFalse(node0.isExprResult());
695:       assertFalse(node0.isGetElem());
696:       assertFalse(node0.isScript());
697:       assertFalse(node0.isCast());
698:       assertFalse(node0.isWith());
699:       assertFalse(node0.hasChildren());
700:       assertFalse(node0.isDec());
701:       assertFalse(node0.isTypeOf());
702:       assertFalse(node0.isAssign());
703:       assertEquals((-1), node0.getLineno());
704:       assertFalse(node0.isReturn());
705:       assertFalse(node0.isAssignAdd());
706:       assertFalse(node0.isOr());
707:       assertFalse(node0.hasMoreThanOneChild());
708:       assertFalse(node0.isInstanceOf());
709:       assertFalse(node0.isBreak());
710:       assertTrue(node0.isString());
711:       assertFalse(node0.isNew());
712:       assertFalse(node0.isAdd());
713:       assertFalse(node0.isCase());
714:       assertFalse(node0.isDo());
715:       assertFalse(node0.isThis());
716:       assertFalse(node0.isBlock());
717:       assertFalse(node0.isHook());
718:       assertFalse(node0.isVar());
719:       assertFalse(node0.isLabel());
720:       assertEquals(0, node0.getChildCount());
721:       assertFalse(node0.isNumber());
722:       assertFalse(node0.isLabelName());
723:       assertFalse(node0.isGetterDef());
724:       assertFalse(node0.isSwitch());
725:       assertFalse(node0.isParamList());
726:       assertEquals((-1), node0.getCharno());
727:       assertFalse(node0.isStringKey());
728:       assertFalse(node0.isVoid());
729:       assertFalse(node0.isTry());
730:       assertFalse(node0.isFunction());
731:       assertFalse(node0.isArrayLit());
732:       assertFalse(node0.isEmpty());
733:       assertFalse(node0.isDefaultCase());
734:       assertFalse(node0.isRegExp());
735:       assertEquals(40, node0.getType());
736:       assertFalse(node0.isFor());
737:       assertFalse(node0.isIn());
738:       assertFalse(node0.isSetterDef());
739:       assertFalse(node0.isCatch());
740:       assertFalse(node0.isIf());
741:       assertFalse(node0.isName());
742:       assertFalse(node0.isDelProp());
743:       assertFalse(node0.isTrue());
744:       assertFalse(node0.isNull());
745:       assertFalse(node0.isNE());
746:       assertFalse(node0.isInc());
747:       assertFalse(node0.isCall());
748:       assertFalse(node0.isWhile());
749:       assertFalse(node0.isFalse());
750:       assertFalse(node0.isComma());
751:       assertFalse(node0.isThrow());
752:       assertFalse(node0.isGetProp());
753:       assertFalse(node0.isContinue());
754:       assertEquals((-1), node0.getSourcePosition());
755:       assertFalse(node0.isObjectLit());
756:       assertFalse(node0.isNot());
757:       assertFalse(node0.isAnd());
758:       assertFalse(node0.isDebugger());
759:       
760:       node0.removeProp((-5430));
761:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
762:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
763:       assertEquals(39, Node.EMPTY_BLOCK);
764:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
765:       assertEquals(50, Node.FREE_CALL);
766:       assertEquals(8, Node.FLAG_NO_THROWS);
767:       assertEquals(4095, Node.COLUMN_MASK);
768:       assertEquals(40, Node.ORIGINALNAME_PROP);
769:       assertEquals(57, Node.REFLECTED_OBJECT);
770:       assertEquals(48, Node.DIRECTIVES);
771:       assertEquals(43, Node.IS_CONSTANT_NAME);
772:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
773:       assertEquals(54, Node.SLASH_V);
774:       assertEquals(12, Node.COLUMN_BITS);
775:       assertEquals(32, Node.INCRDECR_PROP);
776:       assertEquals(1, Node.DECR_FLAG);
777:       assertEquals(2, Node.POST_FLAG);
778:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
779:       assertEquals(37, Node.OPT_ARG_NAME);
780:       assertEquals(56, Node.CHANGE_TIME);
781:       assertEquals(47, Node.IS_DISPATCHER);
782:       assertEquals(29, Node.JSDOC_INFO_PROP);
783:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
784:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
785:       assertEquals(51, Node.STATIC_SOURCE_FILE);
786:       assertEquals(46, Node.IS_NAMESPACE);
787:       assertEquals(49, Node.DIRECT_EVAL);
788:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
789:       assertEquals(36, Node.QUOTED_PROP);
790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
791:       assertEquals(53, Node.INPUT_ID);
792:       assertEquals(30, Node.VAR_ARGS_NAME);
793:       assertEquals(52, Node.LENGTH);
794:       assertEquals(55, Node.INFERRED_FUNCTION);
795:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
796:       assertEquals(57, Node.LAST_PROP);
797:       assertFalse(node0.hasOneChild());
798:       assertFalse(node0.isExprResult());
799:       assertFalse(node0.isGetElem());
800:       assertFalse(node0.isScript());
801:       assertFalse(node0.isCast());
802:       assertFalse(node0.isWith());
803:       assertFalse(node0.hasChildren());
804:       assertFalse(node0.isDec());
805:       assertFalse(node0.isTypeOf());
806:       assertFalse(node0.isAssign());
807:       assertEquals((-1), node0.getLineno());
808:       assertFalse(node0.isReturn());
809:       assertFalse(node0.isAssignAdd());
810:       assertFalse(node0.isOr());
811:       assertFalse(node0.hasMoreThanOneChild());
812:       assertFalse(node0.isInstanceOf());
813:       assertFalse(node0.isBreak());
814:       assertTrue(node0.isString());
815:       assertFalse(node0.isNew());
816:       assertFalse(node0.isAdd());
817:       assertFalse(node0.isCase());
818:       assertFalse(node0.isDo());
819:       assertFalse(node0.isThis());
820:       assertFalse(node0.isBlock());
821:       assertFalse(node0.isHook());
822:       assertFalse(node0.isVar());
823:       assertFalse(node0.isLabel());
824:       assertEquals(0, node0.getChildCount());
825:       assertFalse(node0.isNumber());
826:       assertFalse(node0.isLabelName());
827:       assertFalse(node0.isGetterDef());
828:       assertFalse(node0.isSwitch());
829:       assertFalse(node0.isParamList());
830:       assertEquals((-1), node0.getCharno());
831:       assertFalse(node0.isStringKey());
832:       assertFalse(node0.isVoid());
833:       assertFalse(node0.isTry());
834:       assertFalse(node0.isFunction());
835:       assertFalse(node0.isArrayLit());
836:       assertFalse(node0.isEmpty());
837:       assertFalse(node0.isDefaultCase());
838:       assertFalse(node0.isRegExp());
839:       assertEquals(40, node0.getType());
840:       assertFalse(node0.isFor());
841:       assertFalse(node0.isIn());
842:       assertFalse(node0.isSetterDef());
843:       assertFalse(node0.isCatch());
844:       assertFalse(node0.isIf());
845:       assertFalse(node0.isName());
846:       assertFalse(node0.isDelProp());
847:       assertFalse(node0.isTrue());
848:       assertFalse(node0.isNull());
849:       assertFalse(node0.isNE());
850:       assertFalse(node0.isInc());
851:       assertFalse(node0.isCall());
852:       assertFalse(node0.isWhile());
853:       assertFalse(node0.isFalse());
854:       assertFalse(node0.isComma());
855:       assertFalse(node0.isThrow());
856:       assertFalse(node0.isGetProp());
857:       assertFalse(node0.isContinue());
858:       assertEquals((-1), node0.getSourcePosition());
859:       assertFalse(node0.isObjectLit());
860:       assertFalse(node0.isNot());
861:       assertFalse(node0.isAnd());
862:       assertFalse(node0.isDebugger());
863:   }
864: }
RegularFileObject[/tmp/EvoSuite_94_1628255584666/com/google/javascript/rhino/Node_94_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:04 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_94_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_94_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_94_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.ImmutableList$1",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 13:13:04.832 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("uv]46a9:im@r", (-5430), (-5430));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertNotNull(iterable0);

String string0 = node0.getString();
assertEquals("uv]46a9:im@r", string0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertNotNull(string0);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertNotNull(node_FileLevelJsDocBuilder0);

boolean boolean0 = node0.getBooleanProp((-5430));
assertFalse(boolean0);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

boolean boolean1 = node0.isFor();
assertFalse(boolean1);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertTrue(boolean1 == boolean0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

boolean boolean2 = node0.isUnscopedQualifiedName();
assertFalse(boolean2);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());

node0.removeProp((-5430));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.hasOneChild());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCase());
assertFalse(node0.isDo());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());


[MASTER] 13:13:09.419 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_113_1628255589368/com/google/javascript/rhino/Node_113_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_113_1628255589368/com/google/javascript/rhino/Node_113_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:09.419 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:09.420 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:09.420 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 13:13:09.422 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_113_1628255589368/com/google/javascript/rhino/Node_113_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:09 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_113_tmp__ESTest extends Node_113_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("uv]46a9:im@r", (-5430), (-5430));
22:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
23:       assertEquals(52, Node.LENGTH);
24:       assertEquals(15, Node.NO_SIDE_EFFECTS);
25:       assertEquals(40, Node.ORIGINALNAME_PROP);
26:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
27:       assertEquals(49, Node.DIRECT_EVAL);
28:       assertEquals(50, Node.FREE_CALL);
29:       assertEquals(51, Node.STATIC_SOURCE_FILE);
30:       assertEquals(57, Node.REFLECTED_OBJECT);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(54, Node.SLASH_V);
33:       assertEquals(8, Node.FLAG_NO_THROWS);
34:       assertEquals(2, Node.POST_FLAG);
35:       assertEquals(55, Node.INFERRED_FUNCTION);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
39:       assertEquals(30, Node.VAR_ARGS_NAME);
40:       assertEquals(57, Node.LAST_PROP);
41:       assertEquals(47, Node.IS_DISPATCHER);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(53, Node.INPUT_ID);
44:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
45:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
46:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
47:       assertEquals(43, Node.IS_CONSTANT_NAME);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(36, Node.QUOTED_PROP);
50:       assertEquals(37, Node.OPT_ARG_NAME);
51:       assertEquals(48, Node.DIRECTIVES);
52:       assertEquals(32, Node.INCRDECR_PROP);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(4095, Node.COLUMN_MASK);
55:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(12, Node.COLUMN_BITS);
58:       assertFalse(node0.isCatch());
59:       assertFalse(node0.isRegExp());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isFunction());
62:       assertEquals(40, node0.getType());
63:       assertEquals(0, node0.getChildCount());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isStringKey());
66:       assertTrue(node0.isString());
67:       assertFalse(node0.isTry());
68:       assertFalse(node0.isParamList());
69:       assertFalse(node0.isDebugger());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.isAssignAdd());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isTypeOf());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.isLabel());
76:       assertFalse(node0.isAssign());
77:       assertFalse(node0.isReturn());
78:       assertFalse(node0.hasChildren());
79:       assertFalse(node0.isDec());
80:       assertFalse(node0.isVar());
81:       assertFalse(node0.isCall());
82:       assertFalse(node0.isEmpty());
83:       assertFalse(node0.isName());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isDelProp());
87:       assertFalse(node0.isVoid());
88:       assertFalse(node0.isBreak());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isNull());
91:       assertFalse(node0.isTrue());
92:       assertFalse(node0.isOr());
93:       assertFalse(node0.isAnd());
94:       assertFalse(node0.isInstanceOf());
95:       assertFalse(node0.isGetProp());
96:       assertFalse(node0.isThis());
97:       assertFalse(node0.isExprResult());
98:       assertFalse(node0.isFalse());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.isComma());
101:       assertFalse(node0.isHook());
102:       assertFalse(node0.isCast());
103:       assertFalse(node0.isLabelName());
104:       assertFalse(node0.hasOneChild());
105:       assertFalse(node0.isScript());
106:       assertFalse(node0.isSwitch());
107:       assertFalse(node0.isNumber());
108:       assertFalse(node0.isNot());
109:       assertFalse(node0.isObjectLit());
110:       assertEquals((-1), node0.getCharno());
111:       assertEquals((-1), node0.getSourcePosition());
112:       assertFalse(node0.hasMoreThanOneChild());
113:       assertFalse(node0.isContinue());
114:       assertFalse(node0.isIn());
115:       assertFalse(node0.isCase());
116:       assertEquals((-1), node0.getLineno());
117:       assertFalse(node0.isFor());
118:       assertFalse(node0.isBlock());
119:       assertFalse(node0.isThrow());
120:       assertFalse(node0.isNE());
121:       assertFalse(node0.isInc());
122:       assertFalse(node0.isSetterDef());
123:       assertFalse(node0.isIf());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
129:       assertEquals(52, Node.LENGTH);
130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
131:       assertEquals(40, Node.ORIGINALNAME_PROP);
132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
133:       assertEquals(49, Node.DIRECT_EVAL);
134:       assertEquals(50, Node.FREE_CALL);
135:       assertEquals(51, Node.STATIC_SOURCE_FILE);
136:       assertEquals(57, Node.REFLECTED_OBJECT);
137:       assertEquals(46, Node.IS_NAMESPACE);
138:       assertEquals(54, Node.SLASH_V);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(2, Node.POST_FLAG);
141:       assertEquals(55, Node.INFERRED_FUNCTION);
142:       assertEquals(39, Node.EMPTY_BLOCK);
143:       assertEquals(29, Node.JSDOC_INFO_PROP);
144:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
145:       assertEquals(30, Node.VAR_ARGS_NAME);
146:       assertEquals(57, Node.LAST_PROP);
147:       assertEquals(47, Node.IS_DISPATCHER);
148:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
153:       assertEquals(43, Node.IS_CONSTANT_NAME);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(36, Node.QUOTED_PROP);
156:       assertEquals(37, Node.OPT_ARG_NAME);
157:       assertEquals(48, Node.DIRECTIVES);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(4095, Node.COLUMN_MASK);
161:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(12, Node.COLUMN_BITS);
164:       assertFalse(node0.isCatch());
165:       assertFalse(node0.isRegExp());
166:       assertFalse(node0.isDefaultCase());
167:       assertFalse(node0.isFunction());
168:       assertEquals(40, node0.getType());
169:       assertEquals(0, node0.getChildCount());
170:       assertFalse(node0.isArrayLit());
171:       assertFalse(node0.isStringKey());
172:       assertTrue(node0.isString());
173:       assertFalse(node0.isTry());
174:       assertFalse(node0.isParamList());
175:       assertFalse(node0.isDebugger());
176:       assertFalse(node0.isGetterDef());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isDo());
179:       assertFalse(node0.isTypeOf());
180:       assertFalse(node0.isWhile());
181:       assertFalse(node0.isLabel());
182:       assertFalse(node0.isAssign());
183:       assertFalse(node0.isReturn());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isDec());
186:       assertFalse(node0.isVar());
187:       assertFalse(node0.isCall());
188:       assertFalse(node0.isEmpty());
189:       assertFalse(node0.isName());
190:       assertFalse(node0.isAdd());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isDelProp());
193:       assertFalse(node0.isVoid());
194:       assertFalse(node0.isBreak());
195:       assertFalse(node0.isNew());
196:       assertFalse(node0.isNull());
197:       assertFalse(node0.isTrue());
198:       assertFalse(node0.isOr());
199:       assertFalse(node0.isAnd());
200:       assertFalse(node0.isInstanceOf());
201:       assertFalse(node0.isGetProp());
202:       assertFalse(node0.isThis());
203:       assertFalse(node0.isExprResult());
204:       assertFalse(node0.isFalse());
205:       assertFalse(node0.isWith());
206:       assertFalse(node0.isComma());
207:       assertFalse(node0.isHook());
208:       assertFalse(node0.isCast());
209:       assertFalse(node0.isLabelName());
210:       assertFalse(node0.hasOneChild());
211:       assertFalse(node0.isScript());
212:       assertFalse(node0.isSwitch());
213:       assertFalse(node0.isNumber());
214:       assertFalse(node0.isNot());
215:       assertFalse(node0.isObjectLit());
216:       assertEquals((-1), node0.getCharno());
217:       assertEquals((-1), node0.getSourcePosition());
218:       assertFalse(node0.hasMoreThanOneChild());
219:       assertFalse(node0.isContinue());
220:       assertFalse(node0.isIn());
221:       assertFalse(node0.isCase());
222:       assertEquals((-1), node0.getLineno());
223:       assertFalse(node0.isFor());
224:       assertFalse(node0.isBlock());
225:       assertFalse(node0.isThrow());
226:       assertFalse(node0.isNE());
227:       assertFalse(node0.isInc());
228:       assertFalse(node0.isSetterDef());
229:       assertFalse(node0.isIf());
230:       assertNotNull(iterable0);
231:       
232:       node0.setIsSyntheticBlock(true);
233:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
234:       assertEquals(52, Node.LENGTH);
235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
236:       assertEquals(40, Node.ORIGINALNAME_PROP);
237:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
238:       assertEquals(49, Node.DIRECT_EVAL);
239:       assertEquals(50, Node.FREE_CALL);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(57, Node.REFLECTED_OBJECT);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(8, Node.FLAG_NO_THROWS);
245:       assertEquals(2, Node.POST_FLAG);
246:       assertEquals(55, Node.INFERRED_FUNCTION);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(29, Node.JSDOC_INFO_PROP);
249:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
250:       assertEquals(30, Node.VAR_ARGS_NAME);
251:       assertEquals(57, Node.LAST_PROP);
252:       assertEquals(47, Node.IS_DISPATCHER);
253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
254:       assertEquals(53, Node.INPUT_ID);
255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
258:       assertEquals(43, Node.IS_CONSTANT_NAME);
259:       assertEquals(56, Node.CHANGE_TIME);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(37, Node.OPT_ARG_NAME);
262:       assertEquals(48, Node.DIRECTIVES);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(4095, Node.COLUMN_MASK);
266:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(12, Node.COLUMN_BITS);
269:       assertFalse(node0.isCatch());
270:       assertFalse(node0.isRegExp());
271:       assertFalse(node0.isDefaultCase());
272:       assertFalse(node0.isFunction());
273:       assertEquals(40, node0.getType());
274:       assertEquals(0, node0.getChildCount());
275:       assertFalse(node0.isArrayLit());
276:       assertFalse(node0.isStringKey());
277:       assertTrue(node0.isString());
278:       assertFalse(node0.isTry());
279:       assertFalse(node0.isParamList());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isGetterDef());
282:       assertFalse(node0.isAssignAdd());
283:       assertFalse(node0.isDo());
284:       assertFalse(node0.isTypeOf());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isLabel());
287:       assertFalse(node0.isAssign());
288:       assertFalse(node0.isReturn());
289:       assertFalse(node0.hasChildren());
290:       assertFalse(node0.isDec());
291:       assertFalse(node0.isVar());
292:       assertFalse(node0.isCall());
293:       assertFalse(node0.isEmpty());
294:       assertFalse(node0.isName());
295:       assertFalse(node0.isAdd());
296:       assertFalse(node0.isGetElem());
297:       assertFalse(node0.isDelProp());
298:       assertFalse(node0.isVoid());
299:       assertFalse(node0.isBreak());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isNull());
302:       assertFalse(node0.isTrue());
303:       assertFalse(node0.isOr());
304:       assertFalse(node0.isAnd());
305:       assertFalse(node0.isInstanceOf());
306:       assertFalse(node0.isGetProp());
307:       assertFalse(node0.isThis());
308:       assertFalse(node0.isExprResult());
309:       assertFalse(node0.isFalse());
310:       assertFalse(node0.isWith());
311:       assertFalse(node0.isComma());
312:       assertFalse(node0.isHook());
313:       assertFalse(node0.isCast());
314:       assertFalse(node0.isLabelName());
315:       assertFalse(node0.hasOneChild());
316:       assertFalse(node0.isScript());
317:       assertFalse(node0.isSwitch());
318:       assertFalse(node0.isNumber());
319:       assertFalse(node0.isNot());
320:       assertFalse(node0.isObjectLit());
321:       assertEquals((-1), node0.getCharno());
322:       assertEquals((-1), node0.getSourcePosition());
323:       assertFalse(node0.hasMoreThanOneChild());
324:       assertFalse(node0.isContinue());
325:       assertFalse(node0.isIn());
326:       assertFalse(node0.isCase());
327:       assertEquals((-1), node0.getLineno());
328:       assertFalse(node0.isFor());
329:       assertFalse(node0.isBlock());
330:       assertFalse(node0.isThrow());
331:       assertFalse(node0.isNE());
332:       assertFalse(node0.isInc());
333:       assertFalse(node0.isSetterDef());
334:       assertFalse(node0.isIf());
335:       
336:       boolean boolean0 = node0.isCase();
337:       assertFalse(boolean0);
338:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
339:       assertEquals(52, Node.LENGTH);
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(40, Node.ORIGINALNAME_PROP);
342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
343:       assertEquals(49, Node.DIRECT_EVAL);
344:       assertEquals(50, Node.FREE_CALL);
345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(46, Node.IS_NAMESPACE);
348:       assertEquals(54, Node.SLASH_V);
349:       assertEquals(8, Node.FLAG_NO_THROWS);
350:       assertEquals(2, Node.POST_FLAG);
351:       assertEquals(55, Node.INFERRED_FUNCTION);
352:       assertEquals(39, Node.EMPTY_BLOCK);
353:       assertEquals(29, Node.JSDOC_INFO_PROP);
354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
355:       assertEquals(30, Node.VAR_ARGS_NAME);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(53, Node.INPUT_ID);
360:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
361:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
362:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
363:       assertEquals(43, Node.IS_CONSTANT_NAME);
364:       assertEquals(56, Node.CHANGE_TIME);
365:       assertEquals(36, Node.QUOTED_PROP);
366:       assertEquals(37, Node.OPT_ARG_NAME);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(32, Node.INCRDECR_PROP);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(4095, Node.COLUMN_MASK);
371:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
372:       assertEquals(1, Node.DECR_FLAG);
373:       assertEquals(12, Node.COLUMN_BITS);
374:       assertFalse(node0.isCatch());
375:       assertFalse(node0.isRegExp());
376:       assertFalse(node0.isDefaultCase());
377:       assertFalse(node0.isFunction());
378:       assertEquals(40, node0.getType());
379:       assertEquals(0, node0.getChildCount());
380:       assertFalse(node0.isArrayLit());
381:       assertFalse(node0.isStringKey());
382:       assertTrue(node0.isString());
383:       assertFalse(node0.isTry());
384:       assertFalse(node0.isParamList());
385:       assertFalse(node0.isDebugger());
386:       assertFalse(node0.isGetterDef());
387:       assertFalse(node0.isAssignAdd());
388:       assertFalse(node0.isDo());
389:       assertFalse(node0.isTypeOf());
390:       assertFalse(node0.isWhile());
391:       assertFalse(node0.isLabel());
392:       assertFalse(node0.isAssign());
393:       assertFalse(node0.isReturn());
394:       assertFalse(node0.hasChildren());
395:       assertFalse(node0.isDec());
396:       assertFalse(node0.isVar());
397:       assertFalse(node0.isCall());
398:       assertFalse(node0.isEmpty());
399:       assertFalse(node0.isName());
400:       assertFalse(node0.isAdd());
401:       assertFalse(node0.isGetElem());
402:       assertFalse(node0.isDelProp());
403:       assertFalse(node0.isVoid());
404:       assertFalse(node0.isBreak());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isNull());
407:       assertFalse(node0.isTrue());
408:       assertFalse(node0.isOr());
409:       assertFalse(node0.isAnd());
410:       assertFalse(node0.isInstanceOf());
411:       assertFalse(node0.isGetProp());
412:       assertFalse(node0.isThis());
413:       assertFalse(node0.isExprResult());
414:       assertFalse(node0.isFalse());
415:       assertFalse(node0.isWith());
416:       assertFalse(node0.isComma());
417:       assertFalse(node0.isHook());
418:       assertFalse(node0.isCast());
419:       assertFalse(node0.isLabelName());
420:       assertFalse(node0.hasOneChild());
421:       assertFalse(node0.isScript());
422:       assertFalse(node0.isSwitch());
423:       assertFalse(node0.isNumber());
424:       assertFalse(node0.isNot());
425:       assertFalse(node0.isObjectLit());
426:       assertEquals((-1), node0.getCharno());
427:       assertEquals((-1), node0.getSourcePosition());
428:       assertFalse(node0.hasMoreThanOneChild());
429:       assertFalse(node0.isContinue());
430:       assertFalse(node0.isIn());
431:       assertFalse(node0.isCase());
432:       assertEquals((-1), node0.getLineno());
433:       assertFalse(node0.isFor());
434:       assertFalse(node0.isBlock());
435:       assertFalse(node0.isThrow());
436:       assertFalse(node0.isNE());
437:       assertFalse(node0.isInc());
438:       assertFalse(node0.isSetterDef());
439:       assertFalse(node0.isIf());
440:       
441:       boolean boolean1 = node0.isOnlyModifiesThisCall();
442:       assertFalse(boolean1);
443:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
444:       assertEquals(52, Node.LENGTH);
445:       assertEquals(15, Node.NO_SIDE_EFFECTS);
446:       assertEquals(40, Node.ORIGINALNAME_PROP);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(49, Node.DIRECT_EVAL);
449:       assertEquals(50, Node.FREE_CALL);
450:       assertEquals(51, Node.STATIC_SOURCE_FILE);
451:       assertEquals(57, Node.REFLECTED_OBJECT);
452:       assertEquals(46, Node.IS_NAMESPACE);
453:       assertEquals(54, Node.SLASH_V);
454:       assertEquals(8, Node.FLAG_NO_THROWS);
455:       assertEquals(2, Node.POST_FLAG);
456:       assertEquals(55, Node.INFERRED_FUNCTION);
457:       assertEquals(39, Node.EMPTY_BLOCK);
458:       assertEquals(29, Node.JSDOC_INFO_PROP);
459:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
460:       assertEquals(30, Node.VAR_ARGS_NAME);
461:       assertEquals(57, Node.LAST_PROP);
462:       assertEquals(47, Node.IS_DISPATCHER);
463:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
464:       assertEquals(53, Node.INPUT_ID);
465:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
468:       assertEquals(43, Node.IS_CONSTANT_NAME);
469:       assertEquals(56, Node.CHANGE_TIME);
470:       assertEquals(36, Node.QUOTED_PROP);
471:       assertEquals(37, Node.OPT_ARG_NAME);
472:       assertEquals(48, Node.DIRECTIVES);
473:       assertEquals(32, Node.INCRDECR_PROP);
474:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
475:       assertEquals(4095, Node.COLUMN_MASK);
476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertEquals(12, Node.COLUMN_BITS);
479:       assertTrue(boolean1 == boolean0);
480:       assertFalse(node0.isCatch());
481:       assertFalse(node0.isRegExp());
482:       assertFalse(node0.isDefaultCase());
483:       assertFalse(node0.isFunction());
484:       assertEquals(40, node0.getType());
485:       assertEquals(0, node0.getChildCount());
486:       assertFalse(node0.isArrayLit());
487:       assertFalse(node0.isStringKey());
488:       assertTrue(node0.isString());
489:       assertFalse(node0.isTry());
490:       assertFalse(node0.isParamList());
491:       assertFalse(node0.isDebugger());
492:       assertFalse(node0.isGetterDef());
493:       assertFalse(node0.isAssignAdd());
494:       assertFalse(node0.isDo());
495:       assertFalse(node0.isTypeOf());
496:       assertFalse(node0.isWhile());
497:       assertFalse(node0.isLabel());
498:       assertFalse(node0.isAssign());
499:       assertFalse(node0.isReturn());
500:       assertFalse(node0.hasChildren());
501:       assertFalse(node0.isDec());
502:       assertFalse(node0.isVar());
503:       assertFalse(node0.isCall());
504:       assertFalse(node0.isEmpty());
505:       assertFalse(node0.isName());
506:       assertFalse(node0.isAdd());
507:       assertFalse(node0.isGetElem());
508:       assertFalse(node0.isDelProp());
509:       assertFalse(node0.isVoid());
510:       assertFalse(node0.isBreak());
511:       assertFalse(node0.isNew());
512:       assertFalse(node0.isNull());
513:       assertFalse(node0.isTrue());
514:       assertFalse(node0.isOr());
515:       assertFalse(node0.isAnd());
516:       assertFalse(node0.isInstanceOf());
517:       assertFalse(node0.isGetProp());
518:       assertFalse(node0.isThis());
519:       assertFalse(node0.isExprResult());
520:       assertFalse(node0.isFalse());
521:       assertFalse(node0.isWith());
522:       assertFalse(node0.isComma());
523:       assertFalse(node0.isHook());
524:       assertFalse(node0.isCast());
525:       assertFalse(node0.isLabelName());
526:       assertFalse(node0.hasOneChild());
527:       assertFalse(node0.isScript());
528:       assertFalse(node0.isSwitch());
529:       assertFalse(node0.isNumber());
530:       assertFalse(node0.isNot());
531:       assertFalse(node0.isObjectLit());
532:       assertEquals((-1), node0.getCharno());
533:       assertEquals((-1), node0.getSourcePosition());
534:       assertFalse(node0.hasMoreThanOneChild());
535:       assertFalse(node0.isContinue());
536:       assertFalse(node0.isIn());
537:       assertFalse(node0.isCase());
538:       assertEquals((-1), node0.getLineno());
539:       assertFalse(node0.isFor());
540:       assertFalse(node0.isBlock());
541:       assertFalse(node0.isThrow());
542:       assertFalse(node0.isNE());
543:       assertFalse(node0.isInc());
544:       assertFalse(node0.isSetterDef());
545:       assertFalse(node0.isIf());
546:       
547:       Node node1 = null;
548:       // Undeclared exception!
549:       try { 
550:         node0.useSourceInfoIfMissingFrom((Node) null);
551:         fail("Expecting exception: NullPointerException");
552:       
553:       } catch(NullPointerException e) {
554:          //
555:          // no message in exception (getMessage() returned null)
556:          //
557:          verifyException("com.google.javascript.rhino.Node", e);
558:       }
559:   }
560: }
RegularFileObject[/tmp/EvoSuite_113_1628255589368/com/google/javascript/rhino/Node_113_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_113_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_113_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_113_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.ImmutableList$1",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 13:13:09.433 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("uv]46a9:im@r", (-5430), (-5430));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());
assertNotNull(iterable0);

node0.setIsSyntheticBlock(true);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());

boolean boolean0 = node0.isCase();
assertFalse(boolean0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());

boolean boolean1 = node0.isOnlyModifiesThisCall();
assertFalse(boolean1);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertTrue(boolean1 == boolean0);
assertFalse(node0.isCatch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isParamList());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isEmpty());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isNew());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertFalse(node0.isSwitch());
assertFalse(node0.isNumber());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFor());
assertFalse(node0.isBlock());
assertFalse(node0.isThrow());
assertFalse(node0.isNE());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIf());

Node node1 = null;
node0.useSourceInfoIfMissingFrom((Node) null);

[MASTER] 13:13:10.200 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_115_1628255590068/com/google/javascript/rhino/Node_115_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_115_1628255590068/com/google/javascript/rhino/Node_115_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:10.201 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:10.202 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:10.203 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 13:13:10.204 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_115_1628255590068/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:10 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_115_tmp__ESTest extends Node_115_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("uv]46a9:im@r", (-5430), (-5430));
21:       assertEquals(30, Node.VAR_ARGS_NAME);
22:       assertEquals(49, Node.DIRECT_EVAL);
23:       assertEquals(57, Node.LAST_PROP);
24:       assertEquals(54, Node.SLASH_V);
25:       assertEquals(51, Node.STATIC_SOURCE_FILE);
26:       assertEquals(12, Node.COLUMN_BITS);
27:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
28:       assertEquals(46, Node.IS_NAMESPACE);
29:       assertEquals(40, Node.ORIGINALNAME_PROP);
30:       assertEquals(37, Node.OPT_ARG_NAME);
31:       assertEquals(29, Node.JSDOC_INFO_PROP);
32:       assertEquals(56, Node.CHANGE_TIME);
33:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
34:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
35:       assertEquals(8, Node.FLAG_NO_THROWS);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(57, Node.REFLECTED_OBJECT);
38:       assertEquals(47, Node.IS_DISPATCHER);
39:       assertEquals(52, Node.LENGTH);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(55, Node.INFERRED_FUNCTION);
42:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
43:       assertEquals(53, Node.INPUT_ID);
44:       assertEquals(15, Node.NO_SIDE_EFFECTS);
45:       assertEquals(43, Node.IS_CONSTANT_NAME);
46:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(4095, Node.COLUMN_MASK);
50:       assertEquals(48, Node.DIRECTIVES);
51:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
52:       assertEquals(50, Node.FREE_CALL);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(32, Node.INCRDECR_PROP);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
57:       assertFalse(node0.isParamList());
58:       assertFalse(node0.isSetterDef());
59:       assertFalse(node0.isNull());
60:       assertEquals(0, node0.getChildCount());
61:       assertFalse(node0.isVar());
62:       assertEquals(40, node0.getType());
63:       assertFalse(node0.isDefaultCase());
64:       assertTrue(node0.isString());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isContinue());
68:       assertFalse(node0.isStringKey());
69:       assertFalse(node0.isArrayLit());
70:       assertFalse(node0.isNE());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isIn());
73:       assertFalse(node0.isNumber());
74:       assertFalse(node0.hasMoreThanOneChild());
75:       assertFalse(node0.isCase());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isInc());
80:       assertFalse(node0.isBlock());
81:       assertFalse(node0.isRegExp());
82:       assertFalse(node0.isWith());
83:       assertFalse(node0.isCatch());
84:       assertFalse(node0.isIf());
85:       assertEquals((-1), node0.getLineno());
86:       assertFalse(node0.isGetProp());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.isThis());
89:       assertFalse(node0.isInstanceOf());
90:       assertFalse(node0.isFalse());
91:       assertFalse(node0.isThrow());
92:       assertFalse(node0.isHook());
93:       assertEquals((-1), node0.getCharno());
94:       assertFalse(node0.isScript());
95:       assertFalse(node0.isNot());
96:       assertFalse(node0.isObjectLit());
97:       assertFalse(node0.isAnd());
98:       assertFalse(node0.isCast());
99:       assertFalse(node0.isSwitch());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isLabel());
102:       assertFalse(node0.isReturn());
103:       assertFalse(node0.hasChildren());
104:       assertEquals((-1), node0.getSourcePosition());
105:       assertFalse(node0.isDec());
106:       assertFalse(node0.isAssign());
107:       assertFalse(node0.isOr());
108:       assertFalse(node0.isTypeOf());
109:       assertFalse(node0.isEmpty());
110:       assertFalse(node0.isWhile());
111:       assertFalse(node0.isAssignAdd());
112:       assertFalse(node0.isDo());
113:       assertFalse(node0.isVoid());
114:       assertFalse(node0.isNew());
115:       assertFalse(node0.isAdd());
116:       assertFalse(node0.isTrue());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isCall());
119:       assertFalse(node0.isGetElem());
120:       assertFalse(node0.isDelProp());
121:       assertFalse(node0.isBreak());
122:       assertFalse(node0.isName());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(30, Node.VAR_ARGS_NAME);
128:       assertEquals(49, Node.DIRECT_EVAL);
129:       assertEquals(57, Node.LAST_PROP);
130:       assertEquals(54, Node.SLASH_V);
131:       assertEquals(51, Node.STATIC_SOURCE_FILE);
132:       assertEquals(12, Node.COLUMN_BITS);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(40, Node.ORIGINALNAME_PROP);
136:       assertEquals(37, Node.OPT_ARG_NAME);
137:       assertEquals(29, Node.JSDOC_INFO_PROP);
138:       assertEquals(56, Node.CHANGE_TIME);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
141:       assertEquals(8, Node.FLAG_NO_THROWS);
142:       assertEquals(2, Node.POST_FLAG);
143:       assertEquals(57, Node.REFLECTED_OBJECT);
144:       assertEquals(47, Node.IS_DISPATCHER);
145:       assertEquals(52, Node.LENGTH);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(55, Node.INFERRED_FUNCTION);
148:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
149:       assertEquals(53, Node.INPUT_ID);
150:       assertEquals(15, Node.NO_SIDE_EFFECTS);
151:       assertEquals(43, Node.IS_CONSTANT_NAME);
152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
153:       assertEquals(36, Node.QUOTED_PROP);
154:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(48, Node.DIRECTIVES);
157:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
158:       assertEquals(50, Node.FREE_CALL);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
163:       assertFalse(node0.isParamList());
164:       assertFalse(node0.isSetterDef());
165:       assertFalse(node0.isNull());
166:       assertEquals(0, node0.getChildCount());
167:       assertFalse(node0.isVar());
168:       assertEquals(40, node0.getType());
169:       assertFalse(node0.isDefaultCase());
170:       assertTrue(node0.isString());
171:       assertFalse(node0.isDebugger());
172:       assertFalse(node0.isFunction());
173:       assertFalse(node0.isContinue());
174:       assertFalse(node0.isStringKey());
175:       assertFalse(node0.isArrayLit());
176:       assertFalse(node0.isNE());
177:       assertFalse(node0.isGetterDef());
178:       assertFalse(node0.isIn());
179:       assertFalse(node0.isNumber());
180:       assertFalse(node0.hasMoreThanOneChild());
181:       assertFalse(node0.isCase());
182:       assertFalse(node0.isFor());
183:       assertFalse(node0.hasOneChild());
184:       assertFalse(node0.isTry());
185:       assertFalse(node0.isInc());
186:       assertFalse(node0.isBlock());
187:       assertFalse(node0.isRegExp());
188:       assertFalse(node0.isWith());
189:       assertFalse(node0.isCatch());
190:       assertFalse(node0.isIf());
191:       assertEquals((-1), node0.getLineno());
192:       assertFalse(node0.isGetProp());
193:       assertFalse(node0.isComma());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isInstanceOf());
196:       assertFalse(node0.isFalse());
197:       assertFalse(node0.isThrow());
198:       assertFalse(node0.isHook());
199:       assertEquals((-1), node0.getCharno());
200:       assertFalse(node0.isScript());
201:       assertFalse(node0.isNot());
202:       assertFalse(node0.isObjectLit());
203:       assertFalse(node0.isAnd());
204:       assertFalse(node0.isCast());
205:       assertFalse(node0.isSwitch());
206:       assertFalse(node0.isLabelName());
207:       assertFalse(node0.isLabel());
208:       assertFalse(node0.isReturn());
209:       assertFalse(node0.hasChildren());
210:       assertEquals((-1), node0.getSourcePosition());
211:       assertFalse(node0.isDec());
212:       assertFalse(node0.isAssign());
213:       assertFalse(node0.isOr());
214:       assertFalse(node0.isTypeOf());
215:       assertFalse(node0.isEmpty());
216:       assertFalse(node0.isWhile());
217:       assertFalse(node0.isAssignAdd());
218:       assertFalse(node0.isDo());
219:       assertFalse(node0.isVoid());
220:       assertFalse(node0.isNew());
221:       assertFalse(node0.isAdd());
222:       assertFalse(node0.isTrue());
223:       assertFalse(node0.isExprResult());
224:       assertFalse(node0.isCall());
225:       assertFalse(node0.isGetElem());
226:       assertFalse(node0.isDelProp());
227:       assertFalse(node0.isBreak());
228:       assertFalse(node0.isName());
229:       assertNotNull(iterable0);
230:       
231:       String string0 = node0.getString();
232:       assertEquals("uv]46a9:im@r", string0);
233:       assertEquals(30, Node.VAR_ARGS_NAME);
234:       assertEquals(49, Node.DIRECT_EVAL);
235:       assertEquals(57, Node.LAST_PROP);
236:       assertEquals(54, Node.SLASH_V);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(12, Node.COLUMN_BITS);
239:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(40, Node.ORIGINALNAME_PROP);
242:       assertEquals(37, Node.OPT_ARG_NAME);
243:       assertEquals(29, Node.JSDOC_INFO_PROP);
244:       assertEquals(56, Node.CHANGE_TIME);
245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
247:       assertEquals(8, Node.FLAG_NO_THROWS);
248:       assertEquals(2, Node.POST_FLAG);
249:       assertEquals(57, Node.REFLECTED_OBJECT);
250:       assertEquals(47, Node.IS_DISPATCHER);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(39, Node.EMPTY_BLOCK);
253:       assertEquals(55, Node.INFERRED_FUNCTION);
254:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
255:       assertEquals(53, Node.INPUT_ID);
256:       assertEquals(15, Node.NO_SIDE_EFFECTS);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
259:       assertEquals(36, Node.QUOTED_PROP);
260:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
261:       assertEquals(4095, Node.COLUMN_MASK);
262:       assertEquals(48, Node.DIRECTIVES);
263:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
266:       assertEquals(32, Node.INCRDECR_PROP);
267:       assertEquals(1, Node.DECR_FLAG);
268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
269:       assertFalse(node0.isParamList());
270:       assertFalse(node0.isSetterDef());
271:       assertFalse(node0.isNull());
272:       assertEquals(0, node0.getChildCount());
273:       assertFalse(node0.isVar());
274:       assertEquals(40, node0.getType());
275:       assertFalse(node0.isDefaultCase());
276:       assertTrue(node0.isString());
277:       assertFalse(node0.isDebugger());
278:       assertFalse(node0.isFunction());
279:       assertFalse(node0.isContinue());
280:       assertFalse(node0.isStringKey());
281:       assertFalse(node0.isArrayLit());
282:       assertFalse(node0.isNE());
283:       assertFalse(node0.isGetterDef());
284:       assertFalse(node0.isIn());
285:       assertFalse(node0.isNumber());
286:       assertFalse(node0.hasMoreThanOneChild());
287:       assertFalse(node0.isCase());
288:       assertFalse(node0.isFor());
289:       assertFalse(node0.hasOneChild());
290:       assertFalse(node0.isTry());
291:       assertFalse(node0.isInc());
292:       assertFalse(node0.isBlock());
293:       assertFalse(node0.isRegExp());
294:       assertFalse(node0.isWith());
295:       assertFalse(node0.isCatch());
296:       assertFalse(node0.isIf());
297:       assertEquals((-1), node0.getLineno());
298:       assertFalse(node0.isGetProp());
299:       assertFalse(node0.isComma());
300:       assertFalse(node0.isThis());
301:       assertFalse(node0.isInstanceOf());
302:       assertFalse(node0.isFalse());
303:       assertFalse(node0.isThrow());
304:       assertFalse(node0.isHook());
305:       assertEquals((-1), node0.getCharno());
306:       assertFalse(node0.isScript());
307:       assertFalse(node0.isNot());
308:       assertFalse(node0.isObjectLit());
309:       assertFalse(node0.isAnd());
310:       assertFalse(node0.isCast());
311:       assertFalse(node0.isSwitch());
312:       assertFalse(node0.isLabelName());
313:       assertFalse(node0.isLabel());
314:       assertFalse(node0.isReturn());
315:       assertFalse(node0.hasChildren());
316:       assertEquals((-1), node0.getSourcePosition());
317:       assertFalse(node0.isDec());
318:       assertFalse(node0.isAssign());
319:       assertFalse(node0.isOr());
320:       assertFalse(node0.isTypeOf());
321:       assertFalse(node0.isEmpty());
322:       assertFalse(node0.isWhile());
323:       assertFalse(node0.isAssignAdd());
324:       assertFalse(node0.isDo());
325:       assertFalse(node0.isVoid());
326:       assertFalse(node0.isNew());
327:       assertFalse(node0.isAdd());
328:       assertFalse(node0.isTrue());
329:       assertFalse(node0.isExprResult());
330:       assertFalse(node0.isCall());
331:       assertFalse(node0.isGetElem());
332:       assertFalse(node0.isDelProp());
333:       assertFalse(node0.isBreak());
334:       assertFalse(node0.isName());
335:       assertNotNull(string0);
336:       
337:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
338:       assertEquals(30, Node.VAR_ARGS_NAME);
339:       assertEquals(49, Node.DIRECT_EVAL);
340:       assertEquals(57, Node.LAST_PROP);
341:       assertEquals(54, Node.SLASH_V);
342:       assertEquals(51, Node.STATIC_SOURCE_FILE);
343:       assertEquals(12, Node.COLUMN_BITS);
344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
345:       assertEquals(46, Node.IS_NAMESPACE);
346:       assertEquals(40, Node.ORIGINALNAME_PROP);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(29, Node.JSDOC_INFO_PROP);
349:       assertEquals(56, Node.CHANGE_TIME);
350:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
351:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
352:       assertEquals(8, Node.FLAG_NO_THROWS);
353:       assertEquals(2, Node.POST_FLAG);
354:       assertEquals(57, Node.REFLECTED_OBJECT);
355:       assertEquals(47, Node.IS_DISPATCHER);
356:       assertEquals(52, Node.LENGTH);
357:       assertEquals(39, Node.EMPTY_BLOCK);
358:       assertEquals(55, Node.INFERRED_FUNCTION);
359:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(15, Node.NO_SIDE_EFFECTS);
362:       assertEquals(43, Node.IS_CONSTANT_NAME);
363:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
364:       assertEquals(36, Node.QUOTED_PROP);
365:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
366:       assertEquals(4095, Node.COLUMN_MASK);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
369:       assertEquals(50, Node.FREE_CALL);
370:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
371:       assertEquals(32, Node.INCRDECR_PROP);
372:       assertEquals(1, Node.DECR_FLAG);
373:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
374:       assertFalse(node0.isParamList());
375:       assertFalse(node0.isSetterDef());
376:       assertFalse(node0.isNull());
377:       assertEquals(0, node0.getChildCount());
378:       assertFalse(node0.isVar());
379:       assertEquals(40, node0.getType());
380:       assertFalse(node0.isDefaultCase());
381:       assertTrue(node0.isString());
382:       assertFalse(node0.isDebugger());
383:       assertFalse(node0.isFunction());
384:       assertFalse(node0.isContinue());
385:       assertFalse(node0.isStringKey());
386:       assertFalse(node0.isArrayLit());
387:       assertFalse(node0.isNE());
388:       assertFalse(node0.isGetterDef());
389:       assertFalse(node0.isIn());
390:       assertFalse(node0.isNumber());
391:       assertFalse(node0.hasMoreThanOneChild());
392:       assertFalse(node0.isCase());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.hasOneChild());
395:       assertFalse(node0.isTry());
396:       assertFalse(node0.isInc());
397:       assertFalse(node0.isBlock());
398:       assertFalse(node0.isRegExp());
399:       assertFalse(node0.isWith());
400:       assertFalse(node0.isCatch());
401:       assertFalse(node0.isIf());
402:       assertEquals((-1), node0.getLineno());
403:       assertFalse(node0.isGetProp());
404:       assertFalse(node0.isComma());
405:       assertFalse(node0.isThis());
406:       assertFalse(node0.isInstanceOf());
407:       assertFalse(node0.isFalse());
408:       assertFalse(node0.isThrow());
409:       assertFalse(node0.isHook());
410:       assertEquals((-1), node0.getCharno());
411:       assertFalse(node0.isScript());
412:       assertFalse(node0.isNot());
413:       assertFalse(node0.isObjectLit());
414:       assertFalse(node0.isAnd());
415:       assertFalse(node0.isCast());
416:       assertFalse(node0.isSwitch());
417:       assertFalse(node0.isLabelName());
418:       assertFalse(node0.isLabel());
419:       assertFalse(node0.isReturn());
420:       assertFalse(node0.hasChildren());
421:       assertEquals((-1), node0.getSourcePosition());
422:       assertFalse(node0.isDec());
423:       assertFalse(node0.isAssign());
424:       assertFalse(node0.isOr());
425:       assertFalse(node0.isTypeOf());
426:       assertFalse(node0.isEmpty());
427:       assertFalse(node0.isWhile());
428:       assertFalse(node0.isAssignAdd());
429:       assertFalse(node0.isDo());
430:       assertFalse(node0.isVoid());
431:       assertFalse(node0.isNew());
432:       assertFalse(node0.isAdd());
433:       assertFalse(node0.isTrue());
434:       assertFalse(node0.isExprResult());
435:       assertFalse(node0.isCall());
436:       assertFalse(node0.isGetElem());
437:       assertFalse(node0.isDelProp());
438:       assertFalse(node0.isBreak());
439:       assertFalse(node0.isName());
440:       assertNotNull(node_FileLevelJsDocBuilder0);
441:       
442:       boolean boolean0 = node0.getBooleanProp((-5430));
443:       assertFalse(boolean0);
444:       assertEquals(30, Node.VAR_ARGS_NAME);
445:       assertEquals(49, Node.DIRECT_EVAL);
446:       assertEquals(57, Node.LAST_PROP);
447:       assertEquals(54, Node.SLASH_V);
448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
449:       assertEquals(12, Node.COLUMN_BITS);
450:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
451:       assertEquals(46, Node.IS_NAMESPACE);
452:       assertEquals(40, Node.ORIGINALNAME_PROP);
453:       assertEquals(37, Node.OPT_ARG_NAME);
454:       assertEquals(29, Node.JSDOC_INFO_PROP);
455:       assertEquals(56, Node.CHANGE_TIME);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
458:       assertEquals(8, Node.FLAG_NO_THROWS);
459:       assertEquals(2, Node.POST_FLAG);
460:       assertEquals(57, Node.REFLECTED_OBJECT);
461:       assertEquals(47, Node.IS_DISPATCHER);
462:       assertEquals(52, Node.LENGTH);
463:       assertEquals(39, Node.EMPTY_BLOCK);
464:       assertEquals(55, Node.INFERRED_FUNCTION);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(53, Node.INPUT_ID);
467:       assertEquals(15, Node.NO_SIDE_EFFECTS);
468:       assertEquals(43, Node.IS_CONSTANT_NAME);
469:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
470:       assertEquals(36, Node.QUOTED_PROP);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(4095, Node.COLUMN_MASK);
473:       assertEquals(48, Node.DIRECTIVES);
474:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
475:       assertEquals(50, Node.FREE_CALL);
476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
477:       assertEquals(32, Node.INCRDECR_PROP);
478:       assertEquals(1, Node.DECR_FLAG);
479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
480:       assertFalse(node0.isParamList());
481:       assertFalse(node0.isSetterDef());
482:       assertFalse(node0.isNull());
483:       assertEquals(0, node0.getChildCount());
484:       assertFalse(node0.isVar());
485:       assertEquals(40, node0.getType());
486:       assertFalse(node0.isDefaultCase());
487:       assertTrue(node0.isString());
488:       assertFalse(node0.isDebugger());
489:       assertFalse(node0.isFunction());
490:       assertFalse(node0.isContinue());
491:       assertFalse(node0.isStringKey());
492:       assertFalse(node0.isArrayLit());
493:       assertFalse(node0.isNE());
494:       assertFalse(node0.isGetterDef());
495:       assertFalse(node0.isIn());
496:       assertFalse(node0.isNumber());
497:       assertFalse(node0.hasMoreThanOneChild());
498:       assertFalse(node0.isCase());
499:       assertFalse(node0.isFor());
500:       assertFalse(node0.hasOneChild());
501:       assertFalse(node0.isTry());
502:       assertFalse(node0.isInc());
503:       assertFalse(node0.isBlock());
504:       assertFalse(node0.isRegExp());
505:       assertFalse(node0.isWith());
506:       assertFalse(node0.isCatch());
507:       assertFalse(node0.isIf());
508:       assertEquals((-1), node0.getLineno());
509:       assertFalse(node0.isGetProp());
510:       assertFalse(node0.isComma());
511:       assertFalse(node0.isThis());
512:       assertFalse(node0.isInstanceOf());
513:       assertFalse(node0.isFalse());
514:       assertFalse(node0.isThrow());
515:       assertFalse(node0.isHook());
516:       assertEquals((-1), node0.getCharno());
517:       assertFalse(node0.isScript());
518:       assertFalse(node0.isNot());
519:       assertFalse(node0.isObjectLit());
520:       assertFalse(node0.isAnd());
521:       assertFalse(node0.isCast());
522:       assertFalse(node0.isSwitch());
523:       assertFalse(node0.isLabelName());
524:       assertFalse(node0.isLabel());
525:       assertFalse(node0.isReturn());
526:       assertFalse(node0.hasChildren());
527:       assertEquals((-1), node0.getSourcePosition());
528:       assertFalse(node0.isDec());
529:       assertFalse(node0.isAssign());
530:       assertFalse(node0.isOr());
531:       assertFalse(node0.isTypeOf());
532:       assertFalse(node0.isEmpty());
533:       assertFalse(node0.isWhile());
534:       assertFalse(node0.isAssignAdd());
535:       assertFalse(node0.isDo());
536:       assertFalse(node0.isVoid());
537:       assertFalse(node0.isNew());
538:       assertFalse(node0.isAdd());
539:       assertFalse(node0.isTrue());
540:       assertFalse(node0.isExprResult());
541:       assertFalse(node0.isCall());
542:       assertFalse(node0.isGetElem());
543:       assertFalse(node0.isDelProp());
544:       assertFalse(node0.isBreak());
545:       assertFalse(node0.isName());
546:       
547:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(155);
548:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
549:       assertEquals(155, node_SideEffectFlags0.valueOf());
550:       assertNotNull(node_SideEffectFlags0);
551:       
552:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
553:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
554:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
555:       assertEquals(0, node_SideEffectFlags0.valueOf());
556:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
557:       assertEquals(0, node_SideEffectFlags1.valueOf());
558:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
559:       assertNotNull(node_SideEffectFlags1);
560:       
561:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
562:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
563:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
564:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
565:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
566:       assertEquals(0, node_SideEffectFlags0.valueOf());
567:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
568:       assertEquals(0, node_SideEffectFlags2.valueOf());
569:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
570:       assertNotNull(node_SideEffectFlags2);
571:       
572:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
573:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
574:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
575:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
576:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
577:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
578:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
579:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
580:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
581:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
582:       assertEquals(0, node_SideEffectFlags0.valueOf());
583:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
584:       assertEquals(0, node_SideEffectFlags2.valueOf());
585:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
586:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
587:       assertEquals(0, node_SideEffectFlags3.valueOf());
588:       assertNotNull(node_SideEffectFlags3);
589:       
590:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
591:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
592:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
593:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
594:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
595:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
596:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
597:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
598:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
599:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
600:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
601:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
602:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
603:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
604:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
605:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
606:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
607:       assertEquals(0, node_SideEffectFlags0.valueOf());
608:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
609:       assertEquals(0, node_SideEffectFlags2.valueOf());
610:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
611:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
612:       assertEquals(0, node_SideEffectFlags3.valueOf());
613:       assertEquals(0, node_SideEffectFlags4.valueOf());
614:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
615:       assertNotNull(node_SideEffectFlags4);
616:       
617:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
618:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
619:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
620:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
621:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
622:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
623:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
624:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
625:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
626:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
627:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
628:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
629:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
630:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
631:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
632:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
633:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
634:       assertEquals(31, node_SideEffectFlags0.valueOf());
635:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
636:       assertEquals(31, node_SideEffectFlags1.valueOf());
637:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
638:       assertEquals(31, node_SideEffectFlags5.valueOf());
639:       assertNotNull(node_SideEffectFlags5);
640:       
641:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setThrows();
642:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
643:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
644:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
645:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
646:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
647:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
648:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
649:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
650:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
651:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
652:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
653:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
654:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
655:       assertEquals(23, node_SideEffectFlags0.valueOf());
656:       assertEquals(23, node_SideEffectFlags6.valueOf());
657:       assertFalse(node_SideEffectFlags6.areAllFlagsSet());
658:       assertNotNull(node_SideEffectFlags6);
659:       
660:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags1.setReturnsTainted();
661:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
662:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
663:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
664:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
665:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
666:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
667:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
668:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
669:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
670:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
671:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
672:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
673:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
674:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
675:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
676:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
677:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
678:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
679:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
680:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
681:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
682:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
683:       assertEquals(7, node_SideEffectFlags0.valueOf());
684:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
685:       assertEquals(7, node_SideEffectFlags1.valueOf());
686:       assertFalse(node_SideEffectFlags7.areAllFlagsSet());
687:       assertEquals(7, node_SideEffectFlags7.valueOf());
688:       assertNotNull(node_SideEffectFlags7);
689:       
690:       Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setReturnsTainted();
691:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
692:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
693:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
694:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
695:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
696:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
697:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
698:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
699:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
700:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
701:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
702:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
703:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
704:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
705:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
706:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
707:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
708:       assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
709:       assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
710:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
711:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
712:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
713:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
714:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
715:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
716:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
717:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
718:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
719:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
720:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
721:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
722:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
723:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
724:       assertEquals(7, node_SideEffectFlags0.valueOf());
725:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
726:       assertEquals(7, node_SideEffectFlags1.valueOf());
727:       assertEquals(7, node_SideEffectFlags5.valueOf());
728:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
729:       assertFalse(node_SideEffectFlags8.areAllFlagsSet());
730:       assertEquals(7, node_SideEffectFlags8.valueOf());
731:       assertNotNull(node_SideEffectFlags8);
732:       
733:       Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setThrows();
734:       assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
735:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
736:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
737:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
738:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
739:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
740:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
741:       assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
742:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
743:       assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
744:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
745:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
746:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
747:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
748:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
749:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
750:       assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
751:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
752:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
753:       assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
754:       assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
755:       assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
756:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
757:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
758:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
759:       assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
760:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
761:       assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
762:       assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
763:       assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
764:       assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
765:       assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
766:       assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
767:       assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
768:       assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
769:       assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
770:       assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
771:       assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
772:       assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
773:       assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
774:       assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
775:       assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
776:       assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
777:       assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
778:       assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
779:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
780:       assertEquals(7, node_SideEffectFlags0.valueOf());
781:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
782:       assertEquals(7, node_SideEffectFlags1.valueOf());
783:       assertEquals(7, node_SideEffectFlags5.valueOf());
784:       assertFalse(node_SideEffectFlags5.areAllFlagsSet());
785:       assertFalse(node_SideEffectFlags8.areAllFlagsSet());
786:       assertEquals(7, node_SideEffectFlags8.valueOf());
787:       assertEquals(7, node_SideEffectFlags9.valueOf());
788:       assertFalse(node_SideEffectFlags9.areAllFlagsSet());
789:       assertNotNull(node_SideEffectFlags9);
790:       
791:       node0.setSourceEncodedPositionForTree(0);
792:       assertEquals(30, Node.VAR_ARGS_NAME);
793:       assertEquals(49, Node.DIRECT_EVAL);
794:       assertEquals(57, Node.LAST_PROP);
795:       assertEquals(54, Node.SLASH_V);
796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
797:       assertEquals(12, Node.COLUMN_BITS);
798:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
799:       assertEquals(46, Node.IS_NAMESPACE);
800:       assertEquals(40, Node.ORIGINALNAME_PROP);
801:       assertEquals(37, Node.OPT_ARG_NAME);
802:       assertEquals(29, Node.JSDOC_INFO_PROP);
803:       assertEquals(56, Node.CHANGE_TIME);
804:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
805:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
806:       assertEquals(8, Node.FLAG_NO_THROWS);
807:       assertEquals(2, Node.POST_FLAG);
808:       assertEquals(57, Node.REFLECTED_OBJECT);
809:       assertEquals(47, Node.IS_DISPATCHER);
810:       assertEquals(52, Node.LENGTH);
811:       assertEquals(39, Node.EMPTY_BLOCK);
812:       assertEquals(55, Node.INFERRED_FUNCTION);
813:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
814:       assertEquals(53, Node.INPUT_ID);
815:       assertEquals(15, Node.NO_SIDE_EFFECTS);
816:       assertEquals(43, Node.IS_CONSTANT_NAME);
817:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
818:       assertEquals(36, Node.QUOTED_PROP);
819:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
820:       assertEquals(4095, Node.COLUMN_MASK);
821:       assertEquals(48, Node.DIRECTIVES);
822:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
823:       assertEquals(50, Node.FREE_CALL);
824:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
825:       assertEquals(32, Node.INCRDECR_PROP);
826:       assertEquals(1, Node.DECR_FLAG);
827:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
828:       assertFalse(node0.isParamList());
829:       assertEquals(0, node0.getLineno());
830:       assertFalse(node0.isSetterDef());
831:       assertFalse(node0.isNull());
832:       assertEquals(0, node0.getSourcePosition());
833:       assertEquals(0, node0.getChildCount());
834:       assertFalse(node0.isVar());
835:       assertEquals(40, node0.getType());
836:       assertFalse(node0.isDefaultCase());
837:       assertTrue(node0.isString());
838:       assertFalse(node0.isDebugger());
839:       assertFalse(node0.isFunction());
840:       assertFalse(node0.isContinue());
841:       assertFalse(node0.isStringKey());
842:       assertFalse(node0.isArrayLit());
843:       assertFalse(node0.isNE());
844:       assertFalse(node0.isGetterDef());
845:       assertFalse(node0.isIn());
846:       assertFalse(node0.isNumber());
847:       assertFalse(node0.hasMoreThanOneChild());
848:       assertFalse(node0.isCase());
849:       assertFalse(node0.isFor());
850:       assertFalse(node0.hasOneChild());
851:       assertFalse(node0.isTry());
852:       assertFalse(node0.isInc());
853:       assertEquals(0, node0.getCharno());
854:       assertFalse(node0.isBlock());
855:       assertFalse(node0.isRegExp());
856:       assertFalse(node0.isWith());
857:       assertFalse(node0.isCatch());
858:       assertFalse(node0.isIf());
859:       assertFalse(node0.isGetProp());
860:       assertFalse(node0.isComma());
861:       assertFalse(node0.isThis());
862:       assertFalse(node0.isInstanceOf());
863:       assertFalse(node0.isFalse());
864:       assertFalse(node0.isThrow());
865:       assertFalse(node0.isHook());
866:       assertFalse(node0.isScript());
867:       assertFalse(node0.isNot());
868:       assertFalse(node0.isObjectLit());
869:       assertFalse(node0.isAnd());
870:       assertFalse(node0.isCast());
871:       assertFalse(node0.isSwitch());
872:       assertFalse(node0.isLabelName());
873:       assertFalse(node0.isLabel());
874:       assertFalse(node0.isReturn());
875:       assertFalse(node0.hasChildren());
876:       assertFalse(node0.isDec());
877:       assertFalse(node0.isAssign());
878:       assertFalse(node0.isOr());
879:       assertFalse(node0.isTypeOf());
880:       assertFalse(node0.isEmpty());
881:       assertFalse(node0.isWhile());
882:       assertFalse(node0.isAssignAdd());
883:       assertFalse(node0.isDo());
884:       assertFalse(node0.isVoid());
885:       assertFalse(node0.isNew());
886:       assertFalse(node0.isAdd());
887:       assertFalse(node0.isTrue());
888:       assertFalse(node0.isExprResult());
889:       assertFalse(node0.isCall());
890:       assertFalse(node0.isGetElem());
891:       assertFalse(node0.isDelProp());
892:       assertFalse(node0.isBreak());
893:       assertFalse(node0.isName());
894:       
895:       Node node1 = node0.getFirstChild();
896:       assertEquals(30, Node.VAR_ARGS_NAME);
897:       assertEquals(49, Node.DIRECT_EVAL);
898:       assertEquals(57, Node.LAST_PROP);
899:       assertEquals(54, Node.SLASH_V);
900:       assertEquals(51, Node.STATIC_SOURCE_FILE);
901:       assertEquals(12, Node.COLUMN_BITS);
902:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
903:       assertEquals(46, Node.IS_NAMESPACE);
904:       assertEquals(40, Node.ORIGINALNAME_PROP);
905:       assertEquals(37, Node.OPT_ARG_NAME);
906:       assertEquals(29, Node.JSDOC_INFO_PROP);
907:       assertEquals(56, Node.CHANGE_TIME);
908:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
909:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
910:       assertEquals(8, Node.FLAG_NO_THROWS);
911:       assertEquals(2, Node.POST_FLAG);
912:       assertEquals(57, Node.REFLECTED_OBJECT);
913:       assertEquals(47, Node.IS_DISPATCHER);
914:       assertEquals(52, Node.LENGTH);
915:       assertEquals(39, Node.EMPTY_BLOCK);
916:       assertEquals(55, Node.INFERRED_FUNCTION);
917:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
918:       assertEquals(53, Node.INPUT_ID);
919:       assertEquals(15, Node.NO_SIDE_EFFECTS);
920:       assertEquals(43, Node.IS_CONSTANT_NAME);
921:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
922:       assertEquals(36, Node.QUOTED_PROP);
923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
924:       assertEquals(4095, Node.COLUMN_MASK);
925:       assertEquals(48, Node.DIRECTIVES);
926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
927:       assertEquals(50, Node.FREE_CALL);
928:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
929:       assertEquals(32, Node.INCRDECR_PROP);
930:       assertEquals(1, Node.DECR_FLAG);
931:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
932:       assertFalse(node0.isParamList());
933:       assertEquals(0, node0.getLineno());
934:       assertFalse(node0.isSetterDef());
935:       assertFalse(node0.isNull());
936:       assertEquals(0, node0.getSourcePosition());
937:       assertEquals(0, node0.getChildCount());
938:       assertFalse(node0.isVar());
939:       assertEquals(40, node0.getType());
940:       assertFalse(node0.isDefaultCase());
941:       assertTrue(node0.isString());
942:       assertFalse(node0.isDebugger());
943:       assertFalse(node0.isFunction());
944:       assertFalse(node0.isContinue());
945:       assertFalse(node0.isStringKey());
946:       assertFalse(node0.isArrayLit());
947:       assertFalse(node0.isNE());
948:       assertFalse(node0.isGetterDef());
949:       assertFalse(node0.isIn());
950:       assertFalse(node0.isNumber());
951:       assertFalse(node0.hasMoreThanOneChild());
952:       assertFalse(node0.isCase());
953:       assertFalse(node0.isFor());
954:       assertFalse(node0.hasOneChild());
955:       assertFalse(node0.isTry());
956:       assertFalse(node0.isInc());
957:       assertEquals(0, node0.getCharno());
958:       assertFalse(node0.isBlock());
959:       assertFalse(node0.isRegExp());
960:       assertFalse(node0.isWith());
961:       assertFalse(node0.isCatch());
962:       assertFalse(node0.isIf());
963:       assertFalse(node0.isGetProp());
964:       assertFalse(node0.isComma());
965:       assertFalse(node0.isThis());
966:       assertFalse(node0.isInstanceOf());
967:       assertFalse(node0.isFalse());
968:       assertFalse(node0.isThrow());
969:       assertFalse(node0.isHook());
970:       assertFalse(node0.isScript());
971:       assertFalse(node0.isNot());
972:       assertFalse(node0.isObjectLit());
973:       assertFalse(node0.isAnd());
974:       assertFalse(node0.isCast());
975:       assertFalse(node0.isSwitch());
976:       assertFalse(node0.isLabelName());
977:       assertFalse(node0.isLabel());
978:       assertFalse(node0.isReturn());
979:       assertFalse(node0.hasChildren());
980:       assertFalse(node0.isDec());
981:       assertFalse(node0.isAssign());
982:       assertFalse(node0.isOr());
983:       assertFalse(node0.isTypeOf());
984:       assertFalse(node0.isEmpty());
985:       assertFalse(node0.isWhile());
986:       assertFalse(node0.isAssignAdd());
987:       assertFalse(node0.isDo());
988:       assertFalse(node0.isVoid());
989:       assertFalse(node0.isNew());
990:       assertFalse(node0.isAdd());
991:       assertFalse(node0.isTrue());
992:       assertFalse(node0.isExprResult());
993:       assertFalse(node0.isCall());
994:       assertFalse(node0.isGetElem());
995:       assertFalse(node0.isDelProp());
996:       assertFalse(node0.isBreak());
997:       assertFalse(node0.isName());
998:       assertNull(node1);
999:   }
1000: }
RegularFileObject[/tmp/EvoSuite_115_1628255590068/com/google/javascript/rhino/Node_115_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:10 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_115_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_115_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_115_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.common.base.Preconditions",
260:       "com.google.javascript.rhino.Token",
261:       "com.google.javascript.rhino.SimpleErrorReporter",
262:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
263:       "com.google.common.base.Joiner",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.JSDocInfo",
332:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
333:       "com.google.javascript.rhino.Node$AncestorIterable$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.common.collect.Sets",
337:       "com.google.common.base.Objects",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.jstype.TemplatizedType",
341:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.ImmutableList$1",
344:       "com.google.common.collect.Iterators$11",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.ImmutableSet",
347:       "com.google.common.collect.EmptyImmutableSet",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.common.collect.Iterables",
350:       "com.google.common.collect.Platform",
351:       "com.google.common.collect.AbstractMultimap$Values",
352:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
353:       "com.google.common.collect.AbstractMapBasedMultimap$1",
354:       "com.google.common.collect.Multimaps$Entries",
355:       "com.google.common.collect.AbstractMultimap$Entries",
356:       "com.google.common.collect.AbstractMapBasedMultimap$2",
357:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
358:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
359:     );
360:   }
361: }

[MASTER] 13:13:10.232 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("uv]46a9:im@r", (-5430), (-5430));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertNotNull(iterable0);

String string0 = node0.getString();
assertEquals("uv]46a9:im@r", string0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertNotNull(string0);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertNotNull(node_FileLevelJsDocBuilder0);

boolean boolean0 = node0.getBooleanProp((-5430));
assertFalse(boolean0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(155);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(155, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setMutatesThis();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertEquals(0, node_SideEffectFlags4.valueOf());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertNotNull(node_SideEffectFlags4);

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags1.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags5.valueOf());
assertNotNull(node_SideEffectFlags5);

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(23, node_SideEffectFlags0.valueOf());
assertEquals(23, node_SideEffectFlags6.valueOf());
assertFalse(node_SideEffectFlags6.areAllFlagsSet());
assertNotNull(node_SideEffectFlags6);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags1.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags7.valueOf());
assertNotNull(node_SideEffectFlags7);

Node.SideEffectFlags node_SideEffectFlags8 = node_SideEffectFlags5.setReturnsTainted();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags1.valueOf());
assertEquals(7, node_SideEffectFlags5.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertFalse(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags8.valueOf());
assertNotNull(node_SideEffectFlags8);

Node.SideEffectFlags node_SideEffectFlags9 = node_SideEffectFlags8.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags9);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags8);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags8);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags9);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags8);
assertSame(node_SideEffectFlags5, node_SideEffectFlags7);
assertSame(node_SideEffectFlags5, node_SideEffectFlags9);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags6);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags8, node_SideEffectFlags7);
assertSame(node_SideEffectFlags8, node_SideEffectFlags9);
assertSame(node_SideEffectFlags8, node_SideEffectFlags5);
assertSame(node_SideEffectFlags8, node_SideEffectFlags0);
assertSame(node_SideEffectFlags8, node_SideEffectFlags4);
assertSame(node_SideEffectFlags8, node_SideEffectFlags6);
assertSame(node_SideEffectFlags8, node_SideEffectFlags1);
assertSame(node_SideEffectFlags8, node_SideEffectFlags2);
assertSame(node_SideEffectFlags8, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags3);
assertSame(node_SideEffectFlags9, node_SideEffectFlags7);
assertSame(node_SideEffectFlags9, node_SideEffectFlags4);
assertSame(node_SideEffectFlags9, node_SideEffectFlags5);
assertSame(node_SideEffectFlags9, node_SideEffectFlags1);
assertSame(node_SideEffectFlags9, node_SideEffectFlags6);
assertSame(node_SideEffectFlags9, node_SideEffectFlags2);
assertSame(node_SideEffectFlags9, node_SideEffectFlags8);
assertSame(node_SideEffectFlags9, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags1.valueOf());
assertEquals(7, node_SideEffectFlags5.valueOf());
assertFalse(node_SideEffectFlags5.areAllFlagsSet());
assertFalse(node_SideEffectFlags8.areAllFlagsSet());
assertEquals(7, node_SideEffectFlags8.valueOf());
assertEquals(7, node_SideEffectFlags9.valueOf());
assertFalse(node_SideEffectFlags9.areAllFlagsSet());
assertNotNull(node_SideEffectFlags9);

node0.setSourceEncodedPositionForTree(0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());

Node node1 = node0.getFirstChild();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getSourcePosition());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isDefaultCase());
assertTrue(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isInc());
assertEquals(0, node0.getCharno());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isIf());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isScript());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isSwitch());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isTypeOf());
assertFalse(node0.isEmpty());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isName());
assertNull(node1);


[MASTER] 13:13:40.161 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:13:40.531 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:13:41.181 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/4
* Done!

* Computation finished
