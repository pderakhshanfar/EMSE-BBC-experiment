* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 20909
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3513269630
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:07:37.548 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:07:38.007 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: root-Branch in context: com.google.javascript.rhino.Node:<init>(ILcom/google/javascript/rhino/Node;II)V
[MASTER] 13:07:38.112 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true
[MASTER] 13:07:38.152 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true
[MASTER] 13:07:38.154 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 3555: com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V:972 - ReplaceComparisonOperator == -> -2
[MASTER] 13:07:38.155 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Weak Mutation 4912: com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;:1334 - ReplaceComparisonOperator <= -> -1
[MASTER] 13:07:38.242 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - false
[MASTER] 13:07:38.258 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V
[MASTER] 13:07:38.782 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:07:39.450 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true
[MASTER] 13:07:39.451 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was Branch com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch in context: com.google.javascript.rhino.Node:appendStringTree(Ljava/lang/Appendable;)V
[MASTER] 13:07:39.462 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHOD] com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V
[MASTER] 13:07:39.463 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V
[MASTER] 13:08:04.668 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 809,0,0| Number of FF evals: 385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 3225,2803,0| Number of FF evals: 7969
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 21,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 2618,2323,2| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 5,0,0| Number of FF evals: 588
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 16829,14431,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 17955,15586,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 150,0,0| Number of FF evals: 806
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 1195,0,0| Number of FF evals: 838
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 280,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 280,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 368,0,0| Number of FF evals: 278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 18951,15130,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 974,0,0| Number of FF evals: 663
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 809,0,0| Number of FF evals: 575
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 2568,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 3245,0,0| Number of FF evals: 1050
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 716,50,0| Number of FF evals: 2181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 572,0,0| Number of FF evals: 1466
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 9464,8628,15| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 70,0,0| Number of FF evals: 530
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 57,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 28,0,0| Number of FF evals: 308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 3722,3056,4| Number of FF evals: 15494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 3067,2717,256| Number of FF evals: 11882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 574,0,0| Number of FF evals: 642
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 3269,865,0| Number of FF evals: 2432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 1645,0,0| Number of FF evals: 651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 2104,1178,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 1645,0,0| Number of FF evals: 651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 12506,11427,200| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 52,0,0| Number of FF evals: 206
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2119,1404,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 2129,1837,16| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 809,0,0| Number of FF evals: 380
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 1645,0,0| Number of FF evals: 651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 1645,0,0| Number of FF evals: 651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 5609,5114,285| Number of FF evals: 15557
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 66477,60024,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 3,0,0| Number of FF evals: 607
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 2235,0,0| Number of FF evals: 1726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: root-Branch: 41,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 2868,301,0| Number of FF evals: 2107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 562,0,0| Number of FF evals: 550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setThrows()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2096: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setThrows()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2097: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 195,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 8925,3677,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 22,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 22,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 22,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 2840,297,0| Number of FF evals: 1970
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 60,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 10356,7813,0| Number of FF evals: 5111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 2840,297,0| Number of FF evals: 1970
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 3887,3387,12| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 4993,0,0| Number of FF evals: 1822
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 85,0,0| Number of FF evals: 363
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 45,0,0| Number of FF evals: 275
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 280,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 372,0,0| Number of FF evals: 1630
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 181,0,0| Number of FF evals: 837
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2274,1979,2| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 45,0,0| Number of FF evals: 275
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 1934,971,0| Number of FF evals: 3617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2091: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2092: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 201,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 14803,13613,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 66477,60024,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 690,0,0| Number of FF evals: 351
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 66477,60024,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 114,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 1535,0,0| Number of FF evals: 1137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 1799,0,0| Number of FF evals: 660
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 4686,3588,0| Number of FF evals: 6072
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2197,1905,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 690,0,0| Number of FF evals: 358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 368,0,0| Number of FF evals: 188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 5,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 4699,4390,382| Number of FF evals: 15553
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 469,0,0| Number of FF evals: 237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2089: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2090: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 7071,1025,0| Number of FF evals: 2509
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 368,0,0| Number of FF evals: 196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 5716,0,0| Number of FF evals: 1746
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 114,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 114,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 969,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 195,0,0| Number of FF evals: 515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 13789,12935,0| Number of FF evals: 12775
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 809,0,0| Number of FF evals: 460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 114,0,0| Number of FF evals: 81
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 2408,0,0| Number of FF evals: 846
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 3245,0,0| Number of FF evals: 1701
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 7045,3536,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 3614,1071,0| Number of FF evals: 2250
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 2748,2223,0| Number of FF evals: 9778
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 2840,297,0| Number of FF evals: 2116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 930,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 280,0,0| Number of FF evals: 753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 195,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 114,0,0| Number of FF evals: 133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 930,0,0| Number of FF evals: 955
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1062,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 4284,3035,0| Number of FF evals: 6053
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 17544,15106,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 69,0,0| Number of FF evals: 314
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 17805,15442,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 574,0,0| Number of FF evals: 302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 574,0,0| Number of FF evals: 302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 1799,0,0| Number of FF evals: 1045
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 368,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 280,0,0| Number of FF evals: 374
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 4284,3035,0| Number of FF evals: 6053
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 368,0,0| Number of FF evals: 435
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 280,0,0| Number of FF evals: 194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 114,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2485,438,0| Number of FF evals: 3675
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 114,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 3075,0,0| Number of FF evals: 1365
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 114,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 619,327,0| Number of FF evals: 5303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 41,0,0| Number of FF evals: 1099
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 195,0,0| Number of FF evals: 735
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 661,72,0| Number of FF evals: 2086
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 9448,8613,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 809,0,0| Number of FF evals: 385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 25616,21012,0| Number of FF evals: 15077
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 451,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 2538,1949,0| Number of FF evals: 8610
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 114,0,0| Number of FF evals: 540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 195,0,0| Number of FF evals: 138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 370: 36,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 187,0,0| Number of FF evals: 496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 367: 36,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 2093,774,0| Number of FF evals: 2869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 1195,0,0| Number of FF evals: 517
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 256,0,0| Number of FF evals: 155
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 2427,2132,38| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 669: 114,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 170,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1049,360,0| Number of FF evals: 2819
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 13,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 376: 36,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 375: 36,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 374: 36,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 373: 36,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 372: 36,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 66477,60024,0| Number of FF evals: 15549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 371: 36,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 469,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 90,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 4929,4288,0| Number of FF evals: 15461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 12683,10309,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 4929,4288,0| Number of FF evals: 15461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 187,0,0| Number of FF evals: 243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 522,0,0| Number of FF evals: 1230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 195,0,0| Number of FF evals: 122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 379,0,0| Number of FF evals: 1883
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 187,0,0| Number of FF evals: 243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 187,0,0| Number of FF evals: 243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 368,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 226,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 368,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 195,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 368,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 195,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 368,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 368,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 114,0,0| Number of FF evals: 539
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 368,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 195,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 276,0,0| Number of FF evals: 1632
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 1498,0,0| Number of FF evals: 585
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 778,426,0| Number of FF evals: 5086
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 4721,4420,0| Number of FF evals: 15429
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 5140,4516,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 3075,0,0| Number of FF evals: 1014
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 5140,4516,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 5140,4516,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 5140,4516,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 2197,1905,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 690,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 6623,5557,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 33,0,0| Number of FF evals: 320
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 13555,12140,168| Number of FF evals: 15392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: Line 1616: 280,0,0| Number of FF evals: 148
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 1195,0,0| Number of FF evals: 578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 2247,0,0| Number of FF evals: 803
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 1391,737,0| Number of FF evals: 4156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 690,0,0| Number of FF evals: 557
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1934,0,0| Number of FF evals: 1012
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 7252,1801,0| Number of FF evals: 6127
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 5,0,0| Number of FF evals: 584
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 1796,0,0| Number of FF evals: 710
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 3,0,0| Number of FF evals: 608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 5168,0,0| Number of FF evals: 1714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 173,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 78,0,0| Number of FF evals: 390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 13258,11843,4| Number of FF evals: 15392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 1645,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 1967,552,0| Number of FF evals: 2710
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 1645,0,0| Number of FF evals: 785
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 12848,11921,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 884,0,0| Number of FF evals: 1622
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1015,330,0| Number of FF evals: 2756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 1342,0,0| Number of FF evals: 559
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 280,0,0| Number of FF evals: 899
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 2540,1385,0| Number of FF evals: 7059
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 2970,0,0| Number of FF evals: 1222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 21,0,0| Number of FF evals: 586
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 66477,60024,44076| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 195,0,0| Number of FF evals: 991
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 1322,69,0| Number of FF evals: 1855
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 9568,8709,96| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 2970,0,0| Number of FF evals: 1182
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2811,2568,109| Number of FF evals: 15090
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2111: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 1670,1427,13| Number of FF evals: 9856
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setReturnsTainted()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2112: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 12439,11186,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 114,0,0| Number of FF evals: 566
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 12439,11186,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 12439,11186,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 285,0,0| Number of FF evals: 1719
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 12439,11186,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 12439,11186,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 12439,11186,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 809,0,0| Number of FF evals: 389
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 21,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 195,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 98,0,0| Number of FF evals: 524
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 930,0,0| Number of FF evals: 423
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 9495,8739,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 9495,8739,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 41,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 280,0,0| Number of FF evals: 292
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 143,0,0| Number of FF evals: 215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 13131,11811,17| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 41,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1024: 41,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 126,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 280,0,0| Number of FF evals: 231
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 41,0,0| Number of FF evals: 141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 1322,69,0| Number of FF evals: 1928
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 11997,10744,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 2907,0,0| Number of FF evals: 968
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 280,0,0| Number of FF evals: 186
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 4003,2806,0| Number of FF evals: 6099
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setThrows()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 41,0,0| Number of FF evals: 1089
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 348,108,2| Number of FF evals: 2745
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 368,0,0| Number of FF evals: 366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 574,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2447,2207,79| Number of FF evals: 15557
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 10710,7665,0| Number of FF evals: 6357
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2084: 41,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 66,0,0| Number of FF evals: 258
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 573,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.clearSideEffectFlags()V: Line 2085: 41,0,0| Number of FF evals: 64
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 280,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 280,0,0| Number of FF evals: 650
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 2907,0,0| Number of FF evals: 1048
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 3541,314,0| Number of FF evals: 2908
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 60,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - false: 1,0,0| Number of FF evals: 127
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 104,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 3,0,0| Number of FF evals: 890
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 9499,8652,39| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 21,0,0| Number of FF evals: 586
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 20447,17443,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 574,0,0| Number of FF evals: 305
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: Line 214: 114,0,0| Number of FF evals: 82
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 1428,848,32| Number of FF evals: 3909
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2216,1968,247| Number of FF evals: 12258
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 4929,4288,0| Number of FF evals: 15461
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 748,500,152| Number of FF evals: 4047
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 2345,2050,7| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLength()I: root-Branch: 195,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 7035,3618,0| Number of FF evals: 6305
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 280,0,0| Number of FF evals: 655
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 1989,798,0| Number of FF evals: 2714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 1828,1022,0| Number of FF evals: 5353
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 330,0,0| Number of FF evals: 744
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 930,0,0| Number of FF evals: 836
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 374,0,0| Number of FF evals: 1004
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 14260,12863,201| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 362,0,0| Number of FF evals: 279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 211,0,0| Number of FF evals: 779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 21,0,0| Number of FF evals: 130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 17243,14838,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 3075,0,0| Number of FF evals: 993
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 2351,2056,7| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 17243,14838,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 17243,14838,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 17243,14838,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 12800,7002,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 2808,403,0| Number of FF evals: 2058
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 17243,14838,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 207,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 17243,14838,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 5535,0,0| Number of FF evals: 1841
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 2808,403,0| Number of FF evals: 2058
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 2808,403,0| Number of FF evals: 2058
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 114,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 2395,1631,0| Number of FF evals: 5068
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 574,0,0| Number of FF evals: 310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 114,0,0| Number of FF evals: 152
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 2235,0,0| Number of FF evals: 1675
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 2235,0,0| Number of FF evals: 1675
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 10278,9525,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLength()I: Line 1132: 195,0,0| Number of FF evals: 130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 10278,9525,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 9605,8652,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 9699,8739,87| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 574,0,0| Number of FF evals: 471
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 78,0,0| Number of FF evals: 240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 1944,0,0| Number of FF evals: 1039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 14490,10940,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 574,0,0| Number of FF evals: 292
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 195,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 2087,0,0| Number of FF evals: 738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 1342,0,0| Number of FF evals: 895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 7208,6440,1398| Number of FF evals: 15553
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 66477,60024,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 469,0,0| Number of FF evals: 250
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 271,0,0| Number of FF evals: 783
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: Line 889: 5168,0,0| Number of FF evals: 1542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 2247,0,0| Number of FF evals: 809
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 2247,0,0| Number of FF evals: 809
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 5140,4516,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 145,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 1342,0,0| Number of FF evals: 531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 20494,17435,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1062,0,0| Number of FF evals: 679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 1944,0,0| Number of FF evals: 719
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 466: 35,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 5140,4516,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 690,0,0| Number of FF evals: 319
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 1944,0,0| Number of FF evals: 719
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 467: 35,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 468: 35,0,0| Number of FF evals: 113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 10081,7950,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 114,0,0| Number of FF evals: 491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 114,0,0| Number of FF evals: 91
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 66477,60024,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesGlobalState()Lcom/google/javascript/rhino/Node$SideEffectFlags;: root-Branch: 41,0,0| Number of FF evals: 657
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 1195,0,0| Number of FF evals: 705
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 21001,18825,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 2345,2050,7| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 1342,0,0| Number of FF evals: 864
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 170,0,0| Number of FF evals: 339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - false: 36,0,0| Number of FF evals: 1906
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 1214,0,0| Number of FF evals: 1046
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 27166,23999,0| Number of FF evals: 12823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 2568,0,0| Number of FF evals: 876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 25,0,0| Number of FF evals: 263
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 520,0,0| Number of FF evals: 351
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 88,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1025,785,3| Number of FF evals: 8133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 88,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 88,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 368,0,0| Number of FF evals: 233
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 88,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 2542,2050,0| Number of FF evals: 11300
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 625,0,0| Number of FF evals: 1201
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 88,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 66477,60024,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 2550,1530,0| Number of FF evals: 4236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 91,0,0| Number of FF evals: 732
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1761,1509,16| Number of FF evals: 10322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 2247,0,0| Number of FF evals: 809
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 5109,4485,37| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2345,2050,7| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 2878,1966,55| Number of FF evals: 4690
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 368,0,0| Number of FF evals: 297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 1195,0,0| Number of FF evals: 508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 576,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 1375,0,0| Number of FF evals: 1031
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 195,0,0| Number of FF evals: 140
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 163,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 11426,9943,0| Number of FF evals: 8990
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 2230,0,0| Number of FF evals: 1726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 574,0,0| Number of FF evals: 437
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 405,197,41| Number of FF evals: 3503
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 41,0,0| Number of FF evals: 44
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 14210,12799,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 10271,8326,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - false: 280,0,0| Number of FF evals: 1367
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 66477,60024,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 195,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 57,0,0| Number of FF evals: 298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 1195,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 469,0,0| Number of FF evals: 884
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 1195,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 2235,0,0| Number of FF evals: 1725
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 785,443,0| Number of FF evals: 4973
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 1195,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 280,0,0| Number of FF evals: 272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 7330,6855,0| Number of FF evals: 13523
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 114,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 4653,2914,0| Number of FF evals: 4446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 2780,382,0| Number of FF evals: 2058
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 280,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 469,0,0| Number of FF evals: 492
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 3245,0,0| Number of FF evals: 1045
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 2247,0,0| Number of FF evals: 952
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 11005,9957,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 66477,60024,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 368,0,0| Number of FF evals: 184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 4477,3919,232| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 13804,11032,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 469,0,0| Number of FF evals: 458
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 11989,9687,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 66477,60024,44129| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 66477,60024,0| Number of FF evals: 15549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 1062,0,0| Number of FF evals: 455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 28,0,0| Number of FF evals: 308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 66477,60024,44149| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 2354,2059,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1153,846,23| Number of FF evals: 8691
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 14718,12173,0| Number of FF evals: 9528
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 1342,0,0| Number of FF evals: 895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 229,0,0| Number of FF evals: 925
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 5651,4633,0| Number of FF evals: 10487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 330,0,0| Number of FF evals: 934
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 1,0,0| Number of FF evals: 868
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2268,1961,6| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 1408,761,32| Number of FF evals: 3781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 4056,3409,236| Number of FF evals: 13955
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 67,0,0| Number of FF evals: 339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 716,119,0| Number of FF evals: 2249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 716,50,0| Number of FF evals: 2181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 14840,12595,0| Number of FF evals: 9262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 195,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 8240,7718,137| Number of FF evals: 15556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 1514,0,0| Number of FF evals: 787
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 66477,60024,0| Number of FF evals: 15549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 809,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 80,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 62,0,0| Number of FF evals: 212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 1195,0,0| Number of FF evals: 569
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 574,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 28228,25685,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 469,0,0| Number of FF evals: 248
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 2682,2386,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 10356,7813,0| Number of FF evals: 5187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 41,0,0| Number of FF evals: 73
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 12439,11186,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 12439,11186,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 2852,77,0| Number of FF evals: 2127
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 2840,297,0| Number of FF evals: 2039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 10273,7730,0| Number of FF evals: 5187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 41,0,0| Number of FF evals: 762
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - true: 280,0,0| Number of FF evals: 1328
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 66477,60024,44239| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 368,0,0| Number of FF evals: 200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 574,0,0| Number of FF evals: 339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 114,0,0| Number of FF evals: 474
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 182,0,0| Number of FF evals: 483
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 280,0,0| Number of FF evals: 192
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 21,0,0| Number of FF evals: 121
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 574,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 66477,60024,0| Number of FF evals: 15549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 974,0,0| Number of FF evals: 681
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 41,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 2737,0,0| Number of FF evals: 930
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 363,0,0| Number of FF evals: 280
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 690,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 114,0,0| Number of FF evals: 412
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 1291,0,0| Number of FF evals: 1564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 126,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 114,0,0| Number of FF evals: 580
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 2197,1905,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1032: 41,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 126,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - false: 368,0,0| Number of FF evals: 385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 126,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 2213,1924,2| Number of FF evals: 15474
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 5535,0,0| Number of FF evals: 1613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1029: 41,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 110,0,0| Number of FF evals: 168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 4993,0,0| Number of FF evals: 1496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1153,945,266| Number of FF evals: 7343
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 7138,6390,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 2007,1067,0| Number of FF evals: 3440
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 22,0,0| Number of FF evals: 365
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 41,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 41,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 66477,60024,0| Number of FF evals: 15549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 3293,2719,126| Number of FF evals: 15556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 368,0,0| Number of FF evals: 1021
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 368,0,0| Number of FF evals: 200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 11,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 362,0,0| Number of FF evals: 280
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 6379,5060,0| Number of FF evals: 7487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 41,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 574,0,0| Number of FF evals: 309
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 716,142,0| Number of FF evals: 2249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 2799,0,0| Number of FF evals: 1205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 12298,8449,0| Number of FF evals: 6269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 2247,0,0| Number of FF evals: 830
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 1645,0,0| Number of FF evals: 765
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 41,0,0| Number of FF evals: 1150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 2408,0,0| Number of FF evals: 1099
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 280,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.getString()Ljava/lang/String;: root-Branch: 114,0,0| Number of FF evals: 1511
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - false: 280,0,0| Number of FF evals: 1328
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 2907,0,0| Number of FF evals: 969
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 26264,23105,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 4977,1678,0| Number of FF evals: 3617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 114,0,0| Number of FF evals: 581
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 405,197,41| Number of FF evals: 3536
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 1062,0,0| Number of FF evals: 738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2072,1779,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 21,0,0| Number of FF evals: 1210
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 368,0,0| Number of FF evals: 224
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 18305,15734,0| Number of FF evals: 14139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 2057,1658,0| Number of FF evals: 4008
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 12048,11616,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 41,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 5716,0,0| Number of FF evals: 1656
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 114,0,0| Number of FF evals: 464
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 574,0,0| Number of FF evals: 841
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 469,0,0| Number of FF evals: 270
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 114,0,0| Number of FF evals: 538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - true: 546,0,0| Number of FF evals: 390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 563,74,0| Number of FF evals: 2226
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 192,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 41,0,0| Number of FF evals: 278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 114,0,0| Number of FF evals: 543
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 809,0,0| Number of FF evals: 372
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 207,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 23576,22537,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 574,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 13651,12212,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 2131,0,0| Number of FF evals: 1476
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 2724,65,0| Number of FF evals: 2011
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 41,0,0| Number of FF evals: 329
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 195,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 303,0,0| Number of FF evals: 243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 195,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 574,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 13447,10236,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 173,0,0| Number of FF evals: 255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 12299,11227,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 1498,0,0| Number of FF evals: 1109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 195,0,0| Number of FF evals: 512
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 11733,10918,1892| Number of FF evals: 15527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 1062,0,0| Number of FF evals: 756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 4028,2853,0| Number of FF evals: 6056
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 171,0,0| Number of FF evals: 592
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 14494,12941,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 368,0,0| Number of FF evals: 200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 9791,7248,70| Number of FF evals: 4844
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 355,0,0| Number of FF evals: 1722
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I17 Branch 146 IFNULL L1334 - true: 1,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 9575,7685,0| Number of FF evals: 10705
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 181,0,0| Number of FF evals: 672
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 1195,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 3956,0,0| Number of FF evals: 1682
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 114,0,0| Number of FF evals: 555
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 41,0,0| Number of FF evals: 48
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 3245,0,0| Number of FF evals: 1115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - true: 125,0,0| Number of FF evals: 823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 125,0,0| Number of FF evals: 555
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 2219,1820,0| Number of FF evals: 6228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 195,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 280,0,0| Number of FF evals: 266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 23124,21109,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 13,0,0| Number of FF evals: 488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 91,0,0| Number of FF evals: 732
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1062,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: root-Branch: 41,0,0| Number of FF evals: 1186
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 114,0,0| Number of FF evals: 575
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 2127,0,0| Number of FF evals: 1483
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 41,0,0| Number of FF evals: 289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 574,0,0| Number of FF evals: 346
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 41,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 296,7,0| Number of FF evals: 1885
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 1342,0,0| Number of FF evals: 573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 3075,0,0| Number of FF evals: 1046
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 574,0,0| Number of FF evals: 348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 5040,4399,0| Number of FF evals: 15460
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 8503,7328,19| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 1697,1056,0| Number of FF evals: 5475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 469,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 5277,1990,0| Number of FF evals: 5922
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 469,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 2247,0,0| Number of FF evals: 1965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1634: 469,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 1322,69,0| Number of FF evals: 1928
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 114,0,0| Number of FF evals: 152
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 563,74,0| Number of FF evals: 2226
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 114,0,0| Number of FF evals: 256
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 88,0,0| Number of FF evals: 327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 2973,1239,0| Number of FF evals: 2867
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 280,0,0| Number of FF evals: 161
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 436,0,0| Number of FF evals: 900
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 25030,20717,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 114,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 290,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 6998,6020,0| Number of FF evals: 7890
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 1280,0,0| Number of FF evals: 1268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 2737,0,0| Number of FF evals: 1383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 17243,14838,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 17243,14838,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2107: 195,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2973,2730,222| Number of FF evals: 15090
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 23054,22655,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 41,0,0| Number of FF evals: 73
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 368,0,0| Number of FF evals: 188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 12455,11380,153| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 280,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.setMutatesArguments()Lcom/google/javascript/rhino/Node$SideEffectFlags;: Line 2106: 195,0,0| Number of FF evals: 116
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 280,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 280,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 4302,0,0| Number of FF evals: 1324
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 280,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 348,108,2| Number of FF evals: 2744
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 574,0,0| Number of FF evals: 686
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 14422,12370,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 153,0,0| Number of FF evals: 1151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 313,0,0| Number of FF evals: 1565
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - true: 41,0,0| Number of FF evals: 1189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 349,0,0| Number of FF evals: 915
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 2737,0,0| Number of FF evals: 946
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 2970,0,0| Number of FF evals: 1168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 2970,0,0| Number of FF evals: 1168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 114,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 283,0,0| Number of FF evals: 1787
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 732,437,0| Number of FF evals: 5880
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 690,0,0| Number of FF evals: 315
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1497,1205,12| Number of FF evals: 11503
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 1195,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 3031,2681,229| Number of FF evals: 11882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 1195,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 690,0,0| Number of FF evals: 315
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: Line 1241: 368,0,0| Number of FF evals: 224
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 974,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 974,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 974,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 2648,2298,203| Number of FF evals: 10407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 974,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 114,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 93,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 246,0,0| Number of FF evals: 487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 1062,0,0| Number of FF evals: 479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 2088,913,1| Number of FF evals: 2860
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 45,0,0| Number of FF evals: 450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 351,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 66477,60024,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 114,0,0| Number of FF evals: 97
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 114,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 114,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 3170,1436,1| Number of FF evals: 3048
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 10087,7859,462| Number of FF evals: 15006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1062,0,0| Number of FF evals: 447
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 195,0,0| Number of FF evals: 184
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - false: 36,0,0| Number of FF evals: 1907
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 368,0,0| Number of FF evals: 780
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 13322,11883,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 18702,16640,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 14137,11874,0| Number of FF evals: 13840
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 2057,1658,0| Number of FF evals: 4009
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 809,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 11871,10674,0| Number of FF evals: 15030
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 809,0,0| Number of FF evals: 808
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 114,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 469,0,0| Number of FF evals: 739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 368,0,0| Number of FF evals: 215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 312,0,0| Number of FF evals: 976
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 368,0,0| Number of FF evals: 215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 4302,0,0| Number of FF evals: 1455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 5299,306,0| Number of FF evals: 2170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1657,1378,3| Number of FF evals: 10322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 280,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 268,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 5,0,0| Number of FF evals: 149
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 469,0,0| Number of FF evals: 266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 88,0,0| Number of FF evals: 316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 7189,5756,0| Number of FF evals: 12255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 114,0,0| Number of FF evals: 825
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 4720,2294,0| Number of FF evals: 4617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 450: 34,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 809,0,0| Number of FF evals: 1071
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 449: 34,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 19721,16998,0| Number of FF evals: 14061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 5215,3134,0| Number of FF evals: 5707
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 574,0,0| Number of FF evals: 267
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 16375,14229,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 114,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 451: 34,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 5278,3197,0| Number of FF evals: 5919
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 114,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 397,0,0| Number of FF evals: 397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 469,0,0| Number of FF evals: 265
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 574,0,0| Number of FF evals: 869
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 271,0,0| Number of FF evals: 783
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 196,0,0| Number of FF evals: 538
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 280,0,0| Number of FF evals: 399
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 280,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 1195,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 23124,20986,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 114,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 534,0,0| Number of FF evals: 652
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 690,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 690,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 574,0,0| Number of FF evals: 391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 66477,60024,0| Number of FF evals: 15549
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1839,1544,2| Number of FF evals: 13034
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 114,0,0| Number of FF evals: 580
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 23124,20986,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 5068,4448,0| Number of FF evals: 15550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 66477,60024,44125| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 10,0,0| Number of FF evals: 215
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 7759,7270,0| Number of FF evals: 15528
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 368,0,0| Number of FF evals: 188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 195,0,0| Number of FF evals: 370
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 2907,0,0| Number of FF evals: 958
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 1,0,0| Number of FF evals: 1496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 809,0,0| Number of FF evals: 552
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 2087,0,0| Number of FF evals: 1019
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 574,0,0| Number of FF evals: 279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 8911,7351,0| Number of FF evals: 15551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 2246,0,0| Number of FF evals: 878
* Search finished after 605s and 368 generations, 191380 statements, best individual has fitness: 3170.0
* Minimizing test suite
[MASTER] 13:18:55.029 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 90%
* Total number of goals: 853
* Number of covered goals: 769
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 590
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 100
* Number of covered goals: 100
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 455
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 44%
* Total number of goals: 4536
* Number of covered goals: 1999
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 90%
* Total number of goals: 233
* Number of covered goals: 209
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 76%
* Total number of goals: 714
* Number of covered goals: 542
* Generated 695 tests with total length 9826
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:19:58.732 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.689% of time used, but only 45/695 tests minimized), falling back to using all assertions
[MASTER] 13:20:17.525 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 13:20:30.753 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 13 seconds more than allowed.
[MASTER] 13:20:43.494 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_96_1628256043389/com/google/javascript/rhino/Node_96_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_96_1628256043389/com/google/javascript/rhino/Node_96_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:43.494 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:43.494 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:43.497 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 259
[MASTER] 13:20:43.498 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_96_1628256043389/com/google/javascript/rhino/Node_96_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.EnumElementType;
14: import com.google.javascript.rhino.jstype.EnumType;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import com.google.javascript.rhino.jstype.TemplateType;
18: import java.util.ArrayList;
19: import java.util.List;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.evosuite.runtime.testdata.FileSystemHandling;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Node_96_tmp__ESTest extends Node_96_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
31:       assertNotNull(simpleErrorReporter0);
32:       
33:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
34:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
35:       assertNotNull(jSTypeRegistry0);
36:       
37:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
38:       assertEquals(0, arrayList0.size());
39:       assertTrue(arrayList0.isEmpty());
40:       assertNotNull(arrayList0);
41:       
42:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
43:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
44:       assertEquals(0, arrayList0.size());
45:       assertTrue(arrayList0.isEmpty());
46:       assertFalse(node0.isThrow());
47:       assertFalse(node0.isFalse());
48:       assertFalse(node0.isBreak());
49:       assertFalse(node0.isGetProp());
50:       assertFalse(node0.isSwitch());
51:       assertEquals(83, node0.getType());
52:       assertTrue(node0.isParamList());
53:       assertEquals((-1), node0.getCharno());
54:       assertFalse(node0.isAnd());
55:       assertFalse(node0.isInc());
56:       assertFalse(node0.isGetElem());
57:       assertFalse(node0.isEmpty());
58:       assertFalse(node0.isAssign());
59:       assertFalse(node0.isDelProp());
60:       assertFalse(node0.isCast());
61:       assertFalse(node0.isVoid());
62:       assertFalse(node0.isOr());
63:       assertEquals((-1), node0.getSourcePosition());
64:       assertFalse(node0.isDebugger());
65:       assertFalse(node0.isTrue());
66:       assertFalse(node0.isNot());
67:       assertFalse(node0.isObjectLit());
68:       assertFalse(node0.isWhile());
69:       assertFalse(node0.isString());
70:       assertFalse(node0.isExprResult());
71:       assertFalse(node0.isTypeOf());
72:       assertFalse(node0.isComma());
73:       assertFalse(node0.isDec());
74:       assertFalse(node0.isReturn());
75:       assertFalse(node0.hasChildren());
76:       assertFalse(node0.isName());
77:       assertFalse(node0.isStringKey());
78:       assertFalse(node0.isCall());
79:       assertFalse(node0.isSetterDef());
80:       assertFalse(node0.isAdd());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isDo());
83:       assertFalse(node0.isContinue());
84:       assertFalse(node0.isDefaultCase());
85:       assertFalse(node0.isLabel());
86:       assertFalse(node0.isNew());
87:       assertFalse(node0.isFunction());
88:       assertFalse(node0.isAssignAdd());
89:       assertFalse(node0.isVar());
90:       assertEquals(0, node0.getChildCount());
91:       assertFalse(node0.isFor());
92:       assertFalse(node0.isLabelName());
93:       assertFalse(node0.isGetterDef());
94:       assertFalse(node0.isIf());
95:       assertFalse(node0.isNumber());
96:       assertFalse(node0.isArrayLit());
97:       assertFalse(node0.hasOneChild());
98:       assertFalse(node0.isIn());
99:       assertFalse(node0.isNE());
100:       assertFalse(node0.isCase());
101:       assertFalse(node0.hasMoreThanOneChild());
102:       assertFalse(node0.isWith());
103:       assertFalse(node0.isScript());
104:       assertFalse(node0.isCatch());
105:       assertFalse(node0.isInstanceOf());
106:       assertEquals((-1), node0.getLineno());
107:       assertFalse(node0.isBlock());
108:       assertFalse(node0.isTry());
109:       assertFalse(node0.isRegExp());
110:       assertFalse(node0.isThis());
111:       assertFalse(node0.isHook());
112:       assertNotNull(node0);
113:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
114:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(47, Node.IS_DISPATCHER);
118:       assertEquals(2, Node.POST_FLAG);
119:       assertEquals(55, Node.INFERRED_FUNCTION);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(48, Node.DIRECTIVES);
122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
123:       assertEquals(49, Node.DIRECT_EVAL);
124:       assertEquals(39, Node.EMPTY_BLOCK);
125:       assertEquals(37, Node.OPT_ARG_NAME);
126:       assertEquals(56, Node.CHANGE_TIME);
127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
128:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
129:       assertEquals(8, Node.FLAG_NO_THROWS);
130:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
131:       assertEquals(36, Node.QUOTED_PROP);
132:       assertEquals(57, Node.REFLECTED_OBJECT);
133:       assertEquals(52, Node.LENGTH);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(30, Node.VAR_ARGS_NAME);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(32, Node.INCRDECR_PROP);
142:       assertEquals(46, Node.IS_NAMESPACE);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
145:       assertEquals(43, Node.IS_CONSTANT_NAME);
146:       assertEquals(50, Node.FREE_CALL);
147:       assertEquals(54, Node.SLASH_V);
148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
149:       
150:       int int0 = node0.getIntProp((-2118));
151:       assertEquals(0, int0);
152:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
153:       assertEquals(0, arrayList0.size());
154:       assertTrue(arrayList0.isEmpty());
155:       assertFalse(node0.isThrow());
156:       assertFalse(node0.isFalse());
157:       assertFalse(node0.isBreak());
158:       assertFalse(node0.isGetProp());
159:       assertFalse(node0.isSwitch());
160:       assertEquals(83, node0.getType());
161:       assertTrue(node0.isParamList());
162:       assertEquals((-1), node0.getCharno());
163:       assertFalse(node0.isAnd());
164:       assertFalse(node0.isInc());
165:       assertFalse(node0.isGetElem());
166:       assertFalse(node0.isEmpty());
167:       assertFalse(node0.isAssign());
168:       assertFalse(node0.isDelProp());
169:       assertFalse(node0.isCast());
170:       assertFalse(node0.isVoid());
171:       assertFalse(node0.isOr());
172:       assertEquals((-1), node0.getSourcePosition());
173:       assertFalse(node0.isDebugger());
174:       assertFalse(node0.isTrue());
175:       assertFalse(node0.isNot());
176:       assertFalse(node0.isObjectLit());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isString());
179:       assertFalse(node0.isExprResult());
180:       assertFalse(node0.isTypeOf());
181:       assertFalse(node0.isComma());
182:       assertFalse(node0.isDec());
183:       assertFalse(node0.isReturn());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isName());
186:       assertFalse(node0.isStringKey());
187:       assertFalse(node0.isCall());
188:       assertFalse(node0.isSetterDef());
189:       assertFalse(node0.isAdd());
190:       assertFalse(node0.isNull());
191:       assertFalse(node0.isDo());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isDefaultCase());
194:       assertFalse(node0.isLabel());
195:       assertFalse(node0.isNew());
196:       assertFalse(node0.isFunction());
197:       assertFalse(node0.isAssignAdd());
198:       assertFalse(node0.isVar());
199:       assertEquals(0, node0.getChildCount());
200:       assertFalse(node0.isFor());
201:       assertFalse(node0.isLabelName());
202:       assertFalse(node0.isGetterDef());
203:       assertFalse(node0.isIf());
204:       assertFalse(node0.isNumber());
205:       assertFalse(node0.isArrayLit());
206:       assertFalse(node0.hasOneChild());
207:       assertFalse(node0.isIn());
208:       assertFalse(node0.isNE());
209:       assertFalse(node0.isCase());
210:       assertFalse(node0.hasMoreThanOneChild());
211:       assertFalse(node0.isWith());
212:       assertFalse(node0.isScript());
213:       assertFalse(node0.isCatch());
214:       assertFalse(node0.isInstanceOf());
215:       assertEquals((-1), node0.getLineno());
216:       assertFalse(node0.isBlock());
217:       assertFalse(node0.isTry());
218:       assertFalse(node0.isRegExp());
219:       assertFalse(node0.isThis());
220:       assertFalse(node0.isHook());
221:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
222:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(53, Node.INPUT_ID);
225:       assertEquals(47, Node.IS_DISPATCHER);
226:       assertEquals(2, Node.POST_FLAG);
227:       assertEquals(55, Node.INFERRED_FUNCTION);
228:       assertEquals(4095, Node.COLUMN_MASK);
229:       assertEquals(48, Node.DIRECTIVES);
230:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
231:       assertEquals(49, Node.DIRECT_EVAL);
232:       assertEquals(39, Node.EMPTY_BLOCK);
233:       assertEquals(37, Node.OPT_ARG_NAME);
234:       assertEquals(56, Node.CHANGE_TIME);
235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
236:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
237:       assertEquals(8, Node.FLAG_NO_THROWS);
238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
239:       assertEquals(36, Node.QUOTED_PROP);
240:       assertEquals(57, Node.REFLECTED_OBJECT);
241:       assertEquals(52, Node.LENGTH);
242:       assertEquals(40, Node.ORIGINALNAME_PROP);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
245:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
246:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
247:       assertEquals(30, Node.VAR_ARGS_NAME);
248:       assertEquals(12, Node.COLUMN_BITS);
249:       assertEquals(32, Node.INCRDECR_PROP);
250:       assertEquals(46, Node.IS_NAMESPACE);
251:       assertEquals(1, Node.DECR_FLAG);
252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
253:       assertEquals(43, Node.IS_CONSTANT_NAME);
254:       assertEquals(50, Node.FREE_CALL);
255:       assertEquals(54, Node.SLASH_V);
256:       assertEquals(51, Node.STATIC_SOURCE_FILE);
257:       
258:       Iterable<Node> iterable0 = node0.children();
259:       assertFalse(iterable0.contains(node0));
260:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
261:       assertEquals(0, arrayList0.size());
262:       assertTrue(arrayList0.isEmpty());
263:       assertFalse(node0.isThrow());
264:       assertFalse(node0.isFalse());
265:       assertFalse(node0.isBreak());
266:       assertFalse(node0.isGetProp());
267:       assertFalse(node0.isSwitch());
268:       assertEquals(83, node0.getType());
269:       assertTrue(node0.isParamList());
270:       assertEquals((-1), node0.getCharno());
271:       assertFalse(node0.isAnd());
272:       assertFalse(node0.isInc());
273:       assertFalse(node0.isGetElem());
274:       assertFalse(node0.isEmpty());
275:       assertFalse(node0.isAssign());
276:       assertFalse(node0.isDelProp());
277:       assertFalse(node0.isCast());
278:       assertFalse(node0.isVoid());
279:       assertFalse(node0.isOr());
280:       assertEquals((-1), node0.getSourcePosition());
281:       assertFalse(node0.isDebugger());
282:       assertFalse(node0.isTrue());
283:       assertFalse(node0.isNot());
284:       assertFalse(node0.isObjectLit());
285:       assertFalse(node0.isWhile());
286:       assertFalse(node0.isString());
287:       assertFalse(node0.isExprResult());
288:       assertFalse(node0.isTypeOf());
289:       assertFalse(node0.isComma());
290:       assertFalse(node0.isDec());
291:       assertFalse(node0.isReturn());
292:       assertFalse(node0.hasChildren());
293:       assertFalse(node0.isName());
294:       assertFalse(node0.isStringKey());
295:       assertFalse(node0.isCall());
296:       assertFalse(node0.isSetterDef());
297:       assertFalse(node0.isAdd());
298:       assertFalse(node0.isNull());
299:       assertFalse(node0.isDo());
300:       assertFalse(node0.isContinue());
301:       assertFalse(node0.isDefaultCase());
302:       assertFalse(node0.isLabel());
303:       assertFalse(node0.isNew());
304:       assertFalse(node0.isFunction());
305:       assertFalse(node0.isAssignAdd());
306:       assertFalse(node0.isVar());
307:       assertEquals(0, node0.getChildCount());
308:       assertFalse(node0.isFor());
309:       assertFalse(node0.isLabelName());
310:       assertFalse(node0.isGetterDef());
311:       assertFalse(node0.isIf());
312:       assertFalse(node0.isNumber());
313:       assertFalse(node0.isArrayLit());
314:       assertFalse(node0.hasOneChild());
315:       assertFalse(node0.isIn());
316:       assertFalse(node0.isNE());
317:       assertFalse(node0.isCase());
318:       assertFalse(node0.hasMoreThanOneChild());
319:       assertFalse(node0.isWith());
320:       assertFalse(node0.isScript());
321:       assertFalse(node0.isCatch());
322:       assertFalse(node0.isInstanceOf());
323:       assertEquals((-1), node0.getLineno());
324:       assertFalse(node0.isBlock());
325:       assertFalse(node0.isTry());
326:       assertFalse(node0.isRegExp());
327:       assertFalse(node0.isThis());
328:       assertFalse(node0.isHook());
329:       assertNotNull(iterable0);
330:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
331:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
332:       assertEquals(29, Node.JSDOC_INFO_PROP);
333:       assertEquals(53, Node.INPUT_ID);
334:       assertEquals(47, Node.IS_DISPATCHER);
335:       assertEquals(2, Node.POST_FLAG);
336:       assertEquals(55, Node.INFERRED_FUNCTION);
337:       assertEquals(4095, Node.COLUMN_MASK);
338:       assertEquals(48, Node.DIRECTIVES);
339:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
340:       assertEquals(49, Node.DIRECT_EVAL);
341:       assertEquals(39, Node.EMPTY_BLOCK);
342:       assertEquals(37, Node.OPT_ARG_NAME);
343:       assertEquals(56, Node.CHANGE_TIME);
344:       assertEquals(15, Node.NO_SIDE_EFFECTS);
345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
346:       assertEquals(8, Node.FLAG_NO_THROWS);
347:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
348:       assertEquals(36, Node.QUOTED_PROP);
349:       assertEquals(57, Node.REFLECTED_OBJECT);
350:       assertEquals(52, Node.LENGTH);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(57, Node.LAST_PROP);
353:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
354:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
355:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
356:       assertEquals(30, Node.VAR_ARGS_NAME);
357:       assertEquals(12, Node.COLUMN_BITS);
358:       assertEquals(32, Node.INCRDECR_PROP);
359:       assertEquals(46, Node.IS_NAMESPACE);
360:       assertEquals(1, Node.DECR_FLAG);
361:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
362:       assertEquals(43, Node.IS_CONSTANT_NAME);
363:       assertEquals(50, Node.FREE_CALL);
364:       assertEquals(54, Node.SLASH_V);
365:       assertEquals(51, Node.STATIC_SOURCE_FILE);
366:       
367:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
368:       assertNotNull(fileSystemHandling0);
369:       
370:       Node node1 = Node.newNumber((-1163.37132));
371:       assertFalse(node1.isEmpty());
372:       assertFalse(node1.isGetterDef());
373:       assertFalse(node1.isFor());
374:       assertFalse(node1.isDelProp());
375:       assertFalse(node1.isIf());
376:       assertFalse(node1.isArrayLit());
377:       assertTrue(node1.isNumber());
378:       assertFalse(node1.isTry());
379:       assertFalse(node1.isFunction());
380:       assertFalse(node1.isRegExp());
381:       assertFalse(node1.isString());
382:       assertFalse(node1.isSwitch());
383:       assertFalse(node1.isCase());
384:       assertFalse(node1.isParamList());
385:       assertFalse(node1.isDebugger());
386:       assertEquals((-1), node1.getCharno());
387:       assertFalse(node1.isFalse());
388:       assertFalse(node1.isSetterDef());
389:       assertFalse(node1.isInstanceOf());
390:       assertFalse(node1.isThis());
391:       assertFalse(node1.isThrow());
392:       assertFalse(node1.isBlock());
393:       assertFalse(node1.isHook());
394:       assertFalse(node1.isWith());
395:       assertFalse(node1.isInc());
396:       assertFalse(node1.isCatch());
397:       assertEquals((-1), node1.getLineno());
398:       assertFalse(node1.isIn());
399:       assertFalse(node1.isNE());
400:       assertFalse(node1.isLabelName());
401:       assertFalse(node1.isAssign());
402:       assertFalse(node1.isTypeOf());
403:       assertFalse(node1.isCast());
404:       assertFalse(node1.hasOneChild());
405:       assertFalse(node1.isGetElem());
406:       assertFalse(node1.isReturn());
407:       assertFalse(node1.isAssignAdd());
408:       assertFalse(node1.hasMoreThanOneChild());
409:       assertFalse(node1.isDec());
410:       assertEquals(39, node1.getType());
411:       assertFalse(node1.isLabel());
412:       assertFalse(node1.hasChildren());
413:       assertFalse(node1.isWhile());
414:       assertFalse(node1.isNot());
415:       assertFalse(node1.isAnd());
416:       assertFalse(node1.isContinue());
417:       assertFalse(node1.isScript());
418:       assertFalse(node1.isObjectLit());
419:       assertEquals((-1), node1.getSourcePosition());
420:       assertFalse(node1.isStringKey());
421:       assertFalse(node1.isName());
422:       assertFalse(node1.isCall());
423:       assertFalse(node1.isBreak());
424:       assertFalse(node1.isGetProp());
425:       assertEquals(0, node1.getChildCount());
426:       assertFalse(node1.isComma());
427:       assertFalse(node1.isVar());
428:       assertFalse(node1.isDo());
429:       assertFalse(node1.isDefaultCase());
430:       assertFalse(node1.isExprResult());
431:       assertFalse(node1.isVoid());
432:       assertFalse(node1.isNew());
433:       assertFalse(node1.isAdd());
434:       assertFalse(node1.isOr());
435:       assertFalse(node1.isTrue());
436:       assertFalse(node1.isNull());
437:       assertNotNull(node1);
438:       assertFalse(node1.equals((Object)node0));
439:       assertEquals(40, Node.ORIGINALNAME_PROP);
440:       assertEquals(57, Node.REFLECTED_OBJECT);
441:       assertEquals(8, Node.FLAG_NO_THROWS);
442:       assertEquals(39, Node.EMPTY_BLOCK);
443:       assertEquals(54, Node.SLASH_V);
444:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
445:       assertEquals(52, Node.LENGTH);
446:       assertEquals(50, Node.FREE_CALL);
447:       assertEquals(55, Node.INFERRED_FUNCTION);
448:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
449:       assertEquals(46, Node.IS_NAMESPACE);
450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
451:       assertEquals(2, Node.POST_FLAG);
452:       assertEquals(57, Node.LAST_PROP);
453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
454:       assertEquals(30, Node.VAR_ARGS_NAME);
455:       assertEquals(47, Node.IS_DISPATCHER);
456:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
457:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
458:       assertEquals(29, Node.JSDOC_INFO_PROP);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
461:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
462:       assertEquals(43, Node.IS_CONSTANT_NAME);
463:       assertEquals(56, Node.CHANGE_TIME);
464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
465:       assertEquals(36, Node.QUOTED_PROP);
466:       assertEquals(4095, Node.COLUMN_MASK);
467:       assertEquals(12, Node.COLUMN_BITS);
468:       assertEquals(49, Node.DIRECT_EVAL);
469:       assertEquals(48, Node.DIRECTIVES);
470:       assertEquals(32, Node.INCRDECR_PROP);
471:       assertEquals(1, Node.DECR_FLAG);
472:       assertEquals(37, Node.OPT_ARG_NAME);
473:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
474:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
475:       
476:       boolean boolean0 = node0.isParamList();
477:       assertTrue(boolean0);
478:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
479:       assertEquals(0, arrayList0.size());
480:       assertTrue(arrayList0.isEmpty());
481:       assertFalse(node0.isThrow());
482:       assertFalse(node0.isFalse());
483:       assertFalse(node0.isBreak());
484:       assertFalse(node0.isGetProp());
485:       assertFalse(node0.isSwitch());
486:       assertEquals(83, node0.getType());
487:       assertTrue(node0.isParamList());
488:       assertEquals((-1), node0.getCharno());
489:       assertFalse(node0.isAnd());
490:       assertFalse(node0.isInc());
491:       assertFalse(node0.isGetElem());
492:       assertFalse(node0.isEmpty());
493:       assertFalse(node0.isAssign());
494:       assertFalse(node0.isDelProp());
495:       assertFalse(node0.isCast());
496:       assertFalse(node0.isVoid());
497:       assertFalse(node0.isOr());
498:       assertEquals((-1), node0.getSourcePosition());
499:       assertFalse(node0.isDebugger());
500:       assertFalse(node0.isTrue());
501:       assertFalse(node0.isNot());
502:       assertFalse(node0.isObjectLit());
503:       assertFalse(node0.isWhile());
504:       assertFalse(node0.isString());
505:       assertFalse(node0.isExprResult());
506:       assertFalse(node0.isTypeOf());
507:       assertFalse(node0.isComma());
508:       assertFalse(node0.isDec());
509:       assertFalse(node0.isReturn());
510:       assertFalse(node0.hasChildren());
511:       assertFalse(node0.isName());
512:       assertFalse(node0.isStringKey());
513:       assertFalse(node0.isCall());
514:       assertFalse(node0.isSetterDef());
515:       assertFalse(node0.isAdd());
516:       assertFalse(node0.isNull());
517:       assertFalse(node0.isDo());
518:       assertFalse(node0.isContinue());
519:       assertFalse(node0.isDefaultCase());
520:       assertFalse(node0.isLabel());
521:       assertFalse(node0.isNew());
522:       assertFalse(node0.isFunction());
523:       assertFalse(node0.isAssignAdd());
524:       assertFalse(node0.isVar());
525:       assertEquals(0, node0.getChildCount());
526:       assertFalse(node0.isFor());
527:       assertFalse(node0.isLabelName());
528:       assertFalse(node0.isGetterDef());
529:       assertFalse(node0.isIf());
530:       assertFalse(node0.isNumber());
531:       assertFalse(node0.isArrayLit());
532:       assertFalse(node0.hasOneChild());
533:       assertFalse(node0.isIn());
534:       assertFalse(node0.isNE());
535:       assertFalse(node0.isCase());
536:       assertFalse(node0.hasMoreThanOneChild());
537:       assertFalse(node0.isWith());
538:       assertFalse(node0.isScript());
539:       assertFalse(node0.isCatch());
540:       assertFalse(node0.isInstanceOf());
541:       assertEquals((-1), node0.getLineno());
542:       assertFalse(node0.isBlock());
543:       assertFalse(node0.isTry());
544:       assertFalse(node0.isRegExp());
545:       assertFalse(node0.isThis());
546:       assertFalse(node0.isHook());
547:       assertFalse(node0.equals((Object)node1));
548:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
549:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
550:       assertEquals(29, Node.JSDOC_INFO_PROP);
551:       assertEquals(53, Node.INPUT_ID);
552:       assertEquals(47, Node.IS_DISPATCHER);
553:       assertEquals(2, Node.POST_FLAG);
554:       assertEquals(55, Node.INFERRED_FUNCTION);
555:       assertEquals(4095, Node.COLUMN_MASK);
556:       assertEquals(48, Node.DIRECTIVES);
557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
558:       assertEquals(49, Node.DIRECT_EVAL);
559:       assertEquals(39, Node.EMPTY_BLOCK);
560:       assertEquals(37, Node.OPT_ARG_NAME);
561:       assertEquals(56, Node.CHANGE_TIME);
562:       assertEquals(15, Node.NO_SIDE_EFFECTS);
563:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
564:       assertEquals(8, Node.FLAG_NO_THROWS);
565:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
566:       assertEquals(36, Node.QUOTED_PROP);
567:       assertEquals(57, Node.REFLECTED_OBJECT);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(40, Node.ORIGINALNAME_PROP);
570:       assertEquals(57, Node.LAST_PROP);
571:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
572:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
573:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
574:       assertEquals(30, Node.VAR_ARGS_NAME);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(32, Node.INCRDECR_PROP);
577:       assertEquals(46, Node.IS_NAMESPACE);
578:       assertEquals(1, Node.DECR_FLAG);
579:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
580:       assertEquals(43, Node.IS_CONSTANT_NAME);
581:       assertEquals(50, Node.FREE_CALL);
582:       assertEquals(54, Node.SLASH_V);
583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
584:       
585:       Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
586:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
587:       assertEquals(0, arrayList0.size());
588:       assertTrue(arrayList0.isEmpty());
589:       assertFalse(node0.isThrow());
590:       assertFalse(node0.isFalse());
591:       assertFalse(node0.isBreak());
592:       assertFalse(node0.isGetProp());
593:       assertFalse(node0.isSwitch());
594:       assertEquals(83, node0.getType());
595:       assertTrue(node0.isParamList());
596:       assertEquals((-1), node0.getCharno());
597:       assertFalse(node0.isAnd());
598:       assertFalse(node0.isInc());
599:       assertFalse(node0.isGetElem());
600:       assertFalse(node0.isEmpty());
601:       assertFalse(node0.isAssign());
602:       assertFalse(node0.isDelProp());
603:       assertFalse(node0.isCast());
604:       assertFalse(node0.isVoid());
605:       assertFalse(node0.isOr());
606:       assertEquals((-1), node0.getSourcePosition());
607:       assertFalse(node0.isDebugger());
608:       assertFalse(node0.isTrue());
609:       assertFalse(node0.isNot());
610:       assertFalse(node0.isObjectLit());
611:       assertFalse(node0.isWhile());
612:       assertFalse(node0.isString());
613:       assertFalse(node0.isExprResult());
614:       assertFalse(node0.isTypeOf());
615:       assertFalse(node0.isComma());
616:       assertFalse(node0.isDec());
617:       assertFalse(node0.isReturn());
618:       assertFalse(node0.hasChildren());
619:       assertFalse(node0.isName());
620:       assertFalse(node0.isStringKey());
621:       assertFalse(node0.isCall());
622:       assertFalse(node0.isSetterDef());
623:       assertFalse(node0.isAdd());
624:       assertFalse(node0.isNull());
625:       assertFalse(node0.isDo());
626:       assertFalse(node0.isContinue());
627:       assertFalse(node0.isDefaultCase());
628:       assertFalse(node0.isLabel());
629:       assertFalse(node0.isNew());
630:       assertFalse(node0.isFunction());
631:       assertFalse(node0.isAssignAdd());
632:       assertFalse(node0.isVar());
633:       assertEquals(0, node0.getChildCount());
634:       assertFalse(node0.isFor());
635:       assertFalse(node0.isLabelName());
636:       assertFalse(node0.isGetterDef());
637:       assertFalse(node0.isIf());
638:       assertFalse(node0.isNumber());
639:       assertFalse(node0.isArrayLit());
640:       assertFalse(node0.hasOneChild());
641:       assertFalse(node0.isIn());
642:       assertFalse(node0.isNE());
643:       assertFalse(node0.isCase());
644:       assertFalse(node0.hasMoreThanOneChild());
645:       assertFalse(node0.isWith());
646:       assertFalse(node0.isScript());
647:       assertFalse(node0.isCatch());
648:       assertFalse(node0.isInstanceOf());
649:       assertEquals((-1), node0.getLineno());
650:       assertFalse(node0.isBlock());
651:       assertFalse(node0.isTry());
652:       assertFalse(node0.isRegExp());
653:       assertFalse(node0.isThis());
654:       assertFalse(node0.isHook());
655:       assertFalse(node1.isEmpty());
656:       assertFalse(node1.isGetterDef());
657:       assertFalse(node1.isFor());
658:       assertFalse(node1.isDelProp());
659:       assertFalse(node1.isIf());
660:       assertFalse(node1.isArrayLit());
661:       assertTrue(node1.isNumber());
662:       assertFalse(node1.isTry());
663:       assertFalse(node1.isFunction());
664:       assertFalse(node1.isRegExp());
665:       assertFalse(node1.isString());
666:       assertFalse(node1.isSwitch());
667:       assertFalse(node1.isCase());
668:       assertFalse(node1.isParamList());
669:       assertFalse(node1.isDebugger());
670:       assertEquals((-1), node1.getCharno());
671:       assertFalse(node1.isFalse());
672:       assertFalse(node1.isSetterDef());
673:       assertFalse(node1.isInstanceOf());
674:       assertFalse(node1.isThis());
675:       assertFalse(node1.isThrow());
676:       assertFalse(node1.isBlock());
677:       assertFalse(node1.isHook());
678:       assertFalse(node1.isWith());
679:       assertFalse(node1.isInc());
680:       assertFalse(node1.isCatch());
681:       assertEquals((-1), node1.getLineno());
682:       assertFalse(node1.isIn());
683:       assertFalse(node1.isNE());
684:       assertFalse(node1.isLabelName());
685:       assertFalse(node1.isAssign());
686:       assertFalse(node1.isTypeOf());
687:       assertFalse(node1.isCast());
688:       assertFalse(node1.hasOneChild());
689:       assertFalse(node1.isGetElem());
690:       assertFalse(node1.isReturn());
691:       assertFalse(node1.isAssignAdd());
692:       assertFalse(node1.hasMoreThanOneChild());
693:       assertFalse(node1.isDec());
694:       assertEquals(39, node1.getType());
695:       assertFalse(node1.isLabel());
696:       assertFalse(node1.hasChildren());
697:       assertFalse(node1.isWhile());
698:       assertFalse(node1.isNot());
699:       assertFalse(node1.isAnd());
700:       assertFalse(node1.isContinue());
701:       assertFalse(node1.isScript());
702:       assertFalse(node1.isObjectLit());
703:       assertEquals((-1), node1.getSourcePosition());
704:       assertFalse(node1.isStringKey());
705:       assertFalse(node1.isName());
706:       assertFalse(node1.isCall());
707:       assertFalse(node1.isBreak());
708:       assertFalse(node1.isGetProp());
709:       assertEquals(0, node1.getChildCount());
710:       assertFalse(node1.isComma());
711:       assertFalse(node1.isVar());
712:       assertFalse(node1.isDo());
713:       assertFalse(node1.isDefaultCase());
714:       assertFalse(node1.isExprResult());
715:       assertFalse(node1.isVoid());
716:       assertFalse(node1.isNew());
717:       assertFalse(node1.isAdd());
718:       assertFalse(node1.isOr());
719:       assertFalse(node1.isTrue());
720:       assertFalse(node1.isNull());
721:       assertFalse(node2.isCatch());
722:       assertEquals(0, node2.getChildCount());
723:       assertFalse(node2.isSetterDef());
724:       assertFalse(node2.isFunction());
725:       assertFalse(node2.isRegExp());
726:       assertFalse(node2.isTry());
727:       assertFalse(node2.isDefaultCase());
728:       assertFalse(node2.isVar());
729:       assertFalse(node2.isArrayLit());
730:       assertFalse(node2.isGetterDef());
731:       assertFalse(node2.isDebugger());
732:       assertFalse(node2.isStringKey());
733:       assertFalse(node2.isOr());
734:       assertFalse(node2.isString());
735:       assertFalse(node2.isTypeOf());
736:       assertFalse(node2.isDec());
737:       assertFalse(node2.isLabel());
738:       assertFalse(node2.isNew());
739:       assertFalse(node2.hasChildren());
740:       assertFalse(node2.isAssignAdd());
741:       assertFalse(node2.isDo());
742:       assertFalse(node2.isReturn());
743:       assertFalse(node2.isWhile());
744:       assertFalse(node2.isCall());
745:       assertFalse(node2.isGetElem());
746:       assertFalse(node2.isAssign());
747:       assertFalse(node2.isEmpty());
748:       assertFalse(node2.isAdd());
749:       assertEquals(83, node2.getType());
750:       assertFalse(node2.isTrue());
751:       assertFalse(node2.isVoid());
752:       assertFalse(node2.isExprResult());
753:       assertFalse(node2.isNull());
754:       assertFalse(node2.isBreak());
755:       assertFalse(node2.isDelProp());
756:       assertFalse(node2.isName());
757:       assertTrue(node2.isParamList());
758:       assertFalse(node2.isObjectLit());
759:       assertFalse(node2.isWith());
760:       assertFalse(node2.isNot());
761:       assertFalse(node2.isInstanceOf());
762:       assertFalse(node2.isThis());
763:       assertFalse(node2.isComma());
764:       assertFalse(node2.isScript());
765:       assertFalse(node2.isGetProp());
766:       assertFalse(node2.isThrow());
767:       assertFalse(node2.isCast());
768:       assertFalse(node2.hasOneChild());
769:       assertFalse(node2.isNumber());
770:       assertFalse(node2.isFalse());
771:       assertFalse(node2.isSwitch());
772:       assertEquals((-1), node2.getCharno());
773:       assertEquals((-1), node2.getSourcePosition());
774:       assertFalse(node2.isLabelName());
775:       assertFalse(node2.isAnd());
776:       assertFalse(node2.hasMoreThanOneChild());
777:       assertFalse(node2.isCase());
778:       assertFalse(node2.isIn());
779:       assertFalse(node2.isContinue());
780:       assertFalse(node2.isInc());
781:       assertFalse(node2.isBlock());
782:       assertFalse(node2.isFor());
783:       assertFalse(node2.isHook());
784:       assertFalse(node2.isNE());
785:       assertEquals((-1), node2.getLineno());
786:       assertFalse(node2.isIf());
787:       assertNotNull(node2);
788:       assertSame(node0, node2);
789:       assertSame(node2, node0);
790:       assertFalse(node0.equals((Object)node1));
791:       assertFalse(node1.equals((Object)node0));
792:       assertFalse(node2.equals((Object)node1));
793:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
794:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
795:       assertEquals(29, Node.JSDOC_INFO_PROP);
796:       assertEquals(53, Node.INPUT_ID);
797:       assertEquals(47, Node.IS_DISPATCHER);
798:       assertEquals(2, Node.POST_FLAG);
799:       assertEquals(55, Node.INFERRED_FUNCTION);
800:       assertEquals(4095, Node.COLUMN_MASK);
801:       assertEquals(48, Node.DIRECTIVES);
802:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
803:       assertEquals(49, Node.DIRECT_EVAL);
804:       assertEquals(39, Node.EMPTY_BLOCK);
805:       assertEquals(37, Node.OPT_ARG_NAME);
806:       assertEquals(56, Node.CHANGE_TIME);
807:       assertEquals(15, Node.NO_SIDE_EFFECTS);
808:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
809:       assertEquals(8, Node.FLAG_NO_THROWS);
810:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
811:       assertEquals(36, Node.QUOTED_PROP);
812:       assertEquals(57, Node.REFLECTED_OBJECT);
813:       assertEquals(52, Node.LENGTH);
814:       assertEquals(40, Node.ORIGINALNAME_PROP);
815:       assertEquals(57, Node.LAST_PROP);
816:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
817:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
818:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
819:       assertEquals(30, Node.VAR_ARGS_NAME);
820:       assertEquals(12, Node.COLUMN_BITS);
821:       assertEquals(32, Node.INCRDECR_PROP);
822:       assertEquals(46, Node.IS_NAMESPACE);
823:       assertEquals(1, Node.DECR_FLAG);
824:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
825:       assertEquals(43, Node.IS_CONSTANT_NAME);
826:       assertEquals(50, Node.FREE_CALL);
827:       assertEquals(54, Node.SLASH_V);
828:       assertEquals(51, Node.STATIC_SOURCE_FILE);
829:       assertEquals(40, Node.ORIGINALNAME_PROP);
830:       assertEquals(57, Node.REFLECTED_OBJECT);
831:       assertEquals(8, Node.FLAG_NO_THROWS);
832:       assertEquals(39, Node.EMPTY_BLOCK);
833:       assertEquals(54, Node.SLASH_V);
834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
835:       assertEquals(52, Node.LENGTH);
836:       assertEquals(50, Node.FREE_CALL);
837:       assertEquals(55, Node.INFERRED_FUNCTION);
838:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
839:       assertEquals(46, Node.IS_NAMESPACE);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(2, Node.POST_FLAG);
842:       assertEquals(57, Node.LAST_PROP);
843:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
844:       assertEquals(30, Node.VAR_ARGS_NAME);
845:       assertEquals(47, Node.IS_DISPATCHER);
846:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
847:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
848:       assertEquals(29, Node.JSDOC_INFO_PROP);
849:       assertEquals(53, Node.INPUT_ID);
850:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
851:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
852:       assertEquals(43, Node.IS_CONSTANT_NAME);
853:       assertEquals(56, Node.CHANGE_TIME);
854:       assertEquals(51, Node.STATIC_SOURCE_FILE);
855:       assertEquals(36, Node.QUOTED_PROP);
856:       assertEquals(4095, Node.COLUMN_MASK);
857:       assertEquals(12, Node.COLUMN_BITS);
858:       assertEquals(49, Node.DIRECT_EVAL);
859:       assertEquals(48, Node.DIRECTIVES);
860:       assertEquals(32, Node.INCRDECR_PROP);
861:       assertEquals(1, Node.DECR_FLAG);
862:       assertEquals(37, Node.OPT_ARG_NAME);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
865:       assertEquals(37, Node.OPT_ARG_NAME);
866:       assertEquals(32, Node.INCRDECR_PROP);
867:       assertEquals(51, Node.STATIC_SOURCE_FILE);
868:       assertEquals(2, Node.POST_FLAG);
869:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
870:       assertEquals(49, Node.DIRECT_EVAL);
871:       assertEquals(46, Node.IS_NAMESPACE);
872:       assertEquals(54, Node.SLASH_V);
873:       assertEquals(56, Node.CHANGE_TIME);
874:       assertEquals(53, Node.INPUT_ID);
875:       assertEquals(52, Node.LENGTH);
876:       assertEquals(15, Node.NO_SIDE_EFFECTS);
877:       assertEquals(40, Node.ORIGINALNAME_PROP);
878:       assertEquals(29, Node.JSDOC_INFO_PROP);
879:       assertEquals(30, Node.VAR_ARGS_NAME);
880:       assertEquals(57, Node.LAST_PROP);
881:       assertEquals(47, Node.IS_DISPATCHER);
882:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
883:       assertEquals(48, Node.DIRECTIVES);
884:       assertEquals(4095, Node.COLUMN_MASK);
885:       assertEquals(8, Node.FLAG_NO_THROWS);
886:       assertEquals(39, Node.EMPTY_BLOCK);
887:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
888:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
889:       assertEquals(55, Node.INFERRED_FUNCTION);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(50, Node.FREE_CALL);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(43, Node.IS_CONSTANT_NAME);
896:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
897:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
898:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
899:       assertEquals(1, Node.DECR_FLAG);
900:       assertEquals(12, Node.COLUMN_BITS);
901:       
902:       TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
903:       assertNull(templateType0);
904:       
905:       // Undeclared exception!
906:       try { 
907:         jSTypeRegistry0.createEnumType("com.google.common.base.CharMatcher", node2, (JSType) null);
908:         fail("Expecting exception: NullPointerException");
909:       
910:       } catch(NullPointerException e) {
911:          //
912:          // no message in exception (getMessage() returned null)
913:          //
914:          verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
915:       }
916:   }
917: }
RegularFileObject[/tmp/EvoSuite_96_1628256043389/com/google/javascript/rhino/Node_96_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_96_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_96_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_96_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:43.522 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertNotNull(arrayList0);

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertTrue(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

int int0 = node0.getIntProp((-2118));
assertEquals(0, int0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertTrue(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertTrue(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertNotNull(iterable0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node node1 = Node.newNumber((-1163.37132));
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertEquals(39, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean0 = node0.isParamList();
assertTrue(boolean0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertTrue(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isSwitch());
assertEquals(83, node0.getType());
assertTrue(node0.isParamList());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDelProp());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWhile());
assertFalse(node0.isString());
assertFalse(node0.isExprResult());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isNew());
assertFalse(node0.isFunction());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIf());
assertFalse(node0.isNumber());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isArrayLit());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isString());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isParamList());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isWith());
assertFalse(node1.isInc());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDec());
assertEquals(39, node1.getType());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isExprResult());
assertFalse(node1.isVoid());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isSetterDef());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertFalse(node2.isStringKey());
assertFalse(node2.isOr());
assertFalse(node2.isString());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.isNew());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertEquals(83, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertTrue(node2.isParamList());
assertFalse(node2.isObjectLit());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isScript());
assertFalse(node2.isGetProp());
assertFalse(node2.isThrow());
assertFalse(node2.isCast());
assertFalse(node2.hasOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isFalse());
assertFalse(node2.isSwitch());
assertEquals((-1), node2.getCharno());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertFalse(node2.isNE());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);

TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
assertNull(templateType0);

jSTypeRegistry0.createEnumType("com.google.common.base.CharMatcher", node2, (JSType) null);

[MASTER] 13:20:43.823 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_98_1628256043684/com/google/javascript/rhino/Node_98_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_98_1628256043684/com/google/javascript/rhino/Node_98_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:43.823 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:43.823 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:43.824 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 654
[MASTER] 13:20:43.826 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_98_1628256043684/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:43 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import java.util.Set;
14: import org.evosuite.runtime.EvoRunner;
15: import org.evosuite.runtime.EvoRunnerParameters;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_98_tmp__ESTest extends Node_98_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = Node.newNumber((-2591.135802832726), 0, 0);
24:       assertEquals(0, node0.getCharno());
25:       assertFalse(node0.isGetElem());
26:       assertFalse(node0.isAnd());
27:       assertFalse(node0.isWith());
28:       assertFalse(node0.isLabelName());
29:       assertFalse(node0.isAssign());
30:       assertFalse(node0.isInstanceOf());
31:       assertFalse(node0.isTypeOf());
32:       assertFalse(node0.isExprResult());
33:       assertFalse(node0.isCast());
34:       assertFalse(node0.isAssignAdd());
35:       assertFalse(node0.isLabel());
36:       assertFalse(node0.isOr());
37:       assertFalse(node0.isDo());
38:       assertFalse(node0.isWhile());
39:       assertFalse(node0.isThrow());
40:       assertFalse(node0.isFalse());
41:       assertFalse(node0.isName());
42:       assertFalse(node0.isContinue());
43:       assertFalse(node0.isBreak());
44:       assertFalse(node0.isCall());
45:       assertEquals(0, node0.getLineno());
46:       assertFalse(node0.isGetProp());
47:       assertTrue(node0.isNumber());
48:       assertFalse(node0.isComma());
49:       assertFalse(node0.isDec());
50:       assertFalse(node0.hasChildren());
51:       assertFalse(node0.isReturn());
52:       assertFalse(node0.isNot());
53:       assertFalse(node0.isObjectLit());
54:       assertFalse(node0.isString());
55:       assertFalse(node0.isDebugger());
56:       assertFalse(node0.isFunction());
57:       assertFalse(node0.isTry());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isRegExp());
60:       assertFalse(node0.isDefaultCase());
61:       assertFalse(node0.isTrue());
62:       assertFalse(node0.isDelProp());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isCatch());
65:       assertEquals(0, node0.getChildCount());
66:       assertFalse(node0.isNull());
67:       assertFalse(node0.isIf());
68:       assertEquals(0, node0.getSourcePosition());
69:       assertFalse(node0.isNE());
70:       assertFalse(node0.isIn());
71:       assertFalse(node0.isSetterDef());
72:       assertFalse(node0.isInc());
73:       assertFalse(node0.isEmpty());
74:       assertFalse(node0.isAdd());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.isNew());
77:       assertFalse(node0.isSwitch());
78:       assertFalse(node0.isHook());
79:       assertFalse(node0.isVar());
80:       assertFalse(node0.isStringKey());
81:       assertEquals(39, node0.getType());
82:       assertFalse(node0.hasMoreThanOneChild());
83:       assertFalse(node0.isParamList());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isFor());
86:       assertFalse(node0.isCase());
87:       assertFalse(node0.isGetterDef());
88:       assertFalse(node0.hasOneChild());
89:       assertFalse(node0.isScript());
90:       assertNotNull(node0);
91:       assertEquals(57, Node.LAST_PROP);
92:       assertEquals(30, Node.VAR_ARGS_NAME);
93:       assertEquals(49, Node.DIRECT_EVAL);
94:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
95:       assertEquals(54, Node.SLASH_V);
96:       assertEquals(12, Node.COLUMN_BITS);
97:       assertEquals(32, Node.INCRDECR_PROP);
98:       assertEquals(51, Node.STATIC_SOURCE_FILE);
99:       assertEquals(52, Node.LENGTH);
100:       assertEquals(1, Node.DECR_FLAG);
101:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
103:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
104:       assertEquals(56, Node.CHANGE_TIME);
105:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
106:       assertEquals(8, Node.FLAG_NO_THROWS);
107:       assertEquals(57, Node.REFLECTED_OBJECT);
108:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
109:       assertEquals(4095, Node.COLUMN_MASK);
110:       assertEquals(48, Node.DIRECTIVES);
111:       assertEquals(37, Node.OPT_ARG_NAME);
112:       assertEquals(43, Node.IS_CONSTANT_NAME);
113:       assertEquals(36, Node.QUOTED_PROP);
114:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
115:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
116:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
117:       assertEquals(55, Node.INFERRED_FUNCTION);
118:       assertEquals(29, Node.JSDOC_INFO_PROP);
119:       assertEquals(39, Node.EMPTY_BLOCK);
120:       assertEquals(53, Node.INPUT_ID);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(2, Node.POST_FLAG);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
125:       assertEquals(46, Node.IS_NAMESPACE);
126:       assertEquals(40, Node.ORIGINALNAME_PROP);
127:       
128:       InputId inputId0 = node0.getInputId();
129:       assertEquals(0, node0.getCharno());
130:       assertFalse(node0.isGetElem());
131:       assertFalse(node0.isAnd());
132:       assertFalse(node0.isWith());
133:       assertFalse(node0.isLabelName());
134:       assertFalse(node0.isAssign());
135:       assertFalse(node0.isInstanceOf());
136:       assertFalse(node0.isTypeOf());
137:       assertFalse(node0.isExprResult());
138:       assertFalse(node0.isCast());
139:       assertFalse(node0.isAssignAdd());
140:       assertFalse(node0.isLabel());
141:       assertFalse(node0.isOr());
142:       assertFalse(node0.isDo());
143:       assertFalse(node0.isWhile());
144:       assertFalse(node0.isThrow());
145:       assertFalse(node0.isFalse());
146:       assertFalse(node0.isName());
147:       assertFalse(node0.isContinue());
148:       assertFalse(node0.isBreak());
149:       assertFalse(node0.isCall());
150:       assertEquals(0, node0.getLineno());
151:       assertFalse(node0.isGetProp());
152:       assertTrue(node0.isNumber());
153:       assertFalse(node0.isComma());
154:       assertFalse(node0.isDec());
155:       assertFalse(node0.hasChildren());
156:       assertFalse(node0.isReturn());
157:       assertFalse(node0.isNot());
158:       assertFalse(node0.isObjectLit());
159:       assertFalse(node0.isString());
160:       assertFalse(node0.isDebugger());
161:       assertFalse(node0.isFunction());
162:       assertFalse(node0.isTry());
163:       assertFalse(node0.isVoid());
164:       assertFalse(node0.isRegExp());
165:       assertFalse(node0.isDefaultCase());
166:       assertFalse(node0.isTrue());
167:       assertFalse(node0.isDelProp());
168:       assertFalse(node0.isArrayLit());
169:       assertFalse(node0.isCatch());
170:       assertEquals(0, node0.getChildCount());
171:       assertFalse(node0.isNull());
172:       assertFalse(node0.isIf());
173:       assertEquals(0, node0.getSourcePosition());
174:       assertFalse(node0.isNE());
175:       assertFalse(node0.isIn());
176:       assertFalse(node0.isSetterDef());
177:       assertFalse(node0.isInc());
178:       assertFalse(node0.isEmpty());
179:       assertFalse(node0.isAdd());
180:       assertFalse(node0.isBlock());
181:       assertFalse(node0.isNew());
182:       assertFalse(node0.isSwitch());
183:       assertFalse(node0.isHook());
184:       assertFalse(node0.isVar());
185:       assertFalse(node0.isStringKey());
186:       assertEquals(39, node0.getType());
187:       assertFalse(node0.hasMoreThanOneChild());
188:       assertFalse(node0.isParamList());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isFor());
191:       assertFalse(node0.isCase());
192:       assertFalse(node0.isGetterDef());
193:       assertFalse(node0.hasOneChild());
194:       assertFalse(node0.isScript());
195:       assertNull(inputId0);
196:       assertEquals(57, Node.LAST_PROP);
197:       assertEquals(30, Node.VAR_ARGS_NAME);
198:       assertEquals(49, Node.DIRECT_EVAL);
199:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
200:       assertEquals(54, Node.SLASH_V);
201:       assertEquals(12, Node.COLUMN_BITS);
202:       assertEquals(32, Node.INCRDECR_PROP);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(52, Node.LENGTH);
205:       assertEquals(1, Node.DECR_FLAG);
206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
208:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
209:       assertEquals(56, Node.CHANGE_TIME);
210:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
211:       assertEquals(8, Node.FLAG_NO_THROWS);
212:       assertEquals(57, Node.REFLECTED_OBJECT);
213:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
214:       assertEquals(4095, Node.COLUMN_MASK);
215:       assertEquals(48, Node.DIRECTIVES);
216:       assertEquals(37, Node.OPT_ARG_NAME);
217:       assertEquals(43, Node.IS_CONSTANT_NAME);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
220:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
222:       assertEquals(55, Node.INFERRED_FUNCTION);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(39, Node.EMPTY_BLOCK);
225:       assertEquals(53, Node.INPUT_ID);
226:       assertEquals(47, Node.IS_DISPATCHER);
227:       assertEquals(2, Node.POST_FLAG);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
230:       assertEquals(46, Node.IS_NAMESPACE);
231:       assertEquals(40, Node.ORIGINALNAME_PROP);
232:       
233:       int int0 = node0.getType();
234:       assertEquals(39, int0);
235:       assertEquals(0, node0.getCharno());
236:       assertFalse(node0.isGetElem());
237:       assertFalse(node0.isAnd());
238:       assertFalse(node0.isWith());
239:       assertFalse(node0.isLabelName());
240:       assertFalse(node0.isAssign());
241:       assertFalse(node0.isInstanceOf());
242:       assertFalse(node0.isTypeOf());
243:       assertFalse(node0.isExprResult());
244:       assertFalse(node0.isCast());
245:       assertFalse(node0.isAssignAdd());
246:       assertFalse(node0.isLabel());
247:       assertFalse(node0.isOr());
248:       assertFalse(node0.isDo());
249:       assertFalse(node0.isWhile());
250:       assertFalse(node0.isThrow());
251:       assertFalse(node0.isFalse());
252:       assertFalse(node0.isName());
253:       assertFalse(node0.isContinue());
254:       assertFalse(node0.isBreak());
255:       assertFalse(node0.isCall());
256:       assertEquals(0, node0.getLineno());
257:       assertFalse(node0.isGetProp());
258:       assertTrue(node0.isNumber());
259:       assertFalse(node0.isComma());
260:       assertFalse(node0.isDec());
261:       assertFalse(node0.hasChildren());
262:       assertFalse(node0.isReturn());
263:       assertFalse(node0.isNot());
264:       assertFalse(node0.isObjectLit());
265:       assertFalse(node0.isString());
266:       assertFalse(node0.isDebugger());
267:       assertFalse(node0.isFunction());
268:       assertFalse(node0.isTry());
269:       assertFalse(node0.isVoid());
270:       assertFalse(node0.isRegExp());
271:       assertFalse(node0.isDefaultCase());
272:       assertFalse(node0.isTrue());
273:       assertFalse(node0.isDelProp());
274:       assertFalse(node0.isArrayLit());
275:       assertFalse(node0.isCatch());
276:       assertEquals(0, node0.getChildCount());
277:       assertFalse(node0.isNull());
278:       assertFalse(node0.isIf());
279:       assertEquals(0, node0.getSourcePosition());
280:       assertFalse(node0.isNE());
281:       assertFalse(node0.isIn());
282:       assertFalse(node0.isSetterDef());
283:       assertFalse(node0.isInc());
284:       assertFalse(node0.isEmpty());
285:       assertFalse(node0.isAdd());
286:       assertFalse(node0.isBlock());
287:       assertFalse(node0.isNew());
288:       assertFalse(node0.isSwitch());
289:       assertFalse(node0.isHook());
290:       assertFalse(node0.isVar());
291:       assertFalse(node0.isStringKey());
292:       assertEquals(39, node0.getType());
293:       assertFalse(node0.hasMoreThanOneChild());
294:       assertFalse(node0.isParamList());
295:       assertFalse(node0.isThis());
296:       assertFalse(node0.isFor());
297:       assertFalse(node0.isCase());
298:       assertFalse(node0.isGetterDef());
299:       assertFalse(node0.hasOneChild());
300:       assertFalse(node0.isScript());
301:       assertEquals(57, Node.LAST_PROP);
302:       assertEquals(30, Node.VAR_ARGS_NAME);
303:       assertEquals(49, Node.DIRECT_EVAL);
304:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
305:       assertEquals(54, Node.SLASH_V);
306:       assertEquals(12, Node.COLUMN_BITS);
307:       assertEquals(32, Node.INCRDECR_PROP);
308:       assertEquals(51, Node.STATIC_SOURCE_FILE);
309:       assertEquals(52, Node.LENGTH);
310:       assertEquals(1, Node.DECR_FLAG);
311:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
314:       assertEquals(56, Node.CHANGE_TIME);
315:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
316:       assertEquals(8, Node.FLAG_NO_THROWS);
317:       assertEquals(57, Node.REFLECTED_OBJECT);
318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
319:       assertEquals(4095, Node.COLUMN_MASK);
320:       assertEquals(48, Node.DIRECTIVES);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(43, Node.IS_CONSTANT_NAME);
323:       assertEquals(36, Node.QUOTED_PROP);
324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
325:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
326:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
327:       assertEquals(55, Node.INFERRED_FUNCTION);
328:       assertEquals(29, Node.JSDOC_INFO_PROP);
329:       assertEquals(39, Node.EMPTY_BLOCK);
330:       assertEquals(53, Node.INPUT_ID);
331:       assertEquals(47, Node.IS_DISPATCHER);
332:       assertEquals(2, Node.POST_FLAG);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
335:       assertEquals(46, Node.IS_NAMESPACE);
336:       assertEquals(40, Node.ORIGINALNAME_PROP);
337:       
338:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
339:       assertEquals(0, node0.getCharno());
340:       assertFalse(node0.isGetElem());
341:       assertFalse(node0.isAnd());
342:       assertFalse(node0.isWith());
343:       assertFalse(node0.isLabelName());
344:       assertFalse(node0.isAssign());
345:       assertFalse(node0.isInstanceOf());
346:       assertFalse(node0.isTypeOf());
347:       assertFalse(node0.isExprResult());
348:       assertFalse(node0.isCast());
349:       assertFalse(node0.isAssignAdd());
350:       assertFalse(node0.isLabel());
351:       assertFalse(node0.isOr());
352:       assertFalse(node0.isDo());
353:       assertFalse(node0.isWhile());
354:       assertFalse(node0.isThrow());
355:       assertFalse(node0.isFalse());
356:       assertFalse(node0.isName());
357:       assertFalse(node0.isContinue());
358:       assertFalse(node0.isBreak());
359:       assertFalse(node0.isCall());
360:       assertEquals(0, node0.getLineno());
361:       assertFalse(node0.isGetProp());
362:       assertTrue(node0.isNumber());
363:       assertFalse(node0.isComma());
364:       assertFalse(node0.isDec());
365:       assertFalse(node0.hasChildren());
366:       assertFalse(node0.isReturn());
367:       assertFalse(node0.isNot());
368:       assertFalse(node0.isObjectLit());
369:       assertFalse(node0.isString());
370:       assertFalse(node0.isDebugger());
371:       assertFalse(node0.isFunction());
372:       assertFalse(node0.isTry());
373:       assertFalse(node0.isVoid());
374:       assertFalse(node0.isRegExp());
375:       assertFalse(node0.isDefaultCase());
376:       assertFalse(node0.isTrue());
377:       assertFalse(node0.isDelProp());
378:       assertFalse(node0.isArrayLit());
379:       assertFalse(node0.isCatch());
380:       assertEquals(0, node0.getChildCount());
381:       assertFalse(node0.isNull());
382:       assertFalse(node0.isIf());
383:       assertEquals(0, node0.getSourcePosition());
384:       assertFalse(node0.isNE());
385:       assertFalse(node0.isIn());
386:       assertFalse(node0.isSetterDef());
387:       assertFalse(node0.isInc());
388:       assertFalse(node0.isEmpty());
389:       assertFalse(node0.isAdd());
390:       assertFalse(node0.isBlock());
391:       assertFalse(node0.isNew());
392:       assertFalse(node0.isSwitch());
393:       assertFalse(node0.isHook());
394:       assertFalse(node0.isVar());
395:       assertFalse(node0.isStringKey());
396:       assertEquals(39, node0.getType());
397:       assertFalse(node0.hasMoreThanOneChild());
398:       assertFalse(node0.isParamList());
399:       assertFalse(node0.isThis());
400:       assertFalse(node0.isFor());
401:       assertFalse(node0.isCase());
402:       assertFalse(node0.isGetterDef());
403:       assertFalse(node0.hasOneChild());
404:       assertFalse(node0.isScript());
405:       assertNotNull(node_FileLevelJsDocBuilder0);
406:       assertEquals(57, Node.LAST_PROP);
407:       assertEquals(30, Node.VAR_ARGS_NAME);
408:       assertEquals(49, Node.DIRECT_EVAL);
409:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
410:       assertEquals(54, Node.SLASH_V);
411:       assertEquals(12, Node.COLUMN_BITS);
412:       assertEquals(32, Node.INCRDECR_PROP);
413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
414:       assertEquals(52, Node.LENGTH);
415:       assertEquals(1, Node.DECR_FLAG);
416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
419:       assertEquals(56, Node.CHANGE_TIME);
420:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
421:       assertEquals(8, Node.FLAG_NO_THROWS);
422:       assertEquals(57, Node.REFLECTED_OBJECT);
423:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
424:       assertEquals(4095, Node.COLUMN_MASK);
425:       assertEquals(48, Node.DIRECTIVES);
426:       assertEquals(37, Node.OPT_ARG_NAME);
427:       assertEquals(43, Node.IS_CONSTANT_NAME);
428:       assertEquals(36, Node.QUOTED_PROP);
429:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
430:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
432:       assertEquals(55, Node.INFERRED_FUNCTION);
433:       assertEquals(29, Node.JSDOC_INFO_PROP);
434:       assertEquals(39, Node.EMPTY_BLOCK);
435:       assertEquals(53, Node.INPUT_ID);
436:       assertEquals(47, Node.IS_DISPATCHER);
437:       assertEquals(2, Node.POST_FLAG);
438:       assertEquals(50, Node.FREE_CALL);
439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
440:       assertEquals(46, Node.IS_NAMESPACE);
441:       assertEquals(40, Node.ORIGINALNAME_PROP);
442:       
443:       node_FileLevelJsDocBuilder0.append("Object");
444:       assertEquals(0, node0.getCharno());
445:       assertFalse(node0.isGetElem());
446:       assertFalse(node0.isAnd());
447:       assertFalse(node0.isWith());
448:       assertFalse(node0.isLabelName());
449:       assertFalse(node0.isAssign());
450:       assertFalse(node0.isInstanceOf());
451:       assertFalse(node0.isTypeOf());
452:       assertFalse(node0.isExprResult());
453:       assertFalse(node0.isCast());
454:       assertFalse(node0.isAssignAdd());
455:       assertFalse(node0.isLabel());
456:       assertFalse(node0.isOr());
457:       assertFalse(node0.isDo());
458:       assertFalse(node0.isWhile());
459:       assertFalse(node0.isThrow());
460:       assertFalse(node0.isFalse());
461:       assertFalse(node0.isName());
462:       assertFalse(node0.isContinue());
463:       assertFalse(node0.isBreak());
464:       assertFalse(node0.isCall());
465:       assertEquals(0, node0.getLineno());
466:       assertFalse(node0.isGetProp());
467:       assertTrue(node0.isNumber());
468:       assertFalse(node0.isComma());
469:       assertFalse(node0.isDec());
470:       assertFalse(node0.hasChildren());
471:       assertFalse(node0.isReturn());
472:       assertFalse(node0.isNot());
473:       assertFalse(node0.isObjectLit());
474:       assertFalse(node0.isString());
475:       assertFalse(node0.isDebugger());
476:       assertFalse(node0.isFunction());
477:       assertFalse(node0.isTry());
478:       assertFalse(node0.isVoid());
479:       assertFalse(node0.isRegExp());
480:       assertFalse(node0.isDefaultCase());
481:       assertFalse(node0.isTrue());
482:       assertFalse(node0.isDelProp());
483:       assertFalse(node0.isArrayLit());
484:       assertFalse(node0.isCatch());
485:       assertEquals(0, node0.getChildCount());
486:       assertFalse(node0.isNull());
487:       assertFalse(node0.isIf());
488:       assertEquals(0, node0.getSourcePosition());
489:       assertFalse(node0.isNE());
490:       assertFalse(node0.isIn());
491:       assertFalse(node0.isSetterDef());
492:       assertFalse(node0.isInc());
493:       assertFalse(node0.isEmpty());
494:       assertFalse(node0.isAdd());
495:       assertFalse(node0.isBlock());
496:       assertFalse(node0.isNew());
497:       assertFalse(node0.isSwitch());
498:       assertFalse(node0.isHook());
499:       assertFalse(node0.isVar());
500:       assertFalse(node0.isStringKey());
501:       assertEquals(39, node0.getType());
502:       assertFalse(node0.hasMoreThanOneChild());
503:       assertFalse(node0.isParamList());
504:       assertFalse(node0.isThis());
505:       assertFalse(node0.isFor());
506:       assertFalse(node0.isCase());
507:       assertFalse(node0.isGetterDef());
508:       assertFalse(node0.hasOneChild());
509:       assertFalse(node0.isScript());
510:       assertEquals(57, Node.LAST_PROP);
511:       assertEquals(30, Node.VAR_ARGS_NAME);
512:       assertEquals(49, Node.DIRECT_EVAL);
513:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
514:       assertEquals(54, Node.SLASH_V);
515:       assertEquals(12, Node.COLUMN_BITS);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(51, Node.STATIC_SOURCE_FILE);
518:       assertEquals(52, Node.LENGTH);
519:       assertEquals(1, Node.DECR_FLAG);
520:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
522:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
523:       assertEquals(56, Node.CHANGE_TIME);
524:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
525:       assertEquals(8, Node.FLAG_NO_THROWS);
526:       assertEquals(57, Node.REFLECTED_OBJECT);
527:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
528:       assertEquals(4095, Node.COLUMN_MASK);
529:       assertEquals(48, Node.DIRECTIVES);
530:       assertEquals(37, Node.OPT_ARG_NAME);
531:       assertEquals(43, Node.IS_CONSTANT_NAME);
532:       assertEquals(36, Node.QUOTED_PROP);
533:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
534:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
535:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
536:       assertEquals(55, Node.INFERRED_FUNCTION);
537:       assertEquals(29, Node.JSDOC_INFO_PROP);
538:       assertEquals(39, Node.EMPTY_BLOCK);
539:       assertEquals(53, Node.INPUT_ID);
540:       assertEquals(47, Node.IS_DISPATCHER);
541:       assertEquals(2, Node.POST_FLAG);
542:       assertEquals(50, Node.FREE_CALL);
543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
544:       assertEquals(46, Node.IS_NAMESPACE);
545:       assertEquals(40, Node.ORIGINALNAME_PROP);
546:       
547:       Node node1 = Node.newString(48, "Object", (-947), 1689);
548:       assertFalse(node1.isThis());
549:       assertFalse(node1.isComma());
550:       assertFalse(node1.isBreak());
551:       assertFalse(node1.isGetProp());
552:       assertFalse(node1.isThrow());
553:       assertFalse(node1.isInstanceOf());
554:       assertFalse(node1.isFalse());
555:       assertFalse(node1.isWith());
556:       assertFalse(node1.isHook());
557:       assertFalse(node1.isSwitch());
558:       assertFalse(node1.isScript());
559:       assertFalse(node1.isString());
560:       assertFalse(node1.isCase());
561:       assertFalse(node1.hasOneChild());
562:       assertFalse(node1.isObjectLit());
563:       assertFalse(node1.isAnd());
564:       assertFalse(node1.isNot());
565:       assertEquals((-1), node1.getSourcePosition());
566:       assertEquals((-1), node1.getCharno());
567:       assertFalse(node1.isNE());
568:       assertFalse(node1.isNumber());
569:       assertFalse(node1.isIf());
570:       assertEquals((-1), node1.getLineno());
571:       assertFalse(node1.hasMoreThanOneChild());
572:       assertFalse(node1.isCast());
573:       assertFalse(node1.isContinue());
574:       assertFalse(node1.isFor());
575:       assertFalse(node1.isInc());
576:       assertFalse(node1.isRegExp());
577:       assertFalse(node1.isIn());
578:       assertFalse(node1.isSetterDef());
579:       assertFalse(node1.isParamList());
580:       assertFalse(node1.isNull());
581:       assertEquals(48, node1.getType());
582:       assertFalse(node1.isCatch());
583:       assertFalse(node1.isCall());
584:       assertFalse(node1.isVar());
585:       assertEquals(0, node1.getChildCount());
586:       assertFalse(node1.isBlock());
587:       assertFalse(node1.isFunction());
588:       assertFalse(node1.isTry());
589:       assertFalse(node1.isArrayLit());
590:       assertFalse(node1.isStringKey());
591:       assertFalse(node1.isGetterDef());
592:       assertFalse(node1.isDebugger());
593:       assertFalse(node1.isTypeOf());
594:       assertFalse(node1.isAssignAdd());
595:       assertFalse(node1.isEmpty());
596:       assertFalse(node1.isLabelName());
597:       assertFalse(node1.isDelProp());
598:       assertFalse(node1.isGetElem());
599:       assertFalse(node1.isWhile());
600:       assertFalse(node1.isReturn());
601:       assertFalse(node1.isAssign());
602:       assertFalse(node1.isDec());
603:       assertFalse(node1.isLabel());
604:       assertFalse(node1.hasChildren());
605:       assertFalse(node1.isTrue());
606:       assertFalse(node1.isVoid());
607:       assertFalse(node1.isExprResult());
608:       assertFalse(node1.isDefaultCase());
609:       assertFalse(node1.isAdd());
610:       assertFalse(node1.isDo());
611:       assertFalse(node1.isNew());
612:       assertFalse(node1.isName());
613:       assertFalse(node1.isOr());
614:       assertNotNull(node1);
615:       assertFalse(node1.equals((Object)node0));
616:       assertEquals(29, Node.JSDOC_INFO_PROP);
617:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
618:       assertEquals(56, Node.CHANGE_TIME);
619:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
620:       assertEquals(37, Node.OPT_ARG_NAME);
621:       assertEquals(53, Node.INPUT_ID);
622:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
623:       assertEquals(46, Node.IS_NAMESPACE);
624:       assertEquals(51, Node.STATIC_SOURCE_FILE);
625:       assertEquals(36, Node.QUOTED_PROP);
626:       assertEquals(30, Node.VAR_ARGS_NAME);
627:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
628:       assertEquals(57, Node.LAST_PROP);
629:       assertEquals(43, Node.IS_CONSTANT_NAME);
630:       assertEquals(55, Node.INFERRED_FUNCTION);
631:       assertEquals(15, Node.NO_SIDE_EFFECTS);
632:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
633:       assertEquals(2, Node.POST_FLAG);
634:       assertEquals(47, Node.IS_DISPATCHER);
635:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
636:       assertEquals(50, Node.FREE_CALL);
637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
638:       assertEquals(40, Node.ORIGINALNAME_PROP);
639:       assertEquals(39, Node.EMPTY_BLOCK);
640:       assertEquals(48, Node.DIRECTIVES);
641:       assertEquals(52, Node.LENGTH);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(8, Node.FLAG_NO_THROWS);
644:       assertEquals(57, Node.REFLECTED_OBJECT);
645:       assertEquals(49, Node.DIRECT_EVAL);
646:       assertEquals(32, Node.INCRDECR_PROP);
647:       assertEquals(1, Node.DECR_FLAG);
648:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
649:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
650:       assertEquals(12, Node.COLUMN_BITS);
651:       assertEquals(4095, Node.COLUMN_MASK);
652:       
653:       Iterable<Node> iterable0 = node1.children();
654:       assertFalse(iterable0.contains(node1));
655:       assertFalse(node1.isThis());
656:       assertFalse(node1.isComma());
657:       assertFalse(node1.isBreak());
658:       assertFalse(node1.isGetProp());
659:       assertFalse(node1.isThrow());
660:       assertFalse(node1.isInstanceOf());
661:       assertFalse(node1.isFalse());
662:       assertFalse(node1.isWith());
663:       assertFalse(node1.isHook());
664:       assertFalse(node1.isSwitch());
665:       assertFalse(node1.isScript());
666:       assertFalse(node1.isString());
667:       assertFalse(node1.isCase());
668:       assertFalse(node1.hasOneChild());
669:       assertFalse(node1.isObjectLit());
670:       assertFalse(node1.isAnd());
671:       assertFalse(node1.isNot());
672:       assertEquals((-1), node1.getSourcePosition());
673:       assertEquals((-1), node1.getCharno());
674:       assertFalse(node1.isNE());
675:       assertFalse(node1.isNumber());
676:       assertFalse(node1.isIf());
677:       assertEquals((-1), node1.getLineno());
678:       assertFalse(node1.hasMoreThanOneChild());
679:       assertFalse(node1.isCast());
680:       assertFalse(node1.isContinue());
681:       assertFalse(node1.isFor());
682:       assertFalse(node1.isInc());
683:       assertFalse(node1.isRegExp());
684:       assertFalse(node1.isIn());
685:       assertFalse(node1.isSetterDef());
686:       assertFalse(node1.isParamList());
687:       assertFalse(node1.isNull());
688:       assertEquals(48, node1.getType());
689:       assertFalse(node1.isCatch());
690:       assertFalse(node1.isCall());
691:       assertFalse(node1.isVar());
692:       assertEquals(0, node1.getChildCount());
693:       assertFalse(node1.isBlock());
694:       assertFalse(node1.isFunction());
695:       assertFalse(node1.isTry());
696:       assertFalse(node1.isArrayLit());
697:       assertFalse(node1.isStringKey());
698:       assertFalse(node1.isGetterDef());
699:       assertFalse(node1.isDebugger());
700:       assertFalse(node1.isTypeOf());
701:       assertFalse(node1.isAssignAdd());
702:       assertFalse(node1.isEmpty());
703:       assertFalse(node1.isLabelName());
704:       assertFalse(node1.isDelProp());
705:       assertFalse(node1.isGetElem());
706:       assertFalse(node1.isWhile());
707:       assertFalse(node1.isReturn());
708:       assertFalse(node1.isAssign());
709:       assertFalse(node1.isDec());
710:       assertFalse(node1.isLabel());
711:       assertFalse(node1.hasChildren());
712:       assertFalse(node1.isTrue());
713:       assertFalse(node1.isVoid());
714:       assertFalse(node1.isExprResult());
715:       assertFalse(node1.isDefaultCase());
716:       assertFalse(node1.isAdd());
717:       assertFalse(node1.isDo());
718:       assertFalse(node1.isNew());
719:       assertFalse(node1.isName());
720:       assertFalse(node1.isOr());
721:       assertNotNull(iterable0);
722:       assertFalse(node1.equals((Object)node0));
723:       assertEquals(29, Node.JSDOC_INFO_PROP);
724:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
725:       assertEquals(56, Node.CHANGE_TIME);
726:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
727:       assertEquals(37, Node.OPT_ARG_NAME);
728:       assertEquals(53, Node.INPUT_ID);
729:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
730:       assertEquals(46, Node.IS_NAMESPACE);
731:       assertEquals(51, Node.STATIC_SOURCE_FILE);
732:       assertEquals(36, Node.QUOTED_PROP);
733:       assertEquals(30, Node.VAR_ARGS_NAME);
734:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
735:       assertEquals(57, Node.LAST_PROP);
736:       assertEquals(43, Node.IS_CONSTANT_NAME);
737:       assertEquals(55, Node.INFERRED_FUNCTION);
738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
739:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
740:       assertEquals(2, Node.POST_FLAG);
741:       assertEquals(47, Node.IS_DISPATCHER);
742:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
743:       assertEquals(50, Node.FREE_CALL);
744:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
745:       assertEquals(40, Node.ORIGINALNAME_PROP);
746:       assertEquals(39, Node.EMPTY_BLOCK);
747:       assertEquals(48, Node.DIRECTIVES);
748:       assertEquals(52, Node.LENGTH);
749:       assertEquals(54, Node.SLASH_V);
750:       assertEquals(8, Node.FLAG_NO_THROWS);
751:       assertEquals(57, Node.REFLECTED_OBJECT);
752:       assertEquals(49, Node.DIRECT_EVAL);
753:       assertEquals(32, Node.INCRDECR_PROP);
754:       assertEquals(1, Node.DECR_FLAG);
755:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
756:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
757:       assertEquals(12, Node.COLUMN_BITS);
758:       assertEquals(4095, Node.COLUMN_MASK);
759:       
760:       Set<String> set0 = node0.getDirectives();
761:       assertEquals(0, node0.getCharno());
762:       assertFalse(node0.isGetElem());
763:       assertFalse(node0.isAnd());
764:       assertFalse(node0.isWith());
765:       assertFalse(node0.isLabelName());
766:       assertFalse(node0.isAssign());
767:       assertFalse(node0.isInstanceOf());
768:       assertFalse(node0.isTypeOf());
769:       assertFalse(node0.isExprResult());
770:       assertFalse(node0.isCast());
771:       assertFalse(node0.isAssignAdd());
772:       assertFalse(node0.isLabel());
773:       assertFalse(node0.isOr());
774:       assertFalse(node0.isDo());
775:       assertFalse(node0.isWhile());
776:       assertFalse(node0.isThrow());
777:       assertFalse(node0.isFalse());
778:       assertFalse(node0.isName());
779:       assertFalse(node0.isContinue());
780:       assertFalse(node0.isBreak());
781:       assertFalse(node0.isCall());
782:       assertEquals(0, node0.getLineno());
783:       assertFalse(node0.isGetProp());
784:       assertTrue(node0.isNumber());
785:       assertFalse(node0.isComma());
786:       assertFalse(node0.isDec());
787:       assertFalse(node0.hasChildren());
788:       assertFalse(node0.isReturn());
789:       assertFalse(node0.isNot());
790:       assertFalse(node0.isObjectLit());
791:       assertFalse(node0.isString());
792:       assertFalse(node0.isDebugger());
793:       assertFalse(node0.isFunction());
794:       assertFalse(node0.isTry());
795:       assertFalse(node0.isVoid());
796:       assertFalse(node0.isRegExp());
797:       assertFalse(node0.isDefaultCase());
798:       assertFalse(node0.isTrue());
799:       assertFalse(node0.isDelProp());
800:       assertFalse(node0.isArrayLit());
801:       assertFalse(node0.isCatch());
802:       assertEquals(0, node0.getChildCount());
803:       assertFalse(node0.isNull());
804:       assertFalse(node0.isIf());
805:       assertEquals(0, node0.getSourcePosition());
806:       assertFalse(node0.isNE());
807:       assertFalse(node0.isIn());
808:       assertFalse(node0.isSetterDef());
809:       assertFalse(node0.isInc());
810:       assertFalse(node0.isEmpty());
811:       assertFalse(node0.isAdd());
812:       assertFalse(node0.isBlock());
813:       assertFalse(node0.isNew());
814:       assertFalse(node0.isSwitch());
815:       assertFalse(node0.isHook());
816:       assertFalse(node0.isVar());
817:       assertFalse(node0.isStringKey());
818:       assertEquals(39, node0.getType());
819:       assertFalse(node0.hasMoreThanOneChild());
820:       assertFalse(node0.isParamList());
821:       assertFalse(node0.isThis());
822:       assertFalse(node0.isFor());
823:       assertFalse(node0.isCase());
824:       assertFalse(node0.isGetterDef());
825:       assertFalse(node0.hasOneChild());
826:       assertFalse(node0.isScript());
827:       assertNull(set0);
828:       assertFalse(node0.equals((Object)node1));
829:       assertEquals(57, Node.LAST_PROP);
830:       assertEquals(30, Node.VAR_ARGS_NAME);
831:       assertEquals(49, Node.DIRECT_EVAL);
832:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
833:       assertEquals(54, Node.SLASH_V);
834:       assertEquals(12, Node.COLUMN_BITS);
835:       assertEquals(32, Node.INCRDECR_PROP);
836:       assertEquals(51, Node.STATIC_SOURCE_FILE);
837:       assertEquals(52, Node.LENGTH);
838:       assertEquals(1, Node.DECR_FLAG);
839:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
842:       assertEquals(56, Node.CHANGE_TIME);
843:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
844:       assertEquals(8, Node.FLAG_NO_THROWS);
845:       assertEquals(57, Node.REFLECTED_OBJECT);
846:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
847:       assertEquals(4095, Node.COLUMN_MASK);
848:       assertEquals(48, Node.DIRECTIVES);
849:       assertEquals(37, Node.OPT_ARG_NAME);
850:       assertEquals(43, Node.IS_CONSTANT_NAME);
851:       assertEquals(36, Node.QUOTED_PROP);
852:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
853:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
855:       assertEquals(55, Node.INFERRED_FUNCTION);
856:       assertEquals(29, Node.JSDOC_INFO_PROP);
857:       assertEquals(39, Node.EMPTY_BLOCK);
858:       assertEquals(53, Node.INPUT_ID);
859:       assertEquals(47, Node.IS_DISPATCHER);
860:       assertEquals(2, Node.POST_FLAG);
861:       assertEquals(50, Node.FREE_CALL);
862:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
863:       assertEquals(46, Node.IS_NAMESPACE);
864:       assertEquals(40, Node.ORIGINALNAME_PROP);
865:       
866:       boolean boolean0 = node1.isScript();
867:       assertFalse(boolean0);
868:       assertFalse(node1.isThis());
869:       assertFalse(node1.isComma());
870:       assertFalse(node1.isBreak());
871:       assertFalse(node1.isGetProp());
872:       assertFalse(node1.isThrow());
873:       assertFalse(node1.isInstanceOf());
874:       assertFalse(node1.isFalse());
875:       assertFalse(node1.isWith());
876:       assertFalse(node1.isHook());
877:       assertFalse(node1.isSwitch());
878:       assertFalse(node1.isScript());
879:       assertFalse(node1.isString());
880:       assertFalse(node1.isCase());
881:       assertFalse(node1.hasOneChild());
882:       assertFalse(node1.isObjectLit());
883:       assertFalse(node1.isAnd());
884:       assertFalse(node1.isNot());
885:       assertEquals((-1), node1.getSourcePosition());
886:       assertEquals((-1), node1.getCharno());
887:       assertFalse(node1.isNE());
888:       assertFalse(node1.isNumber());
889:       assertFalse(node1.isIf());
890:       assertEquals((-1), node1.getLineno());
891:       assertFalse(node1.hasMoreThanOneChild());
892:       assertFalse(node1.isCast());
893:       assertFalse(node1.isContinue());
894:       assertFalse(node1.isFor());
895:       assertFalse(node1.isInc());
896:       assertFalse(node1.isRegExp());
897:       assertFalse(node1.isIn());
898:       assertFalse(node1.isSetterDef());
899:       assertFalse(node1.isParamList());
900:       assertFalse(node1.isNull());
901:       assertEquals(48, node1.getType());
902:       assertFalse(node1.isCatch());
903:       assertFalse(node1.isCall());
904:       assertFalse(node1.isVar());
905:       assertEquals(0, node1.getChildCount());
906:       assertFalse(node1.isBlock());
907:       assertFalse(node1.isFunction());
908:       assertFalse(node1.isTry());
909:       assertFalse(node1.isArrayLit());
910:       assertFalse(node1.isStringKey());
911:       assertFalse(node1.isGetterDef());
912:       assertFalse(node1.isDebugger());
913:       assertFalse(node1.isTypeOf());
914:       assertFalse(node1.isAssignAdd());
915:       assertFalse(node1.isEmpty());
916:       assertFalse(node1.isLabelName());
917:       assertFalse(node1.isDelProp());
918:       assertFalse(node1.isGetElem());
919:       assertFalse(node1.isWhile());
920:       assertFalse(node1.isReturn());
921:       assertFalse(node1.isAssign());
922:       assertFalse(node1.isDec());
923:       assertFalse(node1.isLabel());
924:       assertFalse(node1.hasChildren());
925:       assertFalse(node1.isTrue());
926:       assertFalse(node1.isVoid());
927:       assertFalse(node1.isExprResult());
928:       assertFalse(node1.isDefaultCase());
929:       assertFalse(node1.isAdd());
930:       assertFalse(node1.isDo());
931:       assertFalse(node1.isNew());
932:       assertFalse(node1.isName());
933:       assertFalse(node1.isOr());
934:       assertFalse(node1.equals((Object)node0));
935:       assertEquals(29, Node.JSDOC_INFO_PROP);
936:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
937:       assertEquals(56, Node.CHANGE_TIME);
938:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
939:       assertEquals(37, Node.OPT_ARG_NAME);
940:       assertEquals(53, Node.INPUT_ID);
941:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
942:       assertEquals(46, Node.IS_NAMESPACE);
943:       assertEquals(51, Node.STATIC_SOURCE_FILE);
944:       assertEquals(36, Node.QUOTED_PROP);
945:       assertEquals(30, Node.VAR_ARGS_NAME);
946:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
947:       assertEquals(57, Node.LAST_PROP);
948:       assertEquals(43, Node.IS_CONSTANT_NAME);
949:       assertEquals(55, Node.INFERRED_FUNCTION);
950:       assertEquals(15, Node.NO_SIDE_EFFECTS);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(2, Node.POST_FLAG);
953:       assertEquals(47, Node.IS_DISPATCHER);
954:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
955:       assertEquals(50, Node.FREE_CALL);
956:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
957:       assertEquals(40, Node.ORIGINALNAME_PROP);
958:       assertEquals(39, Node.EMPTY_BLOCK);
959:       assertEquals(48, Node.DIRECTIVES);
960:       assertEquals(52, Node.LENGTH);
961:       assertEquals(54, Node.SLASH_V);
962:       assertEquals(8, Node.FLAG_NO_THROWS);
963:       assertEquals(57, Node.REFLECTED_OBJECT);
964:       assertEquals(49, Node.DIRECT_EVAL);
965:       assertEquals(32, Node.INCRDECR_PROP);
966:       assertEquals(1, Node.DECR_FLAG);
967:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
968:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
969:       assertEquals(12, Node.COLUMN_BITS);
970:       assertEquals(4095, Node.COLUMN_MASK);
971:       
972:       Node node2 = Node.newNumber((double) 4095, 53, 1046);
973:       assertFalse(node2.hasMoreThanOneChild());
974:       assertFalse(node2.isAssignAdd());
975:       assertFalse(node2.isContinue());
976:       assertFalse(node2.isOr());
977:       assertFalse(node2.isReturn());
978:       assertEquals(39, node2.getType());
979:       assertFalse(node2.isLabel());
980:       assertFalse(node2.isDec());
981:       assertFalse(node2.isTypeOf());
982:       assertFalse(node2.isGetElem());
983:       assertFalse(node2.isLabelName());
984:       assertFalse(node2.hasOneChild());
985:       assertFalse(node2.isBlock());
986:       assertFalse(node2.isStringKey());
987:       assertFalse(node2.isAssign());
988:       assertFalse(node2.hasChildren());
989:       assertFalse(node2.isScript());
990:       assertFalse(node2.isWhile());
991:       assertEquals(1046, node2.getCharno());
992:       assertFalse(node2.isInstanceOf());
993:       assertFalse(node2.isCatch());
994:       assertFalse(node2.isAnd());
995:       assertFalse(node2.isNot());
996:       assertFalse(node2.isObjectLit());
997:       assertFalse(node2.isThis());
998:       assertFalse(node2.isRegExp());
999:       assertFalse(node2.isFunction());
1000:       assertFalse(node2.isWith());
1001:       assertFalse(node2.isCast());
1002:       assertFalse(node2.isFalse());
1003:       assertFalse(node2.isThrow());
1004:       assertEquals(53, node2.getLineno());
1005:       assertFalse(node2.isSetterDef());
1006:       assertFalse(node2.isInc());
1007:       assertFalse(node2.isIn());
1008:       assertFalse(node2.isNE());
1009:       assertFalse(node2.isDelProp());
1010:       assertFalse(node2.isSwitch());
1011:       assertFalse(node2.isIf());
1012:       assertFalse(node2.isArrayLit());
1013:       assertFalse(node2.isHook());
1014:       assertFalse(node2.isFor());
1015:       assertFalse(node2.isDebugger());
1016:       assertFalse(node2.isGetterDef());
1017:       assertFalse(node2.isString());
1018:       assertFalse(node2.isCase());
1019:       assertFalse(node2.isTry());
1020:       assertTrue(node2.isNumber());
1021:       assertFalse(node2.isGetProp());
1022:       assertEquals(0, node2.getChildCount());
1023:       assertEquals(218134, node2.getSourcePosition());
1024:       assertFalse(node2.isComma());
1025:       assertFalse(node2.isNull());
1026:       assertFalse(node2.isParamList());
1027:       assertFalse(node2.isName());
1028:       assertFalse(node2.isVoid());
1029:       assertFalse(node2.isExprResult());
1030:       assertFalse(node2.isCall());
1031:       assertFalse(node2.isBreak());
1032:       assertFalse(node2.isVar());
1033:       assertFalse(node2.isTrue());
1034:       assertFalse(node2.isDefaultCase());
1035:       assertFalse(node2.isNew());
1036:       assertFalse(node2.isEmpty());
1037:       assertFalse(node2.isAdd());
1038:       assertFalse(node2.isDo());
1039:       assertNotNull(node2);
1040:       assertNotSame(node2, node0);
1041:       assertFalse(node2.equals((Object)node1));
1042:       assertFalse(node2.equals((Object)node0));
1043:       assertEquals(48, Node.DIRECTIVES);
1044:       assertEquals(8, Node.FLAG_NO_THROWS);
1045:       assertEquals(39, Node.EMPTY_BLOCK);
1046:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1047:       assertEquals(50, Node.FREE_CALL);
1048:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1049:       assertEquals(55, Node.INFERRED_FUNCTION);
1050:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1051:       assertEquals(54, Node.SLASH_V);
1052:       assertEquals(43, Node.IS_CONSTANT_NAME);
1053:       assertEquals(30, Node.VAR_ARGS_NAME);
1054:       assertEquals(40, Node.ORIGINALNAME_PROP);
1055:       assertEquals(56, Node.CHANGE_TIME);
1056:       assertEquals(46, Node.IS_NAMESPACE);
1057:       assertEquals(47, Node.IS_DISPATCHER);
1058:       assertEquals(12, Node.COLUMN_BITS);
1059:       assertEquals(2, Node.POST_FLAG);
1060:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1061:       assertEquals(1, Node.DECR_FLAG);
1062:       assertEquals(29, Node.JSDOC_INFO_PROP);
1063:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1064:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1065:       assertEquals(57, Node.LAST_PROP);
1066:       assertEquals(32, Node.INCRDECR_PROP);
1067:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(53, Node.INPUT_ID);
1070:       assertEquals(52, Node.LENGTH);
1071:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1072:       assertEquals(57, Node.REFLECTED_OBJECT);
1073:       assertEquals(36, Node.QUOTED_PROP);
1074:       assertEquals(4095, Node.COLUMN_MASK);
1075:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1076:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1077:       assertEquals(49, Node.DIRECT_EVAL);
1078:       assertEquals(37, Node.OPT_ARG_NAME);
1079:       
1080:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1081:       assertEquals(0, node_SideEffectFlags0.valueOf());
1082:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1083:       assertNotNull(node_SideEffectFlags0);
1084:       
1085:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
1086:       assertEquals(0, node_SideEffectFlags0.valueOf());
1087:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1088:       assertEquals(0, node_SideEffectFlags1.valueOf());
1089:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1090:       assertNotNull(node_SideEffectFlags1);
1091:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1092:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1093:       
1094:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
1095:       assertEquals(0, node_SideEffectFlags0.valueOf());
1096:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1097:       assertEquals(0, node_SideEffectFlags1.valueOf());
1098:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1099:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1100:       assertEquals(0, node_SideEffectFlags2.valueOf());
1101:       assertNotNull(node_SideEffectFlags2);
1102:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1103:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1104:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1105:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1106:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1107:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1108:       
1109:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
1110:       assertEquals(0, node_SideEffectFlags0.valueOf());
1111:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1112:       assertEquals(0, node_SideEffectFlags1.valueOf());
1113:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1114:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1115:       assertEquals(0, node_SideEffectFlags3.valueOf());
1116:       assertNotNull(node_SideEffectFlags3);
1117:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1118:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1119:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1120:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1121:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1122:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1123:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1124:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1125:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1126:       
1127:       Node node3 = new Node((-646), node1, node1);
1128:       assertFalse(node1.isThis());
1129:       assertFalse(node1.isComma());
1130:       assertFalse(node1.isBreak());
1131:       assertFalse(node1.isGetProp());
1132:       assertFalse(node1.isThrow());
1133:       assertFalse(node1.isInstanceOf());
1134:       assertFalse(node1.isFalse());
1135:       assertFalse(node1.isWith());
1136:       assertFalse(node1.isHook());
1137:       assertFalse(node1.isSwitch());
1138:       assertFalse(node1.isScript());
1139:       assertFalse(node1.isString());
1140:       assertFalse(node1.isCase());
1141:       assertFalse(node1.hasOneChild());
1142:       assertFalse(node1.isObjectLit());
1143:       assertFalse(node1.isAnd());
1144:       assertFalse(node1.isNot());
1145:       assertEquals((-1), node1.getSourcePosition());
1146:       assertEquals((-1), node1.getCharno());
1147:       assertFalse(node1.isNE());
1148:       assertFalse(node1.isNumber());
1149:       assertFalse(node1.isIf());
1150:       assertEquals((-1), node1.getLineno());
1151:       assertFalse(node1.hasMoreThanOneChild());
1152:       assertFalse(node1.isCast());
1153:       assertFalse(node1.isContinue());
1154:       assertFalse(node1.isFor());
1155:       assertFalse(node1.isInc());
1156:       assertFalse(node1.isRegExp());
1157:       assertFalse(node1.isIn());
1158:       assertFalse(node1.isSetterDef());
1159:       assertFalse(node1.isParamList());
1160:       assertFalse(node1.isNull());
1161:       assertEquals(48, node1.getType());
1162:       assertFalse(node1.isCatch());
1163:       assertFalse(node1.isCall());
1164:       assertFalse(node1.isVar());
1165:       assertEquals(0, node1.getChildCount());
1166:       assertFalse(node1.isBlock());
1167:       assertFalse(node1.isFunction());
1168:       assertFalse(node1.isTry());
1169:       assertFalse(node1.isArrayLit());
1170:       assertFalse(node1.isStringKey());
1171:       assertFalse(node1.isGetterDef());
1172:       assertFalse(node1.isDebugger());
1173:       assertFalse(node1.isTypeOf());
1174:       assertFalse(node1.isAssignAdd());
1175:       assertFalse(node1.isEmpty());
1176:       assertFalse(node1.isLabelName());
1177:       assertFalse(node1.isDelProp());
1178:       assertFalse(node1.isGetElem());
1179:       assertFalse(node1.isWhile());
1180:       assertFalse(node1.isReturn());
1181:       assertFalse(node1.isAssign());
1182:       assertFalse(node1.isDec());
1183:       assertFalse(node1.isLabel());
1184:       assertFalse(node1.hasChildren());
1185:       assertFalse(node1.isTrue());
1186:       assertFalse(node1.isVoid());
1187:       assertFalse(node1.isExprResult());
1188:       assertFalse(node1.isDefaultCase());
1189:       assertFalse(node1.isAdd());
1190:       assertFalse(node1.isDo());
1191:       assertFalse(node1.isNew());
1192:       assertFalse(node1.isName());
1193:       assertFalse(node1.isOr());
1194:       assertFalse(node3.isEmpty());
1195:       assertFalse(node3.isFor());
1196:       assertTrue(node3.hasOneChild());
1197:       assertFalse(node3.isIf());
1198:       assertFalse(node3.isDelProp());
1199:       assertFalse(node3.isArrayLit());
1200:       assertFalse(node3.isTry());
1201:       assertTrue(node3.hasChildren());
1202:       assertFalse(node3.isFunction());
1203:       assertFalse(node3.isRegExp());
1204:       assertEquals(1, node3.getChildCount());
1205:       assertFalse(node3.isDefaultCase());
1206:       assertFalse(node3.isCatch());
1207:       assertFalse(node3.isInc());
1208:       assertFalse(node3.isVoid());
1209:       assertFalse(node3.isIn());
1210:       assertFalse(node3.isNE());
1211:       assertFalse(node3.isTrue());
1212:       assertFalse(node3.isNull());
1213:       assertFalse(node3.isFalse());
1214:       assertFalse(node3.isName());
1215:       assertFalse(node3.isThrow());
1216:       assertFalse(node3.isSetterDef());
1217:       assertFalse(node3.isCall());
1218:       assertFalse(node3.isBreak());
1219:       assertFalse(node3.isGetProp());
1220:       assertFalse(node3.isComma());
1221:       assertFalse(node3.isNot());
1222:       assertFalse(node3.isAnd());
1223:       assertFalse(node3.isContinue());
1224:       assertFalse(node3.isWhile());
1225:       assertFalse(node3.isString());
1226:       assertFalse(node3.isObjectLit());
1227:       assertFalse(node3.isDebugger());
1228:       assertEquals((-1), node3.getSourcePosition());
1229:       assertFalse(node3.isLabelName());
1230:       assertFalse(node3.isAssign());
1231:       assertFalse(node3.isGetElem());
1232:       assertFalse(node3.isCast());
1233:       assertFalse(node3.isAssignAdd());
1234:       assertFalse(node3.isLabel());
1235:       assertFalse(node3.isReturn());
1236:       assertFalse(node3.hasMoreThanOneChild());
1237:       assertFalse(node3.isTypeOf());
1238:       assertFalse(node3.isDec());
1239:       assertFalse(node3.isWith());
1240:       assertFalse(node3.isDo());
1241:       assertFalse(node3.isExprResult());
1242:       assertEquals((-1), node3.getLineno());
1243:       assertFalse(node3.isNew());
1244:       assertFalse(node3.isAdd());
1245:       assertFalse(node3.isOr());
1246:       assertEquals((-646), node3.getType());
1247:       assertFalse(node3.isStringKey());
1248:       assertFalse(node3.isBlock());
1249:       assertFalse(node3.isInstanceOf());
1250:       assertFalse(node3.isVar());
1251:       assertFalse(node3.isThis());
1252:       assertFalse(node3.isHook());
1253:       assertFalse(node3.isSwitch());
1254:       assertFalse(node3.isScript());
1255:       assertFalse(node3.isCase());
1256:       assertFalse(node3.isParamList());
1257:       assertFalse(node3.isNumber());
1258:       assertFalse(node3.isGetterDef());
1259:       assertEquals((-1), node3.getCharno());
1260:       assertNotNull(node3);
1261:       assertFalse(node1.equals((Object)node0));
1262:       assertFalse(node1.equals((Object)node2));
1263:       assertFalse(node3.equals((Object)node1));
1264:       assertFalse(node3.equals((Object)node2));
1265:       assertFalse(node3.equals((Object)node0));
1266:       assertEquals(29, Node.JSDOC_INFO_PROP);
1267:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1268:       assertEquals(56, Node.CHANGE_TIME);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(37, Node.OPT_ARG_NAME);
1271:       assertEquals(53, Node.INPUT_ID);
1272:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1273:       assertEquals(46, Node.IS_NAMESPACE);
1274:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1275:       assertEquals(36, Node.QUOTED_PROP);
1276:       assertEquals(30, Node.VAR_ARGS_NAME);
1277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1278:       assertEquals(57, Node.LAST_PROP);
1279:       assertEquals(43, Node.IS_CONSTANT_NAME);
1280:       assertEquals(55, Node.INFERRED_FUNCTION);
1281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1282:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1283:       assertEquals(2, Node.POST_FLAG);
1284:       assertEquals(47, Node.IS_DISPATCHER);
1285:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1286:       assertEquals(50, Node.FREE_CALL);
1287:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1288:       assertEquals(40, Node.ORIGINALNAME_PROP);
1289:       assertEquals(39, Node.EMPTY_BLOCK);
1290:       assertEquals(48, Node.DIRECTIVES);
1291:       assertEquals(52, Node.LENGTH);
1292:       assertEquals(54, Node.SLASH_V);
1293:       assertEquals(8, Node.FLAG_NO_THROWS);
1294:       assertEquals(57, Node.REFLECTED_OBJECT);
1295:       assertEquals(49, Node.DIRECT_EVAL);
1296:       assertEquals(32, Node.INCRDECR_PROP);
1297:       assertEquals(1, Node.DECR_FLAG);
1298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1299:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1300:       assertEquals(12, Node.COLUMN_BITS);
1301:       assertEquals(4095, Node.COLUMN_MASK);
1302:       assertEquals(57, Node.REFLECTED_OBJECT);
1303:       assertEquals(40, Node.ORIGINALNAME_PROP);
1304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1305:       assertEquals(39, Node.EMPTY_BLOCK);
1306:       assertEquals(54, Node.SLASH_V);
1307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1308:       assertEquals(52, Node.LENGTH);
1309:       assertEquals(8, Node.FLAG_NO_THROWS);
1310:       assertEquals(50, Node.FREE_CALL);
1311:       assertEquals(12, Node.COLUMN_BITS);
1312:       assertEquals(4095, Node.COLUMN_MASK);
1313:       assertEquals(37, Node.OPT_ARG_NAME);
1314:       assertEquals(32, Node.INCRDECR_PROP);
1315:       assertEquals(48, Node.DIRECTIVES);
1316:       assertEquals(49, Node.DIRECT_EVAL);
1317:       assertEquals(1, Node.DECR_FLAG);
1318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1320:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1321:       assertEquals(53, Node.INPUT_ID);
1322:       assertEquals(43, Node.IS_CONSTANT_NAME);
1323:       assertEquals(56, Node.CHANGE_TIME);
1324:       assertEquals(36, Node.QUOTED_PROP);
1325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1326:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1327:       assertEquals(29, Node.JSDOC_INFO_PROP);
1328:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1329:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1330:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1331:       assertEquals(55, Node.INFERRED_FUNCTION);
1332:       assertEquals(46, Node.IS_NAMESPACE);
1333:       assertEquals(57, Node.LAST_PROP);
1334:       assertEquals(47, Node.IS_DISPATCHER);
1335:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1336:       assertEquals(2, Node.POST_FLAG);
1337:       assertEquals(30, Node.VAR_ARGS_NAME);
1338:       
1339:       // Undeclared exception!
1340:       try { 
1341:         node3.setSideEffectFlags(node_SideEffectFlags3);
1342:         fail("Expecting exception: IllegalStateException");
1343:       
1344:       } catch(IllegalStateException e) {
1345:          //
1346:          // -646
1347:          //
1348:          verifyException("com.google.javascript.rhino.Token", e);
1349:       }
1350:   }
1351: }
RegularFileObject[/tmp/EvoSuite_98_1628256043684/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:43 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_98_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_98_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_98_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:43.934 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-2591.135802832726), 0, 0);
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertNotNull(node0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

InputId inputId0 = node0.getInputId();
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertNull(inputId0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

int int0 = node0.getType();
assertEquals(39, int0);
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

node_FileLevelJsDocBuilder0.append("Object");
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

Node node1 = Node.newString(48, "Object", (-947), 1689);
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(48, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node1));
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(48, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

Set<String> set0 = node0.getDirectives();
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetElem());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isName());
assertFalse(node0.isContinue());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertEquals(0, node0.getLineno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertFalse(node0.isFunction());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isRegExp());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isIf());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isNew());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isStringKey());
assertEquals(39, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasOneChild());
assertFalse(node0.isScript());
assertNull(set0);
assertFalse(node0.equals((Object)node1));
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);

boolean boolean0 = node1.isScript();
assertFalse(boolean0);
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(48, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node1.equals((Object)node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

Node node2 = Node.newNumber((double) 4095, 53, 1046);
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertEquals(39, node2.getType());
assertFalse(node2.isLabel());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.hasOneChild());
assertFalse(node2.isBlock());
assertFalse(node2.isStringKey());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertEquals(1046, node2.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isCatch());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThis());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertEquals(53, node2.getLineno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isNE());
assertFalse(node2.isDelProp());
assertFalse(node2.isSwitch());
assertFalse(node2.isIf());
assertFalse(node2.isArrayLit());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isString());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertTrue(node2.isNumber());
assertFalse(node2.isGetProp());
assertEquals(0, node2.getChildCount());
assertEquals(218134, node2.getSourcePosition());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isName());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isVar());
assertFalse(node2.isTrue());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isNew());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertNotNull(node2);
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setMutatesThis();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesArguments();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags1.setReturnsTainted();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);

Node node3 = new Node((-646), node1, node1);
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNE());
assertFalse(node1.isNumber());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isRegExp());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertEquals(48, node1.getType());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDebugger());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isName());
assertFalse(node1.isOr());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isArrayLit());
assertFalse(node3.isTry());
assertTrue(node3.hasChildren());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCatch());
assertFalse(node3.isInc());
assertFalse(node3.isVoid());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertFalse(node3.isTrue());
assertFalse(node3.isNull());
assertFalse(node3.isFalse());
assertFalse(node3.isName());
assertFalse(node3.isThrow());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isAnd());
assertFalse(node3.isContinue());
assertFalse(node3.isWhile());
assertFalse(node3.isString());
assertFalse(node3.isObjectLit());
assertFalse(node3.isDebugger());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.isWith());
assertFalse(node3.isDo());
assertFalse(node3.isExprResult());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isOr());
assertEquals((-646), node3.getType());
assertFalse(node3.isStringKey());
assertFalse(node3.isBlock());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isVar());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertFalse(node3.isSwitch());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isParamList());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertNotNull(node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);

node3.setSideEffectFlags(node_SideEffectFlags3);

[MASTER] 13:20:48.279 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_124_1628256048183/com/google/javascript/rhino/Node_124_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_124_1628256048183/com/google/javascript/rhino/Node_124_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:48.279 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:48.279 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:48.280 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 258
[MASTER] 13:20:48.281 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_124_1628256048183/com/google/javascript/rhino/Node_124_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.EnumElementType;
14: import com.google.javascript.rhino.jstype.EnumType;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import com.google.javascript.rhino.jstype.TemplateType;
18: import java.util.ArrayList;
19: import java.util.List;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class Node_124_tmp__ESTest extends Node_124_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
30:       assertNotNull(simpleErrorReporter0);
31:       
32:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
33:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
34:       assertNotNull(jSTypeRegistry0);
35:       
36:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
37:       assertTrue(arrayList0.isEmpty());
38:       assertEquals(0, arrayList0.size());
39:       assertNotNull(arrayList0);
40:       
41:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
42:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
43:       assertTrue(arrayList0.isEmpty());
44:       assertEquals(0, arrayList0.size());
45:       assertEquals((-1), node0.getLineno());
46:       assertFalse(node0.isOr());
47:       assertFalse(node0.isReturn());
48:       assertFalse(node0.isLabel());
49:       assertFalse(node0.hasMoreThanOneChild());
50:       assertFalse(node0.isContinue());
51:       assertFalse(node0.isNumber());
52:       assertFalse(node0.isLabelName());
53:       assertEquals((-1), node0.getSourcePosition());
54:       assertFalse(node0.hasOneChild());
55:       assertFalse(node0.isGetElem());
56:       assertFalse(node0.isExprResult());
57:       assertFalse(node0.isCall());
58:       assertFalse(node0.hasChildren());
59:       assertFalse(node0.isDec());
60:       assertFalse(node0.isScript());
61:       assertFalse(node0.isTypeOf());
62:       assertFalse(node0.isAssign());
63:       assertFalse(node0.isBlock());
64:       assertFalse(node0.isWhile());
65:       assertFalse(node0.isInstanceOf());
66:       assertTrue(node0.isParamList());
67:       assertFalse(node0.isGetProp());
68:       assertFalse(node0.isObjectLit());
69:       assertFalse(node0.isCatch());
70:       assertFalse(node0.isWith());
71:       assertFalse(node0.isNot());
72:       assertFalse(node0.isDebugger());
73:       assertFalse(node0.isAnd());
74:       assertFalse(node0.isFalse());
75:       assertFalse(node0.isFunction());
76:       assertFalse(node0.isInc());
77:       assertFalse(node0.isCast());
78:       assertFalse(node0.isSetterDef());
79:       assertFalse(node0.isThrow());
80:       assertFalse(node0.isIn());
81:       assertFalse(node0.isString());
82:       assertFalse(node0.isIf());
83:       assertFalse(node0.isGetterDef());
84:       assertFalse(node0.isDelProp());
85:       assertEquals((-1), node0.getCharno());
86:       assertFalse(node0.isSwitch());
87:       assertFalse(node0.isNE());
88:       assertFalse(node0.isHook());
89:       assertFalse(node0.isRegExp());
90:       assertFalse(node0.isThis());
91:       assertFalse(node0.isComma());
92:       assertFalse(node0.isCase());
93:       assertFalse(node0.isTry());
94:       assertFalse(node0.isFor());
95:       assertEquals(0, node0.getChildCount());
96:       assertEquals(83, node0.getType());
97:       assertFalse(node0.isNull());
98:       assertFalse(node0.isBreak());
99:       assertFalse(node0.isStringKey());
100:       assertFalse(node0.isTrue());
101:       assertFalse(node0.isVoid());
102:       assertFalse(node0.isName());
103:       assertFalse(node0.isVar());
104:       assertFalse(node0.isArrayLit());
105:       assertFalse(node0.isNew());
106:       assertFalse(node0.isEmpty());
107:       assertFalse(node0.isAdd());
108:       assertFalse(node0.isDefaultCase());
109:       assertFalse(node0.isDo());
110:       assertFalse(node0.isAssignAdd());
111:       assertNotNull(node0);
112:       assertEquals(8, Node.FLAG_NO_THROWS);
113:       assertEquals(39, Node.EMPTY_BLOCK);
114:       assertEquals(48, Node.DIRECTIVES);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
117:       assertEquals(4095, Node.COLUMN_MASK);
118:       assertEquals(55, Node.INFERRED_FUNCTION);
119:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
120:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(40, Node.ORIGINALNAME_PROP);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(51, Node.STATIC_SOURCE_FILE);
125:       assertEquals(46, Node.IS_NAMESPACE);
126:       assertEquals(43, Node.IS_CONSTANT_NAME);
127:       assertEquals(37, Node.OPT_ARG_NAME);
128:       assertEquals(2, Node.POST_FLAG);
129:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
130:       assertEquals(29, Node.JSDOC_INFO_PROP);
131:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
132:       assertEquals(30, Node.VAR_ARGS_NAME);
133:       assertEquals(1, Node.DECR_FLAG);
134:       assertEquals(32, Node.INCRDECR_PROP);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(47, Node.IS_DISPATCHER);
137:       assertEquals(12, Node.COLUMN_BITS);
138:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
139:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
140:       assertEquals(36, Node.QUOTED_PROP);
141:       assertEquals(52, Node.LENGTH);
142:       assertEquals(15, Node.NO_SIDE_EFFECTS);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(53, Node.INPUT_ID);
145:       assertEquals(49, Node.DIRECT_EVAL);
146:       assertEquals(57, Node.REFLECTED_OBJECT);
147:       assertEquals(56, Node.CHANGE_TIME);
148:       
149:       int int0 = node0.getIntProp(47);
150:       assertEquals(0, int0);
151:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
152:       assertTrue(arrayList0.isEmpty());
153:       assertEquals(0, arrayList0.size());
154:       assertEquals((-1), node0.getLineno());
155:       assertFalse(node0.isOr());
156:       assertFalse(node0.isReturn());
157:       assertFalse(node0.isLabel());
158:       assertFalse(node0.hasMoreThanOneChild());
159:       assertFalse(node0.isContinue());
160:       assertFalse(node0.isNumber());
161:       assertFalse(node0.isLabelName());
162:       assertEquals((-1), node0.getSourcePosition());
163:       assertFalse(node0.hasOneChild());
164:       assertFalse(node0.isGetElem());
165:       assertFalse(node0.isExprResult());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.hasChildren());
168:       assertFalse(node0.isDec());
169:       assertFalse(node0.isScript());
170:       assertFalse(node0.isTypeOf());
171:       assertFalse(node0.isAssign());
172:       assertFalse(node0.isBlock());
173:       assertFalse(node0.isWhile());
174:       assertFalse(node0.isInstanceOf());
175:       assertTrue(node0.isParamList());
176:       assertFalse(node0.isGetProp());
177:       assertFalse(node0.isObjectLit());
178:       assertFalse(node0.isCatch());
179:       assertFalse(node0.isWith());
180:       assertFalse(node0.isNot());
181:       assertFalse(node0.isDebugger());
182:       assertFalse(node0.isAnd());
183:       assertFalse(node0.isFalse());
184:       assertFalse(node0.isFunction());
185:       assertFalse(node0.isInc());
186:       assertFalse(node0.isCast());
187:       assertFalse(node0.isSetterDef());
188:       assertFalse(node0.isThrow());
189:       assertFalse(node0.isIn());
190:       assertFalse(node0.isString());
191:       assertFalse(node0.isIf());
192:       assertFalse(node0.isGetterDef());
193:       assertFalse(node0.isDelProp());
194:       assertEquals((-1), node0.getCharno());
195:       assertFalse(node0.isSwitch());
196:       assertFalse(node0.isNE());
197:       assertFalse(node0.isHook());
198:       assertFalse(node0.isRegExp());
199:       assertFalse(node0.isThis());
200:       assertFalse(node0.isComma());
201:       assertFalse(node0.isCase());
202:       assertFalse(node0.isTry());
203:       assertFalse(node0.isFor());
204:       assertEquals(0, node0.getChildCount());
205:       assertEquals(83, node0.getType());
206:       assertFalse(node0.isNull());
207:       assertFalse(node0.isBreak());
208:       assertFalse(node0.isStringKey());
209:       assertFalse(node0.isTrue());
210:       assertFalse(node0.isVoid());
211:       assertFalse(node0.isName());
212:       assertFalse(node0.isVar());
213:       assertFalse(node0.isArrayLit());
214:       assertFalse(node0.isNew());
215:       assertFalse(node0.isEmpty());
216:       assertFalse(node0.isAdd());
217:       assertFalse(node0.isDefaultCase());
218:       assertFalse(node0.isDo());
219:       assertFalse(node0.isAssignAdd());
220:       assertEquals(8, Node.FLAG_NO_THROWS);
221:       assertEquals(39, Node.EMPTY_BLOCK);
222:       assertEquals(48, Node.DIRECTIVES);
223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
225:       assertEquals(4095, Node.COLUMN_MASK);
226:       assertEquals(55, Node.INFERRED_FUNCTION);
227:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
228:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
229:       assertEquals(54, Node.SLASH_V);
230:       assertEquals(40, Node.ORIGINALNAME_PROP);
231:       assertEquals(50, Node.FREE_CALL);
232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
233:       assertEquals(46, Node.IS_NAMESPACE);
234:       assertEquals(43, Node.IS_CONSTANT_NAME);
235:       assertEquals(37, Node.OPT_ARG_NAME);
236:       assertEquals(2, Node.POST_FLAG);
237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
238:       assertEquals(29, Node.JSDOC_INFO_PROP);
239:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
240:       assertEquals(30, Node.VAR_ARGS_NAME);
241:       assertEquals(1, Node.DECR_FLAG);
242:       assertEquals(32, Node.INCRDECR_PROP);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(47, Node.IS_DISPATCHER);
245:       assertEquals(12, Node.COLUMN_BITS);
246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
247:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
248:       assertEquals(36, Node.QUOTED_PROP);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(15, Node.NO_SIDE_EFFECTS);
251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(49, Node.DIRECT_EVAL);
254:       assertEquals(57, Node.REFLECTED_OBJECT);
255:       assertEquals(56, Node.CHANGE_TIME);
256:       
257:       Iterable<Node> iterable0 = node0.children();
258:       assertFalse(iterable0.contains(node0));
259:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
260:       assertTrue(arrayList0.isEmpty());
261:       assertEquals(0, arrayList0.size());
262:       assertEquals((-1), node0.getLineno());
263:       assertFalse(node0.isOr());
264:       assertFalse(node0.isReturn());
265:       assertFalse(node0.isLabel());
266:       assertFalse(node0.hasMoreThanOneChild());
267:       assertFalse(node0.isContinue());
268:       assertFalse(node0.isNumber());
269:       assertFalse(node0.isLabelName());
270:       assertEquals((-1), node0.getSourcePosition());
271:       assertFalse(node0.hasOneChild());
272:       assertFalse(node0.isGetElem());
273:       assertFalse(node0.isExprResult());
274:       assertFalse(node0.isCall());
275:       assertFalse(node0.hasChildren());
276:       assertFalse(node0.isDec());
277:       assertFalse(node0.isScript());
278:       assertFalse(node0.isTypeOf());
279:       assertFalse(node0.isAssign());
280:       assertFalse(node0.isBlock());
281:       assertFalse(node0.isWhile());
282:       assertFalse(node0.isInstanceOf());
283:       assertTrue(node0.isParamList());
284:       assertFalse(node0.isGetProp());
285:       assertFalse(node0.isObjectLit());
286:       assertFalse(node0.isCatch());
287:       assertFalse(node0.isWith());
288:       assertFalse(node0.isNot());
289:       assertFalse(node0.isDebugger());
290:       assertFalse(node0.isAnd());
291:       assertFalse(node0.isFalse());
292:       assertFalse(node0.isFunction());
293:       assertFalse(node0.isInc());
294:       assertFalse(node0.isCast());
295:       assertFalse(node0.isSetterDef());
296:       assertFalse(node0.isThrow());
297:       assertFalse(node0.isIn());
298:       assertFalse(node0.isString());
299:       assertFalse(node0.isIf());
300:       assertFalse(node0.isGetterDef());
301:       assertFalse(node0.isDelProp());
302:       assertEquals((-1), node0.getCharno());
303:       assertFalse(node0.isSwitch());
304:       assertFalse(node0.isNE());
305:       assertFalse(node0.isHook());
306:       assertFalse(node0.isRegExp());
307:       assertFalse(node0.isThis());
308:       assertFalse(node0.isComma());
309:       assertFalse(node0.isCase());
310:       assertFalse(node0.isTry());
311:       assertFalse(node0.isFor());
312:       assertEquals(0, node0.getChildCount());
313:       assertEquals(83, node0.getType());
314:       assertFalse(node0.isNull());
315:       assertFalse(node0.isBreak());
316:       assertFalse(node0.isStringKey());
317:       assertFalse(node0.isTrue());
318:       assertFalse(node0.isVoid());
319:       assertFalse(node0.isName());
320:       assertFalse(node0.isVar());
321:       assertFalse(node0.isArrayLit());
322:       assertFalse(node0.isNew());
323:       assertFalse(node0.isEmpty());
324:       assertFalse(node0.isAdd());
325:       assertFalse(node0.isDefaultCase());
326:       assertFalse(node0.isDo());
327:       assertFalse(node0.isAssignAdd());
328:       assertNotNull(iterable0);
329:       assertEquals(8, Node.FLAG_NO_THROWS);
330:       assertEquals(39, Node.EMPTY_BLOCK);
331:       assertEquals(48, Node.DIRECTIVES);
332:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
333:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
334:       assertEquals(4095, Node.COLUMN_MASK);
335:       assertEquals(55, Node.INFERRED_FUNCTION);
336:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
337:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
338:       assertEquals(54, Node.SLASH_V);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       assertEquals(50, Node.FREE_CALL);
341:       assertEquals(51, Node.STATIC_SOURCE_FILE);
342:       assertEquals(46, Node.IS_NAMESPACE);
343:       assertEquals(43, Node.IS_CONSTANT_NAME);
344:       assertEquals(37, Node.OPT_ARG_NAME);
345:       assertEquals(2, Node.POST_FLAG);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(29, Node.JSDOC_INFO_PROP);
348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
349:       assertEquals(30, Node.VAR_ARGS_NAME);
350:       assertEquals(1, Node.DECR_FLAG);
351:       assertEquals(32, Node.INCRDECR_PROP);
352:       assertEquals(57, Node.LAST_PROP);
353:       assertEquals(47, Node.IS_DISPATCHER);
354:       assertEquals(12, Node.COLUMN_BITS);
355:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
356:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
357:       assertEquals(36, Node.QUOTED_PROP);
358:       assertEquals(52, Node.LENGTH);
359:       assertEquals(15, Node.NO_SIDE_EFFECTS);
360:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
361:       assertEquals(53, Node.INPUT_ID);
362:       assertEquals(49, Node.DIRECT_EVAL);
363:       assertEquals(57, Node.REFLECTED_OBJECT);
364:       assertEquals(56, Node.CHANGE_TIME);
365:       
366:       Node node1 = Node.newNumber((-1.0));
367:       assertFalse(node1.isFalse());
368:       assertFalse(node1.isBreak());
369:       assertFalse(node1.isInc());
370:       assertFalse(node1.isComma());
371:       assertFalse(node1.isThrow());
372:       assertFalse(node1.isThis());
373:       assertFalse(node1.isHook());
374:       assertFalse(node1.isInstanceOf());
375:       assertFalse(node1.isIn());
376:       assertFalse(node1.isWith());
377:       assertFalse(node1.isNE());
378:       assertFalse(node1.isIf());
379:       assertFalse(node1.isDelProp());
380:       assertFalse(node1.isCast());
381:       assertFalse(node1.isExprResult());
382:       assertFalse(node1.isGetElem());
383:       assertFalse(node1.isDec());
384:       assertFalse(node1.isFunction());
385:       assertFalse(node1.isTypeOf());
386:       assertFalse(node1.isAssign());
387:       assertFalse(node1.hasChildren());
388:       assertFalse(node1.isReturn());
389:       assertFalse(node1.isAnd());
390:       assertFalse(node1.isContinue());
391:       assertFalse(node1.isObjectLit());
392:       assertTrue(node1.isNumber());
393:       assertFalse(node1.isString());
394:       assertFalse(node1.isGetProp());
395:       assertFalse(node1.isDebugger());
396:       assertEquals((-1), node1.getSourcePosition());
397:       assertFalse(node1.isNot());
398:       assertFalse(node1.isVar());
399:       assertFalse(node1.isName());
400:       assertFalse(node1.isAdd());
401:       assertFalse(node1.isNew());
402:       assertFalse(node1.isCall());
403:       assertEquals(39, node1.getType());
404:       assertFalse(node1.isWhile());
405:       assertFalse(node1.isBlock());
406:       assertFalse(node1.hasMoreThanOneChild());
407:       assertFalse(node1.isCatch());
408:       assertFalse(node1.isDo());
409:       assertEquals((-1), node1.getLineno());
410:       assertFalse(node1.isSetterDef());
411:       assertFalse(node1.isVoid());
412:       assertFalse(node1.isOr());
413:       assertFalse(node1.isTrue());
414:       assertFalse(node1.isNull());
415:       assertFalse(node1.isArrayLit());
416:       assertFalse(node1.hasOneChild());
417:       assertFalse(node1.isTry());
418:       assertFalse(node1.isEmpty());
419:       assertFalse(node1.isLabelName());
420:       assertFalse(node1.isDefaultCase());
421:       assertFalse(node1.isRegExp());
422:       assertFalse(node1.isFor());
423:       assertFalse(node1.isAssignAdd());
424:       assertFalse(node1.isLabel());
425:       assertEquals(0, node1.getChildCount());
426:       assertFalse(node1.isCase());
427:       assertFalse(node1.isSwitch());
428:       assertFalse(node1.isScript());
429:       assertFalse(node1.isParamList());
430:       assertFalse(node1.isGetterDef());
431:       assertFalse(node1.isStringKey());
432:       assertEquals((-1), node1.getCharno());
433:       assertNotNull(node1);
434:       assertFalse(node1.equals((Object)node0));
435:       assertEquals(53, Node.INPUT_ID);
436:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
437:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
438:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
439:       assertEquals(29, Node.JSDOC_INFO_PROP);
440:       assertEquals(43, Node.IS_CONSTANT_NAME);
441:       assertEquals(56, Node.CHANGE_TIME);
442:       assertEquals(36, Node.QUOTED_PROP);
443:       assertEquals(48, Node.DIRECTIVES);
444:       assertEquals(32, Node.INCRDECR_PROP);
445:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
446:       assertEquals(37, Node.OPT_ARG_NAME);
447:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
448:       assertEquals(1, Node.DECR_FLAG);
449:       assertEquals(4095, Node.COLUMN_MASK);
450:       assertEquals(12, Node.COLUMN_BITS);
451:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
452:       assertEquals(54, Node.SLASH_V);
453:       assertEquals(52, Node.LENGTH);
454:       assertEquals(40, Node.ORIGINALNAME_PROP);
455:       assertEquals(15, Node.NO_SIDE_EFFECTS);
456:       assertEquals(49, Node.DIRECT_EVAL);
457:       assertEquals(50, Node.FREE_CALL);
458:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
460:       assertEquals(57, Node.REFLECTED_OBJECT);
461:       assertEquals(46, Node.IS_NAMESPACE);
462:       assertEquals(8, Node.FLAG_NO_THROWS);
463:       assertEquals(55, Node.INFERRED_FUNCTION);
464:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
465:       assertEquals(39, Node.EMPTY_BLOCK);
466:       assertEquals(30, Node.VAR_ARGS_NAME);
467:       assertEquals(57, Node.LAST_PROP);
468:       assertEquals(2, Node.POST_FLAG);
469:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
470:       assertEquals(47, Node.IS_DISPATCHER);
471:       
472:       boolean boolean0 = node1.isParamList();
473:       assertFalse(boolean0);
474:       assertFalse(node1.isFalse());
475:       assertFalse(node1.isBreak());
476:       assertFalse(node1.isInc());
477:       assertFalse(node1.isComma());
478:       assertFalse(node1.isThrow());
479:       assertFalse(node1.isThis());
480:       assertFalse(node1.isHook());
481:       assertFalse(node1.isInstanceOf());
482:       assertFalse(node1.isIn());
483:       assertFalse(node1.isWith());
484:       assertFalse(node1.isNE());
485:       assertFalse(node1.isIf());
486:       assertFalse(node1.isDelProp());
487:       assertFalse(node1.isCast());
488:       assertFalse(node1.isExprResult());
489:       assertFalse(node1.isGetElem());
490:       assertFalse(node1.isDec());
491:       assertFalse(node1.isFunction());
492:       assertFalse(node1.isTypeOf());
493:       assertFalse(node1.isAssign());
494:       assertFalse(node1.hasChildren());
495:       assertFalse(node1.isReturn());
496:       assertFalse(node1.isAnd());
497:       assertFalse(node1.isContinue());
498:       assertFalse(node1.isObjectLit());
499:       assertTrue(node1.isNumber());
500:       assertFalse(node1.isString());
501:       assertFalse(node1.isGetProp());
502:       assertFalse(node1.isDebugger());
503:       assertEquals((-1), node1.getSourcePosition());
504:       assertFalse(node1.isNot());
505:       assertFalse(node1.isVar());
506:       assertFalse(node1.isName());
507:       assertFalse(node1.isAdd());
508:       assertFalse(node1.isNew());
509:       assertFalse(node1.isCall());
510:       assertEquals(39, node1.getType());
511:       assertFalse(node1.isWhile());
512:       assertFalse(node1.isBlock());
513:       assertFalse(node1.hasMoreThanOneChild());
514:       assertFalse(node1.isCatch());
515:       assertFalse(node1.isDo());
516:       assertEquals((-1), node1.getLineno());
517:       assertFalse(node1.isSetterDef());
518:       assertFalse(node1.isVoid());
519:       assertFalse(node1.isOr());
520:       assertFalse(node1.isTrue());
521:       assertFalse(node1.isNull());
522:       assertFalse(node1.isArrayLit());
523:       assertFalse(node1.hasOneChild());
524:       assertFalse(node1.isTry());
525:       assertFalse(node1.isEmpty());
526:       assertFalse(node1.isLabelName());
527:       assertFalse(node1.isDefaultCase());
528:       assertFalse(node1.isRegExp());
529:       assertFalse(node1.isFor());
530:       assertFalse(node1.isAssignAdd());
531:       assertFalse(node1.isLabel());
532:       assertEquals(0, node1.getChildCount());
533:       assertFalse(node1.isCase());
534:       assertFalse(node1.isSwitch());
535:       assertFalse(node1.isScript());
536:       assertFalse(node1.isParamList());
537:       assertFalse(node1.isGetterDef());
538:       assertFalse(node1.isStringKey());
539:       assertEquals((-1), node1.getCharno());
540:       assertFalse(node1.equals((Object)node0));
541:       assertEquals(53, Node.INPUT_ID);
542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
543:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
545:       assertEquals(29, Node.JSDOC_INFO_PROP);
546:       assertEquals(43, Node.IS_CONSTANT_NAME);
547:       assertEquals(56, Node.CHANGE_TIME);
548:       assertEquals(36, Node.QUOTED_PROP);
549:       assertEquals(48, Node.DIRECTIVES);
550:       assertEquals(32, Node.INCRDECR_PROP);
551:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
552:       assertEquals(37, Node.OPT_ARG_NAME);
553:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
554:       assertEquals(1, Node.DECR_FLAG);
555:       assertEquals(4095, Node.COLUMN_MASK);
556:       assertEquals(12, Node.COLUMN_BITS);
557:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(52, Node.LENGTH);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       assertEquals(15, Node.NO_SIDE_EFFECTS);
562:       assertEquals(49, Node.DIRECT_EVAL);
563:       assertEquals(50, Node.FREE_CALL);
564:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
565:       assertEquals(51, Node.STATIC_SOURCE_FILE);
566:       assertEquals(57, Node.REFLECTED_OBJECT);
567:       assertEquals(46, Node.IS_NAMESPACE);
568:       assertEquals(8, Node.FLAG_NO_THROWS);
569:       assertEquals(55, Node.INFERRED_FUNCTION);
570:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
571:       assertEquals(39, Node.EMPTY_BLOCK);
572:       assertEquals(30, Node.VAR_ARGS_NAME);
573:       assertEquals(57, Node.LAST_PROP);
574:       assertEquals(2, Node.POST_FLAG);
575:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
576:       assertEquals(47, Node.IS_DISPATCHER);
577:       
578:       Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
579:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
580:       assertTrue(arrayList0.isEmpty());
581:       assertEquals(0, arrayList0.size());
582:       assertEquals((-1), node0.getLineno());
583:       assertFalse(node0.isOr());
584:       assertFalse(node0.isReturn());
585:       assertFalse(node0.isLabel());
586:       assertFalse(node0.hasMoreThanOneChild());
587:       assertFalse(node0.isContinue());
588:       assertFalse(node0.isNumber());
589:       assertFalse(node0.isLabelName());
590:       assertEquals((-1), node0.getSourcePosition());
591:       assertFalse(node0.hasOneChild());
592:       assertFalse(node0.isGetElem());
593:       assertFalse(node0.isExprResult());
594:       assertFalse(node0.isCall());
595:       assertFalse(node0.hasChildren());
596:       assertFalse(node0.isDec());
597:       assertFalse(node0.isScript());
598:       assertFalse(node0.isTypeOf());
599:       assertFalse(node0.isAssign());
600:       assertFalse(node0.isBlock());
601:       assertFalse(node0.isWhile());
602:       assertFalse(node0.isInstanceOf());
603:       assertTrue(node0.isParamList());
604:       assertFalse(node0.isGetProp());
605:       assertFalse(node0.isObjectLit());
606:       assertFalse(node0.isCatch());
607:       assertFalse(node0.isWith());
608:       assertFalse(node0.isNot());
609:       assertFalse(node0.isDebugger());
610:       assertFalse(node0.isAnd());
611:       assertFalse(node0.isFalse());
612:       assertFalse(node0.isFunction());
613:       assertFalse(node0.isInc());
614:       assertFalse(node0.isCast());
615:       assertFalse(node0.isSetterDef());
616:       assertFalse(node0.isThrow());
617:       assertFalse(node0.isIn());
618:       assertFalse(node0.isString());
619:       assertFalse(node0.isIf());
620:       assertFalse(node0.isGetterDef());
621:       assertFalse(node0.isDelProp());
622:       assertEquals((-1), node0.getCharno());
623:       assertFalse(node0.isSwitch());
624:       assertFalse(node0.isNE());
625:       assertFalse(node0.isHook());
626:       assertFalse(node0.isRegExp());
627:       assertFalse(node0.isThis());
628:       assertFalse(node0.isComma());
629:       assertFalse(node0.isCase());
630:       assertFalse(node0.isTry());
631:       assertFalse(node0.isFor());
632:       assertEquals(0, node0.getChildCount());
633:       assertEquals(83, node0.getType());
634:       assertFalse(node0.isNull());
635:       assertFalse(node0.isBreak());
636:       assertFalse(node0.isStringKey());
637:       assertFalse(node0.isTrue());
638:       assertFalse(node0.isVoid());
639:       assertFalse(node0.isName());
640:       assertFalse(node0.isVar());
641:       assertFalse(node0.isArrayLit());
642:       assertFalse(node0.isNew());
643:       assertFalse(node0.isEmpty());
644:       assertFalse(node0.isAdd());
645:       assertFalse(node0.isDefaultCase());
646:       assertFalse(node0.isDo());
647:       assertFalse(node0.isAssignAdd());
648:       assertFalse(node1.isFalse());
649:       assertFalse(node1.isBreak());
650:       assertFalse(node1.isInc());
651:       assertFalse(node1.isComma());
652:       assertFalse(node1.isThrow());
653:       assertFalse(node1.isThis());
654:       assertFalse(node1.isHook());
655:       assertFalse(node1.isInstanceOf());
656:       assertFalse(node1.isIn());
657:       assertFalse(node1.isWith());
658:       assertFalse(node1.isNE());
659:       assertFalse(node1.isIf());
660:       assertFalse(node1.isDelProp());
661:       assertFalse(node1.isCast());
662:       assertFalse(node1.isExprResult());
663:       assertFalse(node1.isGetElem());
664:       assertFalse(node1.isDec());
665:       assertFalse(node1.isFunction());
666:       assertFalse(node1.isTypeOf());
667:       assertFalse(node1.isAssign());
668:       assertFalse(node1.hasChildren());
669:       assertFalse(node1.isReturn());
670:       assertFalse(node1.isAnd());
671:       assertFalse(node1.isContinue());
672:       assertFalse(node1.isObjectLit());
673:       assertTrue(node1.isNumber());
674:       assertFalse(node1.isString());
675:       assertFalse(node1.isGetProp());
676:       assertFalse(node1.isDebugger());
677:       assertEquals((-1), node1.getSourcePosition());
678:       assertFalse(node1.isNot());
679:       assertFalse(node1.isVar());
680:       assertFalse(node1.isName());
681:       assertFalse(node1.isAdd());
682:       assertFalse(node1.isNew());
683:       assertFalse(node1.isCall());
684:       assertEquals(39, node1.getType());
685:       assertFalse(node1.isWhile());
686:       assertFalse(node1.isBlock());
687:       assertFalse(node1.hasMoreThanOneChild());
688:       assertFalse(node1.isCatch());
689:       assertFalse(node1.isDo());
690:       assertEquals((-1), node1.getLineno());
691:       assertFalse(node1.isSetterDef());
692:       assertFalse(node1.isVoid());
693:       assertFalse(node1.isOr());
694:       assertFalse(node1.isTrue());
695:       assertFalse(node1.isNull());
696:       assertFalse(node1.isArrayLit());
697:       assertFalse(node1.hasOneChild());
698:       assertFalse(node1.isTry());
699:       assertFalse(node1.isEmpty());
700:       assertFalse(node1.isLabelName());
701:       assertFalse(node1.isDefaultCase());
702:       assertFalse(node1.isRegExp());
703:       assertFalse(node1.isFor());
704:       assertFalse(node1.isAssignAdd());
705:       assertFalse(node1.isLabel());
706:       assertEquals(0, node1.getChildCount());
707:       assertFalse(node1.isCase());
708:       assertFalse(node1.isSwitch());
709:       assertFalse(node1.isScript());
710:       assertFalse(node1.isParamList());
711:       assertFalse(node1.isGetterDef());
712:       assertFalse(node1.isStringKey());
713:       assertEquals((-1), node1.getCharno());
714:       assertFalse(node2.isDo());
715:       assertFalse(node2.hasMoreThanOneChild());
716:       assertFalse(node2.isContinue());
717:       assertFalse(node2.isNew());
718:       assertFalse(node2.isBlock());
719:       assertFalse(node2.isAdd());
720:       assertFalse(node2.isReturn());
721:       assertFalse(node2.isLabel());
722:       assertFalse(node2.isVar());
723:       assertFalse(node2.isAssignAdd());
724:       assertFalse(node2.isWhile());
725:       assertFalse(node2.isStringKey());
726:       assertFalse(node2.isLabelName());
727:       assertFalse(node2.isNumber());
728:       assertFalse(node2.isCast());
729:       assertEquals((-1), node2.getSourcePosition());
730:       assertFalse(node2.isInstanceOf());
731:       assertFalse(node2.isRegExp());
732:       assertFalse(node2.isScript());
733:       assertFalse(node2.isFunction());
734:       assertFalse(node2.isCatch());
735:       assertFalse(node2.isWith());
736:       assertFalse(node2.isTry());
737:       assertFalse(node2.isSetterDef());
738:       assertFalse(node2.isThis());
739:       assertFalse(node2.hasOneChild());
740:       assertFalse(node2.isFor());
741:       assertEquals((-1), node2.getLineno());
742:       assertFalse(node2.isIf());
743:       assertFalse(node2.isNE());
744:       assertFalse(node2.isCase());
745:       assertFalse(node2.isIn());
746:       assertFalse(node2.isString());
747:       assertFalse(node2.isInc());
748:       assertFalse(node2.isHook());
749:       assertFalse(node2.isThrow());
750:       assertFalse(node2.isFalse());
751:       assertFalse(node2.isArrayLit());
752:       assertFalse(node2.isGetterDef());
753:       assertFalse(node2.isDebugger());
754:       assertEquals((-1), node2.getCharno());
755:       assertFalse(node2.isSwitch());
756:       assertFalse(node2.isAnd());
757:       assertFalse(node2.isNot());
758:       assertFalse(node2.isObjectLit());
759:       assertEquals(0, node2.getChildCount());
760:       assertTrue(node2.isParamList());
761:       assertFalse(node2.isGetProp());
762:       assertFalse(node2.isComma());
763:       assertFalse(node2.isDefaultCase());
764:       assertFalse(node2.isGetElem());
765:       assertFalse(node2.isEmpty());
766:       assertFalse(node2.isName());
767:       assertFalse(node2.isCall());
768:       assertFalse(node2.isAssign());
769:       assertFalse(node2.isBreak());
770:       assertFalse(node2.hasChildren());
771:       assertFalse(node2.isDec());
772:       assertFalse(node2.isTypeOf());
773:       assertEquals(83, node2.getType());
774:       assertFalse(node2.isTrue());
775:       assertFalse(node2.isVoid());
776:       assertFalse(node2.isExprResult());
777:       assertFalse(node2.isOr());
778:       assertFalse(node2.isNull());
779:       assertFalse(node2.isDelProp());
780:       assertNotNull(node2);
781:       assertSame(node0, node2);
782:       assertSame(node2, node0);
783:       assertFalse(node0.equals((Object)node1));
784:       assertFalse(node1.equals((Object)node0));
785:       assertFalse(node2.equals((Object)node1));
786:       assertEquals(8, Node.FLAG_NO_THROWS);
787:       assertEquals(39, Node.EMPTY_BLOCK);
788:       assertEquals(48, Node.DIRECTIVES);
789:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
790:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
791:       assertEquals(4095, Node.COLUMN_MASK);
792:       assertEquals(55, Node.INFERRED_FUNCTION);
793:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
794:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
795:       assertEquals(54, Node.SLASH_V);
796:       assertEquals(40, Node.ORIGINALNAME_PROP);
797:       assertEquals(50, Node.FREE_CALL);
798:       assertEquals(51, Node.STATIC_SOURCE_FILE);
799:       assertEquals(46, Node.IS_NAMESPACE);
800:       assertEquals(43, Node.IS_CONSTANT_NAME);
801:       assertEquals(37, Node.OPT_ARG_NAME);
802:       assertEquals(2, Node.POST_FLAG);
803:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
804:       assertEquals(29, Node.JSDOC_INFO_PROP);
805:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
806:       assertEquals(30, Node.VAR_ARGS_NAME);
807:       assertEquals(1, Node.DECR_FLAG);
808:       assertEquals(32, Node.INCRDECR_PROP);
809:       assertEquals(57, Node.LAST_PROP);
810:       assertEquals(47, Node.IS_DISPATCHER);
811:       assertEquals(12, Node.COLUMN_BITS);
812:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
813:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
814:       assertEquals(36, Node.QUOTED_PROP);
815:       assertEquals(52, Node.LENGTH);
816:       assertEquals(15, Node.NO_SIDE_EFFECTS);
817:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
818:       assertEquals(53, Node.INPUT_ID);
819:       assertEquals(49, Node.DIRECT_EVAL);
820:       assertEquals(57, Node.REFLECTED_OBJECT);
821:       assertEquals(56, Node.CHANGE_TIME);
822:       assertEquals(53, Node.INPUT_ID);
823:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
824:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
825:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
826:       assertEquals(29, Node.JSDOC_INFO_PROP);
827:       assertEquals(43, Node.IS_CONSTANT_NAME);
828:       assertEquals(56, Node.CHANGE_TIME);
829:       assertEquals(36, Node.QUOTED_PROP);
830:       assertEquals(48, Node.DIRECTIVES);
831:       assertEquals(32, Node.INCRDECR_PROP);
832:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
833:       assertEquals(37, Node.OPT_ARG_NAME);
834:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
835:       assertEquals(1, Node.DECR_FLAG);
836:       assertEquals(4095, Node.COLUMN_MASK);
837:       assertEquals(12, Node.COLUMN_BITS);
838:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
839:       assertEquals(54, Node.SLASH_V);
840:       assertEquals(52, Node.LENGTH);
841:       assertEquals(40, Node.ORIGINALNAME_PROP);
842:       assertEquals(15, Node.NO_SIDE_EFFECTS);
843:       assertEquals(49, Node.DIRECT_EVAL);
844:       assertEquals(50, Node.FREE_CALL);
845:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
846:       assertEquals(51, Node.STATIC_SOURCE_FILE);
847:       assertEquals(57, Node.REFLECTED_OBJECT);
848:       assertEquals(46, Node.IS_NAMESPACE);
849:       assertEquals(8, Node.FLAG_NO_THROWS);
850:       assertEquals(55, Node.INFERRED_FUNCTION);
851:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
852:       assertEquals(39, Node.EMPTY_BLOCK);
853:       assertEquals(30, Node.VAR_ARGS_NAME);
854:       assertEquals(57, Node.LAST_PROP);
855:       assertEquals(2, Node.POST_FLAG);
856:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
857:       assertEquals(47, Node.IS_DISPATCHER);
858:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(39, Node.EMPTY_BLOCK);
861:       assertEquals(4095, Node.COLUMN_MASK);
862:       assertEquals(55, Node.INFERRED_FUNCTION);
863:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
864:       assertEquals(50, Node.FREE_CALL);
865:       assertEquals(36, Node.QUOTED_PROP);
866:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
867:       assertEquals(48, Node.DIRECTIVES);
868:       assertEquals(43, Node.IS_CONSTANT_NAME);
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(57, Node.REFLECTED_OBJECT);
871:       assertEquals(40, Node.ORIGINALNAME_PROP);
872:       assertEquals(53, Node.INPUT_ID);
873:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
874:       assertEquals(29, Node.JSDOC_INFO_PROP);
875:       assertEquals(57, Node.LAST_PROP);
876:       assertEquals(15, Node.NO_SIDE_EFFECTS);
877:       assertEquals(47, Node.IS_DISPATCHER);
878:       assertEquals(2, Node.POST_FLAG);
879:       assertEquals(30, Node.VAR_ARGS_NAME);
880:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
881:       assertEquals(32, Node.INCRDECR_PROP);
882:       assertEquals(46, Node.IS_NAMESPACE);
883:       assertEquals(51, Node.STATIC_SOURCE_FILE);
884:       assertEquals(37, Node.OPT_ARG_NAME);
885:       assertEquals(49, Node.DIRECT_EVAL);
886:       assertEquals(54, Node.SLASH_V);
887:       assertEquals(56, Node.CHANGE_TIME);
888:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
889:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
890:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
891:       assertEquals(1, Node.DECR_FLAG);
892:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
893:       assertEquals(12, Node.COLUMN_BITS);
894:       
895:       TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
896:       assertNull(templateType0);
897:       
898:       // Undeclared exception!
899:       try { 
900:         jSTypeRegistry0.createEnumType("Not declared as a type name", node1, (JSType) null);
901:         fail("Expecting exception: NullPointerException");
902:       
903:       } catch(NullPointerException e) {
904:          //
905:          // no message in exception (getMessage() returned null)
906:          //
907:          verifyException("com.google.javascript.rhino.jstype.EnumElementType", e);
908:       }
909:   }
910: }
RegularFileObject[/tmp/EvoSuite_124_1628256048183/com/google/javascript/rhino/Node_124_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_124_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_124_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_124_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:48.304 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertNotNull(arrayList0);

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertNotNull(node0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);

int int0 = node0.getIntProp(47);
assertEquals(0, int0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertNotNull(iterable0);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);

Node node1 = Node.newNumber((-1.0));
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

boolean boolean0 = node1.isParamList();
assertFalse(boolean0);
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node1.equals((Object)node0));
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);

Node node2 = node0.useSourceInfoIfMissingFromForTree(node1);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isExprResult());
assertFalse(node0.isCall());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isBlock());
assertFalse(node0.isWhile());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isParamList());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isIn());
assertFalse(node0.isString());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isCase());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertEquals(0, node0.getChildCount());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isStringKey());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isInc());
assertFalse(node1.isComma());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isDec());
assertFalse(node1.isFunction());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertTrue(node1.isNumber());
assertFalse(node1.isString());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isCall());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isDo());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isSetterDef());
assertFalse(node1.isVoid());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isGetterDef());
assertFalse(node1.isStringKey());
assertEquals((-1), node1.getCharno());
assertFalse(node2.isDo());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isNew());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isWhile());
assertFalse(node2.isStringKey());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isCast());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isFunction());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isTry());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.isIn());
assertFalse(node2.isString());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDebugger());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertEquals(0, node2.getChildCount());
assertTrue(node2.isParamList());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isGetElem());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isAssign());
assertFalse(node2.isBreak());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertEquals(83, node2.getType());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isOr());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(54, Node.SLASH_V);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

TemplateType templateType0 = JSType.toMaybeTemplateType((JSType) null);
assertNull(templateType0);

jSTypeRegistry0.createEnumType("Not declared as a type name", node1, (JSType) null);

[MASTER] 13:20:49.006 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_129_1628256048797/com/google/javascript/rhino/Node_129_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_129_1628256048797/com/google/javascript/rhino/Node_129_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:49.007 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:49.007 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:49.008 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 653
[MASTER] 13:20:49.011 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_129_1628256048797/com/google/javascript/rhino/Node_129_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:48 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_129_tmp__ESTest extends Node_129_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber((-2591.135802832726), 0, 0);
23:       assertFalse(node0.isCall());
24:       assertFalse(node0.isStringKey());
25:       assertFalse(node0.isVar());
26:       assertFalse(node0.isName());
27:       assertFalse(node0.isParamList());
28:       assertFalse(node0.isNew());
29:       assertFalse(node0.isAdd());
30:       assertFalse(node0.isNull());
31:       assertFalse(node0.isSetterDef());
32:       assertEquals(0, node0.getSourcePosition());
33:       assertFalse(node0.isContinue());
34:       assertFalse(node0.isAssignAdd());
35:       assertFalse(node0.isDo());
36:       assertFalse(node0.isDefaultCase());
37:       assertEquals(0, node0.getLineno());
38:       assertFalse(node0.isLabel());
39:       assertEquals(0, node0.getChildCount());
40:       assertFalse(node0.isFunction());
41:       assertFalse(node0.isCast());
42:       assertFalse(node0.isEmpty());
43:       assertFalse(node0.isGetElem());
44:       assertFalse(node0.isDelProp());
45:       assertFalse(node0.isDebugger());
46:       assertFalse(node0.isTrue());
47:       assertFalse(node0.isNot());
48:       assertFalse(node0.isOr());
49:       assertTrue(node0.isNumber());
50:       assertFalse(node0.isWhile());
51:       assertFalse(node0.isVoid());
52:       assertFalse(node0.isExprResult());
53:       assertFalse(node0.isComma());
54:       assertFalse(node0.isReturn());
55:       assertFalse(node0.hasChildren());
56:       assertFalse(node0.isDec());
57:       assertFalse(node0.isAssign());
58:       assertFalse(node0.isTypeOf());
59:       assertFalse(node0.isThrow());
60:       assertFalse(node0.isHook());
61:       assertFalse(node0.isBreak());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isGetProp());
64:       assertFalse(node0.isString());
65:       assertFalse(node0.isAnd());
66:       assertFalse(node0.isObjectLit());
67:       assertFalse(node0.isSwitch());
68:       assertFalse(node0.isFalse());
69:       assertFalse(node0.isArrayLit());
70:       assertFalse(node0.isFor());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.hasOneChild());
73:       assertFalse(node0.isTry());
74:       assertFalse(node0.isLabelName());
75:       assertFalse(node0.isNE());
76:       assertFalse(node0.isScript());
77:       assertEquals(0, node0.getCharno());
78:       assertFalse(node0.isGetterDef());
79:       assertFalse(node0.isIn());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.isCase());
82:       assertEquals(39, node0.getType());
83:       assertFalse(node0.isBlock());
84:       assertFalse(node0.isThis());
85:       assertFalse(node0.isInstanceOf());
86:       assertFalse(node0.isRegExp());
87:       assertFalse(node0.hasMoreThanOneChild());
88:       assertFalse(node0.isWith());
89:       assertNotNull(node0);
90:       assertEquals(53, Node.INPUT_ID);
91:       assertEquals(43, Node.IS_CONSTANT_NAME);
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(47, Node.IS_DISPATCHER);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(4095, Node.COLUMN_MASK);
97:       assertEquals(37, Node.OPT_ARG_NAME);
98:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
99:       assertEquals(48, Node.DIRECTIVES);
100:       assertEquals(56, Node.CHANGE_TIME);
101:       assertEquals(29, Node.JSDOC_INFO_PROP);
102:       assertEquals(15, Node.NO_SIDE_EFFECTS);
103:       assertEquals(36, Node.QUOTED_PROP);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(8, Node.FLAG_NO_THROWS);
106:       assertEquals(39, Node.EMPTY_BLOCK);
107:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
108:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
109:       assertEquals(52, Node.LENGTH);
110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(54, Node.SLASH_V);
113:       assertEquals(57, Node.LAST_PROP);
114:       assertEquals(30, Node.VAR_ARGS_NAME);
115:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
116:       assertEquals(49, Node.DIRECT_EVAL);
117:       assertEquals(40, Node.ORIGINALNAME_PROP);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(46, Node.IS_NAMESPACE);
120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
121:       assertEquals(12, Node.COLUMN_BITS);
122:       assertEquals(50, Node.FREE_CALL);
123:       assertEquals(1, Node.DECR_FLAG);
124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
125:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
126:       
127:       InputId inputId0 = node0.getInputId();
128:       assertFalse(node0.isCall());
129:       assertFalse(node0.isStringKey());
130:       assertFalse(node0.isVar());
131:       assertFalse(node0.isName());
132:       assertFalse(node0.isParamList());
133:       assertFalse(node0.isNew());
134:       assertFalse(node0.isAdd());
135:       assertFalse(node0.isNull());
136:       assertFalse(node0.isSetterDef());
137:       assertEquals(0, node0.getSourcePosition());
138:       assertFalse(node0.isContinue());
139:       assertFalse(node0.isAssignAdd());
140:       assertFalse(node0.isDo());
141:       assertFalse(node0.isDefaultCase());
142:       assertEquals(0, node0.getLineno());
143:       assertFalse(node0.isLabel());
144:       assertEquals(0, node0.getChildCount());
145:       assertFalse(node0.isFunction());
146:       assertFalse(node0.isCast());
147:       assertFalse(node0.isEmpty());
148:       assertFalse(node0.isGetElem());
149:       assertFalse(node0.isDelProp());
150:       assertFalse(node0.isDebugger());
151:       assertFalse(node0.isTrue());
152:       assertFalse(node0.isNot());
153:       assertFalse(node0.isOr());
154:       assertTrue(node0.isNumber());
155:       assertFalse(node0.isWhile());
156:       assertFalse(node0.isVoid());
157:       assertFalse(node0.isExprResult());
158:       assertFalse(node0.isComma());
159:       assertFalse(node0.isReturn());
160:       assertFalse(node0.hasChildren());
161:       assertFalse(node0.isDec());
162:       assertFalse(node0.isAssign());
163:       assertFalse(node0.isTypeOf());
164:       assertFalse(node0.isThrow());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.isBreak());
167:       assertFalse(node0.isInc());
168:       assertFalse(node0.isGetProp());
169:       assertFalse(node0.isString());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isObjectLit());
172:       assertFalse(node0.isSwitch());
173:       assertFalse(node0.isFalse());
174:       assertFalse(node0.isArrayLit());
175:       assertFalse(node0.isFor());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.hasOneChild());
178:       assertFalse(node0.isTry());
179:       assertFalse(node0.isLabelName());
180:       assertFalse(node0.isNE());
181:       assertFalse(node0.isScript());
182:       assertEquals(0, node0.getCharno());
183:       assertFalse(node0.isGetterDef());
184:       assertFalse(node0.isIn());
185:       assertFalse(node0.isCatch());
186:       assertFalse(node0.isCase());
187:       assertEquals(39, node0.getType());
188:       assertFalse(node0.isBlock());
189:       assertFalse(node0.isThis());
190:       assertFalse(node0.isInstanceOf());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.hasMoreThanOneChild());
193:       assertFalse(node0.isWith());
194:       assertNull(inputId0);
195:       assertEquals(53, Node.INPUT_ID);
196:       assertEquals(43, Node.IS_CONSTANT_NAME);
197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
198:       assertEquals(47, Node.IS_DISPATCHER);
199:       assertEquals(2, Node.POST_FLAG);
200:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
201:       assertEquals(4095, Node.COLUMN_MASK);
202:       assertEquals(37, Node.OPT_ARG_NAME);
203:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
204:       assertEquals(48, Node.DIRECTIVES);
205:       assertEquals(56, Node.CHANGE_TIME);
206:       assertEquals(29, Node.JSDOC_INFO_PROP);
207:       assertEquals(15, Node.NO_SIDE_EFFECTS);
208:       assertEquals(36, Node.QUOTED_PROP);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(8, Node.FLAG_NO_THROWS);
211:       assertEquals(39, Node.EMPTY_BLOCK);
212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
213:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
214:       assertEquals(52, Node.LENGTH);
215:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
216:       assertEquals(57, Node.REFLECTED_OBJECT);
217:       assertEquals(54, Node.SLASH_V);
218:       assertEquals(57, Node.LAST_PROP);
219:       assertEquals(30, Node.VAR_ARGS_NAME);
220:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
221:       assertEquals(49, Node.DIRECT_EVAL);
222:       assertEquals(40, Node.ORIGINALNAME_PROP);
223:       assertEquals(32, Node.INCRDECR_PROP);
224:       assertEquals(46, Node.IS_NAMESPACE);
225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
226:       assertEquals(12, Node.COLUMN_BITS);
227:       assertEquals(50, Node.FREE_CALL);
228:       assertEquals(1, Node.DECR_FLAG);
229:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
230:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
231:       
232:       int int0 = node0.getType();
233:       assertEquals(39, int0);
234:       assertFalse(node0.isCall());
235:       assertFalse(node0.isStringKey());
236:       assertFalse(node0.isVar());
237:       assertFalse(node0.isName());
238:       assertFalse(node0.isParamList());
239:       assertFalse(node0.isNew());
240:       assertFalse(node0.isAdd());
241:       assertFalse(node0.isNull());
242:       assertFalse(node0.isSetterDef());
243:       assertEquals(0, node0.getSourcePosition());
244:       assertFalse(node0.isContinue());
245:       assertFalse(node0.isAssignAdd());
246:       assertFalse(node0.isDo());
247:       assertFalse(node0.isDefaultCase());
248:       assertEquals(0, node0.getLineno());
249:       assertFalse(node0.isLabel());
250:       assertEquals(0, node0.getChildCount());
251:       assertFalse(node0.isFunction());
252:       assertFalse(node0.isCast());
253:       assertFalse(node0.isEmpty());
254:       assertFalse(node0.isGetElem());
255:       assertFalse(node0.isDelProp());
256:       assertFalse(node0.isDebugger());
257:       assertFalse(node0.isTrue());
258:       assertFalse(node0.isNot());
259:       assertFalse(node0.isOr());
260:       assertTrue(node0.isNumber());
261:       assertFalse(node0.isWhile());
262:       assertFalse(node0.isVoid());
263:       assertFalse(node0.isExprResult());
264:       assertFalse(node0.isComma());
265:       assertFalse(node0.isReturn());
266:       assertFalse(node0.hasChildren());
267:       assertFalse(node0.isDec());
268:       assertFalse(node0.isAssign());
269:       assertFalse(node0.isTypeOf());
270:       assertFalse(node0.isThrow());
271:       assertFalse(node0.isHook());
272:       assertFalse(node0.isBreak());
273:       assertFalse(node0.isInc());
274:       assertFalse(node0.isGetProp());
275:       assertFalse(node0.isString());
276:       assertFalse(node0.isAnd());
277:       assertFalse(node0.isObjectLit());
278:       assertFalse(node0.isSwitch());
279:       assertFalse(node0.isFalse());
280:       assertFalse(node0.isArrayLit());
281:       assertFalse(node0.isFor());
282:       assertFalse(node0.isIf());
283:       assertFalse(node0.hasOneChild());
284:       assertFalse(node0.isTry());
285:       assertFalse(node0.isLabelName());
286:       assertFalse(node0.isNE());
287:       assertFalse(node0.isScript());
288:       assertEquals(0, node0.getCharno());
289:       assertFalse(node0.isGetterDef());
290:       assertFalse(node0.isIn());
291:       assertFalse(node0.isCatch());
292:       assertFalse(node0.isCase());
293:       assertEquals(39, node0.getType());
294:       assertFalse(node0.isBlock());
295:       assertFalse(node0.isThis());
296:       assertFalse(node0.isInstanceOf());
297:       assertFalse(node0.isRegExp());
298:       assertFalse(node0.hasMoreThanOneChild());
299:       assertFalse(node0.isWith());
300:       assertEquals(53, Node.INPUT_ID);
301:       assertEquals(43, Node.IS_CONSTANT_NAME);
302:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
303:       assertEquals(47, Node.IS_DISPATCHER);
304:       assertEquals(2, Node.POST_FLAG);
305:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
306:       assertEquals(4095, Node.COLUMN_MASK);
307:       assertEquals(37, Node.OPT_ARG_NAME);
308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(56, Node.CHANGE_TIME);
311:       assertEquals(29, Node.JSDOC_INFO_PROP);
312:       assertEquals(15, Node.NO_SIDE_EFFECTS);
313:       assertEquals(36, Node.QUOTED_PROP);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(8, Node.FLAG_NO_THROWS);
316:       assertEquals(39, Node.EMPTY_BLOCK);
317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
318:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
319:       assertEquals(52, Node.LENGTH);
320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
321:       assertEquals(57, Node.REFLECTED_OBJECT);
322:       assertEquals(54, Node.SLASH_V);
323:       assertEquals(57, Node.LAST_PROP);
324:       assertEquals(30, Node.VAR_ARGS_NAME);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(49, Node.DIRECT_EVAL);
327:       assertEquals(40, Node.ORIGINALNAME_PROP);
328:       assertEquals(32, Node.INCRDECR_PROP);
329:       assertEquals(46, Node.IS_NAMESPACE);
330:       assertEquals(51, Node.STATIC_SOURCE_FILE);
331:       assertEquals(12, Node.COLUMN_BITS);
332:       assertEquals(50, Node.FREE_CALL);
333:       assertEquals(1, Node.DECR_FLAG);
334:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
335:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
336:       
337:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
338:       assertFalse(node0.isCall());
339:       assertFalse(node0.isStringKey());
340:       assertFalse(node0.isVar());
341:       assertFalse(node0.isName());
342:       assertFalse(node0.isParamList());
343:       assertFalse(node0.isNew());
344:       assertFalse(node0.isAdd());
345:       assertFalse(node0.isNull());
346:       assertFalse(node0.isSetterDef());
347:       assertEquals(0, node0.getSourcePosition());
348:       assertFalse(node0.isContinue());
349:       assertFalse(node0.isAssignAdd());
350:       assertFalse(node0.isDo());
351:       assertFalse(node0.isDefaultCase());
352:       assertEquals(0, node0.getLineno());
353:       assertFalse(node0.isLabel());
354:       assertEquals(0, node0.getChildCount());
355:       assertFalse(node0.isFunction());
356:       assertFalse(node0.isCast());
357:       assertFalse(node0.isEmpty());
358:       assertFalse(node0.isGetElem());
359:       assertFalse(node0.isDelProp());
360:       assertFalse(node0.isDebugger());
361:       assertFalse(node0.isTrue());
362:       assertFalse(node0.isNot());
363:       assertFalse(node0.isOr());
364:       assertTrue(node0.isNumber());
365:       assertFalse(node0.isWhile());
366:       assertFalse(node0.isVoid());
367:       assertFalse(node0.isExprResult());
368:       assertFalse(node0.isComma());
369:       assertFalse(node0.isReturn());
370:       assertFalse(node0.hasChildren());
371:       assertFalse(node0.isDec());
372:       assertFalse(node0.isAssign());
373:       assertFalse(node0.isTypeOf());
374:       assertFalse(node0.isThrow());
375:       assertFalse(node0.isHook());
376:       assertFalse(node0.isBreak());
377:       assertFalse(node0.isInc());
378:       assertFalse(node0.isGetProp());
379:       assertFalse(node0.isString());
380:       assertFalse(node0.isAnd());
381:       assertFalse(node0.isObjectLit());
382:       assertFalse(node0.isSwitch());
383:       assertFalse(node0.isFalse());
384:       assertFalse(node0.isArrayLit());
385:       assertFalse(node0.isFor());
386:       assertFalse(node0.isIf());
387:       assertFalse(node0.hasOneChild());
388:       assertFalse(node0.isTry());
389:       assertFalse(node0.isLabelName());
390:       assertFalse(node0.isNE());
391:       assertFalse(node0.isScript());
392:       assertEquals(0, node0.getCharno());
393:       assertFalse(node0.isGetterDef());
394:       assertFalse(node0.isIn());
395:       assertFalse(node0.isCatch());
396:       assertFalse(node0.isCase());
397:       assertEquals(39, node0.getType());
398:       assertFalse(node0.isBlock());
399:       assertFalse(node0.isThis());
400:       assertFalse(node0.isInstanceOf());
401:       assertFalse(node0.isRegExp());
402:       assertFalse(node0.hasMoreThanOneChild());
403:       assertFalse(node0.isWith());
404:       assertNotNull(node_FileLevelJsDocBuilder0);
405:       assertEquals(53, Node.INPUT_ID);
406:       assertEquals(43, Node.IS_CONSTANT_NAME);
407:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
408:       assertEquals(47, Node.IS_DISPATCHER);
409:       assertEquals(2, Node.POST_FLAG);
410:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
411:       assertEquals(4095, Node.COLUMN_MASK);
412:       assertEquals(37, Node.OPT_ARG_NAME);
413:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
414:       assertEquals(48, Node.DIRECTIVES);
415:       assertEquals(56, Node.CHANGE_TIME);
416:       assertEquals(29, Node.JSDOC_INFO_PROP);
417:       assertEquals(15, Node.NO_SIDE_EFFECTS);
418:       assertEquals(36, Node.QUOTED_PROP);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(8, Node.FLAG_NO_THROWS);
421:       assertEquals(39, Node.EMPTY_BLOCK);
422:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
423:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
424:       assertEquals(52, Node.LENGTH);
425:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
426:       assertEquals(57, Node.REFLECTED_OBJECT);
427:       assertEquals(54, Node.SLASH_V);
428:       assertEquals(57, Node.LAST_PROP);
429:       assertEquals(30, Node.VAR_ARGS_NAME);
430:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
431:       assertEquals(49, Node.DIRECT_EVAL);
432:       assertEquals(40, Node.ORIGINALNAME_PROP);
433:       assertEquals(32, Node.INCRDECR_PROP);
434:       assertEquals(46, Node.IS_NAMESPACE);
435:       assertEquals(51, Node.STATIC_SOURCE_FILE);
436:       assertEquals(12, Node.COLUMN_BITS);
437:       assertEquals(50, Node.FREE_CALL);
438:       assertEquals(1, Node.DECR_FLAG);
439:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
440:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
441:       
442:       node_FileLevelJsDocBuilder0.append("Object");
443:       assertFalse(node0.isCall());
444:       assertFalse(node0.isStringKey());
445:       assertFalse(node0.isVar());
446:       assertFalse(node0.isName());
447:       assertFalse(node0.isParamList());
448:       assertFalse(node0.isNew());
449:       assertFalse(node0.isAdd());
450:       assertFalse(node0.isNull());
451:       assertFalse(node0.isSetterDef());
452:       assertEquals(0, node0.getSourcePosition());
453:       assertFalse(node0.isContinue());
454:       assertFalse(node0.isAssignAdd());
455:       assertFalse(node0.isDo());
456:       assertFalse(node0.isDefaultCase());
457:       assertEquals(0, node0.getLineno());
458:       assertFalse(node0.isLabel());
459:       assertEquals(0, node0.getChildCount());
460:       assertFalse(node0.isFunction());
461:       assertFalse(node0.isCast());
462:       assertFalse(node0.isEmpty());
463:       assertFalse(node0.isGetElem());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isDebugger());
466:       assertFalse(node0.isTrue());
467:       assertFalse(node0.isNot());
468:       assertFalse(node0.isOr());
469:       assertTrue(node0.isNumber());
470:       assertFalse(node0.isWhile());
471:       assertFalse(node0.isVoid());
472:       assertFalse(node0.isExprResult());
473:       assertFalse(node0.isComma());
474:       assertFalse(node0.isReturn());
475:       assertFalse(node0.hasChildren());
476:       assertFalse(node0.isDec());
477:       assertFalse(node0.isAssign());
478:       assertFalse(node0.isTypeOf());
479:       assertFalse(node0.isThrow());
480:       assertFalse(node0.isHook());
481:       assertFalse(node0.isBreak());
482:       assertFalse(node0.isInc());
483:       assertFalse(node0.isGetProp());
484:       assertFalse(node0.isString());
485:       assertFalse(node0.isAnd());
486:       assertFalse(node0.isObjectLit());
487:       assertFalse(node0.isSwitch());
488:       assertFalse(node0.isFalse());
489:       assertFalse(node0.isArrayLit());
490:       assertFalse(node0.isFor());
491:       assertFalse(node0.isIf());
492:       assertFalse(node0.hasOneChild());
493:       assertFalse(node0.isTry());
494:       assertFalse(node0.isLabelName());
495:       assertFalse(node0.isNE());
496:       assertFalse(node0.isScript());
497:       assertEquals(0, node0.getCharno());
498:       assertFalse(node0.isGetterDef());
499:       assertFalse(node0.isIn());
500:       assertFalse(node0.isCatch());
501:       assertFalse(node0.isCase());
502:       assertEquals(39, node0.getType());
503:       assertFalse(node0.isBlock());
504:       assertFalse(node0.isThis());
505:       assertFalse(node0.isInstanceOf());
506:       assertFalse(node0.isRegExp());
507:       assertFalse(node0.hasMoreThanOneChild());
508:       assertFalse(node0.isWith());
509:       assertEquals(53, Node.INPUT_ID);
510:       assertEquals(43, Node.IS_CONSTANT_NAME);
511:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
512:       assertEquals(47, Node.IS_DISPATCHER);
513:       assertEquals(2, Node.POST_FLAG);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(4095, Node.COLUMN_MASK);
516:       assertEquals(37, Node.OPT_ARG_NAME);
517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
518:       assertEquals(48, Node.DIRECTIVES);
519:       assertEquals(56, Node.CHANGE_TIME);
520:       assertEquals(29, Node.JSDOC_INFO_PROP);
521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
522:       assertEquals(36, Node.QUOTED_PROP);
523:       assertEquals(55, Node.INFERRED_FUNCTION);
524:       assertEquals(8, Node.FLAG_NO_THROWS);
525:       assertEquals(39, Node.EMPTY_BLOCK);
526:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
528:       assertEquals(52, Node.LENGTH);
529:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
530:       assertEquals(57, Node.REFLECTED_OBJECT);
531:       assertEquals(54, Node.SLASH_V);
532:       assertEquals(57, Node.LAST_PROP);
533:       assertEquals(30, Node.VAR_ARGS_NAME);
534:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
535:       assertEquals(49, Node.DIRECT_EVAL);
536:       assertEquals(40, Node.ORIGINALNAME_PROP);
537:       assertEquals(32, Node.INCRDECR_PROP);
538:       assertEquals(46, Node.IS_NAMESPACE);
539:       assertEquals(51, Node.STATIC_SOURCE_FILE);
540:       assertEquals(12, Node.COLUMN_BITS);
541:       assertEquals(50, Node.FREE_CALL);
542:       assertEquals(1, Node.DECR_FLAG);
543:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
544:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
545:       
546:       Node node1 = Node.newString(48, "Object", (-947), 1689);
547:       assertFalse(node1.isNE());
548:       assertFalse(node1.isEmpty());
549:       assertFalse(node1.isGetterDef());
550:       assertFalse(node1.isIn());
551:       assertFalse(node1.isCase());
552:       assertFalse(node1.isTry());
553:       assertFalse(node1.isFor());
554:       assertFalse(node1.isInc());
555:       assertFalse(node1.isTrue());
556:       assertFalse(node1.isVoid());
557:       assertFalse(node1.isRegExp());
558:       assertFalse(node1.isCatch());
559:       assertFalse(node1.isDelProp());
560:       assertFalse(node1.isIf());
561:       assertFalse(node1.isThis());
562:       assertFalse(node1.isNull());
563:       assertFalse(node1.isInstanceOf());
564:       assertFalse(node1.isVar());
565:       assertFalse(node1.isHook());
566:       assertEquals(0, node1.getChildCount());
567:       assertFalse(node1.isBlock());
568:       assertFalse(node1.isDefaultCase());
569:       assertFalse(node1.isSwitch());
570:       assertFalse(node1.isScript());
571:       assertEquals((-1), node1.getCharno());
572:       assertFalse(node1.isArrayLit());
573:       assertFalse(node1.isLabelName());
574:       assertFalse(node1.isStringKey());
575:       assertFalse(node1.isParamList());
576:       assertFalse(node1.isTypeOf());
577:       assertFalse(node1.hasChildren());
578:       assertFalse(node1.isDec());
579:       assertEquals((-1), node1.getSourcePosition());
580:       assertFalse(node1.isLabel());
581:       assertFalse(node1.isOr());
582:       assertFalse(node1.isAssign());
583:       assertFalse(node1.isNumber());
584:       assertFalse(node1.hasMoreThanOneChild());
585:       assertFalse(node1.hasOneChild());
586:       assertFalse(node1.isAssignAdd());
587:       assertFalse(node1.isDo());
588:       assertFalse(node1.isReturn());
589:       assertFalse(node1.isWhile());
590:       assertFalse(node1.isExprResult());
591:       assertFalse(node1.isNew());
592:       assertFalse(node1.isWith());
593:       assertFalse(node1.isAdd());
594:       assertFalse(node1.isCall());
595:       assertFalse(node1.isGetElem());
596:       assertEquals((-1), node1.getLineno());
597:       assertFalse(node1.isName());
598:       assertFalse(node1.isSetterDef());
599:       assertFalse(node1.isComma());
600:       assertFalse(node1.isGetProp());
601:       assertFalse(node1.isBreak());
602:       assertEquals(48, node1.getType());
603:       assertFalse(node1.isFalse());
604:       assertFalse(node1.isThrow());
605:       assertFalse(node1.isFunction());
606:       assertFalse(node1.isDebugger());
607:       assertFalse(node1.isNot());
608:       assertFalse(node1.isContinue());
609:       assertFalse(node1.isString());
610:       assertFalse(node1.isCast());
611:       assertFalse(node1.isObjectLit());
612:       assertFalse(node1.isAnd());
613:       assertNotNull(node1);
614:       assertFalse(node1.equals((Object)node0));
615:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
616:       assertEquals(50, Node.FREE_CALL);
617:       assertEquals(8, Node.FLAG_NO_THROWS);
618:       assertEquals(39, Node.EMPTY_BLOCK);
619:       assertEquals(40, Node.ORIGINALNAME_PROP);
620:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
621:       assertEquals(52, Node.LENGTH);
622:       assertEquals(48, Node.DIRECTIVES);
623:       assertEquals(57, Node.REFLECTED_OBJECT);
624:       assertEquals(54, Node.SLASH_V);
625:       assertEquals(49, Node.DIRECT_EVAL);
626:       assertEquals(1, Node.DECR_FLAG);
627:       assertEquals(4095, Node.COLUMN_MASK);
628:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
629:       assertEquals(32, Node.INCRDECR_PROP);
630:       assertEquals(12, Node.COLUMN_BITS);
631:       assertEquals(29, Node.JSDOC_INFO_PROP);
632:       assertEquals(2, Node.POST_FLAG);
633:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
634:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
636:       assertEquals(37, Node.OPT_ARG_NAME);
637:       assertEquals(51, Node.STATIC_SOURCE_FILE);
638:       assertEquals(36, Node.QUOTED_PROP);
639:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
640:       assertEquals(46, Node.IS_NAMESPACE);
641:       assertEquals(43, Node.IS_CONSTANT_NAME);
642:       assertEquals(56, Node.CHANGE_TIME);
643:       assertEquals(30, Node.VAR_ARGS_NAME);
644:       assertEquals(15, Node.NO_SIDE_EFFECTS);
645:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(53, Node.INPUT_ID);
648:       assertEquals(57, Node.LAST_PROP);
649:       assertEquals(47, Node.IS_DISPATCHER);
650:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
651:       
652:       Iterable<Node> iterable0 = node1.children();
653:       assertFalse(iterable0.contains(node0));
654:       assertFalse(node1.isNE());
655:       assertFalse(node1.isEmpty());
656:       assertFalse(node1.isGetterDef());
657:       assertFalse(node1.isIn());
658:       assertFalse(node1.isCase());
659:       assertFalse(node1.isTry());
660:       assertFalse(node1.isFor());
661:       assertFalse(node1.isInc());
662:       assertFalse(node1.isTrue());
663:       assertFalse(node1.isVoid());
664:       assertFalse(node1.isRegExp());
665:       assertFalse(node1.isCatch());
666:       assertFalse(node1.isDelProp());
667:       assertFalse(node1.isIf());
668:       assertFalse(node1.isThis());
669:       assertFalse(node1.isNull());
670:       assertFalse(node1.isInstanceOf());
671:       assertFalse(node1.isVar());
672:       assertFalse(node1.isHook());
673:       assertEquals(0, node1.getChildCount());
674:       assertFalse(node1.isBlock());
675:       assertFalse(node1.isDefaultCase());
676:       assertFalse(node1.isSwitch());
677:       assertFalse(node1.isScript());
678:       assertEquals((-1), node1.getCharno());
679:       assertFalse(node1.isArrayLit());
680:       assertFalse(node1.isLabelName());
681:       assertFalse(node1.isStringKey());
682:       assertFalse(node1.isParamList());
683:       assertFalse(node1.isTypeOf());
684:       assertFalse(node1.hasChildren());
685:       assertFalse(node1.isDec());
686:       assertEquals((-1), node1.getSourcePosition());
687:       assertFalse(node1.isLabel());
688:       assertFalse(node1.isOr());
689:       assertFalse(node1.isAssign());
690:       assertFalse(node1.isNumber());
691:       assertFalse(node1.hasMoreThanOneChild());
692:       assertFalse(node1.hasOneChild());
693:       assertFalse(node1.isAssignAdd());
694:       assertFalse(node1.isDo());
695:       assertFalse(node1.isReturn());
696:       assertFalse(node1.isWhile());
697:       assertFalse(node1.isExprResult());
698:       assertFalse(node1.isNew());
699:       assertFalse(node1.isWith());
700:       assertFalse(node1.isAdd());
701:       assertFalse(node1.isCall());
702:       assertFalse(node1.isGetElem());
703:       assertEquals((-1), node1.getLineno());
704:       assertFalse(node1.isName());
705:       assertFalse(node1.isSetterDef());
706:       assertFalse(node1.isComma());
707:       assertFalse(node1.isGetProp());
708:       assertFalse(node1.isBreak());
709:       assertEquals(48, node1.getType());
710:       assertFalse(node1.isFalse());
711:       assertFalse(node1.isThrow());
712:       assertFalse(node1.isFunction());
713:       assertFalse(node1.isDebugger());
714:       assertFalse(node1.isNot());
715:       assertFalse(node1.isContinue());
716:       assertFalse(node1.isString());
717:       assertFalse(node1.isCast());
718:       assertFalse(node1.isObjectLit());
719:       assertFalse(node1.isAnd());
720:       assertNotNull(iterable0);
721:       assertFalse(node1.equals((Object)node0));
722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
723:       assertEquals(50, Node.FREE_CALL);
724:       assertEquals(8, Node.FLAG_NO_THROWS);
725:       assertEquals(39, Node.EMPTY_BLOCK);
726:       assertEquals(40, Node.ORIGINALNAME_PROP);
727:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
728:       assertEquals(52, Node.LENGTH);
729:       assertEquals(48, Node.DIRECTIVES);
730:       assertEquals(57, Node.REFLECTED_OBJECT);
731:       assertEquals(54, Node.SLASH_V);
732:       assertEquals(49, Node.DIRECT_EVAL);
733:       assertEquals(1, Node.DECR_FLAG);
734:       assertEquals(4095, Node.COLUMN_MASK);
735:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
736:       assertEquals(32, Node.INCRDECR_PROP);
737:       assertEquals(12, Node.COLUMN_BITS);
738:       assertEquals(29, Node.JSDOC_INFO_PROP);
739:       assertEquals(2, Node.POST_FLAG);
740:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
741:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
742:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
743:       assertEquals(37, Node.OPT_ARG_NAME);
744:       assertEquals(51, Node.STATIC_SOURCE_FILE);
745:       assertEquals(36, Node.QUOTED_PROP);
746:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
747:       assertEquals(46, Node.IS_NAMESPACE);
748:       assertEquals(43, Node.IS_CONSTANT_NAME);
749:       assertEquals(56, Node.CHANGE_TIME);
750:       assertEquals(30, Node.VAR_ARGS_NAME);
751:       assertEquals(15, Node.NO_SIDE_EFFECTS);
752:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
753:       assertEquals(55, Node.INFERRED_FUNCTION);
754:       assertEquals(53, Node.INPUT_ID);
755:       assertEquals(57, Node.LAST_PROP);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
758:       
759:       Set<String> set0 = node0.getDirectives();
760:       assertFalse(node0.isCall());
761:       assertFalse(node0.isStringKey());
762:       assertFalse(node0.isVar());
763:       assertFalse(node0.isName());
764:       assertFalse(node0.isParamList());
765:       assertFalse(node0.isNew());
766:       assertFalse(node0.isAdd());
767:       assertFalse(node0.isNull());
768:       assertFalse(node0.isSetterDef());
769:       assertEquals(0, node0.getSourcePosition());
770:       assertFalse(node0.isContinue());
771:       assertFalse(node0.isAssignAdd());
772:       assertFalse(node0.isDo());
773:       assertFalse(node0.isDefaultCase());
774:       assertEquals(0, node0.getLineno());
775:       assertFalse(node0.isLabel());
776:       assertEquals(0, node0.getChildCount());
777:       assertFalse(node0.isFunction());
778:       assertFalse(node0.isCast());
779:       assertFalse(node0.isEmpty());
780:       assertFalse(node0.isGetElem());
781:       assertFalse(node0.isDelProp());
782:       assertFalse(node0.isDebugger());
783:       assertFalse(node0.isTrue());
784:       assertFalse(node0.isNot());
785:       assertFalse(node0.isOr());
786:       assertTrue(node0.isNumber());
787:       assertFalse(node0.isWhile());
788:       assertFalse(node0.isVoid());
789:       assertFalse(node0.isExprResult());
790:       assertFalse(node0.isComma());
791:       assertFalse(node0.isReturn());
792:       assertFalse(node0.hasChildren());
793:       assertFalse(node0.isDec());
794:       assertFalse(node0.isAssign());
795:       assertFalse(node0.isTypeOf());
796:       assertFalse(node0.isThrow());
797:       assertFalse(node0.isHook());
798:       assertFalse(node0.isBreak());
799:       assertFalse(node0.isInc());
800:       assertFalse(node0.isGetProp());
801:       assertFalse(node0.isString());
802:       assertFalse(node0.isAnd());
803:       assertFalse(node0.isObjectLit());
804:       assertFalse(node0.isSwitch());
805:       assertFalse(node0.isFalse());
806:       assertFalse(node0.isArrayLit());
807:       assertFalse(node0.isFor());
808:       assertFalse(node0.isIf());
809:       assertFalse(node0.hasOneChild());
810:       assertFalse(node0.isTry());
811:       assertFalse(node0.isLabelName());
812:       assertFalse(node0.isNE());
813:       assertFalse(node0.isScript());
814:       assertEquals(0, node0.getCharno());
815:       assertFalse(node0.isGetterDef());
816:       assertFalse(node0.isIn());
817:       assertFalse(node0.isCatch());
818:       assertFalse(node0.isCase());
819:       assertEquals(39, node0.getType());
820:       assertFalse(node0.isBlock());
821:       assertFalse(node0.isThis());
822:       assertFalse(node0.isInstanceOf());
823:       assertFalse(node0.isRegExp());
824:       assertFalse(node0.hasMoreThanOneChild());
825:       assertFalse(node0.isWith());
826:       assertNull(set0);
827:       assertFalse(node0.equals((Object)node1));
828:       assertEquals(53, Node.INPUT_ID);
829:       assertEquals(43, Node.IS_CONSTANT_NAME);
830:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
831:       assertEquals(47, Node.IS_DISPATCHER);
832:       assertEquals(2, Node.POST_FLAG);
833:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
834:       assertEquals(4095, Node.COLUMN_MASK);
835:       assertEquals(37, Node.OPT_ARG_NAME);
836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
837:       assertEquals(48, Node.DIRECTIVES);
838:       assertEquals(56, Node.CHANGE_TIME);
839:       assertEquals(29, Node.JSDOC_INFO_PROP);
840:       assertEquals(15, Node.NO_SIDE_EFFECTS);
841:       assertEquals(36, Node.QUOTED_PROP);
842:       assertEquals(55, Node.INFERRED_FUNCTION);
843:       assertEquals(8, Node.FLAG_NO_THROWS);
844:       assertEquals(39, Node.EMPTY_BLOCK);
845:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
846:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
847:       assertEquals(52, Node.LENGTH);
848:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
849:       assertEquals(57, Node.REFLECTED_OBJECT);
850:       assertEquals(54, Node.SLASH_V);
851:       assertEquals(57, Node.LAST_PROP);
852:       assertEquals(30, Node.VAR_ARGS_NAME);
853:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
854:       assertEquals(49, Node.DIRECT_EVAL);
855:       assertEquals(40, Node.ORIGINALNAME_PROP);
856:       assertEquals(32, Node.INCRDECR_PROP);
857:       assertEquals(46, Node.IS_NAMESPACE);
858:       assertEquals(51, Node.STATIC_SOURCE_FILE);
859:       assertEquals(12, Node.COLUMN_BITS);
860:       assertEquals(50, Node.FREE_CALL);
861:       assertEquals(1, Node.DECR_FLAG);
862:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
863:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
864:       
865:       boolean boolean0 = node1.isScript();
866:       assertFalse(boolean0);
867:       assertFalse(node1.isNE());
868:       assertFalse(node1.isEmpty());
869:       assertFalse(node1.isGetterDef());
870:       assertFalse(node1.isIn());
871:       assertFalse(node1.isCase());
872:       assertFalse(node1.isTry());
873:       assertFalse(node1.isFor());
874:       assertFalse(node1.isInc());
875:       assertFalse(node1.isTrue());
876:       assertFalse(node1.isVoid());
877:       assertFalse(node1.isRegExp());
878:       assertFalse(node1.isCatch());
879:       assertFalse(node1.isDelProp());
880:       assertFalse(node1.isIf());
881:       assertFalse(node1.isThis());
882:       assertFalse(node1.isNull());
883:       assertFalse(node1.isInstanceOf());
884:       assertFalse(node1.isVar());
885:       assertFalse(node1.isHook());
886:       assertEquals(0, node1.getChildCount());
887:       assertFalse(node1.isBlock());
888:       assertFalse(node1.isDefaultCase());
889:       assertFalse(node1.isSwitch());
890:       assertFalse(node1.isScript());
891:       assertEquals((-1), node1.getCharno());
892:       assertFalse(node1.isArrayLit());
893:       assertFalse(node1.isLabelName());
894:       assertFalse(node1.isStringKey());
895:       assertFalse(node1.isParamList());
896:       assertFalse(node1.isTypeOf());
897:       assertFalse(node1.hasChildren());
898:       assertFalse(node1.isDec());
899:       assertEquals((-1), node1.getSourcePosition());
900:       assertFalse(node1.isLabel());
901:       assertFalse(node1.isOr());
902:       assertFalse(node1.isAssign());
903:       assertFalse(node1.isNumber());
904:       assertFalse(node1.hasMoreThanOneChild());
905:       assertFalse(node1.hasOneChild());
906:       assertFalse(node1.isAssignAdd());
907:       assertFalse(node1.isDo());
908:       assertFalse(node1.isReturn());
909:       assertFalse(node1.isWhile());
910:       assertFalse(node1.isExprResult());
911:       assertFalse(node1.isNew());
912:       assertFalse(node1.isWith());
913:       assertFalse(node1.isAdd());
914:       assertFalse(node1.isCall());
915:       assertFalse(node1.isGetElem());
916:       assertEquals((-1), node1.getLineno());
917:       assertFalse(node1.isName());
918:       assertFalse(node1.isSetterDef());
919:       assertFalse(node1.isComma());
920:       assertFalse(node1.isGetProp());
921:       assertFalse(node1.isBreak());
922:       assertEquals(48, node1.getType());
923:       assertFalse(node1.isFalse());
924:       assertFalse(node1.isThrow());
925:       assertFalse(node1.isFunction());
926:       assertFalse(node1.isDebugger());
927:       assertFalse(node1.isNot());
928:       assertFalse(node1.isContinue());
929:       assertFalse(node1.isString());
930:       assertFalse(node1.isCast());
931:       assertFalse(node1.isObjectLit());
932:       assertFalse(node1.isAnd());
933:       assertFalse(node1.equals((Object)node0));
934:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
935:       assertEquals(50, Node.FREE_CALL);
936:       assertEquals(8, Node.FLAG_NO_THROWS);
937:       assertEquals(39, Node.EMPTY_BLOCK);
938:       assertEquals(40, Node.ORIGINALNAME_PROP);
939:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
940:       assertEquals(52, Node.LENGTH);
941:       assertEquals(48, Node.DIRECTIVES);
942:       assertEquals(57, Node.REFLECTED_OBJECT);
943:       assertEquals(54, Node.SLASH_V);
944:       assertEquals(49, Node.DIRECT_EVAL);
945:       assertEquals(1, Node.DECR_FLAG);
946:       assertEquals(4095, Node.COLUMN_MASK);
947:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
948:       assertEquals(32, Node.INCRDECR_PROP);
949:       assertEquals(12, Node.COLUMN_BITS);
950:       assertEquals(29, Node.JSDOC_INFO_PROP);
951:       assertEquals(2, Node.POST_FLAG);
952:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
953:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
954:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
955:       assertEquals(37, Node.OPT_ARG_NAME);
956:       assertEquals(51, Node.STATIC_SOURCE_FILE);
957:       assertEquals(36, Node.QUOTED_PROP);
958:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
959:       assertEquals(46, Node.IS_NAMESPACE);
960:       assertEquals(43, Node.IS_CONSTANT_NAME);
961:       assertEquals(56, Node.CHANGE_TIME);
962:       assertEquals(30, Node.VAR_ARGS_NAME);
963:       assertEquals(15, Node.NO_SIDE_EFFECTS);
964:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
965:       assertEquals(55, Node.INFERRED_FUNCTION);
966:       assertEquals(53, Node.INPUT_ID);
967:       assertEquals(57, Node.LAST_PROP);
968:       assertEquals(47, Node.IS_DISPATCHER);
969:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
970:       
971:       Node node2 = Node.newNumber((double) 4095, 53, 1046);
972:       assertFalse(node2.isExprResult());
973:       assertFalse(node2.isScript());
974:       assertFalse(node2.isCast());
975:       assertFalse(node2.isWith());
976:       assertFalse(node2.isAssign());
977:       assertFalse(node2.hasChildren());
978:       assertFalse(node2.hasOneChild());
979:       assertEquals(218134, node2.getSourcePosition());
980:       assertFalse(node2.isLabel());
981:       assertFalse(node2.isGetProp());
982:       assertFalse(node2.isObjectLit());
983:       assertFalse(node2.isContinue());
984:       assertFalse(node2.isNot());
985:       assertFalse(node2.isLabelName());
986:       assertFalse(node2.isAnd());
987:       assertFalse(node2.isBlock());
988:       assertFalse(node2.isInc());
989:       assertFalse(node2.isHook());
990:       assertEquals(53, node2.getLineno());
991:       assertFalse(node2.isFalse());
992:       assertFalse(node2.isCase());
993:       assertFalse(node2.isThrow());
994:       assertEquals(39, node2.getType());
995:       assertFalse(node2.isThis());
996:       assertFalse(node2.isSetterDef());
997:       assertFalse(node2.isCatch());
998:       assertFalse(node2.isInstanceOf());
999:       assertFalse(node2.isIn());
1000:       assertFalse(node2.hasMoreThanOneChild());
1001:       assertFalse(node2.isNE());
1002:       assertFalse(node2.isIf());
1003:       assertFalse(node2.isTry());
1004:       assertFalse(node2.isVoid());
1005:       assertFalse(node2.isDebugger());
1006:       assertFalse(node2.isTrue());
1007:       assertFalse(node2.isRegExp());
1008:       assertFalse(node2.isFunction());
1009:       assertFalse(node2.isFor());
1010:       assertFalse(node2.isEmpty());
1011:       assertFalse(node2.isDefaultCase());
1012:       assertTrue(node2.isNumber());
1013:       assertEquals(0, node2.getChildCount());
1014:       assertFalse(node2.isGetterDef());
1015:       assertFalse(node2.isStringKey());
1016:       assertFalse(node2.isArrayLit());
1017:       assertFalse(node2.isParamList());
1018:       assertFalse(node2.isSwitch());
1019:       assertFalse(node2.isAdd());
1020:       assertFalse(node2.isNew());
1021:       assertFalse(node2.isString());
1022:       assertEquals(1046, node2.getCharno());
1023:       assertFalse(node2.isDo());
1024:       assertFalse(node2.isVar());
1025:       assertFalse(node2.isWhile());
1026:       assertFalse(node2.isAssignAdd());
1027:       assertFalse(node2.isOr());
1028:       assertFalse(node2.isComma());
1029:       assertFalse(node2.isReturn());
1030:       assertFalse(node2.isTypeOf());
1031:       assertFalse(node2.isDec());
1032:       assertFalse(node2.isName());
1033:       assertFalse(node2.isGetElem());
1034:       assertFalse(node2.isCall());
1035:       assertFalse(node2.isBreak());
1036:       assertFalse(node2.isNull());
1037:       assertFalse(node2.isDelProp());
1038:       assertNotNull(node2);
1039:       assertNotSame(node2, node0);
1040:       assertFalse(node2.equals((Object)node0));
1041:       assertFalse(node2.equals((Object)node1));
1042:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1043:       assertEquals(57, Node.LAST_PROP);
1044:       assertEquals(30, Node.VAR_ARGS_NAME);
1045:       assertEquals(52, Node.LENGTH);
1046:       assertEquals(46, Node.IS_NAMESPACE);
1047:       assertEquals(57, Node.REFLECTED_OBJECT);
1048:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1049:       assertEquals(49, Node.DIRECT_EVAL);
1050:       assertEquals(54, Node.SLASH_V);
1051:       assertEquals(56, Node.CHANGE_TIME);
1052:       assertEquals(47, Node.IS_DISPATCHER);
1053:       assertEquals(2, Node.POST_FLAG);
1054:       assertEquals(39, Node.EMPTY_BLOCK);
1055:       assertEquals(40, Node.ORIGINALNAME_PROP);
1056:       assertEquals(29, Node.JSDOC_INFO_PROP);
1057:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1058:       assertEquals(8, Node.FLAG_NO_THROWS);
1059:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1060:       assertEquals(36, Node.QUOTED_PROP);
1061:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1062:       assertEquals(53, Node.INPUT_ID);
1063:       assertEquals(55, Node.INFERRED_FUNCTION);
1064:       assertEquals(4095, Node.COLUMN_MASK);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1067:       assertEquals(43, Node.IS_CONSTANT_NAME);
1068:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1069:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1070:       assertEquals(37, Node.OPT_ARG_NAME);
1071:       assertEquals(50, Node.FREE_CALL);
1072:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1073:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1074:       assertEquals(12, Node.COLUMN_BITS);
1075:       assertEquals(32, Node.INCRDECR_PROP);
1076:       assertEquals(1, Node.DECR_FLAG);
1077:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1078:       
1079:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1080:       assertEquals(0, node_SideEffectFlags0.valueOf());
1081:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1082:       assertNotNull(node_SideEffectFlags0);
1083:       
1084:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
1085:       assertEquals(31, node_SideEffectFlags0.valueOf());
1086:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1087:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1088:       assertEquals(31, node_SideEffectFlags1.valueOf());
1089:       assertNotNull(node_SideEffectFlags1);
1090:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1091:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1092:       
1093:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
1094:       assertEquals(27, node_SideEffectFlags0.valueOf());
1095:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1096:       assertEquals(27, node_SideEffectFlags2.valueOf());
1097:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1098:       assertNotNull(node_SideEffectFlags2);
1099:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1100:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1101:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1102:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1103:       
1104:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
1105:       assertEquals(11, node_SideEffectFlags0.valueOf());
1106:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
1107:       assertEquals(11, node_SideEffectFlags3.valueOf());
1108:       assertFalse(node_SideEffectFlags3.areAllFlagsSet());
1109:       assertNotNull(node_SideEffectFlags3);
1110:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1111:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1112:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1113:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1114:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1115:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1116:       
1117:       node0.addChildToFront(node2);
1118:       assertFalse(node0.isCall());
1119:       assertFalse(node0.isStringKey());
1120:       assertFalse(node0.isVar());
1121:       assertFalse(node0.isName());
1122:       assertFalse(node0.isParamList());
1123:       assertFalse(node0.isNew());
1124:       assertFalse(node0.isAdd());
1125:       assertFalse(node0.isNull());
1126:       assertFalse(node0.isSetterDef());
1127:       assertEquals(0, node0.getSourcePosition());
1128:       assertFalse(node0.isContinue());
1129:       assertFalse(node0.isAssignAdd());
1130:       assertFalse(node0.isDo());
1131:       assertFalse(node0.isDefaultCase());
1132:       assertEquals(0, node0.getLineno());
1133:       assertFalse(node0.isLabel());
1134:       assertFalse(node0.isFunction());
1135:       assertFalse(node0.isCast());
1136:       assertFalse(node0.isEmpty());
1137:       assertTrue(node0.hasOneChild());
1138:       assertFalse(node0.isGetElem());
1139:       assertFalse(node0.isDelProp());
1140:       assertFalse(node0.isDebugger());
1141:       assertFalse(node0.isTrue());
1142:       assertFalse(node0.isNot());
1143:       assertFalse(node0.isOr());
1144:       assertTrue(node0.isNumber());
1145:       assertFalse(node0.isWhile());
1146:       assertFalse(node0.isVoid());
1147:       assertFalse(node0.isExprResult());
1148:       assertFalse(node0.isComma());
1149:       assertFalse(node0.isReturn());
1150:       assertFalse(node0.isDec());
1151:       assertFalse(node0.isAssign());
1152:       assertFalse(node0.isTypeOf());
1153:       assertFalse(node0.isThrow());
1154:       assertFalse(node0.isHook());
1155:       assertFalse(node0.isBreak());
1156:       assertFalse(node0.isInc());
1157:       assertFalse(node0.isGetProp());
1158:       assertFalse(node0.isString());
1159:       assertFalse(node0.isAnd());
1160:       assertFalse(node0.isObjectLit());
1161:       assertFalse(node0.isSwitch());
1162:       assertFalse(node0.isFalse());
1163:       assertFalse(node0.isArrayLit());
1164:       assertFalse(node0.isFor());
1165:       assertFalse(node0.isIf());
1166:       assertFalse(node0.isTry());
1167:       assertFalse(node0.isLabelName());
1168:       assertFalse(node0.isNE());
1169:       assertFalse(node0.isScript());
1170:       assertEquals(0, node0.getCharno());
1171:       assertFalse(node0.isGetterDef());
1172:       assertFalse(node0.isIn());
1173:       assertFalse(node0.isCatch());
1174:       assertFalse(node0.isCase());
1175:       assertEquals(39, node0.getType());
1176:       assertTrue(node0.hasChildren());
1177:       assertFalse(node0.isBlock());
1178:       assertFalse(node0.isThis());
1179:       assertFalse(node0.isInstanceOf());
1180:       assertEquals(1, node0.getChildCount());
1181:       assertFalse(node0.isRegExp());
1182:       assertFalse(node0.hasMoreThanOneChild());
1183:       assertFalse(node0.isWith());
1184:       assertFalse(node2.isExprResult());
1185:       assertFalse(node2.isScript());
1186:       assertFalse(node2.isCast());
1187:       assertFalse(node2.isWith());
1188:       assertFalse(node2.isAssign());
1189:       assertFalse(node2.hasChildren());
1190:       assertFalse(node2.hasOneChild());
1191:       assertEquals(218134, node2.getSourcePosition());
1192:       assertFalse(node2.isLabel());
1193:       assertFalse(node2.isGetProp());
1194:       assertFalse(node2.isObjectLit());
1195:       assertFalse(node2.isContinue());
1196:       assertFalse(node2.isNot());
1197:       assertFalse(node2.isLabelName());
1198:       assertFalse(node2.isAnd());
1199:       assertFalse(node2.isBlock());
1200:       assertFalse(node2.isInc());
1201:       assertFalse(node2.isHook());
1202:       assertEquals(53, node2.getLineno());
1203:       assertFalse(node2.isFalse());
1204:       assertFalse(node2.isCase());
1205:       assertFalse(node2.isThrow());
1206:       assertEquals(39, node2.getType());
1207:       assertFalse(node2.isThis());
1208:       assertFalse(node2.isSetterDef());
1209:       assertFalse(node2.isCatch());
1210:       assertFalse(node2.isInstanceOf());
1211:       assertFalse(node2.isIn());
1212:       assertFalse(node2.hasMoreThanOneChild());
1213:       assertFalse(node2.isNE());
1214:       assertFalse(node2.isIf());
1215:       assertFalse(node2.isTry());
1216:       assertFalse(node2.isVoid());
1217:       assertFalse(node2.isDebugger());
1218:       assertFalse(node2.isTrue());
1219:       assertFalse(node2.isRegExp());
1220:       assertFalse(node2.isFunction());
1221:       assertFalse(node2.isFor());
1222:       assertFalse(node2.isEmpty());
1223:       assertFalse(node2.isDefaultCase());
1224:       assertTrue(node2.isNumber());
1225:       assertEquals(0, node2.getChildCount());
1226:       assertFalse(node2.isGetterDef());
1227:       assertFalse(node2.isStringKey());
1228:       assertFalse(node2.isArrayLit());
1229:       assertFalse(node2.isParamList());
1230:       assertFalse(node2.isSwitch());
1231:       assertFalse(node2.isAdd());
1232:       assertFalse(node2.isNew());
1233:       assertFalse(node2.isString());
1234:       assertEquals(1046, node2.getCharno());
1235:       assertFalse(node2.isDo());
1236:       assertFalse(node2.isVar());
1237:       assertFalse(node2.isWhile());
1238:       assertFalse(node2.isAssignAdd());
1239:       assertFalse(node2.isOr());
1240:       assertFalse(node2.isComma());
1241:       assertFalse(node2.isReturn());
1242:       assertFalse(node2.isTypeOf());
1243:       assertFalse(node2.isDec());
1244:       assertFalse(node2.isName());
1245:       assertFalse(node2.isGetElem());
1246:       assertFalse(node2.isCall());
1247:       assertFalse(node2.isBreak());
1248:       assertFalse(node2.isNull());
1249:       assertFalse(node2.isDelProp());
1250:       assertNotSame(node0, node2);
1251:       assertNotSame(node2, node0);
1252:       assertFalse(node0.equals((Object)node1));
1253:       assertFalse(node0.equals((Object)node2));
1254:       assertFalse(node2.equals((Object)node0));
1255:       assertFalse(node2.equals((Object)node1));
1256:       assertEquals(53, Node.INPUT_ID);
1257:       assertEquals(43, Node.IS_CONSTANT_NAME);
1258:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1259:       assertEquals(47, Node.IS_DISPATCHER);
1260:       assertEquals(2, Node.POST_FLAG);
1261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1262:       assertEquals(4095, Node.COLUMN_MASK);
1263:       assertEquals(37, Node.OPT_ARG_NAME);
1264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1265:       assertEquals(48, Node.DIRECTIVES);
1266:       assertEquals(56, Node.CHANGE_TIME);
1267:       assertEquals(29, Node.JSDOC_INFO_PROP);
1268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1269:       assertEquals(36, Node.QUOTED_PROP);
1270:       assertEquals(55, Node.INFERRED_FUNCTION);
1271:       assertEquals(8, Node.FLAG_NO_THROWS);
1272:       assertEquals(39, Node.EMPTY_BLOCK);
1273:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1274:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1275:       assertEquals(52, Node.LENGTH);
1276:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1277:       assertEquals(57, Node.REFLECTED_OBJECT);
1278:       assertEquals(54, Node.SLASH_V);
1279:       assertEquals(57, Node.LAST_PROP);
1280:       assertEquals(30, Node.VAR_ARGS_NAME);
1281:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1282:       assertEquals(49, Node.DIRECT_EVAL);
1283:       assertEquals(40, Node.ORIGINALNAME_PROP);
1284:       assertEquals(32, Node.INCRDECR_PROP);
1285:       assertEquals(46, Node.IS_NAMESPACE);
1286:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1287:       assertEquals(12, Node.COLUMN_BITS);
1288:       assertEquals(50, Node.FREE_CALL);
1289:       assertEquals(1, Node.DECR_FLAG);
1290:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1291:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1292:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1293:       assertEquals(57, Node.LAST_PROP);
1294:       assertEquals(30, Node.VAR_ARGS_NAME);
1295:       assertEquals(52, Node.LENGTH);
1296:       assertEquals(46, Node.IS_NAMESPACE);
1297:       assertEquals(57, Node.REFLECTED_OBJECT);
1298:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1299:       assertEquals(49, Node.DIRECT_EVAL);
1300:       assertEquals(54, Node.SLASH_V);
1301:       assertEquals(56, Node.CHANGE_TIME);
1302:       assertEquals(47, Node.IS_DISPATCHER);
1303:       assertEquals(2, Node.POST_FLAG);
1304:       assertEquals(39, Node.EMPTY_BLOCK);
1305:       assertEquals(40, Node.ORIGINALNAME_PROP);
1306:       assertEquals(29, Node.JSDOC_INFO_PROP);
1307:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1308:       assertEquals(8, Node.FLAG_NO_THROWS);
1309:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1310:       assertEquals(36, Node.QUOTED_PROP);
1311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1312:       assertEquals(53, Node.INPUT_ID);
1313:       assertEquals(55, Node.INFERRED_FUNCTION);
1314:       assertEquals(4095, Node.COLUMN_MASK);
1315:       assertEquals(48, Node.DIRECTIVES);
1316:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1317:       assertEquals(43, Node.IS_CONSTANT_NAME);
1318:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1320:       assertEquals(37, Node.OPT_ARG_NAME);
1321:       assertEquals(50, Node.FREE_CALL);
1322:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1324:       assertEquals(12, Node.COLUMN_BITS);
1325:       assertEquals(32, Node.INCRDECR_PROP);
1326:       assertEquals(1, Node.DECR_FLAG);
1327:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1328:       
1329:       boolean boolean1 = node2.isLabel();
1330:       assertFalse(boolean1);
1331:       assertFalse(node2.isExprResult());
1332:       assertFalse(node2.isScript());
1333:       assertFalse(node2.isCast());
1334:       assertFalse(node2.isWith());
1335:       assertFalse(node2.isAssign());
1336:       assertFalse(node2.hasChildren());
1337:       assertFalse(node2.hasOneChild());
1338:       assertEquals(218134, node2.getSourcePosition());
1339:       assertFalse(node2.isLabel());
1340:       assertFalse(node2.isGetProp());
1341:       assertFalse(node2.isObjectLit());
1342:       assertFalse(node2.isContinue());
1343:       assertFalse(node2.isNot());
1344:       assertFalse(node2.isLabelName());
1345:       assertFalse(node2.isAnd());
1346:       assertFalse(node2.isBlock());
1347:       assertFalse(node2.isInc());
1348:       assertFalse(node2.isHook());
1349:       assertEquals(53, node2.getLineno());
1350:       assertFalse(node2.isFalse());
1351:       assertFalse(node2.isCase());
1352:       assertFalse(node2.isThrow());
1353:       assertEquals(39, node2.getType());
1354:       assertFalse(node2.isThis());
1355:       assertFalse(node2.isSetterDef());
1356:       assertFalse(node2.isCatch());
1357:       assertFalse(node2.isInstanceOf());
1358:       assertFalse(node2.isIn());
1359:       assertFalse(node2.hasMoreThanOneChild());
1360:       assertFalse(node2.isNE());
1361:       assertFalse(node2.isIf());
1362:       assertFalse(node2.isTry());
1363:       assertFalse(node2.isVoid());
1364:       assertFalse(node2.isDebugger());
1365:       assertFalse(node2.isTrue());
1366:       assertFalse(node2.isRegExp());
1367:       assertFalse(node2.isFunction());
1368:       assertFalse(node2.isFor());
1369:       assertFalse(node2.isEmpty());
1370:       assertFalse(node2.isDefaultCase());
1371:       assertTrue(node2.isNumber());
1372:       assertEquals(0, node2.getChildCount());
1373:       assertFalse(node2.isGetterDef());
1374:       assertFalse(node2.isStringKey());
1375:       assertFalse(node2.isArrayLit());
1376:       assertFalse(node2.isParamList());
1377:       assertFalse(node2.isSwitch());
1378:       assertFalse(node2.isAdd());
1379:       assertFalse(node2.isNew());
1380:       assertFalse(node2.isString());
1381:       assertEquals(1046, node2.getCharno());
1382:       assertFalse(node2.isDo());
1383:       assertFalse(node2.isVar());
1384:       assertFalse(node2.isWhile());
1385:       assertFalse(node2.isAssignAdd());
1386:       assertFalse(node2.isOr());
1387:       assertFalse(node2.isComma());
1388:       assertFalse(node2.isReturn());
1389:       assertFalse(node2.isTypeOf());
1390:       assertFalse(node2.isDec());
1391:       assertFalse(node2.isName());
1392:       assertFalse(node2.isGetElem());
1393:       assertFalse(node2.isCall());
1394:       assertFalse(node2.isBreak());
1395:       assertFalse(node2.isNull());
1396:       assertFalse(node2.isDelProp());
1397:       assertNotSame(node2, node0);
1398:       assertFalse(node2.equals((Object)node0));
1399:       assertFalse(node2.equals((Object)node1));
1400:       assertTrue(boolean1 == boolean0);
1401:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1402:       assertEquals(57, Node.LAST_PROP);
1403:       assertEquals(30, Node.VAR_ARGS_NAME);
1404:       assertEquals(52, Node.LENGTH);
1405:       assertEquals(46, Node.IS_NAMESPACE);
1406:       assertEquals(57, Node.REFLECTED_OBJECT);
1407:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1408:       assertEquals(49, Node.DIRECT_EVAL);
1409:       assertEquals(54, Node.SLASH_V);
1410:       assertEquals(56, Node.CHANGE_TIME);
1411:       assertEquals(47, Node.IS_DISPATCHER);
1412:       assertEquals(2, Node.POST_FLAG);
1413:       assertEquals(39, Node.EMPTY_BLOCK);
1414:       assertEquals(40, Node.ORIGINALNAME_PROP);
1415:       assertEquals(29, Node.JSDOC_INFO_PROP);
1416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1417:       assertEquals(8, Node.FLAG_NO_THROWS);
1418:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1419:       assertEquals(36, Node.QUOTED_PROP);
1420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1421:       assertEquals(53, Node.INPUT_ID);
1422:       assertEquals(55, Node.INFERRED_FUNCTION);
1423:       assertEquals(4095, Node.COLUMN_MASK);
1424:       assertEquals(48, Node.DIRECTIVES);
1425:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1426:       assertEquals(43, Node.IS_CONSTANT_NAME);
1427:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1429:       assertEquals(37, Node.OPT_ARG_NAME);
1430:       assertEquals(50, Node.FREE_CALL);
1431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1432:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1433:       assertEquals(12, Node.COLUMN_BITS);
1434:       assertEquals(32, Node.INCRDECR_PROP);
1435:       assertEquals(1, Node.DECR_FLAG);
1436:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1437:   }
1438: }
RegularFileObject[/tmp/EvoSuite_129_1628256048797/com/google/javascript/rhino/Node_129_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:48 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_129_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_129_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_129_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:49.062 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-2591.135802832726), 0, 0);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getLineno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertNotNull(node0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

InputId inputId0 = node0.getInputId();
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getLineno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertNull(inputId0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

int int0 = node0.getType();
assertEquals(39, int0);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getLineno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getLineno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node_FileLevelJsDocBuilder0.append("Object");
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getLineno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node node1 = Node.newString(48, "Object", (-947), 1689);
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isWith());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(48, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isWith());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(48, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Set<String> set0 = node0.getDirectives();
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getLineno());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertNull(set0);
assertFalse(node0.equals((Object)node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean0 = node1.isScript();
assertFalse(boolean0);
assertFalse(node1.isNE());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isVar());
assertFalse(node1.isHook());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBlock());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.hasOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isExprResult());
assertFalse(node1.isNew());
assertFalse(node1.isWith());
assertFalse(node1.isAdd());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isBreak());
assertEquals(48, node1.getType());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isNot());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isCast());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node2 = Node.newNumber((double) 4095, 53, 1046);
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertEquals(218134, node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertEquals(53, node2.getLineno());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertTrue(node2.isNumber());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isString());
assertEquals(1046, node2.getCharno());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertNotNull(node2);
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setMutatesArguments();
assertEquals(27, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(27, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags0.setReturnsTainted();
assertEquals(11, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(11, node_SideEffectFlags3.valueOf());
assertFalse(node_SideEffectFlags3.areAllFlagsSet());
assertNotNull(node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);

node0.addChildToFront(node2);
assertFalse(node0.isCall());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getLineno());
assertFalse(node0.isLabel());
assertFalse(node0.isFunction());
assertFalse(node0.isCast());
assertFalse(node0.isEmpty());
assertTrue(node0.hasOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isDelProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertTrue(node0.isNumber());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isBreak());
assertFalse(node0.isInc());
assertFalse(node0.isGetProp());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isFalse());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isScript());
assertEquals(0, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertEquals(39, node0.getType());
assertTrue(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertEquals(1, node0.getChildCount());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertEquals(218134, node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertEquals(53, node2.getLineno());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertTrue(node2.isNumber());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isString());
assertEquals(1046, node2.getCharno());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean1 = node2.isLabel();
assertFalse(boolean1);
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isCast());
assertFalse(node2.isWith());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.hasOneChild());
assertEquals(218134, node2.getSourcePosition());
assertFalse(node2.isLabel());
assertFalse(node2.isGetProp());
assertFalse(node2.isObjectLit());
assertFalse(node2.isContinue());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isAnd());
assertFalse(node2.isBlock());
assertFalse(node2.isInc());
assertFalse(node2.isHook());
assertEquals(53, node2.getLineno());
assertFalse(node2.isFalse());
assertFalse(node2.isCase());
assertFalse(node2.isThrow());
assertEquals(39, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isIn());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isFunction());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertTrue(node2.isNumber());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isGetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isArrayLit());
assertFalse(node2.isParamList());
assertFalse(node2.isSwitch());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isString());
assertEquals(1046, node2.getCharno());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isName());
assertFalse(node2.isGetElem());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isDelProp());
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);


[MASTER] 13:20:49.127 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_130_1628256049063/com/google/javascript/rhino/Node_130_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_130_1628256049063/com/google/javascript/rhino/Node_130_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:49.127 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:49.127 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:49.130 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 461
[MASTER] 13:20:49.131 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_130_1628256049063/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:49 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ImmutableList;
12: import com.google.javascript.rhino.InputId;
13: import com.google.javascript.rhino.JSDocInfo;
14: import com.google.javascript.rhino.Node;
15: import com.google.javascript.rhino.SimpleErrorReporter;
16: import com.google.javascript.rhino.jstype.JSType;
17: import com.google.javascript.rhino.jstype.JSTypeRegistry;
18: import java.util.List;
19: import org.evosuite.runtime.EvoRunner;
20: import org.evosuite.runtime.EvoRunnerParameters;
21: import org.evosuite.runtime.testdata.EvoSuiteFile;
22: import org.evosuite.runtime.testdata.FileSystemHandling;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Node_130_tmp__ESTest extends Node_130_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J^GiF5?,af~XIkNH");
31:       assertFalse(boolean0);
32:       
33:       Node node0 = Node.newNumber((-1290.8408832418036), (-981), 110);
34:       assertFalse(node0.isIf());
35:       assertFalse(node0.isGetterDef());
36:       assertFalse(node0.isDelProp());
37:       assertFalse(node0.isNE());
38:       assertFalse(node0.isFor());
39:       assertFalse(node0.isArrayLit());
40:       assertFalse(node0.isString());
41:       assertFalse(node0.isSwitch());
42:       assertFalse(node0.isRegExp());
43:       assertFalse(node0.isDebugger());
44:       assertEquals((-1), node0.getCharno());
45:       assertFalse(node0.isTry());
46:       assertTrue(node0.isNumber());
47:       assertFalse(node0.isCase());
48:       assertFalse(node0.isThrow());
49:       assertFalse(node0.isThis());
50:       assertFalse(node0.isInstanceOf());
51:       assertFalse(node0.isHook());
52:       assertFalse(node0.isFalse());
53:       assertFalse(node0.isCatch());
54:       assertFalse(node0.isFunction());
55:       assertFalse(node0.isIn());
56:       assertFalse(node0.isSetterDef());
57:       assertFalse(node0.isInc());
58:       assertFalse(node0.hasChildren());
59:       assertFalse(node0.isDec());
60:       assertEquals((-1), node0.getSourcePosition());
61:       assertFalse(node0.isLabelName());
62:       assertFalse(node0.isAssign());
63:       assertFalse(node0.isTypeOf());
64:       assertFalse(node0.isLabel());
65:       assertFalse(node0.isReturn());
66:       assertEquals((-1), node0.getLineno());
67:       assertFalse(node0.hasMoreThanOneChild());
68:       assertFalse(node0.isContinue());
69:       assertFalse(node0.isCast());
70:       assertFalse(node0.isExprResult());
71:       assertFalse(node0.isGetElem());
72:       assertFalse(node0.isWhile());
73:       assertFalse(node0.isWith());
74:       assertFalse(node0.isNot());
75:       assertFalse(node0.isAnd());
76:       assertEquals(39, node0.getType());
77:       assertFalse(node0.isBlock());
78:       assertFalse(node0.hasOneChild());
79:       assertFalse(node0.isObjectLit());
80:       assertFalse(node0.isGetProp());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isBreak());
83:       assertFalse(node0.isComma());
84:       assertFalse(node0.isName());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isParamList());
87:       assertFalse(node0.isVar());
88:       assertFalse(node0.isNull());
89:       assertEquals(0, node0.getChildCount());
90:       assertFalse(node0.isCall());
91:       assertFalse(node0.isDefaultCase());
92:       assertFalse(node0.isDo());
93:       assertFalse(node0.isVoid());
94:       assertFalse(node0.isTrue());
95:       assertFalse(node0.isAssignAdd());
96:       assertFalse(node0.isOr());
97:       assertFalse(node0.isNew());
98:       assertFalse(node0.isEmpty());
99:       assertFalse(node0.isAdd());
100:       assertNotNull(node0);
101:       assertEquals(40, Node.ORIGINALNAME_PROP);
102:       assertEquals(50, Node.FREE_CALL);
103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
104:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
105:       assertEquals(57, Node.REFLECTED_OBJECT);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(52, Node.LENGTH);
108:       assertEquals(8, Node.FLAG_NO_THROWS);
109:       assertEquals(57, Node.LAST_PROP);
110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
111:       assertEquals(39, Node.EMPTY_BLOCK);
112:       assertEquals(46, Node.IS_NAMESPACE);
113:       assertEquals(30, Node.VAR_ARGS_NAME);
114:       assertEquals(51, Node.STATIC_SOURCE_FILE);
115:       assertEquals(54, Node.SLASH_V);
116:       assertEquals(2, Node.POST_FLAG);
117:       assertEquals(43, Node.IS_CONSTANT_NAME);
118:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(56, Node.CHANGE_TIME);
121:       assertEquals(47, Node.IS_DISPATCHER);
122:       assertEquals(32, Node.INCRDECR_PROP);
123:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
124:       assertEquals(29, Node.JSDOC_INFO_PROP);
125:       assertEquals(53, Node.INPUT_ID);
126:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
127:       assertEquals(55, Node.INFERRED_FUNCTION);
128:       assertEquals(1, Node.DECR_FLAG);
129:       assertEquals(49, Node.DIRECT_EVAL);
130:       assertEquals(4095, Node.COLUMN_MASK);
131:       assertEquals(12, Node.COLUMN_BITS);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
134:       assertEquals(37, Node.OPT_ARG_NAME);
135:       assertEquals(48, Node.DIRECTIVES);
136:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
137:       
138:       JSDocInfo jSDocInfo0 = new JSDocInfo();
139:       assertFalse(jSDocInfo0.isNoAlias());
140:       assertEquals(0, jSDocInfo0.getParameterCount());
141:       assertFalse(jSDocInfo0.hasEnumParameterType());
142:       assertFalse(jSDocInfo0.isExport());
143:       assertFalse(jSDocInfo0.isImplicitCast());
144:       assertFalse(jSDocInfo0.containsDeclaration());
145:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
146:       assertFalse(jSDocInfo0.hasModifies());
147:       assertFalse(jSDocInfo0.isConstructor());
148:       assertFalse(jSDocInfo0.hasFileOverview());
149:       assertFalse(jSDocInfo0.isJaggerInject());
150:       assertFalse(jSDocInfo0.isConstant());
151:       assertNull(jSDocInfo0.getOriginalCommentString());
152:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
153:       assertFalse(jSDocInfo0.isJaggerProvide());
154:       assertFalse(jSDocInfo0.hasType());
155:       assertFalse(jSDocInfo0.isDisposes());
156:       assertFalse(jSDocInfo0.isJavaDispatch());
157:       assertNull(jSDocInfo0.getVersion());
158:       assertFalse(jSDocInfo0.hasTypedefType());
159:       assertNull(jSDocInfo0.getLicense());
160:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
161:       assertFalse(jSDocInfo0.isNoTypeCheck());
162:       assertNull(jSDocInfo0.getReturnDescription());
163:       assertFalse(jSDocInfo0.isStableIdGenerator());
164:       assertFalse(jSDocInfo0.hasBaseType());
165:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
166:       assertFalse(jSDocInfo0.isIdGenerator());
167:       assertFalse(jSDocInfo0.isExterns());
168:       assertFalse(jSDocInfo0.isNgInject());
169:       assertFalse(jSDocInfo0.isWizaction());
170:       assertFalse(jSDocInfo0.isJaggerModule());
171:       assertEquals("JSDocInfo", jSDocInfo0.toString());
172:       assertFalse(jSDocInfo0.isOverride());
173:       assertFalse(jSDocInfo0.isNoCompile());
174:       assertFalse(jSDocInfo0.makesDicts());
175:       assertFalse(jSDocInfo0.isHidden());
176:       assertNull(jSDocInfo0.getBlockDescription());
177:       assertFalse(jSDocInfo0.isNoShadow());
178:       assertFalse(jSDocInfo0.isInterface());
179:       assertNull(jSDocInfo0.getDeprecationReason());
180:       assertFalse(jSDocInfo0.isMappedIdGenerator());
181:       assertNull(jSDocInfo0.getLendsName());
182:       assertFalse(jSDocInfo0.isDeprecated());
183:       assertFalse(jSDocInfo0.isExpose());
184:       assertNull(jSDocInfo0.getVisibility());
185:       assertFalse(jSDocInfo0.hasThisType());
186:       assertFalse(jSDocInfo0.isNoSideEffects());
187:       assertNull(jSDocInfo0.getMeaning());
188:       assertNull(jSDocInfo0.getFileOverview());
189:       assertFalse(jSDocInfo0.isDefine());
190:       assertNull(jSDocInfo0.getDescription());
191:       assertFalse(jSDocInfo0.hasReturnType());
192:       assertFalse(jSDocInfo0.makesStructs());
193:       assertFalse(jSDocInfo0.shouldPreserveTry());
194:       assertNotNull(jSDocInfo0);
195:       
196:       Node node1 = node0.setJSDocInfo(jSDocInfo0);
197:       assertFalse(node0.isIf());
198:       assertFalse(node0.isGetterDef());
199:       assertFalse(node0.isDelProp());
200:       assertFalse(node0.isNE());
201:       assertFalse(node0.isFor());
202:       assertFalse(node0.isArrayLit());
203:       assertFalse(node0.isString());
204:       assertFalse(node0.isSwitch());
205:       assertFalse(node0.isRegExp());
206:       assertFalse(node0.isDebugger());
207:       assertEquals((-1), node0.getCharno());
208:       assertFalse(node0.isTry());
209:       assertTrue(node0.isNumber());
210:       assertFalse(node0.isCase());
211:       assertFalse(node0.isThrow());
212:       assertFalse(node0.isThis());
213:       assertFalse(node0.isInstanceOf());
214:       assertFalse(node0.isHook());
215:       assertFalse(node0.isFalse());
216:       assertFalse(node0.isCatch());
217:       assertFalse(node0.isFunction());
218:       assertFalse(node0.isIn());
219:       assertFalse(node0.isSetterDef());
220:       assertFalse(node0.isInc());
221:       assertFalse(node0.hasChildren());
222:       assertFalse(node0.isDec());
223:       assertEquals((-1), node0.getSourcePosition());
224:       assertFalse(node0.isLabelName());
225:       assertFalse(node0.isAssign());
226:       assertFalse(node0.isTypeOf());
227:       assertFalse(node0.isLabel());
228:       assertFalse(node0.isReturn());
229:       assertEquals((-1), node0.getLineno());
230:       assertFalse(node0.hasMoreThanOneChild());
231:       assertFalse(node0.isContinue());
232:       assertFalse(node0.isCast());
233:       assertFalse(node0.isExprResult());
234:       assertFalse(node0.isGetElem());
235:       assertFalse(node0.isWhile());
236:       assertFalse(node0.isWith());
237:       assertFalse(node0.isNot());
238:       assertFalse(node0.isAnd());
239:       assertEquals(39, node0.getType());
240:       assertFalse(node0.isBlock());
241:       assertFalse(node0.hasOneChild());
242:       assertFalse(node0.isObjectLit());
243:       assertFalse(node0.isGetProp());
244:       assertFalse(node0.isScript());
245:       assertFalse(node0.isBreak());
246:       assertFalse(node0.isComma());
247:       assertFalse(node0.isName());
248:       assertFalse(node0.isStringKey());
249:       assertFalse(node0.isParamList());
250:       assertFalse(node0.isVar());
251:       assertFalse(node0.isNull());
252:       assertEquals(0, node0.getChildCount());
253:       assertFalse(node0.isCall());
254:       assertFalse(node0.isDefaultCase());
255:       assertFalse(node0.isDo());
256:       assertFalse(node0.isVoid());
257:       assertFalse(node0.isTrue());
258:       assertFalse(node0.isAssignAdd());
259:       assertFalse(node0.isOr());
260:       assertFalse(node0.isNew());
261:       assertFalse(node0.isEmpty());
262:       assertFalse(node0.isAdd());
263:       assertFalse(jSDocInfo0.isNoAlias());
264:       assertEquals(0, jSDocInfo0.getParameterCount());
265:       assertFalse(jSDocInfo0.hasEnumParameterType());
266:       assertFalse(jSDocInfo0.isExport());
267:       assertFalse(jSDocInfo0.isImplicitCast());
268:       assertFalse(jSDocInfo0.containsDeclaration());
269:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
270:       assertFalse(jSDocInfo0.hasModifies());
271:       assertFalse(jSDocInfo0.isConstructor());
272:       assertFalse(jSDocInfo0.hasFileOverview());
273:       assertFalse(jSDocInfo0.isJaggerInject());
274:       assertFalse(jSDocInfo0.isConstant());
275:       assertNull(jSDocInfo0.getOriginalCommentString());
276:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
277:       assertFalse(jSDocInfo0.isJaggerProvide());
278:       assertFalse(jSDocInfo0.hasType());
279:       assertFalse(jSDocInfo0.isDisposes());
280:       assertFalse(jSDocInfo0.isJavaDispatch());
281:       assertNull(jSDocInfo0.getVersion());
282:       assertFalse(jSDocInfo0.hasTypedefType());
283:       assertNull(jSDocInfo0.getLicense());
284:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
285:       assertFalse(jSDocInfo0.isNoTypeCheck());
286:       assertNull(jSDocInfo0.getReturnDescription());
287:       assertFalse(jSDocInfo0.isStableIdGenerator());
288:       assertFalse(jSDocInfo0.hasBaseType());
289:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
290:       assertFalse(jSDocInfo0.isIdGenerator());
291:       assertFalse(jSDocInfo0.isExterns());
292:       assertFalse(jSDocInfo0.isNgInject());
293:       assertFalse(jSDocInfo0.isWizaction());
294:       assertFalse(jSDocInfo0.isJaggerModule());
295:       assertEquals("JSDocInfo", jSDocInfo0.toString());
296:       assertFalse(jSDocInfo0.isOverride());
297:       assertFalse(jSDocInfo0.isNoCompile());
298:       assertFalse(jSDocInfo0.makesDicts());
299:       assertFalse(jSDocInfo0.isHidden());
300:       assertNull(jSDocInfo0.getBlockDescription());
301:       assertFalse(jSDocInfo0.isNoShadow());
302:       assertFalse(jSDocInfo0.isInterface());
303:       assertNull(jSDocInfo0.getDeprecationReason());
304:       assertFalse(jSDocInfo0.isMappedIdGenerator());
305:       assertNull(jSDocInfo0.getLendsName());
306:       assertFalse(jSDocInfo0.isDeprecated());
307:       assertFalse(jSDocInfo0.isExpose());
308:       assertNull(jSDocInfo0.getVisibility());
309:       assertFalse(jSDocInfo0.hasThisType());
310:       assertFalse(jSDocInfo0.isNoSideEffects());
311:       assertNull(jSDocInfo0.getMeaning());
312:       assertNull(jSDocInfo0.getFileOverview());
313:       assertFalse(jSDocInfo0.isDefine());
314:       assertNull(jSDocInfo0.getDescription());
315:       assertFalse(jSDocInfo0.hasReturnType());
316:       assertFalse(jSDocInfo0.makesStructs());
317:       assertFalse(jSDocInfo0.shouldPreserveTry());
318:       assertFalse(node1.isStringKey());
319:       assertFalse(node1.isName());
320:       assertFalse(node1.isCall());
321:       assertFalse(node1.isNull());
322:       assertFalse(node1.isVar());
323:       assertFalse(node1.isParamList());
324:       assertFalse(node1.isBlock());
325:       assertEquals(0, node1.getChildCount());
326:       assertFalse(node1.isCatch());
327:       assertEquals(39, node1.getType());
328:       assertFalse(node1.isWhile());
329:       assertFalse(node1.isTry());
330:       assertFalse(node1.isDebugger());
331:       assertEquals((-1), node1.getSourcePosition());
332:       assertFalse(node1.isGetElem());
333:       assertFalse(node1.isEmpty());
334:       assertFalse(node1.isLabelName());
335:       assertFalse(node1.isAssign());
336:       assertFalse(node1.hasChildren());
337:       assertFalse(node1.isArrayLit());
338:       assertFalse(node1.isDelProp());
339:       assertFalse(node1.isVoid());
340:       assertFalse(node1.isExprResult());
341:       assertFalse(node1.isReturn());
342:       assertFalse(node1.isLabel());
343:       assertFalse(node1.isDec());
344:       assertFalse(node1.isTypeOf());
345:       assertFalse(node1.isDo());
346:       assertFalse(node1.isDefaultCase());
347:       assertFalse(node1.isAssignAdd());
348:       assertFalse(node1.isNew());
349:       assertFalse(node1.isAdd());
350:       assertFalse(node1.isOr());
351:       assertFalse(node1.isTrue());
352:       assertFalse(node1.isFalse());
353:       assertFalse(node1.isThrow());
354:       assertFalse(node1.isBreak());
355:       assertFalse(node1.isHook());
356:       assertFalse(node1.isThis());
357:       assertFalse(node1.isComma());
358:       assertFalse(node1.isInstanceOf());
359:       assertFalse(node1.isCase());
360:       assertFalse(node1.isNot());
361:       assertFalse(node1.isSwitch());
362:       assertFalse(node1.isAnd());
363:       assertTrue(node1.isNumber());
364:       assertEquals((-1), node1.getCharno());
365:       assertFalse(node1.isGetProp());
366:       assertFalse(node1.isGetterDef());
367:       assertFalse(node1.isScript());
368:       assertFalse(node1.isObjectLit());
369:       assertFalse(node1.isString());
370:       assertFalse(node1.isFor());
371:       assertFalse(node1.hasOneChild());
372:       assertFalse(node1.isNE());
373:       assertFalse(node1.isIf());
374:       assertEquals((-1), node1.getLineno());
375:       assertFalse(node1.isRegExp());
376:       assertFalse(node1.isCast());
377:       assertFalse(node1.isFunction());
378:       assertFalse(node1.hasMoreThanOneChild());
379:       assertFalse(node1.isWith());
380:       assertFalse(node1.isContinue());
381:       assertFalse(node1.isSetterDef());
382:       assertFalse(node1.isInc());
383:       assertFalse(node1.isIn());
384:       assertNotNull(node1);
385:       assertSame(node0, node1);
386:       assertSame(node1, node0);
387:       assertEquals(40, Node.ORIGINALNAME_PROP);
388:       assertEquals(50, Node.FREE_CALL);
389:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
390:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
391:       assertEquals(57, Node.REFLECTED_OBJECT);
392:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
393:       assertEquals(52, Node.LENGTH);
394:       assertEquals(8, Node.FLAG_NO_THROWS);
395:       assertEquals(57, Node.LAST_PROP);
396:       assertEquals(15, Node.NO_SIDE_EFFECTS);
397:       assertEquals(39, Node.EMPTY_BLOCK);
398:       assertEquals(46, Node.IS_NAMESPACE);
399:       assertEquals(30, Node.VAR_ARGS_NAME);
400:       assertEquals(51, Node.STATIC_SOURCE_FILE);
401:       assertEquals(54, Node.SLASH_V);
402:       assertEquals(2, Node.POST_FLAG);
403:       assertEquals(43, Node.IS_CONSTANT_NAME);
404:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
405:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
406:       assertEquals(56, Node.CHANGE_TIME);
407:       assertEquals(47, Node.IS_DISPATCHER);
408:       assertEquals(32, Node.INCRDECR_PROP);
409:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
410:       assertEquals(29, Node.JSDOC_INFO_PROP);
411:       assertEquals(53, Node.INPUT_ID);
412:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
413:       assertEquals(55, Node.INFERRED_FUNCTION);
414:       assertEquals(1, Node.DECR_FLAG);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(4095, Node.COLUMN_MASK);
417:       assertEquals(12, Node.COLUMN_BITS);
418:       assertEquals(36, Node.QUOTED_PROP);
419:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
420:       assertEquals(37, Node.OPT_ARG_NAME);
421:       assertEquals(48, Node.DIRECTIVES);
422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
423:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
424:       assertEquals(43, Node.IS_CONSTANT_NAME);
425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
426:       assertEquals(36, Node.QUOTED_PROP);
427:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
428:       assertEquals(53, Node.INPUT_ID);
429:       assertEquals(55, Node.INFERRED_FUNCTION);
430:       assertEquals(29, Node.JSDOC_INFO_PROP);
431:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
432:       assertEquals(46, Node.IS_NAMESPACE);
433:       assertEquals(51, Node.STATIC_SOURCE_FILE);
434:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
435:       assertEquals(47, Node.IS_DISPATCHER);
436:       assertEquals(2, Node.POST_FLAG);
437:       assertEquals(30, Node.VAR_ARGS_NAME);
438:       assertEquals(40, Node.ORIGINALNAME_PROP);
439:       assertEquals(57, Node.REFLECTED_OBJECT);
440:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
441:       assertEquals(54, Node.SLASH_V);
442:       assertEquals(15, Node.NO_SIDE_EFFECTS);
443:       assertEquals(57, Node.LAST_PROP);
444:       assertEquals(50, Node.FREE_CALL);
445:       assertEquals(8, Node.FLAG_NO_THROWS);
446:       assertEquals(39, Node.EMPTY_BLOCK);
447:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
448:       assertEquals(52, Node.LENGTH);
449:       assertEquals(12, Node.COLUMN_BITS);
450:       assertEquals(32, Node.INCRDECR_PROP);
451:       assertEquals(48, Node.DIRECTIVES);
452:       assertEquals(1, Node.DECR_FLAG);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
455:       assertEquals(49, Node.DIRECT_EVAL);
456:       assertEquals(37, Node.OPT_ARG_NAME);
457:       assertEquals(4095, Node.COLUMN_MASK);
458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
459:       
460:       Iterable<Node> iterable0 = node0.children();
461:       assertFalse(iterable0.contains(node1));
462:       assertFalse(node0.isIf());
463:       assertFalse(node0.isGetterDef());
464:       assertFalse(node0.isDelProp());
465:       assertFalse(node0.isNE());
466:       assertFalse(node0.isFor());
467:       assertFalse(node0.isArrayLit());
468:       assertFalse(node0.isString());
469:       assertFalse(node0.isSwitch());
470:       assertFalse(node0.isRegExp());
471:       assertFalse(node0.isDebugger());
472:       assertEquals((-1), node0.getCharno());
473:       assertFalse(node0.isTry());
474:       assertTrue(node0.isNumber());
475:       assertFalse(node0.isCase());
476:       assertFalse(node0.isThrow());
477:       assertFalse(node0.isThis());
478:       assertFalse(node0.isInstanceOf());
479:       assertFalse(node0.isHook());
480:       assertFalse(node0.isFalse());
481:       assertFalse(node0.isCatch());
482:       assertFalse(node0.isFunction());
483:       assertFalse(node0.isIn());
484:       assertFalse(node0.isSetterDef());
485:       assertFalse(node0.isInc());
486:       assertFalse(node0.hasChildren());
487:       assertFalse(node0.isDec());
488:       assertEquals((-1), node0.getSourcePosition());
489:       assertFalse(node0.isLabelName());
490:       assertFalse(node0.isAssign());
491:       assertFalse(node0.isTypeOf());
492:       assertFalse(node0.isLabel());
493:       assertFalse(node0.isReturn());
494:       assertEquals((-1), node0.getLineno());
495:       assertFalse(node0.hasMoreThanOneChild());
496:       assertFalse(node0.isContinue());
497:       assertFalse(node0.isCast());
498:       assertFalse(node0.isExprResult());
499:       assertFalse(node0.isGetElem());
500:       assertFalse(node0.isWhile());
501:       assertFalse(node0.isWith());
502:       assertFalse(node0.isNot());
503:       assertFalse(node0.isAnd());
504:       assertEquals(39, node0.getType());
505:       assertFalse(node0.isBlock());
506:       assertFalse(node0.hasOneChild());
507:       assertFalse(node0.isObjectLit());
508:       assertFalse(node0.isGetProp());
509:       assertFalse(node0.isScript());
510:       assertFalse(node0.isBreak());
511:       assertFalse(node0.isComma());
512:       assertFalse(node0.isName());
513:       assertFalse(node0.isStringKey());
514:       assertFalse(node0.isParamList());
515:       assertFalse(node0.isVar());
516:       assertFalse(node0.isNull());
517:       assertEquals(0, node0.getChildCount());
518:       assertFalse(node0.isCall());
519:       assertFalse(node0.isDefaultCase());
520:       assertFalse(node0.isDo());
521:       assertFalse(node0.isVoid());
522:       assertFalse(node0.isTrue());
523:       assertFalse(node0.isAssignAdd());
524:       assertFalse(node0.isOr());
525:       assertFalse(node0.isNew());
526:       assertFalse(node0.isEmpty());
527:       assertFalse(node0.isAdd());
528:       assertNotNull(iterable0);
529:       assertSame(node0, node1);
530:       assertEquals(40, Node.ORIGINALNAME_PROP);
531:       assertEquals(50, Node.FREE_CALL);
532:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
534:       assertEquals(57, Node.REFLECTED_OBJECT);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(52, Node.LENGTH);
537:       assertEquals(8, Node.FLAG_NO_THROWS);
538:       assertEquals(57, Node.LAST_PROP);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       assertEquals(39, Node.EMPTY_BLOCK);
541:       assertEquals(46, Node.IS_NAMESPACE);
542:       assertEquals(30, Node.VAR_ARGS_NAME);
543:       assertEquals(51, Node.STATIC_SOURCE_FILE);
544:       assertEquals(54, Node.SLASH_V);
545:       assertEquals(2, Node.POST_FLAG);
546:       assertEquals(43, Node.IS_CONSTANT_NAME);
547:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
548:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
549:       assertEquals(56, Node.CHANGE_TIME);
550:       assertEquals(47, Node.IS_DISPATCHER);
551:       assertEquals(32, Node.INCRDECR_PROP);
552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
553:       assertEquals(29, Node.JSDOC_INFO_PROP);
554:       assertEquals(53, Node.INPUT_ID);
555:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
556:       assertEquals(55, Node.INFERRED_FUNCTION);
557:       assertEquals(1, Node.DECR_FLAG);
558:       assertEquals(49, Node.DIRECT_EVAL);
559:       assertEquals(4095, Node.COLUMN_MASK);
560:       assertEquals(12, Node.COLUMN_BITS);
561:       assertEquals(36, Node.QUOTED_PROP);
562:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
563:       assertEquals(37, Node.OPT_ARG_NAME);
564:       assertEquals(48, Node.DIRECTIVES);
565:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
566:       
567:       // Undeclared exception!
568:       try { 
569:         node1.replaceChildAfter(node0, node0);
570:         fail("Expecting exception: IllegalArgumentException");
571:       
572:       } catch(IllegalArgumentException e) {
573:          //
574:          // prev is not a child of this node.
575:          //
576:          verifyException("com.google.common.base.Preconditions", e);
577:       }
578:   }
579: }
RegularFileObject[/tmp/EvoSuite_130_1628256049063/com/google/javascript/rhino/Node_130_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_130_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_130_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_130_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:49.148 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J^GiF5?,af~XIkNH");
assertFalse(boolean0);

Node node0 = Node.newNumber((-1290.8408832418036), (-981), 110);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertFalse(jSDocInfo0.isNoAlias());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getOriginalCommentString());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasBaseType());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isJaggerModule());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertNotNull(jSDocInfo0);

Node node1 = node0.setJSDocInfo(jSDocInfo0);
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(jSDocInfo0.isNoAlias());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isImplicitCast());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertFalse(jSDocInfo0.isConstant());
assertNull(jSDocInfo0.getOriginalCommentString());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isJavaDispatch());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.hasTypedefType());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getReturnDescription());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertFalse(jSDocInfo0.hasBaseType());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isJaggerModule());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertFalse(jSDocInfo0.isOverride());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.isHidden());
assertNull(jSDocInfo0.getBlockDescription());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isExpose());
assertNull(jSDocInfo0.getVisibility());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.isNoSideEffects());
assertNull(jSDocInfo0.getMeaning());
assertNull(jSDocInfo0.getFileOverview());
assertFalse(jSDocInfo0.isDefine());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.hasReturnType());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isParamList());
assertFalse(node1.isBlock());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCatch());
assertEquals(39, node1.getType());
assertFalse(node1.isWhile());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isTrue());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isSwitch());
assertFalse(node1.isAnd());
assertTrue(node1.isNumber());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isRegExp());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isContinue());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertNotNull(node1);
assertSame(node0, node1);
assertSame(node1, node0);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isArrayLit());
assertFalse(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertTrue(node0.isNumber());
assertFalse(node0.isCase());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isCatch());
assertFalse(node0.isFunction());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isWhile());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertEquals(39, node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isScript());
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isVar());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNew());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(iterable0);
assertSame(node0, node1);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

node1.replaceChildAfter(node0, node0);

[MASTER] 13:20:49.734 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_132_1628256049182/com/google/javascript/rhino/Node_132_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_132_1628256049182/com/google/javascript/rhino/Node_132_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:49.734 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:49.734 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:49.735 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 662
[MASTER] 13:20:49.736 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_132_1628256049182/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:49 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.testdata.EvoSuiteFile;
14: import org.evosuite.runtime.testdata.FileSystemHandling;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_132_tmp__ESTest extends Node_132_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("}N>", (-572), (-572));
23:       assertFalse(node0.isName());
24:       assertFalse(node0.isCall());
25:       assertFalse(node0.isSetterDef());
26:       assertFalse(node0.isParamList());
27:       assertFalse(node0.isStringKey());
28:       assertFalse(node0.isNull());
29:       assertFalse(node0.isDo());
30:       assertFalse(node0.isDefaultCase());
31:       assertFalse(node0.isContinue());
32:       assertFalse(node0.isAdd());
33:       assertFalse(node0.isNew());
34:       assertEquals(0, node0.getChildCount());
35:       assertFalse(node0.isAssignAdd());
36:       assertFalse(node0.isFunction());
37:       assertFalse(node0.isVar());
38:       assertEquals(40, node0.getType());
39:       assertFalse(node0.isLabel());
40:       assertFalse(node0.isGetterDef());
41:       assertFalse(node0.isLabelName());
42:       assertFalse(node0.isNumber());
43:       assertFalse(node0.isIf());
44:       assertFalse(node0.isArrayLit());
45:       assertFalse(node0.hasOneChild());
46:       assertEquals((-1), node0.getLineno());
47:       assertFalse(node0.isIn());
48:       assertFalse(node0.isNE());
49:       assertFalse(node0.isRegExp());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isCatch());
52:       assertFalse(node0.isCase());
53:       assertFalse(node0.isScript());
54:       assertFalse(node0.isTry());
55:       assertFalse(node0.isInstanceOf());
56:       assertTrue(node0.isString());
57:       assertFalse(node0.hasMoreThanOneChild());
58:       assertFalse(node0.isThis());
59:       assertFalse(node0.isBlock());
60:       assertFalse(node0.isFor());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isGetProp());
65:       assertFalse(node0.isAnd());
66:       assertFalse(node0.isObjectLit());
67:       assertEquals((-1), node0.getCharno());
68:       assertFalse(node0.isSwitch());
69:       assertFalse(node0.isInc());
70:       assertFalse(node0.isThrow());
71:       assertFalse(node0.isDelProp());
72:       assertFalse(node0.isEmpty());
73:       assertFalse(node0.isAssign());
74:       assertFalse(node0.isDec());
75:       assertFalse(node0.isTypeOf());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isGetElem());
78:       assertFalse(node0.isOr());
79:       assertFalse(node0.isDebugger());
80:       assertFalse(node0.isTrue());
81:       assertEquals((-1), node0.getSourcePosition());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isNot());
84:       assertFalse(node0.isExprResult());
85:       assertFalse(node0.isVoid());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.hasChildren());
89:       assertNotNull(node0);
90:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
91:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
92:       assertEquals(29, Node.JSDOC_INFO_PROP);
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(2, Node.POST_FLAG);
95:       assertEquals(47, Node.IS_DISPATCHER);
96:       assertEquals(55, Node.INFERRED_FUNCTION);
97:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
98:       assertEquals(4095, Node.COLUMN_MASK);
99:       assertEquals(49, Node.DIRECT_EVAL);
100:       assertEquals(48, Node.DIRECTIVES);
101:       assertEquals(15, Node.NO_SIDE_EFFECTS);
102:       assertEquals(37, Node.OPT_ARG_NAME);
103:       assertEquals(8, Node.FLAG_NO_THROWS);
104:       assertEquals(39, Node.EMPTY_BLOCK);
105:       assertEquals(56, Node.CHANGE_TIME);
106:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
107:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
108:       assertEquals(52, Node.LENGTH);
109:       assertEquals(36, Node.QUOTED_PROP);
110:       assertEquals(40, Node.ORIGINALNAME_PROP);
111:       assertEquals(57, Node.REFLECTED_OBJECT);
112:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(57, Node.LAST_PROP);
115:       assertEquals(30, Node.VAR_ARGS_NAME);
116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
117:       assertEquals(12, Node.COLUMN_BITS);
118:       assertEquals(32, Node.INCRDECR_PROP);
119:       assertEquals(1, Node.DECR_FLAG);
120:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
121:       assertEquals(54, Node.SLASH_V);
122:       assertEquals(43, Node.IS_CONSTANT_NAME);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       assertEquals(50, Node.FREE_CALL);
125:       assertEquals(51, Node.STATIC_SOURCE_FILE);
126:       
127:       Node node1 = new Node(2271, node0);
128:       assertFalse(node0.isName());
129:       assertFalse(node0.isCall());
130:       assertFalse(node0.isSetterDef());
131:       assertFalse(node0.isParamList());
132:       assertFalse(node0.isStringKey());
133:       assertFalse(node0.isNull());
134:       assertFalse(node0.isDo());
135:       assertFalse(node0.isDefaultCase());
136:       assertFalse(node0.isContinue());
137:       assertFalse(node0.isAdd());
138:       assertFalse(node0.isNew());
139:       assertEquals(0, node0.getChildCount());
140:       assertFalse(node0.isAssignAdd());
141:       assertFalse(node0.isFunction());
142:       assertFalse(node0.isVar());
143:       assertEquals(40, node0.getType());
144:       assertFalse(node0.isLabel());
145:       assertFalse(node0.isGetterDef());
146:       assertFalse(node0.isLabelName());
147:       assertFalse(node0.isNumber());
148:       assertFalse(node0.isIf());
149:       assertFalse(node0.isArrayLit());
150:       assertFalse(node0.hasOneChild());
151:       assertEquals((-1), node0.getLineno());
152:       assertFalse(node0.isIn());
153:       assertFalse(node0.isNE());
154:       assertFalse(node0.isRegExp());
155:       assertFalse(node0.isWith());
156:       assertFalse(node0.isCatch());
157:       assertFalse(node0.isCase());
158:       assertFalse(node0.isScript());
159:       assertFalse(node0.isTry());
160:       assertFalse(node0.isInstanceOf());
161:       assertTrue(node0.isString());
162:       assertFalse(node0.hasMoreThanOneChild());
163:       assertFalse(node0.isThis());
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isFor());
166:       assertFalse(node0.isHook());
167:       assertFalse(node0.isFalse());
168:       assertFalse(node0.isBreak());
169:       assertFalse(node0.isGetProp());
170:       assertFalse(node0.isAnd());
171:       assertFalse(node0.isObjectLit());
172:       assertEquals((-1), node0.getCharno());
173:       assertFalse(node0.isSwitch());
174:       assertFalse(node0.isInc());
175:       assertFalse(node0.isThrow());
176:       assertFalse(node0.isDelProp());
177:       assertFalse(node0.isEmpty());
178:       assertFalse(node0.isAssign());
179:       assertFalse(node0.isDec());
180:       assertFalse(node0.isTypeOf());
181:       assertFalse(node0.isCast());
182:       assertFalse(node0.isGetElem());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isDebugger());
185:       assertFalse(node0.isTrue());
186:       assertEquals((-1), node0.getSourcePosition());
187:       assertFalse(node0.isWhile());
188:       assertFalse(node0.isNot());
189:       assertFalse(node0.isExprResult());
190:       assertFalse(node0.isVoid());
191:       assertFalse(node0.isReturn());
192:       assertFalse(node0.isComma());
193:       assertFalse(node0.hasChildren());
194:       assertFalse(node1.isNew());
195:       assertFalse(node1.isWhile());
196:       assertFalse(node1.isVar());
197:       assertFalse(node1.isBlock());
198:       assertFalse(node1.isContinue());
199:       assertFalse(node1.isStringKey());
200:       assertFalse(node1.hasMoreThanOneChild());
201:       assertFalse(node1.isName());
202:       assertEquals((-1), node1.getLineno());
203:       assertFalse(node1.isCall());
204:       assertFalse(node1.isParamList());
205:       assertFalse(node1.isNumber());
206:       assertFalse(node1.isTypeOf());
207:       assertFalse(node1.isDec());
208:       assertEquals((-1), node1.getSourcePosition());
209:       assertFalse(node1.isReturn());
210:       assertFalse(node1.isDebugger());
211:       assertFalse(node1.isTry());
212:       assertFalse(node1.isFunction());
213:       assertFalse(node1.isRegExp());
214:       assertFalse(node1.isAnd());
215:       assertFalse(node1.isWith());
216:       assertFalse(node1.isInstanceOf());
217:       assertFalse(node1.isCatch());
218:       assertFalse(node1.isCast());
219:       assertFalse(node1.isIf());
220:       assertFalse(node1.isNE());
221:       assertFalse(node1.isThrow());
222:       assertFalse(node1.isIn());
223:       assertFalse(node1.isSetterDef());
224:       assertFalse(node1.isInc());
225:       assertEquals((-1), node1.getCharno());
226:       assertEquals(2271, node1.getType());
227:       assertFalse(node1.isSwitch());
228:       assertFalse(node1.isHook());
229:       assertFalse(node1.isFalse());
230:       assertFalse(node1.isBreak());
231:       assertTrue(node1.hasChildren());
232:       assertFalse(node1.isGetProp());
233:       assertFalse(node1.isComma());
234:       assertFalse(node1.isGetterDef());
235:       assertEquals(1, node1.getChildCount());
236:       assertFalse(node1.isFor());
237:       assertFalse(node1.isThis());
238:       assertTrue(node1.hasOneChild());
239:       assertFalse(node1.isCase());
240:       assertFalse(node1.isNot());
241:       assertFalse(node1.isObjectLit());
242:       assertFalse(node1.isString());
243:       assertFalse(node1.isScript());
244:       assertFalse(node1.isVoid());
245:       assertFalse(node1.isDefaultCase());
246:       assertFalse(node1.isTrue());
247:       assertFalse(node1.isLabelName());
248:       assertFalse(node1.isAssign());
249:       assertFalse(node1.isDelProp());
250:       assertFalse(node1.isArrayLit());
251:       assertFalse(node1.isExprResult());
252:       assertFalse(node1.isGetElem());
253:       assertFalse(node1.isAssignAdd());
254:       assertFalse(node1.isOr());
255:       assertFalse(node1.isLabel());
256:       assertFalse(node1.isNull());
257:       assertFalse(node1.isDo());
258:       assertFalse(node1.isEmpty());
259:       assertFalse(node1.isAdd());
260:       assertNotNull(node1);
261:       assertFalse(node1.equals((Object)node0));
262:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
263:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
264:       assertEquals(29, Node.JSDOC_INFO_PROP);
265:       assertEquals(53, Node.INPUT_ID);
266:       assertEquals(2, Node.POST_FLAG);
267:       assertEquals(47, Node.IS_DISPATCHER);
268:       assertEquals(55, Node.INFERRED_FUNCTION);
269:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
270:       assertEquals(4095, Node.COLUMN_MASK);
271:       assertEquals(49, Node.DIRECT_EVAL);
272:       assertEquals(48, Node.DIRECTIVES);
273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
274:       assertEquals(37, Node.OPT_ARG_NAME);
275:       assertEquals(8, Node.FLAG_NO_THROWS);
276:       assertEquals(39, Node.EMPTY_BLOCK);
277:       assertEquals(56, Node.CHANGE_TIME);
278:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
279:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
280:       assertEquals(52, Node.LENGTH);
281:       assertEquals(36, Node.QUOTED_PROP);
282:       assertEquals(40, Node.ORIGINALNAME_PROP);
283:       assertEquals(57, Node.REFLECTED_OBJECT);
284:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
285:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
286:       assertEquals(57, Node.LAST_PROP);
287:       assertEquals(30, Node.VAR_ARGS_NAME);
288:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
289:       assertEquals(12, Node.COLUMN_BITS);
290:       assertEquals(32, Node.INCRDECR_PROP);
291:       assertEquals(1, Node.DECR_FLAG);
292:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
293:       assertEquals(54, Node.SLASH_V);
294:       assertEquals(43, Node.IS_CONSTANT_NAME);
295:       assertEquals(46, Node.IS_NAMESPACE);
296:       assertEquals(50, Node.FREE_CALL);
297:       assertEquals(51, Node.STATIC_SOURCE_FILE);
298:       assertEquals(43, Node.IS_CONSTANT_NAME);
299:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
300:       assertEquals(36, Node.QUOTED_PROP);
301:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
302:       assertEquals(55, Node.INFERRED_FUNCTION);
303:       assertEquals(53, Node.INPUT_ID);
304:       assertEquals(39, Node.EMPTY_BLOCK);
305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
306:       assertEquals(50, Node.FREE_CALL);
307:       assertEquals(2, Node.POST_FLAG);
308:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
309:       assertEquals(47, Node.IS_DISPATCHER);
310:       assertEquals(46, Node.IS_NAMESPACE);
311:       assertEquals(40, Node.ORIGINALNAME_PROP);
312:       assertEquals(30, Node.VAR_ARGS_NAME);
313:       assertEquals(49, Node.DIRECT_EVAL);
314:       assertEquals(57, Node.LAST_PROP);
315:       assertEquals(54, Node.SLASH_V);
316:       assertEquals(51, Node.STATIC_SOURCE_FILE);
317:       assertEquals(12, Node.COLUMN_BITS);
318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
319:       assertEquals(32, Node.INCRDECR_PROP);
320:       assertEquals(52, Node.LENGTH);
321:       assertEquals(1, Node.DECR_FLAG);
322:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
324:       assertEquals(29, Node.JSDOC_INFO_PROP);
325:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
326:       assertEquals(56, Node.CHANGE_TIME);
327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
328:       assertEquals(8, Node.FLAG_NO_THROWS);
329:       assertEquals(57, Node.REFLECTED_OBJECT);
330:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
331:       assertEquals(4095, Node.COLUMN_MASK);
332:       assertEquals(37, Node.OPT_ARG_NAME);
333:       assertEquals(48, Node.DIRECTIVES);
334:       
335:       Node node2 = node1.getLastChild();
336:       assertFalse(node0.isName());
337:       assertFalse(node0.isCall());
338:       assertFalse(node0.isSetterDef());
339:       assertFalse(node0.isParamList());
340:       assertFalse(node0.isStringKey());
341:       assertFalse(node0.isNull());
342:       assertFalse(node0.isDo());
343:       assertFalse(node0.isDefaultCase());
344:       assertFalse(node0.isContinue());
345:       assertFalse(node0.isAdd());
346:       assertFalse(node0.isNew());
347:       assertEquals(0, node0.getChildCount());
348:       assertFalse(node0.isAssignAdd());
349:       assertFalse(node0.isFunction());
350:       assertFalse(node0.isVar());
351:       assertEquals(40, node0.getType());
352:       assertFalse(node0.isLabel());
353:       assertFalse(node0.isGetterDef());
354:       assertFalse(node0.isLabelName());
355:       assertFalse(node0.isNumber());
356:       assertFalse(node0.isIf());
357:       assertFalse(node0.isArrayLit());
358:       assertFalse(node0.hasOneChild());
359:       assertEquals((-1), node0.getLineno());
360:       assertFalse(node0.isIn());
361:       assertFalse(node0.isNE());
362:       assertFalse(node0.isRegExp());
363:       assertFalse(node0.isWith());
364:       assertFalse(node0.isCatch());
365:       assertFalse(node0.isCase());
366:       assertFalse(node0.isScript());
367:       assertFalse(node0.isTry());
368:       assertFalse(node0.isInstanceOf());
369:       assertTrue(node0.isString());
370:       assertFalse(node0.hasMoreThanOneChild());
371:       assertFalse(node0.isThis());
372:       assertFalse(node0.isBlock());
373:       assertFalse(node0.isFor());
374:       assertFalse(node0.isHook());
375:       assertFalse(node0.isFalse());
376:       assertFalse(node0.isBreak());
377:       assertFalse(node0.isGetProp());
378:       assertFalse(node0.isAnd());
379:       assertFalse(node0.isObjectLit());
380:       assertEquals((-1), node0.getCharno());
381:       assertFalse(node0.isSwitch());
382:       assertFalse(node0.isInc());
383:       assertFalse(node0.isThrow());
384:       assertFalse(node0.isDelProp());
385:       assertFalse(node0.isEmpty());
386:       assertFalse(node0.isAssign());
387:       assertFalse(node0.isDec());
388:       assertFalse(node0.isTypeOf());
389:       assertFalse(node0.isCast());
390:       assertFalse(node0.isGetElem());
391:       assertFalse(node0.isOr());
392:       assertFalse(node0.isDebugger());
393:       assertFalse(node0.isTrue());
394:       assertEquals((-1), node0.getSourcePosition());
395:       assertFalse(node0.isWhile());
396:       assertFalse(node0.isNot());
397:       assertFalse(node0.isExprResult());
398:       assertFalse(node0.isVoid());
399:       assertFalse(node0.isReturn());
400:       assertFalse(node0.isComma());
401:       assertFalse(node0.hasChildren());
402:       assertFalse(node1.isNew());
403:       assertFalse(node1.isWhile());
404:       assertFalse(node1.isVar());
405:       assertFalse(node1.isBlock());
406:       assertFalse(node1.isContinue());
407:       assertFalse(node1.isStringKey());
408:       assertFalse(node1.hasMoreThanOneChild());
409:       assertFalse(node1.isName());
410:       assertEquals((-1), node1.getLineno());
411:       assertFalse(node1.isCall());
412:       assertFalse(node1.isParamList());
413:       assertFalse(node1.isNumber());
414:       assertFalse(node1.isTypeOf());
415:       assertFalse(node1.isDec());
416:       assertEquals((-1), node1.getSourcePosition());
417:       assertFalse(node1.isReturn());
418:       assertFalse(node1.isDebugger());
419:       assertFalse(node1.isTry());
420:       assertFalse(node1.isFunction());
421:       assertFalse(node1.isRegExp());
422:       assertFalse(node1.isAnd());
423:       assertFalse(node1.isWith());
424:       assertFalse(node1.isInstanceOf());
425:       assertFalse(node1.isCatch());
426:       assertFalse(node1.isCast());
427:       assertFalse(node1.isIf());
428:       assertFalse(node1.isNE());
429:       assertFalse(node1.isThrow());
430:       assertFalse(node1.isIn());
431:       assertFalse(node1.isSetterDef());
432:       assertFalse(node1.isInc());
433:       assertEquals((-1), node1.getCharno());
434:       assertEquals(2271, node1.getType());
435:       assertFalse(node1.isSwitch());
436:       assertFalse(node1.isHook());
437:       assertFalse(node1.isFalse());
438:       assertFalse(node1.isBreak());
439:       assertTrue(node1.hasChildren());
440:       assertFalse(node1.isGetProp());
441:       assertFalse(node1.isComma());
442:       assertFalse(node1.isGetterDef());
443:       assertEquals(1, node1.getChildCount());
444:       assertFalse(node1.isFor());
445:       assertFalse(node1.isThis());
446:       assertTrue(node1.hasOneChild());
447:       assertFalse(node1.isCase());
448:       assertFalse(node1.isNot());
449:       assertFalse(node1.isObjectLit());
450:       assertFalse(node1.isString());
451:       assertFalse(node1.isScript());
452:       assertFalse(node1.isVoid());
453:       assertFalse(node1.isDefaultCase());
454:       assertFalse(node1.isTrue());
455:       assertFalse(node1.isLabelName());
456:       assertFalse(node1.isAssign());
457:       assertFalse(node1.isDelProp());
458:       assertFalse(node1.isArrayLit());
459:       assertFalse(node1.isExprResult());
460:       assertFalse(node1.isGetElem());
461:       assertFalse(node1.isAssignAdd());
462:       assertFalse(node1.isOr());
463:       assertFalse(node1.isLabel());
464:       assertFalse(node1.isNull());
465:       assertFalse(node1.isDo());
466:       assertFalse(node1.isEmpty());
467:       assertFalse(node1.isAdd());
468:       assertFalse(node2.isIf());
469:       assertFalse(node2.isNE());
470:       assertFalse(node2.isEmpty());
471:       assertFalse(node2.isDelProp());
472:       assertFalse(node2.isArrayLit());
473:       assertFalse(node2.isFor());
474:       assertFalse(node2.isRegExp());
475:       assertFalse(node2.isDefaultCase());
476:       assertFalse(node2.isInc());
477:       assertFalse(node2.isTrue());
478:       assertFalse(node2.isVoid());
479:       assertFalse(node2.isIn());
480:       assertFalse(node2.isNull());
481:       assertFalse(node2.isSetterDef());
482:       assertFalse(node2.isName());
483:       assertFalse(node2.isGetProp());
484:       assertFalse(node2.isBreak());
485:       assertFalse(node2.isCall());
486:       assertFalse(node2.isThrow());
487:       assertEquals(40, node2.getType());
488:       assertFalse(node2.isFalse());
489:       assertFalse(node2.isComma());
490:       assertFalse(node2.isFunction());
491:       assertFalse(node2.isWhile());
492:       assertFalse(node2.isAnd());
493:       assertFalse(node2.isNot());
494:       assertFalse(node2.isDebugger());
495:       assertFalse(node2.isObjectLit());
496:       assertEquals((-1), node2.getSourcePosition());
497:       assertFalse(node2.isTypeOf());
498:       assertFalse(node2.isNumber());
499:       assertFalse(node2.isAssignAdd());
500:       assertFalse(node2.isLabelName());
501:       assertFalse(node2.isGetElem());
502:       assertEquals((-1), node2.getLineno());
503:       assertFalse(node2.hasMoreThanOneChild());
504:       assertFalse(node2.isContinue());
505:       assertFalse(node2.isCast());
506:       assertFalse(node2.isLabel());
507:       assertFalse(node2.isReturn());
508:       assertFalse(node2.hasChildren());
509:       assertFalse(node2.isAssign());
510:       assertFalse(node2.isDec());
511:       assertFalse(node2.isExprResult());
512:       assertFalse(node2.isAdd());
513:       assertFalse(node2.isDo());
514:       assertFalse(node2.isNew());
515:       assertFalse(node2.isOr());
516:       assertFalse(node2.isThis());
517:       assertFalse(node2.isParamList());
518:       assertFalse(node2.isVar());
519:       assertFalse(node2.isHook());
520:       assertFalse(node2.isCatch());
521:       assertFalse(node2.isInstanceOf());
522:       assertFalse(node2.isBlock());
523:       assertFalse(node2.isWith());
524:       assertEquals(0, node2.getChildCount());
525:       assertFalse(node2.isScript());
526:       assertFalse(node2.isSwitch());
527:       assertFalse(node2.isTry());
528:       assertFalse(node2.isCase());
529:       assertTrue(node2.isString());
530:       assertFalse(node2.hasOneChild());
531:       assertFalse(node2.isStringKey());
532:       assertFalse(node2.isGetterDef());
533:       assertEquals((-1), node2.getCharno());
534:       assertNotNull(node2);
535:       assertSame(node0, node2);
536:       assertSame(node2, node0);
537:       assertFalse(node0.equals((Object)node1));
538:       assertFalse(node1.equals((Object)node0));
539:       assertFalse(node2.equals((Object)node1));
540:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
541:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
542:       assertEquals(29, Node.JSDOC_INFO_PROP);
543:       assertEquals(53, Node.INPUT_ID);
544:       assertEquals(2, Node.POST_FLAG);
545:       assertEquals(47, Node.IS_DISPATCHER);
546:       assertEquals(55, Node.INFERRED_FUNCTION);
547:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
548:       assertEquals(4095, Node.COLUMN_MASK);
549:       assertEquals(49, Node.DIRECT_EVAL);
550:       assertEquals(48, Node.DIRECTIVES);
551:       assertEquals(15, Node.NO_SIDE_EFFECTS);
552:       assertEquals(37, Node.OPT_ARG_NAME);
553:       assertEquals(8, Node.FLAG_NO_THROWS);
554:       assertEquals(39, Node.EMPTY_BLOCK);
555:       assertEquals(56, Node.CHANGE_TIME);
556:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
557:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
558:       assertEquals(52, Node.LENGTH);
559:       assertEquals(36, Node.QUOTED_PROP);
560:       assertEquals(40, Node.ORIGINALNAME_PROP);
561:       assertEquals(57, Node.REFLECTED_OBJECT);
562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
563:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
564:       assertEquals(57, Node.LAST_PROP);
565:       assertEquals(30, Node.VAR_ARGS_NAME);
566:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
567:       assertEquals(12, Node.COLUMN_BITS);
568:       assertEquals(32, Node.INCRDECR_PROP);
569:       assertEquals(1, Node.DECR_FLAG);
570:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
571:       assertEquals(54, Node.SLASH_V);
572:       assertEquals(43, Node.IS_CONSTANT_NAME);
573:       assertEquals(46, Node.IS_NAMESPACE);
574:       assertEquals(50, Node.FREE_CALL);
575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
576:       assertEquals(43, Node.IS_CONSTANT_NAME);
577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
578:       assertEquals(36, Node.QUOTED_PROP);
579:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
580:       assertEquals(55, Node.INFERRED_FUNCTION);
581:       assertEquals(53, Node.INPUT_ID);
582:       assertEquals(39, Node.EMPTY_BLOCK);
583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
584:       assertEquals(50, Node.FREE_CALL);
585:       assertEquals(2, Node.POST_FLAG);
586:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
587:       assertEquals(47, Node.IS_DISPATCHER);
588:       assertEquals(46, Node.IS_NAMESPACE);
589:       assertEquals(40, Node.ORIGINALNAME_PROP);
590:       assertEquals(30, Node.VAR_ARGS_NAME);
591:       assertEquals(49, Node.DIRECT_EVAL);
592:       assertEquals(57, Node.LAST_PROP);
593:       assertEquals(54, Node.SLASH_V);
594:       assertEquals(51, Node.STATIC_SOURCE_FILE);
595:       assertEquals(12, Node.COLUMN_BITS);
596:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
597:       assertEquals(32, Node.INCRDECR_PROP);
598:       assertEquals(52, Node.LENGTH);
599:       assertEquals(1, Node.DECR_FLAG);
600:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
601:       assertEquals(15, Node.NO_SIDE_EFFECTS);
602:       assertEquals(29, Node.JSDOC_INFO_PROP);
603:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
604:       assertEquals(56, Node.CHANGE_TIME);
605:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
606:       assertEquals(8, Node.FLAG_NO_THROWS);
607:       assertEquals(57, Node.REFLECTED_OBJECT);
608:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
609:       assertEquals(4095, Node.COLUMN_MASK);
610:       assertEquals(37, Node.OPT_ARG_NAME);
611:       assertEquals(48, Node.DIRECTIVES);
612:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
613:       assertEquals(40, Node.ORIGINALNAME_PROP);
614:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
615:       assertEquals(48, Node.DIRECTIVES);
616:       assertEquals(39, Node.EMPTY_BLOCK);
617:       assertEquals(54, Node.SLASH_V);
618:       assertEquals(57, Node.REFLECTED_OBJECT);
619:       assertEquals(52, Node.LENGTH);
620:       assertEquals(8, Node.FLAG_NO_THROWS);
621:       assertEquals(50, Node.FREE_CALL);
622:       assertEquals(1, Node.DECR_FLAG);
623:       assertEquals(12, Node.COLUMN_BITS);
624:       assertEquals(49, Node.DIRECT_EVAL);
625:       assertEquals(32, Node.INCRDECR_PROP);
626:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
627:       assertEquals(37, Node.OPT_ARG_NAME);
628:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
629:       assertEquals(4095, Node.COLUMN_MASK);
630:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
631:       assertEquals(29, Node.JSDOC_INFO_PROP);
632:       assertEquals(56, Node.CHANGE_TIME);
633:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
634:       assertEquals(53, Node.INPUT_ID);
635:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
636:       assertEquals(46, Node.IS_NAMESPACE);
637:       assertEquals(51, Node.STATIC_SOURCE_FILE);
638:       assertEquals(36, Node.QUOTED_PROP);
639:       assertEquals(55, Node.INFERRED_FUNCTION);
640:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
641:       assertEquals(43, Node.IS_CONSTANT_NAME);
642:       assertEquals(15, Node.NO_SIDE_EFFECTS);
643:       assertEquals(57, Node.LAST_PROP);
644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
645:       assertEquals(47, Node.IS_DISPATCHER);
646:       assertEquals(30, Node.VAR_ARGS_NAME);
647:       assertEquals(2, Node.POST_FLAG);
648:       
649:       byte[] byteArray0 = new byte[6];
650:       byteArray0[0] = (byte)102;
651:       byteArray0[1] = (byte) (-115);
652:       byteArray0[2] = (byte) (-12);
653:       byteArray0[3] = (byte)116;
654:       byteArray0[4] = (byte)0;
655:       byteArray0[5] = (byte)15;
656:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
657:       assertFalse(boolean0);
658:       assertEquals(6, byteArray0.length);
659:       assertArrayEquals(new byte[] {(byte)102, (byte) (-115), (byte) (-12), (byte)116, (byte)0, (byte)15}, byteArray0);
660:       
661:       Iterable<Node> iterable0 = node2.children();
662:       assertFalse(iterable0.contains(node2));
663:       assertFalse(node0.isName());
664:       assertFalse(node0.isCall());
665:       assertFalse(node0.isSetterDef());
666:       assertFalse(node0.isParamList());
667:       assertFalse(node0.isStringKey());
668:       assertFalse(node0.isNull());
669:       assertFalse(node0.isDo());
670:       assertFalse(node0.isDefaultCase());
671:       assertFalse(node0.isContinue());
672:       assertFalse(node0.isAdd());
673:       assertFalse(node0.isNew());
674:       assertEquals(0, node0.getChildCount());
675:       assertFalse(node0.isAssignAdd());
676:       assertFalse(node0.isFunction());
677:       assertFalse(node0.isVar());
678:       assertEquals(40, node0.getType());
679:       assertFalse(node0.isLabel());
680:       assertFalse(node0.isGetterDef());
681:       assertFalse(node0.isLabelName());
682:       assertFalse(node0.isNumber());
683:       assertFalse(node0.isIf());
684:       assertFalse(node0.isArrayLit());
685:       assertFalse(node0.hasOneChild());
686:       assertEquals((-1), node0.getLineno());
687:       assertFalse(node0.isIn());
688:       assertFalse(node0.isNE());
689:       assertFalse(node0.isRegExp());
690:       assertFalse(node0.isWith());
691:       assertFalse(node0.isCatch());
692:       assertFalse(node0.isCase());
693:       assertFalse(node0.isScript());
694:       assertFalse(node0.isTry());
695:       assertFalse(node0.isInstanceOf());
696:       assertTrue(node0.isString());
697:       assertFalse(node0.hasMoreThanOneChild());
698:       assertFalse(node0.isThis());
699:       assertFalse(node0.isBlock());
700:       assertFalse(node0.isFor());
701:       assertFalse(node0.isHook());
702:       assertFalse(node0.isFalse());
703:       assertFalse(node0.isBreak());
704:       assertFalse(node0.isGetProp());
705:       assertFalse(node0.isAnd());
706:       assertFalse(node0.isObjectLit());
707:       assertEquals((-1), node0.getCharno());
708:       assertFalse(node0.isSwitch());
709:       assertFalse(node0.isInc());
710:       assertFalse(node0.isThrow());
711:       assertFalse(node0.isDelProp());
712:       assertFalse(node0.isEmpty());
713:       assertFalse(node0.isAssign());
714:       assertFalse(node0.isDec());
715:       assertFalse(node0.isTypeOf());
716:       assertFalse(node0.isCast());
717:       assertFalse(node0.isGetElem());
718:       assertFalse(node0.isOr());
719:       assertFalse(node0.isDebugger());
720:       assertFalse(node0.isTrue());
721:       assertEquals((-1), node0.getSourcePosition());
722:       assertFalse(node0.isWhile());
723:       assertFalse(node0.isNot());
724:       assertFalse(node0.isExprResult());
725:       assertFalse(node0.isVoid());
726:       assertFalse(node0.isReturn());
727:       assertFalse(node0.isComma());
728:       assertFalse(node0.hasChildren());
729:       assertFalse(node1.isNew());
730:       assertFalse(node1.isWhile());
731:       assertFalse(node1.isVar());
732:       assertFalse(node1.isBlock());
733:       assertFalse(node1.isContinue());
734:       assertFalse(node1.isStringKey());
735:       assertFalse(node1.hasMoreThanOneChild());
736:       assertFalse(node1.isName());
737:       assertEquals((-1), node1.getLineno());
738:       assertFalse(node1.isCall());
739:       assertFalse(node1.isParamList());
740:       assertFalse(node1.isNumber());
741:       assertFalse(node1.isTypeOf());
742:       assertFalse(node1.isDec());
743:       assertEquals((-1), node1.getSourcePosition());
744:       assertFalse(node1.isReturn());
745:       assertFalse(node1.isDebugger());
746:       assertFalse(node1.isTry());
747:       assertFalse(node1.isFunction());
748:       assertFalse(node1.isRegExp());
749:       assertFalse(node1.isAnd());
750:       assertFalse(node1.isWith());
751:       assertFalse(node1.isInstanceOf());
752:       assertFalse(node1.isCatch());
753:       assertFalse(node1.isCast());
754:       assertFalse(node1.isIf());
755:       assertFalse(node1.isNE());
756:       assertFalse(node1.isThrow());
757:       assertFalse(node1.isIn());
758:       assertFalse(node1.isSetterDef());
759:       assertFalse(node1.isInc());
760:       assertEquals((-1), node1.getCharno());
761:       assertEquals(2271, node1.getType());
762:       assertFalse(node1.isSwitch());
763:       assertFalse(node1.isHook());
764:       assertFalse(node1.isFalse());
765:       assertFalse(node1.isBreak());
766:       assertTrue(node1.hasChildren());
767:       assertFalse(node1.isGetProp());
768:       assertFalse(node1.isComma());
769:       assertFalse(node1.isGetterDef());
770:       assertEquals(1, node1.getChildCount());
771:       assertFalse(node1.isFor());
772:       assertFalse(node1.isThis());
773:       assertTrue(node1.hasOneChild());
774:       assertFalse(node1.isCase());
775:       assertFalse(node1.isNot());
776:       assertFalse(node1.isObjectLit());
777:       assertFalse(node1.isString());
778:       assertFalse(node1.isScript());
779:       assertFalse(node1.isVoid());
780:       assertFalse(node1.isDefaultCase());
781:       assertFalse(node1.isTrue());
782:       assertFalse(node1.isLabelName());
783:       assertFalse(node1.isAssign());
784:       assertFalse(node1.isDelProp());
785:       assertFalse(node1.isArrayLit());
786:       assertFalse(node1.isExprResult());
787:       assertFalse(node1.isGetElem());
788:       assertFalse(node1.isAssignAdd());
789:       assertFalse(node1.isOr());
790:       assertFalse(node1.isLabel());
791:       assertFalse(node1.isNull());
792:       assertFalse(node1.isDo());
793:       assertFalse(node1.isEmpty());
794:       assertFalse(node1.isAdd());
795:       assertFalse(node2.isIf());
796:       assertFalse(node2.isNE());
797:       assertFalse(node2.isEmpty());
798:       assertFalse(node2.isDelProp());
799:       assertFalse(node2.isArrayLit());
800:       assertFalse(node2.isFor());
801:       assertFalse(node2.isRegExp());
802:       assertFalse(node2.isDefaultCase());
803:       assertFalse(node2.isInc());
804:       assertFalse(node2.isTrue());
805:       assertFalse(node2.isVoid());
806:       assertFalse(node2.isIn());
807:       assertFalse(node2.isNull());
808:       assertFalse(node2.isSetterDef());
809:       assertFalse(node2.isName());
810:       assertFalse(node2.isGetProp());
811:       assertFalse(node2.isBreak());
812:       assertFalse(node2.isCall());
813:       assertFalse(node2.isThrow());
814:       assertEquals(40, node2.getType());
815:       assertFalse(node2.isFalse());
816:       assertFalse(node2.isComma());
817:       assertFalse(node2.isFunction());
818:       assertFalse(node2.isWhile());
819:       assertFalse(node2.isAnd());
820:       assertFalse(node2.isNot());
821:       assertFalse(node2.isDebugger());
822:       assertFalse(node2.isObjectLit());
823:       assertEquals((-1), node2.getSourcePosition());
824:       assertFalse(node2.isTypeOf());
825:       assertFalse(node2.isNumber());
826:       assertFalse(node2.isAssignAdd());
827:       assertFalse(node2.isLabelName());
828:       assertFalse(node2.isGetElem());
829:       assertEquals((-1), node2.getLineno());
830:       assertFalse(node2.hasMoreThanOneChild());
831:       assertFalse(node2.isContinue());
832:       assertFalse(node2.isCast());
833:       assertFalse(node2.isLabel());
834:       assertFalse(node2.isReturn());
835:       assertFalse(node2.hasChildren());
836:       assertFalse(node2.isAssign());
837:       assertFalse(node2.isDec());
838:       assertFalse(node2.isExprResult());
839:       assertFalse(node2.isAdd());
840:       assertFalse(node2.isDo());
841:       assertFalse(node2.isNew());
842:       assertFalse(node2.isOr());
843:       assertFalse(node2.isThis());
844:       assertFalse(node2.isParamList());
845:       assertFalse(node2.isVar());
846:       assertFalse(node2.isHook());
847:       assertFalse(node2.isCatch());
848:       assertFalse(node2.isInstanceOf());
849:       assertFalse(node2.isBlock());
850:       assertFalse(node2.isWith());
851:       assertEquals(0, node2.getChildCount());
852:       assertFalse(node2.isScript());
853:       assertFalse(node2.isSwitch());
854:       assertFalse(node2.isTry());
855:       assertFalse(node2.isCase());
856:       assertTrue(node2.isString());
857:       assertFalse(node2.hasOneChild());
858:       assertFalse(node2.isStringKey());
859:       assertFalse(node2.isGetterDef());
860:       assertEquals((-1), node2.getCharno());
861:       assertNotNull(iterable0);
862:       assertSame(node0, node2);
863:       assertSame(node2, node0);
864:       assertFalse(node0.equals((Object)node1));
865:       assertFalse(node1.equals((Object)node2));
866:       assertFalse(node1.equals((Object)node0));
867:       assertFalse(node2.equals((Object)node1));
868:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
869:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
870:       assertEquals(29, Node.JSDOC_INFO_PROP);
871:       assertEquals(53, Node.INPUT_ID);
872:       assertEquals(2, Node.POST_FLAG);
873:       assertEquals(47, Node.IS_DISPATCHER);
874:       assertEquals(55, Node.INFERRED_FUNCTION);
875:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
876:       assertEquals(4095, Node.COLUMN_MASK);
877:       assertEquals(49, Node.DIRECT_EVAL);
878:       assertEquals(48, Node.DIRECTIVES);
879:       assertEquals(15, Node.NO_SIDE_EFFECTS);
880:       assertEquals(37, Node.OPT_ARG_NAME);
881:       assertEquals(8, Node.FLAG_NO_THROWS);
882:       assertEquals(39, Node.EMPTY_BLOCK);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
885:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
886:       assertEquals(52, Node.LENGTH);
887:       assertEquals(36, Node.QUOTED_PROP);
888:       assertEquals(40, Node.ORIGINALNAME_PROP);
889:       assertEquals(57, Node.REFLECTED_OBJECT);
890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
891:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
892:       assertEquals(57, Node.LAST_PROP);
893:       assertEquals(30, Node.VAR_ARGS_NAME);
894:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
895:       assertEquals(12, Node.COLUMN_BITS);
896:       assertEquals(32, Node.INCRDECR_PROP);
897:       assertEquals(1, Node.DECR_FLAG);
898:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
899:       assertEquals(54, Node.SLASH_V);
900:       assertEquals(43, Node.IS_CONSTANT_NAME);
901:       assertEquals(46, Node.IS_NAMESPACE);
902:       assertEquals(50, Node.FREE_CALL);
903:       assertEquals(51, Node.STATIC_SOURCE_FILE);
904:       assertEquals(43, Node.IS_CONSTANT_NAME);
905:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
906:       assertEquals(36, Node.QUOTED_PROP);
907:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
908:       assertEquals(55, Node.INFERRED_FUNCTION);
909:       assertEquals(53, Node.INPUT_ID);
910:       assertEquals(39, Node.EMPTY_BLOCK);
911:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
912:       assertEquals(50, Node.FREE_CALL);
913:       assertEquals(2, Node.POST_FLAG);
914:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
915:       assertEquals(47, Node.IS_DISPATCHER);
916:       assertEquals(46, Node.IS_NAMESPACE);
917:       assertEquals(40, Node.ORIGINALNAME_PROP);
918:       assertEquals(30, Node.VAR_ARGS_NAME);
919:       assertEquals(49, Node.DIRECT_EVAL);
920:       assertEquals(57, Node.LAST_PROP);
921:       assertEquals(54, Node.SLASH_V);
922:       assertEquals(51, Node.STATIC_SOURCE_FILE);
923:       assertEquals(12, Node.COLUMN_BITS);
924:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
925:       assertEquals(32, Node.INCRDECR_PROP);
926:       assertEquals(52, Node.LENGTH);
927:       assertEquals(1, Node.DECR_FLAG);
928:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
929:       assertEquals(15, Node.NO_SIDE_EFFECTS);
930:       assertEquals(29, Node.JSDOC_INFO_PROP);
931:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
932:       assertEquals(56, Node.CHANGE_TIME);
933:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
934:       assertEquals(8, Node.FLAG_NO_THROWS);
935:       assertEquals(57, Node.REFLECTED_OBJECT);
936:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
937:       assertEquals(4095, Node.COLUMN_MASK);
938:       assertEquals(37, Node.OPT_ARG_NAME);
939:       assertEquals(48, Node.DIRECTIVES);
940:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
941:       assertEquals(40, Node.ORIGINALNAME_PROP);
942:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
943:       assertEquals(48, Node.DIRECTIVES);
944:       assertEquals(39, Node.EMPTY_BLOCK);
945:       assertEquals(54, Node.SLASH_V);
946:       assertEquals(57, Node.REFLECTED_OBJECT);
947:       assertEquals(52, Node.LENGTH);
948:       assertEquals(8, Node.FLAG_NO_THROWS);
949:       assertEquals(50, Node.FREE_CALL);
950:       assertEquals(1, Node.DECR_FLAG);
951:       assertEquals(12, Node.COLUMN_BITS);
952:       assertEquals(49, Node.DIRECT_EVAL);
953:       assertEquals(32, Node.INCRDECR_PROP);
954:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
955:       assertEquals(37, Node.OPT_ARG_NAME);
956:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
957:       assertEquals(4095, Node.COLUMN_MASK);
958:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
959:       assertEquals(29, Node.JSDOC_INFO_PROP);
960:       assertEquals(56, Node.CHANGE_TIME);
961:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
962:       assertEquals(53, Node.INPUT_ID);
963:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
964:       assertEquals(46, Node.IS_NAMESPACE);
965:       assertEquals(51, Node.STATIC_SOURCE_FILE);
966:       assertEquals(36, Node.QUOTED_PROP);
967:       assertEquals(55, Node.INFERRED_FUNCTION);
968:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
969:       assertEquals(43, Node.IS_CONSTANT_NAME);
970:       assertEquals(15, Node.NO_SIDE_EFFECTS);
971:       assertEquals(57, Node.LAST_PROP);
972:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
973:       assertEquals(47, Node.IS_DISPATCHER);
974:       assertEquals(30, Node.VAR_ARGS_NAME);
975:       assertEquals(2, Node.POST_FLAG);
976:       
977:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
978:       assertFalse(node0.isName());
979:       assertFalse(node0.isCall());
980:       assertFalse(node0.isSetterDef());
981:       assertFalse(node0.isParamList());
982:       assertFalse(node0.isStringKey());
983:       assertFalse(node0.isNull());
984:       assertFalse(node0.isDo());
985:       assertFalse(node0.isDefaultCase());
986:       assertFalse(node0.isContinue());
987:       assertFalse(node0.isAdd());
988:       assertFalse(node0.isNew());
989:       assertEquals(0, node0.getChildCount());
990:       assertFalse(node0.isAssignAdd());
991:       assertFalse(node0.isFunction());
992:       assertFalse(node0.isVar());
993:       assertEquals(40, node0.getType());
994:       assertFalse(node0.isLabel());
995:       assertFalse(node0.isGetterDef());
996:       assertFalse(node0.isLabelName());
997:       assertFalse(node0.isNumber());
998:       assertFalse(node0.isIf());
999:       assertFalse(node0.isArrayLit());
1000:       assertFalse(node0.hasOneChild());
1001:       assertEquals((-1), node0.getLineno());
1002:       assertFalse(node0.isIn());
1003:       assertFalse(node0.isNE());
1004:       assertFalse(node0.isRegExp());
1005:       assertFalse(node0.isWith());
1006:       assertFalse(node0.isCatch());
1007:       assertFalse(node0.isCase());
1008:       assertFalse(node0.isScript());
1009:       assertFalse(node0.isTry());
1010:       assertFalse(node0.isInstanceOf());
1011:       assertTrue(node0.isString());
1012:       assertFalse(node0.hasMoreThanOneChild());
1013:       assertFalse(node0.isThis());
1014:       assertFalse(node0.isBlock());
1015:       assertFalse(node0.isFor());
1016:       assertFalse(node0.isHook());
1017:       assertFalse(node0.isFalse());
1018:       assertFalse(node0.isBreak());
1019:       assertFalse(node0.isGetProp());
1020:       assertFalse(node0.isAnd());
1021:       assertFalse(node0.isObjectLit());
1022:       assertEquals((-1), node0.getCharno());
1023:       assertFalse(node0.isSwitch());
1024:       assertFalse(node0.isInc());
1025:       assertFalse(node0.isThrow());
1026:       assertFalse(node0.isDelProp());
1027:       assertFalse(node0.isEmpty());
1028:       assertFalse(node0.isAssign());
1029:       assertFalse(node0.isDec());
1030:       assertFalse(node0.isTypeOf());
1031:       assertFalse(node0.isCast());
1032:       assertFalse(node0.isGetElem());
1033:       assertFalse(node0.isOr());
1034:       assertFalse(node0.isDebugger());
1035:       assertFalse(node0.isTrue());
1036:       assertEquals((-1), node0.getSourcePosition());
1037:       assertFalse(node0.isWhile());
1038:       assertFalse(node0.isNot());
1039:       assertFalse(node0.isExprResult());
1040:       assertFalse(node0.isVoid());
1041:       assertFalse(node0.isReturn());
1042:       assertFalse(node0.isComma());
1043:       assertFalse(node0.hasChildren());
1044:       assertFalse(node1.isNew());
1045:       assertFalse(node1.isWhile());
1046:       assertFalse(node1.isVar());
1047:       assertFalse(node1.isBlock());
1048:       assertFalse(node1.isContinue());
1049:       assertFalse(node1.isStringKey());
1050:       assertFalse(node1.hasMoreThanOneChild());
1051:       assertFalse(node1.isName());
1052:       assertEquals((-1), node1.getLineno());
1053:       assertFalse(node1.isCall());
1054:       assertFalse(node1.isParamList());
1055:       assertFalse(node1.isNumber());
1056:       assertFalse(node1.isTypeOf());
1057:       assertFalse(node1.isDec());
1058:       assertEquals((-1), node1.getSourcePosition());
1059:       assertFalse(node1.isReturn());
1060:       assertFalse(node1.isDebugger());
1061:       assertFalse(node1.isTry());
1062:       assertFalse(node1.isFunction());
1063:       assertFalse(node1.isRegExp());
1064:       assertFalse(node1.isAnd());
1065:       assertFalse(node1.isWith());
1066:       assertFalse(node1.isInstanceOf());
1067:       assertFalse(node1.isCatch());
1068:       assertFalse(node1.isCast());
1069:       assertFalse(node1.isIf());
1070:       assertFalse(node1.isNE());
1071:       assertFalse(node1.isThrow());
1072:       assertFalse(node1.isIn());
1073:       assertFalse(node1.isSetterDef());
1074:       assertFalse(node1.isInc());
1075:       assertEquals((-1), node1.getCharno());
1076:       assertEquals(2271, node1.getType());
1077:       assertFalse(node1.isSwitch());
1078:       assertFalse(node1.isHook());
1079:       assertFalse(node1.isFalse());
1080:       assertFalse(node1.isBreak());
1081:       assertTrue(node1.hasChildren());
1082:       assertFalse(node1.isGetProp());
1083:       assertFalse(node1.isComma());
1084:       assertFalse(node1.isGetterDef());
1085:       assertEquals(1, node1.getChildCount());
1086:       assertFalse(node1.isFor());
1087:       assertFalse(node1.isThis());
1088:       assertTrue(node1.hasOneChild());
1089:       assertFalse(node1.isCase());
1090:       assertFalse(node1.isNot());
1091:       assertFalse(node1.isObjectLit());
1092:       assertFalse(node1.isString());
1093:       assertFalse(node1.isScript());
1094:       assertFalse(node1.isVoid());
1095:       assertFalse(node1.isDefaultCase());
1096:       assertFalse(node1.isTrue());
1097:       assertFalse(node1.isLabelName());
1098:       assertFalse(node1.isAssign());
1099:       assertFalse(node1.isDelProp());
1100:       assertFalse(node1.isArrayLit());
1101:       assertFalse(node1.isExprResult());
1102:       assertFalse(node1.isGetElem());
1103:       assertFalse(node1.isAssignAdd());
1104:       assertFalse(node1.isOr());
1105:       assertFalse(node1.isLabel());
1106:       assertFalse(node1.isNull());
1107:       assertFalse(node1.isDo());
1108:       assertFalse(node1.isEmpty());
1109:       assertFalse(node1.isAdd());
1110:       assertNotNull(node_NodeMismatch0);
1111:       assertSame(node0, node2);
1112:       assertFalse(node0.equals((Object)node1));
1113:       assertFalse(node1.equals((Object)node2));
1114:       assertFalse(node1.equals((Object)node0));
1115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1117:       assertEquals(29, Node.JSDOC_INFO_PROP);
1118:       assertEquals(53, Node.INPUT_ID);
1119:       assertEquals(2, Node.POST_FLAG);
1120:       assertEquals(47, Node.IS_DISPATCHER);
1121:       assertEquals(55, Node.INFERRED_FUNCTION);
1122:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1123:       assertEquals(4095, Node.COLUMN_MASK);
1124:       assertEquals(49, Node.DIRECT_EVAL);
1125:       assertEquals(48, Node.DIRECTIVES);
1126:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1127:       assertEquals(37, Node.OPT_ARG_NAME);
1128:       assertEquals(8, Node.FLAG_NO_THROWS);
1129:       assertEquals(39, Node.EMPTY_BLOCK);
1130:       assertEquals(56, Node.CHANGE_TIME);
1131:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1133:       assertEquals(52, Node.LENGTH);
1134:       assertEquals(36, Node.QUOTED_PROP);
1135:       assertEquals(40, Node.ORIGINALNAME_PROP);
1136:       assertEquals(57, Node.REFLECTED_OBJECT);
1137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1139:       assertEquals(57, Node.LAST_PROP);
1140:       assertEquals(30, Node.VAR_ARGS_NAME);
1141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1142:       assertEquals(12, Node.COLUMN_BITS);
1143:       assertEquals(32, Node.INCRDECR_PROP);
1144:       assertEquals(1, Node.DECR_FLAG);
1145:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1146:       assertEquals(54, Node.SLASH_V);
1147:       assertEquals(43, Node.IS_CONSTANT_NAME);
1148:       assertEquals(46, Node.IS_NAMESPACE);
1149:       assertEquals(50, Node.FREE_CALL);
1150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1151:       assertEquals(43, Node.IS_CONSTANT_NAME);
1152:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1153:       assertEquals(36, Node.QUOTED_PROP);
1154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1155:       assertEquals(55, Node.INFERRED_FUNCTION);
1156:       assertEquals(53, Node.INPUT_ID);
1157:       assertEquals(39, Node.EMPTY_BLOCK);
1158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1159:       assertEquals(50, Node.FREE_CALL);
1160:       assertEquals(2, Node.POST_FLAG);
1161:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1162:       assertEquals(47, Node.IS_DISPATCHER);
1163:       assertEquals(46, Node.IS_NAMESPACE);
1164:       assertEquals(40, Node.ORIGINALNAME_PROP);
1165:       assertEquals(30, Node.VAR_ARGS_NAME);
1166:       assertEquals(49, Node.DIRECT_EVAL);
1167:       assertEquals(57, Node.LAST_PROP);
1168:       assertEquals(54, Node.SLASH_V);
1169:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1170:       assertEquals(12, Node.COLUMN_BITS);
1171:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1172:       assertEquals(32, Node.INCRDECR_PROP);
1173:       assertEquals(52, Node.LENGTH);
1174:       assertEquals(1, Node.DECR_FLAG);
1175:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1176:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1177:       assertEquals(29, Node.JSDOC_INFO_PROP);
1178:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1179:       assertEquals(56, Node.CHANGE_TIME);
1180:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1181:       assertEquals(8, Node.FLAG_NO_THROWS);
1182:       assertEquals(57, Node.REFLECTED_OBJECT);
1183:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1184:       assertEquals(4095, Node.COLUMN_MASK);
1185:       assertEquals(37, Node.OPT_ARG_NAME);
1186:       assertEquals(48, Node.DIRECTIVES);
1187:       
1188:       node1.setType(2);
1189:       assertFalse(node0.isName());
1190:       assertFalse(node0.isCall());
1191:       assertFalse(node0.isSetterDef());
1192:       assertFalse(node0.isParamList());
1193:       assertFalse(node0.isStringKey());
1194:       assertFalse(node0.isNull());
1195:       assertFalse(node0.isDo());
1196:       assertFalse(node0.isDefaultCase());
1197:       assertFalse(node0.isContinue());
1198:       assertFalse(node0.isAdd());
1199:       assertFalse(node0.isNew());
1200:       assertEquals(0, node0.getChildCount());
1201:       assertFalse(node0.isAssignAdd());
1202:       assertFalse(node0.isFunction());
1203:       assertFalse(node0.isVar());
1204:       assertEquals(40, node0.getType());
1205:       assertFalse(node0.isLabel());
1206:       assertFalse(node0.isGetterDef());
1207:       assertFalse(node0.isLabelName());
1208:       assertFalse(node0.isNumber());
1209:       assertFalse(node0.isIf());
1210:       assertFalse(node0.isArrayLit());
1211:       assertFalse(node0.hasOneChild());
1212:       assertEquals((-1), node0.getLineno());
1213:       assertFalse(node0.isIn());
1214:       assertFalse(node0.isNE());
1215:       assertFalse(node0.isRegExp());
1216:       assertFalse(node0.isWith());
1217:       assertFalse(node0.isCatch());
1218:       assertFalse(node0.isCase());
1219:       assertFalse(node0.isScript());
1220:       assertFalse(node0.isTry());
1221:       assertFalse(node0.isInstanceOf());
1222:       assertTrue(node0.isString());
1223:       assertFalse(node0.hasMoreThanOneChild());
1224:       assertFalse(node0.isThis());
1225:       assertFalse(node0.isBlock());
1226:       assertFalse(node0.isFor());
1227:       assertFalse(node0.isHook());
1228:       assertFalse(node0.isFalse());
1229:       assertFalse(node0.isBreak());
1230:       assertFalse(node0.isGetProp());
1231:       assertFalse(node0.isAnd());
1232:       assertFalse(node0.isObjectLit());
1233:       assertEquals((-1), node0.getCharno());
1234:       assertFalse(node0.isSwitch());
1235:       assertFalse(node0.isInc());
1236:       assertFalse(node0.isThrow());
1237:       assertFalse(node0.isDelProp());
1238:       assertFalse(node0.isEmpty());
1239:       assertFalse(node0.isAssign());
1240:       assertFalse(node0.isDec());
1241:       assertFalse(node0.isTypeOf());
1242:       assertFalse(node0.isCast());
1243:       assertFalse(node0.isGetElem());
1244:       assertFalse(node0.isOr());
1245:       assertFalse(node0.isDebugger());
1246:       assertFalse(node0.isTrue());
1247:       assertEquals((-1), node0.getSourcePosition());
1248:       assertFalse(node0.isWhile());
1249:       assertFalse(node0.isNot());
1250:       assertFalse(node0.isExprResult());
1251:       assertFalse(node0.isVoid());
1252:       assertFalse(node0.isReturn());
1253:       assertFalse(node0.isComma());
1254:       assertFalse(node0.hasChildren());
1255:       assertEquals(2, node1.getType());
1256:       assertFalse(node1.isNew());
1257:       assertFalse(node1.isWhile());
1258:       assertFalse(node1.isVar());
1259:       assertFalse(node1.isBlock());
1260:       assertFalse(node1.isContinue());
1261:       assertFalse(node1.isStringKey());
1262:       assertFalse(node1.hasMoreThanOneChild());
1263:       assertFalse(node1.isName());
1264:       assertEquals((-1), node1.getLineno());
1265:       assertFalse(node1.isCall());
1266:       assertFalse(node1.isParamList());
1267:       assertFalse(node1.isNumber());
1268:       assertFalse(node1.isTypeOf());
1269:       assertFalse(node1.isDec());
1270:       assertEquals((-1), node1.getSourcePosition());
1271:       assertFalse(node1.isReturn());
1272:       assertFalse(node1.isDebugger());
1273:       assertFalse(node1.isTry());
1274:       assertFalse(node1.isFunction());
1275:       assertFalse(node1.isRegExp());
1276:       assertFalse(node1.isAnd());
1277:       assertFalse(node1.isWith());
1278:       assertFalse(node1.isInstanceOf());
1279:       assertFalse(node1.isCatch());
1280:       assertFalse(node1.isCast());
1281:       assertFalse(node1.isIf());
1282:       assertFalse(node1.isNE());
1283:       assertFalse(node1.isThrow());
1284:       assertFalse(node1.isIn());
1285:       assertFalse(node1.isSetterDef());
1286:       assertFalse(node1.isInc());
1287:       assertEquals((-1), node1.getCharno());
1288:       assertFalse(node1.isSwitch());
1289:       assertFalse(node1.isHook());
1290:       assertFalse(node1.isFalse());
1291:       assertFalse(node1.isBreak());
1292:       assertTrue(node1.hasChildren());
1293:       assertFalse(node1.isGetProp());
1294:       assertFalse(node1.isComma());
1295:       assertFalse(node1.isGetterDef());
1296:       assertEquals(1, node1.getChildCount());
1297:       assertFalse(node1.isFor());
1298:       assertFalse(node1.isThis());
1299:       assertTrue(node1.hasOneChild());
1300:       assertFalse(node1.isCase());
1301:       assertFalse(node1.isNot());
1302:       assertFalse(node1.isObjectLit());
1303:       assertFalse(node1.isString());
1304:       assertFalse(node1.isScript());
1305:       assertFalse(node1.isVoid());
1306:       assertFalse(node1.isDefaultCase());
1307:       assertFalse(node1.isTrue());
1308:       assertFalse(node1.isLabelName());
1309:       assertFalse(node1.isAssign());
1310:       assertFalse(node1.isDelProp());
1311:       assertFalse(node1.isArrayLit());
1312:       assertFalse(node1.isExprResult());
1313:       assertFalse(node1.isGetElem());
1314:       assertFalse(node1.isAssignAdd());
1315:       assertFalse(node1.isOr());
1316:       assertFalse(node1.isLabel());
1317:       assertFalse(node1.isNull());
1318:       assertFalse(node1.isDo());
1319:       assertFalse(node1.isEmpty());
1320:       assertFalse(node1.isAdd());
1321:       assertSame(node0, node2);
1322:       assertFalse(node0.equals((Object)node1));
1323:       assertFalse(node1.equals((Object)node2));
1324:       assertFalse(node1.equals((Object)node0));
1325:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1327:       assertEquals(29, Node.JSDOC_INFO_PROP);
1328:       assertEquals(53, Node.INPUT_ID);
1329:       assertEquals(2, Node.POST_FLAG);
1330:       assertEquals(47, Node.IS_DISPATCHER);
1331:       assertEquals(55, Node.INFERRED_FUNCTION);
1332:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1333:       assertEquals(4095, Node.COLUMN_MASK);
1334:       assertEquals(49, Node.DIRECT_EVAL);
1335:       assertEquals(48, Node.DIRECTIVES);
1336:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1337:       assertEquals(37, Node.OPT_ARG_NAME);
1338:       assertEquals(8, Node.FLAG_NO_THROWS);
1339:       assertEquals(39, Node.EMPTY_BLOCK);
1340:       assertEquals(56, Node.CHANGE_TIME);
1341:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1342:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1343:       assertEquals(52, Node.LENGTH);
1344:       assertEquals(36, Node.QUOTED_PROP);
1345:       assertEquals(40, Node.ORIGINALNAME_PROP);
1346:       assertEquals(57, Node.REFLECTED_OBJECT);
1347:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1348:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1349:       assertEquals(57, Node.LAST_PROP);
1350:       assertEquals(30, Node.VAR_ARGS_NAME);
1351:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1352:       assertEquals(12, Node.COLUMN_BITS);
1353:       assertEquals(32, Node.INCRDECR_PROP);
1354:       assertEquals(1, Node.DECR_FLAG);
1355:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1356:       assertEquals(54, Node.SLASH_V);
1357:       assertEquals(43, Node.IS_CONSTANT_NAME);
1358:       assertEquals(46, Node.IS_NAMESPACE);
1359:       assertEquals(50, Node.FREE_CALL);
1360:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1361:       assertEquals(43, Node.IS_CONSTANT_NAME);
1362:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1363:       assertEquals(36, Node.QUOTED_PROP);
1364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1365:       assertEquals(55, Node.INFERRED_FUNCTION);
1366:       assertEquals(53, Node.INPUT_ID);
1367:       assertEquals(39, Node.EMPTY_BLOCK);
1368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1369:       assertEquals(50, Node.FREE_CALL);
1370:       assertEquals(2, Node.POST_FLAG);
1371:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1372:       assertEquals(47, Node.IS_DISPATCHER);
1373:       assertEquals(46, Node.IS_NAMESPACE);
1374:       assertEquals(40, Node.ORIGINALNAME_PROP);
1375:       assertEquals(30, Node.VAR_ARGS_NAME);
1376:       assertEquals(49, Node.DIRECT_EVAL);
1377:       assertEquals(57, Node.LAST_PROP);
1378:       assertEquals(54, Node.SLASH_V);
1379:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1380:       assertEquals(12, Node.COLUMN_BITS);
1381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1382:       assertEquals(32, Node.INCRDECR_PROP);
1383:       assertEquals(52, Node.LENGTH);
1384:       assertEquals(1, Node.DECR_FLAG);
1385:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1386:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1387:       assertEquals(29, Node.JSDOC_INFO_PROP);
1388:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1389:       assertEquals(56, Node.CHANGE_TIME);
1390:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1391:       assertEquals(8, Node.FLAG_NO_THROWS);
1392:       assertEquals(57, Node.REFLECTED_OBJECT);
1393:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1394:       assertEquals(4095, Node.COLUMN_MASK);
1395:       assertEquals(37, Node.OPT_ARG_NAME);
1396:       assertEquals(48, Node.DIRECTIVES);
1397:       
1398:       node1.putProp(128, "}N>");
1399:       assertFalse(node0.isName());
1400:       assertFalse(node0.isCall());
1401:       assertFalse(node0.isSetterDef());
1402:       assertFalse(node0.isParamList());
1403:       assertFalse(node0.isStringKey());
1404:       assertFalse(node0.isNull());
1405:       assertFalse(node0.isDo());
1406:       assertFalse(node0.isDefaultCase());
1407:       assertFalse(node0.isContinue());
1408:       assertFalse(node0.isAdd());
1409:       assertFalse(node0.isNew());
1410:       assertEquals(0, node0.getChildCount());
1411:       assertFalse(node0.isAssignAdd());
1412:       assertFalse(node0.isFunction());
1413:       assertFalse(node0.isVar());
1414:       assertEquals(40, node0.getType());
1415:       assertFalse(node0.isLabel());
1416:       assertFalse(node0.isGetterDef());
1417:       assertFalse(node0.isLabelName());
1418:       assertFalse(node0.isNumber());
1419:       assertFalse(node0.isIf());
1420:       assertFalse(node0.isArrayLit());
1421:       assertFalse(node0.hasOneChild());
1422:       assertEquals((-1), node0.getLineno());
1423:       assertFalse(node0.isIn());
1424:       assertFalse(node0.isNE());
1425:       assertFalse(node0.isRegExp());
1426:       assertFalse(node0.isWith());
1427:       assertFalse(node0.isCatch());
1428:       assertFalse(node0.isCase());
1429:       assertFalse(node0.isScript());
1430:       assertFalse(node0.isTry());
1431:       assertFalse(node0.isInstanceOf());
1432:       assertTrue(node0.isString());
1433:       assertFalse(node0.hasMoreThanOneChild());
1434:       assertFalse(node0.isThis());
1435:       assertFalse(node0.isBlock());
1436:       assertFalse(node0.isFor());
1437:       assertFalse(node0.isHook());
1438:       assertFalse(node0.isFalse());
1439:       assertFalse(node0.isBreak());
1440:       assertFalse(node0.isGetProp());
1441:       assertFalse(node0.isAnd());
1442:       assertFalse(node0.isObjectLit());
1443:       assertEquals((-1), node0.getCharno());
1444:       assertFalse(node0.isSwitch());
1445:       assertFalse(node0.isInc());
1446:       assertFalse(node0.isThrow());
1447:       assertFalse(node0.isDelProp());
1448:       assertFalse(node0.isEmpty());
1449:       assertFalse(node0.isAssign());
1450:       assertFalse(node0.isDec());
1451:       assertFalse(node0.isTypeOf());
1452:       assertFalse(node0.isCast());
1453:       assertFalse(node0.isGetElem());
1454:       assertFalse(node0.isOr());
1455:       assertFalse(node0.isDebugger());
1456:       assertFalse(node0.isTrue());
1457:       assertEquals((-1), node0.getSourcePosition());
1458:       assertFalse(node0.isWhile());
1459:       assertFalse(node0.isNot());
1460:       assertFalse(node0.isExprResult());
1461:       assertFalse(node0.isVoid());
1462:       assertFalse(node0.isReturn());
1463:       assertFalse(node0.isComma());
1464:       assertFalse(node0.hasChildren());
1465:       assertEquals(2, node1.getType());
1466:       assertFalse(node1.isNew());
1467:       assertFalse(node1.isWhile());
1468:       assertFalse(node1.isVar());
1469:       assertFalse(node1.isBlock());
1470:       assertFalse(node1.isContinue());
1471:       assertFalse(node1.isStringKey());
1472:       assertFalse(node1.hasMoreThanOneChild());
1473:       assertFalse(node1.isName());
1474:       assertEquals((-1), node1.getLineno());
1475:       assertFalse(node1.isCall());
1476:       assertFalse(node1.isParamList());
1477:       assertFalse(node1.isNumber());
1478:       assertFalse(node1.isTypeOf());
1479:       assertFalse(node1.isDec());
1480:       assertEquals((-1), node1.getSourcePosition());
1481:       assertFalse(node1.isReturn());
1482:       assertFalse(node1.isDebugger());
1483:       assertFalse(node1.isTry());
1484:       assertFalse(node1.isFunction());
1485:       assertFalse(node1.isRegExp());
1486:       assertFalse(node1.isAnd());
1487:       assertFalse(node1.isWith());
1488:       assertFalse(node1.isInstanceOf());
1489:       assertFalse(node1.isCatch());
1490:       assertFalse(node1.isCast());
1491:       assertFalse(node1.isIf());
1492:       assertFalse(node1.isNE());
1493:       assertFalse(node1.isThrow());
1494:       assertFalse(node1.isIn());
1495:       assertFalse(node1.isSetterDef());
1496:       assertFalse(node1.isInc());
1497:       assertEquals((-1), node1.getCharno());
1498:       assertFalse(node1.isSwitch());
1499:       assertFalse(node1.isHook());
1500:       assertFalse(node1.isFalse());
1501:       assertFalse(node1.isBreak());
1502:       assertTrue(node1.hasChildren());
1503:       assertFalse(node1.isGetProp());
1504:       assertFalse(node1.isComma());
1505:       assertFalse(node1.isGetterDef());
1506:       assertEquals(1, node1.getChildCount());
1507:       assertFalse(node1.isFor());
1508:       assertFalse(node1.isThis());
1509:       assertTrue(node1.hasOneChild());
1510:       assertFalse(node1.isCase());
1511:       assertFalse(node1.isNot());
1512:       assertFalse(node1.isObjectLit());
1513:       assertFalse(node1.isString());
1514:       assertFalse(node1.isScript());
1515:       assertFalse(node1.isVoid());
1516:       assertFalse(node1.isDefaultCase());
1517:       assertFalse(node1.isTrue());
1518:       assertFalse(node1.isLabelName());
1519:       assertFalse(node1.isAssign());
1520:       assertFalse(node1.isDelProp());
1521:       assertFalse(node1.isArrayLit());
1522:       assertFalse(node1.isExprResult());
1523:       assertFalse(node1.isGetElem());
1524:       assertFalse(node1.isAssignAdd());
1525:       assertFalse(node1.isOr());
1526:       assertFalse(node1.isLabel());
1527:       assertFalse(node1.isNull());
1528:       assertFalse(node1.isDo());
1529:       assertFalse(node1.isEmpty());
1530:       assertFalse(node1.isAdd());
1531:       assertSame(node0, node2);
1532:       assertFalse(node0.equals((Object)node1));
1533:       assertFalse(node1.equals((Object)node2));
1534:       assertFalse(node1.equals((Object)node0));
1535:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1537:       assertEquals(29, Node.JSDOC_INFO_PROP);
1538:       assertEquals(53, Node.INPUT_ID);
1539:       assertEquals(2, Node.POST_FLAG);
1540:       assertEquals(47, Node.IS_DISPATCHER);
1541:       assertEquals(55, Node.INFERRED_FUNCTION);
1542:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1543:       assertEquals(4095, Node.COLUMN_MASK);
1544:       assertEquals(49, Node.DIRECT_EVAL);
1545:       assertEquals(48, Node.DIRECTIVES);
1546:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1547:       assertEquals(37, Node.OPT_ARG_NAME);
1548:       assertEquals(8, Node.FLAG_NO_THROWS);
1549:       assertEquals(39, Node.EMPTY_BLOCK);
1550:       assertEquals(56, Node.CHANGE_TIME);
1551:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1553:       assertEquals(52, Node.LENGTH);
1554:       assertEquals(36, Node.QUOTED_PROP);
1555:       assertEquals(40, Node.ORIGINALNAME_PROP);
1556:       assertEquals(57, Node.REFLECTED_OBJECT);
1557:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1558:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1559:       assertEquals(57, Node.LAST_PROP);
1560:       assertEquals(30, Node.VAR_ARGS_NAME);
1561:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1562:       assertEquals(12, Node.COLUMN_BITS);
1563:       assertEquals(32, Node.INCRDECR_PROP);
1564:       assertEquals(1, Node.DECR_FLAG);
1565:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1566:       assertEquals(54, Node.SLASH_V);
1567:       assertEquals(43, Node.IS_CONSTANT_NAME);
1568:       assertEquals(46, Node.IS_NAMESPACE);
1569:       assertEquals(50, Node.FREE_CALL);
1570:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1571:       assertEquals(43, Node.IS_CONSTANT_NAME);
1572:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1573:       assertEquals(36, Node.QUOTED_PROP);
1574:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1575:       assertEquals(55, Node.INFERRED_FUNCTION);
1576:       assertEquals(53, Node.INPUT_ID);
1577:       assertEquals(39, Node.EMPTY_BLOCK);
1578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1579:       assertEquals(50, Node.FREE_CALL);
1580:       assertEquals(2, Node.POST_FLAG);
1581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1582:       assertEquals(47, Node.IS_DISPATCHER);
1583:       assertEquals(46, Node.IS_NAMESPACE);
1584:       assertEquals(40, Node.ORIGINALNAME_PROP);
1585:       assertEquals(30, Node.VAR_ARGS_NAME);
1586:       assertEquals(49, Node.DIRECT_EVAL);
1587:       assertEquals(57, Node.LAST_PROP);
1588:       assertEquals(54, Node.SLASH_V);
1589:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1590:       assertEquals(12, Node.COLUMN_BITS);
1591:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1592:       assertEquals(32, Node.INCRDECR_PROP);
1593:       assertEquals(52, Node.LENGTH);
1594:       assertEquals(1, Node.DECR_FLAG);
1595:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1596:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1597:       assertEquals(29, Node.JSDOC_INFO_PROP);
1598:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1599:       assertEquals(56, Node.CHANGE_TIME);
1600:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1601:       assertEquals(8, Node.FLAG_NO_THROWS);
1602:       assertEquals(57, Node.REFLECTED_OBJECT);
1603:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1604:       assertEquals(4095, Node.COLUMN_MASK);
1605:       assertEquals(37, Node.OPT_ARG_NAME);
1606:       assertEquals(48, Node.DIRECTIVES);
1607:       
1608:       String string0 = node2.getSourceFileName();
1609:       assertFalse(node0.isName());
1610:       assertFalse(node0.isCall());
1611:       assertFalse(node0.isSetterDef());
1612:       assertFalse(node0.isParamList());
1613:       assertFalse(node0.isStringKey());
1614:       assertFalse(node0.isNull());
1615:       assertFalse(node0.isDo());
1616:       assertFalse(node0.isDefaultCase());
1617:       assertFalse(node0.isContinue());
1618:       assertFalse(node0.isAdd());
1619:       assertFalse(node0.isNew());
1620:       assertEquals(0, node0.getChildCount());
1621:       assertFalse(node0.isAssignAdd());
1622:       assertFalse(node0.isFunction());
1623:       assertFalse(node0.isVar());
1624:       assertEquals(40, node0.getType());
1625:       assertFalse(node0.isLabel());
1626:       assertFalse(node0.isGetterDef());
1627:       assertFalse(node0.isLabelName());
1628:       assertFalse(node0.isNumber());
1629:       assertFalse(node0.isIf());
1630:       assertFalse(node0.isArrayLit());
1631:       assertFalse(node0.hasOneChild());
1632:       assertEquals((-1), node0.getLineno());
1633:       assertFalse(node0.isIn());
1634:       assertFalse(node0.isNE());
1635:       assertFalse(node0.isRegExp());
1636:       assertFalse(node0.isWith());
1637:       assertFalse(node0.isCatch());
1638:       assertFalse(node0.isCase());
1639:       assertFalse(node0.isScript());
1640:       assertFalse(node0.isTry());
1641:       assertFalse(node0.isInstanceOf());
1642:       assertTrue(node0.isString());
1643:       assertFalse(node0.hasMoreThanOneChild());
1644:       assertFalse(node0.isThis());
1645:       assertFalse(node0.isBlock());
1646:       assertFalse(node0.isFor());
1647:       assertFalse(node0.isHook());
1648:       assertFalse(node0.isFalse());
1649:       assertFalse(node0.isBreak());
1650:       assertFalse(node0.isGetProp());
1651:       assertFalse(node0.isAnd());
1652:       assertFalse(node0.isObjectLit());
1653:       assertEquals((-1), node0.getCharno());
1654:       assertFalse(node0.isSwitch());
1655:       assertFalse(node0.isInc());
1656:       assertFalse(node0.isThrow());
1657:       assertFalse(node0.isDelProp());
1658:       assertFalse(node0.isEmpty());
1659:       assertFalse(node0.isAssign());
1660:       assertFalse(node0.isDec());
1661:       assertFalse(node0.isTypeOf());
1662:       assertFalse(node0.isCast());
1663:       assertFalse(node0.isGetElem());
1664:       assertFalse(node0.isOr());
1665:       assertFalse(node0.isDebugger());
1666:       assertFalse(node0.isTrue());
1667:       assertEquals((-1), node0.getSourcePosition());
1668:       assertFalse(node0.isWhile());
1669:       assertFalse(node0.isNot());
1670:       assertFalse(node0.isExprResult());
1671:       assertFalse(node0.isVoid());
1672:       assertFalse(node0.isReturn());
1673:       assertFalse(node0.isComma());
1674:       assertFalse(node0.hasChildren());
1675:       assertEquals(2, node1.getType());
1676:       assertFalse(node1.isNew());
1677:       assertFalse(node1.isWhile());
1678:       assertFalse(node1.isVar());
1679:       assertFalse(node1.isBlock());
1680:       assertFalse(node1.isContinue());
1681:       assertFalse(node1.isStringKey());
1682:       assertFalse(node1.hasMoreThanOneChild());
1683:       assertFalse(node1.isName());
1684:       assertEquals((-1), node1.getLineno());
1685:       assertFalse(node1.isCall());
1686:       assertFalse(node1.isParamList());
1687:       assertFalse(node1.isNumber());
1688:       assertFalse(node1.isTypeOf());
1689:       assertFalse(node1.isDec());
1690:       assertEquals((-1), node1.getSourcePosition());
1691:       assertFalse(node1.isReturn());
1692:       assertFalse(node1.isDebugger());
1693:       assertFalse(node1.isTry());
1694:       assertFalse(node1.isFunction());
1695:       assertFalse(node1.isRegExp());
1696:       assertFalse(node1.isAnd());
1697:       assertFalse(node1.isWith());
1698:       assertFalse(node1.isInstanceOf());
1699:       assertFalse(node1.isCatch());
1700:       assertFalse(node1.isCast());
1701:       assertFalse(node1.isIf());
1702:       assertFalse(node1.isNE());
1703:       assertFalse(node1.isThrow());
1704:       assertFalse(node1.isIn());
1705:       assertFalse(node1.isSetterDef());
1706:       assertFalse(node1.isInc());
1707:       assertEquals((-1), node1.getCharno());
1708:       assertFalse(node1.isSwitch());
1709:       assertFalse(node1.isHook());
1710:       assertFalse(node1.isFalse());
1711:       assertFalse(node1.isBreak());
1712:       assertTrue(node1.hasChildren());
1713:       assertFalse(node1.isGetProp());
1714:       assertFalse(node1.isComma());
1715:       assertFalse(node1.isGetterDef());
1716:       assertEquals(1, node1.getChildCount());
1717:       assertFalse(node1.isFor());
1718:       assertFalse(node1.isThis());
1719:       assertTrue(node1.hasOneChild());
1720:       assertFalse(node1.isCase());
1721:       assertFalse(node1.isNot());
1722:       assertFalse(node1.isObjectLit());
1723:       assertFalse(node1.isString());
1724:       assertFalse(node1.isScript());
1725:       assertFalse(node1.isVoid());
1726:       assertFalse(node1.isDefaultCase());
1727:       assertFalse(node1.isTrue());
1728:       assertFalse(node1.isLabelName());
1729:       assertFalse(node1.isAssign());
1730:       assertFalse(node1.isDelProp());
1731:       assertFalse(node1.isArrayLit());
1732:       assertFalse(node1.isExprResult());
1733:       assertFalse(node1.isGetElem());
1734:       assertFalse(node1.isAssignAdd());
1735:       assertFalse(node1.isOr());
1736:       assertFalse(node1.isLabel());
1737:       assertFalse(node1.isNull());
1738:       assertFalse(node1.isDo());
1739:       assertFalse(node1.isEmpty());
1740:       assertFalse(node1.isAdd());
1741:       assertFalse(node2.isIf());
1742:       assertFalse(node2.isNE());
1743:       assertFalse(node2.isEmpty());
1744:       assertFalse(node2.isDelProp());
1745:       assertFalse(node2.isArrayLit());
1746:       assertFalse(node2.isFor());
1747:       assertFalse(node2.isRegExp());
1748:       assertFalse(node2.isDefaultCase());
1749:       assertFalse(node2.isInc());
1750:       assertFalse(node2.isTrue());
1751:       assertFalse(node2.isVoid());
1752:       assertFalse(node2.isIn());
1753:       assertFalse(node2.isNull());
1754:       assertFalse(node2.isSetterDef());
1755:       assertFalse(node2.isName());
1756:       assertFalse(node2.isGetProp());
1757:       assertFalse(node2.isBreak());
1758:       assertFalse(node2.isCall());
1759:       assertFalse(node2.isThrow());
1760:       assertEquals(40, node2.getType());
1761:       assertFalse(node2.isFalse());
1762:       assertFalse(node2.isComma());
1763:       assertFalse(node2.isFunction());
1764:       assertFalse(node2.isWhile());
1765:       assertFalse(node2.isAnd());
1766:       assertFalse(node2.isNot());
1767:       assertFalse(node2.isDebugger());
1768:       assertFalse(node2.isObjectLit());
1769:       assertEquals((-1), node2.getSourcePosition());
1770:       assertFalse(node2.isTypeOf());
1771:       assertFalse(node2.isNumber());
1772:       assertFalse(node2.isAssignAdd());
1773:       assertFalse(node2.isLabelName());
1774:       assertFalse(node2.isGetElem());
1775:       assertEquals((-1), node2.getLineno());
1776:       assertFalse(node2.hasMoreThanOneChild());
1777:       assertFalse(node2.isContinue());
1778:       assertFalse(node2.isCast());
1779:       assertFalse(node2.isLabel());
1780:       assertFalse(node2.isReturn());
1781:       assertFalse(node2.hasChildren());
1782:       assertFalse(node2.isAssign());
1783:       assertFalse(node2.isDec());
1784:       assertFalse(node2.isExprResult());
1785:       assertFalse(node2.isAdd());
1786:       assertFalse(node2.isDo());
1787:       assertFalse(node2.isNew());
1788:       assertFalse(node2.isOr());
1789:       assertFalse(node2.isThis());
1790:       assertFalse(node2.isParamList());
1791:       assertFalse(node2.isVar());
1792:       assertFalse(node2.isHook());
1793:       assertFalse(node2.isCatch());
1794:       assertFalse(node2.isInstanceOf());
1795:       assertFalse(node2.isBlock());
1796:       assertFalse(node2.isWith());
1797:       assertEquals(0, node2.getChildCount());
1798:       assertFalse(node2.isScript());
1799:       assertFalse(node2.isSwitch());
1800:       assertFalse(node2.isTry());
1801:       assertFalse(node2.isCase());
1802:       assertTrue(node2.isString());
1803:       assertFalse(node2.hasOneChild());
1804:       assertFalse(node2.isStringKey());
1805:       assertFalse(node2.isGetterDef());
1806:       assertEquals((-1), node2.getCharno());
1807:       assertNull(string0);
1808:       assertSame(node0, node2);
1809:       assertSame(node2, node0);
1810:       assertFalse(node0.equals((Object)node1));
1811:       assertFalse(node1.equals((Object)node2));
1812:       assertFalse(node1.equals((Object)node0));
1813:       assertFalse(node2.equals((Object)node1));
1814:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1815:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1816:       assertEquals(29, Node.JSDOC_INFO_PROP);
1817:       assertEquals(53, Node.INPUT_ID);
1818:       assertEquals(2, Node.POST_FLAG);
1819:       assertEquals(47, Node.IS_DISPATCHER);
1820:       assertEquals(55, Node.INFERRED_FUNCTION);
1821:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1822:       assertEquals(4095, Node.COLUMN_MASK);
1823:       assertEquals(49, Node.DIRECT_EVAL);
1824:       assertEquals(48, Node.DIRECTIVES);
1825:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1826:       assertEquals(37, Node.OPT_ARG_NAME);
1827:       assertEquals(8, Node.FLAG_NO_THROWS);
1828:       assertEquals(39, Node.EMPTY_BLOCK);
1829:       assertEquals(56, Node.CHANGE_TIME);
1830:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1831:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1832:       assertEquals(52, Node.LENGTH);
1833:       assertEquals(36, Node.QUOTED_PROP);
1834:       assertEquals(40, Node.ORIGINALNAME_PROP);
1835:       assertEquals(57, Node.REFLECTED_OBJECT);
1836:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1837:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1838:       assertEquals(57, Node.LAST_PROP);
1839:       assertEquals(30, Node.VAR_ARGS_NAME);
1840:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1841:       assertEquals(12, Node.COLUMN_BITS);
1842:       assertEquals(32, Node.INCRDECR_PROP);
1843:       assertEquals(1, Node.DECR_FLAG);
1844:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1845:       assertEquals(54, Node.SLASH_V);
1846:       assertEquals(43, Node.IS_CONSTANT_NAME);
1847:       assertEquals(46, Node.IS_NAMESPACE);
1848:       assertEquals(50, Node.FREE_CALL);
1849:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1850:       assertEquals(43, Node.IS_CONSTANT_NAME);
1851:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1852:       assertEquals(36, Node.QUOTED_PROP);
1853:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1854:       assertEquals(55, Node.INFERRED_FUNCTION);
1855:       assertEquals(53, Node.INPUT_ID);
1856:       assertEquals(39, Node.EMPTY_BLOCK);
1857:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1858:       assertEquals(50, Node.FREE_CALL);
1859:       assertEquals(2, Node.POST_FLAG);
1860:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1861:       assertEquals(47, Node.IS_DISPATCHER);
1862:       assertEquals(46, Node.IS_NAMESPACE);
1863:       assertEquals(40, Node.ORIGINALNAME_PROP);
1864:       assertEquals(30, Node.VAR_ARGS_NAME);
1865:       assertEquals(49, Node.DIRECT_EVAL);
1866:       assertEquals(57, Node.LAST_PROP);
1867:       assertEquals(54, Node.SLASH_V);
1868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1869:       assertEquals(12, Node.COLUMN_BITS);
1870:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1871:       assertEquals(32, Node.INCRDECR_PROP);
1872:       assertEquals(52, Node.LENGTH);
1873:       assertEquals(1, Node.DECR_FLAG);
1874:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1875:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1876:       assertEquals(29, Node.JSDOC_INFO_PROP);
1877:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1878:       assertEquals(56, Node.CHANGE_TIME);
1879:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1880:       assertEquals(8, Node.FLAG_NO_THROWS);
1881:       assertEquals(57, Node.REFLECTED_OBJECT);
1882:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1883:       assertEquals(4095, Node.COLUMN_MASK);
1884:       assertEquals(37, Node.OPT_ARG_NAME);
1885:       assertEquals(48, Node.DIRECTIVES);
1886:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1887:       assertEquals(40, Node.ORIGINALNAME_PROP);
1888:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1889:       assertEquals(48, Node.DIRECTIVES);
1890:       assertEquals(39, Node.EMPTY_BLOCK);
1891:       assertEquals(54, Node.SLASH_V);
1892:       assertEquals(57, Node.REFLECTED_OBJECT);
1893:       assertEquals(52, Node.LENGTH);
1894:       assertEquals(8, Node.FLAG_NO_THROWS);
1895:       assertEquals(50, Node.FREE_CALL);
1896:       assertEquals(1, Node.DECR_FLAG);
1897:       assertEquals(12, Node.COLUMN_BITS);
1898:       assertEquals(49, Node.DIRECT_EVAL);
1899:       assertEquals(32, Node.INCRDECR_PROP);
1900:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1901:       assertEquals(37, Node.OPT_ARG_NAME);
1902:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1903:       assertEquals(4095, Node.COLUMN_MASK);
1904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1905:       assertEquals(29, Node.JSDOC_INFO_PROP);
1906:       assertEquals(56, Node.CHANGE_TIME);
1907:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1908:       assertEquals(53, Node.INPUT_ID);
1909:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1910:       assertEquals(46, Node.IS_NAMESPACE);
1911:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1912:       assertEquals(36, Node.QUOTED_PROP);
1913:       assertEquals(55, Node.INFERRED_FUNCTION);
1914:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1915:       assertEquals(43, Node.IS_CONSTANT_NAME);
1916:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1917:       assertEquals(57, Node.LAST_PROP);
1918:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1919:       assertEquals(47, Node.IS_DISPATCHER);
1920:       assertEquals(30, Node.VAR_ARGS_NAME);
1921:       assertEquals(2, Node.POST_FLAG);
1922:       
1923:       boolean boolean1 = node2.isCast();
1924:       assertFalse(boolean1);
1925:       assertFalse(node0.isName());
1926:       assertFalse(node0.isCall());
1927:       assertFalse(node0.isSetterDef());
1928:       assertFalse(node0.isParamList());
1929:       assertFalse(node0.isStringKey());
1930:       assertFalse(node0.isNull());
1931:       assertFalse(node0.isDo());
1932:       assertFalse(node0.isDefaultCase());
1933:       assertFalse(node0.isContinue());
1934:       assertFalse(node0.isAdd());
1935:       assertFalse(node0.isNew());
1936:       assertEquals(0, node0.getChildCount());
1937:       assertFalse(node0.isAssignAdd());
1938:       assertFalse(node0.isFunction());
1939:       assertFalse(node0.isVar());
1940:       assertEquals(40, node0.getType());
1941:       assertFalse(node0.isLabel());
1942:       assertFalse(node0.isGetterDef());
1943:       assertFalse(node0.isLabelName());
1944:       assertFalse(node0.isNumber());
1945:       assertFalse(node0.isIf());
1946:       assertFalse(node0.isArrayLit());
1947:       assertFalse(node0.hasOneChild());
1948:       assertEquals((-1), node0.getLineno());
1949:       assertFalse(node0.isIn());
1950:       assertFalse(node0.isNE());
1951:       assertFalse(node0.isRegExp());
1952:       assertFalse(node0.isWith());
1953:       assertFalse(node0.isCatch());
1954:       assertFalse(node0.isCase());
1955:       assertFalse(node0.isScript());
1956:       assertFalse(node0.isTry());
1957:       assertFalse(node0.isInstanceOf());
1958:       assertTrue(node0.isString());
1959:       assertFalse(node0.hasMoreThanOneChild());
1960:       assertFalse(node0.isThis());
1961:       assertFalse(node0.isBlock());
1962:       assertFalse(node0.isFor());
1963:       assertFalse(node0.isHook());
1964:       assertFalse(node0.isFalse());
1965:       assertFalse(node0.isBreak());
1966:       assertFalse(node0.isGetProp());
1967:       assertFalse(node0.isAnd());
1968:       assertFalse(node0.isObjectLit());
1969:       assertEquals((-1), node0.getCharno());
1970:       assertFalse(node0.isSwitch());
1971:       assertFalse(node0.isInc());
1972:       assertFalse(node0.isThrow());
1973:       assertFalse(node0.isDelProp());
1974:       assertFalse(node0.isEmpty());
1975:       assertFalse(node0.isAssign());
1976:       assertFalse(node0.isDec());
1977:       assertFalse(node0.isTypeOf());
1978:       assertFalse(node0.isCast());
1979:       assertFalse(node0.isGetElem());
1980:       assertFalse(node0.isOr());
1981:       assertFalse(node0.isDebugger());
1982:       assertFalse(node0.isTrue());
1983:       assertEquals((-1), node0.getSourcePosition());
1984:       assertFalse(node0.isWhile());
1985:       assertFalse(node0.isNot());
1986:       assertFalse(node0.isExprResult());
1987:       assertFalse(node0.isVoid());
1988:       assertFalse(node0.isReturn());
1989:       assertFalse(node0.isComma());
1990:       assertFalse(node0.hasChildren());
1991:       assertEquals(2, node1.getType());
1992:       assertFalse(node1.isNew());
1993:       assertFalse(node1.isWhile());
1994:       assertFalse(node1.isVar());
1995:       assertFalse(node1.isBlock());
1996:       assertFalse(node1.isContinue());
1997:       assertFalse(node1.isStringKey());
1998:       assertFalse(node1.hasMoreThanOneChild());
1999:       assertFalse(node1.isName());
2000:       assertEquals((-1), node1.getLineno());
2001:       assertFalse(node1.isCall());
2002:       assertFalse(node1.isParamList());
2003:       assertFalse(node1.isNumber());
2004:       assertFalse(node1.isTypeOf());
2005:       assertFalse(node1.isDec());
2006:       assertEquals((-1), node1.getSourcePosition());
2007:       assertFalse(node1.isReturn());
2008:       assertFalse(node1.isDebugger());
2009:       assertFalse(node1.isTry());
2010:       assertFalse(node1.isFunction());
2011:       assertFalse(node1.isRegExp());
2012:       assertFalse(node1.isAnd());
2013:       assertFalse(node1.isWith());
2014:       assertFalse(node1.isInstanceOf());
2015:       assertFalse(node1.isCatch());
2016:       assertFalse(node1.isCast());
2017:       assertFalse(node1.isIf());
2018:       assertFalse(node1.isNE());
2019:       assertFalse(node1.isThrow());
2020:       assertFalse(node1.isIn());
2021:       assertFalse(node1.isSetterDef());
2022:       assertFalse(node1.isInc());
2023:       assertEquals((-1), node1.getCharno());
2024:       assertFalse(node1.isSwitch());
2025:       assertFalse(node1.isHook());
2026:       assertFalse(node1.isFalse());
2027:       assertFalse(node1.isBreak());
2028:       assertTrue(node1.hasChildren());
2029:       assertFalse(node1.isGetProp());
2030:       assertFalse(node1.isComma());
2031:       assertFalse(node1.isGetterDef());
2032:       assertEquals(1, node1.getChildCount());
2033:       assertFalse(node1.isFor());
2034:       assertFalse(node1.isThis());
2035:       assertTrue(node1.hasOneChild());
2036:       assertFalse(node1.isCase());
2037:       assertFalse(node1.isNot());
2038:       assertFalse(node1.isObjectLit());
2039:       assertFalse(node1.isString());
2040:       assertFalse(node1.isScript());
2041:       assertFalse(node1.isVoid());
2042:       assertFalse(node1.isDefaultCase());
2043:       assertFalse(node1.isTrue());
2044:       assertFalse(node1.isLabelName());
2045:       assertFalse(node1.isAssign());
2046:       assertFalse(node1.isDelProp());
2047:       assertFalse(node1.isArrayLit());
2048:       assertFalse(node1.isExprResult());
2049:       assertFalse(node1.isGetElem());
2050:       assertFalse(node1.isAssignAdd());
2051:       assertFalse(node1.isOr());
2052:       assertFalse(node1.isLabel());
2053:       assertFalse(node1.isNull());
2054:       assertFalse(node1.isDo());
2055:       assertFalse(node1.isEmpty());
2056:       assertFalse(node1.isAdd());
2057:       assertFalse(node2.isIf());
2058:       assertFalse(node2.isNE());
2059:       assertFalse(node2.isEmpty());
2060:       assertFalse(node2.isDelProp());
2061:       assertFalse(node2.isArrayLit());
2062:       assertFalse(node2.isFor());
2063:       assertFalse(node2.isRegExp());
2064:       assertFalse(node2.isDefaultCase());
2065:       assertFalse(node2.isInc());
2066:       assertFalse(node2.isTrue());
2067:       assertFalse(node2.isVoid());
2068:       assertFalse(node2.isIn());
2069:       assertFalse(node2.isNull());
2070:       assertFalse(node2.isSetterDef());
2071:       assertFalse(node2.isName());
2072:       assertFalse(node2.isGetProp());
2073:       assertFalse(node2.isBreak());
2074:       assertFalse(node2.isCall());
2075:       assertFalse(node2.isThrow());
2076:       assertEquals(40, node2.getType());
2077:       assertFalse(node2.isFalse());
2078:       assertFalse(node2.isComma());
2079:       assertFalse(node2.isFunction());
2080:       assertFalse(node2.isWhile());
2081:       assertFalse(node2.isAnd());
2082:       assertFalse(node2.isNot());
2083:       assertFalse(node2.isDebugger());
2084:       assertFalse(node2.isObjectLit());
2085:       assertEquals((-1), node2.getSourcePosition());
2086:       assertFalse(node2.isTypeOf());
2087:       assertFalse(node2.isNumber());
2088:       assertFalse(node2.isAssignAdd());
2089:       assertFalse(node2.isLabelName());
2090:       assertFalse(node2.isGetElem());
2091:       assertEquals((-1), node2.getLineno());
2092:       assertFalse(node2.hasMoreThanOneChild());
2093:       assertFalse(node2.isContinue());
2094:       assertFalse(node2.isCast());
2095:       assertFalse(node2.isLabel());
2096:       assertFalse(node2.isReturn());
2097:       assertFalse(node2.hasChildren());
2098:       assertFalse(node2.isAssign());
2099:       assertFalse(node2.isDec());
2100:       assertFalse(node2.isExprResult());
2101:       assertFalse(node2.isAdd());
2102:       assertFalse(node2.isDo());
2103:       assertFalse(node2.isNew());
2104:       assertFalse(node2.isOr());
2105:       assertFalse(node2.isThis());
2106:       assertFalse(node2.isParamList());
2107:       assertFalse(node2.isVar());
2108:       assertFalse(node2.isHook());
2109:       assertFalse(node2.isCatch());
2110:       assertFalse(node2.isInstanceOf());
2111:       assertFalse(node2.isBlock());
2112:       assertFalse(node2.isWith());
2113:       assertEquals(0, node2.getChildCount());
2114:       assertFalse(node2.isScript());
2115:       assertFalse(node2.isSwitch());
2116:       assertFalse(node2.isTry());
2117:       assertFalse(node2.isCase());
2118:       assertTrue(node2.isString());
2119:       assertFalse(node2.hasOneChild());
2120:       assertFalse(node2.isStringKey());
2121:       assertFalse(node2.isGetterDef());
2122:       assertEquals((-1), node2.getCharno());
2123:       assertSame(node0, node2);
2124:       assertSame(node2, node0);
2125:       assertTrue(boolean1 == boolean0);
2126:       assertFalse(node0.equals((Object)node1));
2127:       assertFalse(node1.equals((Object)node2));
2128:       assertFalse(node1.equals((Object)node0));
2129:       assertFalse(node2.equals((Object)node1));
2130:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2132:       assertEquals(29, Node.JSDOC_INFO_PROP);
2133:       assertEquals(53, Node.INPUT_ID);
2134:       assertEquals(2, Node.POST_FLAG);
2135:       assertEquals(47, Node.IS_DISPATCHER);
2136:       assertEquals(55, Node.INFERRED_FUNCTION);
2137:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2138:       assertEquals(4095, Node.COLUMN_MASK);
2139:       assertEquals(49, Node.DIRECT_EVAL);
2140:       assertEquals(48, Node.DIRECTIVES);
2141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2142:       assertEquals(37, Node.OPT_ARG_NAME);
2143:       assertEquals(8, Node.FLAG_NO_THROWS);
2144:       assertEquals(39, Node.EMPTY_BLOCK);
2145:       assertEquals(56, Node.CHANGE_TIME);
2146:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2148:       assertEquals(52, Node.LENGTH);
2149:       assertEquals(36, Node.QUOTED_PROP);
2150:       assertEquals(40, Node.ORIGINALNAME_PROP);
2151:       assertEquals(57, Node.REFLECTED_OBJECT);
2152:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2153:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2154:       assertEquals(57, Node.LAST_PROP);
2155:       assertEquals(30, Node.VAR_ARGS_NAME);
2156:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2157:       assertEquals(12, Node.COLUMN_BITS);
2158:       assertEquals(32, Node.INCRDECR_PROP);
2159:       assertEquals(1, Node.DECR_FLAG);
2160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2161:       assertEquals(54, Node.SLASH_V);
2162:       assertEquals(43, Node.IS_CONSTANT_NAME);
2163:       assertEquals(46, Node.IS_NAMESPACE);
2164:       assertEquals(50, Node.FREE_CALL);
2165:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2166:       assertEquals(43, Node.IS_CONSTANT_NAME);
2167:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2168:       assertEquals(36, Node.QUOTED_PROP);
2169:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2170:       assertEquals(55, Node.INFERRED_FUNCTION);
2171:       assertEquals(53, Node.INPUT_ID);
2172:       assertEquals(39, Node.EMPTY_BLOCK);
2173:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2174:       assertEquals(50, Node.FREE_CALL);
2175:       assertEquals(2, Node.POST_FLAG);
2176:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2177:       assertEquals(47, Node.IS_DISPATCHER);
2178:       assertEquals(46, Node.IS_NAMESPACE);
2179:       assertEquals(40, Node.ORIGINALNAME_PROP);
2180:       assertEquals(30, Node.VAR_ARGS_NAME);
2181:       assertEquals(49, Node.DIRECT_EVAL);
2182:       assertEquals(57, Node.LAST_PROP);
2183:       assertEquals(54, Node.SLASH_V);
2184:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2185:       assertEquals(12, Node.COLUMN_BITS);
2186:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2187:       assertEquals(32, Node.INCRDECR_PROP);
2188:       assertEquals(52, Node.LENGTH);
2189:       assertEquals(1, Node.DECR_FLAG);
2190:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2191:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2192:       assertEquals(29, Node.JSDOC_INFO_PROP);
2193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2194:       assertEquals(56, Node.CHANGE_TIME);
2195:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2196:       assertEquals(8, Node.FLAG_NO_THROWS);
2197:       assertEquals(57, Node.REFLECTED_OBJECT);
2198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2199:       assertEquals(4095, Node.COLUMN_MASK);
2200:       assertEquals(37, Node.OPT_ARG_NAME);
2201:       assertEquals(48, Node.DIRECTIVES);
2202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2203:       assertEquals(40, Node.ORIGINALNAME_PROP);
2204:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2205:       assertEquals(48, Node.DIRECTIVES);
2206:       assertEquals(39, Node.EMPTY_BLOCK);
2207:       assertEquals(54, Node.SLASH_V);
2208:       assertEquals(57, Node.REFLECTED_OBJECT);
2209:       assertEquals(52, Node.LENGTH);
2210:       assertEquals(8, Node.FLAG_NO_THROWS);
2211:       assertEquals(50, Node.FREE_CALL);
2212:       assertEquals(1, Node.DECR_FLAG);
2213:       assertEquals(12, Node.COLUMN_BITS);
2214:       assertEquals(49, Node.DIRECT_EVAL);
2215:       assertEquals(32, Node.INCRDECR_PROP);
2216:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2217:       assertEquals(37, Node.OPT_ARG_NAME);
2218:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2219:       assertEquals(4095, Node.COLUMN_MASK);
2220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2221:       assertEquals(29, Node.JSDOC_INFO_PROP);
2222:       assertEquals(56, Node.CHANGE_TIME);
2223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2224:       assertEquals(53, Node.INPUT_ID);
2225:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2226:       assertEquals(46, Node.IS_NAMESPACE);
2227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2228:       assertEquals(36, Node.QUOTED_PROP);
2229:       assertEquals(55, Node.INFERRED_FUNCTION);
2230:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2231:       assertEquals(43, Node.IS_CONSTANT_NAME);
2232:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2233:       assertEquals(57, Node.LAST_PROP);
2234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2235:       assertEquals(47, Node.IS_DISPATCHER);
2236:       assertEquals(30, Node.VAR_ARGS_NAME);
2237:       assertEquals(2, Node.POST_FLAG);
2238:       
2239:       boolean boolean2 = node0.isDebugger();
2240:       assertFalse(boolean2);
2241:       assertFalse(node0.isName());
2242:       assertFalse(node0.isCall());
2243:       assertFalse(node0.isSetterDef());
2244:       assertFalse(node0.isParamList());
2245:       assertFalse(node0.isStringKey());
2246:       assertFalse(node0.isNull());
2247:       assertFalse(node0.isDo());
2248:       assertFalse(node0.isDefaultCase());
2249:       assertFalse(node0.isContinue());
2250:       assertFalse(node0.isAdd());
2251:       assertFalse(node0.isNew());
2252:       assertEquals(0, node0.getChildCount());
2253:       assertFalse(node0.isAssignAdd());
2254:       assertFalse(node0.isFunction());
2255:       assertFalse(node0.isVar());
2256:       assertEquals(40, node0.getType());
2257:       assertFalse(node0.isLabel());
2258:       assertFalse(node0.isGetterDef());
2259:       assertFalse(node0.isLabelName());
2260:       assertFalse(node0.isNumber());
2261:       assertFalse(node0.isIf());
2262:       assertFalse(node0.isArrayLit());
2263:       assertFalse(node0.hasOneChild());
2264:       assertEquals((-1), node0.getLineno());
2265:       assertFalse(node0.isIn());
2266:       assertFalse(node0.isNE());
2267:       assertFalse(node0.isRegExp());
2268:       assertFalse(node0.isWith());
2269:       assertFalse(node0.isCatch());
2270:       assertFalse(node0.isCase());
2271:       assertFalse(node0.isScript());
2272:       assertFalse(node0.isTry());
2273:       assertFalse(node0.isInstanceOf());
2274:       assertTrue(node0.isString());
2275:       assertFalse(node0.hasMoreThanOneChild());
2276:       assertFalse(node0.isThis());
2277:       assertFalse(node0.isBlock());
2278:       assertFalse(node0.isFor());
2279:       assertFalse(node0.isHook());
2280:       assertFalse(node0.isFalse());
2281:       assertFalse(node0.isBreak());
2282:       assertFalse(node0.isGetProp());
2283:       assertFalse(node0.isAnd());
2284:       assertFalse(node0.isObjectLit());
2285:       assertEquals((-1), node0.getCharno());
2286:       assertFalse(node0.isSwitch());
2287:       assertFalse(node0.isInc());
2288:       assertFalse(node0.isThrow());
2289:       assertFalse(node0.isDelProp());
2290:       assertFalse(node0.isEmpty());
2291:       assertFalse(node0.isAssign());
2292:       assertFalse(node0.isDec());
2293:       assertFalse(node0.isTypeOf());
2294:       assertFalse(node0.isCast());
2295:       assertFalse(node0.isGetElem());
2296:       assertFalse(node0.isOr());
2297:       assertFalse(node0.isDebugger());
2298:       assertFalse(node0.isTrue());
2299:       assertEquals((-1), node0.getSourcePosition());
2300:       assertFalse(node0.isWhile());
2301:       assertFalse(node0.isNot());
2302:       assertFalse(node0.isExprResult());
2303:       assertFalse(node0.isVoid());
2304:       assertFalse(node0.isReturn());
2305:       assertFalse(node0.isComma());
2306:       assertFalse(node0.hasChildren());
2307:       assertSame(node0, node2);
2308:       assertFalse(node0.equals((Object)node1));
2309:       assertTrue(boolean2 == boolean0);
2310:       assertTrue(boolean2 == boolean1);
2311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2312:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2313:       assertEquals(29, Node.JSDOC_INFO_PROP);
2314:       assertEquals(53, Node.INPUT_ID);
2315:       assertEquals(2, Node.POST_FLAG);
2316:       assertEquals(47, Node.IS_DISPATCHER);
2317:       assertEquals(55, Node.INFERRED_FUNCTION);
2318:       
2319:       int int0 = Node.mergeLineCharNo(32, (-1693));
2320:       assertEquals((-1), int0);
2321:       
2322:       boolean boolean3 = node1.isAnd();
2323:       assertFalse(boolean3);
2324:       assertFalse(node0.isName());
2325:       assertFalse(node0.isCall());
2326:       assertFalse(node0.isSetterDef());
2327:       assertFalse(node0.isParamList());
2328:       assertFalse(node0.isStringKey());
2329:       assertFalse(node0.isNull());
2330:       assertFalse(node0.isDo());
2331:       assertFalse(node0.isDefaultCase());
2332:       assertFalse(node0.isContinue());
2333:       assertFalse(node0.isAdd());
2334:       assertFalse(node0.isNew());
2335:       assertEquals(0, node0.getChildCount());
2336:       assertFalse(node0.isAssignAdd());
2337:       assertFalse(node0.isFunction());
2338:       assertFalse(node0.isVar());
2339:       assertEquals(40, node0.getType());
2340:       assertFalse(node0.isLabel());
2341:       assertFalse(node0.isGetterDef());
2342:       assertFalse(node0.isLabelName());
2343:       assertFalse(node0.isNumber());
2344:       assertFalse(node0.isIf());
2345:       assertFalse(node0.isArrayLit());
2346:       assertFalse(node0.hasOneChild());
2347:       assertEquals((-1), node0.getLineno());
2348:       assertFalse(node0.isIn());
2349:       assertFalse(node0.isNE());
2350:       assertFalse(node0.isRegExp());
2351:       assertFalse(node0.isWith());
2352:       assertFalse(node0.isCatch());
2353:       assertFalse(node0.isCase());
2354:       assertFalse(node0.isScript());
2355:       assertFalse(node0.isTry());
2356:       assertFalse(node0.isInstanceOf());
2357:       assertTrue(node0.isString());
2358:       assertFalse(node0.hasMoreThanOneChild());
2359:       assertFalse(node0.isThis());
2360:       assertFalse(node0.isBlock());
2361:       assertFalse(node0.isFor());
2362:       assertFalse(node0.isHook());
2363:       assertFalse(node0.isFalse());
2364:       assertFalse(node0.isBreak());
2365:       assertFalse(node0.isGetProp());
2366:       assertFalse(node0.isAnd());
2367:       assertFalse(node0.isObjectLit());
2368:       assertEquals((-1), node0.getCharno());
2369:       assertFalse(node0.isSwitch());
2370:       assertFalse(node0.isInc());
2371:       assertFalse(node0.isThrow());
2372:       assertFalse(node0.isDelProp());
2373:       assertFalse(node0.isEmpty());
2374:       assertFalse(node0.isAssign());
2375:       assertFalse(node0.isDec());
2376:       assertFalse(node0.isTypeOf());
2377:       assertFalse(node0.isCast());
2378:       assertFalse(node0.isGetElem());
2379:       assertFalse(node0.isOr());
2380:       assertFalse(node0.isDebugger());
2381:       assertFalse(node0.isTrue());
2382:       assertEquals((-1), node0.getSourcePosition());
2383:       assertFalse(node0.isWhile());
2384:       assertFalse(node0.isNot());
2385:       assertFalse(node0.isExprResult());
2386:       assertFalse(node0.isVoid());
2387:       assertFalse(node0.isReturn());
2388:       assertFalse(node0.isComma());
2389:       assertFalse(node0.hasChildren());
2390:       assertEquals(2, node1.getType());
2391:       assertFalse(node1.isNew());
2392:       assertFalse(node1.isWhile());
2393:       assertFalse(node1.isVar());
2394:       assertFalse(node1.isBlock());
2395:       assertFalse(node1.isContinue());
2396:       assertFalse(node1.isStringKey());
2397:       assertFalse(node1.hasMoreThanOneChild());
2398:       assertFalse(node1.isName());
2399:       assertEquals((-1), node1.getLineno());
2400:       assertFalse(node1.isCall());
2401:       assertFalse(node1.isParamList());
2402:       assertFalse(node1.isNumber());
2403:       assertFalse(node1.isTypeOf());
2404:       assertFalse(node1.isDec());
2405:       assertEquals((-1), node1.getSourcePosition());
2406:       assertFalse(node1.isReturn());
2407:       assertFalse(node1.isDebugger());
2408:       assertFalse(node1.isTry());
2409:       assertFalse(node1.isFunction());
2410:       assertFalse(node1.isRegExp());
2411:       assertFalse(node1.isAnd());
2412:       assertFalse(node1.isWith());
2413:       assertFalse(node1.isInstanceOf());
2414:       assertFalse(node1.isCatch());
2415:       assertFalse(node1.isCast());
2416:       assertFalse(node1.isIf());
2417:       assertFalse(node1.isNE());
2418:       assertFalse(node1.isThrow());
2419:       assertFalse(node1.isIn());
2420:       assertFalse(node1.isSetterDef());
2421:       assertFalse(node1.isInc());
2422:       assertEquals((-1), node1.getCharno());
2423:       assertFalse(node1.isSwitch());
2424:       assertFalse(node1.isHook());
2425:       assertFalse(node1.isFalse());
2426:       assertFalse(node1.isBreak());
2427:       assertTrue(node1.hasChildren());
2428:       assertFalse(node1.isGetProp());
2429:       assertFalse(node1.isComma());
2430:       assertFalse(node1.isGetterDef());
2431:       assertEquals(1, node1.getChildCount());
2432:       assertFalse(node1.isFor());
2433:       assertFalse(node1.isThis());
2434:       assertTrue(node1.hasOneChild());
2435:       assertFalse(node1.isCase());
2436:       assertFalse(node1.isNot());
2437:       assertFalse(node1.isObjectLit());
2438:       assertFalse(node1.isString());
2439:       assertFalse(node1.isScript());
2440:       assertFalse(node1.isVoid());
2441:       assertFalse(node1.isDefaultCase());
2442:       assertFalse(node1.isTrue());
2443:       assertFalse(node1.isLabelName());
2444:       assertFalse(node1.isAssign());
2445:       assertFalse(node1.isDelProp());
2446:       assertFalse(node1.isArrayLit());
2447:       assertFalse(node1.isExprResult());
2448:       assertFalse(node1.isGetElem());
2449:       assertFalse(node1.isAssignAdd());
2450:       assertFalse(node1.isOr());
2451:       assertFalse(node1.isLabel());
2452:       assertFalse(node1.isNull());
2453:       assertFalse(node1.isDo());
2454:       assertFalse(node1.isEmpty());
2455:       assertFalse(node1.isAdd());
2456:       assertSame(node0, node2);
2457:       assertFalse(node0.equals((Object)node1));
2458:       assertFalse(node1.equals((Object)node2));
2459:       assertFalse(node1.equals((Object)node0));
2460:       assertTrue(boolean3 == boolean0);
2461:       assertTrue(boolean3 == boolean1);
2462:       assertTrue(boolean3 == boolean2);
2463:       
2464:       int int1 = node0.getType();
2465:       assertEquals(40, int1);
2466:       assertFalse(node0.isName());
2467:       assertFalse(node0.isCall());
2468:       assertFalse(node0.isSetterDef());
2469:       assertFalse(node0.isParamList());
2470:       assertFalse(node0.isStringKey());
2471:       assertFalse(node0.isNull());
2472:       assertFalse(node0.isDo());
2473:       assertFalse(node0.isDefaultCase());
2474:       assertFalse(node0.isContinue());
2475:       assertFalse(node0.isAdd());
2476:       assertFalse(node0.isNew());
2477:       assertEquals(0, node0.getChildCount());
2478:       assertFalse(node0.isAssignAdd());
2479:       assertFalse(node0.isFunction());
2480:       assertFalse(node0.isVar());
2481:       assertEquals(40, node0.getType());
2482:       assertFalse(node0.isLabel());
2483:       assertFalse(node0.isGetterDef());
2484:       assertFalse(node0.isLabelName());
2485:       assertFalse(node0.isNumber());
2486:       assertFalse(node0.isIf());
2487:       assertFalse(node0.isArrayLit());
2488:       assertFalse(node0.hasOneChild());
2489:       assertEquals((-1), node0.getLineno());
2490:       assertFalse(node0.isIn());
2491:       assertFalse(node0.isNE());
2492:       assertFalse(node0.isRegExp());
2493:       assertFalse(node0.isWith());
2494:       assertFalse(node0.isCatch());
2495:       assertFalse(node0.isCase());
2496:       assertFalse(node0.isScript());
2497:       assertFalse(node0.isTry());
2498:       assertFalse(node0.isInstanceOf());
2499:       assertTrue(node0.isString());
2500:       assertFalse(node0.hasMoreThanOneChild());
2501:       assertFalse(node0.isThis());
2502:       assertFalse(node0.isBlock());
2503:       assertFalse(node0.isFor());
2504:       assertFalse(node0.isHook());
2505:       assertFalse(node0.isFalse());
2506:       assertFalse(node0.isBreak());
2507:       assertFalse(node0.isGetProp());
2508:       assertFalse(node0.isAnd());
2509:       assertFalse(node0.isObjectLit());
2510:       assertEquals((-1), node0.getCharno());
2511:       assertFalse(node0.isSwitch());
2512:       assertFalse(node0.isInc());
2513:       assertFalse(node0.isThrow());
2514:       assertFalse(node0.isDelProp());
2515:       assertFalse(node0.isEmpty());
2516:       assertFalse(node0.isAssign());
2517:       assertFalse(node0.isDec());
2518:       assertFalse(node0.isTypeOf());
2519:       assertFalse(node0.isCast());
2520:       assertFalse(node0.isGetElem());
2521:       assertFalse(node0.isOr());
2522:       assertFalse(node0.isDebugger());
2523:       assertFalse(node0.isTrue());
2524:       assertEquals((-1), node0.getSourcePosition());
2525:       assertFalse(node0.isWhile());
2526:       assertFalse(node0.isNot());
2527:       assertFalse(node0.isExprResult());
2528:       assertFalse(node0.isVoid());
2529:       assertFalse(node0.isReturn());
2530:       assertFalse(node0.isComma());
2531:       assertFalse(node0.hasChildren());
2532:       assertSame(node0, node2);
2533:       assertFalse(node0.equals((Object)node1));
2534:       assertFalse(int1 == int0);
2535:   }
2536: }
RegularFileObject[/tmp/EvoSuite_132_1628256049182/com/google/javascript/rhino/Node_132_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:49 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_132_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_132_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_132_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:49.942 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("}N>", (-572), (-572));
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertNotNull(node0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);

Node node1 = new Node(2271, node0);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertEquals(2271, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Node node2 = node1.getLastChild();
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertEquals(2271, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

byte[] byteArray0 = new byte[6];
byteArray0[0] = (byte)102;
byteArray0[1] = (byte) (-115);
byteArray0[2] = (byte) (-12);
byteArray0[3] = (byte)116;
byteArray0[4] = (byte)0;
byteArray0[5] = (byte)15;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertEquals(6, byteArray0.length);
assertArrayEquals(new byte[] {(byte)102, (byte) (-115), (byte) (-12), (byte)116, (byte)0, (byte)15}, byteArray0);

Iterable<Node> iterable0 = node2.children();
assertFalse(iterable0.contains(node2));
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertEquals(2271, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertNotNull(iterable0);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertEquals(2271, node1.getType());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotNull(node_NodeMismatch0);
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

node1.setType(2);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(2, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

node1.putProp(128, "}N>");
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(2, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

String string0 = node2.getSourceFileName();
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(2, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertNull(string0);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean1 = node2.isCast();
assertFalse(boolean1);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(2, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isEmpty());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isFor());
assertFalse(node2.isRegExp());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isIn());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isCall());
assertFalse(node2.isThrow());
assertEquals(40, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isFunction());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertEquals((-1), node2.getLineno());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.hasChildren());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isExprResult());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isOr());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertFalse(node2.isVar());
assertFalse(node2.isHook());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isBlock());
assertFalse(node2.isWith());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isScript());
assertFalse(node2.isSwitch());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertTrue(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isStringKey());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertSame(node0, node2);
assertSame(node2, node0);
assertTrue(boolean1 == boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

boolean boolean2 = node0.isDebugger();
assertFalse(boolean2);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);

int int0 = Node.mergeLineCharNo(32, (-1693));
assertEquals((-1), int0);

boolean boolean3 = node1.isAnd();
assertFalse(boolean3);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertEquals(2, node1.getType());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isContinue());
assertFalse(node1.isStringKey());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isReturn());
assertFalse(node1.isDebugger());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isAnd());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isCast());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isIn());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isSwitch());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isGetterDef());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isFor());
assertFalse(node1.isThis());
assertTrue(node1.hasOneChild());
assertFalse(node1.isCase());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTrue());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isNull());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);

int int1 = node0.getType();
assertEquals(40, int1);
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isContinue());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isFunction());
assertFalse(node0.isVar());
assertEquals(40, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isTry());
assertFalse(node0.isInstanceOf());
assertTrue(node0.isString());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isOr());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isWhile());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isVoid());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.hasChildren());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(int1 == int0);


[MASTER] 13:20:51.301 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_141_1628256051059/com/google/javascript/rhino/Node_141_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_141_1628256051059/com/google/javascript/rhino/Node_141_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:51.301 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:51.301 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:51.302 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 258
[MASTER] 13:20:51.303 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_141_1628256051059/com/google/javascript/rhino/Node_141_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.ArrayList;
16: import java.util.List;
17: import java.util.Set;
18: import org.evosuite.runtime.EvoRunner;
19: import org.evosuite.runtime.EvoRunnerParameters;
20: import org.evosuite.runtime.testdata.EvoSuiteFile;
21: import org.evosuite.runtime.testdata.FileSystemHandling;
22: import org.junit.runner.RunWith;
23: 
24: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
25: public class Node_141_tmp__ESTest extends Node_141_tmp__ESTest_scaffolding {
26: 
27:   @Test(timeout = 4000)
28:   public void test0()  throws Throwable  {
29:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
30:       assertNotNull(simpleErrorReporter0);
31:       
32:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
33:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
34:       assertNotNull(jSTypeRegistry0);
35:       
36:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
37:       assertTrue(arrayList0.isEmpty());
38:       assertEquals(0, arrayList0.size());
39:       assertNotNull(arrayList0);
40:       
41:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
42:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
43:       assertTrue(arrayList0.isEmpty());
44:       assertEquals(0, arrayList0.size());
45:       assertFalse(node0.isName());
46:       assertFalse(node0.isSetterDef());
47:       assertFalse(node0.isCall());
48:       assertFalse(node0.isNull());
49:       assertFalse(node0.isStringKey());
50:       assertFalse(node0.isDo());
51:       assertFalse(node0.isFunction());
52:       assertFalse(node0.isContinue());
53:       assertFalse(node0.isAssignAdd());
54:       assertFalse(node0.isLabel());
55:       assertFalse(node0.isAdd());
56:       assertEquals(0, node0.getChildCount());
57:       assertFalse(node0.isNew());
58:       assertFalse(node0.isVar());
59:       assertFalse(node0.isDefaultCase());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isAssign());
62:       assertFalse(node0.isGetElem());
63:       assertFalse(node0.hasChildren());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isDec());
66:       assertFalse(node0.isTypeOf());
67:       assertFalse(node0.isCast());
68:       assertFalse(node0.isDebugger());
69:       assertFalse(node0.isVoid());
70:       assertFalse(node0.isOr());
71:       assertEquals((-1), node0.getSourcePosition());
72:       assertFalse(node0.isTrue());
73:       assertFalse(node0.isNot());
74:       assertFalse(node0.isObjectLit());
75:       assertTrue(node0.isParamList());
76:       assertFalse(node0.isExprResult());
77:       assertFalse(node0.isString());
78:       assertFalse(node0.isGetProp());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isComma());
81:       assertFalse(node0.isWhile());
82:       assertFalse(node0.isFalse());
83:       assertFalse(node0.isBreak());
84:       assertEquals(83, node0.getType());
85:       assertEquals((-1), node0.getCharno());
86:       assertFalse(node0.isSwitch());
87:       assertFalse(node0.isAnd());
88:       assertFalse(node0.isInc());
89:       assertFalse(node0.isIn());
90:       assertFalse(node0.isThrow());
91:       assertFalse(node0.isFor());
92:       assertFalse(node0.isLabelName());
93:       assertFalse(node0.isGetterDef());
94:       assertFalse(node0.isArrayLit());
95:       assertFalse(node0.isNumber());
96:       assertEquals((-1), node0.getLineno());
97:       assertFalse(node0.isIf());
98:       assertFalse(node0.isNE());
99:       assertFalse(node0.isCase());
100:       assertFalse(node0.isWith());
101:       assertFalse(node0.isRegExp());
102:       assertFalse(node0.isScript());
103:       assertFalse(node0.hasMoreThanOneChild());
104:       assertFalse(node0.isCatch());
105:       assertFalse(node0.isInstanceOf());
106:       assertFalse(node0.isTry());
107:       assertFalse(node0.isBlock());
108:       assertFalse(node0.hasOneChild());
109:       assertFalse(node0.isThis());
110:       assertFalse(node0.isHook());
111:       assertNotNull(node0);
112:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
113:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
114:       assertEquals(53, Node.INPUT_ID);
115:       assertEquals(29, Node.JSDOC_INFO_PROP);
116:       assertEquals(47, Node.IS_DISPATCHER);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(2, Node.POST_FLAG);
119:       assertEquals(4095, Node.COLUMN_MASK);
120:       assertEquals(37, Node.OPT_ARG_NAME);
121:       assertEquals(55, Node.INFERRED_FUNCTION);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
124:       assertEquals(56, Node.CHANGE_TIME);
125:       assertEquals(36, Node.QUOTED_PROP);
126:       assertEquals(8, Node.FLAG_NO_THROWS);
127:       assertEquals(48, Node.DIRECTIVES);
128:       assertEquals(49, Node.DIRECT_EVAL);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(57, Node.REFLECTED_OBJECT);
131:       assertEquals(52, Node.LENGTH);
132:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(57, Node.LAST_PROP);
137:       assertEquals(30, Node.VAR_ARGS_NAME);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(51, Node.STATIC_SOURCE_FILE);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(1, Node.DECR_FLAG);
144:       assertEquals(43, Node.IS_CONSTANT_NAME);
145:       assertEquals(50, Node.FREE_CALL);
146:       assertEquals(46, Node.IS_NAMESPACE);
147:       assertEquals(54, Node.SLASH_V);
148:       
149:       int int0 = node0.getIntProp((-2118));
150:       assertEquals(0, int0);
151:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
152:       assertTrue(arrayList0.isEmpty());
153:       assertEquals(0, arrayList0.size());
154:       assertFalse(node0.isName());
155:       assertFalse(node0.isSetterDef());
156:       assertFalse(node0.isCall());
157:       assertFalse(node0.isNull());
158:       assertFalse(node0.isStringKey());
159:       assertFalse(node0.isDo());
160:       assertFalse(node0.isFunction());
161:       assertFalse(node0.isContinue());
162:       assertFalse(node0.isAssignAdd());
163:       assertFalse(node0.isLabel());
164:       assertFalse(node0.isAdd());
165:       assertEquals(0, node0.getChildCount());
166:       assertFalse(node0.isNew());
167:       assertFalse(node0.isVar());
168:       assertFalse(node0.isDefaultCase());
169:       assertFalse(node0.isEmpty());
170:       assertFalse(node0.isAssign());
171:       assertFalse(node0.isGetElem());
172:       assertFalse(node0.hasChildren());
173:       assertFalse(node0.isDelProp());
174:       assertFalse(node0.isDec());
175:       assertFalse(node0.isTypeOf());
176:       assertFalse(node0.isCast());
177:       assertFalse(node0.isDebugger());
178:       assertFalse(node0.isVoid());
179:       assertFalse(node0.isOr());
180:       assertEquals((-1), node0.getSourcePosition());
181:       assertFalse(node0.isTrue());
182:       assertFalse(node0.isNot());
183:       assertFalse(node0.isObjectLit());
184:       assertTrue(node0.isParamList());
185:       assertFalse(node0.isExprResult());
186:       assertFalse(node0.isString());
187:       assertFalse(node0.isGetProp());
188:       assertFalse(node0.isReturn());
189:       assertFalse(node0.isComma());
190:       assertFalse(node0.isWhile());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isBreak());
193:       assertEquals(83, node0.getType());
194:       assertEquals((-1), node0.getCharno());
195:       assertFalse(node0.isSwitch());
196:       assertFalse(node0.isAnd());
197:       assertFalse(node0.isInc());
198:       assertFalse(node0.isIn());
199:       assertFalse(node0.isThrow());
200:       assertFalse(node0.isFor());
201:       assertFalse(node0.isLabelName());
202:       assertFalse(node0.isGetterDef());
203:       assertFalse(node0.isArrayLit());
204:       assertFalse(node0.isNumber());
205:       assertEquals((-1), node0.getLineno());
206:       assertFalse(node0.isIf());
207:       assertFalse(node0.isNE());
208:       assertFalse(node0.isCase());
209:       assertFalse(node0.isWith());
210:       assertFalse(node0.isRegExp());
211:       assertFalse(node0.isScript());
212:       assertFalse(node0.hasMoreThanOneChild());
213:       assertFalse(node0.isCatch());
214:       assertFalse(node0.isInstanceOf());
215:       assertFalse(node0.isTry());
216:       assertFalse(node0.isBlock());
217:       assertFalse(node0.hasOneChild());
218:       assertFalse(node0.isThis());
219:       assertFalse(node0.isHook());
220:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
221:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
222:       assertEquals(53, Node.INPUT_ID);
223:       assertEquals(29, Node.JSDOC_INFO_PROP);
224:       assertEquals(47, Node.IS_DISPATCHER);
225:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
226:       assertEquals(2, Node.POST_FLAG);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(37, Node.OPT_ARG_NAME);
229:       assertEquals(55, Node.INFERRED_FUNCTION);
230:       assertEquals(39, Node.EMPTY_BLOCK);
231:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
232:       assertEquals(56, Node.CHANGE_TIME);
233:       assertEquals(36, Node.QUOTED_PROP);
234:       assertEquals(8, Node.FLAG_NO_THROWS);
235:       assertEquals(48, Node.DIRECTIVES);
236:       assertEquals(49, Node.DIRECT_EVAL);
237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
238:       assertEquals(57, Node.REFLECTED_OBJECT);
239:       assertEquals(52, Node.LENGTH);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(40, Node.ORIGINALNAME_PROP);
242:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
243:       assertEquals(15, Node.NO_SIDE_EFFECTS);
244:       assertEquals(57, Node.LAST_PROP);
245:       assertEquals(30, Node.VAR_ARGS_NAME);
246:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
247:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
248:       assertEquals(12, Node.COLUMN_BITS);
249:       assertEquals(51, Node.STATIC_SOURCE_FILE);
250:       assertEquals(32, Node.INCRDECR_PROP);
251:       assertEquals(1, Node.DECR_FLAG);
252:       assertEquals(43, Node.IS_CONSTANT_NAME);
253:       assertEquals(50, Node.FREE_CALL);
254:       assertEquals(46, Node.IS_NAMESPACE);
255:       assertEquals(54, Node.SLASH_V);
256:       
257:       Iterable<Node> iterable0 = node0.children();
258:       assertFalse(iterable0.contains(node0));
259:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
260:       assertTrue(arrayList0.isEmpty());
261:       assertEquals(0, arrayList0.size());
262:       assertFalse(node0.isName());
263:       assertFalse(node0.isSetterDef());
264:       assertFalse(node0.isCall());
265:       assertFalse(node0.isNull());
266:       assertFalse(node0.isStringKey());
267:       assertFalse(node0.isDo());
268:       assertFalse(node0.isFunction());
269:       assertFalse(node0.isContinue());
270:       assertFalse(node0.isAssignAdd());
271:       assertFalse(node0.isLabel());
272:       assertFalse(node0.isAdd());
273:       assertEquals(0, node0.getChildCount());
274:       assertFalse(node0.isNew());
275:       assertFalse(node0.isVar());
276:       assertFalse(node0.isDefaultCase());
277:       assertFalse(node0.isEmpty());
278:       assertFalse(node0.isAssign());
279:       assertFalse(node0.isGetElem());
280:       assertFalse(node0.hasChildren());
281:       assertFalse(node0.isDelProp());
282:       assertFalse(node0.isDec());
283:       assertFalse(node0.isTypeOf());
284:       assertFalse(node0.isCast());
285:       assertFalse(node0.isDebugger());
286:       assertFalse(node0.isVoid());
287:       assertFalse(node0.isOr());
288:       assertEquals((-1), node0.getSourcePosition());
289:       assertFalse(node0.isTrue());
290:       assertFalse(node0.isNot());
291:       assertFalse(node0.isObjectLit());
292:       assertTrue(node0.isParamList());
293:       assertFalse(node0.isExprResult());
294:       assertFalse(node0.isString());
295:       assertFalse(node0.isGetProp());
296:       assertFalse(node0.isReturn());
297:       assertFalse(node0.isComma());
298:       assertFalse(node0.isWhile());
299:       assertFalse(node0.isFalse());
300:       assertFalse(node0.isBreak());
301:       assertEquals(83, node0.getType());
302:       assertEquals((-1), node0.getCharno());
303:       assertFalse(node0.isSwitch());
304:       assertFalse(node0.isAnd());
305:       assertFalse(node0.isInc());
306:       assertFalse(node0.isIn());
307:       assertFalse(node0.isThrow());
308:       assertFalse(node0.isFor());
309:       assertFalse(node0.isLabelName());
310:       assertFalse(node0.isGetterDef());
311:       assertFalse(node0.isArrayLit());
312:       assertFalse(node0.isNumber());
313:       assertEquals((-1), node0.getLineno());
314:       assertFalse(node0.isIf());
315:       assertFalse(node0.isNE());
316:       assertFalse(node0.isCase());
317:       assertFalse(node0.isWith());
318:       assertFalse(node0.isRegExp());
319:       assertFalse(node0.isScript());
320:       assertFalse(node0.hasMoreThanOneChild());
321:       assertFalse(node0.isCatch());
322:       assertFalse(node0.isInstanceOf());
323:       assertFalse(node0.isTry());
324:       assertFalse(node0.isBlock());
325:       assertFalse(node0.hasOneChild());
326:       assertFalse(node0.isThis());
327:       assertFalse(node0.isHook());
328:       assertNotNull(iterable0);
329:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
330:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
331:       assertEquals(53, Node.INPUT_ID);
332:       assertEquals(29, Node.JSDOC_INFO_PROP);
333:       assertEquals(47, Node.IS_DISPATCHER);
334:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
335:       assertEquals(2, Node.POST_FLAG);
336:       assertEquals(4095, Node.COLUMN_MASK);
337:       assertEquals(37, Node.OPT_ARG_NAME);
338:       assertEquals(55, Node.INFERRED_FUNCTION);
339:       assertEquals(39, Node.EMPTY_BLOCK);
340:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
341:       assertEquals(56, Node.CHANGE_TIME);
342:       assertEquals(36, Node.QUOTED_PROP);
343:       assertEquals(8, Node.FLAG_NO_THROWS);
344:       assertEquals(48, Node.DIRECTIVES);
345:       assertEquals(49, Node.DIRECT_EVAL);
346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
347:       assertEquals(57, Node.REFLECTED_OBJECT);
348:       assertEquals(52, Node.LENGTH);
349:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
352:       assertEquals(15, Node.NO_SIDE_EFFECTS);
353:       assertEquals(57, Node.LAST_PROP);
354:       assertEquals(30, Node.VAR_ARGS_NAME);
355:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
356:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
357:       assertEquals(12, Node.COLUMN_BITS);
358:       assertEquals(51, Node.STATIC_SOURCE_FILE);
359:       assertEquals(32, Node.INCRDECR_PROP);
360:       assertEquals(1, Node.DECR_FLAG);
361:       assertEquals(43, Node.IS_CONSTANT_NAME);
362:       assertEquals(50, Node.FREE_CALL);
363:       assertEquals(46, Node.IS_NAMESPACE);
364:       assertEquals(54, Node.SLASH_V);
365:       
366:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
367:       assertNotNull(fileSystemHandling0);
368:       
369:       Node node1 = Node.newNumber((-1163.37132));
370:       assertFalse(node1.isCast());
371:       assertFalse(node1.isExprResult());
372:       assertFalse(node1.isGetElem());
373:       assertFalse(node1.isLabelName());
374:       assertFalse(node1.hasOneChild());
375:       assertFalse(node1.hasChildren());
376:       assertFalse(node1.isTypeOf());
377:       assertFalse(node1.isWith());
378:       assertFalse(node1.isLabel());
379:       assertFalse(node1.isAssign());
380:       assertFalse(node1.isDec());
381:       assertFalse(node1.isReturn());
382:       assertFalse(node1.isAnd());
383:       assertFalse(node1.isGetProp());
384:       assertFalse(node1.isScript());
385:       assertFalse(node1.isObjectLit());
386:       assertFalse(node1.isNot());
387:       assertEquals((-1), node1.getSourcePosition());
388:       assertFalse(node1.isHook());
389:       assertFalse(node1.isInc());
390:       assertFalse(node1.isThrow());
391:       assertFalse(node1.isContinue());
392:       assertFalse(node1.isBlock());
393:       assertFalse(node1.isThis());
394:       assertFalse(node1.isFalse());
395:       assertEquals(39, node1.getType());
396:       assertFalse(node1.isIn());
397:       assertFalse(node1.hasMoreThanOneChild());
398:       assertFalse(node1.isCatch());
399:       assertFalse(node1.isInstanceOf());
400:       assertFalse(node1.isSetterDef());
401:       assertEquals((-1), node1.getLineno());
402:       assertFalse(node1.isIf());
403:       assertFalse(node1.isNE());
404:       assertFalse(node1.isVoid());
405:       assertFalse(node1.isTry());
406:       assertFalse(node1.isArrayLit());
407:       assertFalse(node1.isDefaultCase());
408:       assertFalse(node1.isRegExp());
409:       assertFalse(node1.isFor());
410:       assertFalse(node1.isFunction());
411:       assertEquals(0, node1.getChildCount());
412:       assertFalse(node1.isCase());
413:       assertTrue(node1.isNumber());
414:       assertFalse(node1.isGetterDef());
415:       assertFalse(node1.isSwitch());
416:       assertFalse(node1.isParamList());
417:       assertFalse(node1.isStringKey());
418:       assertFalse(node1.isString());
419:       assertEquals((-1), node1.getCharno());
420:       assertFalse(node1.isDebugger());
421:       assertFalse(node1.isVar());
422:       assertFalse(node1.isAdd());
423:       assertFalse(node1.isName());
424:       assertFalse(node1.isCall());
425:       assertFalse(node1.isNew());
426:       assertFalse(node1.isBreak());
427:       assertFalse(node1.isWhile());
428:       assertFalse(node1.isComma());
429:       assertFalse(node1.isAssignAdd());
430:       assertFalse(node1.isDo());
431:       assertFalse(node1.isNull());
432:       assertFalse(node1.isDelProp());
433:       assertFalse(node1.isEmpty());
434:       assertFalse(node1.isTrue());
435:       assertFalse(node1.isOr());
436:       assertNotNull(node1);
437:       assertFalse(node1.equals((Object)node0));
438:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
439:       assertEquals(54, Node.SLASH_V);
440:       assertEquals(15, Node.NO_SIDE_EFFECTS);
441:       assertEquals(57, Node.LAST_PROP);
442:       assertEquals(49, Node.DIRECT_EVAL);
443:       assertEquals(1, Node.DECR_FLAG);
444:       assertEquals(57, Node.REFLECTED_OBJECT);
445:       assertEquals(46, Node.IS_NAMESPACE);
446:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
447:       assertEquals(52, Node.LENGTH);
448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
449:       assertEquals(50, Node.FREE_CALL);
450:       assertEquals(8, Node.FLAG_NO_THROWS);
451:       assertEquals(39, Node.EMPTY_BLOCK);
452:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(2, Node.POST_FLAG);
456:       assertEquals(30, Node.VAR_ARGS_NAME);
457:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
458:       assertEquals(43, Node.IS_CONSTANT_NAME);
459:       assertEquals(53, Node.INPUT_ID);
460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
461:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
462:       assertEquals(55, Node.INFERRED_FUNCTION);
463:       assertEquals(29, Node.JSDOC_INFO_PROP);
464:       assertEquals(36, Node.QUOTED_PROP);
465:       assertEquals(37, Node.OPT_ARG_NAME);
466:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
467:       assertEquals(56, Node.CHANGE_TIME);
468:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
469:       assertEquals(32, Node.INCRDECR_PROP);
470:       assertEquals(48, Node.DIRECTIVES);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(12, Node.COLUMN_BITS);
473:       assertEquals(4095, Node.COLUMN_MASK);
474:       
475:       boolean boolean0 = node0.isParamList();
476:       assertTrue(boolean0);
477:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
478:       assertTrue(arrayList0.isEmpty());
479:       assertEquals(0, arrayList0.size());
480:       assertFalse(node0.isName());
481:       assertFalse(node0.isSetterDef());
482:       assertFalse(node0.isCall());
483:       assertFalse(node0.isNull());
484:       assertFalse(node0.isStringKey());
485:       assertFalse(node0.isDo());
486:       assertFalse(node0.isFunction());
487:       assertFalse(node0.isContinue());
488:       assertFalse(node0.isAssignAdd());
489:       assertFalse(node0.isLabel());
490:       assertFalse(node0.isAdd());
491:       assertEquals(0, node0.getChildCount());
492:       assertFalse(node0.isNew());
493:       assertFalse(node0.isVar());
494:       assertFalse(node0.isDefaultCase());
495:       assertFalse(node0.isEmpty());
496:       assertFalse(node0.isAssign());
497:       assertFalse(node0.isGetElem());
498:       assertFalse(node0.hasChildren());
499:       assertFalse(node0.isDelProp());
500:       assertFalse(node0.isDec());
501:       assertFalse(node0.isTypeOf());
502:       assertFalse(node0.isCast());
503:       assertFalse(node0.isDebugger());
504:       assertFalse(node0.isVoid());
505:       assertFalse(node0.isOr());
506:       assertEquals((-1), node0.getSourcePosition());
507:       assertFalse(node0.isTrue());
508:       assertFalse(node0.isNot());
509:       assertFalse(node0.isObjectLit());
510:       assertTrue(node0.isParamList());
511:       assertFalse(node0.isExprResult());
512:       assertFalse(node0.isString());
513:       assertFalse(node0.isGetProp());
514:       assertFalse(node0.isReturn());
515:       assertFalse(node0.isComma());
516:       assertFalse(node0.isWhile());
517:       assertFalse(node0.isFalse());
518:       assertFalse(node0.isBreak());
519:       assertEquals(83, node0.getType());
520:       assertEquals((-1), node0.getCharno());
521:       assertFalse(node0.isSwitch());
522:       assertFalse(node0.isAnd());
523:       assertFalse(node0.isInc());
524:       assertFalse(node0.isIn());
525:       assertFalse(node0.isThrow());
526:       assertFalse(node0.isFor());
527:       assertFalse(node0.isLabelName());
528:       assertFalse(node0.isGetterDef());
529:       assertFalse(node0.isArrayLit());
530:       assertFalse(node0.isNumber());
531:       assertEquals((-1), node0.getLineno());
532:       assertFalse(node0.isIf());
533:       assertFalse(node0.isNE());
534:       assertFalse(node0.isCase());
535:       assertFalse(node0.isWith());
536:       assertFalse(node0.isRegExp());
537:       assertFalse(node0.isScript());
538:       assertFalse(node0.hasMoreThanOneChild());
539:       assertFalse(node0.isCatch());
540:       assertFalse(node0.isInstanceOf());
541:       assertFalse(node0.isTry());
542:       assertFalse(node0.isBlock());
543:       assertFalse(node0.hasOneChild());
544:       assertFalse(node0.isThis());
545:       assertFalse(node0.isHook());
546:       assertFalse(node0.equals((Object)node1));
547:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
548:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
549:       assertEquals(53, Node.INPUT_ID);
550:       assertEquals(29, Node.JSDOC_INFO_PROP);
551:       assertEquals(47, Node.IS_DISPATCHER);
552:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
553:       assertEquals(2, Node.POST_FLAG);
554:       assertEquals(4095, Node.COLUMN_MASK);
555:       assertEquals(37, Node.OPT_ARG_NAME);
556:       assertEquals(55, Node.INFERRED_FUNCTION);
557:       assertEquals(39, Node.EMPTY_BLOCK);
558:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
559:       assertEquals(56, Node.CHANGE_TIME);
560:       assertEquals(36, Node.QUOTED_PROP);
561:       assertEquals(8, Node.FLAG_NO_THROWS);
562:       assertEquals(48, Node.DIRECTIVES);
563:       assertEquals(49, Node.DIRECT_EVAL);
564:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(52, Node.LENGTH);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(40, Node.ORIGINALNAME_PROP);
569:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
570:       assertEquals(15, Node.NO_SIDE_EFFECTS);
571:       assertEquals(57, Node.LAST_PROP);
572:       assertEquals(30, Node.VAR_ARGS_NAME);
573:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
574:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
575:       assertEquals(12, Node.COLUMN_BITS);
576:       assertEquals(51, Node.STATIC_SOURCE_FILE);
577:       assertEquals(32, Node.INCRDECR_PROP);
578:       assertEquals(1, Node.DECR_FLAG);
579:       assertEquals(43, Node.IS_CONSTANT_NAME);
580:       assertEquals(50, Node.FREE_CALL);
581:       assertEquals(46, Node.IS_NAMESPACE);
582:       assertEquals(54, Node.SLASH_V);
583:       
584:       boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
585:       assertFalse(boolean1);
586:       assertFalse(boolean1 == boolean0);
587:       
588:       Node node2 = Node.newString(0, "", 37, 9);
589:       assertFalse(node2.isTypeOf());
590:       assertFalse(node2.isNumber());
591:       assertFalse(node2.isOr());
592:       assertFalse(node2.isReturn());
593:       assertFalse(node2.isAssign());
594:       assertFalse(node2.hasChildren());
595:       assertFalse(node2.isDec());
596:       assertFalse(node2.isLabel());
597:       assertFalse(node2.hasMoreThanOneChild());
598:       assertFalse(node2.isCast());
599:       assertEquals(9, node2.getCharno());
600:       assertFalse(node2.isContinue());
601:       assertFalse(node2.isLabelName());
602:       assertFalse(node2.isGetElem());
603:       assertFalse(node2.isExprResult());
604:       assertFalse(node2.isScript());
605:       assertFalse(node2.isWhile());
606:       assertFalse(node2.isWith());
607:       assertFalse(node2.isNot());
608:       assertFalse(node2.isBlock());
609:       assertEquals(151561, node2.getSourcePosition());
610:       assertFalse(node2.isObjectLit());
611:       assertFalse(node2.hasOneChild());
612:       assertFalse(node2.isGetProp());
613:       assertFalse(node2.isComma());
614:       assertFalse(node2.isNull());
615:       assertFalse(node2.isParamList());
616:       assertEquals(0, node2.getChildCount());
617:       assertFalse(node2.isCall());
618:       assertFalse(node2.isStringKey());
619:       assertEquals(0, node2.getType());
620:       assertFalse(node2.isName());
621:       assertFalse(node2.isBreak());
622:       assertFalse(node2.isTrue());
623:       assertFalse(node2.isVoid());
624:       assertFalse(node2.isDefaultCase());
625:       assertFalse(node2.isVar());
626:       assertFalse(node2.isAssignAdd());
627:       assertFalse(node2.isDo());
628:       assertFalse(node2.isEmpty());
629:       assertFalse(node2.isAdd());
630:       assertFalse(node2.isNew());
631:       assertFalse(node2.isNE());
632:       assertFalse(node2.isIf());
633:       assertFalse(node2.isGetterDef());
634:       assertFalse(node2.isFor());
635:       assertFalse(node2.isDelProp());
636:       assertFalse(node2.isArrayLit());
637:       assertFalse(node2.isSwitch());
638:       assertFalse(node2.isRegExp());
639:       assertFalse(node2.isString());
640:       assertFalse(node2.isHook());
641:       assertFalse(node2.isDebugger());
642:       assertFalse(node2.isTry());
643:       assertFalse(node2.isCase());
644:       assertFalse(node2.isSetterDef());
645:       assertFalse(node2.isThis());
646:       assertEquals(37, node2.getLineno());
647:       assertFalse(node2.isCatch());
648:       assertFalse(node2.isInstanceOf());
649:       assertFalse(node2.isFalse());
650:       assertFalse(node2.isAnd());
651:       assertFalse(node2.isInc());
652:       assertFalse(node2.isFunction());
653:       assertFalse(node2.isIn());
654:       assertFalse(node2.isThrow());
655:       assertNotNull(node2);
656:       assertFalse(node2.equals((Object)node1));
657:       assertFalse(node2.equals((Object)node0));
658:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
659:       assertEquals(50, Node.FREE_CALL);
660:       assertEquals(40, Node.ORIGINALNAME_PROP);
661:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
662:       assertEquals(8, Node.FLAG_NO_THROWS);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(52, Node.LENGTH);
665:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
666:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
667:       assertEquals(15, Node.NO_SIDE_EFFECTS);
668:       assertEquals(39, Node.EMPTY_BLOCK);
669:       assertEquals(57, Node.LAST_PROP);
670:       assertEquals(43, Node.IS_CONSTANT_NAME);
671:       assertEquals(30, Node.VAR_ARGS_NAME);
672:       assertEquals(51, Node.STATIC_SOURCE_FILE);
673:       assertEquals(46, Node.IS_NAMESPACE);
674:       assertEquals(54, Node.SLASH_V);
675:       assertEquals(29, Node.JSDOC_INFO_PROP);
676:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
677:       assertEquals(56, Node.CHANGE_TIME);
678:       assertEquals(2, Node.POST_FLAG);
679:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
680:       assertEquals(47, Node.IS_DISPATCHER);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
683:       assertEquals(32, Node.INCRDECR_PROP);
684:       assertEquals(1, Node.DECR_FLAG);
685:       assertEquals(49, Node.DIRECT_EVAL);
686:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
687:       assertEquals(55, Node.INFERRED_FUNCTION);
688:       assertEquals(12, Node.COLUMN_BITS);
689:       assertEquals(36, Node.QUOTED_PROP);
690:       assertEquals(4095, Node.COLUMN_MASK);
691:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
692:       assertEquals(37, Node.OPT_ARG_NAME);
693:       assertEquals(48, Node.DIRECTIVES);
694:       
695:       Set<String> set0 = node0.getDirectives();
696:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
697:       assertTrue(arrayList0.isEmpty());
698:       assertEquals(0, arrayList0.size());
699:       assertFalse(node0.isName());
700:       assertFalse(node0.isSetterDef());
701:       assertFalse(node0.isCall());
702:       assertFalse(node0.isNull());
703:       assertFalse(node0.isStringKey());
704:       assertFalse(node0.isDo());
705:       assertFalse(node0.isFunction());
706:       assertFalse(node0.isContinue());
707:       assertFalse(node0.isAssignAdd());
708:       assertFalse(node0.isLabel());
709:       assertFalse(node0.isAdd());
710:       assertEquals(0, node0.getChildCount());
711:       assertFalse(node0.isNew());
712:       assertFalse(node0.isVar());
713:       assertFalse(node0.isDefaultCase());
714:       assertFalse(node0.isEmpty());
715:       assertFalse(node0.isAssign());
716:       assertFalse(node0.isGetElem());
717:       assertFalse(node0.hasChildren());
718:       assertFalse(node0.isDelProp());
719:       assertFalse(node0.isDec());
720:       assertFalse(node0.isTypeOf());
721:       assertFalse(node0.isCast());
722:       assertFalse(node0.isDebugger());
723:       assertFalse(node0.isVoid());
724:       assertFalse(node0.isOr());
725:       assertEquals((-1), node0.getSourcePosition());
726:       assertFalse(node0.isTrue());
727:       assertFalse(node0.isNot());
728:       assertFalse(node0.isObjectLit());
729:       assertTrue(node0.isParamList());
730:       assertFalse(node0.isExprResult());
731:       assertFalse(node0.isString());
732:       assertFalse(node0.isGetProp());
733:       assertFalse(node0.isReturn());
734:       assertFalse(node0.isComma());
735:       assertFalse(node0.isWhile());
736:       assertFalse(node0.isFalse());
737:       assertFalse(node0.isBreak());
738:       assertEquals(83, node0.getType());
739:       assertEquals((-1), node0.getCharno());
740:       assertFalse(node0.isSwitch());
741:       assertFalse(node0.isAnd());
742:       assertFalse(node0.isInc());
743:       assertFalse(node0.isIn());
744:       assertFalse(node0.isThrow());
745:       assertFalse(node0.isFor());
746:       assertFalse(node0.isLabelName());
747:       assertFalse(node0.isGetterDef());
748:       assertFalse(node0.isArrayLit());
749:       assertFalse(node0.isNumber());
750:       assertEquals((-1), node0.getLineno());
751:       assertFalse(node0.isIf());
752:       assertFalse(node0.isNE());
753:       assertFalse(node0.isCase());
754:       assertFalse(node0.isWith());
755:       assertFalse(node0.isRegExp());
756:       assertFalse(node0.isScript());
757:       assertFalse(node0.hasMoreThanOneChild());
758:       assertFalse(node0.isCatch());
759:       assertFalse(node0.isInstanceOf());
760:       assertFalse(node0.isTry());
761:       assertFalse(node0.isBlock());
762:       assertFalse(node0.hasOneChild());
763:       assertFalse(node0.isThis());
764:       assertFalse(node0.isHook());
765:       assertNull(set0);
766:       assertFalse(node0.equals((Object)node2));
767:       assertFalse(node0.equals((Object)node1));
768:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
769:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
770:       assertEquals(53, Node.INPUT_ID);
771:       assertEquals(29, Node.JSDOC_INFO_PROP);
772:       assertEquals(47, Node.IS_DISPATCHER);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(2, Node.POST_FLAG);
775:       assertEquals(4095, Node.COLUMN_MASK);
776:       assertEquals(37, Node.OPT_ARG_NAME);
777:       assertEquals(55, Node.INFERRED_FUNCTION);
778:       assertEquals(39, Node.EMPTY_BLOCK);
779:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
780:       assertEquals(56, Node.CHANGE_TIME);
781:       assertEquals(36, Node.QUOTED_PROP);
782:       assertEquals(8, Node.FLAG_NO_THROWS);
783:       assertEquals(48, Node.DIRECTIVES);
784:       assertEquals(49, Node.DIRECT_EVAL);
785:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
786:       assertEquals(57, Node.REFLECTED_OBJECT);
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
789:       assertEquals(40, Node.ORIGINALNAME_PROP);
790:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
791:       assertEquals(15, Node.NO_SIDE_EFFECTS);
792:       assertEquals(57, Node.LAST_PROP);
793:       assertEquals(30, Node.VAR_ARGS_NAME);
794:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
795:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
796:       assertEquals(12, Node.COLUMN_BITS);
797:       assertEquals(51, Node.STATIC_SOURCE_FILE);
798:       assertEquals(32, Node.INCRDECR_PROP);
799:       assertEquals(1, Node.DECR_FLAG);
800:       assertEquals(43, Node.IS_CONSTANT_NAME);
801:       assertEquals(50, Node.FREE_CALL);
802:       assertEquals(46, Node.IS_NAMESPACE);
803:       assertEquals(54, Node.SLASH_V);
804:       
805:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
806:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
807:       assertTrue(arrayList0.isEmpty());
808:       assertEquals(0, arrayList0.size());
809:       assertFalse(node0.isName());
810:       assertFalse(node0.isSetterDef());
811:       assertFalse(node0.isCall());
812:       assertFalse(node0.isNull());
813:       assertFalse(node0.isStringKey());
814:       assertFalse(node0.isDo());
815:       assertFalse(node0.isFunction());
816:       assertFalse(node0.isContinue());
817:       assertFalse(node0.isAssignAdd());
818:       assertFalse(node0.isLabel());
819:       assertFalse(node0.isAdd());
820:       assertEquals(0, node0.getChildCount());
821:       assertFalse(node0.isNew());
822:       assertFalse(node0.isVar());
823:       assertFalse(node0.isDefaultCase());
824:       assertFalse(node0.isEmpty());
825:       assertFalse(node0.isAssign());
826:       assertFalse(node0.isGetElem());
827:       assertFalse(node0.hasChildren());
828:       assertFalse(node0.isDelProp());
829:       assertFalse(node0.isDec());
830:       assertFalse(node0.isTypeOf());
831:       assertFalse(node0.isCast());
832:       assertFalse(node0.isDebugger());
833:       assertFalse(node0.isVoid());
834:       assertFalse(node0.isOr());
835:       assertEquals((-1), node0.getSourcePosition());
836:       assertFalse(node0.isTrue());
837:       assertFalse(node0.isNot());
838:       assertFalse(node0.isObjectLit());
839:       assertTrue(node0.isParamList());
840:       assertFalse(node0.isExprResult());
841:       assertFalse(node0.isString());
842:       assertFalse(node0.isGetProp());
843:       assertFalse(node0.isReturn());
844:       assertFalse(node0.isComma());
845:       assertFalse(node0.isWhile());
846:       assertFalse(node0.isFalse());
847:       assertFalse(node0.isBreak());
848:       assertEquals(83, node0.getType());
849:       assertEquals((-1), node0.getCharno());
850:       assertFalse(node0.isSwitch());
851:       assertFalse(node0.isAnd());
852:       assertFalse(node0.isInc());
853:       assertFalse(node0.isIn());
854:       assertFalse(node0.isThrow());
855:       assertFalse(node0.isFor());
856:       assertFalse(node0.isLabelName());
857:       assertFalse(node0.isGetterDef());
858:       assertFalse(node0.isArrayLit());
859:       assertFalse(node0.isNumber());
860:       assertEquals((-1), node0.getLineno());
861:       assertFalse(node0.isIf());
862:       assertFalse(node0.isNE());
863:       assertFalse(node0.isCase());
864:       assertFalse(node0.isWith());
865:       assertFalse(node0.isRegExp());
866:       assertFalse(node0.isScript());
867:       assertFalse(node0.hasMoreThanOneChild());
868:       assertFalse(node0.isCatch());
869:       assertFalse(node0.isInstanceOf());
870:       assertFalse(node0.isTry());
871:       assertFalse(node0.isBlock());
872:       assertFalse(node0.hasOneChild());
873:       assertFalse(node0.isThis());
874:       assertFalse(node0.isHook());
875:       assertNull(jSDocInfo0);
876:       assertFalse(node0.equals((Object)node2));
877:       assertFalse(node0.equals((Object)node1));
878:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
879:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
880:       assertEquals(53, Node.INPUT_ID);
881:       assertEquals(29, Node.JSDOC_INFO_PROP);
882:       assertEquals(47, Node.IS_DISPATCHER);
883:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
884:       assertEquals(2, Node.POST_FLAG);
885:       assertEquals(4095, Node.COLUMN_MASK);
886:       assertEquals(37, Node.OPT_ARG_NAME);
887:       assertEquals(55, Node.INFERRED_FUNCTION);
888:       assertEquals(39, Node.EMPTY_BLOCK);
889:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
890:       assertEquals(56, Node.CHANGE_TIME);
891:       assertEquals(36, Node.QUOTED_PROP);
892:       assertEquals(8, Node.FLAG_NO_THROWS);
893:       assertEquals(48, Node.DIRECTIVES);
894:       assertEquals(49, Node.DIRECT_EVAL);
895:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
896:       assertEquals(57, Node.REFLECTED_OBJECT);
897:       assertEquals(52, Node.LENGTH);
898:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
899:       assertEquals(40, Node.ORIGINALNAME_PROP);
900:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
901:       assertEquals(15, Node.NO_SIDE_EFFECTS);
902:       assertEquals(57, Node.LAST_PROP);
903:       assertEquals(30, Node.VAR_ARGS_NAME);
904:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
905:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
906:       assertEquals(12, Node.COLUMN_BITS);
907:       assertEquals(51, Node.STATIC_SOURCE_FILE);
908:       assertEquals(32, Node.INCRDECR_PROP);
909:       assertEquals(1, Node.DECR_FLAG);
910:       assertEquals(43, Node.IS_CONSTANT_NAME);
911:       assertEquals(50, Node.FREE_CALL);
912:       assertEquals(46, Node.IS_NAMESPACE);
913:       assertEquals(54, Node.SLASH_V);
914:       
915:       Node node3 = node0.srcrefTree(node2);
916:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
917:       assertTrue(arrayList0.isEmpty());
918:       assertEquals(0, arrayList0.size());
919:       assertFalse(node0.isName());
920:       assertFalse(node0.isSetterDef());
921:       assertEquals(37, node0.getLineno());
922:       assertFalse(node0.isCall());
923:       assertFalse(node0.isNull());
924:       assertFalse(node0.isStringKey());
925:       assertFalse(node0.isDo());
926:       assertEquals(9, node0.getCharno());
927:       assertFalse(node0.isFunction());
928:       assertFalse(node0.isContinue());
929:       assertFalse(node0.isAssignAdd());
930:       assertFalse(node0.isLabel());
931:       assertFalse(node0.isAdd());
932:       assertEquals(0, node0.getChildCount());
933:       assertFalse(node0.isNew());
934:       assertFalse(node0.isVar());
935:       assertFalse(node0.isDefaultCase());
936:       assertFalse(node0.isEmpty());
937:       assertFalse(node0.isAssign());
938:       assertFalse(node0.isGetElem());
939:       assertFalse(node0.hasChildren());
940:       assertFalse(node0.isDelProp());
941:       assertFalse(node0.isDec());
942:       assertFalse(node0.isTypeOf());
943:       assertFalse(node0.isCast());
944:       assertFalse(node0.isDebugger());
945:       assertFalse(node0.isVoid());
946:       assertFalse(node0.isOr());
947:       assertFalse(node0.isTrue());
948:       assertEquals(151561, node0.getSourcePosition());
949:       assertFalse(node0.isNot());
950:       assertFalse(node0.isObjectLit());
951:       assertTrue(node0.isParamList());
952:       assertFalse(node0.isExprResult());
953:       assertFalse(node0.isString());
954:       assertFalse(node0.isGetProp());
955:       assertFalse(node0.isReturn());
956:       assertFalse(node0.isComma());
957:       assertFalse(node0.isWhile());
958:       assertFalse(node0.isFalse());
959:       assertFalse(node0.isBreak());
960:       assertEquals(83, node0.getType());
961:       assertFalse(node0.isSwitch());
962:       assertFalse(node0.isAnd());
963:       assertFalse(node0.isInc());
964:       assertFalse(node0.isIn());
965:       assertFalse(node0.isThrow());
966:       assertFalse(node0.isFor());
967:       assertFalse(node0.isLabelName());
968:       assertFalse(node0.isGetterDef());
969:       assertFalse(node0.isArrayLit());
970:       assertFalse(node0.isNumber());
971:       assertFalse(node0.isIf());
972:       assertFalse(node0.isNE());
973:       assertFalse(node0.isCase());
974:       assertFalse(node0.isWith());
975:       assertFalse(node0.isRegExp());
976:       assertFalse(node0.isScript());
977:       assertFalse(node0.hasMoreThanOneChild());
978:       assertFalse(node0.isCatch());
979:       assertFalse(node0.isInstanceOf());
980:       assertFalse(node0.isTry());
981:       assertFalse(node0.isBlock());
982:       assertFalse(node0.hasOneChild());
983:       assertFalse(node0.isThis());
984:       assertFalse(node0.isHook());
985:       assertFalse(node2.isTypeOf());
986:       assertFalse(node2.isNumber());
987:       assertFalse(node2.isOr());
988:       assertFalse(node2.isReturn());
989:       assertFalse(node2.isAssign());
990:       assertFalse(node2.hasChildren());
991:       assertFalse(node2.isDec());
992:       assertFalse(node2.isLabel());
993:       assertFalse(node2.hasMoreThanOneChild());
994:       assertFalse(node2.isCast());
995:       assertEquals(9, node2.getCharno());
996:       assertFalse(node2.isContinue());
997:       assertFalse(node2.isLabelName());
998:       assertFalse(node2.isGetElem());
999:       assertFalse(node2.isExprResult());
1000:       assertFalse(node2.isScript());
1001:       assertFalse(node2.isWhile());
1002:       assertFalse(node2.isWith());
1003:       assertFalse(node2.isNot());
1004:       assertFalse(node2.isBlock());
1005:       assertEquals(151561, node2.getSourcePosition());
1006:       assertFalse(node2.isObjectLit());
1007:       assertFalse(node2.hasOneChild());
1008:       assertFalse(node2.isGetProp());
1009:       assertFalse(node2.isComma());
1010:       assertFalse(node2.isNull());
1011:       assertFalse(node2.isParamList());
1012:       assertEquals(0, node2.getChildCount());
1013:       assertFalse(node2.isCall());
1014:       assertFalse(node2.isStringKey());
1015:       assertEquals(0, node2.getType());
1016:       assertFalse(node2.isName());
1017:       assertFalse(node2.isBreak());
1018:       assertFalse(node2.isTrue());
1019:       assertFalse(node2.isVoid());
1020:       assertFalse(node2.isDefaultCase());
1021:       assertFalse(node2.isVar());
1022:       assertFalse(node2.isAssignAdd());
1023:       assertFalse(node2.isDo());
1024:       assertFalse(node2.isEmpty());
1025:       assertFalse(node2.isAdd());
1026:       assertFalse(node2.isNew());
1027:       assertFalse(node2.isNE());
1028:       assertFalse(node2.isIf());
1029:       assertFalse(node2.isGetterDef());
1030:       assertFalse(node2.isFor());
1031:       assertFalse(node2.isDelProp());
1032:       assertFalse(node2.isArrayLit());
1033:       assertFalse(node2.isSwitch());
1034:       assertFalse(node2.isRegExp());
1035:       assertFalse(node2.isString());
1036:       assertFalse(node2.isHook());
1037:       assertFalse(node2.isDebugger());
1038:       assertFalse(node2.isTry());
1039:       assertFalse(node2.isCase());
1040:       assertFalse(node2.isSetterDef());
1041:       assertFalse(node2.isThis());
1042:       assertEquals(37, node2.getLineno());
1043:       assertFalse(node2.isCatch());
1044:       assertFalse(node2.isInstanceOf());
1045:       assertFalse(node2.isFalse());
1046:       assertFalse(node2.isAnd());
1047:       assertFalse(node2.isInc());
1048:       assertFalse(node2.isFunction());
1049:       assertFalse(node2.isIn());
1050:       assertFalse(node2.isThrow());
1051:       assertFalse(node3.isNE());
1052:       assertFalse(node3.isIf());
1053:       assertFalse(node3.isDelProp());
1054:       assertFalse(node3.isCase());
1055:       assertFalse(node3.isString());
1056:       assertFalse(node3.isEmpty());
1057:       assertFalse(node3.isIn());
1058:       assertFalse(node3.isGetterDef());
1059:       assertFalse(node3.isDebugger());
1060:       assertFalse(node3.isInc());
1061:       assertFalse(node3.isDefaultCase());
1062:       assertFalse(node3.isArrayLit());
1063:       assertFalse(node3.isSwitch());
1064:       assertFalse(node3.isFalse());
1065:       assertFalse(node3.isThrow());
1066:       assertFalse(node3.isFunction());
1067:       assertEquals(0, node3.getChildCount());
1068:       assertFalse(node3.isGetProp());
1069:       assertFalse(node3.isBreak());
1070:       assertFalse(node3.isName());
1071:       assertFalse(node3.isAnd());
1072:       assertEquals(151561, node3.getSourcePosition());
1073:       assertTrue(node3.isParamList());
1074:       assertFalse(node3.isNull());
1075:       assertEquals(83, node3.getType());
1076:       assertFalse(node3.isNot());
1077:       assertFalse(node3.isObjectLit());
1078:       assertFalse(node3.isTrue());
1079:       assertFalse(node3.isExprResult());
1080:       assertFalse(node3.isVoid());
1081:       assertFalse(node3.isGetElem());
1082:       assertFalse(node3.isWhile());
1083:       assertFalse(node3.isCall());
1084:       assertFalse(node3.isDec());
1085:       assertFalse(node3.isTypeOf());
1086:       assertFalse(node3.hasChildren());
1087:       assertFalse(node3.isComma());
1088:       assertFalse(node3.isAssign());
1089:       assertFalse(node3.isAssignAdd());
1090:       assertFalse(node3.isLabel());
1091:       assertFalse(node3.isReturn());
1092:       assertFalse(node3.isLabelName());
1093:       assertFalse(node3.isNumber());
1094:       assertFalse(node3.isOr());
1095:       assertFalse(node3.isNew());
1096:       assertFalse(node3.isAdd());
1097:       assertFalse(node3.isDo());
1098:       assertFalse(node3.isContinue());
1099:       assertEquals(9, node3.getCharno());
1100:       assertFalse(node3.isVar());
1101:       assertFalse(node3.isCast());
1102:       assertEquals(37, node3.getLineno());
1103:       assertFalse(node3.isSetterDef());
1104:       assertFalse(node3.isThis());
1105:       assertFalse(node3.isStringKey());
1106:       assertFalse(node3.isBlock());
1107:       assertFalse(node3.isScript());
1108:       assertFalse(node3.hasOneChild());
1109:       assertFalse(node3.isTry());
1110:       assertFalse(node3.isCatch());
1111:       assertFalse(node3.isFor());
1112:       assertFalse(node3.isInstanceOf());
1113:       assertFalse(node3.isHook());
1114:       assertFalse(node3.hasMoreThanOneChild());
1115:       assertFalse(node3.isWith());
1116:       assertFalse(node3.isRegExp());
1117:       assertNotNull(node3);
1118:       assertSame(node0, node3);
1119:       assertSame(node3, node0);
1120:       assertFalse(node0.equals((Object)node2));
1121:       assertFalse(node0.equals((Object)node1));
1122:       assertFalse(node2.equals((Object)node1));
1123:       assertFalse(node2.equals((Object)node0));
1124:       assertFalse(node3.equals((Object)node1));
1125:       assertFalse(node3.equals((Object)node2));
1126:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1127:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1128:       assertEquals(53, Node.INPUT_ID);
1129:       assertEquals(29, Node.JSDOC_INFO_PROP);
1130:       assertEquals(47, Node.IS_DISPATCHER);
1131:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1132:       assertEquals(2, Node.POST_FLAG);
1133:       assertEquals(4095, Node.COLUMN_MASK);
1134:       assertEquals(37, Node.OPT_ARG_NAME);
1135:       assertEquals(55, Node.INFERRED_FUNCTION);
1136:       assertEquals(39, Node.EMPTY_BLOCK);
1137:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1138:       assertEquals(56, Node.CHANGE_TIME);
1139:       assertEquals(36, Node.QUOTED_PROP);
1140:       assertEquals(8, Node.FLAG_NO_THROWS);
1141:       assertEquals(48, Node.DIRECTIVES);
1142:       assertEquals(49, Node.DIRECT_EVAL);
1143:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1144:       assertEquals(57, Node.REFLECTED_OBJECT);
1145:       assertEquals(52, Node.LENGTH);
1146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1147:       assertEquals(40, Node.ORIGINALNAME_PROP);
1148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1149:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1150:       assertEquals(57, Node.LAST_PROP);
1151:       assertEquals(30, Node.VAR_ARGS_NAME);
1152:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1153:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1154:       assertEquals(12, Node.COLUMN_BITS);
1155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1156:       assertEquals(32, Node.INCRDECR_PROP);
1157:       assertEquals(1, Node.DECR_FLAG);
1158:       assertEquals(43, Node.IS_CONSTANT_NAME);
1159:       assertEquals(50, Node.FREE_CALL);
1160:       assertEquals(46, Node.IS_NAMESPACE);
1161:       assertEquals(54, Node.SLASH_V);
1162:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1163:       assertEquals(50, Node.FREE_CALL);
1164:       assertEquals(40, Node.ORIGINALNAME_PROP);
1165:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1166:       assertEquals(8, Node.FLAG_NO_THROWS);
1167:       assertEquals(57, Node.REFLECTED_OBJECT);
1168:       assertEquals(52, Node.LENGTH);
1169:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1170:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1171:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1172:       assertEquals(39, Node.EMPTY_BLOCK);
1173:       assertEquals(57, Node.LAST_PROP);
1174:       assertEquals(43, Node.IS_CONSTANT_NAME);
1175:       assertEquals(30, Node.VAR_ARGS_NAME);
1176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1177:       assertEquals(46, Node.IS_NAMESPACE);
1178:       assertEquals(54, Node.SLASH_V);
1179:       assertEquals(29, Node.JSDOC_INFO_PROP);
1180:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1181:       assertEquals(56, Node.CHANGE_TIME);
1182:       assertEquals(2, Node.POST_FLAG);
1183:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1184:       assertEquals(47, Node.IS_DISPATCHER);
1185:       assertEquals(53, Node.INPUT_ID);
1186:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1187:       assertEquals(32, Node.INCRDECR_PROP);
1188:       assertEquals(1, Node.DECR_FLAG);
1189:       assertEquals(49, Node.DIRECT_EVAL);
1190:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1191:       assertEquals(55, Node.INFERRED_FUNCTION);
1192:       assertEquals(12, Node.COLUMN_BITS);
1193:       assertEquals(36, Node.QUOTED_PROP);
1194:       assertEquals(4095, Node.COLUMN_MASK);
1195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1196:       assertEquals(37, Node.OPT_ARG_NAME);
1197:       assertEquals(48, Node.DIRECTIVES);
1198:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1199:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1200:       assertEquals(39, Node.EMPTY_BLOCK);
1201:       assertEquals(48, Node.DIRECTIVES);
1202:       assertEquals(40, Node.ORIGINALNAME_PROP);
1203:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1204:       assertEquals(4095, Node.COLUMN_MASK);
1205:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1206:       assertEquals(57, Node.LAST_PROP);
1207:       assertEquals(36, Node.QUOTED_PROP);
1208:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1209:       assertEquals(49, Node.DIRECT_EVAL);
1210:       assertEquals(55, Node.INFERRED_FUNCTION);
1211:       assertEquals(53, Node.INPUT_ID);
1212:       assertEquals(57, Node.REFLECTED_OBJECT);
1213:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1214:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1215:       assertEquals(52, Node.LENGTH);
1216:       assertEquals(8, Node.FLAG_NO_THROWS);
1217:       assertEquals(47, Node.IS_DISPATCHER);
1218:       assertEquals(56, Node.CHANGE_TIME);
1219:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1220:       assertEquals(29, Node.JSDOC_INFO_PROP);
1221:       assertEquals(37, Node.OPT_ARG_NAME);
1222:       assertEquals(32, Node.INCRDECR_PROP);
1223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1224:       assertEquals(12, Node.COLUMN_BITS);
1225:       assertEquals(2, Node.POST_FLAG);
1226:       assertEquals(30, Node.VAR_ARGS_NAME);
1227:       assertEquals(43, Node.IS_CONSTANT_NAME);
1228:       assertEquals(1, Node.DECR_FLAG);
1229:       assertEquals(54, Node.SLASH_V);
1230:       assertEquals(46, Node.IS_NAMESPACE);
1231:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1232:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1233:       assertEquals(50, Node.FREE_CALL);
1234:       
1235:       boolean boolean2 = node3.isSwitch();
1236:       assertFalse(boolean2);
1237:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1238:       assertTrue(arrayList0.isEmpty());
1239:       assertEquals(0, arrayList0.size());
1240:       assertFalse(node0.isName());
1241:       assertFalse(node0.isSetterDef());
1242:       assertEquals(37, node0.getLineno());
1243:       assertFalse(node0.isCall());
1244:       assertFalse(node0.isNull());
1245:       assertFalse(node0.isStringKey());
1246:       assertFalse(node0.isDo());
1247:       assertEquals(9, node0.getCharno());
1248:       assertFalse(node0.isFunction());
1249:       assertFalse(node0.isContinue());
1250:       assertFalse(node0.isAssignAdd());
1251:       assertFalse(node0.isLabel());
1252:       assertFalse(node0.isAdd());
1253:       assertEquals(0, node0.getChildCount());
1254:       assertFalse(node0.isNew());
1255:       assertFalse(node0.isVar());
1256:       assertFalse(node0.isDefaultCase());
1257:       assertFalse(node0.isEmpty());
1258:       assertFalse(node0.isAssign());
1259:       assertFalse(node0.isGetElem());
1260:       assertFalse(node0.hasChildren());
1261:       assertFalse(node0.isDelProp());
1262:       assertFalse(node0.isDec());
1263:       assertFalse(node0.isTypeOf());
1264:       assertFalse(node0.isCast());
1265:       assertFalse(node0.isDebugger());
1266:       assertFalse(node0.isVoid());
1267:       assertFalse(node0.isOr());
1268:       assertFalse(node0.isTrue());
1269:       assertEquals(151561, node0.getSourcePosition());
1270:       assertFalse(node0.isNot());
1271:       assertFalse(node0.isObjectLit());
1272:       assertTrue(node0.isParamList());
1273:       assertFalse(node0.isExprResult());
1274:       assertFalse(node0.isString());
1275:       assertFalse(node0.isGetProp());
1276:       assertFalse(node0.isReturn());
1277:       assertFalse(node0.isComma());
1278:       assertFalse(node0.isWhile());
1279:       assertFalse(node0.isFalse());
1280:       assertFalse(node0.isBreak());
1281:       assertEquals(83, node0.getType());
1282:       assertFalse(node0.isSwitch());
1283:       assertFalse(node0.isAnd());
1284:       assertFalse(node0.isInc());
1285:       assertFalse(node0.isIn());
1286:       assertFalse(node0.isThrow());
1287:       assertFalse(node0.isFor());
1288:       assertFalse(node0.isLabelName());
1289:       assertFalse(node0.isGetterDef());
1290:       assertFalse(node0.isArrayLit());
1291:       assertFalse(node0.isNumber());
1292:       assertFalse(node0.isIf());
1293:       assertFalse(node0.isNE());
1294:       assertFalse(node0.isCase());
1295:       assertFalse(node0.isWith());
1296:       assertFalse(node0.isRegExp());
1297:       assertFalse(node0.isScript());
1298:       assertFalse(node0.hasMoreThanOneChild());
1299:       assertFalse(node0.isCatch());
1300:       assertFalse(node0.isInstanceOf());
1301:       assertFalse(node0.isTry());
1302:       assertFalse(node0.isBlock());
1303:       assertFalse(node0.hasOneChild());
1304:       assertFalse(node0.isThis());
1305:       assertFalse(node0.isHook());
1306:       assertFalse(node2.isTypeOf());
1307:       assertFalse(node2.isNumber());
1308:       assertFalse(node2.isOr());
1309:       assertFalse(node2.isReturn());
1310:       assertFalse(node2.isAssign());
1311:       assertFalse(node2.hasChildren());
1312:       assertFalse(node2.isDec());
1313:       assertFalse(node2.isLabel());
1314:       assertFalse(node2.hasMoreThanOneChild());
1315:       assertFalse(node2.isCast());
1316:       assertEquals(9, node2.getCharno());
1317:       assertFalse(node2.isContinue());
1318:       assertFalse(node2.isLabelName());
1319:       assertFalse(node2.isGetElem());
1320:       assertFalse(node2.isExprResult());
1321:       assertFalse(node2.isScript());
1322:       assertFalse(node2.isWhile());
1323:       assertFalse(node2.isWith());
1324:       assertFalse(node2.isNot());
1325:       assertFalse(node2.isBlock());
1326:       assertEquals(151561, node2.getSourcePosition());
1327:       assertFalse(node2.isObjectLit());
1328:       assertFalse(node2.hasOneChild());
1329:       assertFalse(node2.isGetProp());
1330:       assertFalse(node2.isComma());
1331:       assertFalse(node2.isNull());
1332:       assertFalse(node2.isParamList());
1333:       assertEquals(0, node2.getChildCount());
1334:       assertFalse(node2.isCall());
1335:       assertFalse(node2.isStringKey());
1336:       assertEquals(0, node2.getType());
1337:       assertFalse(node2.isName());
1338:       assertFalse(node2.isBreak());
1339:       assertFalse(node2.isTrue());
1340:       assertFalse(node2.isVoid());
1341:       assertFalse(node2.isDefaultCase());
1342:       assertFalse(node2.isVar());
1343:       assertFalse(node2.isAssignAdd());
1344:       assertFalse(node2.isDo());
1345:       assertFalse(node2.isEmpty());
1346:       assertFalse(node2.isAdd());
1347:       assertFalse(node2.isNew());
1348:       assertFalse(node2.isNE());
1349:       assertFalse(node2.isIf());
1350:       assertFalse(node2.isGetterDef());
1351:       assertFalse(node2.isFor());
1352:       assertFalse(node2.isDelProp());
1353:       assertFalse(node2.isArrayLit());
1354:       assertFalse(node2.isSwitch());
1355:       assertFalse(node2.isRegExp());
1356:       assertFalse(node2.isString());
1357:       assertFalse(node2.isHook());
1358:       assertFalse(node2.isDebugger());
1359:       assertFalse(node2.isTry());
1360:       assertFalse(node2.isCase());
1361:       assertFalse(node2.isSetterDef());
1362:       assertFalse(node2.isThis());
1363:       assertEquals(37, node2.getLineno());
1364:       assertFalse(node2.isCatch());
1365:       assertFalse(node2.isInstanceOf());
1366:       assertFalse(node2.isFalse());
1367:       assertFalse(node2.isAnd());
1368:       assertFalse(node2.isInc());
1369:       assertFalse(node2.isFunction());
1370:       assertFalse(node2.isIn());
1371:       assertFalse(node2.isThrow());
1372:       assertFalse(node3.isNE());
1373:       assertFalse(node3.isIf());
1374:       assertFalse(node3.isDelProp());
1375:       assertFalse(node3.isCase());
1376:       assertFalse(node3.isString());
1377:       assertFalse(node3.isEmpty());
1378:       assertFalse(node3.isIn());
1379:       assertFalse(node3.isGetterDef());
1380:       assertFalse(node3.isDebugger());
1381:       assertFalse(node3.isInc());
1382:       assertFalse(node3.isDefaultCase());
1383:       assertFalse(node3.isArrayLit());
1384:       assertFalse(node3.isSwitch());
1385:       assertFalse(node3.isFalse());
1386:       assertFalse(node3.isThrow());
1387:       assertFalse(node3.isFunction());
1388:       assertEquals(0, node3.getChildCount());
1389:       assertFalse(node3.isGetProp());
1390:       assertFalse(node3.isBreak());
1391:       assertFalse(node3.isName());
1392:       assertFalse(node3.isAnd());
1393:       assertEquals(151561, node3.getSourcePosition());
1394:       assertTrue(node3.isParamList());
1395:       assertFalse(node3.isNull());
1396:       assertEquals(83, node3.getType());
1397:       assertFalse(node3.isNot());
1398:       assertFalse(node3.isObjectLit());
1399:       assertFalse(node3.isTrue());
1400:       assertFalse(node3.isExprResult());
1401:       assertFalse(node3.isVoid());
1402:       assertFalse(node3.isGetElem());
1403:       assertFalse(node3.isWhile());
1404:       assertFalse(node3.isCall());
1405:       assertFalse(node3.isDec());
1406:       assertFalse(node3.isTypeOf());
1407:       assertFalse(node3.hasChildren());
1408:       assertFalse(node3.isComma());
1409:       assertFalse(node3.isAssign());
1410:       assertFalse(node3.isAssignAdd());
1411:       assertFalse(node3.isLabel());
1412:       assertFalse(node3.isReturn());
1413:       assertFalse(node3.isLabelName());
1414:       assertFalse(node3.isNumber());
1415:       assertFalse(node3.isOr());
1416:       assertFalse(node3.isNew());
1417:       assertFalse(node3.isAdd());
1418:       assertFalse(node3.isDo());
1419:       assertFalse(node3.isContinue());
1420:       assertEquals(9, node3.getCharno());
1421:       assertFalse(node3.isVar());
1422:       assertFalse(node3.isCast());
1423:       assertEquals(37, node3.getLineno());
1424:       assertFalse(node3.isSetterDef());
1425:       assertFalse(node3.isThis());
1426:       assertFalse(node3.isStringKey());
1427:       assertFalse(node3.isBlock());
1428:       assertFalse(node3.isScript());
1429:       assertFalse(node3.hasOneChild());
1430:       assertFalse(node3.isTry());
1431:       assertFalse(node3.isCatch());
1432:       assertFalse(node3.isFor());
1433:       assertFalse(node3.isInstanceOf());
1434:       assertFalse(node3.isHook());
1435:       assertFalse(node3.hasMoreThanOneChild());
1436:       assertFalse(node3.isWith());
1437:       assertFalse(node3.isRegExp());
1438:       assertSame(node0, node3);
1439:       assertSame(node3, node0);
1440:       assertFalse(node0.equals((Object)node2));
1441:       assertFalse(node0.equals((Object)node1));
1442:       assertFalse(node2.equals((Object)node1));
1443:       assertFalse(node2.equals((Object)node3));
1444:       assertFalse(node2.equals((Object)node0));
1445:       assertFalse(node3.equals((Object)node1));
1446:       assertFalse(node3.equals((Object)node2));
1447:       assertFalse(boolean2 == boolean0);
1448:       assertTrue(boolean2 == boolean1);
1449:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1450:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1451:       assertEquals(53, Node.INPUT_ID);
1452:       assertEquals(29, Node.JSDOC_INFO_PROP);
1453:       assertEquals(47, Node.IS_DISPATCHER);
1454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1455:       assertEquals(2, Node.POST_FLAG);
1456:       assertEquals(4095, Node.COLUMN_MASK);
1457:       assertEquals(37, Node.OPT_ARG_NAME);
1458:       assertEquals(55, Node.INFERRED_FUNCTION);
1459:       assertEquals(39, Node.EMPTY_BLOCK);
1460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1461:       assertEquals(56, Node.CHANGE_TIME);
1462:       assertEquals(36, Node.QUOTED_PROP);
1463:       assertEquals(8, Node.FLAG_NO_THROWS);
1464:       assertEquals(48, Node.DIRECTIVES);
1465:       assertEquals(49, Node.DIRECT_EVAL);
1466:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1467:       assertEquals(57, Node.REFLECTED_OBJECT);
1468:       assertEquals(52, Node.LENGTH);
1469:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1470:       assertEquals(40, Node.ORIGINALNAME_PROP);
1471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1472:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1473:       assertEquals(57, Node.LAST_PROP);
1474:       assertEquals(30, Node.VAR_ARGS_NAME);
1475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1476:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1477:       assertEquals(12, Node.COLUMN_BITS);
1478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1479:       assertEquals(32, Node.INCRDECR_PROP);
1480:       assertEquals(1, Node.DECR_FLAG);
1481:       assertEquals(43, Node.IS_CONSTANT_NAME);
1482:       assertEquals(50, Node.FREE_CALL);
1483:       assertEquals(46, Node.IS_NAMESPACE);
1484:       assertEquals(54, Node.SLASH_V);
1485:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1486:       assertEquals(50, Node.FREE_CALL);
1487:       assertEquals(40, Node.ORIGINALNAME_PROP);
1488:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1489:       assertEquals(8, Node.FLAG_NO_THROWS);
1490:       assertEquals(57, Node.REFLECTED_OBJECT);
1491:       assertEquals(52, Node.LENGTH);
1492:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1493:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1494:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1495:       assertEquals(39, Node.EMPTY_BLOCK);
1496:       assertEquals(57, Node.LAST_PROP);
1497:       assertEquals(43, Node.IS_CONSTANT_NAME);
1498:       assertEquals(30, Node.VAR_ARGS_NAME);
1499:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1500:       assertEquals(46, Node.IS_NAMESPACE);
1501:       assertEquals(54, Node.SLASH_V);
1502:       assertEquals(29, Node.JSDOC_INFO_PROP);
1503:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(2, Node.POST_FLAG);
1506:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1507:       assertEquals(47, Node.IS_DISPATCHER);
1508:       assertEquals(53, Node.INPUT_ID);
1509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1510:       assertEquals(32, Node.INCRDECR_PROP);
1511:       assertEquals(1, Node.DECR_FLAG);
1512:       assertEquals(49, Node.DIRECT_EVAL);
1513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1514:       assertEquals(55, Node.INFERRED_FUNCTION);
1515:       assertEquals(12, Node.COLUMN_BITS);
1516:       assertEquals(36, Node.QUOTED_PROP);
1517:       assertEquals(4095, Node.COLUMN_MASK);
1518:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1519:       assertEquals(37, Node.OPT_ARG_NAME);
1520:       assertEquals(48, Node.DIRECTIVES);
1521:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1522:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1523:       assertEquals(39, Node.EMPTY_BLOCK);
1524:       assertEquals(48, Node.DIRECTIVES);
1525:       assertEquals(40, Node.ORIGINALNAME_PROP);
1526:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1527:       assertEquals(4095, Node.COLUMN_MASK);
1528:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1529:       assertEquals(57, Node.LAST_PROP);
1530:       assertEquals(36, Node.QUOTED_PROP);
1531:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1532:       assertEquals(49, Node.DIRECT_EVAL);
1533:       assertEquals(55, Node.INFERRED_FUNCTION);
1534:       assertEquals(53, Node.INPUT_ID);
1535:       assertEquals(57, Node.REFLECTED_OBJECT);
1536:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1537:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1538:       assertEquals(52, Node.LENGTH);
1539:       assertEquals(8, Node.FLAG_NO_THROWS);
1540:       assertEquals(47, Node.IS_DISPATCHER);
1541:       assertEquals(56, Node.CHANGE_TIME);
1542:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1543:       assertEquals(29, Node.JSDOC_INFO_PROP);
1544:       assertEquals(37, Node.OPT_ARG_NAME);
1545:       assertEquals(32, Node.INCRDECR_PROP);
1546:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1547:       assertEquals(12, Node.COLUMN_BITS);
1548:       assertEquals(2, Node.POST_FLAG);
1549:       assertEquals(30, Node.VAR_ARGS_NAME);
1550:       assertEquals(43, Node.IS_CONSTANT_NAME);
1551:       assertEquals(1, Node.DECR_FLAG);
1552:       assertEquals(54, Node.SLASH_V);
1553:       assertEquals(46, Node.IS_NAMESPACE);
1554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1555:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1556:       assertEquals(50, Node.FREE_CALL);
1557:       
1558:       Node node4 = Node.newString("Object#Key");
1559:       assertFalse(node4.isCatch());
1560:       assertEquals(40, node4.getType());
1561:       assertEquals(0, node4.getChildCount());
1562:       assertFalse(node4.isDefaultCase());
1563:       assertFalse(node4.isSetterDef());
1564:       assertFalse(node4.isTry());
1565:       assertFalse(node4.isVar());
1566:       assertFalse(node4.isArrayLit());
1567:       assertFalse(node4.isStringKey());
1568:       assertFalse(node4.isDebugger());
1569:       assertFalse(node4.isGetterDef());
1570:       assertFalse(node4.isFunction());
1571:       assertFalse(node4.isParamList());
1572:       assertFalse(node4.isLabel());
1573:       assertFalse(node4.isReturn());
1574:       assertFalse(node4.isOr());
1575:       assertFalse(node4.hasChildren());
1576:       assertFalse(node4.isWhile());
1577:       assertFalse(node4.isEmpty());
1578:       assertFalse(node4.isAdd());
1579:       assertFalse(node4.isNew());
1580:       assertFalse(node4.isAssignAdd());
1581:       assertFalse(node4.isDo());
1582:       assertFalse(node4.isCall());
1583:       assertFalse(node4.isAssign());
1584:       assertFalse(node4.isDec());
1585:       assertFalse(node4.isNull());
1586:       assertFalse(node4.isTypeOf());
1587:       assertFalse(node4.isTrue());
1588:       assertFalse(node4.isExprResult());
1589:       assertFalse(node4.isName());
1590:       assertFalse(node4.isGetElem());
1591:       assertFalse(node4.isVoid());
1592:       assertFalse(node4.isBreak());
1593:       assertFalse(node4.isDelProp());
1594:       assertFalse(node4.isAnd());
1595:       assertFalse(node4.isInstanceOf());
1596:       assertFalse(node4.isWith());
1597:       assertFalse(node4.isObjectLit());
1598:       assertFalse(node4.isNot());
1599:       assertFalse(node4.isComma());
1600:       assertFalse(node4.isScript());
1601:       assertFalse(node4.isThis());
1602:       assertFalse(node4.isGetProp());
1603:       assertFalse(node4.hasOneChild());
1604:       assertFalse(node4.isCast());
1605:       assertFalse(node4.isThrow());
1606:       assertFalse(node4.isFalse());
1607:       assertEquals((-1), node4.getCharno());
1608:       assertEquals((-1), node4.getSourcePosition());
1609:       assertFalse(node4.isSwitch());
1610:       assertFalse(node4.isLabelName());
1611:       assertFalse(node4.isIn());
1612:       assertFalse(node4.hasMoreThanOneChild());
1613:       assertFalse(node4.isContinue());
1614:       assertFalse(node4.isNumber());
1615:       assertFalse(node4.isInc());
1616:       assertFalse(node4.isCase());
1617:       assertTrue(node4.isString());
1618:       assertFalse(node4.isHook());
1619:       assertFalse(node4.isBlock());
1620:       assertFalse(node4.isFor());
1621:       assertFalse(node4.isRegExp());
1622:       assertFalse(node4.isIf());
1623:       assertFalse(node4.isNE());
1624:       assertEquals((-1), node4.getLineno());
1625:       assertNotNull(node4);
1626:       assertNotSame(node4, node2);
1627:       assertFalse(node4.equals((Object)node1));
1628:       assertFalse(node4.equals((Object)node2));
1629:       assertFalse(node4.equals((Object)node3));
1630:       assertFalse(node4.equals((Object)node0));
1631:       assertEquals(37, Node.OPT_ARG_NAME);
1632:       assertEquals(46, Node.IS_NAMESPACE);
1633:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1634:       assertEquals(47, Node.IS_DISPATCHER);
1635:       assertEquals(2, Node.POST_FLAG);
1636:       assertEquals(56, Node.CHANGE_TIME);
1637:       assertEquals(49, Node.DIRECT_EVAL);
1638:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1639:       assertEquals(53, Node.INPUT_ID);
1640:       assertEquals(57, Node.REFLECTED_OBJECT);
1641:       assertEquals(36, Node.QUOTED_PROP);
1642:       assertEquals(30, Node.VAR_ARGS_NAME);
1643:       assertEquals(52, Node.LENGTH);
1644:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1645:       assertEquals(55, Node.INFERRED_FUNCTION);
1646:       assertEquals(29, Node.JSDOC_INFO_PROP);
1647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1649:       assertEquals(57, Node.LAST_PROP);
1650:       assertEquals(48, Node.DIRECTIVES);
1651:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1652:       assertEquals(39, Node.EMPTY_BLOCK);
1653:       assertEquals(4095, Node.COLUMN_MASK);
1654:       assertEquals(8, Node.FLAG_NO_THROWS);
1655:       assertEquals(50, Node.FREE_CALL);
1656:       assertEquals(40, Node.ORIGINALNAME_PROP);
1657:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1658:       assertEquals(43, Node.IS_CONSTANT_NAME);
1659:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1660:       assertEquals(54, Node.SLASH_V);
1661:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1662:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1663:       assertEquals(1, Node.DECR_FLAG);
1664:       assertEquals(12, Node.COLUMN_BITS);
1665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1666:       assertEquals(32, Node.INCRDECR_PROP);
1667:       
1668:       Node node5 = Node.newNumber((double) 37);
1669:       assertFalse(node5.isCast());
1670:       assertFalse(node5.hasOneChild());
1671:       assertFalse(node5.isGetElem());
1672:       assertFalse(node5.isLabelName());
1673:       assertFalse(node5.isScript());
1674:       assertEquals((-1), node5.getSourcePosition());
1675:       assertFalse(node5.isNot());
1676:       assertFalse(node5.isOr());
1677:       assertFalse(node5.isObjectLit());
1678:       assertFalse(node5.hasMoreThanOneChild());
1679:       assertFalse(node5.isInstanceOf());
1680:       assertFalse(node5.isReturn());
1681:       assertEquals((-1), node5.getLineno());
1682:       assertFalse(node5.isWhile());
1683:       assertFalse(node5.isComma());
1684:       assertFalse(node5.isDec());
1685:       assertFalse(node5.isBreak());
1686:       assertFalse(node5.hasChildren());
1687:       assertFalse(node5.isBlock());
1688:       assertFalse(node5.isThis());
1689:       assertFalse(node5.isExprResult());
1690:       assertEquals(39, node5.getType());
1691:       assertFalse(node5.isAssign());
1692:       assertFalse(node5.isWith());
1693:       assertFalse(node5.isTypeOf());
1694:       assertFalse(node5.isVar());
1695:       assertFalse(node5.isHook());
1696:       assertFalse(node5.isCall());
1697:       assertFalse(node5.isStringKey());
1698:       assertFalse(node5.isNew());
1699:       assertFalse(node5.isName());
1700:       assertFalse(node5.isSwitch());
1701:       assertFalse(node5.isParamList());
1702:       assertEquals((-1), node5.getCharno());
1703:       assertFalse(node5.isNull());
1704:       assertFalse(node5.isAdd());
1705:       assertFalse(node5.isAssignAdd());
1706:       assertFalse(node5.isDo());
1707:       assertFalse(node5.isDefaultCase());
1708:       assertFalse(node5.isLabel());
1709:       assertEquals(0, node5.getChildCount());
1710:       assertFalse(node5.isArrayLit());
1711:       assertFalse(node5.isTry());
1712:       assertFalse(node5.isFor());
1713:       assertFalse(node5.isVoid());
1714:       assertFalse(node5.isIf());
1715:       assertFalse(node5.isDelProp());
1716:       assertFalse(node5.isNE());
1717:       assertFalse(node5.isDebugger());
1718:       assertFalse(node5.isTrue());
1719:       assertFalse(node5.isEmpty());
1720:       assertFalse(node5.isGetterDef());
1721:       assertFalse(node5.isIn());
1722:       assertFalse(node5.isCatch());
1723:       assertFalse(node5.isCase());
1724:       assertTrue(node5.isNumber());
1725:       assertFalse(node5.isRegExp());
1726:       assertFalse(node5.isThrow());
1727:       assertFalse(node5.isGetProp());
1728:       assertFalse(node5.isSetterDef());
1729:       assertFalse(node5.isInc());
1730:       assertFalse(node5.isString());
1731:       assertFalse(node5.isAnd());
1732:       assertFalse(node5.isContinue());
1733:       assertFalse(node5.isFunction());
1734:       assertFalse(node5.isFalse());
1735:       assertNotNull(node5);
1736:       assertNotSame(node5, node1);
1737:       assertFalse(node5.equals((Object)node4));
1738:       assertFalse(node5.equals((Object)node2));
1739:       assertFalse(node5.equals((Object)node3));
1740:       assertFalse(node5.equals((Object)node0));
1741:       assertFalse(node5.equals((Object)node1));
1742:       assertEquals(54, Node.SLASH_V);
1743:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1744:       assertEquals(57, Node.REFLECTED_OBJECT);
1745:       assertEquals(57, Node.LAST_PROP);
1746:       assertEquals(30, Node.VAR_ARGS_NAME);
1747:       assertEquals(49, Node.DIRECT_EVAL);
1748:       assertEquals(40, Node.ORIGINALNAME_PROP);
1749:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1750:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1751:       assertEquals(12, Node.COLUMN_BITS);
1752:       assertEquals(46, Node.IS_NAMESPACE);
1753:       assertEquals(32, Node.INCRDECR_PROP);
1754:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1755:       assertEquals(1, Node.DECR_FLAG);
1756:       assertEquals(50, Node.FREE_CALL);
1757:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1758:       assertEquals(53, Node.INPUT_ID);
1759:       assertEquals(43, Node.IS_CONSTANT_NAME);
1760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1761:       assertEquals(47, Node.IS_DISPATCHER);
1762:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1763:       assertEquals(2, Node.POST_FLAG);
1764:       assertEquals(4095, Node.COLUMN_MASK);
1765:       assertEquals(48, Node.DIRECTIVES);
1766:       assertEquals(37, Node.OPT_ARG_NAME);
1767:       assertEquals(39, Node.EMPTY_BLOCK);
1768:       assertEquals(56, Node.CHANGE_TIME);
1769:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1770:       assertEquals(29, Node.JSDOC_INFO_PROP);
1771:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1772:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1773:       assertEquals(36, Node.QUOTED_PROP);
1774:       assertEquals(55, Node.INFERRED_FUNCTION);
1775:       assertEquals(8, Node.FLAG_NO_THROWS);
1776:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1777:       assertEquals(52, Node.LENGTH);
1778:   }
1779: }
RegularFileObject[/tmp/EvoSuite_141_1628256051059/com/google/javascript/rhino/Node_141_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_141_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_141_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_141_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:51.378 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertNotNull(arrayList0);

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

int int0 = node0.getIntProp((-2118));
assertEquals(0, int0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertNotNull(iterable0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Node node1 = Node.newNumber((-1163.37132));
assertFalse(node1.isCast());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isLabel());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isAnd());
assertFalse(node1.isGetProp());
assertFalse(node1.isScript());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isHook());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isFalse());
assertEquals(39, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isSetterDef());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isFunction());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCase());
assertTrue(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isString());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isDebugger());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNew());
assertFalse(node1.isBreak());
assertFalse(node1.isWhile());
assertFalse(node1.isComma());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNull());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean0 = node0.isParamList();
assertTrue(boolean0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

Node node2 = Node.newString(0, "", 37, 9);
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertEquals(9, node2.getCharno());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isBlock());
assertEquals(151561, node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getType());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertEquals(37, node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

Set<String> set0 = node0.getDirectives();
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertNull(set0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isDo());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertNull(jSDocInfo0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Node node3 = node0.srcrefTree(node2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertEquals(37, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isDo());
assertEquals(9, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertEquals(151561, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertEquals(9, node2.getCharno());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isBlock());
assertEquals(151561, node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getType());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertEquals(37, node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isAnd());
assertEquals(151561, node3.getSourcePosition());
assertTrue(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(83, node3.getType());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isGetElem());
assertFalse(node3.isWhile());
assertFalse(node3.isCall());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertEquals(9, node3.getCharno());
assertFalse(node3.isVar());
assertFalse(node3.isCast());
assertEquals(37, node3.getLineno());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isStringKey());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isCatch());
assertFalse(node3.isFor());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertNotNull(node3);
assertSame(node0, node3);
assertSame(node3, node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

boolean boolean2 = node3.isSwitch();
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isName());
assertFalse(node0.isSetterDef());
assertEquals(37, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isDo());
assertEquals(9, node0.getCharno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertFalse(node0.isDelProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertEquals(151561, node0.getSourcePosition());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.isExprResult());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isComma());
assertFalse(node0.isWhile());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetterDef());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNumber());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isCase());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertEquals(9, node2.getCharno());
assertFalse(node2.isContinue());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isWhile());
assertFalse(node2.isWith());
assertFalse(node2.isNot());
assertFalse(node2.isBlock());
assertEquals(151561, node2.getSourcePosition());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertEquals(0, node2.getType());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isFor());
assertFalse(node2.isDelProp());
assertFalse(node2.isArrayLit());
assertFalse(node2.isSwitch());
assertFalse(node2.isRegExp());
assertFalse(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertEquals(37, node2.getLineno());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isInc());
assertFalse(node2.isFunction());
assertFalse(node2.isIn());
assertFalse(node2.isThrow());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isCase());
assertFalse(node3.isString());
assertFalse(node3.isEmpty());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isSwitch());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isName());
assertFalse(node3.isAnd());
assertEquals(151561, node3.getSourcePosition());
assertTrue(node3.isParamList());
assertFalse(node3.isNull());
assertEquals(83, node3.getType());
assertFalse(node3.isNot());
assertFalse(node3.isObjectLit());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertFalse(node3.isVoid());
assertFalse(node3.isGetElem());
assertFalse(node3.isWhile());
assertFalse(node3.isCall());
assertFalse(node3.isDec());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isLabelName());
assertFalse(node3.isNumber());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isContinue());
assertEquals(9, node3.getCharno());
assertFalse(node3.isVar());
assertFalse(node3.isCast());
assertEquals(37, node3.getLineno());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isStringKey());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isTry());
assertFalse(node3.isCatch());
assertFalse(node3.isFor());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertSame(node0, node3);
assertSame(node3, node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);

Node node4 = Node.newString("Object#Key");
assertFalse(node4.isCatch());
assertEquals(40, node4.getType());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isSetterDef());
assertFalse(node4.isTry());
assertFalse(node4.isVar());
assertFalse(node4.isArrayLit());
assertFalse(node4.isStringKey());
assertFalse(node4.isDebugger());
assertFalse(node4.isGetterDef());
assertFalse(node4.isFunction());
assertFalse(node4.isParamList());
assertFalse(node4.isLabel());
assertFalse(node4.isReturn());
assertFalse(node4.isOr());
assertFalse(node4.hasChildren());
assertFalse(node4.isWhile());
assertFalse(node4.isEmpty());
assertFalse(node4.isAdd());
assertFalse(node4.isNew());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isDo());
assertFalse(node4.isCall());
assertFalse(node4.isAssign());
assertFalse(node4.isDec());
assertFalse(node4.isNull());
assertFalse(node4.isTypeOf());
assertFalse(node4.isTrue());
assertFalse(node4.isExprResult());
assertFalse(node4.isName());
assertFalse(node4.isGetElem());
assertFalse(node4.isVoid());
assertFalse(node4.isBreak());
assertFalse(node4.isDelProp());
assertFalse(node4.isAnd());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isWith());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isComma());
assertFalse(node4.isScript());
assertFalse(node4.isThis());
assertFalse(node4.isGetProp());
assertFalse(node4.hasOneChild());
assertFalse(node4.isCast());
assertFalse(node4.isThrow());
assertFalse(node4.isFalse());
assertEquals((-1), node4.getCharno());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.isSwitch());
assertFalse(node4.isLabelName());
assertFalse(node4.isIn());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isContinue());
assertFalse(node4.isNumber());
assertFalse(node4.isInc());
assertFalse(node4.isCase());
assertTrue(node4.isString());
assertFalse(node4.isHook());
assertFalse(node4.isBlock());
assertFalse(node4.isFor());
assertFalse(node4.isRegExp());
assertFalse(node4.isIf());
assertFalse(node4.isNE());
assertEquals((-1), node4.getLineno());
assertNotNull(node4);
assertNotSame(node4, node2);
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node0));
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);

Node node5 = Node.newNumber((double) 37);
assertFalse(node5.isCast());
assertFalse(node5.hasOneChild());
assertFalse(node5.isGetElem());
assertFalse(node5.isLabelName());
assertFalse(node5.isScript());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isNot());
assertFalse(node5.isOr());
assertFalse(node5.isObjectLit());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isReturn());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isWhile());
assertFalse(node5.isComma());
assertFalse(node5.isDec());
assertFalse(node5.isBreak());
assertFalse(node5.hasChildren());
assertFalse(node5.isBlock());
assertFalse(node5.isThis());
assertFalse(node5.isExprResult());
assertEquals(39, node5.getType());
assertFalse(node5.isAssign());
assertFalse(node5.isWith());
assertFalse(node5.isTypeOf());
assertFalse(node5.isVar());
assertFalse(node5.isHook());
assertFalse(node5.isCall());
assertFalse(node5.isStringKey());
assertFalse(node5.isNew());
assertFalse(node5.isName());
assertFalse(node5.isSwitch());
assertFalse(node5.isParamList());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isNull());
assertFalse(node5.isAdd());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isDo());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isLabel());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isArrayLit());
assertFalse(node5.isTry());
assertFalse(node5.isFor());
assertFalse(node5.isVoid());
assertFalse(node5.isIf());
assertFalse(node5.isDelProp());
assertFalse(node5.isNE());
assertFalse(node5.isDebugger());
assertFalse(node5.isTrue());
assertFalse(node5.isEmpty());
assertFalse(node5.isGetterDef());
assertFalse(node5.isIn());
assertFalse(node5.isCatch());
assertFalse(node5.isCase());
assertTrue(node5.isNumber());
assertFalse(node5.isRegExp());
assertFalse(node5.isThrow());
assertFalse(node5.isGetProp());
assertFalse(node5.isSetterDef());
assertFalse(node5.isInc());
assertFalse(node5.isString());
assertFalse(node5.isAnd());
assertFalse(node5.isContinue());
assertFalse(node5.isFunction());
assertFalse(node5.isFalse());
assertNotNull(node5);
assertNotSame(node5, node1);
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);


[MASTER] 13:20:51.732 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_145_1628256051707/com/google/javascript/rhino/Node_145_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_145_1628256051707/com/google/javascript/rhino/Node_145_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:51.732 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:51.732 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:51.733 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 232
[MASTER] 13:20:51.734 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_145_1628256051707/com/google/javascript/rhino/Node_145_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:51 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_145_tmp__ESTest extends Node_145_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(3);
22:       assertFalse(node0.isAssignAdd());
23:       assertFalse(node0.isLabel());
24:       assertFalse(node0.isOr());
25:       assertEquals((-1), node0.getLineno());
26:       assertFalse(node0.isReturn());
27:       assertFalse(node0.hasMoreThanOneChild());
28:       assertEquals((-1), node0.getSourcePosition());
29:       assertFalse(node0.isDec());
30:       assertFalse(node0.isContinue());
31:       assertFalse(node0.isNumber());
32:       assertFalse(node0.isTypeOf());
33:       assertFalse(node0.isLabelName());
34:       assertFalse(node0.isGetElem());
35:       assertFalse(node0.isBlock());
36:       assertFalse(node0.isExprResult());
37:       assertFalse(node0.isScript());
38:       assertFalse(node0.isAssign());
39:       assertFalse(node0.isWhile());
40:       assertFalse(node0.hasChildren());
41:       assertFalse(node0.hasOneChild());
42:       assertFalse(node0.isComma());
43:       assertEquals(0, node0.getChildCount());
44:       assertFalse(node0.isStringKey());
45:       assertFalse(node0.isBreak());
46:       assertFalse(node0.isNull());
47:       assertFalse(node0.isCall());
48:       assertFalse(node0.isParamList());
49:       assertFalse(node0.isVoid());
50:       assertFalse(node0.isName());
51:       assertFalse(node0.isAdd());
52:       assertFalse(node0.isNew());
53:       assertFalse(node0.isTrue());
54:       assertFalse(node0.isEmpty());
55:       assertFalse(node0.isDo());
56:       assertFalse(node0.isVar());
57:       assertFalse(node0.isDefaultCase());
58:       assertFalse(node0.isGetterDef());
59:       assertFalse(node0.isIn());
60:       assertFalse(node0.isSwitch());
61:       assertFalse(node0.isNE());
62:       assertFalse(node0.isArrayLit());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isTry());
66:       assertEquals((-1), node0.getCharno());
67:       assertFalse(node0.isHook());
68:       assertFalse(node0.isDebugger());
69:       assertFalse(node0.isRegExp());
70:       assertFalse(node0.isFor());
71:       assertFalse(node0.isCase());
72:       assertFalse(node0.isString());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isSetterDef());
75:       assertFalse(node0.isThis());
76:       assertFalse(node0.isCatch());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isWith());
80:       assertFalse(node0.isNot());
81:       assertFalse(node0.isAnd());
82:       assertFalse(node0.isInc());
83:       assertEquals(3, node0.getType());
84:       assertFalse(node0.isCast());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isThrow());
88:       assertNotNull(node0);
89:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
90:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
91:       assertEquals(39, Node.EMPTY_BLOCK);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(8, Node.FLAG_NO_THROWS);
94:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
95:       assertEquals(55, Node.INFERRED_FUNCTION);
96:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
97:       assertEquals(43, Node.IS_CONSTANT_NAME);
98:       assertEquals(30, Node.VAR_ARGS_NAME);
99:       assertEquals(51, Node.STATIC_SOURCE_FILE);
100:       assertEquals(46, Node.IS_NAMESPACE);
101:       assertEquals(40, Node.ORIGINALNAME_PROP);
102:       assertEquals(54, Node.SLASH_V);
103:       assertEquals(56, Node.CHANGE_TIME);
104:       assertEquals(2, Node.POST_FLAG);
105:       assertEquals(37, Node.OPT_ARG_NAME);
106:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
107:       assertEquals(47, Node.IS_DISPATCHER);
108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
109:       assertEquals(29, Node.JSDOC_INFO_PROP);
110:       assertEquals(12, Node.COLUMN_BITS);
111:       assertEquals(1, Node.DECR_FLAG);
112:       assertEquals(32, Node.INCRDECR_PROP);
113:       assertEquals(57, Node.LAST_PROP);
114:       assertEquals(36, Node.QUOTED_PROP);
115:       assertEquals(15, Node.NO_SIDE_EFFECTS);
116:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
117:       assertEquals(53, Node.INPUT_ID);
118:       assertEquals(52, Node.LENGTH);
119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
120:       assertEquals(4095, Node.COLUMN_MASK);
121:       assertEquals(57, Node.REFLECTED_OBJECT);
122:       assertEquals(48, Node.DIRECTIVES);
123:       assertEquals(49, Node.DIRECT_EVAL);
124:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
125:       
126:       node0.setType((-2005));
127:       assertFalse(node0.isAssignAdd());
128:       assertFalse(node0.isLabel());
129:       assertFalse(node0.isOr());
130:       assertEquals((-1), node0.getLineno());
131:       assertFalse(node0.isReturn());
132:       assertFalse(node0.hasMoreThanOneChild());
133:       assertEquals((-1), node0.getSourcePosition());
134:       assertFalse(node0.isDec());
135:       assertFalse(node0.isContinue());
136:       assertFalse(node0.isNumber());
137:       assertFalse(node0.isTypeOf());
138:       assertFalse(node0.isLabelName());
139:       assertFalse(node0.isGetElem());
140:       assertFalse(node0.isBlock());
141:       assertFalse(node0.isExprResult());
142:       assertFalse(node0.isScript());
143:       assertFalse(node0.isAssign());
144:       assertFalse(node0.isWhile());
145:       assertFalse(node0.hasChildren());
146:       assertFalse(node0.hasOneChild());
147:       assertEquals((-2005), node0.getType());
148:       assertFalse(node0.isComma());
149:       assertEquals(0, node0.getChildCount());
150:       assertFalse(node0.isStringKey());
151:       assertFalse(node0.isBreak());
152:       assertFalse(node0.isNull());
153:       assertFalse(node0.isCall());
154:       assertFalse(node0.isParamList());
155:       assertFalse(node0.isVoid());
156:       assertFalse(node0.isName());
157:       assertFalse(node0.isAdd());
158:       assertFalse(node0.isNew());
159:       assertFalse(node0.isTrue());
160:       assertFalse(node0.isEmpty());
161:       assertFalse(node0.isDo());
162:       assertFalse(node0.isVar());
163:       assertFalse(node0.isDefaultCase());
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isIn());
166:       assertFalse(node0.isSwitch());
167:       assertFalse(node0.isNE());
168:       assertFalse(node0.isArrayLit());
169:       assertFalse(node0.isIf());
170:       assertFalse(node0.isDelProp());
171:       assertFalse(node0.isTry());
172:       assertEquals((-1), node0.getCharno());
173:       assertFalse(node0.isHook());
174:       assertFalse(node0.isDebugger());
175:       assertFalse(node0.isRegExp());
176:       assertFalse(node0.isFor());
177:       assertFalse(node0.isCase());
178:       assertFalse(node0.isString());
179:       assertFalse(node0.isGetProp());
180:       assertFalse(node0.isSetterDef());
181:       assertFalse(node0.isThis());
182:       assertFalse(node0.isCatch());
183:       assertFalse(node0.isInstanceOf());
184:       assertFalse(node0.isObjectLit());
185:       assertFalse(node0.isWith());
186:       assertFalse(node0.isNot());
187:       assertFalse(node0.isAnd());
188:       assertFalse(node0.isInc());
189:       assertFalse(node0.isCast());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isThrow());
193:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
194:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
195:       assertEquals(39, Node.EMPTY_BLOCK);
196:       assertEquals(50, Node.FREE_CALL);
197:       assertEquals(8, Node.FLAG_NO_THROWS);
198:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
199:       assertEquals(55, Node.INFERRED_FUNCTION);
200:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
201:       assertEquals(43, Node.IS_CONSTANT_NAME);
202:       assertEquals(30, Node.VAR_ARGS_NAME);
203:       assertEquals(51, Node.STATIC_SOURCE_FILE);
204:       assertEquals(46, Node.IS_NAMESPACE);
205:       assertEquals(40, Node.ORIGINALNAME_PROP);
206:       assertEquals(54, Node.SLASH_V);
207:       assertEquals(56, Node.CHANGE_TIME);
208:       assertEquals(2, Node.POST_FLAG);
209:       assertEquals(37, Node.OPT_ARG_NAME);
210:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
211:       assertEquals(47, Node.IS_DISPATCHER);
212:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
213:       assertEquals(29, Node.JSDOC_INFO_PROP);
214:       assertEquals(12, Node.COLUMN_BITS);
215:       assertEquals(1, Node.DECR_FLAG);
216:       assertEquals(32, Node.INCRDECR_PROP);
217:       assertEquals(57, Node.LAST_PROP);
218:       assertEquals(36, Node.QUOTED_PROP);
219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
220:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
221:       assertEquals(53, Node.INPUT_ID);
222:       assertEquals(52, Node.LENGTH);
223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
224:       assertEquals(4095, Node.COLUMN_MASK);
225:       assertEquals(57, Node.REFLECTED_OBJECT);
226:       assertEquals(48, Node.DIRECTIVES);
227:       assertEquals(49, Node.DIRECT_EVAL);
228:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
229:       
230:       int int0 = 41;
231:       Iterable<Node> iterable0 = node0.children();
232:       assertFalse(iterable0.contains(node0));
233:       assertFalse(node0.isAssignAdd());
234:       assertFalse(node0.isLabel());
235:       assertFalse(node0.isOr());
236:       assertEquals((-1), node0.getLineno());
237:       assertFalse(node0.isReturn());
238:       assertFalse(node0.hasMoreThanOneChild());
239:       assertEquals((-1), node0.getSourcePosition());
240:       assertFalse(node0.isDec());
241:       assertFalse(node0.isContinue());
242:       assertFalse(node0.isNumber());
243:       assertFalse(node0.isTypeOf());
244:       assertFalse(node0.isLabelName());
245:       assertFalse(node0.isGetElem());
246:       assertFalse(node0.isBlock());
247:       assertFalse(node0.isExprResult());
248:       assertFalse(node0.isScript());
249:       assertFalse(node0.isAssign());
250:       assertFalse(node0.isWhile());
251:       assertFalse(node0.hasChildren());
252:       assertFalse(node0.hasOneChild());
253:       assertEquals((-2005), node0.getType());
254:       assertFalse(node0.isComma());
255:       assertEquals(0, node0.getChildCount());
256:       assertFalse(node0.isStringKey());
257:       assertFalse(node0.isBreak());
258:       assertFalse(node0.isNull());
259:       assertFalse(node0.isCall());
260:       assertFalse(node0.isParamList());
261:       assertFalse(node0.isVoid());
262:       assertFalse(node0.isName());
263:       assertFalse(node0.isAdd());
264:       assertFalse(node0.isNew());
265:       assertFalse(node0.isTrue());
266:       assertFalse(node0.isEmpty());
267:       assertFalse(node0.isDo());
268:       assertFalse(node0.isVar());
269:       assertFalse(node0.isDefaultCase());
270:       assertFalse(node0.isGetterDef());
271:       assertFalse(node0.isIn());
272:       assertFalse(node0.isSwitch());
273:       assertFalse(node0.isNE());
274:       assertFalse(node0.isArrayLit());
275:       assertFalse(node0.isIf());
276:       assertFalse(node0.isDelProp());
277:       assertFalse(node0.isTry());
278:       assertEquals((-1), node0.getCharno());
279:       assertFalse(node0.isHook());
280:       assertFalse(node0.isDebugger());
281:       assertFalse(node0.isRegExp());
282:       assertFalse(node0.isFor());
283:       assertFalse(node0.isCase());
284:       assertFalse(node0.isString());
285:       assertFalse(node0.isGetProp());
286:       assertFalse(node0.isSetterDef());
287:       assertFalse(node0.isThis());
288:       assertFalse(node0.isCatch());
289:       assertFalse(node0.isInstanceOf());
290:       assertFalse(node0.isObjectLit());
291:       assertFalse(node0.isWith());
292:       assertFalse(node0.isNot());
293:       assertFalse(node0.isAnd());
294:       assertFalse(node0.isInc());
295:       assertFalse(node0.isCast());
296:       assertFalse(node0.isFunction());
297:       assertFalse(node0.isFalse());
298:       assertFalse(node0.isThrow());
299:       assertNotNull(iterable0);
300:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
301:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
302:       assertEquals(39, Node.EMPTY_BLOCK);
303:       assertEquals(50, Node.FREE_CALL);
304:       assertEquals(8, Node.FLAG_NO_THROWS);
305:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
306:       assertEquals(55, Node.INFERRED_FUNCTION);
307:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
308:       assertEquals(43, Node.IS_CONSTANT_NAME);
309:       assertEquals(30, Node.VAR_ARGS_NAME);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(40, Node.ORIGINALNAME_PROP);
313:       assertEquals(54, Node.SLASH_V);
314:       assertEquals(56, Node.CHANGE_TIME);
315:       assertEquals(2, Node.POST_FLAG);
316:       assertEquals(37, Node.OPT_ARG_NAME);
317:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
318:       assertEquals(47, Node.IS_DISPATCHER);
319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
320:       assertEquals(29, Node.JSDOC_INFO_PROP);
321:       assertEquals(12, Node.COLUMN_BITS);
322:       assertEquals(1, Node.DECR_FLAG);
323:       assertEquals(32, Node.INCRDECR_PROP);
324:       assertEquals(57, Node.LAST_PROP);
325:       assertEquals(36, Node.QUOTED_PROP);
326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
327:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
328:       assertEquals(53, Node.INPUT_ID);
329:       assertEquals(52, Node.LENGTH);
330:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
331:       assertEquals(4095, Node.COLUMN_MASK);
332:       assertEquals(57, Node.REFLECTED_OBJECT);
333:       assertEquals(48, Node.DIRECTIVES);
334:       assertEquals(49, Node.DIRECT_EVAL);
335:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
336:       
337:       // Undeclared exception!
338:       try { 
339:         node0.setString("");
340:         fail("Expecting exception: IllegalStateException");
341:       
342:       } catch(IllegalStateException e) {
343:          //
344:          // -2005
345:          //
346:          verifyException("com.google.javascript.rhino.Token", e);
347:       }
348:   }
349: }
RegularFileObject[/tmp/EvoSuite_145_1628256051707/com/google/javascript/rhino/Node_145_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:51 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_145_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_145_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_145_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:51.737 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(3);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertEquals(3, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(node0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node0.setType((-2005));
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertEquals((-2005), node0.getType());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

int int0 = 41;
Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isContinue());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isBlock());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.hasOneChild());
assertEquals((-2005), node0.getType());
assertFalse(node0.isComma());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isHook());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isInc());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertNotNull(iterable0);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);

node0.setString("");

[MASTER] 13:20:54.454 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_156_1628256053954/com/google/javascript/rhino/Node_156_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_156_1628256053954/com/google/javascript/rhino/Node_156_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:54.454 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:54.454 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:54.454 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 654
[MASTER] 13:20:54.456 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_156_1628256053954/com/google/javascript/rhino/Node_156_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:53 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.JSDocInfo;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_156_tmp__ESTest extends Node_156_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       Node node0 = Node.newString("}N>");
25:       assertFalse(node0.isHook());
26:       assertFalse(node0.isSwitch());
27:       assertFalse(node0.isInc());
28:       assertFalse(node0.isBreak());
29:       assertFalse(node0.isThrow());
30:       assertFalse(node0.isThis());
31:       assertFalse(node0.isFalse());
32:       assertFalse(node0.isComma());
33:       assertFalse(node0.isIn());
34:       assertFalse(node0.isInstanceOf());
35:       assertFalse(node0.isIf());
36:       assertFalse(node0.isDelProp());
37:       assertFalse(node0.isEmpty());
38:       assertFalse(node0.isNE());
39:       assertFalse(node0.isCast());
40:       assertFalse(node0.isVoid());
41:       assertFalse(node0.isExprResult());
42:       assertFalse(node0.isGetElem());
43:       assertFalse(node0.hasChildren());
44:       assertEquals(40, node0.getType());
45:       assertFalse(node0.isFunction());
46:       assertFalse(node0.isAssign());
47:       assertFalse(node0.isTypeOf());
48:       assertFalse(node0.isDec());
49:       assertFalse(node0.isReturn());
50:       assertFalse(node0.isAnd());
51:       assertFalse(node0.isGetProp());
52:       assertFalse(node0.isDebugger());
53:       assertFalse(node0.isObjectLit());
54:       assertFalse(node0.isNot());
55:       assertEquals((-1), node0.getSourcePosition());
56:       assertFalse(node0.isVar());
57:       assertFalse(node0.isAdd());
58:       assertFalse(node0.isCall());
59:       assertTrue(node0.isString());
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isNew());
62:       assertFalse(node0.isWhile());
63:       assertFalse(node0.isContinue());
64:       assertFalse(node0.isBlock());
65:       assertFalse(node0.hasMoreThanOneChild());
66:       assertFalse(node0.isAssignAdd());
67:       assertFalse(node0.isCatch());
68:       assertFalse(node0.isSetterDef());
69:       assertFalse(node0.isDo());
70:       assertEquals((-1), node0.getLineno());
71:       assertFalse(node0.isNull());
72:       assertFalse(node0.isTrue());
73:       assertFalse(node0.isOr());
74:       assertFalse(node0.isTry());
75:       assertFalse(node0.isArrayLit());
76:       assertFalse(node0.isLabelName());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isDefaultCase());
79:       assertFalse(node0.isWith());
80:       assertFalse(node0.isFor());
81:       assertFalse(node0.isRegExp());
82:       assertFalse(node0.isLabel());
83:       assertEquals(0, node0.getChildCount());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isGetterDef());
86:       assertFalse(node0.isNumber());
87:       assertFalse(node0.isScript());
88:       assertFalse(node0.isParamList());
89:       assertFalse(node0.isStringKey());
90:       assertEquals((-1), node0.getCharno());
91:       assertNotNull(node0);
92:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
93:       assertEquals(43, Node.IS_CONSTANT_NAME);
94:       assertEquals(53, Node.INPUT_ID);
95:       assertEquals(55, Node.INFERRED_FUNCTION);
96:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
97:       assertEquals(29, Node.JSDOC_INFO_PROP);
98:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
99:       assertEquals(36, Node.QUOTED_PROP);
100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
101:       assertEquals(37, Node.OPT_ARG_NAME);
102:       assertEquals(56, Node.CHANGE_TIME);
103:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
104:       assertEquals(48, Node.DIRECTIVES);
105:       assertEquals(32, Node.INCRDECR_PROP);
106:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
107:       assertEquals(4095, Node.COLUMN_MASK);
108:       assertEquals(12, Node.COLUMN_BITS);
109:       assertEquals(15, Node.NO_SIDE_EFFECTS);
110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(57, Node.LAST_PROP);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(49, Node.DIRECT_EVAL);
115:       assertEquals(57, Node.REFLECTED_OBJECT);
116:       assertEquals(46, Node.IS_NAMESPACE);
117:       assertEquals(52, Node.LENGTH);
118:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(50, Node.FREE_CALL);
121:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
122:       assertEquals(8, Node.FLAG_NO_THROWS);
123:       assertEquals(39, Node.EMPTY_BLOCK);
124:       assertEquals(47, Node.IS_DISPATCHER);
125:       assertEquals(40, Node.ORIGINALNAME_PROP);
126:       assertEquals(30, Node.VAR_ARGS_NAME);
127:       assertEquals(2, Node.POST_FLAG);
128:       
129:       Node node1 = new Node(2271, node0);
130:       assertFalse(node0.isHook());
131:       assertFalse(node0.isSwitch());
132:       assertFalse(node0.isInc());
133:       assertFalse(node0.isBreak());
134:       assertFalse(node0.isThrow());
135:       assertFalse(node0.isThis());
136:       assertFalse(node0.isFalse());
137:       assertFalse(node0.isComma());
138:       assertFalse(node0.isIn());
139:       assertFalse(node0.isInstanceOf());
140:       assertFalse(node0.isIf());
141:       assertFalse(node0.isDelProp());
142:       assertFalse(node0.isEmpty());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isCast());
145:       assertFalse(node0.isVoid());
146:       assertFalse(node0.isExprResult());
147:       assertFalse(node0.isGetElem());
148:       assertFalse(node0.hasChildren());
149:       assertEquals(40, node0.getType());
150:       assertFalse(node0.isFunction());
151:       assertFalse(node0.isAssign());
152:       assertFalse(node0.isTypeOf());
153:       assertFalse(node0.isDec());
154:       assertFalse(node0.isReturn());
155:       assertFalse(node0.isAnd());
156:       assertFalse(node0.isGetProp());
157:       assertFalse(node0.isDebugger());
158:       assertFalse(node0.isObjectLit());
159:       assertFalse(node0.isNot());
160:       assertEquals((-1), node0.getSourcePosition());
161:       assertFalse(node0.isVar());
162:       assertFalse(node0.isAdd());
163:       assertFalse(node0.isCall());
164:       assertTrue(node0.isString());
165:       assertFalse(node0.isName());
166:       assertFalse(node0.isNew());
167:       assertFalse(node0.isWhile());
168:       assertFalse(node0.isContinue());
169:       assertFalse(node0.isBlock());
170:       assertFalse(node0.hasMoreThanOneChild());
171:       assertFalse(node0.isAssignAdd());
172:       assertFalse(node0.isCatch());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isDo());
175:       assertEquals((-1), node0.getLineno());
176:       assertFalse(node0.isNull());
177:       assertFalse(node0.isTrue());
178:       assertFalse(node0.isOr());
179:       assertFalse(node0.isTry());
180:       assertFalse(node0.isArrayLit());
181:       assertFalse(node0.isLabelName());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isDefaultCase());
184:       assertFalse(node0.isWith());
185:       assertFalse(node0.isFor());
186:       assertFalse(node0.isRegExp());
187:       assertFalse(node0.isLabel());
188:       assertEquals(0, node0.getChildCount());
189:       assertFalse(node0.isCase());
190:       assertFalse(node0.isGetterDef());
191:       assertFalse(node0.isNumber());
192:       assertFalse(node0.isScript());
193:       assertFalse(node0.isParamList());
194:       assertFalse(node0.isStringKey());
195:       assertEquals((-1), node0.getCharno());
196:       assertFalse(node1.isReturn());
197:       assertFalse(node1.isAssignAdd());
198:       assertFalse(node1.isContinue());
199:       assertFalse(node1.hasMoreThanOneChild());
200:       assertEquals((-1), node1.getSourcePosition());
201:       assertFalse(node1.isLabel());
202:       assertFalse(node1.isOr());
203:       assertFalse(node1.isTypeOf());
204:       assertFalse(node1.isDec());
205:       assertFalse(node1.isWhile());
206:       assertFalse(node1.isNumber());
207:       assertFalse(node1.isDo());
208:       assertFalse(node1.isNew());
209:       assertFalse(node1.isVar());
210:       assertFalse(node1.isCast());
211:       assertFalse(node1.isParamList());
212:       assertFalse(node1.isStringKey());
213:       assertFalse(node1.isAnd());
214:       assertFalse(node1.isLabelName());
215:       assertFalse(node1.isCatch());
216:       assertFalse(node1.isInstanceOf());
217:       assertFalse(node1.isThis());
218:       assertFalse(node1.isScript());
219:       assertFalse(node1.isThrow());
220:       assertFalse(node1.isSetterDef());
221:       assertFalse(node1.isTry());
222:       assertFalse(node1.isHook());
223:       assertFalse(node1.isBlock());
224:       assertFalse(node1.isRegExp());
225:       assertFalse(node1.isIf());
226:       assertFalse(node1.isWith());
227:       assertFalse(node1.isNE());
228:       assertEquals((-1), node1.getLineno());
229:       assertFalse(node1.isIn());
230:       assertEquals(1, node1.getChildCount());
231:       assertTrue(node1.hasChildren());
232:       assertFalse(node1.isGetterDef());
233:       assertFalse(node1.isString());
234:       assertTrue(node1.hasOneChild());
235:       assertFalse(node1.isEmpty());
236:       assertFalse(node1.isFor());
237:       assertFalse(node1.isInc());
238:       assertFalse(node1.isCase());
239:       assertFalse(node1.isDebugger());
240:       assertEquals((-1), node1.getCharno());
241:       assertFalse(node1.isFunction());
242:       assertFalse(node1.isFalse());
243:       assertFalse(node1.isSwitch());
244:       assertFalse(node1.isArrayLit());
245:       assertFalse(node1.isObjectLit());
246:       assertFalse(node1.isNot());
247:       assertFalse(node1.isComma());
248:       assertFalse(node1.isDefaultCase());
249:       assertFalse(node1.isGetProp());
250:       assertFalse(node1.isAdd());
251:       assertFalse(node1.isTrue());
252:       assertFalse(node1.isAssign());
253:       assertFalse(node1.isBreak());
254:       assertFalse(node1.isDelProp());
255:       assertFalse(node1.isNull());
256:       assertFalse(node1.isVoid());
257:       assertFalse(node1.isExprResult());
258:       assertFalse(node1.isCall());
259:       assertFalse(node1.isGetElem());
260:       assertFalse(node1.isName());
261:       assertEquals(2271, node1.getType());
262:       assertNotNull(node1);
263:       assertFalse(node1.equals((Object)node0));
264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(53, Node.INPUT_ID);
267:       assertEquals(55, Node.INFERRED_FUNCTION);
268:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
269:       assertEquals(29, Node.JSDOC_INFO_PROP);
270:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
271:       assertEquals(36, Node.QUOTED_PROP);
272:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
273:       assertEquals(37, Node.OPT_ARG_NAME);
274:       assertEquals(56, Node.CHANGE_TIME);
275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
276:       assertEquals(48, Node.DIRECTIVES);
277:       assertEquals(32, Node.INCRDECR_PROP);
278:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
279:       assertEquals(4095, Node.COLUMN_MASK);
280:       assertEquals(12, Node.COLUMN_BITS);
281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
282:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
283:       assertEquals(54, Node.SLASH_V);
284:       assertEquals(57, Node.LAST_PROP);
285:       assertEquals(1, Node.DECR_FLAG);
286:       assertEquals(49, Node.DIRECT_EVAL);
287:       assertEquals(57, Node.REFLECTED_OBJECT);
288:       assertEquals(46, Node.IS_NAMESPACE);
289:       assertEquals(52, Node.LENGTH);
290:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
291:       assertEquals(51, Node.STATIC_SOURCE_FILE);
292:       assertEquals(50, Node.FREE_CALL);
293:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
294:       assertEquals(8, Node.FLAG_NO_THROWS);
295:       assertEquals(39, Node.EMPTY_BLOCK);
296:       assertEquals(47, Node.IS_DISPATCHER);
297:       assertEquals(40, Node.ORIGINALNAME_PROP);
298:       assertEquals(30, Node.VAR_ARGS_NAME);
299:       assertEquals(2, Node.POST_FLAG);
300:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
301:       assertEquals(8, Node.FLAG_NO_THROWS);
302:       assertEquals(39, Node.EMPTY_BLOCK);
303:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
304:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
305:       assertEquals(50, Node.FREE_CALL);
306:       assertEquals(40, Node.ORIGINALNAME_PROP);
307:       assertEquals(4095, Node.COLUMN_MASK);
308:       assertEquals(57, Node.REFLECTED_OBJECT);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
311:       assertEquals(15, Node.NO_SIDE_EFFECTS);
312:       assertEquals(53, Node.INPUT_ID);
313:       assertEquals(30, Node.VAR_ARGS_NAME);
314:       assertEquals(52, Node.LENGTH);
315:       assertEquals(36, Node.QUOTED_PROP);
316:       assertEquals(55, Node.INFERRED_FUNCTION);
317:       assertEquals(29, Node.JSDOC_INFO_PROP);
318:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
319:       assertEquals(57, Node.LAST_PROP);
320:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
321:       assertEquals(37, Node.OPT_ARG_NAME);
322:       assertEquals(56, Node.CHANGE_TIME);
323:       assertEquals(47, Node.IS_DISPATCHER);
324:       assertEquals(51, Node.STATIC_SOURCE_FILE);
325:       assertEquals(2, Node.POST_FLAG);
326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
327:       assertEquals(46, Node.IS_NAMESPACE);
328:       assertEquals(49, Node.DIRECT_EVAL);
329:       assertEquals(43, Node.IS_CONSTANT_NAME);
330:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
331:       assertEquals(54, Node.SLASH_V);
332:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
333:       assertEquals(12, Node.COLUMN_BITS);
334:       assertEquals(1, Node.DECR_FLAG);
335:       assertEquals(32, Node.INCRDECR_PROP);
336:       
337:       Node node2 = node1.getLastChild();
338:       assertFalse(node0.isHook());
339:       assertFalse(node0.isSwitch());
340:       assertFalse(node0.isInc());
341:       assertFalse(node0.isBreak());
342:       assertFalse(node0.isThrow());
343:       assertFalse(node0.isThis());
344:       assertFalse(node0.isFalse());
345:       assertFalse(node0.isComma());
346:       assertFalse(node0.isIn());
347:       assertFalse(node0.isInstanceOf());
348:       assertFalse(node0.isIf());
349:       assertFalse(node0.isDelProp());
350:       assertFalse(node0.isEmpty());
351:       assertFalse(node0.isNE());
352:       assertFalse(node0.isCast());
353:       assertFalse(node0.isVoid());
354:       assertFalse(node0.isExprResult());
355:       assertFalse(node0.isGetElem());
356:       assertFalse(node0.hasChildren());
357:       assertEquals(40, node0.getType());
358:       assertFalse(node0.isFunction());
359:       assertFalse(node0.isAssign());
360:       assertFalse(node0.isTypeOf());
361:       assertFalse(node0.isDec());
362:       assertFalse(node0.isReturn());
363:       assertFalse(node0.isAnd());
364:       assertFalse(node0.isGetProp());
365:       assertFalse(node0.isDebugger());
366:       assertFalse(node0.isObjectLit());
367:       assertFalse(node0.isNot());
368:       assertEquals((-1), node0.getSourcePosition());
369:       assertFalse(node0.isVar());
370:       assertFalse(node0.isAdd());
371:       assertFalse(node0.isCall());
372:       assertTrue(node0.isString());
373:       assertFalse(node0.isName());
374:       assertFalse(node0.isNew());
375:       assertFalse(node0.isWhile());
376:       assertFalse(node0.isContinue());
377:       assertFalse(node0.isBlock());
378:       assertFalse(node0.hasMoreThanOneChild());
379:       assertFalse(node0.isAssignAdd());
380:       assertFalse(node0.isCatch());
381:       assertFalse(node0.isSetterDef());
382:       assertFalse(node0.isDo());
383:       assertEquals((-1), node0.getLineno());
384:       assertFalse(node0.isNull());
385:       assertFalse(node0.isTrue());
386:       assertFalse(node0.isOr());
387:       assertFalse(node0.isTry());
388:       assertFalse(node0.isArrayLit());
389:       assertFalse(node0.isLabelName());
390:       assertFalse(node0.hasOneChild());
391:       assertFalse(node0.isDefaultCase());
392:       assertFalse(node0.isWith());
393:       assertFalse(node0.isFor());
394:       assertFalse(node0.isRegExp());
395:       assertFalse(node0.isLabel());
396:       assertEquals(0, node0.getChildCount());
397:       assertFalse(node0.isCase());
398:       assertFalse(node0.isGetterDef());
399:       assertFalse(node0.isNumber());
400:       assertFalse(node0.isScript());
401:       assertFalse(node0.isParamList());
402:       assertFalse(node0.isStringKey());
403:       assertEquals((-1), node0.getCharno());
404:       assertFalse(node1.isReturn());
405:       assertFalse(node1.isAssignAdd());
406:       assertFalse(node1.isContinue());
407:       assertFalse(node1.hasMoreThanOneChild());
408:       assertEquals((-1), node1.getSourcePosition());
409:       assertFalse(node1.isLabel());
410:       assertFalse(node1.isOr());
411:       assertFalse(node1.isTypeOf());
412:       assertFalse(node1.isDec());
413:       assertFalse(node1.isWhile());
414:       assertFalse(node1.isNumber());
415:       assertFalse(node1.isDo());
416:       assertFalse(node1.isNew());
417:       assertFalse(node1.isVar());
418:       assertFalse(node1.isCast());
419:       assertFalse(node1.isParamList());
420:       assertFalse(node1.isStringKey());
421:       assertFalse(node1.isAnd());
422:       assertFalse(node1.isLabelName());
423:       assertFalse(node1.isCatch());
424:       assertFalse(node1.isInstanceOf());
425:       assertFalse(node1.isThis());
426:       assertFalse(node1.isScript());
427:       assertFalse(node1.isThrow());
428:       assertFalse(node1.isSetterDef());
429:       assertFalse(node1.isTry());
430:       assertFalse(node1.isHook());
431:       assertFalse(node1.isBlock());
432:       assertFalse(node1.isRegExp());
433:       assertFalse(node1.isIf());
434:       assertFalse(node1.isWith());
435:       assertFalse(node1.isNE());
436:       assertEquals((-1), node1.getLineno());
437:       assertFalse(node1.isIn());
438:       assertEquals(1, node1.getChildCount());
439:       assertTrue(node1.hasChildren());
440:       assertFalse(node1.isGetterDef());
441:       assertFalse(node1.isString());
442:       assertTrue(node1.hasOneChild());
443:       assertFalse(node1.isEmpty());
444:       assertFalse(node1.isFor());
445:       assertFalse(node1.isInc());
446:       assertFalse(node1.isCase());
447:       assertFalse(node1.isDebugger());
448:       assertEquals((-1), node1.getCharno());
449:       assertFalse(node1.isFunction());
450:       assertFalse(node1.isFalse());
451:       assertFalse(node1.isSwitch());
452:       assertFalse(node1.isArrayLit());
453:       assertFalse(node1.isObjectLit());
454:       assertFalse(node1.isNot());
455:       assertFalse(node1.isComma());
456:       assertFalse(node1.isDefaultCase());
457:       assertFalse(node1.isGetProp());
458:       assertFalse(node1.isAdd());
459:       assertFalse(node1.isTrue());
460:       assertFalse(node1.isAssign());
461:       assertFalse(node1.isBreak());
462:       assertFalse(node1.isDelProp());
463:       assertFalse(node1.isNull());
464:       assertFalse(node1.isVoid());
465:       assertFalse(node1.isExprResult());
466:       assertFalse(node1.isCall());
467:       assertFalse(node1.isGetElem());
468:       assertFalse(node1.isName());
469:       assertEquals(2271, node1.getType());
470:       assertEquals(40, node2.getType());
471:       assertFalse(node2.isDefaultCase());
472:       assertFalse(node2.isVoid());
473:       assertFalse(node2.isFunction());
474:       assertFalse(node2.isRegExp());
475:       assertEquals(0, node2.getChildCount());
476:       assertFalse(node2.isCatch());
477:       assertFalse(node2.isName());
478:       assertFalse(node2.isCall());
479:       assertFalse(node2.isIf());
480:       assertFalse(node2.isDelProp());
481:       assertFalse(node2.isNull());
482:       assertFalse(node2.isVar());
483:       assertFalse(node2.isNE());
484:       assertFalse(node2.isTrue());
485:       assertFalse(node2.isSetterDef());
486:       assertFalse(node2.isNew());
487:       assertFalse(node2.isIn());
488:       assertFalse(node2.isEmpty());
489:       assertFalse(node2.isAdd());
490:       assertFalse(node2.isContinue());
491:       assertFalse(node2.isReturn());
492:       assertFalse(node2.isWhile());
493:       assertFalse(node2.isDec());
494:       assertFalse(node2.isTypeOf());
495:       assertFalse(node2.isAssign());
496:       assertFalse(node2.hasChildren());
497:       assertFalse(node2.isDebugger());
498:       assertFalse(node2.isGetProp());
499:       assertEquals((-1), node2.getSourcePosition());
500:       assertFalse(node2.isAnd());
501:       assertFalse(node2.isObjectLit());
502:       assertFalse(node2.isNot());
503:       assertFalse(node2.isThis());
504:       assertFalse(node2.isExprResult());
505:       assertFalse(node2.isComma());
506:       assertFalse(node2.isBreak());
507:       assertFalse(node2.isWith());
508:       assertFalse(node2.isCast());
509:       assertFalse(node2.isInstanceOf());
510:       assertFalse(node2.isThrow());
511:       assertFalse(node2.isFalse());
512:       assertFalse(node2.isGetElem());
513:       assertFalse(node2.isInc());
514:       assertFalse(node2.isOr());
515:       assertFalse(node2.hasMoreThanOneChild());
516:       assertFalse(node2.isDo());
517:       assertFalse(node2.isCase());
518:       assertFalse(node2.isSwitch());
519:       assertFalse(node2.isAssignAdd());
520:       assertFalse(node2.isBlock());
521:       assertFalse(node2.isLabel());
522:       assertEquals((-1), node2.getLineno());
523:       assertFalse(node2.isArrayLit());
524:       assertFalse(node2.isLabelName());
525:       assertFalse(node2.hasOneChild());
526:       assertFalse(node2.isHook());
527:       assertFalse(node2.isFor());
528:       assertFalse(node2.isParamList());
529:       assertFalse(node2.isStringKey());
530:       assertEquals((-1), node2.getCharno());
531:       assertTrue(node2.isString());
532:       assertFalse(node2.isTry());
533:       assertFalse(node2.isGetterDef());
534:       assertFalse(node2.isNumber());
535:       assertFalse(node2.isScript());
536:       assertNotNull(node2);
537:       assertSame(node0, node2);
538:       assertSame(node2, node0);
539:       assertFalse(node0.equals((Object)node1));
540:       assertFalse(node1.equals((Object)node0));
541:       assertFalse(node2.equals((Object)node1));
542:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
543:       assertEquals(43, Node.IS_CONSTANT_NAME);
544:       assertEquals(53, Node.INPUT_ID);
545:       assertEquals(55, Node.INFERRED_FUNCTION);
546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
547:       assertEquals(29, Node.JSDOC_INFO_PROP);
548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
549:       assertEquals(36, Node.QUOTED_PROP);
550:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
551:       assertEquals(37, Node.OPT_ARG_NAME);
552:       assertEquals(56, Node.CHANGE_TIME);
553:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
554:       assertEquals(48, Node.DIRECTIVES);
555:       assertEquals(32, Node.INCRDECR_PROP);
556:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
557:       assertEquals(4095, Node.COLUMN_MASK);
558:       assertEquals(12, Node.COLUMN_BITS);
559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(54, Node.SLASH_V);
562:       assertEquals(57, Node.LAST_PROP);
563:       assertEquals(1, Node.DECR_FLAG);
564:       assertEquals(49, Node.DIRECT_EVAL);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(46, Node.IS_NAMESPACE);
567:       assertEquals(52, Node.LENGTH);
568:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
569:       assertEquals(51, Node.STATIC_SOURCE_FILE);
570:       assertEquals(50, Node.FREE_CALL);
571:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
572:       assertEquals(8, Node.FLAG_NO_THROWS);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(47, Node.IS_DISPATCHER);
575:       assertEquals(40, Node.ORIGINALNAME_PROP);
576:       assertEquals(30, Node.VAR_ARGS_NAME);
577:       assertEquals(2, Node.POST_FLAG);
578:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
579:       assertEquals(8, Node.FLAG_NO_THROWS);
580:       assertEquals(39, Node.EMPTY_BLOCK);
581:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
582:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
583:       assertEquals(50, Node.FREE_CALL);
584:       assertEquals(40, Node.ORIGINALNAME_PROP);
585:       assertEquals(4095, Node.COLUMN_MASK);
586:       assertEquals(57, Node.REFLECTED_OBJECT);
587:       assertEquals(48, Node.DIRECTIVES);
588:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
589:       assertEquals(15, Node.NO_SIDE_EFFECTS);
590:       assertEquals(53, Node.INPUT_ID);
591:       assertEquals(30, Node.VAR_ARGS_NAME);
592:       assertEquals(52, Node.LENGTH);
593:       assertEquals(36, Node.QUOTED_PROP);
594:       assertEquals(55, Node.INFERRED_FUNCTION);
595:       assertEquals(29, Node.JSDOC_INFO_PROP);
596:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
597:       assertEquals(57, Node.LAST_PROP);
598:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
599:       assertEquals(37, Node.OPT_ARG_NAME);
600:       assertEquals(56, Node.CHANGE_TIME);
601:       assertEquals(47, Node.IS_DISPATCHER);
602:       assertEquals(51, Node.STATIC_SOURCE_FILE);
603:       assertEquals(2, Node.POST_FLAG);
604:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
605:       assertEquals(46, Node.IS_NAMESPACE);
606:       assertEquals(49, Node.DIRECT_EVAL);
607:       assertEquals(43, Node.IS_CONSTANT_NAME);
608:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
609:       assertEquals(54, Node.SLASH_V);
610:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
611:       assertEquals(12, Node.COLUMN_BITS);
612:       assertEquals(1, Node.DECR_FLAG);
613:       assertEquals(32, Node.INCRDECR_PROP);
614:       assertEquals(51, Node.STATIC_SOURCE_FILE);
615:       assertEquals(32, Node.INCRDECR_PROP);
616:       assertEquals(56, Node.CHANGE_TIME);
617:       assertEquals(12, Node.COLUMN_BITS);
618:       assertEquals(46, Node.IS_NAMESPACE);
619:       assertEquals(15, Node.NO_SIDE_EFFECTS);
620:       assertEquals(57, Node.LAST_PROP);
621:       assertEquals(1, Node.DECR_FLAG);
622:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
623:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
624:       assertEquals(29, Node.JSDOC_INFO_PROP);
625:       assertEquals(52, Node.LENGTH);
626:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
627:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
628:       assertEquals(57, Node.REFLECTED_OBJECT);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(37, Node.OPT_ARG_NAME);
631:       assertEquals(4095, Node.COLUMN_MASK);
632:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
633:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
634:       assertEquals(48, Node.DIRECTIVES);
635:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
636:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
637:       assertEquals(36, Node.QUOTED_PROP);
638:       assertEquals(50, Node.FREE_CALL);
639:       assertEquals(8, Node.FLAG_NO_THROWS);
640:       assertEquals(39, Node.EMPTY_BLOCK);
641:       assertEquals(53, Node.INPUT_ID);
642:       assertEquals(55, Node.INFERRED_FUNCTION);
643:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
644:       assertEquals(43, Node.IS_CONSTANT_NAME);
645:       assertEquals(54, Node.SLASH_V);
646:       assertEquals(47, Node.IS_DISPATCHER);
647:       assertEquals(2, Node.POST_FLAG);
648:       assertEquals(30, Node.VAR_ARGS_NAME);
649:       assertEquals(40, Node.ORIGINALNAME_PROP);
650:       
651:       byte[] byteArray0 = new byte[14];
652:       byteArray0[0] = (byte)16;
653:       Iterable<Node> iterable0 = node0.children();
654:       assertFalse(iterable0.contains(node0));
655:       assertFalse(node0.isHook());
656:       assertFalse(node0.isSwitch());
657:       assertFalse(node0.isInc());
658:       assertFalse(node0.isBreak());
659:       assertFalse(node0.isThrow());
660:       assertFalse(node0.isThis());
661:       assertFalse(node0.isFalse());
662:       assertFalse(node0.isComma());
663:       assertFalse(node0.isIn());
664:       assertFalse(node0.isInstanceOf());
665:       assertFalse(node0.isIf());
666:       assertFalse(node0.isDelProp());
667:       assertFalse(node0.isEmpty());
668:       assertFalse(node0.isNE());
669:       assertFalse(node0.isCast());
670:       assertFalse(node0.isVoid());
671:       assertFalse(node0.isExprResult());
672:       assertFalse(node0.isGetElem());
673:       assertFalse(node0.hasChildren());
674:       assertEquals(40, node0.getType());
675:       assertFalse(node0.isFunction());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.isTypeOf());
678:       assertFalse(node0.isDec());
679:       assertFalse(node0.isReturn());
680:       assertFalse(node0.isAnd());
681:       assertFalse(node0.isGetProp());
682:       assertFalse(node0.isDebugger());
683:       assertFalse(node0.isObjectLit());
684:       assertFalse(node0.isNot());
685:       assertEquals((-1), node0.getSourcePosition());
686:       assertFalse(node0.isVar());
687:       assertFalse(node0.isAdd());
688:       assertFalse(node0.isCall());
689:       assertTrue(node0.isString());
690:       assertFalse(node0.isName());
691:       assertFalse(node0.isNew());
692:       assertFalse(node0.isWhile());
693:       assertFalse(node0.isContinue());
694:       assertFalse(node0.isBlock());
695:       assertFalse(node0.hasMoreThanOneChild());
696:       assertFalse(node0.isAssignAdd());
697:       assertFalse(node0.isCatch());
698:       assertFalse(node0.isSetterDef());
699:       assertFalse(node0.isDo());
700:       assertEquals((-1), node0.getLineno());
701:       assertFalse(node0.isNull());
702:       assertFalse(node0.isTrue());
703:       assertFalse(node0.isOr());
704:       assertFalse(node0.isTry());
705:       assertFalse(node0.isArrayLit());
706:       assertFalse(node0.isLabelName());
707:       assertFalse(node0.hasOneChild());
708:       assertFalse(node0.isDefaultCase());
709:       assertFalse(node0.isWith());
710:       assertFalse(node0.isFor());
711:       assertFalse(node0.isRegExp());
712:       assertFalse(node0.isLabel());
713:       assertEquals(0, node0.getChildCount());
714:       assertFalse(node0.isCase());
715:       assertFalse(node0.isGetterDef());
716:       assertFalse(node0.isNumber());
717:       assertFalse(node0.isScript());
718:       assertFalse(node0.isParamList());
719:       assertFalse(node0.isStringKey());
720:       assertEquals((-1), node0.getCharno());
721:       assertNotNull(iterable0);
722:       assertSame(node0, node2);
723:       assertFalse(node0.equals((Object)node1));
724:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
725:       assertEquals(43, Node.IS_CONSTANT_NAME);
726:       assertEquals(53, Node.INPUT_ID);
727:       assertEquals(55, Node.INFERRED_FUNCTION);
728:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
729:       assertEquals(29, Node.JSDOC_INFO_PROP);
730:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
731:       assertEquals(36, Node.QUOTED_PROP);
732:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
733:       assertEquals(37, Node.OPT_ARG_NAME);
734:       assertEquals(56, Node.CHANGE_TIME);
735:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
736:       assertEquals(48, Node.DIRECTIVES);
737:       assertEquals(32, Node.INCRDECR_PROP);
738:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
739:       assertEquals(4095, Node.COLUMN_MASK);
740:       assertEquals(12, Node.COLUMN_BITS);
741:       assertEquals(15, Node.NO_SIDE_EFFECTS);
742:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
743:       assertEquals(54, Node.SLASH_V);
744:       assertEquals(57, Node.LAST_PROP);
745:       assertEquals(1, Node.DECR_FLAG);
746:       assertEquals(49, Node.DIRECT_EVAL);
747:       assertEquals(57, Node.REFLECTED_OBJECT);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(52, Node.LENGTH);
750:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
751:       assertEquals(51, Node.STATIC_SOURCE_FILE);
752:       assertEquals(50, Node.FREE_CALL);
753:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
754:       assertEquals(8, Node.FLAG_NO_THROWS);
755:       assertEquals(39, Node.EMPTY_BLOCK);
756:       assertEquals(47, Node.IS_DISPATCHER);
757:       assertEquals(40, Node.ORIGINALNAME_PROP);
758:       assertEquals(30, Node.VAR_ARGS_NAME);
759:       assertEquals(2, Node.POST_FLAG);
760:       
761:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
762:       assertNotNull(fileSystemHandling0);
763:       
764:       boolean boolean0 = node1.isParamList();
765:       assertFalse(boolean0);
766:       assertFalse(node0.isHook());
767:       assertFalse(node0.isSwitch());
768:       assertFalse(node0.isInc());
769:       assertFalse(node0.isBreak());
770:       assertFalse(node0.isThrow());
771:       assertFalse(node0.isThis());
772:       assertFalse(node0.isFalse());
773:       assertFalse(node0.isComma());
774:       assertFalse(node0.isIn());
775:       assertFalse(node0.isInstanceOf());
776:       assertFalse(node0.isIf());
777:       assertFalse(node0.isDelProp());
778:       assertFalse(node0.isEmpty());
779:       assertFalse(node0.isNE());
780:       assertFalse(node0.isCast());
781:       assertFalse(node0.isVoid());
782:       assertFalse(node0.isExprResult());
783:       assertFalse(node0.isGetElem());
784:       assertFalse(node0.hasChildren());
785:       assertEquals(40, node0.getType());
786:       assertFalse(node0.isFunction());
787:       assertFalse(node0.isAssign());
788:       assertFalse(node0.isTypeOf());
789:       assertFalse(node0.isDec());
790:       assertFalse(node0.isReturn());
791:       assertFalse(node0.isAnd());
792:       assertFalse(node0.isGetProp());
793:       assertFalse(node0.isDebugger());
794:       assertFalse(node0.isObjectLit());
795:       assertFalse(node0.isNot());
796:       assertEquals((-1), node0.getSourcePosition());
797:       assertFalse(node0.isVar());
798:       assertFalse(node0.isAdd());
799:       assertFalse(node0.isCall());
800:       assertTrue(node0.isString());
801:       assertFalse(node0.isName());
802:       assertFalse(node0.isNew());
803:       assertFalse(node0.isWhile());
804:       assertFalse(node0.isContinue());
805:       assertFalse(node0.isBlock());
806:       assertFalse(node0.hasMoreThanOneChild());
807:       assertFalse(node0.isAssignAdd());
808:       assertFalse(node0.isCatch());
809:       assertFalse(node0.isSetterDef());
810:       assertFalse(node0.isDo());
811:       assertEquals((-1), node0.getLineno());
812:       assertFalse(node0.isNull());
813:       assertFalse(node0.isTrue());
814:       assertFalse(node0.isOr());
815:       assertFalse(node0.isTry());
816:       assertFalse(node0.isArrayLit());
817:       assertFalse(node0.isLabelName());
818:       assertFalse(node0.hasOneChild());
819:       assertFalse(node0.isDefaultCase());
820:       assertFalse(node0.isWith());
821:       assertFalse(node0.isFor());
822:       assertFalse(node0.isRegExp());
823:       assertFalse(node0.isLabel());
824:       assertEquals(0, node0.getChildCount());
825:       assertFalse(node0.isCase());
826:       assertFalse(node0.isGetterDef());
827:       assertFalse(node0.isNumber());
828:       assertFalse(node0.isScript());
829:       assertFalse(node0.isParamList());
830:       assertFalse(node0.isStringKey());
831:       assertEquals((-1), node0.getCharno());
832:       assertFalse(node1.isReturn());
833:       assertFalse(node1.isAssignAdd());
834:       assertFalse(node1.isContinue());
835:       assertFalse(node1.hasMoreThanOneChild());
836:       assertEquals((-1), node1.getSourcePosition());
837:       assertFalse(node1.isLabel());
838:       assertFalse(node1.isOr());
839:       assertFalse(node1.isTypeOf());
840:       assertFalse(node1.isDec());
841:       assertFalse(node1.isWhile());
842:       assertFalse(node1.isNumber());
843:       assertFalse(node1.isDo());
844:       assertFalse(node1.isNew());
845:       assertFalse(node1.isVar());
846:       assertFalse(node1.isCast());
847:       assertFalse(node1.isParamList());
848:       assertFalse(node1.isStringKey());
849:       assertFalse(node1.isAnd());
850:       assertFalse(node1.isLabelName());
851:       assertFalse(node1.isCatch());
852:       assertFalse(node1.isInstanceOf());
853:       assertFalse(node1.isThis());
854:       assertFalse(node1.isScript());
855:       assertFalse(node1.isThrow());
856:       assertFalse(node1.isSetterDef());
857:       assertFalse(node1.isTry());
858:       assertFalse(node1.isHook());
859:       assertFalse(node1.isBlock());
860:       assertFalse(node1.isRegExp());
861:       assertFalse(node1.isIf());
862:       assertFalse(node1.isWith());
863:       assertFalse(node1.isNE());
864:       assertEquals((-1), node1.getLineno());
865:       assertFalse(node1.isIn());
866:       assertEquals(1, node1.getChildCount());
867:       assertTrue(node1.hasChildren());
868:       assertFalse(node1.isGetterDef());
869:       assertFalse(node1.isString());
870:       assertTrue(node1.hasOneChild());
871:       assertFalse(node1.isEmpty());
872:       assertFalse(node1.isFor());
873:       assertFalse(node1.isInc());
874:       assertFalse(node1.isCase());
875:       assertFalse(node1.isDebugger());
876:       assertEquals((-1), node1.getCharno());
877:       assertFalse(node1.isFunction());
878:       assertFalse(node1.isFalse());
879:       assertFalse(node1.isSwitch());
880:       assertFalse(node1.isArrayLit());
881:       assertFalse(node1.isObjectLit());
882:       assertFalse(node1.isNot());
883:       assertFalse(node1.isComma());
884:       assertFalse(node1.isDefaultCase());
885:       assertFalse(node1.isGetProp());
886:       assertFalse(node1.isAdd());
887:       assertFalse(node1.isTrue());
888:       assertFalse(node1.isAssign());
889:       assertFalse(node1.isBreak());
890:       assertFalse(node1.isDelProp());
891:       assertFalse(node1.isNull());
892:       assertFalse(node1.isVoid());
893:       assertFalse(node1.isExprResult());
894:       assertFalse(node1.isCall());
895:       assertFalse(node1.isGetElem());
896:       assertFalse(node1.isName());
897:       assertEquals(2271, node1.getType());
898:       assertSame(node0, node2);
899:       assertFalse(node0.equals((Object)node1));
900:       assertFalse(node1.equals((Object)node2));
901:       assertFalse(node1.equals((Object)node0));
902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
903:       assertEquals(43, Node.IS_CONSTANT_NAME);
904:       assertEquals(53, Node.INPUT_ID);
905:       assertEquals(55, Node.INFERRED_FUNCTION);
906:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
907:       assertEquals(29, Node.JSDOC_INFO_PROP);
908:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
909:       assertEquals(36, Node.QUOTED_PROP);
910:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
911:       assertEquals(37, Node.OPT_ARG_NAME);
912:       assertEquals(56, Node.CHANGE_TIME);
913:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
914:       assertEquals(48, Node.DIRECTIVES);
915:       assertEquals(32, Node.INCRDECR_PROP);
916:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
917:       assertEquals(4095, Node.COLUMN_MASK);
918:       assertEquals(12, Node.COLUMN_BITS);
919:       assertEquals(15, Node.NO_SIDE_EFFECTS);
920:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
921:       assertEquals(54, Node.SLASH_V);
922:       assertEquals(57, Node.LAST_PROP);
923:       assertEquals(1, Node.DECR_FLAG);
924:       assertEquals(49, Node.DIRECT_EVAL);
925:       assertEquals(57, Node.REFLECTED_OBJECT);
926:       assertEquals(46, Node.IS_NAMESPACE);
927:       assertEquals(52, Node.LENGTH);
928:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
929:       assertEquals(51, Node.STATIC_SOURCE_FILE);
930:       assertEquals(50, Node.FREE_CALL);
931:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
932:       assertEquals(8, Node.FLAG_NO_THROWS);
933:       assertEquals(39, Node.EMPTY_BLOCK);
934:       assertEquals(47, Node.IS_DISPATCHER);
935:       assertEquals(40, Node.ORIGINALNAME_PROP);
936:       assertEquals(30, Node.VAR_ARGS_NAME);
937:       assertEquals(2, Node.POST_FLAG);
938:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
939:       assertEquals(8, Node.FLAG_NO_THROWS);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
942:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
943:       assertEquals(50, Node.FREE_CALL);
944:       assertEquals(40, Node.ORIGINALNAME_PROP);
945:       assertEquals(4095, Node.COLUMN_MASK);
946:       assertEquals(57, Node.REFLECTED_OBJECT);
947:       assertEquals(48, Node.DIRECTIVES);
948:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
949:       assertEquals(15, Node.NO_SIDE_EFFECTS);
950:       assertEquals(53, Node.INPUT_ID);
951:       assertEquals(30, Node.VAR_ARGS_NAME);
952:       assertEquals(52, Node.LENGTH);
953:       assertEquals(36, Node.QUOTED_PROP);
954:       assertEquals(55, Node.INFERRED_FUNCTION);
955:       assertEquals(29, Node.JSDOC_INFO_PROP);
956:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
957:       assertEquals(57, Node.LAST_PROP);
958:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
959:       assertEquals(37, Node.OPT_ARG_NAME);
960:       assertEquals(56, Node.CHANGE_TIME);
961:       assertEquals(47, Node.IS_DISPATCHER);
962:       assertEquals(51, Node.STATIC_SOURCE_FILE);
963:       assertEquals(2, Node.POST_FLAG);
964:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
965:       assertEquals(46, Node.IS_NAMESPACE);
966:       assertEquals(49, Node.DIRECT_EVAL);
967:       assertEquals(43, Node.IS_CONSTANT_NAME);
968:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
969:       assertEquals(54, Node.SLASH_V);
970:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
971:       assertEquals(12, Node.COLUMN_BITS);
972:       assertEquals(1, Node.DECR_FLAG);
973:       assertEquals(32, Node.INCRDECR_PROP);
974:       
975:       boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
976:       assertFalse(boolean1);
977:       assertTrue(boolean1 == boolean0);
978:       
979:       Node node3 = Node.newString(37, "", (-554), 751619276);
980:       assertFalse(node3.isIn());
981:       assertFalse(node3.isGetterDef());
982:       assertFalse(node3.isDelProp());
983:       assertFalse(node3.isSwitch());
984:       assertFalse(node3.isIf());
985:       assertFalse(node3.isNE());
986:       assertFalse(node3.isArrayLit());
987:       assertFalse(node3.isFunction());
988:       assertFalse(node3.isInc());
989:       assertFalse(node3.isEmpty());
990:       assertFalse(node3.isFalse());
991:       assertFalse(node3.isDefaultCase());
992:       assertFalse(node3.isThrow());
993:       assertFalse(node3.isGetProp());
994:       assertFalse(node3.isComma());
995:       assertFalse(node3.isNot());
996:       assertFalse(node3.isName());
997:       assertFalse(node3.isObjectLit());
998:       assertFalse(node3.isBreak());
999:       assertFalse(node3.isNull());
1000:       assertFalse(node3.isTrue());
1001:       assertFalse(node3.isAnd());
1002:       assertFalse(node3.isDebugger());
1003:       assertFalse(node3.isVoid());
1004:       assertFalse(node3.isExprResult());
1005:       assertFalse(node3.isString());
1006:       assertFalse(node3.hasChildren());
1007:       assertEquals(37, node3.getType());
1008:       assertFalse(node3.isAssign());
1009:       assertFalse(node3.isDec());
1010:       assertFalse(node3.isWhile());
1011:       assertFalse(node3.isAssignAdd());
1012:       assertFalse(node3.isLabel());
1013:       assertFalse(node3.isReturn());
1014:       assertEquals((-1), node3.getLineno());
1015:       assertFalse(node3.isOr());
1016:       assertFalse(node3.isTypeOf());
1017:       assertFalse(node3.hasMoreThanOneChild());
1018:       assertFalse(node3.isNumber());
1019:       assertFalse(node3.isContinue());
1020:       assertFalse(node3.isLabelName());
1021:       assertFalse(node3.isGetElem());
1022:       assertEquals((-1), node3.getSourcePosition());
1023:       assertFalse(node3.isAdd());
1024:       assertFalse(node3.isNew());
1025:       assertFalse(node3.isCast());
1026:       assertFalse(node3.isDo());
1027:       assertFalse(node3.isVar());
1028:       assertEquals(0, node3.getChildCount());
1029:       assertFalse(node3.isSetterDef());
1030:       assertFalse(node3.isCatch());
1031:       assertFalse(node3.isInstanceOf());
1032:       assertTrue(node3.isCall());
1033:       assertFalse(node3.isParamList());
1034:       assertFalse(node3.isStringKey());
1035:       assertFalse(node3.isTry());
1036:       assertFalse(node3.isBlock());
1037:       assertEquals((-1), node3.getCharno());
1038:       assertFalse(node3.hasOneChild());
1039:       assertFalse(node3.isRegExp());
1040:       assertFalse(node3.isScript());
1041:       assertFalse(node3.isCase());
1042:       assertFalse(node3.isFor());
1043:       assertFalse(node3.isWith());
1044:       assertFalse(node3.isThis());
1045:       assertFalse(node3.isHook());
1046:       assertNotNull(node3);
1047:       assertNotSame(node3, node0);
1048:       assertNotSame(node3, node2);
1049:       assertFalse(node3.equals((Object)node1));
1050:       assertFalse(node3.equals((Object)node0));
1051:       assertFalse(node3.equals((Object)node2));
1052:       assertEquals(8, Node.FLAG_NO_THROWS);
1053:       assertEquals(48, Node.DIRECTIVES);
1054:       assertEquals(50, Node.FREE_CALL);
1055:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1056:       assertEquals(39, Node.EMPTY_BLOCK);
1057:       assertEquals(40, Node.ORIGINALNAME_PROP);
1058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1059:       assertEquals(4095, Node.COLUMN_MASK);
1060:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1061:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1062:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1063:       assertEquals(36, Node.QUOTED_PROP);
1064:       assertEquals(57, Node.LAST_PROP);
1065:       assertEquals(49, Node.DIRECT_EVAL);
1066:       assertEquals(53, Node.INPUT_ID);
1067:       assertEquals(55, Node.INFERRED_FUNCTION);
1068:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1069:       assertEquals(57, Node.REFLECTED_OBJECT);
1070:       assertEquals(52, Node.LENGTH);
1071:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1072:       assertEquals(56, Node.CHANGE_TIME);
1073:       assertEquals(47, Node.IS_DISPATCHER);
1074:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1075:       assertEquals(2, Node.POST_FLAG);
1076:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1077:       assertEquals(37, Node.OPT_ARG_NAME);
1078:       assertEquals(29, Node.JSDOC_INFO_PROP);
1079:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1080:       assertEquals(32, Node.INCRDECR_PROP);
1081:       assertEquals(12, Node.COLUMN_BITS);
1082:       assertEquals(43, Node.IS_CONSTANT_NAME);
1083:       assertEquals(30, Node.VAR_ARGS_NAME);
1084:       assertEquals(1, Node.DECR_FLAG);
1085:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1086:       assertEquals(46, Node.IS_NAMESPACE);
1087:       assertEquals(54, Node.SLASH_V);
1088:       
1089:       Set<String> set0 = node2.getDirectives();
1090:       assertFalse(node0.isHook());
1091:       assertFalse(node0.isSwitch());
1092:       assertFalse(node0.isInc());
1093:       assertFalse(node0.isBreak());
1094:       assertFalse(node0.isThrow());
1095:       assertFalse(node0.isThis());
1096:       assertFalse(node0.isFalse());
1097:       assertFalse(node0.isComma());
1098:       assertFalse(node0.isIn());
1099:       assertFalse(node0.isInstanceOf());
1100:       assertFalse(node0.isIf());
1101:       assertFalse(node0.isDelProp());
1102:       assertFalse(node0.isEmpty());
1103:       assertFalse(node0.isNE());
1104:       assertFalse(node0.isCast());
1105:       assertFalse(node0.isVoid());
1106:       assertFalse(node0.isExprResult());
1107:       assertFalse(node0.isGetElem());
1108:       assertFalse(node0.hasChildren());
1109:       assertEquals(40, node0.getType());
1110:       assertFalse(node0.isFunction());
1111:       assertFalse(node0.isAssign());
1112:       assertFalse(node0.isTypeOf());
1113:       assertFalse(node0.isDec());
1114:       assertFalse(node0.isReturn());
1115:       assertFalse(node0.isAnd());
1116:       assertFalse(node0.isGetProp());
1117:       assertFalse(node0.isDebugger());
1118:       assertFalse(node0.isObjectLit());
1119:       assertFalse(node0.isNot());
1120:       assertEquals((-1), node0.getSourcePosition());
1121:       assertFalse(node0.isVar());
1122:       assertFalse(node0.isAdd());
1123:       assertFalse(node0.isCall());
1124:       assertTrue(node0.isString());
1125:       assertFalse(node0.isName());
1126:       assertFalse(node0.isNew());
1127:       assertFalse(node0.isWhile());
1128:       assertFalse(node0.isContinue());
1129:       assertFalse(node0.isBlock());
1130:       assertFalse(node0.hasMoreThanOneChild());
1131:       assertFalse(node0.isAssignAdd());
1132:       assertFalse(node0.isCatch());
1133:       assertFalse(node0.isSetterDef());
1134:       assertFalse(node0.isDo());
1135:       assertEquals((-1), node0.getLineno());
1136:       assertFalse(node0.isNull());
1137:       assertFalse(node0.isTrue());
1138:       assertFalse(node0.isOr());
1139:       assertFalse(node0.isTry());
1140:       assertFalse(node0.isArrayLit());
1141:       assertFalse(node0.isLabelName());
1142:       assertFalse(node0.hasOneChild());
1143:       assertFalse(node0.isDefaultCase());
1144:       assertFalse(node0.isWith());
1145:       assertFalse(node0.isFor());
1146:       assertFalse(node0.isRegExp());
1147:       assertFalse(node0.isLabel());
1148:       assertEquals(0, node0.getChildCount());
1149:       assertFalse(node0.isCase());
1150:       assertFalse(node0.isGetterDef());
1151:       assertFalse(node0.isNumber());
1152:       assertFalse(node0.isScript());
1153:       assertFalse(node0.isParamList());
1154:       assertFalse(node0.isStringKey());
1155:       assertEquals((-1), node0.getCharno());
1156:       assertFalse(node1.isReturn());
1157:       assertFalse(node1.isAssignAdd());
1158:       assertFalse(node1.isContinue());
1159:       assertFalse(node1.hasMoreThanOneChild());
1160:       assertEquals((-1), node1.getSourcePosition());
1161:       assertFalse(node1.isLabel());
1162:       assertFalse(node1.isOr());
1163:       assertFalse(node1.isTypeOf());
1164:       assertFalse(node1.isDec());
1165:       assertFalse(node1.isWhile());
1166:       assertFalse(node1.isNumber());
1167:       assertFalse(node1.isDo());
1168:       assertFalse(node1.isNew());
1169:       assertFalse(node1.isVar());
1170:       assertFalse(node1.isCast());
1171:       assertFalse(node1.isParamList());
1172:       assertFalse(node1.isStringKey());
1173:       assertFalse(node1.isAnd());
1174:       assertFalse(node1.isLabelName());
1175:       assertFalse(node1.isCatch());
1176:       assertFalse(node1.isInstanceOf());
1177:       assertFalse(node1.isThis());
1178:       assertFalse(node1.isScript());
1179:       assertFalse(node1.isThrow());
1180:       assertFalse(node1.isSetterDef());
1181:       assertFalse(node1.isTry());
1182:       assertFalse(node1.isHook());
1183:       assertFalse(node1.isBlock());
1184:       assertFalse(node1.isRegExp());
1185:       assertFalse(node1.isIf());
1186:       assertFalse(node1.isWith());
1187:       assertFalse(node1.isNE());
1188:       assertEquals((-1), node1.getLineno());
1189:       assertFalse(node1.isIn());
1190:       assertEquals(1, node1.getChildCount());
1191:       assertTrue(node1.hasChildren());
1192:       assertFalse(node1.isGetterDef());
1193:       assertFalse(node1.isString());
1194:       assertTrue(node1.hasOneChild());
1195:       assertFalse(node1.isEmpty());
1196:       assertFalse(node1.isFor());
1197:       assertFalse(node1.isInc());
1198:       assertFalse(node1.isCase());
1199:       assertFalse(node1.isDebugger());
1200:       assertEquals((-1), node1.getCharno());
1201:       assertFalse(node1.isFunction());
1202:       assertFalse(node1.isFalse());
1203:       assertFalse(node1.isSwitch());
1204:       assertFalse(node1.isArrayLit());
1205:       assertFalse(node1.isObjectLit());
1206:       assertFalse(node1.isNot());
1207:       assertFalse(node1.isComma());
1208:       assertFalse(node1.isDefaultCase());
1209:       assertFalse(node1.isGetProp());
1210:       assertFalse(node1.isAdd());
1211:       assertFalse(node1.isTrue());
1212:       assertFalse(node1.isAssign());
1213:       assertFalse(node1.isBreak());
1214:       assertFalse(node1.isDelProp());
1215:       assertFalse(node1.isNull());
1216:       assertFalse(node1.isVoid());
1217:       assertFalse(node1.isExprResult());
1218:       assertFalse(node1.isCall());
1219:       assertFalse(node1.isGetElem());
1220:       assertFalse(node1.isName());
1221:       assertEquals(2271, node1.getType());
1222:       assertEquals(40, node2.getType());
1223:       assertFalse(node2.isDefaultCase());
1224:       assertFalse(node2.isVoid());
1225:       assertFalse(node2.isFunction());
1226:       assertFalse(node2.isRegExp());
1227:       assertEquals(0, node2.getChildCount());
1228:       assertFalse(node2.isCatch());
1229:       assertFalse(node2.isName());
1230:       assertFalse(node2.isCall());
1231:       assertFalse(node2.isIf());
1232:       assertFalse(node2.isDelProp());
1233:       assertFalse(node2.isNull());
1234:       assertFalse(node2.isVar());
1235:       assertFalse(node2.isNE());
1236:       assertFalse(node2.isTrue());
1237:       assertFalse(node2.isSetterDef());
1238:       assertFalse(node2.isNew());
1239:       assertFalse(node2.isIn());
1240:       assertFalse(node2.isEmpty());
1241:       assertFalse(node2.isAdd());
1242:       assertFalse(node2.isContinue());
1243:       assertFalse(node2.isReturn());
1244:       assertFalse(node2.isWhile());
1245:       assertFalse(node2.isDec());
1246:       assertFalse(node2.isTypeOf());
1247:       assertFalse(node2.isAssign());
1248:       assertFalse(node2.hasChildren());
1249:       assertFalse(node2.isDebugger());
1250:       assertFalse(node2.isGetProp());
1251:       assertEquals((-1), node2.getSourcePosition());
1252:       assertFalse(node2.isAnd());
1253:       assertFalse(node2.isObjectLit());
1254:       assertFalse(node2.isNot());
1255:       assertFalse(node2.isThis());
1256:       assertFalse(node2.isExprResult());
1257:       assertFalse(node2.isComma());
1258:       assertFalse(node2.isBreak());
1259:       assertFalse(node2.isWith());
1260:       assertFalse(node2.isCast());
1261:       assertFalse(node2.isInstanceOf());
1262:       assertFalse(node2.isThrow());
1263:       assertFalse(node2.isFalse());
1264:       assertFalse(node2.isGetElem());
1265:       assertFalse(node2.isInc());
1266:       assertFalse(node2.isOr());
1267:       assertFalse(node2.hasMoreThanOneChild());
1268:       assertFalse(node2.isDo());
1269:       assertFalse(node2.isCase());
1270:       assertFalse(node2.isSwitch());
1271:       assertFalse(node2.isAssignAdd());
1272:       assertFalse(node2.isBlock());
1273:       assertFalse(node2.isLabel());
1274:       assertEquals((-1), node2.getLineno());
1275:       assertFalse(node2.isArrayLit());
1276:       assertFalse(node2.isLabelName());
1277:       assertFalse(node2.hasOneChild());
1278:       assertFalse(node2.isHook());
1279:       assertFalse(node2.isFor());
1280:       assertFalse(node2.isParamList());
1281:       assertFalse(node2.isStringKey());
1282:       assertEquals((-1), node2.getCharno());
1283:       assertTrue(node2.isString());
1284:       assertFalse(node2.isTry());
1285:       assertFalse(node2.isGetterDef());
1286:       assertFalse(node2.isNumber());
1287:       assertFalse(node2.isScript());
1288:       assertNull(set0);
1289:       assertNotSame(node0, node3);
1290:       assertSame(node0, node2);
1291:       assertSame(node2, node0);
1292:       assertNotSame(node2, node3);
1293:       assertFalse(node0.equals((Object)node3));
1294:       assertFalse(node0.equals((Object)node1));
1295:       assertFalse(node1.equals((Object)node3));
1296:       assertFalse(node1.equals((Object)node2));
1297:       assertFalse(node1.equals((Object)node0));
1298:       assertFalse(node2.equals((Object)node1));
1299:       assertFalse(node2.equals((Object)node3));
1300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1301:       assertEquals(43, Node.IS_CONSTANT_NAME);
1302:       assertEquals(53, Node.INPUT_ID);
1303:       assertEquals(55, Node.INFERRED_FUNCTION);
1304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1305:       assertEquals(29, Node.JSDOC_INFO_PROP);
1306:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1307:       assertEquals(36, Node.QUOTED_PROP);
1308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1309:       assertEquals(37, Node.OPT_ARG_NAME);
1310:       assertEquals(56, Node.CHANGE_TIME);
1311:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1312:       assertEquals(48, Node.DIRECTIVES);
1313:       assertEquals(32, Node.INCRDECR_PROP);
1314:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1315:       assertEquals(4095, Node.COLUMN_MASK);
1316:       assertEquals(12, Node.COLUMN_BITS);
1317:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1319:       assertEquals(54, Node.SLASH_V);
1320:       assertEquals(57, Node.LAST_PROP);
1321:       assertEquals(1, Node.DECR_FLAG);
1322:       assertEquals(49, Node.DIRECT_EVAL);
1323:       assertEquals(57, Node.REFLECTED_OBJECT);
1324:       assertEquals(46, Node.IS_NAMESPACE);
1325:       assertEquals(52, Node.LENGTH);
1326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1327:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1328:       assertEquals(50, Node.FREE_CALL);
1329:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1330:       assertEquals(8, Node.FLAG_NO_THROWS);
1331:       assertEquals(39, Node.EMPTY_BLOCK);
1332:       assertEquals(47, Node.IS_DISPATCHER);
1333:       assertEquals(40, Node.ORIGINALNAME_PROP);
1334:       assertEquals(30, Node.VAR_ARGS_NAME);
1335:       assertEquals(2, Node.POST_FLAG);
1336:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1337:       assertEquals(8, Node.FLAG_NO_THROWS);
1338:       assertEquals(39, Node.EMPTY_BLOCK);
1339:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1340:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1341:       assertEquals(50, Node.FREE_CALL);
1342:       assertEquals(40, Node.ORIGINALNAME_PROP);
1343:       assertEquals(4095, Node.COLUMN_MASK);
1344:       assertEquals(57, Node.REFLECTED_OBJECT);
1345:       assertEquals(48, Node.DIRECTIVES);
1346:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1348:       assertEquals(53, Node.INPUT_ID);
1349:       assertEquals(30, Node.VAR_ARGS_NAME);
1350:       assertEquals(52, Node.LENGTH);
1351:       assertEquals(36, Node.QUOTED_PROP);
1352:       assertEquals(55, Node.INFERRED_FUNCTION);
1353:       assertEquals(29, Node.JSDOC_INFO_PROP);
1354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1355:       assertEquals(57, Node.LAST_PROP);
1356:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1357:       assertEquals(37, Node.OPT_ARG_NAME);
1358:       assertEquals(56, Node.CHANGE_TIME);
1359:       assertEquals(47, Node.IS_DISPATCHER);
1360:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1361:       assertEquals(2, Node.POST_FLAG);
1362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1363:       assertEquals(46, Node.IS_NAMESPACE);
1364:       assertEquals(49, Node.DIRECT_EVAL);
1365:       assertEquals(43, Node.IS_CONSTANT_NAME);
1366:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1367:       assertEquals(54, Node.SLASH_V);
1368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1369:       assertEquals(12, Node.COLUMN_BITS);
1370:       assertEquals(1, Node.DECR_FLAG);
1371:       assertEquals(32, Node.INCRDECR_PROP);
1372:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1373:       assertEquals(32, Node.INCRDECR_PROP);
1374:       assertEquals(56, Node.CHANGE_TIME);
1375:       assertEquals(12, Node.COLUMN_BITS);
1376:       assertEquals(46, Node.IS_NAMESPACE);
1377:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1378:       assertEquals(57, Node.LAST_PROP);
1379:       assertEquals(1, Node.DECR_FLAG);
1380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1381:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1382:       assertEquals(29, Node.JSDOC_INFO_PROP);
1383:       assertEquals(52, Node.LENGTH);
1384:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1385:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1386:       assertEquals(57, Node.REFLECTED_OBJECT);
1387:       assertEquals(49, Node.DIRECT_EVAL);
1388:       assertEquals(37, Node.OPT_ARG_NAME);
1389:       assertEquals(4095, Node.COLUMN_MASK);
1390:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1391:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1392:       assertEquals(48, Node.DIRECTIVES);
1393:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1394:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1395:       assertEquals(36, Node.QUOTED_PROP);
1396:       assertEquals(50, Node.FREE_CALL);
1397:       assertEquals(8, Node.FLAG_NO_THROWS);
1398:       assertEquals(39, Node.EMPTY_BLOCK);
1399:       assertEquals(53, Node.INPUT_ID);
1400:       assertEquals(55, Node.INFERRED_FUNCTION);
1401:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1402:       assertEquals(43, Node.IS_CONSTANT_NAME);
1403:       assertEquals(54, Node.SLASH_V);
1404:       assertEquals(47, Node.IS_DISPATCHER);
1405:       assertEquals(2, Node.POST_FLAG);
1406:       assertEquals(30, Node.VAR_ARGS_NAME);
1407:       assertEquals(40, Node.ORIGINALNAME_PROP);
1408:       
1409:       JSDocInfo jSDocInfo0 = node1.getJSDocInfo();
1410:       assertFalse(node0.isHook());
1411:       assertFalse(node0.isSwitch());
1412:       assertFalse(node0.isInc());
1413:       assertFalse(node0.isBreak());
1414:       assertFalse(node0.isThrow());
1415:       assertFalse(node0.isThis());
1416:       assertFalse(node0.isFalse());
1417:       assertFalse(node0.isComma());
1418:       assertFalse(node0.isIn());
1419:       assertFalse(node0.isInstanceOf());
1420:       assertFalse(node0.isIf());
1421:       assertFalse(node0.isDelProp());
1422:       assertFalse(node0.isEmpty());
1423:       assertFalse(node0.isNE());
1424:       assertFalse(node0.isCast());
1425:       assertFalse(node0.isVoid());
1426:       assertFalse(node0.isExprResult());
1427:       assertFalse(node0.isGetElem());
1428:       assertFalse(node0.hasChildren());
1429:       assertEquals(40, node0.getType());
1430:       assertFalse(node0.isFunction());
1431:       assertFalse(node0.isAssign());
1432:       assertFalse(node0.isTypeOf());
1433:       assertFalse(node0.isDec());
1434:       assertFalse(node0.isReturn());
1435:       assertFalse(node0.isAnd());
1436:       assertFalse(node0.isGetProp());
1437:       assertFalse(node0.isDebugger());
1438:       assertFalse(node0.isObjectLit());
1439:       assertFalse(node0.isNot());
1440:       assertEquals((-1), node0.getSourcePosition());
1441:       assertFalse(node0.isVar());
1442:       assertFalse(node0.isAdd());
1443:       assertFalse(node0.isCall());
1444:       assertTrue(node0.isString());
1445:       assertFalse(node0.isName());
1446:       assertFalse(node0.isNew());
1447:       assertFalse(node0.isWhile());
1448:       assertFalse(node0.isContinue());
1449:       assertFalse(node0.isBlock());
1450:       assertFalse(node0.hasMoreThanOneChild());
1451:       assertFalse(node0.isAssignAdd());
1452:       assertFalse(node0.isCatch());
1453:       assertFalse(node0.isSetterDef());
1454:       assertFalse(node0.isDo());
1455:       assertEquals((-1), node0.getLineno());
1456:       assertFalse(node0.isNull());
1457:       assertFalse(node0.isTrue());
1458:       assertFalse(node0.isOr());
1459:       assertFalse(node0.isTry());
1460:       assertFalse(node0.isArrayLit());
1461:       assertFalse(node0.isLabelName());
1462:       assertFalse(node0.hasOneChild());
1463:       assertFalse(node0.isDefaultCase());
1464:       assertFalse(node0.isWith());
1465:       assertFalse(node0.isFor());
1466:       assertFalse(node0.isRegExp());
1467:       assertFalse(node0.isLabel());
1468:       assertEquals(0, node0.getChildCount());
1469:       assertFalse(node0.isCase());
1470:       assertFalse(node0.isGetterDef());
1471:       assertFalse(node0.isNumber());
1472:       assertFalse(node0.isScript());
1473:       assertFalse(node0.isParamList());
1474:       assertFalse(node0.isStringKey());
1475:       assertEquals((-1), node0.getCharno());
1476:       assertFalse(node1.isReturn());
1477:       assertFalse(node1.isAssignAdd());
1478:       assertFalse(node1.isContinue());
1479:       assertFalse(node1.hasMoreThanOneChild());
1480:       assertEquals((-1), node1.getSourcePosition());
1481:       assertFalse(node1.isLabel());
1482:       assertFalse(node1.isOr());
1483:       assertFalse(node1.isTypeOf());
1484:       assertFalse(node1.isDec());
1485:       assertFalse(node1.isWhile());
1486:       assertFalse(node1.isNumber());
1487:       assertFalse(node1.isDo());
1488:       assertFalse(node1.isNew());
1489:       assertFalse(node1.isVar());
1490:       assertFalse(node1.isCast());
1491:       assertFalse(node1.isParamList());
1492:       assertFalse(node1.isStringKey());
1493:       assertFalse(node1.isAnd());
1494:       assertFalse(node1.isLabelName());
1495:       assertFalse(node1.isCatch());
1496:       assertFalse(node1.isInstanceOf());
1497:       assertFalse(node1.isThis());
1498:       assertFalse(node1.isScript());
1499:       assertFalse(node1.isThrow());
1500:       assertFalse(node1.isSetterDef());
1501:       assertFalse(node1.isTry());
1502:       assertFalse(node1.isHook());
1503:       assertFalse(node1.isBlock());
1504:       assertFalse(node1.isRegExp());
1505:       assertFalse(node1.isIf());
1506:       assertFalse(node1.isWith());
1507:       assertFalse(node1.isNE());
1508:       assertEquals((-1), node1.getLineno());
1509:       assertFalse(node1.isIn());
1510:       assertEquals(1, node1.getChildCount());
1511:       assertTrue(node1.hasChildren());
1512:       assertFalse(node1.isGetterDef());
1513:       assertFalse(node1.isString());
1514:       assertTrue(node1.hasOneChild());
1515:       assertFalse(node1.isEmpty());
1516:       assertFalse(node1.isFor());
1517:       assertFalse(node1.isInc());
1518:       assertFalse(node1.isCase());
1519:       assertFalse(node1.isDebugger());
1520:       assertEquals((-1), node1.getCharno());
1521:       assertFalse(node1.isFunction());
1522:       assertFalse(node1.isFalse());
1523:       assertFalse(node1.isSwitch());
1524:       assertFalse(node1.isArrayLit());
1525:       assertFalse(node1.isObjectLit());
1526:       assertFalse(node1.isNot());
1527:       assertFalse(node1.isComma());
1528:       assertFalse(node1.isDefaultCase());
1529:       assertFalse(node1.isGetProp());
1530:       assertFalse(node1.isAdd());
1531:       assertFalse(node1.isTrue());
1532:       assertFalse(node1.isAssign());
1533:       assertFalse(node1.isBreak());
1534:       assertFalse(node1.isDelProp());
1535:       assertFalse(node1.isNull());
1536:       assertFalse(node1.isVoid());
1537:       assertFalse(node1.isExprResult());
1538:       assertFalse(node1.isCall());
1539:       assertFalse(node1.isGetElem());
1540:       assertFalse(node1.isName());
1541:       assertEquals(2271, node1.getType());
1542:       assertNull(jSDocInfo0);
1543:       assertNotSame(node0, node3);
1544:       assertSame(node0, node2);
1545:       assertFalse(node0.equals((Object)node3));
1546:       assertFalse(node0.equals((Object)node1));
1547:       assertFalse(node1.equals((Object)node3));
1548:       assertFalse(node1.equals((Object)node2));
1549:       assertFalse(node1.equals((Object)node0));
1550:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1551:       assertEquals(43, Node.IS_CONSTANT_NAME);
1552:       assertEquals(53, Node.INPUT_ID);
1553:       assertEquals(55, Node.INFERRED_FUNCTION);
1554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1555:       assertEquals(29, Node.JSDOC_INFO_PROP);
1556:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1557:       assertEquals(36, Node.QUOTED_PROP);
1558:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1559:       assertEquals(37, Node.OPT_ARG_NAME);
1560:       assertEquals(56, Node.CHANGE_TIME);
1561:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1562:       assertEquals(48, Node.DIRECTIVES);
1563:       assertEquals(32, Node.INCRDECR_PROP);
1564:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1565:       assertEquals(4095, Node.COLUMN_MASK);
1566:       assertEquals(12, Node.COLUMN_BITS);
1567:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1568:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1569:       assertEquals(54, Node.SLASH_V);
1570:       assertEquals(57, Node.LAST_PROP);
1571:       assertEquals(1, Node.DECR_FLAG);
1572:       assertEquals(49, Node.DIRECT_EVAL);
1573:       assertEquals(57, Node.REFLECTED_OBJECT);
1574:       assertEquals(46, Node.IS_NAMESPACE);
1575:       assertEquals(52, Node.LENGTH);
1576:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1577:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1578:       assertEquals(50, Node.FREE_CALL);
1579:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1580:       assertEquals(8, Node.FLAG_NO_THROWS);
1581:       assertEquals(39, Node.EMPTY_BLOCK);
1582:       assertEquals(47, Node.IS_DISPATCHER);
1583:       assertEquals(40, Node.ORIGINALNAME_PROP);
1584:       assertEquals(30, Node.VAR_ARGS_NAME);
1585:       assertEquals(2, Node.POST_FLAG);
1586:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1587:       assertEquals(8, Node.FLAG_NO_THROWS);
1588:       assertEquals(39, Node.EMPTY_BLOCK);
1589:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1590:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1591:       assertEquals(50, Node.FREE_CALL);
1592:       assertEquals(40, Node.ORIGINALNAME_PROP);
1593:       assertEquals(4095, Node.COLUMN_MASK);
1594:       assertEquals(57, Node.REFLECTED_OBJECT);
1595:       assertEquals(48, Node.DIRECTIVES);
1596:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1597:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1598:       assertEquals(53, Node.INPUT_ID);
1599:       assertEquals(30, Node.VAR_ARGS_NAME);
1600:       assertEquals(52, Node.LENGTH);
1601:       assertEquals(36, Node.QUOTED_PROP);
1602:       assertEquals(55, Node.INFERRED_FUNCTION);
1603:       assertEquals(29, Node.JSDOC_INFO_PROP);
1604:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1605:       assertEquals(57, Node.LAST_PROP);
1606:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1607:       assertEquals(37, Node.OPT_ARG_NAME);
1608:       assertEquals(56, Node.CHANGE_TIME);
1609:       assertEquals(47, Node.IS_DISPATCHER);
1610:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1611:       assertEquals(2, Node.POST_FLAG);
1612:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1613:       assertEquals(46, Node.IS_NAMESPACE);
1614:       assertEquals(49, Node.DIRECT_EVAL);
1615:       assertEquals(43, Node.IS_CONSTANT_NAME);
1616:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1617:       assertEquals(54, Node.SLASH_V);
1618:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1619:       assertEquals(12, Node.COLUMN_BITS);
1620:       assertEquals(1, Node.DECR_FLAG);
1621:       assertEquals(32, Node.INCRDECR_PROP);
1622:       
1623:       Node node4 = node0.srcrefTree(node1);
1624:       assertFalse(node0.isHook());
1625:       assertFalse(node0.isSwitch());
1626:       assertFalse(node0.isInc());
1627:       assertFalse(node0.isBreak());
1628:       assertFalse(node0.isThrow());
1629:       assertFalse(node0.isThis());
1630:       assertFalse(node0.isFalse());
1631:       assertFalse(node0.isComma());
1632:       assertFalse(node0.isIn());
1633:       assertFalse(node0.isInstanceOf());
1634:       assertFalse(node0.isIf());
1635:       assertFalse(node0.isDelProp());
1636:       assertFalse(node0.isEmpty());
1637:       assertFalse(node0.isNE());
1638:       assertFalse(node0.isCast());
1639:       assertFalse(node0.isVoid());
1640:       assertFalse(node0.isExprResult());
1641:       assertFalse(node0.isGetElem());
1642:       assertFalse(node0.hasChildren());
1643:       assertEquals(40, node0.getType());
1644:       assertFalse(node0.isFunction());
1645:       assertFalse(node0.isAssign());
1646:       assertFalse(node0.isTypeOf());
1647:       assertFalse(node0.isDec());
1648:       assertFalse(node0.isReturn());
1649:       assertFalse(node0.isAnd());
1650:       assertFalse(node0.isGetProp());
1651:       assertFalse(node0.isDebugger());
1652:       assertFalse(node0.isObjectLit());
1653:       assertFalse(node0.isNot());
1654:       assertEquals((-1), node0.getSourcePosition());
1655:       assertFalse(node0.isVar());
1656:       assertFalse(node0.isAdd());
1657:       assertFalse(node0.isCall());
1658:       assertTrue(node0.isString());
1659:       assertFalse(node0.isName());
1660:       assertFalse(node0.isNew());
1661:       assertFalse(node0.isWhile());
1662:       assertFalse(node0.isContinue());
1663:       assertFalse(node0.isBlock());
1664:       assertFalse(node0.hasMoreThanOneChild());
1665:       assertFalse(node0.isAssignAdd());
1666:       assertFalse(node0.isCatch());
1667:       assertFalse(node0.isSetterDef());
1668:       assertFalse(node0.isDo());
1669:       assertEquals((-1), node0.getLineno());
1670:       assertFalse(node0.isNull());
1671:       assertFalse(node0.isTrue());
1672:       assertFalse(node0.isOr());
1673:       assertFalse(node0.isTry());
1674:       assertFalse(node0.isArrayLit());
1675:       assertFalse(node0.isLabelName());
1676:       assertFalse(node0.hasOneChild());
1677:       assertFalse(node0.isDefaultCase());
1678:       assertFalse(node0.isWith());
1679:       assertFalse(node0.isFor());
1680:       assertFalse(node0.isRegExp());
1681:       assertFalse(node0.isLabel());
1682:       assertEquals(0, node0.getChildCount());
1683:       assertFalse(node0.isCase());
1684:       assertFalse(node0.isGetterDef());
1685:       assertFalse(node0.isNumber());
1686:       assertFalse(node0.isScript());
1687:       assertFalse(node0.isParamList());
1688:       assertFalse(node0.isStringKey());
1689:       assertEquals((-1), node0.getCharno());
1690:       assertFalse(node1.isReturn());
1691:       assertFalse(node1.isAssignAdd());
1692:       assertFalse(node1.isContinue());
1693:       assertFalse(node1.hasMoreThanOneChild());
1694:       assertEquals((-1), node1.getSourcePosition());
1695:       assertFalse(node1.isLabel());
1696:       assertFalse(node1.isOr());
1697:       assertFalse(node1.isTypeOf());
1698:       assertFalse(node1.isDec());
1699:       assertFalse(node1.isWhile());
1700:       assertFalse(node1.isNumber());
1701:       assertFalse(node1.isDo());
1702:       assertFalse(node1.isNew());
1703:       assertFalse(node1.isVar());
1704:       assertFalse(node1.isCast());
1705:       assertFalse(node1.isParamList());
1706:       assertFalse(node1.isStringKey());
1707:       assertFalse(node1.isAnd());
1708:       assertFalse(node1.isLabelName());
1709:       assertFalse(node1.isCatch());
1710:       assertFalse(node1.isInstanceOf());
1711:       assertFalse(node1.isThis());
1712:       assertFalse(node1.isScript());
1713:       assertFalse(node1.isThrow());
1714:       assertFalse(node1.isSetterDef());
1715:       assertFalse(node1.isTry());
1716:       assertFalse(node1.isHook());
1717:       assertFalse(node1.isBlock());
1718:       assertFalse(node1.isRegExp());
1719:       assertFalse(node1.isIf());
1720:       assertFalse(node1.isWith());
1721:       assertFalse(node1.isNE());
1722:       assertEquals((-1), node1.getLineno());
1723:       assertFalse(node1.isIn());
1724:       assertEquals(1, node1.getChildCount());
1725:       assertTrue(node1.hasChildren());
1726:       assertFalse(node1.isGetterDef());
1727:       assertFalse(node1.isString());
1728:       assertTrue(node1.hasOneChild());
1729:       assertFalse(node1.isEmpty());
1730:       assertFalse(node1.isFor());
1731:       assertFalse(node1.isInc());
1732:       assertFalse(node1.isCase());
1733:       assertFalse(node1.isDebugger());
1734:       assertEquals((-1), node1.getCharno());
1735:       assertFalse(node1.isFunction());
1736:       assertFalse(node1.isFalse());
1737:       assertFalse(node1.isSwitch());
1738:       assertFalse(node1.isArrayLit());
1739:       assertFalse(node1.isObjectLit());
1740:       assertFalse(node1.isNot());
1741:       assertFalse(node1.isComma());
1742:       assertFalse(node1.isDefaultCase());
1743:       assertFalse(node1.isGetProp());
1744:       assertFalse(node1.isAdd());
1745:       assertFalse(node1.isTrue());
1746:       assertFalse(node1.isAssign());
1747:       assertFalse(node1.isBreak());
1748:       assertFalse(node1.isDelProp());
1749:       assertFalse(node1.isNull());
1750:       assertFalse(node1.isVoid());
1751:       assertFalse(node1.isExprResult());
1752:       assertFalse(node1.isCall());
1753:       assertFalse(node1.isGetElem());
1754:       assertFalse(node1.isName());
1755:       assertEquals(2271, node1.getType());
1756:       assertFalse(node4.isNull());
1757:       assertFalse(node4.isParamList());
1758:       assertFalse(node4.isStringKey());
1759:       assertFalse(node4.isCall());
1760:       assertFalse(node4.isSetterDef());
1761:       assertFalse(node4.isName());
1762:       assertFalse(node4.isVar());
1763:       assertFalse(node4.isCatch());
1764:       assertFalse(node4.isBlock());
1765:       assertEquals(0, node4.getChildCount());
1766:       assertFalse(node4.isWhile());
1767:       assertFalse(node4.isTry());
1768:       assertTrue(node4.isString());
1769:       assertFalse(node4.isDebugger());
1770:       assertEquals((-1), node4.getSourcePosition());
1771:       assertFalse(node4.hasChildren());
1772:       assertFalse(node4.isDelProp());
1773:       assertFalse(node4.isEmpty());
1774:       assertFalse(node4.isGetElem());
1775:       assertFalse(node4.isArrayLit());
1776:       assertFalse(node4.isLabelName());
1777:       assertFalse(node4.isReturn());
1778:       assertFalse(node4.isAssignAdd());
1779:       assertFalse(node4.isLabel());
1780:       assertFalse(node4.isAssign());
1781:       assertFalse(node4.isTypeOf());
1782:       assertFalse(node4.isDec());
1783:       assertFalse(node4.isDefaultCase());
1784:       assertFalse(node4.isVoid());
1785:       assertFalse(node4.isExprResult());
1786:       assertFalse(node4.isDo());
1787:       assertFalse(node4.isNew());
1788:       assertFalse(node4.isAdd());
1789:       assertFalse(node4.isTrue());
1790:       assertFalse(node4.isOr());
1791:       assertFalse(node4.isBreak());
1792:       assertFalse(node4.isThrow());
1793:       assertFalse(node4.isGetProp());
1794:       assertFalse(node4.isHook());
1795:       assertFalse(node4.isInstanceOf());
1796:       assertFalse(node4.isThis());
1797:       assertFalse(node4.isFalse());
1798:       assertFalse(node4.isComma());
1799:       assertFalse(node4.isScript());
1800:       assertFalse(node4.isAnd());
1801:       assertFalse(node4.isSwitch());
1802:       assertFalse(node4.isCase());
1803:       assertEquals((-1), node4.getCharno());
1804:       assertFalse(node4.isObjectLit());
1805:       assertFalse(node4.isNot());
1806:       assertFalse(node4.isGetterDef());
1807:       assertFalse(node4.isIf());
1808:       assertFalse(node4.isNumber());
1809:       assertFalse(node4.isNE());
1810:       assertFalse(node4.isFor());
1811:       assertFalse(node4.hasOneChild());
1812:       assertEquals((-1), node4.getLineno());
1813:       assertFalse(node4.isCast());
1814:       assertFalse(node4.isContinue());
1815:       assertFalse(node4.isFunction());
1816:       assertFalse(node4.hasMoreThanOneChild());
1817:       assertFalse(node4.isRegExp());
1818:       assertFalse(node4.isWith());
1819:       assertEquals(40, node4.getType());
1820:       assertFalse(node4.isInc());
1821:       assertFalse(node4.isIn());
1822:       assertNotNull(node4);
1823:       assertNotSame(node0, node3);
1824:       assertSame(node0, node4);
1825:       assertSame(node0, node2);
1826:       assertSame(node4, node2);
1827:       assertNotSame(node4, node3);
1828:       assertSame(node4, node0);
1829:       assertFalse(node0.equals((Object)node3));
1830:       assertFalse(node0.equals((Object)node1));
1831:       assertFalse(node1.equals((Object)node3));
1832:       assertFalse(node1.equals((Object)node2));
1833:       assertFalse(node1.equals((Object)node0));
1834:       assertFalse(node4.equals((Object)node1));
1835:       assertFalse(node4.equals((Object)node3));
1836:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1837:       assertEquals(43, Node.IS_CONSTANT_NAME);
1838:       assertEquals(53, Node.INPUT_ID);
1839:       assertEquals(55, Node.INFERRED_FUNCTION);
1840:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1841:       assertEquals(29, Node.JSDOC_INFO_PROP);
1842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1843:       assertEquals(36, Node.QUOTED_PROP);
1844:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1845:       assertEquals(37, Node.OPT_ARG_NAME);
1846:       assertEquals(56, Node.CHANGE_TIME);
1847:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1848:       assertEquals(48, Node.DIRECTIVES);
1849:       assertEquals(32, Node.INCRDECR_PROP);
1850:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1851:       assertEquals(4095, Node.COLUMN_MASK);
1852:       assertEquals(12, Node.COLUMN_BITS);
1853:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1854:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1855:       assertEquals(54, Node.SLASH_V);
1856:       assertEquals(57, Node.LAST_PROP);
1857:       assertEquals(1, Node.DECR_FLAG);
1858:       assertEquals(49, Node.DIRECT_EVAL);
1859:       assertEquals(57, Node.REFLECTED_OBJECT);
1860:       assertEquals(46, Node.IS_NAMESPACE);
1861:       assertEquals(52, Node.LENGTH);
1862:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1863:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1864:       assertEquals(50, Node.FREE_CALL);
1865:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1866:       assertEquals(8, Node.FLAG_NO_THROWS);
1867:       assertEquals(39, Node.EMPTY_BLOCK);
1868:       assertEquals(47, Node.IS_DISPATCHER);
1869:       assertEquals(40, Node.ORIGINALNAME_PROP);
1870:       assertEquals(30, Node.VAR_ARGS_NAME);
1871:       assertEquals(2, Node.POST_FLAG);
1872:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1873:       assertEquals(8, Node.FLAG_NO_THROWS);
1874:       assertEquals(39, Node.EMPTY_BLOCK);
1875:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1876:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1877:       assertEquals(50, Node.FREE_CALL);
1878:       assertEquals(40, Node.ORIGINALNAME_PROP);
1879:       assertEquals(4095, Node.COLUMN_MASK);
1880:       assertEquals(57, Node.REFLECTED_OBJECT);
1881:       assertEquals(48, Node.DIRECTIVES);
1882:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1883:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1884:       assertEquals(53, Node.INPUT_ID);
1885:       assertEquals(30, Node.VAR_ARGS_NAME);
1886:       assertEquals(52, Node.LENGTH);
1887:       assertEquals(36, Node.QUOTED_PROP);
1888:       assertEquals(55, Node.INFERRED_FUNCTION);
1889:       assertEquals(29, Node.JSDOC_INFO_PROP);
1890:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1891:       assertEquals(57, Node.LAST_PROP);
1892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1893:       assertEquals(37, Node.OPT_ARG_NAME);
1894:       assertEquals(56, Node.CHANGE_TIME);
1895:       assertEquals(47, Node.IS_DISPATCHER);
1896:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1897:       assertEquals(2, Node.POST_FLAG);
1898:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1899:       assertEquals(46, Node.IS_NAMESPACE);
1900:       assertEquals(49, Node.DIRECT_EVAL);
1901:       assertEquals(43, Node.IS_CONSTANT_NAME);
1902:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1903:       assertEquals(54, Node.SLASH_V);
1904:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1905:       assertEquals(12, Node.COLUMN_BITS);
1906:       assertEquals(1, Node.DECR_FLAG);
1907:       assertEquals(32, Node.INCRDECR_PROP);
1908:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1909:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1910:       assertEquals(29, Node.JSDOC_INFO_PROP);
1911:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1912:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1913:       assertEquals(43, Node.IS_CONSTANT_NAME);
1914:       assertEquals(56, Node.CHANGE_TIME);
1915:       assertEquals(53, Node.INPUT_ID);
1916:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1917:       assertEquals(36, Node.QUOTED_PROP);
1918:       assertEquals(55, Node.INFERRED_FUNCTION);
1919:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1920:       assertEquals(46, Node.IS_NAMESPACE);
1921:       assertEquals(57, Node.LAST_PROP);
1922:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1923:       assertEquals(47, Node.IS_DISPATCHER);
1924:       assertEquals(30, Node.VAR_ARGS_NAME);
1925:       assertEquals(2, Node.POST_FLAG);
1926:       assertEquals(40, Node.ORIGINALNAME_PROP);
1927:       assertEquals(57, Node.REFLECTED_OBJECT);
1928:       assertEquals(8, Node.FLAG_NO_THROWS);
1929:       assertEquals(39, Node.EMPTY_BLOCK);
1930:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1931:       assertEquals(54, Node.SLASH_V);
1932:       assertEquals(52, Node.LENGTH);
1933:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1934:       assertEquals(50, Node.FREE_CALL);
1935:       assertEquals(4095, Node.COLUMN_MASK);
1936:       assertEquals(12, Node.COLUMN_BITS);
1937:       assertEquals(1, Node.DECR_FLAG);
1938:       assertEquals(48, Node.DIRECTIVES);
1939:       assertEquals(49, Node.DIRECT_EVAL);
1940:       assertEquals(32, Node.INCRDECR_PROP);
1941:       assertEquals(37, Node.OPT_ARG_NAME);
1942:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1943:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1944:       
1945:       boolean boolean2 = node4.isSwitch();
1946:       assertFalse(boolean2);
1947:       assertFalse(node0.isHook());
1948:       assertFalse(node0.isSwitch());
1949:       assertFalse(node0.isInc());
1950:       assertFalse(node0.isBreak());
1951:       assertFalse(node0.isThrow());
1952:       assertFalse(node0.isThis());
1953:       assertFalse(node0.isFalse());
1954:       assertFalse(node0.isComma());
1955:       assertFalse(node0.isIn());
1956:       assertFalse(node0.isInstanceOf());
1957:       assertFalse(node0.isIf());
1958:       assertFalse(node0.isDelProp());
1959:       assertFalse(node0.isEmpty());
1960:       assertFalse(node0.isNE());
1961:       assertFalse(node0.isCast());
1962:       assertFalse(node0.isVoid());
1963:       assertFalse(node0.isExprResult());
1964:       assertFalse(node0.isGetElem());
1965:       assertFalse(node0.hasChildren());
1966:       assertEquals(40, node0.getType());
1967:       assertFalse(node0.isFunction());
1968:       assertFalse(node0.isAssign());
1969:       assertFalse(node0.isTypeOf());
1970:       assertFalse(node0.isDec());
1971:       assertFalse(node0.isReturn());
1972:       assertFalse(node0.isAnd());
1973:       assertFalse(node0.isGetProp());
1974:       assertFalse(node0.isDebugger());
1975:       assertFalse(node0.isObjectLit());
1976:       assertFalse(node0.isNot());
1977:       assertEquals((-1), node0.getSourcePosition());
1978:       assertFalse(node0.isVar());
1979:       assertFalse(node0.isAdd());
1980:       assertFalse(node0.isCall());
1981:       assertTrue(node0.isString());
1982:       assertFalse(node0.isName());
1983:       assertFalse(node0.isNew());
1984:       assertFalse(node0.isWhile());
1985:       assertFalse(node0.isContinue());
1986:       assertFalse(node0.isBlock());
1987:       assertFalse(node0.hasMoreThanOneChild());
1988:       assertFalse(node0.isAssignAdd());
1989:       assertFalse(node0.isCatch());
1990:       assertFalse(node0.isSetterDef());
1991:       assertFalse(node0.isDo());
1992:       assertEquals((-1), node0.getLineno());
1993:       assertFalse(node0.isNull());
1994:       assertFalse(node0.isTrue());
1995:       assertFalse(node0.isOr());
1996:       assertFalse(node0.isTry());
1997:       assertFalse(node0.isArrayLit());
1998:       assertFalse(node0.isLabelName());
1999:       assertFalse(node0.hasOneChild());
2000:       assertFalse(node0.isDefaultCase());
2001:       assertFalse(node0.isWith());
2002:       assertFalse(node0.isFor());
2003:       assertFalse(node0.isRegExp());
2004:       assertFalse(node0.isLabel());
2005:       assertEquals(0, node0.getChildCount());
2006:       assertFalse(node0.isCase());
2007:       assertFalse(node0.isGetterDef());
2008:       assertFalse(node0.isNumber());
2009:       assertFalse(node0.isScript());
2010:       assertFalse(node0.isParamList());
2011:       assertFalse(node0.isStringKey());
2012:       assertEquals((-1), node0.getCharno());
2013:       assertFalse(node1.isReturn());
2014:       assertFalse(node1.isAssignAdd());
2015:       assertFalse(node1.isContinue());
2016:       assertFalse(node1.hasMoreThanOneChild());
2017:       assertEquals((-1), node1.getSourcePosition());
2018:       assertFalse(node1.isLabel());
2019:       assertFalse(node1.isOr());
2020:       assertFalse(node1.isTypeOf());
2021:       assertFalse(node1.isDec());
2022:       assertFalse(node1.isWhile());
2023:       assertFalse(node1.isNumber());
2024:       assertFalse(node1.isDo());
2025:       assertFalse(node1.isNew());
2026:       assertFalse(node1.isVar());
2027:       assertFalse(node1.isCast());
2028:       assertFalse(node1.isParamList());
2029:       assertFalse(node1.isStringKey());
2030:       assertFalse(node1.isAnd());
2031:       assertFalse(node1.isLabelName());
2032:       assertFalse(node1.isCatch());
2033:       assertFalse(node1.isInstanceOf());
2034:       assertFalse(node1.isThis());
2035:       assertFalse(node1.isScript());
2036:       assertFalse(node1.isThrow());
2037:       assertFalse(node1.isSetterDef());
2038:       assertFalse(node1.isTry());
2039:       assertFalse(node1.isHook());
2040:       assertFalse(node1.isBlock());
2041:       assertFalse(node1.isRegExp());
2042:       assertFalse(node1.isIf());
2043:       assertFalse(node1.isWith());
2044:       assertFalse(node1.isNE());
2045:       assertEquals((-1), node1.getLineno());
2046:       assertFalse(node1.isIn());
2047:       assertEquals(1, node1.getChildCount());
2048:       assertTrue(node1.hasChildren());
2049:       assertFalse(node1.isGetterDef());
2050:       assertFalse(node1.isString());
2051:       assertTrue(node1.hasOneChild());
2052:       assertFalse(node1.isEmpty());
2053:       assertFalse(node1.isFor());
2054:       assertFalse(node1.isInc());
2055:       assertFalse(node1.isCase());
2056:       assertFalse(node1.isDebugger());
2057:       assertEquals((-1), node1.getCharno());
2058:       assertFalse(node1.isFunction());
2059:       assertFalse(node1.isFalse());
2060:       assertFalse(node1.isSwitch());
2061:       assertFalse(node1.isArrayLit());
2062:       assertFalse(node1.isObjectLit());
2063:       assertFalse(node1.isNot());
2064:       assertFalse(node1.isComma());
2065:       assertFalse(node1.isDefaultCase());
2066:       assertFalse(node1.isGetProp());
2067:       assertFalse(node1.isAdd());
2068:       assertFalse(node1.isTrue());
2069:       assertFalse(node1.isAssign());
2070:       assertFalse(node1.isBreak());
2071:       assertFalse(node1.isDelProp());
2072:       assertFalse(node1.isNull());
2073:       assertFalse(node1.isVoid());
2074:       assertFalse(node1.isExprResult());
2075:       assertFalse(node1.isCall());
2076:       assertFalse(node1.isGetElem());
2077:       assertFalse(node1.isName());
2078:       assertEquals(2271, node1.getType());
2079:       assertFalse(node4.isNull());
2080:       assertFalse(node4.isParamList());
2081:       assertFalse(node4.isStringKey());
2082:       assertFalse(node4.isCall());
2083:       assertFalse(node4.isSetterDef());
2084:       assertFalse(node4.isName());
2085:       assertFalse(node4.isVar());
2086:       assertFalse(node4.isCatch());
2087:       assertFalse(node4.isBlock());
2088:       assertEquals(0, node4.getChildCount());
2089:       assertFalse(node4.isWhile());
2090:       assertFalse(node4.isTry());
2091:       assertTrue(node4.isString());
2092:       assertFalse(node4.isDebugger());
2093:       assertEquals((-1), node4.getSourcePosition());
2094:       assertFalse(node4.hasChildren());
2095:       assertFalse(node4.isDelProp());
2096:       assertFalse(node4.isEmpty());
2097:       assertFalse(node4.isGetElem());
2098:       assertFalse(node4.isArrayLit());
2099:       assertFalse(node4.isLabelName());
2100:       assertFalse(node4.isReturn());
2101:       assertFalse(node4.isAssignAdd());
2102:       assertFalse(node4.isLabel());
2103:       assertFalse(node4.isAssign());
2104:       assertFalse(node4.isTypeOf());
2105:       assertFalse(node4.isDec());
2106:       assertFalse(node4.isDefaultCase());
2107:       assertFalse(node4.isVoid());
2108:       assertFalse(node4.isExprResult());
2109:       assertFalse(node4.isDo());
2110:       assertFalse(node4.isNew());
2111:       assertFalse(node4.isAdd());
2112:       assertFalse(node4.isTrue());
2113:       assertFalse(node4.isOr());
2114:       assertFalse(node4.isBreak());
2115:       assertFalse(node4.isThrow());
2116:       assertFalse(node4.isGetProp());
2117:       assertFalse(node4.isHook());
2118:       assertFalse(node4.isInstanceOf());
2119:       assertFalse(node4.isThis());
2120:       assertFalse(node4.isFalse());
2121:       assertFalse(node4.isComma());
2122:       assertFalse(node4.isScript());
2123:       assertFalse(node4.isAnd());
2124:       assertFalse(node4.isSwitch());
2125:       assertFalse(node4.isCase());
2126:       assertEquals((-1), node4.getCharno());
2127:       assertFalse(node4.isObjectLit());
2128:       assertFalse(node4.isNot());
2129:       assertFalse(node4.isGetterDef());
2130:       assertFalse(node4.isIf());
2131:       assertFalse(node4.isNumber());
2132:       assertFalse(node4.isNE());
2133:       assertFalse(node4.isFor());
2134:       assertFalse(node4.hasOneChild());
2135:       assertEquals((-1), node4.getLineno());
2136:       assertFalse(node4.isCast());
2137:       assertFalse(node4.isContinue());
2138:       assertFalse(node4.isFunction());
2139:       assertFalse(node4.hasMoreThanOneChild());
2140:       assertFalse(node4.isRegExp());
2141:       assertFalse(node4.isWith());
2142:       assertEquals(40, node4.getType());
2143:       assertFalse(node4.isInc());
2144:       assertFalse(node4.isIn());
2145:       assertNotSame(node0, node3);
2146:       assertSame(node0, node4);
2147:       assertSame(node0, node2);
2148:       assertSame(node4, node2);
2149:       assertNotSame(node4, node3);
2150:       assertSame(node4, node0);
2151:       assertFalse(node0.equals((Object)node3));
2152:       assertFalse(node0.equals((Object)node1));
2153:       assertFalse(node1.equals((Object)node3));
2154:       assertFalse(node1.equals((Object)node2));
2155:       assertFalse(node1.equals((Object)node4));
2156:       assertFalse(node1.equals((Object)node0));
2157:       assertFalse(node4.equals((Object)node1));
2158:       assertFalse(node4.equals((Object)node3));
2159:       assertTrue(boolean2 == boolean0);
2160:       assertTrue(boolean2 == boolean1);
2161:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2162:       assertEquals(43, Node.IS_CONSTANT_NAME);
2163:       assertEquals(53, Node.INPUT_ID);
2164:       assertEquals(55, Node.INFERRED_FUNCTION);
2165:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2166:       assertEquals(29, Node.JSDOC_INFO_PROP);
2167:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2168:       assertEquals(36, Node.QUOTED_PROP);
2169:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2170:       assertEquals(37, Node.OPT_ARG_NAME);
2171:       assertEquals(56, Node.CHANGE_TIME);
2172:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2173:       assertEquals(48, Node.DIRECTIVES);
2174:       assertEquals(32, Node.INCRDECR_PROP);
2175:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2176:       assertEquals(4095, Node.COLUMN_MASK);
2177:       assertEquals(12, Node.COLUMN_BITS);
2178:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2179:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2180:       assertEquals(54, Node.SLASH_V);
2181:       assertEquals(57, Node.LAST_PROP);
2182:       assertEquals(1, Node.DECR_FLAG);
2183:       assertEquals(49, Node.DIRECT_EVAL);
2184:       assertEquals(57, Node.REFLECTED_OBJECT);
2185:       assertEquals(46, Node.IS_NAMESPACE);
2186:       assertEquals(52, Node.LENGTH);
2187:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2188:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2189:       assertEquals(50, Node.FREE_CALL);
2190:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2191:       assertEquals(8, Node.FLAG_NO_THROWS);
2192:       assertEquals(39, Node.EMPTY_BLOCK);
2193:       assertEquals(47, Node.IS_DISPATCHER);
2194:       assertEquals(40, Node.ORIGINALNAME_PROP);
2195:       assertEquals(30, Node.VAR_ARGS_NAME);
2196:       assertEquals(2, Node.POST_FLAG);
2197:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2198:       assertEquals(8, Node.FLAG_NO_THROWS);
2199:       assertEquals(39, Node.EMPTY_BLOCK);
2200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2202:       assertEquals(50, Node.FREE_CALL);
2203:       assertEquals(40, Node.ORIGINALNAME_PROP);
2204:       assertEquals(4095, Node.COLUMN_MASK);
2205:       assertEquals(57, Node.REFLECTED_OBJECT);
2206:       assertEquals(48, Node.DIRECTIVES);
2207:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2208:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2209:       assertEquals(53, Node.INPUT_ID);
2210:       assertEquals(30, Node.VAR_ARGS_NAME);
2211:       assertEquals(52, Node.LENGTH);
2212:       assertEquals(36, Node.QUOTED_PROP);
2213:       assertEquals(55, Node.INFERRED_FUNCTION);
2214:       assertEquals(29, Node.JSDOC_INFO_PROP);
2215:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2216:       assertEquals(57, Node.LAST_PROP);
2217:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2218:       assertEquals(37, Node.OPT_ARG_NAME);
2219:       assertEquals(56, Node.CHANGE_TIME);
2220:       assertEquals(47, Node.IS_DISPATCHER);
2221:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2222:       assertEquals(2, Node.POST_FLAG);
2223:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2224:       assertEquals(46, Node.IS_NAMESPACE);
2225:       assertEquals(49, Node.DIRECT_EVAL);
2226:       assertEquals(43, Node.IS_CONSTANT_NAME);
2227:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2228:       assertEquals(54, Node.SLASH_V);
2229:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2230:       assertEquals(12, Node.COLUMN_BITS);
2231:       assertEquals(1, Node.DECR_FLAG);
2232:       assertEquals(32, Node.INCRDECR_PROP);
2233:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2234:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2235:       assertEquals(29, Node.JSDOC_INFO_PROP);
2236:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2238:       assertEquals(43, Node.IS_CONSTANT_NAME);
2239:       assertEquals(56, Node.CHANGE_TIME);
2240:       assertEquals(53, Node.INPUT_ID);
2241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2242:       assertEquals(36, Node.QUOTED_PROP);
2243:       assertEquals(55, Node.INFERRED_FUNCTION);
2244:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2245:       assertEquals(46, Node.IS_NAMESPACE);
2246:       assertEquals(57, Node.LAST_PROP);
2247:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2248:       assertEquals(47, Node.IS_DISPATCHER);
2249:       assertEquals(30, Node.VAR_ARGS_NAME);
2250:       assertEquals(2, Node.POST_FLAG);
2251:       assertEquals(40, Node.ORIGINALNAME_PROP);
2252:       assertEquals(57, Node.REFLECTED_OBJECT);
2253:       assertEquals(8, Node.FLAG_NO_THROWS);
2254:       assertEquals(39, Node.EMPTY_BLOCK);
2255:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2256:       assertEquals(54, Node.SLASH_V);
2257:       assertEquals(52, Node.LENGTH);
2258:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2259:       assertEquals(50, Node.FREE_CALL);
2260:       assertEquals(4095, Node.COLUMN_MASK);
2261:       assertEquals(12, Node.COLUMN_BITS);
2262:       assertEquals(1, Node.DECR_FLAG);
2263:       assertEquals(48, Node.DIRECTIVES);
2264:       assertEquals(49, Node.DIRECT_EVAL);
2265:       assertEquals(32, Node.INCRDECR_PROP);
2266:       assertEquals(37, Node.OPT_ARG_NAME);
2267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2268:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2269:       
2270:       Node node5 = Node.newString("");
2271:       assertFalse(node5.isName());
2272:       assertFalse(node5.isStringKey());
2273:       assertFalse(node5.isVar());
2274:       assertFalse(node5.isNull());
2275:       assertFalse(node5.isBlock());
2276:       assertFalse(node5.isAdd());
2277:       assertTrue(node5.isString());
2278:       assertFalse(node5.isSetterDef());
2279:       assertFalse(node5.isNew());
2280:       assertFalse(node5.isDo());
2281:       assertEquals(40, node5.getType());
2282:       assertFalse(node5.isDefaultCase());
2283:       assertFalse(node5.isContinue());
2284:       assertFalse(node5.isFunction());
2285:       assertEquals(0, node5.getChildCount());
2286:       assertFalse(node5.isDebugger());
2287:       assertFalse(node5.isParamList());
2288:       assertFalse(node5.isArrayLit());
2289:       assertFalse(node5.isFor());
2290:       assertFalse(node5.isLabelName());
2291:       assertFalse(node5.isIf());
2292:       assertFalse(node5.isNE());
2293:       assertFalse(node5.isNumber());
2294:       assertFalse(node5.isGetterDef());
2295:       assertFalse(node5.isTry());
2296:       assertFalse(node5.isIn());
2297:       assertFalse(node5.isScript());
2298:       assertFalse(node5.isCase());
2299:       assertFalse(node5.hasOneChild());
2300:       assertFalse(node5.isWith());
2301:       assertFalse(node5.hasMoreThanOneChild());
2302:       assertFalse(node5.isRegExp());
2303:       assertFalse(node5.isInstanceOf());
2304:       assertFalse(node5.isCatch());
2305:       assertEquals((-1), node5.getLineno());
2306:       assertFalse(node5.isFalse());
2307:       assertFalse(node5.isThrow());
2308:       assertFalse(node5.isThis());
2309:       assertFalse(node5.isHook());
2310:       assertFalse(node5.isComma());
2311:       assertFalse(node5.isInc());
2312:       assertFalse(node5.isGetProp());
2313:       assertFalse(node5.isNot());
2314:       assertFalse(node5.isAnd());
2315:       assertFalse(node5.isObjectLit());
2316:       assertEquals((-1), node5.getCharno());
2317:       assertFalse(node5.isSwitch());
2318:       assertFalse(node5.isCast());
2319:       assertFalse(node5.isEmpty());
2320:       assertFalse(node5.isAssign());
2321:       assertFalse(node5.isDelProp());
2322:       assertFalse(node5.isGetElem());
2323:       assertFalse(node5.isTypeOf());
2324:       assertFalse(node5.hasChildren());
2325:       assertEquals((-1), node5.getSourcePosition());
2326:       assertFalse(node5.isDec());
2327:       assertFalse(node5.isAssignAdd());
2328:       assertFalse(node5.isLabel());
2329:       assertFalse(node5.isOr());
2330:       assertFalse(node5.isReturn());
2331:       assertFalse(node5.isWhile());
2332:       assertFalse(node5.isTrue());
2333:       assertFalse(node5.isExprResult());
2334:       assertFalse(node5.isCall());
2335:       assertFalse(node5.isVoid());
2336:       assertFalse(node5.isBreak());
2337:       assertNotNull(node5);
2338:       assertNotSame(node5, node4);
2339:       assertNotSame(node5, node2);
2340:       assertNotSame(node5, node3);
2341:       assertNotSame(node5, node0);
2342:       assertFalse(node5.equals((Object)node4));
2343:       assertFalse(node5.equals((Object)node2));
2344:       assertFalse(node5.equals((Object)node3));
2345:       assertFalse(node5.equals((Object)node0));
2346:       assertFalse(node5.equals((Object)node1));
2347:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2349:       assertEquals(43, Node.IS_CONSTANT_NAME);
2350:       assertEquals(56, Node.CHANGE_TIME);
2351:       assertEquals(36, Node.QUOTED_PROP);
2352:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2353:       assertEquals(37, Node.OPT_ARG_NAME);
2354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2355:       assertEquals(55, Node.INFERRED_FUNCTION);
2356:       assertEquals(2, Node.POST_FLAG);
2357:       assertEquals(30, Node.VAR_ARGS_NAME);
2358:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2359:       assertEquals(8, Node.FLAG_NO_THROWS);
2360:       assertEquals(39, Node.EMPTY_BLOCK);
2361:       assertEquals(57, Node.LAST_PROP);
2362:       assertEquals(47, Node.IS_DISPATCHER);
2363:       assertEquals(29, Node.JSDOC_INFO_PROP);
2364:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2365:       assertEquals(53, Node.INPUT_ID);
2366:       assertEquals(57, Node.REFLECTED_OBJECT);
2367:       assertEquals(40, Node.ORIGINALNAME_PROP);
2368:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2369:       assertEquals(52, Node.LENGTH);
2370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2371:       assertEquals(50, Node.FREE_CALL);
2372:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2373:       assertEquals(54, Node.SLASH_V);
2374:       assertEquals(48, Node.DIRECTIVES);
2375:       assertEquals(49, Node.DIRECT_EVAL);
2376:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2377:       assertEquals(12, Node.COLUMN_BITS);
2378:       assertEquals(4095, Node.COLUMN_MASK);
2379:       assertEquals(46, Node.IS_NAMESPACE);
2380:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2381:       assertEquals(32, Node.INCRDECR_PROP);
2382:       assertEquals(1, Node.DECR_FLAG);
2383:       
2384:       Node node6 = Node.newNumber((-680.19384160398));
2385:       assertFalse(node6.isThrow());
2386:       assertFalse(node6.isFalse());
2387:       assertFalse(node6.isHook());
2388:       assertFalse(node6.isThis());
2389:       assertFalse(node6.isGetProp());
2390:       assertEquals((-1), node6.getCharno());
2391:       assertFalse(node6.isString());
2392:       assertFalse(node6.isInc());
2393:       assertFalse(node6.isAnd());
2394:       assertFalse(node6.isNot());
2395:       assertFalse(node6.isObjectLit());
2396:       assertFalse(node6.isSwitch());
2397:       assertFalse(node6.isCast());
2398:       assertFalse(node6.isGetElem());
2399:       assertFalse(node6.isDelProp());
2400:       assertFalse(node6.isAssign());
2401:       assertFalse(node6.isDec());
2402:       assertEquals((-1), node6.getSourcePosition());
2403:       assertFalse(node6.hasChildren());
2404:       assertFalse(node6.isDebugger());
2405:       assertFalse(node6.isAssignAdd());
2406:       assertTrue(node6.isNumber());
2407:       assertFalse(node6.isOr());
2408:       assertFalse(node6.isEmpty());
2409:       assertFalse(node6.isWhile());
2410:       assertFalse(node6.isReturn());
2411:       assertFalse(node6.isTrue());
2412:       assertFalse(node6.isComma());
2413:       assertFalse(node6.isVoid());
2414:       assertFalse(node6.isTypeOf());
2415:       assertFalse(node6.isBreak());
2416:       assertFalse(node6.isExprResult());
2417:       assertFalse(node6.isCall());
2418:       assertFalse(node6.isStringKey());
2419:       assertFalse(node6.isName());
2420:       assertFalse(node6.isParamList());
2421:       assertFalse(node6.isVar());
2422:       assertFalse(node6.isNull());
2423:       assertFalse(node6.isNew());
2424:       assertFalse(node6.isSetterDef());
2425:       assertFalse(node6.isAdd());
2426:       assertFalse(node6.isContinue());
2427:       assertFalse(node6.isDo());
2428:       assertFalse(node6.isDefaultCase());
2429:       assertEquals(0, node6.getChildCount());
2430:       assertFalse(node6.isLabel());
2431:       assertFalse(node6.isFunction());
2432:       assertFalse(node6.isArrayLit());
2433:       assertFalse(node6.isGetterDef());
2434:       assertFalse(node6.isLabelName());
2435:       assertFalse(node6.isIf());
2436:       assertFalse(node6.isNE());
2437:       assertFalse(node6.isFor());
2438:       assertFalse(node6.isTry());
2439:       assertFalse(node6.hasOneChild());
2440:       assertFalse(node6.isIn());
2441:       assertFalse(node6.isScript());
2442:       assertFalse(node6.isCase());
2443:       assertFalse(node6.hasMoreThanOneChild());
2444:       assertFalse(node6.isWith());
2445:       assertEquals(39, node6.getType());
2446:       assertFalse(node6.isBlock());
2447:       assertEquals((-1), node6.getLineno());
2448:       assertFalse(node6.isRegExp());
2449:       assertFalse(node6.isInstanceOf());
2450:       assertFalse(node6.isCatch());
2451:       assertNotNull(node6);
2452:       assertFalse(node6.equals((Object)node1));
2453:       assertFalse(node6.equals((Object)node2));
2454:       assertFalse(node6.equals((Object)node3));
2455:       assertFalse(node6.equals((Object)node5));
2456:       assertFalse(node6.equals((Object)node0));
2457:       assertFalse(node6.equals((Object)node4));
2458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2459:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2460:       assertEquals(43, Node.IS_CONSTANT_NAME);
2461:       assertEquals(56, Node.CHANGE_TIME);
2462:       assertEquals(2, Node.POST_FLAG);
2463:       assertEquals(37, Node.OPT_ARG_NAME);
2464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2465:       assertEquals(47, Node.IS_DISPATCHER);
2466:       assertEquals(57, Node.LAST_PROP);
2467:       assertEquals(36, Node.QUOTED_PROP);
2468:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2469:       assertEquals(8, Node.FLAG_NO_THROWS);
2470:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2471:       assertEquals(55, Node.INFERRED_FUNCTION);
2472:       assertEquals(29, Node.JSDOC_INFO_PROP);
2473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2474:       assertEquals(39, Node.EMPTY_BLOCK);
2475:       assertEquals(53, Node.INPUT_ID);
2476:       assertEquals(52, Node.LENGTH);
2477:       assertEquals(54, Node.SLASH_V);
2478:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2479:       assertEquals(57, Node.REFLECTED_OBJECT);
2480:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2481:       assertEquals(30, Node.VAR_ARGS_NAME);
2482:       assertEquals(49, Node.DIRECT_EVAL);
2483:       assertEquals(40, Node.ORIGINALNAME_PROP);
2484:       assertEquals(48, Node.DIRECTIVES);
2485:       assertEquals(32, Node.INCRDECR_PROP);
2486:       assertEquals(46, Node.IS_NAMESPACE);
2487:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2488:       assertEquals(4095, Node.COLUMN_MASK);
2489:       assertEquals(12, Node.COLUMN_BITS);
2490:       assertEquals(50, Node.FREE_CALL);
2491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2492:       assertEquals(1, Node.DECR_FLAG);
2493:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2494:   }
2495: }
RegularFileObject[/tmp/EvoSuite_156_1628256053954/com/google/javascript/rhino/Node_156_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_156_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_156_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_156_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:54.650 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("}N>");
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertNotNull(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

Node node1 = new Node(2271, node0);
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertEquals(2271, node1.getType());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

Node node2 = node1.getLastChild();
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertEquals(2271, node1.getType());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetElem());
assertFalse(node2.isInc());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertNotNull(node2);
assertSame(node0, node2);
assertSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

byte[] byteArray0 = new byte[14];
byteArray0[0] = (byte)16;
Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertNotNull(iterable0);
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

boolean boolean0 = node1.isParamList();
assertFalse(boolean0);
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertEquals(2271, node1.getType());
assertSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

Node node3 = Node.newString(37, "", (-554), 751619276);
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDelProp());
assertFalse(node3.isSwitch());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFunction());
assertFalse(node3.isInc());
assertFalse(node3.isEmpty());
assertFalse(node3.isFalse());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isThrow());
assertFalse(node3.isGetProp());
assertFalse(node3.isComma());
assertFalse(node3.isNot());
assertFalse(node3.isName());
assertFalse(node3.isObjectLit());
assertFalse(node3.isBreak());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isAnd());
assertFalse(node3.isDebugger());
assertFalse(node3.isVoid());
assertFalse(node3.isExprResult());
assertFalse(node3.isString());
assertFalse(node3.hasChildren());
assertEquals(37, node3.getType());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isWhile());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isOr());
assertFalse(node3.isTypeOf());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isNumber());
assertFalse(node3.isContinue());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isCast());
assertFalse(node3.isDo());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertTrue(node3.isCall());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertEquals((-1), node3.getCharno());
assertFalse(node3.hasOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isScript());
assertFalse(node3.isCase());
assertFalse(node3.isFor());
assertFalse(node3.isWith());
assertFalse(node3.isThis());
assertFalse(node3.isHook());
assertNotNull(node3);
assertNotSame(node3, node0);
assertNotSame(node3, node2);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);

Set<String> set0 = node2.getDirectives();
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertEquals(2271, node1.getType());
assertEquals(40, node2.getType());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isRegExp());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isNE());
assertFalse(node2.isTrue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isContinue());
assertFalse(node2.isReturn());
assertFalse(node2.isWhile());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isAssign());
assertFalse(node2.hasChildren());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isThis());
assertFalse(node2.isExprResult());
assertFalse(node2.isComma());
assertFalse(node2.isBreak());
assertFalse(node2.isWith());
assertFalse(node2.isCast());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isGetElem());
assertFalse(node2.isInc());
assertFalse(node2.isOr());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isDo());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isLabel());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.hasOneChild());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getCharno());
assertTrue(node2.isString());
assertFalse(node2.isTry());
assertFalse(node2.isGetterDef());
assertFalse(node2.isNumber());
assertFalse(node2.isScript());
assertNull(set0);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertSame(node2, node0);
assertNotSame(node2, node3);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

JSDocInfo jSDocInfo0 = node1.getJSDocInfo();
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertEquals(2271, node1.getType());
assertNull(jSDocInfo0);
assertNotSame(node0, node3);
assertSame(node0, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);

Node node4 = node0.srcrefTree(node1);
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertEquals(2271, node1.getType());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isCall());
assertFalse(node4.isSetterDef());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isCatch());
assertFalse(node4.isBlock());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isWhile());
assertFalse(node4.isTry());
assertTrue(node4.isString());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.hasChildren());
assertFalse(node4.isDelProp());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetElem());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isTrue());
assertFalse(node4.isOr());
assertFalse(node4.isBreak());
assertFalse(node4.isThrow());
assertFalse(node4.isGetProp());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThis());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isScript());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isCase());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isNumber());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.hasOneChild());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertEquals(40, node4.getType());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertNotNull(node4);
assertNotSame(node0, node3);
assertSame(node0, node4);
assertSame(node0, node2);
assertSame(node4, node2);
assertNotSame(node4, node3);
assertSame(node4, node0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

boolean boolean2 = node4.isSwitch();
assertFalse(boolean2);
assertFalse(node0.isHook());
assertFalse(node0.isSwitch());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isThis());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isCast());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.hasChildren());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isReturn());
assertFalse(node0.isAnd());
assertFalse(node0.isGetProp());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertTrue(node0.isString());
assertFalse(node0.isName());
assertFalse(node0.isNew());
assertFalse(node0.isWhile());
assertFalse(node0.isContinue());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCatch());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isRegExp());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertFalse(node1.isLabelName());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isScript());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isBlock());
assertFalse(node1.isRegExp());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isNE());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIn());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasChildren());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertTrue(node1.hasOneChild());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isComma());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertEquals(2271, node1.getType());
assertFalse(node4.isNull());
assertFalse(node4.isParamList());
assertFalse(node4.isStringKey());
assertFalse(node4.isCall());
assertFalse(node4.isSetterDef());
assertFalse(node4.isName());
assertFalse(node4.isVar());
assertFalse(node4.isCatch());
assertFalse(node4.isBlock());
assertEquals(0, node4.getChildCount());
assertFalse(node4.isWhile());
assertFalse(node4.isTry());
assertTrue(node4.isString());
assertFalse(node4.isDebugger());
assertEquals((-1), node4.getSourcePosition());
assertFalse(node4.hasChildren());
assertFalse(node4.isDelProp());
assertFalse(node4.isEmpty());
assertFalse(node4.isGetElem());
assertFalse(node4.isArrayLit());
assertFalse(node4.isLabelName());
assertFalse(node4.isReturn());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isLabel());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isDec());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isDo());
assertFalse(node4.isNew());
assertFalse(node4.isAdd());
assertFalse(node4.isTrue());
assertFalse(node4.isOr());
assertFalse(node4.isBreak());
assertFalse(node4.isThrow());
assertFalse(node4.isGetProp());
assertFalse(node4.isHook());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isThis());
assertFalse(node4.isFalse());
assertFalse(node4.isComma());
assertFalse(node4.isScript());
assertFalse(node4.isAnd());
assertFalse(node4.isSwitch());
assertFalse(node4.isCase());
assertEquals((-1), node4.getCharno());
assertFalse(node4.isObjectLit());
assertFalse(node4.isNot());
assertFalse(node4.isGetterDef());
assertFalse(node4.isIf());
assertFalse(node4.isNumber());
assertFalse(node4.isNE());
assertFalse(node4.isFor());
assertFalse(node4.hasOneChild());
assertEquals((-1), node4.getLineno());
assertFalse(node4.isCast());
assertFalse(node4.isContinue());
assertFalse(node4.isFunction());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isRegExp());
assertFalse(node4.isWith());
assertEquals(40, node4.getType());
assertFalse(node4.isInc());
assertFalse(node4.isIn());
assertNotSame(node0, node3);
assertSame(node0, node4);
assertSame(node0, node2);
assertSame(node4, node2);
assertNotSame(node4, node3);
assertSame(node4, node0);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node0));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);

Node node5 = Node.newString("");
assertFalse(node5.isName());
assertFalse(node5.isStringKey());
assertFalse(node5.isVar());
assertFalse(node5.isNull());
assertFalse(node5.isBlock());
assertFalse(node5.isAdd());
assertTrue(node5.isString());
assertFalse(node5.isSetterDef());
assertFalse(node5.isNew());
assertFalse(node5.isDo());
assertEquals(40, node5.getType());
assertFalse(node5.isDefaultCase());
assertFalse(node5.isContinue());
assertFalse(node5.isFunction());
assertEquals(0, node5.getChildCount());
assertFalse(node5.isDebugger());
assertFalse(node5.isParamList());
assertFalse(node5.isArrayLit());
assertFalse(node5.isFor());
assertFalse(node5.isLabelName());
assertFalse(node5.isIf());
assertFalse(node5.isNE());
assertFalse(node5.isNumber());
assertFalse(node5.isGetterDef());
assertFalse(node5.isTry());
assertFalse(node5.isIn());
assertFalse(node5.isScript());
assertFalse(node5.isCase());
assertFalse(node5.hasOneChild());
assertFalse(node5.isWith());
assertFalse(node5.hasMoreThanOneChild());
assertFalse(node5.isRegExp());
assertFalse(node5.isInstanceOf());
assertFalse(node5.isCatch());
assertEquals((-1), node5.getLineno());
assertFalse(node5.isFalse());
assertFalse(node5.isThrow());
assertFalse(node5.isThis());
assertFalse(node5.isHook());
assertFalse(node5.isComma());
assertFalse(node5.isInc());
assertFalse(node5.isGetProp());
assertFalse(node5.isNot());
assertFalse(node5.isAnd());
assertFalse(node5.isObjectLit());
assertEquals((-1), node5.getCharno());
assertFalse(node5.isSwitch());
assertFalse(node5.isCast());
assertFalse(node5.isEmpty());
assertFalse(node5.isAssign());
assertFalse(node5.isDelProp());
assertFalse(node5.isGetElem());
assertFalse(node5.isTypeOf());
assertFalse(node5.hasChildren());
assertEquals((-1), node5.getSourcePosition());
assertFalse(node5.isDec());
assertFalse(node5.isAssignAdd());
assertFalse(node5.isLabel());
assertFalse(node5.isOr());
assertFalse(node5.isReturn());
assertFalse(node5.isWhile());
assertFalse(node5.isTrue());
assertFalse(node5.isExprResult());
assertFalse(node5.isCall());
assertFalse(node5.isVoid());
assertFalse(node5.isBreak());
assertNotNull(node5);
assertNotSame(node5, node4);
assertNotSame(node5, node2);
assertNotSame(node5, node3);
assertNotSame(node5, node0);
assertFalse(node5.equals((Object)node4));
assertFalse(node5.equals((Object)node2));
assertFalse(node5.equals((Object)node3));
assertFalse(node5.equals((Object)node0));
assertFalse(node5.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);

Node node6 = Node.newNumber((-680.19384160398));
assertFalse(node6.isThrow());
assertFalse(node6.isFalse());
assertFalse(node6.isHook());
assertFalse(node6.isThis());
assertFalse(node6.isGetProp());
assertEquals((-1), node6.getCharno());
assertFalse(node6.isString());
assertFalse(node6.isInc());
assertFalse(node6.isAnd());
assertFalse(node6.isNot());
assertFalse(node6.isObjectLit());
assertFalse(node6.isSwitch());
assertFalse(node6.isCast());
assertFalse(node6.isGetElem());
assertFalse(node6.isDelProp());
assertFalse(node6.isAssign());
assertFalse(node6.isDec());
assertEquals((-1), node6.getSourcePosition());
assertFalse(node6.hasChildren());
assertFalse(node6.isDebugger());
assertFalse(node6.isAssignAdd());
assertTrue(node6.isNumber());
assertFalse(node6.isOr());
assertFalse(node6.isEmpty());
assertFalse(node6.isWhile());
assertFalse(node6.isReturn());
assertFalse(node6.isTrue());
assertFalse(node6.isComma());
assertFalse(node6.isVoid());
assertFalse(node6.isTypeOf());
assertFalse(node6.isBreak());
assertFalse(node6.isExprResult());
assertFalse(node6.isCall());
assertFalse(node6.isStringKey());
assertFalse(node6.isName());
assertFalse(node6.isParamList());
assertFalse(node6.isVar());
assertFalse(node6.isNull());
assertFalse(node6.isNew());
assertFalse(node6.isSetterDef());
assertFalse(node6.isAdd());
assertFalse(node6.isContinue());
assertFalse(node6.isDo());
assertFalse(node6.isDefaultCase());
assertEquals(0, node6.getChildCount());
assertFalse(node6.isLabel());
assertFalse(node6.isFunction());
assertFalse(node6.isArrayLit());
assertFalse(node6.isGetterDef());
assertFalse(node6.isLabelName());
assertFalse(node6.isIf());
assertFalse(node6.isNE());
assertFalse(node6.isFor());
assertFalse(node6.isTry());
assertFalse(node6.hasOneChild());
assertFalse(node6.isIn());
assertFalse(node6.isScript());
assertFalse(node6.isCase());
assertFalse(node6.hasMoreThanOneChild());
assertFalse(node6.isWith());
assertEquals(39, node6.getType());
assertFalse(node6.isBlock());
assertEquals((-1), node6.getLineno());
assertFalse(node6.isRegExp());
assertFalse(node6.isInstanceOf());
assertFalse(node6.isCatch());
assertNotNull(node6);
assertFalse(node6.equals((Object)node1));
assertFalse(node6.equals((Object)node2));
assertFalse(node6.equals((Object)node3));
assertFalse(node6.equals((Object)node5));
assertFalse(node6.equals((Object)node0));
assertFalse(node6.equals((Object)node4));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);


[MASTER] 13:20:54.700 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_157_1628256054651/com/google/javascript/rhino/Node_157_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_157_1628256054651/com/google/javascript/rhino/Node_157_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:54.701 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:54.701 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:54.701 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 455
[MASTER] 13:20:54.701 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_157_1628256054651/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:54 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.JSDocInfo;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.testdata.EvoSuiteFile;
16: import org.evosuite.runtime.testdata.FileSystemHandling;
17: import org.junit.runner.RunWith;
18: 
19: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
20: public class Node_157_tmp__ESTest extends Node_157_tmp__ESTest_scaffolding {
21: 
22:   @Test(timeout = 4000)
23:   public void test0()  throws Throwable  {
24:       boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J^GiF5?,af~XIkNH");
25:       assertFalse(boolean0);
26:       
27:       Node node0 = Node.newNumber((-1290.8408832418036), (-981), 110);
28:       assertFalse(node0.isThrow());
29:       assertFalse(node0.isFalse());
30:       assertFalse(node0.isHook());
31:       assertFalse(node0.isThis());
32:       assertFalse(node0.isComma());
33:       assertFalse(node0.isSwitch());
34:       assertFalse(node0.isInstanceOf());
35:       assertFalse(node0.isBreak());
36:       assertFalse(node0.isCase());
37:       assertFalse(node0.isAnd());
38:       assertFalse(node0.isWith());
39:       assertFalse(node0.isNot());
40:       assertFalse(node0.isObjectLit());
41:       assertEquals((-1), node0.getCharno());
42:       assertFalse(node0.isGetProp());
43:       assertTrue(node0.isNumber());
44:       assertFalse(node0.hasOneChild());
45:       assertFalse(node0.isString());
46:       assertFalse(node0.isScript());
47:       assertFalse(node0.isIf());
48:       assertEquals((-1), node0.getSourcePosition());
49:       assertFalse(node0.isNE());
50:       assertFalse(node0.isFor());
51:       assertFalse(node0.isFunction());
52:       assertFalse(node0.isRegExp());
53:       assertEquals((-1), node0.getLineno());
54:       assertFalse(node0.isCast());
55:       assertFalse(node0.isContinue());
56:       assertFalse(node0.isIn());
57:       assertFalse(node0.isSetterDef());
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isStringKey());
60:       assertFalse(node0.isName());
61:       assertFalse(node0.isVar());
62:       assertFalse(node0.isBlock());
63:       assertFalse(node0.isNull());
64:       assertFalse(node0.isParamList());
65:       assertFalse(node0.isCatch());
66:       assertFalse(node0.isCall());
67:       assertFalse(node0.hasMoreThanOneChild());
68:       assertFalse(node0.isWhile());
69:       assertEquals(39, node0.getType());
70:       assertFalse(node0.isReturn());
71:       assertFalse(node0.isDebugger());
72:       assertFalse(node0.isTry());
73:       assertFalse(node0.isLabelName());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isGetterDef());
76:       assertFalse(node0.isDelProp());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isDec());
79:       assertFalse(node0.isVoid());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isArrayLit());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.isDefaultCase());
86:       assertEquals(0, node0.getChildCount());
87:       assertFalse(node0.isLabel());
88:       assertFalse(node0.isTrue());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isAssignAdd());
91:       assertFalse(node0.isOr());
92:       assertFalse(node0.isEmpty());
93:       assertFalse(node0.isAdd());
94:       assertNotNull(node0);
95:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
96:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
97:       assertEquals(36, Node.QUOTED_PROP);
98:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
99:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
100:       assertEquals(55, Node.INFERRED_FUNCTION);
101:       assertEquals(29, Node.JSDOC_INFO_PROP);
102:       assertEquals(53, Node.INPUT_ID);
103:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
104:       assertEquals(46, Node.IS_NAMESPACE);
105:       assertEquals(2, Node.POST_FLAG);
106:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
107:       assertEquals(51, Node.STATIC_SOURCE_FILE);
108:       assertEquals(47, Node.IS_DISPATCHER);
109:       assertEquals(30, Node.VAR_ARGS_NAME);
110:       assertEquals(43, Node.IS_CONSTANT_NAME);
111:       assertEquals(40, Node.ORIGINALNAME_PROP);
112:       assertEquals(52, Node.LENGTH);
113:       assertEquals(54, Node.SLASH_V);
114:       assertEquals(57, Node.REFLECTED_OBJECT);
115:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
116:       assertEquals(50, Node.FREE_CALL);
117:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
118:       assertEquals(8, Node.FLAG_NO_THROWS);
119:       assertEquals(57, Node.LAST_PROP);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(15, Node.NO_SIDE_EFFECTS);
122:       assertEquals(39, Node.EMPTY_BLOCK);
123:       assertEquals(32, Node.INCRDECR_PROP);
124:       assertEquals(4095, Node.COLUMN_MASK);
125:       assertEquals(12, Node.COLUMN_BITS);
126:       assertEquals(56, Node.CHANGE_TIME);
127:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
128:       assertEquals(49, Node.DIRECT_EVAL);
129:       assertEquals(37, Node.OPT_ARG_NAME);
130:       assertEquals(48, Node.DIRECTIVES);
131:       
132:       JSDocInfo jSDocInfo0 = new JSDocInfo();
133:       assertFalse(jSDocInfo0.isDefine());
134:       assertFalse(jSDocInfo0.isImplicitCast());
135:       assertNull(jSDocInfo0.getReturnDescription());
136:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
137:       assertFalse(jSDocInfo0.isDisposes());
138:       assertFalse(jSDocInfo0.isNoAlias());
139:       assertNull(jSDocInfo0.getOriginalCommentString());
140:       assertFalse(jSDocInfo0.hasReturnType());
141:       assertEquals(0, jSDocInfo0.getParameterCount());
142:       assertFalse(jSDocInfo0.isJaggerProvide());
143:       assertFalse(jSDocInfo0.hasBaseType());
144:       assertFalse(jSDocInfo0.isStableIdGenerator());
145:       assertNull(jSDocInfo0.getLicense());
146:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
147:       assertFalse(jSDocInfo0.shouldPreserveTry());
148:       assertFalse(jSDocInfo0.isNoTypeCheck());
149:       assertNull(jSDocInfo0.getDescription());
150:       assertFalse(jSDocInfo0.isConstructor());
151:       assertFalse(jSDocInfo0.hasThisType());
152:       assertFalse(jSDocInfo0.hasEnumParameterType());
153:       assertFalse(jSDocInfo0.isJaggerModule());
154:       assertFalse(jSDocInfo0.isExport());
155:       assertFalse(jSDocInfo0.isNoCompile());
156:       assertFalse(jSDocInfo0.isJavaDispatch());
157:       assertFalse(jSDocInfo0.isIdGenerator());
158:       assertFalse(jSDocInfo0.isInterface());
159:       assertNull(jSDocInfo0.getBlockDescription());
160:       assertNull(jSDocInfo0.getDeprecationReason());
161:       assertFalse(jSDocInfo0.hasFileOverview());
162:       assertFalse(jSDocInfo0.isJaggerInject());
163:       assertEquals("JSDocInfo", jSDocInfo0.toString());
164:       assertNull(jSDocInfo0.getVersion());
165:       assertFalse(jSDocInfo0.makesStructs());
166:       assertFalse(jSDocInfo0.isWizaction());
167:       assertFalse(jSDocInfo0.isNgInject());
168:       assertFalse(jSDocInfo0.isOverride());
169:       assertNull(jSDocInfo0.getFileOverview());
170:       assertNull(jSDocInfo0.getVisibility());
171:       assertNull(jSDocInfo0.getMeaning());
172:       assertFalse(jSDocInfo0.isConstant());
173:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
174:       assertFalse(jSDocInfo0.isNoSideEffects());
175:       assertFalse(jSDocInfo0.hasModifies());
176:       assertFalse(jSDocInfo0.hasType());
177:       assertFalse(jSDocInfo0.makesDicts());
178:       assertFalse(jSDocInfo0.hasTypedefType());
179:       assertFalse(jSDocInfo0.containsDeclaration());
180:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
181:       assertFalse(jSDocInfo0.isHidden());
182:       assertFalse(jSDocInfo0.isExterns());
183:       assertFalse(jSDocInfo0.isNoShadow());
184:       assertFalse(jSDocInfo0.isDeprecated());
185:       assertFalse(jSDocInfo0.isMappedIdGenerator());
186:       assertNull(jSDocInfo0.getLendsName());
187:       assertFalse(jSDocInfo0.isExpose());
188:       assertNotNull(jSDocInfo0);
189:       
190:       Node node1 = node0.setJSDocInfo(jSDocInfo0);
191:       assertFalse(node0.isThrow());
192:       assertFalse(node0.isFalse());
193:       assertFalse(node0.isHook());
194:       assertFalse(node0.isThis());
195:       assertFalse(node0.isComma());
196:       assertFalse(node0.isSwitch());
197:       assertFalse(node0.isInstanceOf());
198:       assertFalse(node0.isBreak());
199:       assertFalse(node0.isCase());
200:       assertFalse(node0.isAnd());
201:       assertFalse(node0.isWith());
202:       assertFalse(node0.isNot());
203:       assertFalse(node0.isObjectLit());
204:       assertEquals((-1), node0.getCharno());
205:       assertFalse(node0.isGetProp());
206:       assertTrue(node0.isNumber());
207:       assertFalse(node0.hasOneChild());
208:       assertFalse(node0.isString());
209:       assertFalse(node0.isScript());
210:       assertFalse(node0.isIf());
211:       assertEquals((-1), node0.getSourcePosition());
212:       assertFalse(node0.isNE());
213:       assertFalse(node0.isFor());
214:       assertFalse(node0.isFunction());
215:       assertFalse(node0.isRegExp());
216:       assertEquals((-1), node0.getLineno());
217:       assertFalse(node0.isCast());
218:       assertFalse(node0.isContinue());
219:       assertFalse(node0.isIn());
220:       assertFalse(node0.isSetterDef());
221:       assertFalse(node0.isInc());
222:       assertFalse(node0.isStringKey());
223:       assertFalse(node0.isName());
224:       assertFalse(node0.isVar());
225:       assertFalse(node0.isBlock());
226:       assertFalse(node0.isNull());
227:       assertFalse(node0.isParamList());
228:       assertFalse(node0.isCatch());
229:       assertFalse(node0.isCall());
230:       assertFalse(node0.hasMoreThanOneChild());
231:       assertFalse(node0.isWhile());
232:       assertEquals(39, node0.getType());
233:       assertFalse(node0.isReturn());
234:       assertFalse(node0.isDebugger());
235:       assertFalse(node0.isTry());
236:       assertFalse(node0.isLabelName());
237:       assertFalse(node0.isAssign());
238:       assertFalse(node0.isGetterDef());
239:       assertFalse(node0.isDelProp());
240:       assertFalse(node0.hasChildren());
241:       assertFalse(node0.isDec());
242:       assertFalse(node0.isVoid());
243:       assertFalse(node0.isTypeOf());
244:       assertFalse(node0.isArrayLit());
245:       assertFalse(node0.isExprResult());
246:       assertFalse(node0.isGetElem());
247:       assertFalse(node0.isDo());
248:       assertFalse(node0.isDefaultCase());
249:       assertEquals(0, node0.getChildCount());
250:       assertFalse(node0.isLabel());
251:       assertFalse(node0.isTrue());
252:       assertFalse(node0.isNew());
253:       assertFalse(node0.isAssignAdd());
254:       assertFalse(node0.isOr());
255:       assertFalse(node0.isEmpty());
256:       assertFalse(node0.isAdd());
257:       assertFalse(jSDocInfo0.isDefine());
258:       assertFalse(jSDocInfo0.isImplicitCast());
259:       assertNull(jSDocInfo0.getReturnDescription());
260:       assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
261:       assertFalse(jSDocInfo0.isDisposes());
262:       assertFalse(jSDocInfo0.isNoAlias());
263:       assertNull(jSDocInfo0.getOriginalCommentString());
264:       assertFalse(jSDocInfo0.hasReturnType());
265:       assertEquals(0, jSDocInfo0.getParameterCount());
266:       assertFalse(jSDocInfo0.isJaggerProvide());
267:       assertFalse(jSDocInfo0.hasBaseType());
268:       assertFalse(jSDocInfo0.isStableIdGenerator());
269:       assertNull(jSDocInfo0.getLicense());
270:       assertFalse(jSDocInfo0.isConsistentIdGenerator());
271:       assertFalse(jSDocInfo0.shouldPreserveTry());
272:       assertFalse(jSDocInfo0.isNoTypeCheck());
273:       assertNull(jSDocInfo0.getDescription());
274:       assertFalse(jSDocInfo0.isConstructor());
275:       assertFalse(jSDocInfo0.hasThisType());
276:       assertFalse(jSDocInfo0.hasEnumParameterType());
277:       assertFalse(jSDocInfo0.isJaggerModule());
278:       assertFalse(jSDocInfo0.isExport());
279:       assertFalse(jSDocInfo0.isNoCompile());
280:       assertFalse(jSDocInfo0.isJavaDispatch());
281:       assertFalse(jSDocInfo0.isIdGenerator());
282:       assertFalse(jSDocInfo0.isInterface());
283:       assertNull(jSDocInfo0.getBlockDescription());
284:       assertNull(jSDocInfo0.getDeprecationReason());
285:       assertFalse(jSDocInfo0.hasFileOverview());
286:       assertFalse(jSDocInfo0.isJaggerInject());
287:       assertEquals("JSDocInfo", jSDocInfo0.toString());
288:       assertNull(jSDocInfo0.getVersion());
289:       assertFalse(jSDocInfo0.makesStructs());
290:       assertFalse(jSDocInfo0.isWizaction());
291:       assertFalse(jSDocInfo0.isNgInject());
292:       assertFalse(jSDocInfo0.isOverride());
293:       assertNull(jSDocInfo0.getFileOverview());
294:       assertNull(jSDocInfo0.getVisibility());
295:       assertNull(jSDocInfo0.getMeaning());
296:       assertFalse(jSDocInfo0.isConstant());
297:       assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
298:       assertFalse(jSDocInfo0.isNoSideEffects());
299:       assertFalse(jSDocInfo0.hasModifies());
300:       assertFalse(jSDocInfo0.hasType());
301:       assertFalse(jSDocInfo0.makesDicts());
302:       assertFalse(jSDocInfo0.hasTypedefType());
303:       assertFalse(jSDocInfo0.containsDeclaration());
304:       assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
305:       assertFalse(jSDocInfo0.isHidden());
306:       assertFalse(jSDocInfo0.isExterns());
307:       assertFalse(jSDocInfo0.isNoShadow());
308:       assertFalse(jSDocInfo0.isDeprecated());
309:       assertFalse(jSDocInfo0.isMappedIdGenerator());
310:       assertNull(jSDocInfo0.getLendsName());
311:       assertFalse(jSDocInfo0.isExpose());
312:       assertFalse(node1.isGetterDef());
313:       assertFalse(node1.isNE());
314:       assertFalse(node1.isDelProp());
315:       assertFalse(node1.isFor());
316:       assertFalse(node1.isIf());
317:       assertTrue(node1.isNumber());
318:       assertFalse(node1.isEmpty());
319:       assertFalse(node1.isString());
320:       assertFalse(node1.isIn());
321:       assertFalse(node1.isRegExp());
322:       assertFalse(node1.isTrue());
323:       assertFalse(node1.isCase());
324:       assertFalse(node1.isTry());
325:       assertFalse(node1.isVoid());
326:       assertFalse(node1.isHook());
327:       assertFalse(node1.isCatch());
328:       assertFalse(node1.isSetterDef());
329:       assertFalse(node1.isComma());
330:       assertFalse(node1.isGetProp());
331:       assertFalse(node1.isThrow());
332:       assertFalse(node1.isNot());
333:       assertFalse(node1.isObjectLit());
334:       assertFalse(node1.isInc());
335:       assertFalse(node1.isDebugger());
336:       assertFalse(node1.isAnd());
337:       assertFalse(node1.isCast());
338:       assertFalse(node1.isFalse());
339:       assertFalse(node1.isFunction());
340:       assertFalse(node1.isContinue());
341:       assertEquals((-1), node1.getSourcePosition());
342:       assertFalse(node1.isDec());
343:       assertFalse(node1.isTypeOf());
344:       assertFalse(node1.hasChildren());
345:       assertFalse(node1.isLabelName());
346:       assertFalse(node1.isAssignAdd());
347:       assertFalse(node1.hasOneChild());
348:       assertFalse(node1.isOr());
349:       assertFalse(node1.isScript());
350:       assertFalse(node1.isExprResult());
351:       assertEquals(39, node1.getType());
352:       assertFalse(node1.isBlock());
353:       assertFalse(node1.isWhile());
354:       assertFalse(node1.isInstanceOf());
355:       assertEquals((-1), node1.getLineno());
356:       assertFalse(node1.isReturn());
357:       assertFalse(node1.isCall());
358:       assertFalse(node1.isGetElem());
359:       assertFalse(node1.isAssign());
360:       assertFalse(node1.hasMoreThanOneChild());
361:       assertFalse(node1.isWith());
362:       assertFalse(node1.isNull());
363:       assertFalse(node1.isThis());
364:       assertFalse(node1.isBreak());
365:       assertFalse(node1.isStringKey());
366:       assertFalse(node1.isName());
367:       assertFalse(node1.isParamList());
368:       assertFalse(node1.isAdd());
369:       assertEquals((-1), node1.getCharno());
370:       assertFalse(node1.isNew());
371:       assertFalse(node1.isDo());
372:       assertFalse(node1.isDefaultCase());
373:       assertFalse(node1.isSwitch());
374:       assertFalse(node1.isVar());
375:       assertEquals(0, node1.getChildCount());
376:       assertFalse(node1.isArrayLit());
377:       assertFalse(node1.isLabel());
378:       assertNotNull(node1);
379:       assertSame(node0, node1);
380:       assertSame(node1, node0);
381:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
382:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
383:       assertEquals(36, Node.QUOTED_PROP);
384:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
385:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
386:       assertEquals(55, Node.INFERRED_FUNCTION);
387:       assertEquals(29, Node.JSDOC_INFO_PROP);
388:       assertEquals(53, Node.INPUT_ID);
389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
390:       assertEquals(46, Node.IS_NAMESPACE);
391:       assertEquals(2, Node.POST_FLAG);
392:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
393:       assertEquals(51, Node.STATIC_SOURCE_FILE);
394:       assertEquals(47, Node.IS_DISPATCHER);
395:       assertEquals(30, Node.VAR_ARGS_NAME);
396:       assertEquals(43, Node.IS_CONSTANT_NAME);
397:       assertEquals(40, Node.ORIGINALNAME_PROP);
398:       assertEquals(52, Node.LENGTH);
399:       assertEquals(54, Node.SLASH_V);
400:       assertEquals(57, Node.REFLECTED_OBJECT);
401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
402:       assertEquals(50, Node.FREE_CALL);
403:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
404:       assertEquals(8, Node.FLAG_NO_THROWS);
405:       assertEquals(57, Node.LAST_PROP);
406:       assertEquals(1, Node.DECR_FLAG);
407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
408:       assertEquals(39, Node.EMPTY_BLOCK);
409:       assertEquals(32, Node.INCRDECR_PROP);
410:       assertEquals(4095, Node.COLUMN_MASK);
411:       assertEquals(12, Node.COLUMN_BITS);
412:       assertEquals(56, Node.CHANGE_TIME);
413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
414:       assertEquals(49, Node.DIRECT_EVAL);
415:       assertEquals(37, Node.OPT_ARG_NAME);
416:       assertEquals(48, Node.DIRECTIVES);
417:       assertEquals(40, Node.ORIGINALNAME_PROP);
418:       assertEquals(50, Node.FREE_CALL);
419:       assertEquals(57, Node.REFLECTED_OBJECT);
420:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
421:       assertEquals(48, Node.DIRECTIVES);
422:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
423:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
424:       assertEquals(4095, Node.COLUMN_MASK);
425:       assertEquals(1, Node.DECR_FLAG);
426:       assertEquals(51, Node.STATIC_SOURCE_FILE);
427:       assertEquals(46, Node.IS_NAMESPACE);
428:       assertEquals(12, Node.COLUMN_BITS);
429:       assertEquals(32, Node.INCRDECR_PROP);
430:       assertEquals(43, Node.IS_CONSTANT_NAME);
431:       assertEquals(54, Node.SLASH_V);
432:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
433:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
434:       assertEquals(47, Node.IS_DISPATCHER);
435:       assertEquals(56, Node.CHANGE_TIME);
436:       assertEquals(2, Node.POST_FLAG);
437:       assertEquals(37, Node.OPT_ARG_NAME);
438:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
439:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
440:       assertEquals(30, Node.VAR_ARGS_NAME);
441:       assertEquals(49, Node.DIRECT_EVAL);
442:       assertEquals(57, Node.LAST_PROP);
443:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
444:       assertEquals(8, Node.FLAG_NO_THROWS);
445:       assertEquals(39, Node.EMPTY_BLOCK);
446:       assertEquals(53, Node.INPUT_ID);
447:       assertEquals(36, Node.QUOTED_PROP);
448:       assertEquals(15, Node.NO_SIDE_EFFECTS);
449:       assertEquals(55, Node.INFERRED_FUNCTION);
450:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
451:       assertEquals(29, Node.JSDOC_INFO_PROP);
452:       assertEquals(52, Node.LENGTH);
453:       
454:       Iterable<Node> iterable0 = node0.children();
455:       assertFalse(iterable0.contains(node0));
456:       assertFalse(node0.isThrow());
457:       assertFalse(node0.isFalse());
458:       assertFalse(node0.isHook());
459:       assertFalse(node0.isThis());
460:       assertFalse(node0.isComma());
461:       assertFalse(node0.isSwitch());
462:       assertFalse(node0.isInstanceOf());
463:       assertFalse(node0.isBreak());
464:       assertFalse(node0.isCase());
465:       assertFalse(node0.isAnd());
466:       assertFalse(node0.isWith());
467:       assertFalse(node0.isNot());
468:       assertFalse(node0.isObjectLit());
469:       assertEquals((-1), node0.getCharno());
470:       assertFalse(node0.isGetProp());
471:       assertTrue(node0.isNumber());
472:       assertFalse(node0.hasOneChild());
473:       assertFalse(node0.isString());
474:       assertFalse(node0.isScript());
475:       assertFalse(node0.isIf());
476:       assertEquals((-1), node0.getSourcePosition());
477:       assertFalse(node0.isNE());
478:       assertFalse(node0.isFor());
479:       assertFalse(node0.isFunction());
480:       assertFalse(node0.isRegExp());
481:       assertEquals((-1), node0.getLineno());
482:       assertFalse(node0.isCast());
483:       assertFalse(node0.isContinue());
484:       assertFalse(node0.isIn());
485:       assertFalse(node0.isSetterDef());
486:       assertFalse(node0.isInc());
487:       assertFalse(node0.isStringKey());
488:       assertFalse(node0.isName());
489:       assertFalse(node0.isVar());
490:       assertFalse(node0.isBlock());
491:       assertFalse(node0.isNull());
492:       assertFalse(node0.isParamList());
493:       assertFalse(node0.isCatch());
494:       assertFalse(node0.isCall());
495:       assertFalse(node0.hasMoreThanOneChild());
496:       assertFalse(node0.isWhile());
497:       assertEquals(39, node0.getType());
498:       assertFalse(node0.isReturn());
499:       assertFalse(node0.isDebugger());
500:       assertFalse(node0.isTry());
501:       assertFalse(node0.isLabelName());
502:       assertFalse(node0.isAssign());
503:       assertFalse(node0.isGetterDef());
504:       assertFalse(node0.isDelProp());
505:       assertFalse(node0.hasChildren());
506:       assertFalse(node0.isDec());
507:       assertFalse(node0.isVoid());
508:       assertFalse(node0.isTypeOf());
509:       assertFalse(node0.isArrayLit());
510:       assertFalse(node0.isExprResult());
511:       assertFalse(node0.isGetElem());
512:       assertFalse(node0.isDo());
513:       assertFalse(node0.isDefaultCase());
514:       assertEquals(0, node0.getChildCount());
515:       assertFalse(node0.isLabel());
516:       assertFalse(node0.isTrue());
517:       assertFalse(node0.isNew());
518:       assertFalse(node0.isAssignAdd());
519:       assertFalse(node0.isOr());
520:       assertFalse(node0.isEmpty());
521:       assertFalse(node0.isAdd());
522:       assertNotNull(iterable0);
523:       assertSame(node0, node1);
524:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
525:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
526:       assertEquals(36, Node.QUOTED_PROP);
527:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
528:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
529:       assertEquals(55, Node.INFERRED_FUNCTION);
530:       assertEquals(29, Node.JSDOC_INFO_PROP);
531:       assertEquals(53, Node.INPUT_ID);
532:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
533:       assertEquals(46, Node.IS_NAMESPACE);
534:       assertEquals(2, Node.POST_FLAG);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(51, Node.STATIC_SOURCE_FILE);
537:       assertEquals(47, Node.IS_DISPATCHER);
538:       assertEquals(30, Node.VAR_ARGS_NAME);
539:       assertEquals(43, Node.IS_CONSTANT_NAME);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(52, Node.LENGTH);
542:       assertEquals(54, Node.SLASH_V);
543:       assertEquals(57, Node.REFLECTED_OBJECT);
544:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
545:       assertEquals(50, Node.FREE_CALL);
546:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
547:       assertEquals(8, Node.FLAG_NO_THROWS);
548:       assertEquals(57, Node.LAST_PROP);
549:       assertEquals(1, Node.DECR_FLAG);
550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
551:       assertEquals(39, Node.EMPTY_BLOCK);
552:       assertEquals(32, Node.INCRDECR_PROP);
553:       assertEquals(4095, Node.COLUMN_MASK);
554:       assertEquals(12, Node.COLUMN_BITS);
555:       assertEquals(56, Node.CHANGE_TIME);
556:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
557:       assertEquals(49, Node.DIRECT_EVAL);
558:       assertEquals(37, Node.OPT_ARG_NAME);
559:       assertEquals(48, Node.DIRECTIVES);
560:       
561:       String string0 = node0.toStringTree();
562:       assertFalse(node0.isThrow());
563:       assertFalse(node0.isFalse());
564:       assertFalse(node0.isHook());
565:       assertFalse(node0.isThis());
566:       assertFalse(node0.isComma());
567:       assertFalse(node0.isSwitch());
568:       assertFalse(node0.isInstanceOf());
569:       assertFalse(node0.isBreak());
570:       assertFalse(node0.isCase());
571:       assertFalse(node0.isAnd());
572:       assertFalse(node0.isWith());
573:       assertFalse(node0.isNot());
574:       assertFalse(node0.isObjectLit());
575:       assertEquals((-1), node0.getCharno());
576:       assertFalse(node0.isGetProp());
577:       assertTrue(node0.isNumber());
578:       assertFalse(node0.hasOneChild());
579:       assertFalse(node0.isString());
580:       assertFalse(node0.isScript());
581:       assertFalse(node0.isIf());
582:       assertEquals((-1), node0.getSourcePosition());
583:       assertFalse(node0.isNE());
584:       assertFalse(node0.isFor());
585:       assertFalse(node0.isFunction());
586:       assertFalse(node0.isRegExp());
587:       assertEquals((-1), node0.getLineno());
588:       assertFalse(node0.isCast());
589:       assertFalse(node0.isContinue());
590:       assertFalse(node0.isIn());
591:       assertFalse(node0.isSetterDef());
592:       assertFalse(node0.isInc());
593:       assertFalse(node0.isStringKey());
594:       assertFalse(node0.isName());
595:       assertFalse(node0.isVar());
596:       assertFalse(node0.isBlock());
597:       assertFalse(node0.isNull());
598:       assertFalse(node0.isParamList());
599:       assertFalse(node0.isCatch());
600:       assertFalse(node0.isCall());
601:       assertFalse(node0.hasMoreThanOneChild());
602:       assertFalse(node0.isWhile());
603:       assertEquals(39, node0.getType());
604:       assertFalse(node0.isReturn());
605:       assertFalse(node0.isDebugger());
606:       assertFalse(node0.isTry());
607:       assertFalse(node0.isLabelName());
608:       assertFalse(node0.isAssign());
609:       assertFalse(node0.isGetterDef());
610:       assertFalse(node0.isDelProp());
611:       assertFalse(node0.hasChildren());
612:       assertFalse(node0.isDec());
613:       assertFalse(node0.isVoid());
614:       assertFalse(node0.isTypeOf());
615:       assertFalse(node0.isArrayLit());
616:       assertFalse(node0.isExprResult());
617:       assertFalse(node0.isGetElem());
618:       assertFalse(node0.isDo());
619:       assertFalse(node0.isDefaultCase());
620:       assertEquals(0, node0.getChildCount());
621:       assertFalse(node0.isLabel());
622:       assertFalse(node0.isTrue());
623:       assertFalse(node0.isNew());
624:       assertFalse(node0.isAssignAdd());
625:       assertFalse(node0.isOr());
626:       assertFalse(node0.isEmpty());
627:       assertFalse(node0.isAdd());
628:       assertNotNull(string0);
629:       assertSame(node0, node1);
630:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
631:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
632:       assertEquals(36, Node.QUOTED_PROP);
633:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
634:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
635:       assertEquals(55, Node.INFERRED_FUNCTION);
636:       assertEquals(29, Node.JSDOC_INFO_PROP);
637:       assertEquals(53, Node.INPUT_ID);
638:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
639:       assertEquals(46, Node.IS_NAMESPACE);
640:       assertEquals(2, Node.POST_FLAG);
641:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
642:       assertEquals(51, Node.STATIC_SOURCE_FILE);
643:       assertEquals(47, Node.IS_DISPATCHER);
644:       assertEquals(30, Node.VAR_ARGS_NAME);
645:       assertEquals(43, Node.IS_CONSTANT_NAME);
646:       assertEquals(40, Node.ORIGINALNAME_PROP);
647:       assertEquals(52, Node.LENGTH);
648:       assertEquals(54, Node.SLASH_V);
649:       assertEquals(57, Node.REFLECTED_OBJECT);
650:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
651:       assertEquals(50, Node.FREE_CALL);
652:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
653:       assertEquals(8, Node.FLAG_NO_THROWS);
654:       assertEquals(57, Node.LAST_PROP);
655:       assertEquals(1, Node.DECR_FLAG);
656:       assertEquals(15, Node.NO_SIDE_EFFECTS);
657:       assertEquals(39, Node.EMPTY_BLOCK);
658:       assertEquals(32, Node.INCRDECR_PROP);
659:       assertEquals(4095, Node.COLUMN_MASK);
660:       assertEquals(12, Node.COLUMN_BITS);
661:       assertEquals(56, Node.CHANGE_TIME);
662:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
663:       assertEquals(49, Node.DIRECT_EVAL);
664:       assertEquals(37, Node.OPT_ARG_NAME);
665:       assertEquals(48, Node.DIRECTIVES);
666:       
667:       try { 
668:         node0.getString();
669:         fail("Expecting exception: UnsupportedOperationException");
670:       
671:       } catch(UnsupportedOperationException e) {
672:          //
673:          // NUMBER -1290.8408832418036 [jsdoc_info: com.google.javascript.rhino.Node$ObjectPropListItem@0000000003] is not a string node
674:          //
675:          verifyException("com.google.javascript.rhino.Node", e);
676:       }
677:   }
678: }
RegularFileObject[/tmp/EvoSuite_157_1628256054651/com/google/javascript/rhino/Node_157_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:54 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_157_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_157_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_157_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:54.714 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J^GiF5?,af~XIkNH");
assertFalse(boolean0);

Node node0 = Node.newNumber((-1290.8408832418036), (-981), 110);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

JSDocInfo jSDocInfo0 = new JSDocInfo();
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getReturnDescription());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasReturnType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isOverride());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExpose());
assertNotNull(jSDocInfo0);

Node node1 = node0.setJSDocInfo(jSDocInfo0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(jSDocInfo0.isDefine());
assertFalse(jSDocInfo0.isImplicitCast());
assertNull(jSDocInfo0.getReturnDescription());
assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
assertFalse(jSDocInfo0.isDisposes());
assertFalse(jSDocInfo0.isNoAlias());
assertNull(jSDocInfo0.getOriginalCommentString());
assertFalse(jSDocInfo0.hasReturnType());
assertEquals(0, jSDocInfo0.getParameterCount());
assertFalse(jSDocInfo0.isJaggerProvide());
assertFalse(jSDocInfo0.hasBaseType());
assertFalse(jSDocInfo0.isStableIdGenerator());
assertNull(jSDocInfo0.getLicense());
assertFalse(jSDocInfo0.isConsistentIdGenerator());
assertFalse(jSDocInfo0.shouldPreserveTry());
assertFalse(jSDocInfo0.isNoTypeCheck());
assertNull(jSDocInfo0.getDescription());
assertFalse(jSDocInfo0.isConstructor());
assertFalse(jSDocInfo0.hasThisType());
assertFalse(jSDocInfo0.hasEnumParameterType());
assertFalse(jSDocInfo0.isJaggerModule());
assertFalse(jSDocInfo0.isExport());
assertFalse(jSDocInfo0.isNoCompile());
assertFalse(jSDocInfo0.isJavaDispatch());
assertFalse(jSDocInfo0.isIdGenerator());
assertFalse(jSDocInfo0.isInterface());
assertNull(jSDocInfo0.getBlockDescription());
assertNull(jSDocInfo0.getDeprecationReason());
assertFalse(jSDocInfo0.hasFileOverview());
assertFalse(jSDocInfo0.isJaggerInject());
assertEquals("JSDocInfo", jSDocInfo0.toString());
assertNull(jSDocInfo0.getVersion());
assertFalse(jSDocInfo0.makesStructs());
assertFalse(jSDocInfo0.isWizaction());
assertFalse(jSDocInfo0.isNgInject());
assertFalse(jSDocInfo0.isOverride());
assertNull(jSDocInfo0.getFileOverview());
assertNull(jSDocInfo0.getVisibility());
assertNull(jSDocInfo0.getMeaning());
assertFalse(jSDocInfo0.isConstant());
assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
assertFalse(jSDocInfo0.isNoSideEffects());
assertFalse(jSDocInfo0.hasModifies());
assertFalse(jSDocInfo0.hasType());
assertFalse(jSDocInfo0.makesDicts());
assertFalse(jSDocInfo0.hasTypedefType());
assertFalse(jSDocInfo0.containsDeclaration());
assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
assertFalse(jSDocInfo0.isHidden());
assertFalse(jSDocInfo0.isExterns());
assertFalse(jSDocInfo0.isNoShadow());
assertFalse(jSDocInfo0.isDeprecated());
assertFalse(jSDocInfo0.isMappedIdGenerator());
assertNull(jSDocInfo0.getLendsName());
assertFalse(jSDocInfo0.isExpose());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertTrue(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isRegExp());
assertFalse(node1.isTrue());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertFalse(node1.isVoid());
assertFalse(node1.isHook());
assertFalse(node1.isCatch());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertEquals(39, node1.getType());
assertFalse(node1.isBlock());
assertFalse(node1.isWhile());
assertFalse(node1.isInstanceOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isReturn());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isNull());
assertFalse(node1.isThis());
assertFalse(node1.isBreak());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isParamList());
assertFalse(node1.isAdd());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isVar());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabel());
assertNotNull(node1);
assertSame(node0, node1);
assertSame(node1, node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(iterable0);
assertSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

String string0 = node0.toStringTree();
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isSwitch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isNumber());
assertFalse(node0.hasOneChild());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertFalse(node0.isCall());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWhile());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isVoid());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(string0);
assertSame(node0, node1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);

node0.getString();

[MASTER] 13:20:57.965 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_173_1628256057666/com/google/javascript/rhino/Node_173_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_173_1628256057666/com/google/javascript/rhino/Node_173_tmp__ESTest_scaffolding.java]]
[MASTER] 13:20:57.965 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:57.965 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:20:57.966 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 159
[MASTER] 13:20:57.966 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 691
[MASTER] 13:20:57.967 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_173_1628256057666/com/google/javascript/rhino/Node_173_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:20:57 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import com.google.javascript.rhino.SimpleErrorReporter;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.ArrayList;
16: import java.util.List;
17: import org.evosuite.runtime.EvoRunner;
18: import org.evosuite.runtime.EvoRunnerParameters;
19: import org.evosuite.runtime.testdata.EvoSuiteFile;
20: import org.evosuite.runtime.testdata.FileSystemHandling;
21: import org.junit.runner.RunWith;
22: 
23: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
24: public class Node_173_tmp__ESTest extends Node_173_tmp__ESTest_scaffolding {
25: 
26:   @Test(timeout = 4000)
27:   public void test0()  throws Throwable  {
28:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
29:       assertNotNull(simpleErrorReporter0);
30:       
31:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
32:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
33:       assertNotNull(jSTypeRegistry0);
34:       
35:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
36:       assertEquals(0, arrayList0.size());
37:       assertTrue(arrayList0.isEmpty());
38:       assertNotNull(arrayList0);
39:       
40:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
41:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
42:       assertEquals(0, arrayList0.size());
43:       assertTrue(arrayList0.isEmpty());
44:       assertEquals(83, node0.getType());
45:       assertFalse(node0.isThis());
46:       assertFalse(node0.isComma());
47:       assertFalse(node0.isGetProp());
48:       assertFalse(node0.isFalse());
49:       assertTrue(node0.isParamList());
50:       assertFalse(node0.isAnd());
51:       assertFalse(node0.isInstanceOf());
52:       assertFalse(node0.isBreak());
53:       assertFalse(node0.isSwitch());
54:       assertEquals((-1), node0.getCharno());
55:       assertFalse(node0.isExprResult());
56:       assertFalse(node0.isScript());
57:       assertFalse(node0.isWith());
58:       assertFalse(node0.isString());
59:       assertFalse(node0.isNot());
60:       assertFalse(node0.isObjectLit());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isCase());
63:       assertFalse(node0.hasOneChild());
64:       assertFalse(node0.isOr());
65:       assertFalse(node0.isReturn());
66:       assertFalse(node0.isAssign());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.hasChildren());
69:       assertFalse(node0.isNumber());
70:       assertFalse(node0.isDec());
71:       assertFalse(node0.isGetterDef());
72:       assertFalse(node0.isTypeOf());
73:       assertFalse(node0.isArrayLit());
74:       assertFalse(node0.isGetElem());
75:       assertFalse(node0.isVoid());
76:       assertFalse(node0.isLabelName());
77:       assertFalse(node0.isDelProp());
78:       assertFalse(node0.isTrue());
79:       assertFalse(node0.isAdd());
80:       assertFalse(node0.isEmpty());
81:       assertFalse(node0.isVar());
82:       assertFalse(node0.isDo());
83:       assertFalse(node0.isAssignAdd());
84:       assertFalse(node0.isDefaultCase());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isSetterDef());
87:       assertFalse(node0.isNull());
88:       assertEquals(0, node0.getChildCount());
89:       assertFalse(node0.isCatch());
90:       assertFalse(node0.isStringKey());
91:       assertFalse(node0.isCall());
92:       assertFalse(node0.isName());
93:       assertFalse(node0.isDebugger());
94:       assertFalse(node0.isBlock());
95:       assertFalse(node0.isRegExp());
96:       assertFalse(node0.isFor());
97:       assertFalse(node0.isWhile());
98:       assertFalse(node0.isTry());
99:       assertFalse(node0.isNE());
100:       assertEquals((-1), node0.getSourcePosition());
101:       assertFalse(node0.isIn());
102:       assertFalse(node0.hasMoreThanOneChild());
103:       assertFalse(node0.isCast());
104:       assertFalse(node0.isContinue());
105:       assertEquals((-1), node0.getLineno());
106:       assertFalse(node0.isIf());
107:       assertFalse(node0.isFunction());
108:       assertFalse(node0.isInc());
109:       assertFalse(node0.isThrow());
110:       assertNotNull(node0);
111:       assertEquals(29, Node.JSDOC_INFO_PROP);
112:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
113:       assertEquals(47, Node.IS_DISPATCHER);
114:       assertEquals(2, Node.POST_FLAG);
115:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
116:       assertEquals(53, Node.INPUT_ID);
117:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
118:       assertEquals(12, Node.COLUMN_BITS);
119:       assertEquals(32, Node.INCRDECR_PROP);
120:       assertEquals(30, Node.VAR_ARGS_NAME);
121:       assertEquals(1, Node.DECR_FLAG);
122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
123:       assertEquals(46, Node.IS_NAMESPACE);
124:       assertEquals(54, Node.SLASH_V);
125:       assertEquals(43, Node.IS_CONSTANT_NAME);
126:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
127:       assertEquals(50, Node.FREE_CALL);
128:       assertEquals(40, Node.ORIGINALNAME_PROP);
129:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
130:       assertEquals(52, Node.LENGTH);
131:       assertEquals(8, Node.FLAG_NO_THROWS);
132:       assertEquals(39, Node.EMPTY_BLOCK);
133:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
134:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(49, Node.DIRECT_EVAL);
137:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
139:       assertEquals(4095, Node.COLUMN_MASK);
140:       assertEquals(55, Node.INFERRED_FUNCTION);
141:       assertEquals(36, Node.QUOTED_PROP);
142:       assertEquals(37, Node.OPT_ARG_NAME);
143:       assertEquals(57, Node.REFLECTED_OBJECT);
144:       assertEquals(56, Node.CHANGE_TIME);
145:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
146:       assertEquals(48, Node.DIRECTIVES);
147:       
148:       byte[] byteArray0 = new byte[4];
149:       byteArray0[0] = (byte)108;
150:       byteArray0[1] = (byte) (-12);
151:       byteArray0[2] = (byte) (-115);
152:       byteArray0[3] = (byte) (-115);
153:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
154:       assertFalse(boolean0);
155:       assertEquals(4, byteArray0.length);
156:       assertArrayEquals(new byte[] {(byte)108, (byte) (-12), (byte) (-115), (byte) (-115)}, byteArray0);
157:       
158:       Iterable<Node> iterable0 = node0.children();
159:       assertFalse(iterable0.contains(node0));
160:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
161:       assertEquals(0, arrayList0.size());
162:       assertTrue(arrayList0.isEmpty());
163:       assertEquals(83, node0.getType());
164:       assertFalse(node0.isThis());
165:       assertFalse(node0.isComma());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isFalse());
168:       assertTrue(node0.isParamList());
169:       assertFalse(node0.isAnd());
170:       assertFalse(node0.isInstanceOf());
171:       assertFalse(node0.isBreak());
172:       assertFalse(node0.isSwitch());
173:       assertEquals((-1), node0.getCharno());
174:       assertFalse(node0.isExprResult());
175:       assertFalse(node0.isScript());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isString());
178:       assertFalse(node0.isNot());
179:       assertFalse(node0.isObjectLit());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isCase());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isReturn());
185:       assertFalse(node0.isAssign());
186:       assertFalse(node0.isLabel());
187:       assertFalse(node0.hasChildren());
188:       assertFalse(node0.isNumber());
189:       assertFalse(node0.isDec());
190:       assertFalse(node0.isGetterDef());
191:       assertFalse(node0.isTypeOf());
192:       assertFalse(node0.isArrayLit());
193:       assertFalse(node0.isGetElem());
194:       assertFalse(node0.isVoid());
195:       assertFalse(node0.isLabelName());
196:       assertFalse(node0.isDelProp());
197:       assertFalse(node0.isTrue());
198:       assertFalse(node0.isAdd());
199:       assertFalse(node0.isEmpty());
200:       assertFalse(node0.isVar());
201:       assertFalse(node0.isDo());
202:       assertFalse(node0.isAssignAdd());
203:       assertFalse(node0.isDefaultCase());
204:       assertFalse(node0.isNew());
205:       assertFalse(node0.isSetterDef());
206:       assertFalse(node0.isNull());
207:       assertEquals(0, node0.getChildCount());
208:       assertFalse(node0.isCatch());
209:       assertFalse(node0.isStringKey());
210:       assertFalse(node0.isCall());
211:       assertFalse(node0.isName());
212:       assertFalse(node0.isDebugger());
213:       assertFalse(node0.isBlock());
214:       assertFalse(node0.isRegExp());
215:       assertFalse(node0.isFor());
216:       assertFalse(node0.isWhile());
217:       assertFalse(node0.isTry());
218:       assertFalse(node0.isNE());
219:       assertEquals((-1), node0.getSourcePosition());
220:       assertFalse(node0.isIn());
221:       assertFalse(node0.hasMoreThanOneChild());
222:       assertFalse(node0.isCast());
223:       assertFalse(node0.isContinue());
224:       assertEquals((-1), node0.getLineno());
225:       assertFalse(node0.isIf());
226:       assertFalse(node0.isFunction());
227:       assertFalse(node0.isInc());
228:       assertFalse(node0.isThrow());
229:       assertNotNull(iterable0);
230:       assertEquals(29, Node.JSDOC_INFO_PROP);
231:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
232:       assertEquals(47, Node.IS_DISPATCHER);
233:       assertEquals(2, Node.POST_FLAG);
234:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
235:       assertEquals(53, Node.INPUT_ID);
236:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
237:       assertEquals(12, Node.COLUMN_BITS);
238:       assertEquals(32, Node.INCRDECR_PROP);
239:       assertEquals(30, Node.VAR_ARGS_NAME);
240:       assertEquals(1, Node.DECR_FLAG);
241:       assertEquals(51, Node.STATIC_SOURCE_FILE);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(43, Node.IS_CONSTANT_NAME);
245:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
246:       assertEquals(50, Node.FREE_CALL);
247:       assertEquals(40, Node.ORIGINALNAME_PROP);
248:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
249:       assertEquals(52, Node.LENGTH);
250:       assertEquals(8, Node.FLAG_NO_THROWS);
251:       assertEquals(39, Node.EMPTY_BLOCK);
252:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
253:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
254:       assertEquals(57, Node.LAST_PROP);
255:       assertEquals(49, Node.DIRECT_EVAL);
256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
257:       assertEquals(15, Node.NO_SIDE_EFFECTS);
258:       assertEquals(4095, Node.COLUMN_MASK);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(37, Node.OPT_ARG_NAME);
262:       assertEquals(57, Node.REFLECTED_OBJECT);
263:       assertEquals(56, Node.CHANGE_TIME);
264:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
265:       assertEquals(48, Node.DIRECTIVES);
266:       
267:       Node node1 = Node.newString("Object#Key", 15, 49);
268:       assertFalse(node1.hasMoreThanOneChild());
269:       assertFalse(node1.isContinue());
270:       assertFalse(node1.isWhile());
271:       assertFalse(node1.isDo());
272:       assertFalse(node1.isAdd());
273:       assertFalse(node1.isNumber());
274:       assertFalse(node1.isOr());
275:       assertFalse(node1.isGetElem());
276:       assertFalse(node1.isName());
277:       assertFalse(node1.isCall());
278:       assertFalse(node1.hasOneChild());
279:       assertEquals(15, node1.getLineno());
280:       assertFalse(node1.isBlock());
281:       assertFalse(node1.isExprResult());
282:       assertTrue(node1.isString());
283:       assertFalse(node1.hasChildren());
284:       assertFalse(node1.isDec());
285:       assertFalse(node1.isTypeOf());
286:       assertFalse(node1.isReturn());
287:       assertFalse(node1.isAssign());
288:       assertFalse(node1.isDefaultCase());
289:       assertFalse(node1.isScript());
290:       assertFalse(node1.isTrue());
291:       assertFalse(node1.isVoid());
292:       assertFalse(node1.isParamList());
293:       assertFalse(node1.isNull());
294:       assertFalse(node1.isStringKey());
295:       assertFalse(node1.isEmpty());
296:       assertFalse(node1.isLabelName());
297:       assertFalse(node1.isArrayLit());
298:       assertFalse(node1.isNew());
299:       assertFalse(node1.isAssignAdd());
300:       assertEquals(61489, node1.getSourcePosition());
301:       assertEquals(0, node1.getChildCount());
302:       assertFalse(node1.isVar());
303:       assertFalse(node1.isLabel());
304:       assertFalse(node1.isCase());
305:       assertFalse(node1.isInc());
306:       assertFalse(node1.isSwitch());
307:       assertFalse(node1.isNE());
308:       assertFalse(node1.isIn());
309:       assertFalse(node1.isGetterDef());
310:       assertFalse(node1.isFor());
311:       assertFalse(node1.isIf());
312:       assertFalse(node1.isBreak());
313:       assertFalse(node1.isDelProp());
314:       assertFalse(node1.isTry());
315:       assertFalse(node1.isHook());
316:       assertEquals(49, node1.getCharno());
317:       assertFalse(node1.isRegExp());
318:       assertFalse(node1.isThis());
319:       assertFalse(node1.isComma());
320:       assertEquals(40, node1.getType());
321:       assertFalse(node1.isObjectLit());
322:       assertFalse(node1.isCatch());
323:       assertFalse(node1.isWith());
324:       assertFalse(node1.isAnd());
325:       assertFalse(node1.isInstanceOf());
326:       assertFalse(node1.isGetProp());
327:       assertFalse(node1.isNot());
328:       assertFalse(node1.isDebugger());
329:       assertFalse(node1.isThrow());
330:       assertFalse(node1.isFalse());
331:       assertFalse(node1.isCast());
332:       assertFalse(node1.isSetterDef());
333:       assertFalse(node1.isFunction());
334:       assertNotNull(node1);
335:       assertFalse(node1.equals((Object)node0));
336:       assertEquals(4095, Node.COLUMN_MASK);
337:       assertEquals(55, Node.INFERRED_FUNCTION);
338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
339:       assertEquals(39, Node.EMPTY_BLOCK);
340:       assertEquals(48, Node.DIRECTIVES);
341:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
342:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
343:       assertEquals(40, Node.ORIGINALNAME_PROP);
344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
345:       assertEquals(43, Node.IS_CONSTANT_NAME);
346:       assertEquals(54, Node.SLASH_V);
347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(32, Node.INCRDECR_PROP);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(12, Node.COLUMN_BITS);
352:       assertEquals(37, Node.OPT_ARG_NAME);
353:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
354:       assertEquals(49, Node.DIRECT_EVAL);
355:       assertEquals(1, Node.DECR_FLAG);
356:       assertEquals(57, Node.LAST_PROP);
357:       assertEquals(47, Node.IS_DISPATCHER);
358:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
359:       assertEquals(2, Node.POST_FLAG);
360:       assertEquals(30, Node.VAR_ARGS_NAME);
361:       assertEquals(52, Node.LENGTH);
362:       assertEquals(57, Node.REFLECTED_OBJECT);
363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
364:       assertEquals(53, Node.INPUT_ID);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
367:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
368:       assertEquals(29, Node.JSDOC_INFO_PROP);
369:       assertEquals(56, Node.CHANGE_TIME);
370:       assertEquals(8, Node.FLAG_NO_THROWS);
371:       assertEquals(36, Node.QUOTED_PROP);
372:       
373:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
374:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
375:       assertEquals(0, arrayList0.size());
376:       assertTrue(arrayList0.isEmpty());
377:       assertEquals(83, node0.getType());
378:       assertFalse(node0.isThis());
379:       assertFalse(node0.isComma());
380:       assertFalse(node0.isGetProp());
381:       assertFalse(node0.isFalse());
382:       assertTrue(node0.isParamList());
383:       assertFalse(node0.isAnd());
384:       assertFalse(node0.isInstanceOf());
385:       assertFalse(node0.isBreak());
386:       assertFalse(node0.isSwitch());
387:       assertEquals((-1), node0.getCharno());
388:       assertFalse(node0.isExprResult());
389:       assertFalse(node0.isScript());
390:       assertFalse(node0.isWith());
391:       assertFalse(node0.isString());
392:       assertFalse(node0.isNot());
393:       assertFalse(node0.isObjectLit());
394:       assertFalse(node0.isHook());
395:       assertFalse(node0.isCase());
396:       assertFalse(node0.hasOneChild());
397:       assertFalse(node0.isOr());
398:       assertFalse(node0.isReturn());
399:       assertFalse(node0.isAssign());
400:       assertFalse(node0.isLabel());
401:       assertFalse(node0.hasChildren());
402:       assertFalse(node0.isNumber());
403:       assertFalse(node0.isDec());
404:       assertFalse(node0.isGetterDef());
405:       assertFalse(node0.isTypeOf());
406:       assertFalse(node0.isArrayLit());
407:       assertFalse(node0.isGetElem());
408:       assertFalse(node0.isVoid());
409:       assertFalse(node0.isLabelName());
410:       assertFalse(node0.isDelProp());
411:       assertFalse(node0.isTrue());
412:       assertFalse(node0.isAdd());
413:       assertFalse(node0.isEmpty());
414:       assertFalse(node0.isVar());
415:       assertFalse(node0.isDo());
416:       assertFalse(node0.isAssignAdd());
417:       assertFalse(node0.isDefaultCase());
418:       assertFalse(node0.isNew());
419:       assertFalse(node0.isSetterDef());
420:       assertFalse(node0.isNull());
421:       assertEquals(0, node0.getChildCount());
422:       assertFalse(node0.isCatch());
423:       assertFalse(node0.isStringKey());
424:       assertFalse(node0.isCall());
425:       assertFalse(node0.isName());
426:       assertFalse(node0.isDebugger());
427:       assertFalse(node0.isBlock());
428:       assertFalse(node0.isRegExp());
429:       assertFalse(node0.isFor());
430:       assertFalse(node0.isWhile());
431:       assertFalse(node0.isTry());
432:       assertFalse(node0.isNE());
433:       assertEquals((-1), node0.getSourcePosition());
434:       assertFalse(node0.isIn());
435:       assertFalse(node0.hasMoreThanOneChild());
436:       assertFalse(node0.isCast());
437:       assertFalse(node0.isContinue());
438:       assertEquals((-1), node0.getLineno());
439:       assertFalse(node0.isIf());
440:       assertFalse(node0.isFunction());
441:       assertFalse(node0.isInc());
442:       assertFalse(node0.isThrow());
443:       assertFalse(node1.hasMoreThanOneChild());
444:       assertFalse(node1.isContinue());
445:       assertFalse(node1.isWhile());
446:       assertFalse(node1.isDo());
447:       assertFalse(node1.isAdd());
448:       assertFalse(node1.isNumber());
449:       assertFalse(node1.isOr());
450:       assertFalse(node1.isGetElem());
451:       assertFalse(node1.isName());
452:       assertFalse(node1.isCall());
453:       assertFalse(node1.hasOneChild());
454:       assertEquals(15, node1.getLineno());
455:       assertFalse(node1.isBlock());
456:       assertFalse(node1.isExprResult());
457:       assertTrue(node1.isString());
458:       assertFalse(node1.hasChildren());
459:       assertFalse(node1.isDec());
460:       assertFalse(node1.isTypeOf());
461:       assertFalse(node1.isReturn());
462:       assertFalse(node1.isAssign());
463:       assertFalse(node1.isDefaultCase());
464:       assertFalse(node1.isScript());
465:       assertFalse(node1.isTrue());
466:       assertFalse(node1.isVoid());
467:       assertFalse(node1.isParamList());
468:       assertFalse(node1.isNull());
469:       assertFalse(node1.isStringKey());
470:       assertFalse(node1.isEmpty());
471:       assertFalse(node1.isLabelName());
472:       assertFalse(node1.isArrayLit());
473:       assertFalse(node1.isNew());
474:       assertFalse(node1.isAssignAdd());
475:       assertEquals(61489, node1.getSourcePosition());
476:       assertEquals(0, node1.getChildCount());
477:       assertFalse(node1.isVar());
478:       assertFalse(node1.isLabel());
479:       assertFalse(node1.isCase());
480:       assertFalse(node1.isInc());
481:       assertFalse(node1.isSwitch());
482:       assertFalse(node1.isNE());
483:       assertFalse(node1.isIn());
484:       assertFalse(node1.isGetterDef());
485:       assertFalse(node1.isFor());
486:       assertFalse(node1.isIf());
487:       assertFalse(node1.isBreak());
488:       assertFalse(node1.isDelProp());
489:       assertFalse(node1.isTry());
490:       assertFalse(node1.isHook());
491:       assertEquals(49, node1.getCharno());
492:       assertFalse(node1.isRegExp());
493:       assertFalse(node1.isThis());
494:       assertFalse(node1.isComma());
495:       assertEquals(40, node1.getType());
496:       assertFalse(node1.isObjectLit());
497:       assertFalse(node1.isCatch());
498:       assertFalse(node1.isWith());
499:       assertFalse(node1.isAnd());
500:       assertFalse(node1.isInstanceOf());
501:       assertFalse(node1.isGetProp());
502:       assertFalse(node1.isNot());
503:       assertFalse(node1.isDebugger());
504:       assertFalse(node1.isThrow());
505:       assertFalse(node1.isFalse());
506:       assertFalse(node1.isCast());
507:       assertFalse(node1.isSetterDef());
508:       assertFalse(node1.isFunction());
509:       assertNotNull(node_NodeMismatch0);
510:       assertFalse(node0.equals((Object)node1));
511:       assertFalse(node1.equals((Object)node0));
512:       assertEquals(29, Node.JSDOC_INFO_PROP);
513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
514:       assertEquals(47, Node.IS_DISPATCHER);
515:       assertEquals(2, Node.POST_FLAG);
516:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
517:       assertEquals(53, Node.INPUT_ID);
518:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
519:       assertEquals(12, Node.COLUMN_BITS);
520:       assertEquals(32, Node.INCRDECR_PROP);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(1, Node.DECR_FLAG);
523:       assertEquals(51, Node.STATIC_SOURCE_FILE);
524:       assertEquals(46, Node.IS_NAMESPACE);
525:       assertEquals(54, Node.SLASH_V);
526:       assertEquals(43, Node.IS_CONSTANT_NAME);
527:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
528:       assertEquals(50, Node.FREE_CALL);
529:       assertEquals(40, Node.ORIGINALNAME_PROP);
530:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
531:       assertEquals(52, Node.LENGTH);
532:       assertEquals(8, Node.FLAG_NO_THROWS);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
535:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
536:       assertEquals(57, Node.LAST_PROP);
537:       assertEquals(49, Node.DIRECT_EVAL);
538:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
539:       assertEquals(15, Node.NO_SIDE_EFFECTS);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(55, Node.INFERRED_FUNCTION);
542:       assertEquals(36, Node.QUOTED_PROP);
543:       assertEquals(37, Node.OPT_ARG_NAME);
544:       assertEquals(57, Node.REFLECTED_OBJECT);
545:       assertEquals(56, Node.CHANGE_TIME);
546:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
547:       assertEquals(48, Node.DIRECTIVES);
548:       assertEquals(4095, Node.COLUMN_MASK);
549:       assertEquals(55, Node.INFERRED_FUNCTION);
550:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
551:       assertEquals(39, Node.EMPTY_BLOCK);
552:       assertEquals(48, Node.DIRECTIVES);
553:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
554:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
555:       assertEquals(40, Node.ORIGINALNAME_PROP);
556:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
557:       assertEquals(43, Node.IS_CONSTANT_NAME);
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(51, Node.STATIC_SOURCE_FILE);
560:       assertEquals(50, Node.FREE_CALL);
561:       assertEquals(32, Node.INCRDECR_PROP);
562:       assertEquals(46, Node.IS_NAMESPACE);
563:       assertEquals(12, Node.COLUMN_BITS);
564:       assertEquals(37, Node.OPT_ARG_NAME);
565:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
566:       assertEquals(49, Node.DIRECT_EVAL);
567:       assertEquals(1, Node.DECR_FLAG);
568:       assertEquals(57, Node.LAST_PROP);
569:       assertEquals(47, Node.IS_DISPATCHER);
570:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
571:       assertEquals(2, Node.POST_FLAG);
572:       assertEquals(30, Node.VAR_ARGS_NAME);
573:       assertEquals(52, Node.LENGTH);
574:       assertEquals(57, Node.REFLECTED_OBJECT);
575:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
576:       assertEquals(53, Node.INPUT_ID);
577:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
578:       assertEquals(15, Node.NO_SIDE_EFFECTS);
579:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
580:       assertEquals(29, Node.JSDOC_INFO_PROP);
581:       assertEquals(56, Node.CHANGE_TIME);
582:       assertEquals(8, Node.FLAG_NO_THROWS);
583:       assertEquals(36, Node.QUOTED_PROP);
584:       
585:       node1.setType(1056);
586:       assertFalse(node1.hasMoreThanOneChild());
587:       assertFalse(node1.isContinue());
588:       assertFalse(node1.isWhile());
589:       assertFalse(node1.isDo());
590:       assertFalse(node1.isAdd());
591:       assertFalse(node1.isNumber());
592:       assertFalse(node1.isOr());
593:       assertFalse(node1.isGetElem());
594:       assertFalse(node1.isName());
595:       assertFalse(node1.isCall());
596:       assertFalse(node1.hasOneChild());
597:       assertEquals(15, node1.getLineno());
598:       assertFalse(node1.isBlock());
599:       assertFalse(node1.isExprResult());
600:       assertFalse(node1.hasChildren());
601:       assertFalse(node1.isDec());
602:       assertFalse(node1.isTypeOf());
603:       assertFalse(node1.isReturn());
604:       assertFalse(node1.isAssign());
605:       assertFalse(node1.isDefaultCase());
606:       assertFalse(node1.isScript());
607:       assertFalse(node1.isTrue());
608:       assertFalse(node1.isVoid());
609:       assertFalse(node1.isParamList());
610:       assertFalse(node1.isNull());
611:       assertFalse(node1.isStringKey());
612:       assertFalse(node1.isEmpty());
613:       assertFalse(node1.isLabelName());
614:       assertFalse(node1.isArrayLit());
615:       assertFalse(node1.isNew());
616:       assertFalse(node1.isAssignAdd());
617:       assertEquals(61489, node1.getSourcePosition());
618:       assertEquals(0, node1.getChildCount());
619:       assertFalse(node1.isVar());
620:       assertFalse(node1.isLabel());
621:       assertFalse(node1.isString());
622:       assertFalse(node1.isCase());
623:       assertFalse(node1.isInc());
624:       assertFalse(node1.isSwitch());
625:       assertFalse(node1.isNE());
626:       assertFalse(node1.isIn());
627:       assertFalse(node1.isGetterDef());
628:       assertFalse(node1.isFor());
629:       assertFalse(node1.isIf());
630:       assertFalse(node1.isBreak());
631:       assertFalse(node1.isDelProp());
632:       assertFalse(node1.isTry());
633:       assertFalse(node1.isHook());
634:       assertEquals(49, node1.getCharno());
635:       assertFalse(node1.isRegExp());
636:       assertFalse(node1.isThis());
637:       assertFalse(node1.isComma());
638:       assertFalse(node1.isObjectLit());
639:       assertFalse(node1.isCatch());
640:       assertFalse(node1.isWith());
641:       assertFalse(node1.isAnd());
642:       assertFalse(node1.isInstanceOf());
643:       assertFalse(node1.isGetProp());
644:       assertFalse(node1.isNot());
645:       assertFalse(node1.isDebugger());
646:       assertFalse(node1.isThrow());
647:       assertFalse(node1.isFalse());
648:       assertFalse(node1.isCast());
649:       assertFalse(node1.isSetterDef());
650:       assertEquals(1056, node1.getType());
651:       assertFalse(node1.isFunction());
652:       assertFalse(node1.equals((Object)node0));
653:       assertEquals(4095, Node.COLUMN_MASK);
654:       assertEquals(55, Node.INFERRED_FUNCTION);
655:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
656:       assertEquals(39, Node.EMPTY_BLOCK);
657:       assertEquals(48, Node.DIRECTIVES);
658:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
659:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
660:       assertEquals(40, Node.ORIGINALNAME_PROP);
661:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
662:       assertEquals(43, Node.IS_CONSTANT_NAME);
663:       assertEquals(54, Node.SLASH_V);
664:       assertEquals(51, Node.STATIC_SOURCE_FILE);
665:       assertEquals(50, Node.FREE_CALL);
666:       assertEquals(32, Node.INCRDECR_PROP);
667:       assertEquals(46, Node.IS_NAMESPACE);
668:       assertEquals(12, Node.COLUMN_BITS);
669:       assertEquals(37, Node.OPT_ARG_NAME);
670:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
671:       assertEquals(49, Node.DIRECT_EVAL);
672:       assertEquals(1, Node.DECR_FLAG);
673:       assertEquals(57, Node.LAST_PROP);
674:       assertEquals(47, Node.IS_DISPATCHER);
675:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
676:       assertEquals(2, Node.POST_FLAG);
677:       assertEquals(30, Node.VAR_ARGS_NAME);
678:       assertEquals(52, Node.LENGTH);
679:       assertEquals(57, Node.REFLECTED_OBJECT);
680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
683:       assertEquals(15, Node.NO_SIDE_EFFECTS);
684:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
685:       assertEquals(29, Node.JSDOC_INFO_PROP);
686:       assertEquals(56, Node.CHANGE_TIME);
687:       assertEquals(8, Node.FLAG_NO_THROWS);
688:       assertEquals(36, Node.QUOTED_PROP);
689:       
690:       node0.putProp(40, iterable0);
691:       assertFalse(iterable0.contains(node0));
692:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
693:       assertEquals(0, arrayList0.size());
694:       assertTrue(arrayList0.isEmpty());
695:       assertEquals(83, node0.getType());
696:       assertFalse(node0.isThis());
697:       assertFalse(node0.isComma());
698:       assertFalse(node0.isGetProp());
699:       assertFalse(node0.isFalse());
700:       assertTrue(node0.isParamList());
701:       assertFalse(node0.isAnd());
702:       assertFalse(node0.isInstanceOf());
703:       assertFalse(node0.isBreak());
704:       assertFalse(node0.isSwitch());
705:       assertEquals((-1), node0.getCharno());
706:       assertFalse(node0.isExprResult());
707:       assertFalse(node0.isScript());
708:       assertFalse(node0.isWith());
709:       assertFalse(node0.isString());
710:       assertFalse(node0.isNot());
711:       assertFalse(node0.isObjectLit());
712:       assertFalse(node0.isHook());
713:       assertFalse(node0.isCase());
714:       assertFalse(node0.hasOneChild());
715:       assertFalse(node0.isOr());
716:       assertFalse(node0.isReturn());
717:       assertFalse(node0.isAssign());
718:       assertFalse(node0.isLabel());
719:       assertFalse(node0.hasChildren());
720:       assertFalse(node0.isNumber());
721:       assertFalse(node0.isDec());
722:       assertFalse(node0.isGetterDef());
723:       assertFalse(node0.isTypeOf());
724:       assertFalse(node0.isArrayLit());
725:       assertFalse(node0.isGetElem());
726:       assertFalse(node0.isVoid());
727:       assertFalse(node0.isLabelName());
728:       assertFalse(node0.isDelProp());
729:       assertFalse(node0.isTrue());
730:       assertFalse(node0.isAdd());
731:       assertFalse(node0.isEmpty());
732:       assertFalse(node0.isVar());
733:       assertFalse(node0.isDo());
734:       assertFalse(node0.isAssignAdd());
735:       assertFalse(node0.isDefaultCase());
736:       assertFalse(node0.isNew());
737:       assertFalse(node0.isSetterDef());
738:       assertFalse(node0.isNull());
739:       assertEquals(0, node0.getChildCount());
740:       assertFalse(node0.isCatch());
741:       assertFalse(node0.isStringKey());
742:       assertFalse(node0.isCall());
743:       assertFalse(node0.isName());
744:       assertFalse(node0.isDebugger());
745:       assertFalse(node0.isBlock());
746:       assertFalse(node0.isRegExp());
747:       assertFalse(node0.isFor());
748:       assertFalse(node0.isWhile());
749:       assertFalse(node0.isTry());
750:       assertFalse(node0.isNE());
751:       assertEquals((-1), node0.getSourcePosition());
752:       assertFalse(node0.isIn());
753:       assertFalse(node0.hasMoreThanOneChild());
754:       assertFalse(node0.isCast());
755:       assertFalse(node0.isContinue());
756:       assertEquals((-1), node0.getLineno());
757:       assertFalse(node0.isIf());
758:       assertFalse(node0.isFunction());
759:       assertFalse(node0.isInc());
760:       assertFalse(node0.isThrow());
761:       assertFalse(node0.equals((Object)node1));
762:       assertEquals(29, Node.JSDOC_INFO_PROP);
763:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
764:       assertEquals(47, Node.IS_DISPATCHER);
765:       assertEquals(2, Node.POST_FLAG);
766:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
767:       assertEquals(53, Node.INPUT_ID);
768:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
769:       assertEquals(12, Node.COLUMN_BITS);
770:       assertEquals(32, Node.INCRDECR_PROP);
771:       assertEquals(30, Node.VAR_ARGS_NAME);
772:       assertEquals(1, Node.DECR_FLAG);
773:       assertEquals(51, Node.STATIC_SOURCE_FILE);
774:       assertEquals(46, Node.IS_NAMESPACE);
775:       assertEquals(54, Node.SLASH_V);
776:       assertEquals(43, Node.IS_CONSTANT_NAME);
777:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
778:       assertEquals(50, Node.FREE_CALL);
779:       assertEquals(40, Node.ORIGINALNAME_PROP);
780:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
781:       assertEquals(52, Node.LENGTH);
782:       assertEquals(8, Node.FLAG_NO_THROWS);
783:       assertEquals(39, Node.EMPTY_BLOCK);
784:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
785:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
786:       assertEquals(57, Node.LAST_PROP);
787:       assertEquals(49, Node.DIRECT_EVAL);
788:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
789:       assertEquals(15, Node.NO_SIDE_EFFECTS);
790:       assertEquals(4095, Node.COLUMN_MASK);
791:       assertEquals(55, Node.INFERRED_FUNCTION);
792:       assertEquals(36, Node.QUOTED_PROP);
793:       assertEquals(37, Node.OPT_ARG_NAME);
794:       assertEquals(57, Node.REFLECTED_OBJECT);
795:       assertEquals(56, Node.CHANGE_TIME);
796:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
797:       assertEquals(48, Node.DIRECTIVES);
798:       
799:       String string0 = node1.getSourceFileName();
800:       assertFalse(node1.hasMoreThanOneChild());
801:       assertFalse(node1.isContinue());
802:       assertFalse(node1.isWhile());
803:       assertFalse(node1.isDo());
804:       assertFalse(node1.isAdd());
805:       assertFalse(node1.isNumber());
806:       assertFalse(node1.isOr());
807:       assertFalse(node1.isGetElem());
808:       assertFalse(node1.isName());
809:       assertFalse(node1.isCall());
810:       assertFalse(node1.hasOneChild());
811:       assertEquals(15, node1.getLineno());
812:       assertFalse(node1.isBlock());
813:       assertFalse(node1.isExprResult());
814:       assertFalse(node1.hasChildren());
815:       assertFalse(node1.isDec());
816:       assertFalse(node1.isTypeOf());
817:       assertFalse(node1.isReturn());
818:       assertFalse(node1.isAssign());
819:       assertFalse(node1.isDefaultCase());
820:       assertFalse(node1.isScript());
821:       assertFalse(node1.isTrue());
822:       assertFalse(node1.isVoid());
823:       assertFalse(node1.isParamList());
824:       assertFalse(node1.isNull());
825:       assertFalse(node1.isStringKey());
826:       assertFalse(node1.isEmpty());
827:       assertFalse(node1.isLabelName());
828:       assertFalse(node1.isArrayLit());
829:       assertFalse(node1.isNew());
830:       assertFalse(node1.isAssignAdd());
831:       assertEquals(61489, node1.getSourcePosition());
832:       assertEquals(0, node1.getChildCount());
833:       assertFalse(node1.isVar());
834:       assertFalse(node1.isLabel());
835:       assertFalse(node1.isString());
836:       assertFalse(node1.isCase());
837:       assertFalse(node1.isInc());
838:       assertFalse(node1.isSwitch());
839:       assertFalse(node1.isNE());
840:       assertFalse(node1.isIn());
841:       assertFalse(node1.isGetterDef());
842:       assertFalse(node1.isFor());
843:       assertFalse(node1.isIf());
844:       assertFalse(node1.isBreak());
845:       assertFalse(node1.isDelProp());
846:       assertFalse(node1.isTry());
847:       assertFalse(node1.isHook());
848:       assertEquals(49, node1.getCharno());
849:       assertFalse(node1.isRegExp());
850:       assertFalse(node1.isThis());
851:       assertFalse(node1.isComma());
852:       assertFalse(node1.isObjectLit());
853:       assertFalse(node1.isCatch());
854:       assertFalse(node1.isWith());
855:       assertFalse(node1.isAnd());
856:       assertFalse(node1.isInstanceOf());
857:       assertFalse(node1.isGetProp());
858:       assertFalse(node1.isNot());
859:       assertFalse(node1.isDebugger());
860:       assertFalse(node1.isThrow());
861:       assertFalse(node1.isFalse());
862:       assertFalse(node1.isCast());
863:       assertFalse(node1.isSetterDef());
864:       assertEquals(1056, node1.getType());
865:       assertFalse(node1.isFunction());
866:       assertNull(string0);
867:       assertFalse(node1.equals((Object)node0));
868:       assertEquals(4095, Node.COLUMN_MASK);
869:       assertEquals(55, Node.INFERRED_FUNCTION);
870:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(48, Node.DIRECTIVES);
873:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
874:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
875:       assertEquals(40, Node.ORIGINALNAME_PROP);
876:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
877:       assertEquals(43, Node.IS_CONSTANT_NAME);
878:       assertEquals(54, Node.SLASH_V);
879:       assertEquals(51, Node.STATIC_SOURCE_FILE);
880:       assertEquals(50, Node.FREE_CALL);
881:       assertEquals(32, Node.INCRDECR_PROP);
882:       assertEquals(46, Node.IS_NAMESPACE);
883:       assertEquals(12, Node.COLUMN_BITS);
884:       assertEquals(37, Node.OPT_ARG_NAME);
885:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
886:       assertEquals(49, Node.DIRECT_EVAL);
887:       assertEquals(1, Node.DECR_FLAG);
888:       assertEquals(57, Node.LAST_PROP);
889:       assertEquals(47, Node.IS_DISPATCHER);
890:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
891:       assertEquals(2, Node.POST_FLAG);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(52, Node.LENGTH);
894:       assertEquals(57, Node.REFLECTED_OBJECT);
895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
896:       assertEquals(53, Node.INPUT_ID);
897:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
899:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
900:       assertEquals(29, Node.JSDOC_INFO_PROP);
901:       assertEquals(56, Node.CHANGE_TIME);
902:       assertEquals(8, Node.FLAG_NO_THROWS);
903:       assertEquals(36, Node.QUOTED_PROP);
904:       
905:       boolean boolean1 = node1.isCast();
906:       assertFalse(boolean1);
907:       assertFalse(node1.hasMoreThanOneChild());
908:       assertFalse(node1.isContinue());
909:       assertFalse(node1.isWhile());
910:       assertFalse(node1.isDo());
911:       assertFalse(node1.isAdd());
912:       assertFalse(node1.isNumber());
913:       assertFalse(node1.isOr());
914:       assertFalse(node1.isGetElem());
915:       assertFalse(node1.isName());
916:       assertFalse(node1.isCall());
917:       assertFalse(node1.hasOneChild());
918:       assertEquals(15, node1.getLineno());
919:       assertFalse(node1.isBlock());
920:       assertFalse(node1.isExprResult());
921:       assertFalse(node1.hasChildren());
922:       assertFalse(node1.isDec());
923:       assertFalse(node1.isTypeOf());
924:       assertFalse(node1.isReturn());
925:       assertFalse(node1.isAssign());
926:       assertFalse(node1.isDefaultCase());
927:       assertFalse(node1.isScript());
928:       assertFalse(node1.isTrue());
929:       assertFalse(node1.isVoid());
930:       assertFalse(node1.isParamList());
931:       assertFalse(node1.isNull());
932:       assertFalse(node1.isStringKey());
933:       assertFalse(node1.isEmpty());
934:       assertFalse(node1.isLabelName());
935:       assertFalse(node1.isArrayLit());
936:       assertFalse(node1.isNew());
937:       assertFalse(node1.isAssignAdd());
938:       assertEquals(61489, node1.getSourcePosition());
939:       assertEquals(0, node1.getChildCount());
940:       assertFalse(node1.isVar());
941:       assertFalse(node1.isLabel());
942:       assertFalse(node1.isString());
943:       assertFalse(node1.isCase());
944:       assertFalse(node1.isInc());
945:       assertFalse(node1.isSwitch());
946:       assertFalse(node1.isNE());
947:       assertFalse(node1.isIn());
948:       assertFalse(node1.isGetterDef());
949:       assertFalse(node1.isFor());
950:       assertFalse(node1.isIf());
951:       assertFalse(node1.isBreak());
952:       assertFalse(node1.isDelProp());
953:       assertFalse(node1.isTry());
954:       assertFalse(node1.isHook());
955:       assertEquals(49, node1.getCharno());
956:       assertFalse(node1.isRegExp());
957:       assertFalse(node1.isThis());
958:       assertFalse(node1.isComma());
959:       assertFalse(node1.isObjectLit());
960:       assertFalse(node1.isCatch());
961:       assertFalse(node1.isWith());
962:       assertFalse(node1.isAnd());
963:       assertFalse(node1.isInstanceOf());
964:       assertFalse(node1.isGetProp());
965:       assertFalse(node1.isNot());
966:       assertFalse(node1.isDebugger());
967:       assertFalse(node1.isThrow());
968:       assertFalse(node1.isFalse());
969:       assertFalse(node1.isCast());
970:       assertFalse(node1.isSetterDef());
971:       assertEquals(1056, node1.getType());
972:       assertFalse(node1.isFunction());
973:       assertTrue(boolean1 == boolean0);
974:       assertFalse(node1.equals((Object)node0));
975:       assertEquals(4095, Node.COLUMN_MASK);
976:       assertEquals(55, Node.INFERRED_FUNCTION);
977:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
978:       assertEquals(39, Node.EMPTY_BLOCK);
979:       assertEquals(48, Node.DIRECTIVES);
980:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
981:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
982:       assertEquals(40, Node.ORIGINALNAME_PROP);
983:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
984:       assertEquals(43, Node.IS_CONSTANT_NAME);
985:       assertEquals(54, Node.SLASH_V);
986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
987:       assertEquals(50, Node.FREE_CALL);
988:       assertEquals(32, Node.INCRDECR_PROP);
989:       assertEquals(46, Node.IS_NAMESPACE);
990:       assertEquals(12, Node.COLUMN_BITS);
991:       assertEquals(37, Node.OPT_ARG_NAME);
992:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
993:       assertEquals(49, Node.DIRECT_EVAL);
994:       assertEquals(1, Node.DECR_FLAG);
995:       assertEquals(57, Node.LAST_PROP);
996:       assertEquals(47, Node.IS_DISPATCHER);
997:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
998:       assertEquals(2, Node.POST_FLAG);
999:       assertEquals(30, Node.VAR_ARGS_NAME);
1000:       assertEquals(52, Node.LENGTH);
1001:       assertEquals(57, Node.REFLECTED_OBJECT);
1002:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1003:       assertEquals(53, Node.INPUT_ID);
1004:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1005:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1006:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1007:       assertEquals(29, Node.JSDOC_INFO_PROP);
1008:       assertEquals(56, Node.CHANGE_TIME);
1009:       assertEquals(8, Node.FLAG_NO_THROWS);
1010:       assertEquals(36, Node.QUOTED_PROP);
1011:       
1012:       boolean boolean2 = node1.isDebugger();
1013:       assertFalse(boolean2);
1014:       assertFalse(node1.hasMoreThanOneChild());
1015:       assertFalse(node1.isContinue());
1016:       assertFalse(node1.isWhile());
1017:       assertFalse(node1.isDo());
1018:       assertFalse(node1.isAdd());
1019:       assertFalse(node1.isNumber());
1020:       assertFalse(node1.isOr());
1021:       assertFalse(node1.isGetElem());
1022:       assertFalse(node1.isName());
1023:       assertFalse(node1.isCall());
1024:       assertFalse(node1.hasOneChild());
1025:       assertEquals(15, node1.getLineno());
1026:       assertFalse(node1.isBlock());
1027:       assertFalse(node1.isExprResult());
1028:       assertFalse(node1.hasChildren());
1029:       assertFalse(node1.isDec());
1030:       assertFalse(node1.isTypeOf());
1031:       assertFalse(node1.isReturn());
1032:       assertFalse(node1.isAssign());
1033:       assertFalse(node1.isDefaultCase());
1034:       assertFalse(node1.isScript());
1035:       assertFalse(node1.isTrue());
1036:       assertFalse(node1.isVoid());
1037:       assertFalse(node1.isParamList());
1038:       assertFalse(node1.isNull());
1039:       assertFalse(node1.isStringKey());
1040:       assertFalse(node1.isEmpty());
1041:       assertFalse(node1.isLabelName());
1042:       assertFalse(node1.isArrayLit());
1043:       assertFalse(node1.isNew());
1044:       assertFalse(node1.isAssignAdd());
1045:       assertEquals(61489, node1.getSourcePosition());
1046:       assertEquals(0, node1.getChildCount());
1047:       assertFalse(node1.isVar());
1048:       assertFalse(node1.isLabel());
1049:       assertFalse(node1.isString());
1050:       assertFalse(node1.isCase());
1051:       assertFalse(node1.isInc());
1052:       assertFalse(node1.isSwitch());
1053:       assertFalse(node1.isNE());
1054:       assertFalse(node1.isIn());
1055:       assertFalse(node1.isGetterDef());
1056:       assertFalse(node1.isFor());
1057:       assertFalse(node1.isIf());
1058:       assertFalse(node1.isBreak());
1059:       assertFalse(node1.isDelProp());
1060:       assertFalse(node1.isTry());
1061:       assertFalse(node1.isHook());
1062:       assertEquals(49, node1.getCharno());
1063:       assertFalse(node1.isRegExp());
1064:       assertFalse(node1.isThis());
1065:       assertFalse(node1.isComma());
1066:       assertFalse(node1.isObjectLit());
1067:       assertFalse(node1.isCatch());
1068:       assertFalse(node1.isWith());
1069:       assertFalse(node1.isAnd());
1070:       assertFalse(node1.isInstanceOf());
1071:       assertFalse(node1.isGetProp());
1072:       assertFalse(node1.isNot());
1073:       assertFalse(node1.isDebugger());
1074:       assertFalse(node1.isThrow());
1075:       assertFalse(node1.isFalse());
1076:       assertFalse(node1.isCast());
1077:       assertFalse(node1.isSetterDef());
1078:       assertEquals(1056, node1.getType());
1079:       assertFalse(node1.isFunction());
1080:       assertTrue(boolean2 == boolean1);
1081:       assertTrue(boolean2 == boolean0);
1082:       assertFalse(node1.equals((Object)node0));
1083:       assertEquals(4095, Node.COLUMN_MASK);
1084:       assertEquals(55, Node.INFERRED_FUNCTION);
1085:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1086:       assertEquals(39, Node.EMPTY_BLOCK);
1087:       assertEquals(48, Node.DIRECTIVES);
1088:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1089:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1090:       assertEquals(40, Node.ORIGINALNAME_PROP);
1091:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1092:       assertEquals(43, Node.IS_CONSTANT_NAME);
1093:       assertEquals(54, Node.SLASH_V);
1094:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1095:       assertEquals(50, Node.FREE_CALL);
1096:       assertEquals(32, Node.INCRDECR_PROP);
1097:       assertEquals(46, Node.IS_NAMESPACE);
1098:       assertEquals(12, Node.COLUMN_BITS);
1099:       assertEquals(37, Node.OPT_ARG_NAME);
1100:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1101:       assertEquals(49, Node.DIRECT_EVAL);
1102:       assertEquals(1, Node.DECR_FLAG);
1103:       assertEquals(57, Node.LAST_PROP);
1104:       assertEquals(47, Node.IS_DISPATCHER);
1105:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1106:       assertEquals(2, Node.POST_FLAG);
1107:       assertEquals(30, Node.VAR_ARGS_NAME);
1108:       assertEquals(52, Node.LENGTH);
1109:       assertEquals(57, Node.REFLECTED_OBJECT);
1110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1111:       assertEquals(53, Node.INPUT_ID);
1112:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1113:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1114:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1115:       assertEquals(29, Node.JSDOC_INFO_PROP);
1116:       assertEquals(56, Node.CHANGE_TIME);
1117:       assertEquals(8, Node.FLAG_NO_THROWS);
1118:       assertEquals(36, Node.QUOTED_PROP);
1119:       
1120:       int int0 = Node.mergeLineCharNo((-2208), 38);
1121:       assertEquals((-1), int0);
1122:       
1123:       Node node2 = new Node(52, node1, node1, (-4096), 16);
1124:       assertFalse(node2.isParamList());
1125:       assertFalse(node2.isSetterDef());
1126:       assertFalse(node2.isName());
1127:       assertTrue(node2.isInstanceOf());
1128:       assertFalse(node2.isStringKey());
1129:       assertFalse(node2.isNull());
1130:       assertEquals(52, node2.getType());
1131:       assertFalse(node2.isDebugger());
1132:       assertFalse(node2.isTry());
1133:       assertFalse(node2.isBlock());
1134:       assertFalse(node2.isTrue());
1135:       assertFalse(node2.isVoid());
1136:       assertFalse(node2.isFor());
1137:       assertTrue(node2.hasOneChild());
1138:       assertFalse(node2.isCall());
1139:       assertFalse(node2.isCatch());
1140:       assertFalse(node2.isWhile());
1141:       assertFalse(node2.isRegExp());
1142:       assertFalse(node2.hasMoreThanOneChild());
1143:       assertFalse(node2.isAssignAdd());
1144:       assertFalse(node2.isLabel());
1145:       assertFalse(node2.isOr());
1146:       assertFalse(node2.isDelProp());
1147:       assertFalse(node2.isEmpty());
1148:       assertFalse(node2.isCase());
1149:       assertFalse(node2.isLabelName());
1150:       assertFalse(node2.isNumber());
1151:       assertFalse(node2.isGetterDef());
1152:       assertEquals((-1), node2.getCharno());
1153:       assertFalse(node2.isAdd());
1154:       assertFalse(node2.isArrayLit());
1155:       assertFalse(node2.isDefaultCase());
1156:       assertFalse(node2.isSwitch());
1157:       assertFalse(node2.isNew());
1158:       assertFalse(node2.isDo());
1159:       assertFalse(node2.isVar());
1160:       assertFalse(node2.isGetProp());
1161:       assertFalse(node2.isBreak());
1162:       assertFalse(node2.isNot());
1163:       assertFalse(node2.isAnd());
1164:       assertFalse(node2.isObjectLit());
1165:       assertFalse(node2.isExprResult());
1166:       assertFalse(node2.isScript());
1167:       assertFalse(node2.isAssign());
1168:       assertFalse(node2.isWith());
1169:       assertFalse(node2.isGetElem());
1170:       assertFalse(node2.isTypeOf());
1171:       assertFalse(node2.isThis());
1172:       assertFalse(node2.isHook());
1173:       assertEquals(1, node2.getChildCount());
1174:       assertFalse(node2.isComma());
1175:       assertFalse(node2.isDec());
1176:       assertTrue(node2.hasChildren());
1177:       assertFalse(node2.isReturn());
1178:       assertFalse(node2.isIn());
1179:       assertEquals((-1), node2.getLineno());
1180:       assertFalse(node2.isIf());
1181:       assertFalse(node2.isString());
1182:       assertFalse(node2.isNE());
1183:       assertEquals((-1), node2.getSourcePosition());
1184:       assertFalse(node2.isInc());
1185:       assertFalse(node2.isFalse());
1186:       assertFalse(node2.isContinue());
1187:       assertFalse(node2.isCast());
1188:       assertFalse(node2.isThrow());
1189:       assertFalse(node2.isFunction());
1190:       assertFalse(node1.hasMoreThanOneChild());
1191:       assertFalse(node1.isContinue());
1192:       assertFalse(node1.isWhile());
1193:       assertFalse(node1.isDo());
1194:       assertFalse(node1.isAdd());
1195:       assertFalse(node1.isNumber());
1196:       assertFalse(node1.isOr());
1197:       assertFalse(node1.isGetElem());
1198:       assertFalse(node1.isName());
1199:       assertFalse(node1.isCall());
1200:       assertFalse(node1.hasOneChild());
1201:       assertEquals(15, node1.getLineno());
1202:       assertFalse(node1.isBlock());
1203:       assertFalse(node1.isExprResult());
1204:       assertFalse(node1.hasChildren());
1205:       assertFalse(node1.isDec());
1206:       assertFalse(node1.isTypeOf());
1207:       assertFalse(node1.isReturn());
1208:       assertFalse(node1.isAssign());
1209:       assertFalse(node1.isDefaultCase());
1210:       assertFalse(node1.isScript());
1211:       assertFalse(node1.isTrue());
1212:       assertFalse(node1.isVoid());
1213:       assertFalse(node1.isParamList());
1214:       assertFalse(node1.isNull());
1215:       assertFalse(node1.isStringKey());
1216:       assertFalse(node1.isEmpty());
1217:       assertFalse(node1.isLabelName());
1218:       assertFalse(node1.isArrayLit());
1219:       assertFalse(node1.isNew());
1220:       assertFalse(node1.isAssignAdd());
1221:       assertEquals(61489, node1.getSourcePosition());
1222:       assertEquals(0, node1.getChildCount());
1223:       assertFalse(node1.isVar());
1224:       assertFalse(node1.isLabel());
1225:       assertFalse(node1.isString());
1226:       assertFalse(node1.isCase());
1227:       assertFalse(node1.isInc());
1228:       assertFalse(node1.isSwitch());
1229:       assertFalse(node1.isNE());
1230:       assertFalse(node1.isIn());
1231:       assertFalse(node1.isGetterDef());
1232:       assertFalse(node1.isFor());
1233:       assertFalse(node1.isIf());
1234:       assertFalse(node1.isBreak());
1235:       assertFalse(node1.isDelProp());
1236:       assertFalse(node1.isTry());
1237:       assertFalse(node1.isHook());
1238:       assertEquals(49, node1.getCharno());
1239:       assertFalse(node1.isRegExp());
1240:       assertFalse(node1.isThis());
1241:       assertFalse(node1.isComma());
1242:       assertFalse(node1.isObjectLit());
1243:       assertFalse(node1.isCatch());
1244:       assertFalse(node1.isWith());
1245:       assertFalse(node1.isAnd());
1246:       assertFalse(node1.isInstanceOf());
1247:       assertFalse(node1.isGetProp());
1248:       assertFalse(node1.isNot());
1249:       assertFalse(node1.isDebugger());
1250:       assertFalse(node1.isThrow());
1251:       assertFalse(node1.isFalse());
1252:       assertFalse(node1.isCast());
1253:       assertFalse(node1.isSetterDef());
1254:       assertEquals(1056, node1.getType());
1255:       assertFalse(node1.isFunction());
1256:       assertNotNull(node2);
1257:       assertFalse(node2.equals((Object)node1));
1258:       assertFalse(node2.equals((Object)node0));
1259:       assertFalse(node1.equals((Object)node0));
1260:       assertEquals(56, Node.CHANGE_TIME);
1261:       assertEquals(47, Node.IS_DISPATCHER);
1262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1263:       assertEquals(29, Node.JSDOC_INFO_PROP);
1264:       assertEquals(37, Node.OPT_ARG_NAME);
1265:       assertEquals(32, Node.INCRDECR_PROP);
1266:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1267:       assertEquals(12, Node.COLUMN_BITS);
1268:       assertEquals(2, Node.POST_FLAG);
1269:       assertEquals(30, Node.VAR_ARGS_NAME);
1270:       assertEquals(43, Node.IS_CONSTANT_NAME);
1271:       assertEquals(54, Node.SLASH_V);
1272:       assertEquals(1, Node.DECR_FLAG);
1273:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1274:       assertEquals(46, Node.IS_NAMESPACE);
1275:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1276:       assertEquals(50, Node.FREE_CALL);
1277:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1278:       assertEquals(39, Node.EMPTY_BLOCK);
1279:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1280:       assertEquals(48, Node.DIRECTIVES);
1281:       assertEquals(4095, Node.COLUMN_MASK);
1282:       assertEquals(40, Node.ORIGINALNAME_PROP);
1283:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1284:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1285:       assertEquals(36, Node.QUOTED_PROP);
1286:       assertEquals(57, Node.LAST_PROP);
1287:       assertEquals(53, Node.INPUT_ID);
1288:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1289:       assertEquals(49, Node.DIRECT_EVAL);
1290:       assertEquals(57, Node.REFLECTED_OBJECT);
1291:       assertEquals(55, Node.INFERRED_FUNCTION);
1292:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1293:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1294:       assertEquals(52, Node.LENGTH);
1295:       assertEquals(8, Node.FLAG_NO_THROWS);
1296:       assertEquals(4095, Node.COLUMN_MASK);
1297:       assertEquals(55, Node.INFERRED_FUNCTION);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(39, Node.EMPTY_BLOCK);
1300:       assertEquals(48, Node.DIRECTIVES);
1301:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1303:       assertEquals(40, Node.ORIGINALNAME_PROP);
1304:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1305:       assertEquals(43, Node.IS_CONSTANT_NAME);
1306:       assertEquals(54, Node.SLASH_V);
1307:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1308:       assertEquals(50, Node.FREE_CALL);
1309:       assertEquals(32, Node.INCRDECR_PROP);
1310:       assertEquals(46, Node.IS_NAMESPACE);
1311:       assertEquals(12, Node.COLUMN_BITS);
1312:       assertEquals(37, Node.OPT_ARG_NAME);
1313:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1314:       assertEquals(49, Node.DIRECT_EVAL);
1315:       assertEquals(1, Node.DECR_FLAG);
1316:       assertEquals(57, Node.LAST_PROP);
1317:       assertEquals(47, Node.IS_DISPATCHER);
1318:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1319:       assertEquals(2, Node.POST_FLAG);
1320:       assertEquals(30, Node.VAR_ARGS_NAME);
1321:       assertEquals(52, Node.LENGTH);
1322:       assertEquals(57, Node.REFLECTED_OBJECT);
1323:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1324:       assertEquals(53, Node.INPUT_ID);
1325:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1327:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1328:       assertEquals(29, Node.JSDOC_INFO_PROP);
1329:       assertEquals(56, Node.CHANGE_TIME);
1330:       assertEquals(8, Node.FLAG_NO_THROWS);
1331:       assertEquals(36, Node.QUOTED_PROP);
1332:       
1333:       boolean boolean3 = node2.isAnd();
1334:       assertFalse(boolean3);
1335:       assertFalse(node2.isParamList());
1336:       assertFalse(node2.isSetterDef());
1337:       assertFalse(node2.isName());
1338:       assertTrue(node2.isInstanceOf());
1339:       assertFalse(node2.isStringKey());
1340:       assertFalse(node2.isNull());
1341:       assertEquals(52, node2.getType());
1342:       assertFalse(node2.isDebugger());
1343:       assertFalse(node2.isTry());
1344:       assertFalse(node2.isBlock());
1345:       assertFalse(node2.isTrue());
1346:       assertFalse(node2.isVoid());
1347:       assertFalse(node2.isFor());
1348:       assertTrue(node2.hasOneChild());
1349:       assertFalse(node2.isCall());
1350:       assertFalse(node2.isCatch());
1351:       assertFalse(node2.isWhile());
1352:       assertFalse(node2.isRegExp());
1353:       assertFalse(node2.hasMoreThanOneChild());
1354:       assertFalse(node2.isAssignAdd());
1355:       assertFalse(node2.isLabel());
1356:       assertFalse(node2.isOr());
1357:       assertFalse(node2.isDelProp());
1358:       assertFalse(node2.isEmpty());
1359:       assertFalse(node2.isCase());
1360:       assertFalse(node2.isLabelName());
1361:       assertFalse(node2.isNumber());
1362:       assertFalse(node2.isGetterDef());
1363:       assertEquals((-1), node2.getCharno());
1364:       assertFalse(node2.isAdd());
1365:       assertFalse(node2.isArrayLit());
1366:       assertFalse(node2.isDefaultCase());
1367:       assertFalse(node2.isSwitch());
1368:       assertFalse(node2.isNew());
1369:       assertFalse(node2.isDo());
1370:       assertFalse(node2.isVar());
1371:       assertFalse(node2.isGetProp());
1372:       assertFalse(node2.isBreak());
1373:       assertFalse(node2.isNot());
1374:       assertFalse(node2.isAnd());
1375:       assertFalse(node2.isObjectLit());
1376:       assertFalse(node2.isExprResult());
1377:       assertFalse(node2.isScript());
1378:       assertFalse(node2.isAssign());
1379:       assertFalse(node2.isWith());
1380:       assertFalse(node2.isGetElem());
1381:       assertFalse(node2.isTypeOf());
1382:       assertFalse(node2.isThis());
1383:       assertFalse(node2.isHook());
1384:       assertEquals(1, node2.getChildCount());
1385:       assertFalse(node2.isComma());
1386:       assertFalse(node2.isDec());
1387:       assertTrue(node2.hasChildren());
1388:       assertFalse(node2.isReturn());
1389:       assertFalse(node2.isIn());
1390:       assertEquals((-1), node2.getLineno());
1391:       assertFalse(node2.isIf());
1392:       assertFalse(node2.isString());
1393:       assertFalse(node2.isNE());
1394:       assertEquals((-1), node2.getSourcePosition());
1395:       assertFalse(node2.isInc());
1396:       assertFalse(node2.isFalse());
1397:       assertFalse(node2.isContinue());
1398:       assertFalse(node2.isCast());
1399:       assertFalse(node2.isThrow());
1400:       assertFalse(node2.isFunction());
1401:       assertFalse(node1.hasMoreThanOneChild());
1402:       assertFalse(node1.isContinue());
1403:       assertFalse(node1.isWhile());
1404:       assertFalse(node1.isDo());
1405:       assertFalse(node1.isAdd());
1406:       assertFalse(node1.isNumber());
1407:       assertFalse(node1.isOr());
1408:       assertFalse(node1.isGetElem());
1409:       assertFalse(node1.isName());
1410:       assertFalse(node1.isCall());
1411:       assertFalse(node1.hasOneChild());
1412:       assertEquals(15, node1.getLineno());
1413:       assertFalse(node1.isBlock());
1414:       assertFalse(node1.isExprResult());
1415:       assertFalse(node1.hasChildren());
1416:       assertFalse(node1.isDec());
1417:       assertFalse(node1.isTypeOf());
1418:       assertFalse(node1.isReturn());
1419:       assertFalse(node1.isAssign());
1420:       assertFalse(node1.isDefaultCase());
1421:       assertFalse(node1.isScript());
1422:       assertFalse(node1.isTrue());
1423:       assertFalse(node1.isVoid());
1424:       assertFalse(node1.isParamList());
1425:       assertFalse(node1.isNull());
1426:       assertFalse(node1.isStringKey());
1427:       assertFalse(node1.isEmpty());
1428:       assertFalse(node1.isLabelName());
1429:       assertFalse(node1.isArrayLit());
1430:       assertFalse(node1.isNew());
1431:       assertFalse(node1.isAssignAdd());
1432:       assertEquals(61489, node1.getSourcePosition());
1433:       assertEquals(0, node1.getChildCount());
1434:       assertFalse(node1.isVar());
1435:       assertFalse(node1.isLabel());
1436:       assertFalse(node1.isString());
1437:       assertFalse(node1.isCase());
1438:       assertFalse(node1.isInc());
1439:       assertFalse(node1.isSwitch());
1440:       assertFalse(node1.isNE());
1441:       assertFalse(node1.isIn());
1442:       assertFalse(node1.isGetterDef());
1443:       assertFalse(node1.isFor());
1444:       assertFalse(node1.isIf());
1445:       assertFalse(node1.isBreak());
1446:       assertFalse(node1.isDelProp());
1447:       assertFalse(node1.isTry());
1448:       assertFalse(node1.isHook());
1449:       assertEquals(49, node1.getCharno());
1450:       assertFalse(node1.isRegExp());
1451:       assertFalse(node1.isThis());
1452:       assertFalse(node1.isComma());
1453:       assertFalse(node1.isObjectLit());
1454:       assertFalse(node1.isCatch());
1455:       assertFalse(node1.isWith());
1456:       assertFalse(node1.isAnd());
1457:       assertFalse(node1.isInstanceOf());
1458:       assertFalse(node1.isGetProp());
1459:       assertFalse(node1.isNot());
1460:       assertFalse(node1.isDebugger());
1461:       assertFalse(node1.isThrow());
1462:       assertFalse(node1.isFalse());
1463:       assertFalse(node1.isCast());
1464:       assertFalse(node1.isSetterDef());
1465:       assertEquals(1056, node1.getType());
1466:       assertFalse(node1.isFunction());
1467:       assertNotSame(node2, node0);
1468:       assertFalse(node2.equals((Object)node1));
1469:       assertFalse(node2.equals((Object)node0));
1470:       assertTrue(boolean3 == boolean1);
1471:       assertTrue(boolean3 == boolean0);
1472:       assertTrue(boolean3 == boolean2);
1473:       assertFalse(node1.equals((Object)node2));
1474:       assertFalse(node1.equals((Object)node0));
1475:       assertEquals(56, Node.CHANGE_TIME);
1476:       assertEquals(47, Node.IS_DISPATCHER);
1477:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1478:       assertEquals(29, Node.JSDOC_INFO_PROP);
1479:       assertEquals(37, Node.OPT_ARG_NAME);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1482:       assertEquals(12, Node.COLUMN_BITS);
1483:       assertEquals(2, Node.POST_FLAG);
1484:       assertEquals(30, Node.VAR_ARGS_NAME);
1485:       assertEquals(43, Node.IS_CONSTANT_NAME);
1486:       assertEquals(54, Node.SLASH_V);
1487:       assertEquals(1, Node.DECR_FLAG);
1488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1489:       assertEquals(46, Node.IS_NAMESPACE);
1490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1491:       assertEquals(50, Node.FREE_CALL);
1492:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1493:       assertEquals(39, Node.EMPTY_BLOCK);
1494:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1495:       assertEquals(48, Node.DIRECTIVES);
1496:       assertEquals(4095, Node.COLUMN_MASK);
1497:       assertEquals(40, Node.ORIGINALNAME_PROP);
1498:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1500:       assertEquals(36, Node.QUOTED_PROP);
1501:       assertEquals(57, Node.LAST_PROP);
1502:       assertEquals(53, Node.INPUT_ID);
1503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1504:       assertEquals(49, Node.DIRECT_EVAL);
1505:       assertEquals(57, Node.REFLECTED_OBJECT);
1506:       assertEquals(55, Node.INFERRED_FUNCTION);
1507:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1509:       assertEquals(52, Node.LENGTH);
1510:       assertEquals(8, Node.FLAG_NO_THROWS);
1511:       assertEquals(4095, Node.COLUMN_MASK);
1512:       assertEquals(55, Node.INFERRED_FUNCTION);
1513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1514:       assertEquals(39, Node.EMPTY_BLOCK);
1515:       assertEquals(48, Node.DIRECTIVES);
1516:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1518:       assertEquals(40, Node.ORIGINALNAME_PROP);
1519:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1520:       assertEquals(43, Node.IS_CONSTANT_NAME);
1521:       assertEquals(54, Node.SLASH_V);
1522:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1523:       assertEquals(50, Node.FREE_CALL);
1524:       assertEquals(32, Node.INCRDECR_PROP);
1525:       assertEquals(46, Node.IS_NAMESPACE);
1526:       assertEquals(12, Node.COLUMN_BITS);
1527:       assertEquals(37, Node.OPT_ARG_NAME);
1528:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1529:       assertEquals(49, Node.DIRECT_EVAL);
1530:       assertEquals(1, Node.DECR_FLAG);
1531:       assertEquals(57, Node.LAST_PROP);
1532:       assertEquals(47, Node.IS_DISPATCHER);
1533:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1534:       assertEquals(2, Node.POST_FLAG);
1535:       assertEquals(30, Node.VAR_ARGS_NAME);
1536:       assertEquals(52, Node.LENGTH);
1537:       assertEquals(57, Node.REFLECTED_OBJECT);
1538:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1539:       assertEquals(53, Node.INPUT_ID);
1540:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1542:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1543:       assertEquals(29, Node.JSDOC_INFO_PROP);
1544:       assertEquals(56, Node.CHANGE_TIME);
1545:       assertEquals(8, Node.FLAG_NO_THROWS);
1546:       assertEquals(36, Node.QUOTED_PROP);
1547:       
1548:       int int1 = node2.getType();
1549:       assertEquals(52, int1);
1550:       assertFalse(node2.isParamList());
1551:       assertFalse(node2.isSetterDef());
1552:       assertFalse(node2.isName());
1553:       assertTrue(node2.isInstanceOf());
1554:       assertFalse(node2.isStringKey());
1555:       assertFalse(node2.isNull());
1556:       assertEquals(52, node2.getType());
1557:       assertFalse(node2.isDebugger());
1558:       assertFalse(node2.isTry());
1559:       assertFalse(node2.isBlock());
1560:       assertFalse(node2.isTrue());
1561:       assertFalse(node2.isVoid());
1562:       assertFalse(node2.isFor());
1563:       assertTrue(node2.hasOneChild());
1564:       assertFalse(node2.isCall());
1565:       assertFalse(node2.isCatch());
1566:       assertFalse(node2.isWhile());
1567:       assertFalse(node2.isRegExp());
1568:       assertFalse(node2.hasMoreThanOneChild());
1569:       assertFalse(node2.isAssignAdd());
1570:       assertFalse(node2.isLabel());
1571:       assertFalse(node2.isOr());
1572:       assertFalse(node2.isDelProp());
1573:       assertFalse(node2.isEmpty());
1574:       assertFalse(node2.isCase());
1575:       assertFalse(node2.isLabelName());
1576:       assertFalse(node2.isNumber());
1577:       assertFalse(node2.isGetterDef());
1578:       assertEquals((-1), node2.getCharno());
1579:       assertFalse(node2.isAdd());
1580:       assertFalse(node2.isArrayLit());
1581:       assertFalse(node2.isDefaultCase());
1582:       assertFalse(node2.isSwitch());
1583:       assertFalse(node2.isNew());
1584:       assertFalse(node2.isDo());
1585:       assertFalse(node2.isVar());
1586:       assertFalse(node2.isGetProp());
1587:       assertFalse(node2.isBreak());
1588:       assertFalse(node2.isNot());
1589:       assertFalse(node2.isAnd());
1590:       assertFalse(node2.isObjectLit());
1591:       assertFalse(node2.isExprResult());
1592:       assertFalse(node2.isScript());
1593:       assertFalse(node2.isAssign());
1594:       assertFalse(node2.isWith());
1595:       assertFalse(node2.isGetElem());
1596:       assertFalse(node2.isTypeOf());
1597:       assertFalse(node2.isThis());
1598:       assertFalse(node2.isHook());
1599:       assertEquals(1, node2.getChildCount());
1600:       assertFalse(node2.isComma());
1601:       assertFalse(node2.isDec());
1602:       assertTrue(node2.hasChildren());
1603:       assertFalse(node2.isReturn());
1604:       assertFalse(node2.isIn());
1605:       assertEquals((-1), node2.getLineno());
1606:       assertFalse(node2.isIf());
1607:       assertFalse(node2.isString());
1608:       assertFalse(node2.isNE());
1609:       assertEquals((-1), node2.getSourcePosition());
1610:       assertFalse(node2.isInc());
1611:       assertFalse(node2.isFalse());
1612:       assertFalse(node2.isContinue());
1613:       assertFalse(node2.isCast());
1614:       assertFalse(node2.isThrow());
1615:       assertFalse(node2.isFunction());
1616:       assertFalse(node1.hasMoreThanOneChild());
1617:       assertFalse(node1.isContinue());
1618:       assertFalse(node1.isWhile());
1619:       assertFalse(node1.isDo());
1620:       assertFalse(node1.isAdd());
1621:       assertFalse(node1.isNumber());
1622:       assertFalse(node1.isOr());
1623:       assertFalse(node1.isGetElem());
1624:       assertFalse(node1.isName());
1625:       assertFalse(node1.isCall());
1626:       assertFalse(node1.hasOneChild());
1627:       assertEquals(15, node1.getLineno());
1628:       assertFalse(node1.isBlock());
1629:       assertFalse(node1.isExprResult());
1630:       assertFalse(node1.hasChildren());
1631:       assertFalse(node1.isDec());
1632:       assertFalse(node1.isTypeOf());
1633:       assertFalse(node1.isReturn());
1634:       assertFalse(node1.isAssign());
1635:       assertFalse(node1.isDefaultCase());
1636:       assertFalse(node1.isScript());
1637:       assertFalse(node1.isTrue());
1638:       assertFalse(node1.isVoid());
1639:       assertFalse(node1.isParamList());
1640:       assertFalse(node1.isNull());
1641:       assertFalse(node1.isStringKey());
1642:       assertFalse(node1.isEmpty());
1643:       assertFalse(node1.isLabelName());
1644:       assertFalse(node1.isArrayLit());
1645:       assertFalse(node1.isNew());
1646:       assertFalse(node1.isAssignAdd());
1647:       assertEquals(61489, node1.getSourcePosition());
1648:       assertEquals(0, node1.getChildCount());
1649:       assertFalse(node1.isVar());
1650:       assertFalse(node1.isLabel());
1651:       assertFalse(node1.isString());
1652:       assertFalse(node1.isCase());
1653:       assertFalse(node1.isInc());
1654:       assertFalse(node1.isSwitch());
1655:       assertFalse(node1.isNE());
1656:       assertFalse(node1.isIn());
1657:       assertFalse(node1.isGetterDef());
1658:       assertFalse(node1.isFor());
1659:       assertFalse(node1.isIf());
1660:       assertFalse(node1.isBreak());
1661:       assertFalse(node1.isDelProp());
1662:       assertFalse(node1.isTry());
1663:       assertFalse(node1.isHook());
1664:       assertEquals(49, node1.getCharno());
1665:       assertFalse(node1.isRegExp());
1666:       assertFalse(node1.isThis());
1667:       assertFalse(node1.isComma());
1668:       assertFalse(node1.isObjectLit());
1669:       assertFalse(node1.isCatch());
1670:       assertFalse(node1.isWith());
1671:       assertFalse(node1.isAnd());
1672:       assertFalse(node1.isInstanceOf());
1673:       assertFalse(node1.isGetProp());
1674:       assertFalse(node1.isNot());
1675:       assertFalse(node1.isDebugger());
1676:       assertFalse(node1.isThrow());
1677:       assertFalse(node1.isFalse());
1678:       assertFalse(node1.isCast());
1679:       assertFalse(node1.isSetterDef());
1680:       assertEquals(1056, node1.getType());
1681:       assertFalse(node1.isFunction());
1682:       assertNotSame(node2, node0);
1683:       assertFalse(node2.equals((Object)node1));
1684:       assertFalse(node2.equals((Object)node0));
1685:       assertFalse(int1 == int0);
1686:       assertFalse(node1.equals((Object)node2));
1687:       assertFalse(node1.equals((Object)node0));
1688:       assertEquals(56, Node.CHANGE_TIME);
1689:       assertEquals(47, Node.IS_DISPATCHER);
1690:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1691:       assertEquals(29, Node.JSDOC_INFO_PROP);
1692:       assertEquals(37, Node.OPT_ARG_NAME);
1693:       assertEquals(32, Node.INCRDECR_PROP);
1694:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1695:       assertEquals(12, Node.COLUMN_BITS);
1696:       assertEquals(2, Node.POST_FLAG);
1697:       assertEquals(30, Node.VAR_ARGS_NAME);
1698:       assertEquals(43, Node.IS_CONSTANT_NAME);
1699:       assertEquals(54, Node.SLASH_V);
1700:       assertEquals(1, Node.DECR_FLAG);
1701:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1702:       assertEquals(46, Node.IS_NAMESPACE);
1703:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1704:       assertEquals(50, Node.FREE_CALL);
1705:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1706:       assertEquals(39, Node.EMPTY_BLOCK);
1707:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1708:       assertEquals(48, Node.DIRECTIVES);
1709:       assertEquals(4095, Node.COLUMN_MASK);
1710:       assertEquals(40, Node.ORIGINALNAME_PROP);
1711:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1712:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1713:       assertEquals(36, Node.QUOTED_PROP);
1714:       assertEquals(57, Node.LAST_PROP);
1715:       assertEquals(53, Node.INPUT_ID);
1716:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1717:       assertEquals(49, Node.DIRECT_EVAL);
1718:       assertEquals(57, Node.REFLECTED_OBJECT);
1719:       assertEquals(55, Node.INFERRED_FUNCTION);
1720:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1721:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1722:       assertEquals(52, Node.LENGTH);
1723:       assertEquals(8, Node.FLAG_NO_THROWS);
1724:       assertEquals(4095, Node.COLUMN_MASK);
1725:       assertEquals(55, Node.INFERRED_FUNCTION);
1726:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1727:       assertEquals(39, Node.EMPTY_BLOCK);
1728:       assertEquals(48, Node.DIRECTIVES);
1729:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1730:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1731:       assertEquals(40, Node.ORIGINALNAME_PROP);
1732:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1733:       assertEquals(43, Node.IS_CONSTANT_NAME);
1734:       assertEquals(54, Node.SLASH_V);
1735:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1736:       assertEquals(50, Node.FREE_CALL);
1737:       assertEquals(32, Node.INCRDECR_PROP);
1738:       assertEquals(46, Node.IS_NAMESPACE);
1739:       assertEquals(12, Node.COLUMN_BITS);
1740:       assertEquals(37, Node.OPT_ARG_NAME);
1741:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1742:       assertEquals(49, Node.DIRECT_EVAL);
1743:       assertEquals(1, Node.DECR_FLAG);
1744:       assertEquals(57, Node.LAST_PROP);
1745:       assertEquals(47, Node.IS_DISPATCHER);
1746:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1747:       assertEquals(2, Node.POST_FLAG);
1748:       assertEquals(30, Node.VAR_ARGS_NAME);
1749:       assertEquals(52, Node.LENGTH);
1750:       assertEquals(57, Node.REFLECTED_OBJECT);
1751:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1752:       assertEquals(53, Node.INPUT_ID);
1753:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1754:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1755:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1756:       assertEquals(29, Node.JSDOC_INFO_PROP);
1757:       assertEquals(56, Node.CHANGE_TIME);
1758:       assertEquals(8, Node.FLAG_NO_THROWS);
1759:       assertEquals(36, Node.QUOTED_PROP);
1760:       
1761:       Node node3 = Node.newString(38, "Object#Element", 44, 8);
1762:       assertFalse(node3.isCase());
1763:       assertFalse(node3.isSwitch());
1764:       assertFalse(node3.isHook());
1765:       assertFalse(node3.isFalse());
1766:       assertFalse(node3.isEmpty());
1767:       assertFalse(node3.isDelProp());
1768:       assertFalse(node3.isBreak());
1769:       assertFalse(node3.isNE());
1770:       assertFalse(node3.isIf());
1771:       assertFalse(node3.isThrow());
1772:       assertEquals(180232, node3.getSourcePosition());
1773:       assertTrue(node3.isName());
1774:       assertFalse(node3.isInc());
1775:       assertFalse(node3.isIn());
1776:       assertFalse(node3.isNot());
1777:       assertFalse(node3.isTrue());
1778:       assertFalse(node3.isAnd());
1779:       assertFalse(node3.isVoid());
1780:       assertFalse(node3.isCast());
1781:       assertFalse(node3.isComma());
1782:       assertFalse(node3.isFunction());
1783:       assertFalse(node3.isExprResult());
1784:       assertFalse(node3.isAssign());
1785:       assertFalse(node3.hasChildren());
1786:       assertFalse(node3.isDec());
1787:       assertFalse(node3.isGetProp());
1788:       assertFalse(node3.isDebugger());
1789:       assertFalse(node3.isObjectLit());
1790:       assertFalse(node3.isString());
1791:       assertFalse(node3.isDo());
1792:       assertFalse(node3.isWhile());
1793:       assertFalse(node3.isBlock());
1794:       assertFalse(node3.isReturn());
1795:       assertFalse(node3.isLabel());
1796:       assertFalse(node3.hasMoreThanOneChild());
1797:       assertFalse(node3.isCall());
1798:       assertFalse(node3.isTypeOf());
1799:       assertFalse(node3.isContinue());
1800:       assertFalse(node3.isGetElem());
1801:       assertFalse(node3.isVar());
1802:       assertFalse(node3.isNull());
1803:       assertFalse(node3.isAssignAdd());
1804:       assertFalse(node3.isOr());
1805:       assertFalse(node3.isAdd());
1806:       assertFalse(node3.isNew());
1807:       assertFalse(node3.isSetterDef());
1808:       assertFalse(node3.isWith());
1809:       assertEquals(38, node3.getType());
1810:       assertFalse(node3.isDefaultCase());
1811:       assertEquals(0, node3.getChildCount());
1812:       assertFalse(node3.isArrayLit());
1813:       assertEquals(8, node3.getCharno());
1814:       assertFalse(node3.isCatch());
1815:       assertFalse(node3.isRegExp());
1816:       assertFalse(node3.isInstanceOf());
1817:       assertFalse(node3.isLabelName());
1818:       assertFalse(node3.isGetterDef());
1819:       assertFalse(node3.isFor());
1820:       assertFalse(node3.isThis());
1821:       assertEquals(44, node3.getLineno());
1822:       assertFalse(node3.isStringKey());
1823:       assertFalse(node3.isParamList());
1824:       assertFalse(node3.isTry());
1825:       assertFalse(node3.hasOneChild());
1826:       assertFalse(node3.isScript());
1827:       assertFalse(node3.isNumber());
1828:       assertNotNull(node3);
1829:       assertNotSame(node3, node1);
1830:       assertFalse(node3.equals((Object)node0));
1831:       assertFalse(node3.equals((Object)node1));
1832:       assertFalse(node3.equals((Object)node2));
1833:       assertEquals(4095, Node.COLUMN_MASK);
1834:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1835:       assertEquals(36, Node.QUOTED_PROP);
1836:       assertEquals(8, Node.FLAG_NO_THROWS);
1837:       assertEquals(39, Node.EMPTY_BLOCK);
1838:       assertEquals(50, Node.FREE_CALL);
1839:       assertEquals(53, Node.INPUT_ID);
1840:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1841:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1842:       assertEquals(55, Node.INFERRED_FUNCTION);
1843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1844:       assertEquals(57, Node.REFLECTED_OBJECT);
1845:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1846:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1847:       assertEquals(56, Node.CHANGE_TIME);
1848:       assertEquals(37, Node.OPT_ARG_NAME);
1849:       assertEquals(48, Node.DIRECTIVES);
1850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1852:       assertEquals(12, Node.COLUMN_BITS);
1853:       assertEquals(32, Node.INCRDECR_PROP);
1854:       assertEquals(1, Node.DECR_FLAG);
1855:       assertEquals(49, Node.DIRECT_EVAL);
1856:       assertEquals(46, Node.IS_NAMESPACE);
1857:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1858:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1859:       assertEquals(57, Node.LAST_PROP);
1860:       assertEquals(29, Node.JSDOC_INFO_PROP);
1861:       assertEquals(52, Node.LENGTH);
1862:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1863:       assertEquals(54, Node.SLASH_V);
1864:       assertEquals(43, Node.IS_CONSTANT_NAME);
1865:       assertEquals(47, Node.IS_DISPATCHER);
1866:       assertEquals(2, Node.POST_FLAG);
1867:       assertEquals(30, Node.VAR_ARGS_NAME);
1868:       assertEquals(40, Node.ORIGINALNAME_PROP);
1869:       
1870:       // Undeclared exception!
1871:       try { 
1872:         node0.removeChildAfter(node3);
1873:         fail("Expecting exception: IllegalArgumentException");
1874:       
1875:       } catch(IllegalArgumentException e) {
1876:          //
1877:          // prev is not a child of this node.
1878:          //
1879:          verifyException("com.google.common.base.Preconditions", e);
1880:       }
1881:   }
1882: }
RegularFileObject[/tmp/EvoSuite_173_1628256057666/com/google/javascript/rhino/Node_173_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:20:57 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_173_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_173_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_173_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:20:58.064 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertNotNull(arrayList0);

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertNotNull(node0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);

byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)108;
byteArray0[1] = (byte) (-12);
byteArray0[2] = (byte) (-115);
byteArray0[3] = (byte) (-115);
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertEquals(4, byteArray0.length);
assertArrayEquals(new byte[] {(byte)108, (byte) (-12), (byte) (-115), (byte) (-115)}, byteArray0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertNotNull(iterable0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);

Node node1 = Node.newString("Object#Key", 15, 49);
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals(40, node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertEquals(40, node1.getType());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertFalse(node1.isFunction());
assertNotNull(node_NodeMismatch0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

node1.setType(1056);
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

node0.putProp(40, iterable0);
assertFalse(iterable0.contains(node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, arrayList0.size());
assertTrue(arrayList0.isEmpty());
assertEquals(83, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertTrue(node0.isParamList());
assertFalse(node0.isAnd());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isString());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isHook());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isDec());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTypeOf());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isVoid());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isTrue());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCatch());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isWhile());
assertFalse(node0.isTry());
assertFalse(node0.isNE());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isIf());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);

String string0 = node1.getSourceFileName();
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertNull(string0);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean1 = node1.isCast();
assertFalse(boolean1);
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertTrue(boolean1 == boolean0);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean2 = node1.isDebugger();
assertFalse(boolean2);
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

int int0 = Node.mergeLineCharNo((-2208), 38);
assertEquals((-1), int0);

Node node2 = new Node(52, node1, node1, (-4096), 16);
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertTrue(node2.isInstanceOf());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertEquals(52, node2.getType());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertTrue(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertNotNull(node2);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node1.equals((Object)node0));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean3 = node2.isAnd();
assertFalse(boolean3);
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertTrue(node2.isInstanceOf());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertEquals(52, node2.getType());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertTrue(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

int int1 = node2.getType();
assertEquals(52, int1);
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isName());
assertTrue(node2.isInstanceOf());
assertFalse(node2.isStringKey());
assertFalse(node2.isNull());
assertEquals(52, node2.getType());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isBlock());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isFor());
assertTrue(node2.hasOneChild());
assertFalse(node2.isCall());
assertFalse(node2.isCatch());
assertFalse(node2.isWhile());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isEmpty());
assertFalse(node2.isCase());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isAdd());
assertFalse(node2.isArrayLit());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isGetProp());
assertFalse(node2.isBreak());
assertFalse(node2.isNot());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isAssign());
assertFalse(node2.isWith());
assertFalse(node2.isGetElem());
assertFalse(node2.isTypeOf());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isComma());
assertFalse(node2.isDec());
assertTrue(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isIn());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isString());
assertFalse(node2.isNE());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isInc());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFunction());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isNumber());
assertFalse(node1.isOr());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.hasOneChild());
assertEquals(15, node1.getLineno());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertFalse(node1.hasChildren());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isParamList());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertEquals(61489, node1.getSourcePosition());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isString());
assertFalse(node1.isCase());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isIf());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(49, node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isAnd());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isSetterDef());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(int1 == int0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);

Node node3 = Node.newString(38, "Object#Element", 44, 8);
assertFalse(node3.isCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isEmpty());
assertFalse(node3.isDelProp());
assertFalse(node3.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isThrow());
assertEquals(180232, node3.getSourcePosition());
assertTrue(node3.isName());
assertFalse(node3.isInc());
assertFalse(node3.isIn());
assertFalse(node3.isNot());
assertFalse(node3.isTrue());
assertFalse(node3.isAnd());
assertFalse(node3.isVoid());
assertFalse(node3.isCast());
assertFalse(node3.isComma());
assertFalse(node3.isFunction());
assertFalse(node3.isExprResult());
assertFalse(node3.isAssign());
assertFalse(node3.hasChildren());
assertFalse(node3.isDec());
assertFalse(node3.isGetProp());
assertFalse(node3.isDebugger());
assertFalse(node3.isObjectLit());
assertFalse(node3.isString());
assertFalse(node3.isDo());
assertFalse(node3.isWhile());
assertFalse(node3.isBlock());
assertFalse(node3.isReturn());
assertFalse(node3.isLabel());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCall());
assertFalse(node3.isTypeOf());
assertFalse(node3.isContinue());
assertFalse(node3.isGetElem());
assertFalse(node3.isVar());
assertFalse(node3.isNull());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isSetterDef());
assertFalse(node3.isWith());
assertEquals(38, node3.getType());
assertFalse(node3.isDefaultCase());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isArrayLit());
assertEquals(8, node3.getCharno());
assertFalse(node3.isCatch());
assertFalse(node3.isRegExp());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetterDef());
assertFalse(node3.isFor());
assertFalse(node3.isThis());
assertEquals(44, node3.getLineno());
assertFalse(node3.isStringKey());
assertFalse(node3.isParamList());
assertFalse(node3.isTry());
assertFalse(node3.hasOneChild());
assertFalse(node3.isScript());
assertFalse(node3.isNumber());
assertNotNull(node3);
assertNotSame(node3, node1);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(50, Node.FREE_CALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);

node0.removeChildAfter(node3);

[MASTER] 13:21:03.589 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_198_1628256063280/com/google/javascript/rhino/Node_198_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_198_1628256063280/com/google/javascript/rhino/Node_198_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:03.590 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:03.590 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:03.590 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 158
[MASTER] 13:21:03.591 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_198_1628256063280/com/google/javascript/rhino/Node_198_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:03 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.ArrayList;
15: import java.util.List;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.testdata.EvoSuiteFile;
19: import org.evosuite.runtime.testdata.FileSystemHandling;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_198_tmp__ESTest extends Node_198_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
28:       assertNotNull(simpleErrorReporter0);
29:       
30:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
31:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
32:       assertNotNull(jSTypeRegistry0);
33:       
34:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
35:       assertTrue(arrayList0.isEmpty());
36:       assertEquals(0, arrayList0.size());
37:       assertNotNull(arrayList0);
38:       
39:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
40:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
41:       assertTrue(arrayList0.isEmpty());
42:       assertEquals(0, arrayList0.size());
43:       assertFalse(node0.isArrayLit());
44:       assertFalse(node0.isEmpty());
45:       assertFalse(node0.isGetterDef());
46:       assertFalse(node0.isFunction());
47:       assertFalse(node0.isRegExp());
48:       assertFalse(node0.isFor());
49:       assertFalse(node0.isTry());
50:       assertFalse(node0.isDefaultCase());
51:       assertFalse(node0.isCatch());
52:       assertFalse(node0.isIn());
53:       assertFalse(node0.isNull());
54:       assertFalse(node0.isNE());
55:       assertFalse(node0.isTrue());
56:       assertFalse(node0.isName());
57:       assertFalse(node0.isVoid());
58:       assertFalse(node0.isDelProp());
59:       assertFalse(node0.isIf());
60:       assertFalse(node0.isVar());
61:       assertFalse(node0.isHook());
62:       assertFalse(node0.isAdd());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isBlock());
65:       assertFalse(node0.isCase());
66:       assertFalse(node0.isNew());
67:       assertFalse(node0.isDo());
68:       assertEquals(0, node0.getChildCount());
69:       assertFalse(node0.isLabel());
70:       assertEquals((-1), node0.getCharno());
71:       assertFalse(node0.isStringKey());
72:       assertFalse(node0.isLabelName());
73:       assertFalse(node0.isSwitch());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isCast());
76:       assertFalse(node0.isGetElem());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isNumber());
79:       assertFalse(node0.isScript());
80:       assertFalse(node0.isTypeOf());
81:       assertFalse(node0.isDec());
82:       assertFalse(node0.hasChildren());
83:       assertFalse(node0.isAssignAdd());
84:       assertFalse(node0.isInstanceOf());
85:       assertEquals((-1), node0.getLineno());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isOr());
88:       assertEquals(83, node0.getType());
89:       assertFalse(node0.hasMoreThanOneChild());
90:       assertFalse(node0.isWith());
91:       assertFalse(node0.isExprResult());
92:       assertFalse(node0.isBreak());
93:       assertFalse(node0.isCall());
94:       assertFalse(node0.isFalse());
95:       assertFalse(node0.isInc());
96:       assertFalse(node0.isComma());
97:       assertFalse(node0.isSetterDef());
98:       assertFalse(node0.isGetProp());
99:       assertFalse(node0.isThrow());
100:       assertFalse(node0.isWhile());
101:       assertTrue(node0.isParamList());
102:       assertFalse(node0.isNot());
103:       assertFalse(node0.isObjectLit());
104:       assertFalse(node0.isContinue());
105:       assertFalse(node0.isString());
106:       assertEquals((-1), node0.getSourcePosition());
107:       assertFalse(node0.isDebugger());
108:       assertFalse(node0.isAnd());
109:       assertNotNull(node0);
110:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
111:       assertEquals(54, Node.SLASH_V);
112:       assertEquals(15, Node.NO_SIDE_EFFECTS);
113:       assertEquals(52, Node.LENGTH);
114:       assertEquals(40, Node.ORIGINALNAME_PROP);
115:       assertEquals(49, Node.DIRECT_EVAL);
116:       assertEquals(50, Node.FREE_CALL);
117:       assertEquals(51, Node.STATIC_SOURCE_FILE);
118:       assertEquals(46, Node.IS_NAMESPACE);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(48, Node.DIRECTIVES);
121:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
122:       assertEquals(37, Node.OPT_ARG_NAME);
123:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
125:       assertEquals(4095, Node.COLUMN_MASK);
126:       assertEquals(1, Node.DECR_FLAG);
127:       assertEquals(12, Node.COLUMN_BITS);
128:       assertEquals(32, Node.INCRDECR_PROP);
129:       assertEquals(53, Node.INPUT_ID);
130:       assertEquals(36, Node.QUOTED_PROP);
131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
132:       assertEquals(56, Node.CHANGE_TIME);
133:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
134:       assertEquals(43, Node.IS_CONSTANT_NAME);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(39, Node.EMPTY_BLOCK);
137:       assertEquals(55, Node.INFERRED_FUNCTION);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(29, Node.JSDOC_INFO_PROP);
141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
142:       assertEquals(30, Node.VAR_ARGS_NAME);
143:       assertEquals(57, Node.LAST_PROP);
144:       assertEquals(47, Node.IS_DISPATCHER);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       
147:       byte[] byteArray0 = new byte[4];
148:       byteArray0[0] = (byte)116;
149:       byteArray0[1] = (byte) (-12);
150:       byteArray0[2] = (byte) (-115);
151:       byteArray0[3] = (byte) (-115);
152:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
153:       assertFalse(boolean0);
154:       assertEquals(4, byteArray0.length);
155:       assertArrayEquals(new byte[] {(byte)116, (byte) (-12), (byte) (-115), (byte) (-115)}, byteArray0);
156:       
157:       Iterable<Node> iterable0 = node0.children();
158:       assertFalse(iterable0.contains(node0));
159:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
160:       assertTrue(arrayList0.isEmpty());
161:       assertEquals(0, arrayList0.size());
162:       assertFalse(node0.isArrayLit());
163:       assertFalse(node0.isEmpty());
164:       assertFalse(node0.isGetterDef());
165:       assertFalse(node0.isFunction());
166:       assertFalse(node0.isRegExp());
167:       assertFalse(node0.isFor());
168:       assertFalse(node0.isTry());
169:       assertFalse(node0.isDefaultCase());
170:       assertFalse(node0.isCatch());
171:       assertFalse(node0.isIn());
172:       assertFalse(node0.isNull());
173:       assertFalse(node0.isNE());
174:       assertFalse(node0.isTrue());
175:       assertFalse(node0.isName());
176:       assertFalse(node0.isVoid());
177:       assertFalse(node0.isDelProp());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isHook());
181:       assertFalse(node0.isAdd());
182:       assertFalse(node0.isThis());
183:       assertFalse(node0.isBlock());
184:       assertFalse(node0.isCase());
185:       assertFalse(node0.isNew());
186:       assertFalse(node0.isDo());
187:       assertEquals(0, node0.getChildCount());
188:       assertFalse(node0.isLabel());
189:       assertEquals((-1), node0.getCharno());
190:       assertFalse(node0.isStringKey());
191:       assertFalse(node0.isLabelName());
192:       assertFalse(node0.isSwitch());
193:       assertFalse(node0.hasOneChild());
194:       assertFalse(node0.isCast());
195:       assertFalse(node0.isGetElem());
196:       assertFalse(node0.isAssign());
197:       assertFalse(node0.isNumber());
198:       assertFalse(node0.isScript());
199:       assertFalse(node0.isTypeOf());
200:       assertFalse(node0.isDec());
201:       assertFalse(node0.hasChildren());
202:       assertFalse(node0.isAssignAdd());
203:       assertFalse(node0.isInstanceOf());
204:       assertEquals((-1), node0.getLineno());
205:       assertFalse(node0.isReturn());
206:       assertFalse(node0.isOr());
207:       assertEquals(83, node0.getType());
208:       assertFalse(node0.hasMoreThanOneChild());
209:       assertFalse(node0.isWith());
210:       assertFalse(node0.isExprResult());
211:       assertFalse(node0.isBreak());
212:       assertFalse(node0.isCall());
213:       assertFalse(node0.isFalse());
214:       assertFalse(node0.isInc());
215:       assertFalse(node0.isComma());
216:       assertFalse(node0.isSetterDef());
217:       assertFalse(node0.isGetProp());
218:       assertFalse(node0.isThrow());
219:       assertFalse(node0.isWhile());
220:       assertTrue(node0.isParamList());
221:       assertFalse(node0.isNot());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isContinue());
224:       assertFalse(node0.isString());
225:       assertEquals((-1), node0.getSourcePosition());
226:       assertFalse(node0.isDebugger());
227:       assertFalse(node0.isAnd());
228:       assertNotNull(iterable0);
229:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
230:       assertEquals(54, Node.SLASH_V);
231:       assertEquals(15, Node.NO_SIDE_EFFECTS);
232:       assertEquals(52, Node.LENGTH);
233:       assertEquals(40, Node.ORIGINALNAME_PROP);
234:       assertEquals(49, Node.DIRECT_EVAL);
235:       assertEquals(50, Node.FREE_CALL);
236:       assertEquals(51, Node.STATIC_SOURCE_FILE);
237:       assertEquals(46, Node.IS_NAMESPACE);
238:       assertEquals(57, Node.REFLECTED_OBJECT);
239:       assertEquals(48, Node.DIRECTIVES);
240:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
241:       assertEquals(37, Node.OPT_ARG_NAME);
242:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
244:       assertEquals(4095, Node.COLUMN_MASK);
245:       assertEquals(1, Node.DECR_FLAG);
246:       assertEquals(12, Node.COLUMN_BITS);
247:       assertEquals(32, Node.INCRDECR_PROP);
248:       assertEquals(53, Node.INPUT_ID);
249:       assertEquals(36, Node.QUOTED_PROP);
250:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
251:       assertEquals(56, Node.CHANGE_TIME);
252:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
253:       assertEquals(43, Node.IS_CONSTANT_NAME);
254:       assertEquals(2, Node.POST_FLAG);
255:       assertEquals(39, Node.EMPTY_BLOCK);
256:       assertEquals(55, Node.INFERRED_FUNCTION);
257:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
258:       assertEquals(8, Node.FLAG_NO_THROWS);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
261:       assertEquals(30, Node.VAR_ARGS_NAME);
262:       assertEquals(57, Node.LAST_PROP);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
265:       
266:       Node node1 = new Node(1642, node0);
267:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
268:       assertTrue(arrayList0.isEmpty());
269:       assertEquals(0, arrayList0.size());
270:       assertFalse(node0.isArrayLit());
271:       assertFalse(node0.isEmpty());
272:       assertFalse(node0.isGetterDef());
273:       assertFalse(node0.isFunction());
274:       assertFalse(node0.isRegExp());
275:       assertFalse(node0.isFor());
276:       assertFalse(node0.isTry());
277:       assertFalse(node0.isDefaultCase());
278:       assertFalse(node0.isCatch());
279:       assertFalse(node0.isIn());
280:       assertFalse(node0.isNull());
281:       assertFalse(node0.isNE());
282:       assertFalse(node0.isTrue());
283:       assertFalse(node0.isName());
284:       assertFalse(node0.isVoid());
285:       assertFalse(node0.isDelProp());
286:       assertFalse(node0.isIf());
287:       assertFalse(node0.isVar());
288:       assertFalse(node0.isHook());
289:       assertFalse(node0.isAdd());
290:       assertFalse(node0.isThis());
291:       assertFalse(node0.isBlock());
292:       assertFalse(node0.isCase());
293:       assertFalse(node0.isNew());
294:       assertFalse(node0.isDo());
295:       assertEquals(0, node0.getChildCount());
296:       assertFalse(node0.isLabel());
297:       assertEquals((-1), node0.getCharno());
298:       assertFalse(node0.isStringKey());
299:       assertFalse(node0.isLabelName());
300:       assertFalse(node0.isSwitch());
301:       assertFalse(node0.hasOneChild());
302:       assertFalse(node0.isCast());
303:       assertFalse(node0.isGetElem());
304:       assertFalse(node0.isAssign());
305:       assertFalse(node0.isNumber());
306:       assertFalse(node0.isScript());
307:       assertFalse(node0.isTypeOf());
308:       assertFalse(node0.isDec());
309:       assertFalse(node0.hasChildren());
310:       assertFalse(node0.isAssignAdd());
311:       assertFalse(node0.isInstanceOf());
312:       assertEquals((-1), node0.getLineno());
313:       assertFalse(node0.isReturn());
314:       assertFalse(node0.isOr());
315:       assertEquals(83, node0.getType());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isWith());
318:       assertFalse(node0.isExprResult());
319:       assertFalse(node0.isBreak());
320:       assertFalse(node0.isCall());
321:       assertFalse(node0.isFalse());
322:       assertFalse(node0.isInc());
323:       assertFalse(node0.isComma());
324:       assertFalse(node0.isSetterDef());
325:       assertFalse(node0.isGetProp());
326:       assertFalse(node0.isThrow());
327:       assertFalse(node0.isWhile());
328:       assertTrue(node0.isParamList());
329:       assertFalse(node0.isNot());
330:       assertFalse(node0.isObjectLit());
331:       assertFalse(node0.isContinue());
332:       assertFalse(node0.isString());
333:       assertEquals((-1), node0.getSourcePosition());
334:       assertFalse(node0.isDebugger());
335:       assertFalse(node0.isAnd());
336:       assertFalse(node1.isStringKey());
337:       assertFalse(node1.isName());
338:       assertFalse(node1.isVar());
339:       assertFalse(node1.isBlock());
340:       assertFalse(node1.isNull());
341:       assertFalse(node1.isNew());
342:       assertFalse(node1.isSetterDef());
343:       assertFalse(node1.isAdd());
344:       assertFalse(node1.hasMoreThanOneChild());
345:       assertFalse(node1.isWhile());
346:       assertFalse(node1.isTrue());
347:       assertFalse(node1.isReturn());
348:       assertFalse(node1.isVoid());
349:       assertFalse(node1.isRegExp());
350:       assertFalse(node1.isTypeOf());
351:       assertEquals((-1), node1.getLineno());
352:       assertFalse(node1.isCatch());
353:       assertFalse(node1.isCall());
354:       assertFalse(node1.isGetElem());
355:       assertFalse(node1.isLabelName());
356:       assertFalse(node1.isGetterDef());
357:       assertFalse(node1.isDelProp());
358:       assertFalse(node1.isFor());
359:       assertFalse(node1.isTry());
360:       assertFalse(node1.isAssignAdd());
361:       assertFalse(node1.isOr());
362:       assertFalse(node1.isNumber());
363:       assertFalse(node1.isEmpty());
364:       assertFalse(node1.isScript());
365:       assertFalse(node1.isDo());
366:       assertFalse(node1.isDefaultCase());
367:       assertFalse(node1.isLabel());
368:       assertFalse(node1.isParamList());
369:       assertFalse(node1.isSwitch());
370:       assertFalse(node1.isArrayLit());
371:       assertFalse(node1.isThrow());
372:       assertFalse(node1.isFalse());
373:       assertFalse(node1.isHook());
374:       assertFalse(node1.isThis());
375:       assertFalse(node1.isGetProp());
376:       assertEquals((-1), node1.getCharno());
377:       assertFalse(node1.isString());
378:       assertFalse(node1.isInc());
379:       assertFalse(node1.isCase());
380:       assertFalse(node1.isWith());
381:       assertEquals(1, node1.getChildCount());
382:       assertFalse(node1.isComma());
383:       assertFalse(node1.isInstanceOf());
384:       assertFalse(node1.isBreak());
385:       assertTrue(node1.hasChildren());
386:       assertFalse(node1.isExprResult());
387:       assertFalse(node1.isAssign());
388:       assertFalse(node1.isIf());
389:       assertFalse(node1.isDec());
390:       assertEquals((-1), node1.getSourcePosition());
391:       assertFalse(node1.isNE());
392:       assertTrue(node1.hasOneChild());
393:       assertFalse(node1.isDebugger());
394:       assertFalse(node1.isIn());
395:       assertFalse(node1.isAnd());
396:       assertFalse(node1.isContinue());
397:       assertFalse(node1.isNot());
398:       assertFalse(node1.isObjectLit());
399:       assertEquals(1642, node1.getType());
400:       assertFalse(node1.isFunction());
401:       assertFalse(node1.isCast());
402:       assertNotNull(node1);
403:       assertFalse(node1.equals((Object)node0));
404:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
405:       assertEquals(54, Node.SLASH_V);
406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
407:       assertEquals(52, Node.LENGTH);
408:       assertEquals(40, Node.ORIGINALNAME_PROP);
409:       assertEquals(49, Node.DIRECT_EVAL);
410:       assertEquals(50, Node.FREE_CALL);
411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
412:       assertEquals(46, Node.IS_NAMESPACE);
413:       assertEquals(57, Node.REFLECTED_OBJECT);
414:       assertEquals(48, Node.DIRECTIVES);
415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
416:       assertEquals(37, Node.OPT_ARG_NAME);
417:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
419:       assertEquals(4095, Node.COLUMN_MASK);
420:       assertEquals(1, Node.DECR_FLAG);
421:       assertEquals(12, Node.COLUMN_BITS);
422:       assertEquals(32, Node.INCRDECR_PROP);
423:       assertEquals(53, Node.INPUT_ID);
424:       assertEquals(36, Node.QUOTED_PROP);
425:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
426:       assertEquals(56, Node.CHANGE_TIME);
427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
428:       assertEquals(43, Node.IS_CONSTANT_NAME);
429:       assertEquals(2, Node.POST_FLAG);
430:       assertEquals(39, Node.EMPTY_BLOCK);
431:       assertEquals(55, Node.INFERRED_FUNCTION);
432:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
433:       assertEquals(8, Node.FLAG_NO_THROWS);
434:       assertEquals(29, Node.JSDOC_INFO_PROP);
435:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
436:       assertEquals(30, Node.VAR_ARGS_NAME);
437:       assertEquals(57, Node.LAST_PROP);
438:       assertEquals(47, Node.IS_DISPATCHER);
439:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
441:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
442:       assertEquals(36, Node.QUOTED_PROP);
443:       assertEquals(56, Node.CHANGE_TIME);
444:       assertEquals(43, Node.IS_CONSTANT_NAME);
445:       assertEquals(37, Node.OPT_ARG_NAME);
446:       assertEquals(32, Node.INCRDECR_PROP);
447:       assertEquals(46, Node.IS_NAMESPACE);
448:       assertEquals(4095, Node.COLUMN_MASK);
449:       assertEquals(51, Node.STATIC_SOURCE_FILE);
450:       assertEquals(12, Node.COLUMN_BITS);
451:       assertEquals(50, Node.FREE_CALL);
452:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
453:       assertEquals(1, Node.DECR_FLAG);
454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
455:       assertEquals(52, Node.LENGTH);
456:       assertEquals(54, Node.SLASH_V);
457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
460:       assertEquals(30, Node.VAR_ARGS_NAME);
461:       assertEquals(49, Node.DIRECT_EVAL);
462:       assertEquals(40, Node.ORIGINALNAME_PROP);
463:       assertEquals(48, Node.DIRECTIVES);
464:       assertEquals(2, Node.POST_FLAG);
465:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
466:       assertEquals(47, Node.IS_DISPATCHER);
467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
468:       assertEquals(8, Node.FLAG_NO_THROWS);
469:       assertEquals(57, Node.LAST_PROP);
470:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
471:       assertEquals(55, Node.INFERRED_FUNCTION);
472:       assertEquals(29, Node.JSDOC_INFO_PROP);
473:       assertEquals(53, Node.INPUT_ID);
474:       assertEquals(15, Node.NO_SIDE_EFFECTS);
475:       assertEquals(39, Node.EMPTY_BLOCK);
476:       
477:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
478:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
479:       assertTrue(arrayList0.isEmpty());
480:       assertEquals(0, arrayList0.size());
481:       assertFalse(node0.isArrayLit());
482:       assertFalse(node0.isEmpty());
483:       assertFalse(node0.isGetterDef());
484:       assertFalse(node0.isFunction());
485:       assertFalse(node0.isRegExp());
486:       assertFalse(node0.isFor());
487:       assertFalse(node0.isTry());
488:       assertFalse(node0.isDefaultCase());
489:       assertFalse(node0.isCatch());
490:       assertFalse(node0.isIn());
491:       assertFalse(node0.isNull());
492:       assertFalse(node0.isNE());
493:       assertFalse(node0.isTrue());
494:       assertFalse(node0.isName());
495:       assertFalse(node0.isVoid());
496:       assertFalse(node0.isDelProp());
497:       assertFalse(node0.isIf());
498:       assertFalse(node0.isVar());
499:       assertFalse(node0.isHook());
500:       assertFalse(node0.isAdd());
501:       assertFalse(node0.isThis());
502:       assertFalse(node0.isBlock());
503:       assertFalse(node0.isCase());
504:       assertFalse(node0.isNew());
505:       assertFalse(node0.isDo());
506:       assertEquals(0, node0.getChildCount());
507:       assertFalse(node0.isLabel());
508:       assertEquals((-1), node0.getCharno());
509:       assertFalse(node0.isStringKey());
510:       assertFalse(node0.isLabelName());
511:       assertFalse(node0.isSwitch());
512:       assertFalse(node0.hasOneChild());
513:       assertFalse(node0.isCast());
514:       assertFalse(node0.isGetElem());
515:       assertFalse(node0.isAssign());
516:       assertFalse(node0.isNumber());
517:       assertFalse(node0.isScript());
518:       assertFalse(node0.isTypeOf());
519:       assertFalse(node0.isDec());
520:       assertFalse(node0.hasChildren());
521:       assertFalse(node0.isAssignAdd());
522:       assertFalse(node0.isInstanceOf());
523:       assertEquals((-1), node0.getLineno());
524:       assertFalse(node0.isReturn());
525:       assertFalse(node0.isOr());
526:       assertEquals(83, node0.getType());
527:       assertFalse(node0.hasMoreThanOneChild());
528:       assertFalse(node0.isWith());
529:       assertFalse(node0.isExprResult());
530:       assertFalse(node0.isBreak());
531:       assertFalse(node0.isCall());
532:       assertFalse(node0.isFalse());
533:       assertFalse(node0.isInc());
534:       assertFalse(node0.isComma());
535:       assertFalse(node0.isSetterDef());
536:       assertFalse(node0.isGetProp());
537:       assertFalse(node0.isThrow());
538:       assertFalse(node0.isWhile());
539:       assertTrue(node0.isParamList());
540:       assertFalse(node0.isNot());
541:       assertFalse(node0.isObjectLit());
542:       assertFalse(node0.isContinue());
543:       assertFalse(node0.isString());
544:       assertEquals((-1), node0.getSourcePosition());
545:       assertFalse(node0.isDebugger());
546:       assertFalse(node0.isAnd());
547:       assertFalse(node1.isStringKey());
548:       assertFalse(node1.isName());
549:       assertFalse(node1.isVar());
550:       assertFalse(node1.isBlock());
551:       assertFalse(node1.isNull());
552:       assertFalse(node1.isNew());
553:       assertFalse(node1.isSetterDef());
554:       assertFalse(node1.isAdd());
555:       assertFalse(node1.hasMoreThanOneChild());
556:       assertFalse(node1.isWhile());
557:       assertFalse(node1.isTrue());
558:       assertFalse(node1.isReturn());
559:       assertFalse(node1.isVoid());
560:       assertFalse(node1.isRegExp());
561:       assertFalse(node1.isTypeOf());
562:       assertEquals((-1), node1.getLineno());
563:       assertFalse(node1.isCatch());
564:       assertFalse(node1.isCall());
565:       assertFalse(node1.isGetElem());
566:       assertFalse(node1.isLabelName());
567:       assertFalse(node1.isGetterDef());
568:       assertFalse(node1.isDelProp());
569:       assertFalse(node1.isFor());
570:       assertFalse(node1.isTry());
571:       assertFalse(node1.isAssignAdd());
572:       assertFalse(node1.isOr());
573:       assertFalse(node1.isNumber());
574:       assertFalse(node1.isEmpty());
575:       assertFalse(node1.isScript());
576:       assertFalse(node1.isDo());
577:       assertFalse(node1.isDefaultCase());
578:       assertFalse(node1.isLabel());
579:       assertFalse(node1.isParamList());
580:       assertFalse(node1.isSwitch());
581:       assertFalse(node1.isArrayLit());
582:       assertFalse(node1.isThrow());
583:       assertFalse(node1.isFalse());
584:       assertFalse(node1.isHook());
585:       assertFalse(node1.isThis());
586:       assertFalse(node1.isGetProp());
587:       assertEquals((-1), node1.getCharno());
588:       assertFalse(node1.isString());
589:       assertFalse(node1.isInc());
590:       assertFalse(node1.isCase());
591:       assertFalse(node1.isWith());
592:       assertEquals(1, node1.getChildCount());
593:       assertFalse(node1.isComma());
594:       assertFalse(node1.isInstanceOf());
595:       assertFalse(node1.isBreak());
596:       assertTrue(node1.hasChildren());
597:       assertFalse(node1.isExprResult());
598:       assertFalse(node1.isAssign());
599:       assertFalse(node1.isIf());
600:       assertFalse(node1.isDec());
601:       assertEquals((-1), node1.getSourcePosition());
602:       assertFalse(node1.isNE());
603:       assertTrue(node1.hasOneChild());
604:       assertFalse(node1.isDebugger());
605:       assertFalse(node1.isIn());
606:       assertFalse(node1.isAnd());
607:       assertFalse(node1.isContinue());
608:       assertFalse(node1.isNot());
609:       assertFalse(node1.isObjectLit());
610:       assertEquals(1642, node1.getType());
611:       assertFalse(node1.isFunction());
612:       assertFalse(node1.isCast());
613:       assertNotNull(node_NodeMismatch0);
614:       assertNotSame(node0, node1);
615:       assertNotSame(node1, node0);
616:       assertFalse(node0.equals((Object)node1));
617:       assertFalse(node1.equals((Object)node0));
618:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
619:       assertEquals(54, Node.SLASH_V);
620:       assertEquals(15, Node.NO_SIDE_EFFECTS);
621:       assertEquals(52, Node.LENGTH);
622:       assertEquals(40, Node.ORIGINALNAME_PROP);
623:       assertEquals(49, Node.DIRECT_EVAL);
624:       assertEquals(50, Node.FREE_CALL);
625:       assertEquals(51, Node.STATIC_SOURCE_FILE);
626:       assertEquals(46, Node.IS_NAMESPACE);
627:       assertEquals(57, Node.REFLECTED_OBJECT);
628:       assertEquals(48, Node.DIRECTIVES);
629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
630:       assertEquals(37, Node.OPT_ARG_NAME);
631:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
632:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
633:       assertEquals(4095, Node.COLUMN_MASK);
634:       assertEquals(1, Node.DECR_FLAG);
635:       assertEquals(12, Node.COLUMN_BITS);
636:       assertEquals(32, Node.INCRDECR_PROP);
637:       assertEquals(53, Node.INPUT_ID);
638:       assertEquals(36, Node.QUOTED_PROP);
639:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
642:       assertEquals(43, Node.IS_CONSTANT_NAME);
643:       assertEquals(2, Node.POST_FLAG);
644:       assertEquals(39, Node.EMPTY_BLOCK);
645:       assertEquals(55, Node.INFERRED_FUNCTION);
646:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
647:       assertEquals(8, Node.FLAG_NO_THROWS);
648:       assertEquals(29, Node.JSDOC_INFO_PROP);
649:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
650:       assertEquals(30, Node.VAR_ARGS_NAME);
651:       assertEquals(57, Node.LAST_PROP);
652:       assertEquals(47, Node.IS_DISPATCHER);
653:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
654:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
655:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
656:       assertEquals(36, Node.QUOTED_PROP);
657:       assertEquals(56, Node.CHANGE_TIME);
658:       assertEquals(43, Node.IS_CONSTANT_NAME);
659:       assertEquals(37, Node.OPT_ARG_NAME);
660:       assertEquals(32, Node.INCRDECR_PROP);
661:       assertEquals(46, Node.IS_NAMESPACE);
662:       assertEquals(4095, Node.COLUMN_MASK);
663:       assertEquals(51, Node.STATIC_SOURCE_FILE);
664:       assertEquals(12, Node.COLUMN_BITS);
665:       assertEquals(50, Node.FREE_CALL);
666:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
667:       assertEquals(1, Node.DECR_FLAG);
668:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
669:       assertEquals(52, Node.LENGTH);
670:       assertEquals(54, Node.SLASH_V);
671:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
672:       assertEquals(57, Node.REFLECTED_OBJECT);
673:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
674:       assertEquals(30, Node.VAR_ARGS_NAME);
675:       assertEquals(49, Node.DIRECT_EVAL);
676:       assertEquals(40, Node.ORIGINALNAME_PROP);
677:       assertEquals(48, Node.DIRECTIVES);
678:       assertEquals(2, Node.POST_FLAG);
679:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
680:       assertEquals(47, Node.IS_DISPATCHER);
681:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
682:       assertEquals(8, Node.FLAG_NO_THROWS);
683:       assertEquals(57, Node.LAST_PROP);
684:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
685:       assertEquals(55, Node.INFERRED_FUNCTION);
686:       assertEquals(29, Node.JSDOC_INFO_PROP);
687:       assertEquals(53, Node.INPUT_ID);
688:       assertEquals(15, Node.NO_SIDE_EFFECTS);
689:       assertEquals(39, Node.EMPTY_BLOCK);
690:       
691:       node1.setType(1056);
692:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
693:       assertTrue(arrayList0.isEmpty());
694:       assertEquals(0, arrayList0.size());
695:       assertFalse(node0.isArrayLit());
696:       assertFalse(node0.isEmpty());
697:       assertFalse(node0.isGetterDef());
698:       assertFalse(node0.isFunction());
699:       assertFalse(node0.isRegExp());
700:       assertFalse(node0.isFor());
701:       assertFalse(node0.isTry());
702:       assertFalse(node0.isDefaultCase());
703:       assertFalse(node0.isCatch());
704:       assertFalse(node0.isIn());
705:       assertFalse(node0.isNull());
706:       assertFalse(node0.isNE());
707:       assertFalse(node0.isTrue());
708:       assertFalse(node0.isName());
709:       assertFalse(node0.isVoid());
710:       assertFalse(node0.isDelProp());
711:       assertFalse(node0.isIf());
712:       assertFalse(node0.isVar());
713:       assertFalse(node0.isHook());
714:       assertFalse(node0.isAdd());
715:       assertFalse(node0.isThis());
716:       assertFalse(node0.isBlock());
717:       assertFalse(node0.isCase());
718:       assertFalse(node0.isNew());
719:       assertFalse(node0.isDo());
720:       assertEquals(0, node0.getChildCount());
721:       assertFalse(node0.isLabel());
722:       assertEquals((-1), node0.getCharno());
723:       assertFalse(node0.isStringKey());
724:       assertFalse(node0.isLabelName());
725:       assertFalse(node0.isSwitch());
726:       assertFalse(node0.hasOneChild());
727:       assertFalse(node0.isCast());
728:       assertFalse(node0.isGetElem());
729:       assertFalse(node0.isAssign());
730:       assertFalse(node0.isNumber());
731:       assertFalse(node0.isScript());
732:       assertFalse(node0.isTypeOf());
733:       assertFalse(node0.isDec());
734:       assertFalse(node0.hasChildren());
735:       assertFalse(node0.isAssignAdd());
736:       assertFalse(node0.isInstanceOf());
737:       assertEquals((-1), node0.getLineno());
738:       assertFalse(node0.isReturn());
739:       assertFalse(node0.isOr());
740:       assertEquals(83, node0.getType());
741:       assertFalse(node0.hasMoreThanOneChild());
742:       assertFalse(node0.isWith());
743:       assertFalse(node0.isExprResult());
744:       assertFalse(node0.isBreak());
745:       assertFalse(node0.isCall());
746:       assertFalse(node0.isFalse());
747:       assertFalse(node0.isInc());
748:       assertFalse(node0.isComma());
749:       assertFalse(node0.isSetterDef());
750:       assertFalse(node0.isGetProp());
751:       assertFalse(node0.isThrow());
752:       assertFalse(node0.isWhile());
753:       assertTrue(node0.isParamList());
754:       assertFalse(node0.isNot());
755:       assertFalse(node0.isObjectLit());
756:       assertFalse(node0.isContinue());
757:       assertFalse(node0.isString());
758:       assertEquals((-1), node0.getSourcePosition());
759:       assertFalse(node0.isDebugger());
760:       assertFalse(node0.isAnd());
761:       assertFalse(node1.isStringKey());
762:       assertFalse(node1.isName());
763:       assertFalse(node1.isVar());
764:       assertFalse(node1.isBlock());
765:       assertFalse(node1.isNull());
766:       assertFalse(node1.isNew());
767:       assertFalse(node1.isSetterDef());
768:       assertFalse(node1.isAdd());
769:       assertFalse(node1.hasMoreThanOneChild());
770:       assertFalse(node1.isWhile());
771:       assertFalse(node1.isTrue());
772:       assertFalse(node1.isReturn());
773:       assertFalse(node1.isVoid());
774:       assertFalse(node1.isRegExp());
775:       assertFalse(node1.isTypeOf());
776:       assertEquals((-1), node1.getLineno());
777:       assertFalse(node1.isCatch());
778:       assertFalse(node1.isCall());
779:       assertFalse(node1.isGetElem());
780:       assertFalse(node1.isLabelName());
781:       assertFalse(node1.isGetterDef());
782:       assertFalse(node1.isDelProp());
783:       assertFalse(node1.isFor());
784:       assertFalse(node1.isTry());
785:       assertFalse(node1.isAssignAdd());
786:       assertFalse(node1.isOr());
787:       assertFalse(node1.isNumber());
788:       assertFalse(node1.isEmpty());
789:       assertFalse(node1.isScript());
790:       assertFalse(node1.isDo());
791:       assertFalse(node1.isDefaultCase());
792:       assertFalse(node1.isLabel());
793:       assertFalse(node1.isParamList());
794:       assertFalse(node1.isSwitch());
795:       assertFalse(node1.isArrayLit());
796:       assertFalse(node1.isThrow());
797:       assertFalse(node1.isFalse());
798:       assertFalse(node1.isHook());
799:       assertFalse(node1.isThis());
800:       assertFalse(node1.isGetProp());
801:       assertEquals((-1), node1.getCharno());
802:       assertFalse(node1.isString());
803:       assertFalse(node1.isInc());
804:       assertFalse(node1.isCase());
805:       assertFalse(node1.isWith());
806:       assertEquals(1, node1.getChildCount());
807:       assertFalse(node1.isComma());
808:       assertFalse(node1.isInstanceOf());
809:       assertFalse(node1.isBreak());
810:       assertTrue(node1.hasChildren());
811:       assertFalse(node1.isExprResult());
812:       assertFalse(node1.isAssign());
813:       assertFalse(node1.isIf());
814:       assertFalse(node1.isDec());
815:       assertEquals((-1), node1.getSourcePosition());
816:       assertFalse(node1.isNE());
817:       assertTrue(node1.hasOneChild());
818:       assertFalse(node1.isDebugger());
819:       assertFalse(node1.isIn());
820:       assertFalse(node1.isAnd());
821:       assertFalse(node1.isContinue());
822:       assertFalse(node1.isNot());
823:       assertFalse(node1.isObjectLit());
824:       assertEquals(1056, node1.getType());
825:       assertFalse(node1.isFunction());
826:       assertFalse(node1.isCast());
827:       assertNotSame(node0, node1);
828:       assertNotSame(node1, node0);
829:       assertFalse(node0.equals((Object)node1));
830:       assertFalse(node1.equals((Object)node0));
831:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
832:       assertEquals(54, Node.SLASH_V);
833:       assertEquals(15, Node.NO_SIDE_EFFECTS);
834:       assertEquals(52, Node.LENGTH);
835:       assertEquals(40, Node.ORIGINALNAME_PROP);
836:       assertEquals(49, Node.DIRECT_EVAL);
837:       assertEquals(50, Node.FREE_CALL);
838:       assertEquals(51, Node.STATIC_SOURCE_FILE);
839:       assertEquals(46, Node.IS_NAMESPACE);
840:       assertEquals(57, Node.REFLECTED_OBJECT);
841:       assertEquals(48, Node.DIRECTIVES);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(37, Node.OPT_ARG_NAME);
844:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
845:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
846:       assertEquals(4095, Node.COLUMN_MASK);
847:       assertEquals(1, Node.DECR_FLAG);
848:       assertEquals(12, Node.COLUMN_BITS);
849:       assertEquals(32, Node.INCRDECR_PROP);
850:       assertEquals(53, Node.INPUT_ID);
851:       assertEquals(36, Node.QUOTED_PROP);
852:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
853:       assertEquals(56, Node.CHANGE_TIME);
854:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
855:       assertEquals(43, Node.IS_CONSTANT_NAME);
856:       assertEquals(2, Node.POST_FLAG);
857:       assertEquals(39, Node.EMPTY_BLOCK);
858:       assertEquals(55, Node.INFERRED_FUNCTION);
859:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
860:       assertEquals(8, Node.FLAG_NO_THROWS);
861:       assertEquals(29, Node.JSDOC_INFO_PROP);
862:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
863:       assertEquals(30, Node.VAR_ARGS_NAME);
864:       assertEquals(57, Node.LAST_PROP);
865:       assertEquals(47, Node.IS_DISPATCHER);
866:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
867:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
868:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
869:       assertEquals(36, Node.QUOTED_PROP);
870:       assertEquals(56, Node.CHANGE_TIME);
871:       assertEquals(43, Node.IS_CONSTANT_NAME);
872:       assertEquals(37, Node.OPT_ARG_NAME);
873:       assertEquals(32, Node.INCRDECR_PROP);
874:       assertEquals(46, Node.IS_NAMESPACE);
875:       assertEquals(4095, Node.COLUMN_MASK);
876:       assertEquals(51, Node.STATIC_SOURCE_FILE);
877:       assertEquals(12, Node.COLUMN_BITS);
878:       assertEquals(50, Node.FREE_CALL);
879:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
880:       assertEquals(1, Node.DECR_FLAG);
881:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
882:       assertEquals(52, Node.LENGTH);
883:       assertEquals(54, Node.SLASH_V);
884:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
885:       assertEquals(57, Node.REFLECTED_OBJECT);
886:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
887:       assertEquals(30, Node.VAR_ARGS_NAME);
888:       assertEquals(49, Node.DIRECT_EVAL);
889:       assertEquals(40, Node.ORIGINALNAME_PROP);
890:       assertEquals(48, Node.DIRECTIVES);
891:       assertEquals(2, Node.POST_FLAG);
892:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
893:       assertEquals(47, Node.IS_DISPATCHER);
894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
895:       assertEquals(8, Node.FLAG_NO_THROWS);
896:       assertEquals(57, Node.LAST_PROP);
897:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
898:       assertEquals(55, Node.INFERRED_FUNCTION);
899:       assertEquals(29, Node.JSDOC_INFO_PROP);
900:       assertEquals(53, Node.INPUT_ID);
901:       assertEquals(15, Node.NO_SIDE_EFFECTS);
902:       assertEquals(39, Node.EMPTY_BLOCK);
903:       
904:       node1.putProp(184, arrayList0);
905:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
906:       assertTrue(arrayList0.isEmpty());
907:       assertEquals(0, arrayList0.size());
908:       assertFalse(node0.isArrayLit());
909:       assertFalse(node0.isEmpty());
910:       assertFalse(node0.isGetterDef());
911:       assertFalse(node0.isFunction());
912:       assertFalse(node0.isRegExp());
913:       assertFalse(node0.isFor());
914:       assertFalse(node0.isTry());
915:       assertFalse(node0.isDefaultCase());
916:       assertFalse(node0.isCatch());
917:       assertFalse(node0.isIn());
918:       assertFalse(node0.isNull());
919:       assertFalse(node0.isNE());
920:       assertFalse(node0.isTrue());
921:       assertFalse(node0.isName());
922:       assertFalse(node0.isVoid());
923:       assertFalse(node0.isDelProp());
924:       assertFalse(node0.isIf());
925:       assertFalse(node0.isVar());
926:       assertFalse(node0.isHook());
927:       assertFalse(node0.isAdd());
928:       assertFalse(node0.isThis());
929:       assertFalse(node0.isBlock());
930:       assertFalse(node0.isCase());
931:       assertFalse(node0.isNew());
932:       assertFalse(node0.isDo());
933:       assertEquals(0, node0.getChildCount());
934:       assertFalse(node0.isLabel());
935:       assertEquals((-1), node0.getCharno());
936:       assertFalse(node0.isStringKey());
937:       assertFalse(node0.isLabelName());
938:       assertFalse(node0.isSwitch());
939:       assertFalse(node0.hasOneChild());
940:       assertFalse(node0.isCast());
941:       assertFalse(node0.isGetElem());
942:       assertFalse(node0.isAssign());
943:       assertFalse(node0.isNumber());
944:       assertFalse(node0.isScript());
945:       assertFalse(node0.isTypeOf());
946:       assertFalse(node0.isDec());
947:       assertFalse(node0.hasChildren());
948:       assertFalse(node0.isAssignAdd());
949:       assertFalse(node0.isInstanceOf());
950:       assertEquals((-1), node0.getLineno());
951:       assertFalse(node0.isReturn());
952:       assertFalse(node0.isOr());
953:       assertEquals(83, node0.getType());
954:       assertFalse(node0.hasMoreThanOneChild());
955:       assertFalse(node0.isWith());
956:       assertFalse(node0.isExprResult());
957:       assertFalse(node0.isBreak());
958:       assertFalse(node0.isCall());
959:       assertFalse(node0.isFalse());
960:       assertFalse(node0.isInc());
961:       assertFalse(node0.isComma());
962:       assertFalse(node0.isSetterDef());
963:       assertFalse(node0.isGetProp());
964:       assertFalse(node0.isThrow());
965:       assertFalse(node0.isWhile());
966:       assertTrue(node0.isParamList());
967:       assertFalse(node0.isNot());
968:       assertFalse(node0.isObjectLit());
969:       assertFalse(node0.isContinue());
970:       assertFalse(node0.isString());
971:       assertEquals((-1), node0.getSourcePosition());
972:       assertFalse(node0.isDebugger());
973:       assertFalse(node0.isAnd());
974:       assertFalse(node1.isStringKey());
975:       assertFalse(node1.isName());
976:       assertFalse(node1.isVar());
977:       assertFalse(node1.isBlock());
978:       assertFalse(node1.isNull());
979:       assertFalse(node1.isNew());
980:       assertFalse(node1.isSetterDef());
981:       assertFalse(node1.isAdd());
982:       assertFalse(node1.hasMoreThanOneChild());
983:       assertFalse(node1.isWhile());
984:       assertFalse(node1.isTrue());
985:       assertFalse(node1.isReturn());
986:       assertFalse(node1.isVoid());
987:       assertFalse(node1.isRegExp());
988:       assertFalse(node1.isTypeOf());
989:       assertEquals((-1), node1.getLineno());
990:       assertFalse(node1.isCatch());
991:       assertFalse(node1.isCall());
992:       assertFalse(node1.isGetElem());
993:       assertFalse(node1.isLabelName());
994:       assertFalse(node1.isGetterDef());
995:       assertFalse(node1.isDelProp());
996:       assertFalse(node1.isFor());
997:       assertFalse(node1.isTry());
998:       assertFalse(node1.isAssignAdd());
999:       assertFalse(node1.isOr());
1000:       assertFalse(node1.isNumber());
1001:       assertFalse(node1.isEmpty());
1002:       assertFalse(node1.isScript());
1003:       assertFalse(node1.isDo());
1004:       assertFalse(node1.isDefaultCase());
1005:       assertFalse(node1.isLabel());
1006:       assertFalse(node1.isParamList());
1007:       assertFalse(node1.isSwitch());
1008:       assertFalse(node1.isArrayLit());
1009:       assertFalse(node1.isThrow());
1010:       assertFalse(node1.isFalse());
1011:       assertFalse(node1.isHook());
1012:       assertFalse(node1.isThis());
1013:       assertFalse(node1.isGetProp());
1014:       assertEquals((-1), node1.getCharno());
1015:       assertFalse(node1.isString());
1016:       assertFalse(node1.isInc());
1017:       assertFalse(node1.isCase());
1018:       assertFalse(node1.isWith());
1019:       assertEquals(1, node1.getChildCount());
1020:       assertFalse(node1.isComma());
1021:       assertFalse(node1.isInstanceOf());
1022:       assertFalse(node1.isBreak());
1023:       assertTrue(node1.hasChildren());
1024:       assertFalse(node1.isExprResult());
1025:       assertFalse(node1.isAssign());
1026:       assertFalse(node1.isIf());
1027:       assertFalse(node1.isDec());
1028:       assertEquals((-1), node1.getSourcePosition());
1029:       assertFalse(node1.isNE());
1030:       assertTrue(node1.hasOneChild());
1031:       assertFalse(node1.isDebugger());
1032:       assertFalse(node1.isIn());
1033:       assertFalse(node1.isAnd());
1034:       assertFalse(node1.isContinue());
1035:       assertFalse(node1.isNot());
1036:       assertFalse(node1.isObjectLit());
1037:       assertEquals(1056, node1.getType());
1038:       assertFalse(node1.isFunction());
1039:       assertFalse(node1.isCast());
1040:       assertNotSame(node0, node1);
1041:       assertNotSame(node1, node0);
1042:       assertFalse(node0.equals((Object)node1));
1043:       assertFalse(node1.equals((Object)node0));
1044:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1045:       assertEquals(54, Node.SLASH_V);
1046:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1047:       assertEquals(52, Node.LENGTH);
1048:       assertEquals(40, Node.ORIGINALNAME_PROP);
1049:       assertEquals(49, Node.DIRECT_EVAL);
1050:       assertEquals(50, Node.FREE_CALL);
1051:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1052:       assertEquals(46, Node.IS_NAMESPACE);
1053:       assertEquals(57, Node.REFLECTED_OBJECT);
1054:       assertEquals(48, Node.DIRECTIVES);
1055:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1056:       assertEquals(37, Node.OPT_ARG_NAME);
1057:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1058:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1059:       assertEquals(4095, Node.COLUMN_MASK);
1060:       assertEquals(1, Node.DECR_FLAG);
1061:       assertEquals(12, Node.COLUMN_BITS);
1062:       assertEquals(32, Node.INCRDECR_PROP);
1063:       assertEquals(53, Node.INPUT_ID);
1064:       assertEquals(36, Node.QUOTED_PROP);
1065:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1066:       assertEquals(56, Node.CHANGE_TIME);
1067:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1068:       assertEquals(43, Node.IS_CONSTANT_NAME);
1069:       assertEquals(2, Node.POST_FLAG);
1070:       assertEquals(39, Node.EMPTY_BLOCK);
1071:       assertEquals(55, Node.INFERRED_FUNCTION);
1072:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1073:       assertEquals(8, Node.FLAG_NO_THROWS);
1074:       assertEquals(29, Node.JSDOC_INFO_PROP);
1075:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1076:       assertEquals(30, Node.VAR_ARGS_NAME);
1077:       assertEquals(57, Node.LAST_PROP);
1078:       assertEquals(47, Node.IS_DISPATCHER);
1079:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1080:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1081:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1082:       assertEquals(36, Node.QUOTED_PROP);
1083:       assertEquals(56, Node.CHANGE_TIME);
1084:       assertEquals(43, Node.IS_CONSTANT_NAME);
1085:       assertEquals(37, Node.OPT_ARG_NAME);
1086:       assertEquals(32, Node.INCRDECR_PROP);
1087:       assertEquals(46, Node.IS_NAMESPACE);
1088:       assertEquals(4095, Node.COLUMN_MASK);
1089:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1090:       assertEquals(12, Node.COLUMN_BITS);
1091:       assertEquals(50, Node.FREE_CALL);
1092:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1093:       assertEquals(1, Node.DECR_FLAG);
1094:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1095:       assertEquals(52, Node.LENGTH);
1096:       assertEquals(54, Node.SLASH_V);
1097:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1098:       assertEquals(57, Node.REFLECTED_OBJECT);
1099:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1100:       assertEquals(30, Node.VAR_ARGS_NAME);
1101:       assertEquals(49, Node.DIRECT_EVAL);
1102:       assertEquals(40, Node.ORIGINALNAME_PROP);
1103:       assertEquals(48, Node.DIRECTIVES);
1104:       assertEquals(2, Node.POST_FLAG);
1105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1106:       assertEquals(47, Node.IS_DISPATCHER);
1107:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1108:       assertEquals(8, Node.FLAG_NO_THROWS);
1109:       assertEquals(57, Node.LAST_PROP);
1110:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1111:       assertEquals(55, Node.INFERRED_FUNCTION);
1112:       assertEquals(29, Node.JSDOC_INFO_PROP);
1113:       assertEquals(53, Node.INPUT_ID);
1114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1115:       assertEquals(39, Node.EMPTY_BLOCK);
1116:       
1117:       String string0 = node1.getSourceFileName();
1118:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1119:       assertTrue(arrayList0.isEmpty());
1120:       assertEquals(0, arrayList0.size());
1121:       assertFalse(node0.isArrayLit());
1122:       assertFalse(node0.isEmpty());
1123:       assertFalse(node0.isGetterDef());
1124:       assertFalse(node0.isFunction());
1125:       assertFalse(node0.isRegExp());
1126:       assertFalse(node0.isFor());
1127:       assertFalse(node0.isTry());
1128:       assertFalse(node0.isDefaultCase());
1129:       assertFalse(node0.isCatch());
1130:       assertFalse(node0.isIn());
1131:       assertFalse(node0.isNull());
1132:       assertFalse(node0.isNE());
1133:       assertFalse(node0.isTrue());
1134:       assertFalse(node0.isName());
1135:       assertFalse(node0.isVoid());
1136:       assertFalse(node0.isDelProp());
1137:       assertFalse(node0.isIf());
1138:       assertFalse(node0.isVar());
1139:       assertFalse(node0.isHook());
1140:       assertFalse(node0.isAdd());
1141:       assertFalse(node0.isThis());
1142:       assertFalse(node0.isBlock());
1143:       assertFalse(node0.isCase());
1144:       assertFalse(node0.isNew());
1145:       assertFalse(node0.isDo());
1146:       assertEquals(0, node0.getChildCount());
1147:       assertFalse(node0.isLabel());
1148:       assertEquals((-1), node0.getCharno());
1149:       assertFalse(node0.isStringKey());
1150:       assertFalse(node0.isLabelName());
1151:       assertFalse(node0.isSwitch());
1152:       assertFalse(node0.hasOneChild());
1153:       assertFalse(node0.isCast());
1154:       assertFalse(node0.isGetElem());
1155:       assertFalse(node0.isAssign());
1156:       assertFalse(node0.isNumber());
1157:       assertFalse(node0.isScript());
1158:       assertFalse(node0.isTypeOf());
1159:       assertFalse(node0.isDec());
1160:       assertFalse(node0.hasChildren());
1161:       assertFalse(node0.isAssignAdd());
1162:       assertFalse(node0.isInstanceOf());
1163:       assertEquals((-1), node0.getLineno());
1164:       assertFalse(node0.isReturn());
1165:       assertFalse(node0.isOr());
1166:       assertEquals(83, node0.getType());
1167:       assertFalse(node0.hasMoreThanOneChild());
1168:       assertFalse(node0.isWith());
1169:       assertFalse(node0.isExprResult());
1170:       assertFalse(node0.isBreak());
1171:       assertFalse(node0.isCall());
1172:       assertFalse(node0.isFalse());
1173:       assertFalse(node0.isInc());
1174:       assertFalse(node0.isComma());
1175:       assertFalse(node0.isSetterDef());
1176:       assertFalse(node0.isGetProp());
1177:       assertFalse(node0.isThrow());
1178:       assertFalse(node0.isWhile());
1179:       assertTrue(node0.isParamList());
1180:       assertFalse(node0.isNot());
1181:       assertFalse(node0.isObjectLit());
1182:       assertFalse(node0.isContinue());
1183:       assertFalse(node0.isString());
1184:       assertEquals((-1), node0.getSourcePosition());
1185:       assertFalse(node0.isDebugger());
1186:       assertFalse(node0.isAnd());
1187:       assertFalse(node1.isStringKey());
1188:       assertFalse(node1.isName());
1189:       assertFalse(node1.isVar());
1190:       assertFalse(node1.isBlock());
1191:       assertFalse(node1.isNull());
1192:       assertFalse(node1.isNew());
1193:       assertFalse(node1.isSetterDef());
1194:       assertFalse(node1.isAdd());
1195:       assertFalse(node1.hasMoreThanOneChild());
1196:       assertFalse(node1.isWhile());
1197:       assertFalse(node1.isTrue());
1198:       assertFalse(node1.isReturn());
1199:       assertFalse(node1.isVoid());
1200:       assertFalse(node1.isRegExp());
1201:       assertFalse(node1.isTypeOf());
1202:       assertEquals((-1), node1.getLineno());
1203:       assertFalse(node1.isCatch());
1204:       assertFalse(node1.isCall());
1205:       assertFalse(node1.isGetElem());
1206:       assertFalse(node1.isLabelName());
1207:       assertFalse(node1.isGetterDef());
1208:       assertFalse(node1.isDelProp());
1209:       assertFalse(node1.isFor());
1210:       assertFalse(node1.isTry());
1211:       assertFalse(node1.isAssignAdd());
1212:       assertFalse(node1.isOr());
1213:       assertFalse(node1.isNumber());
1214:       assertFalse(node1.isEmpty());
1215:       assertFalse(node1.isScript());
1216:       assertFalse(node1.isDo());
1217:       assertFalse(node1.isDefaultCase());
1218:       assertFalse(node1.isLabel());
1219:       assertFalse(node1.isParamList());
1220:       assertFalse(node1.isSwitch());
1221:       assertFalse(node1.isArrayLit());
1222:       assertFalse(node1.isThrow());
1223:       assertFalse(node1.isFalse());
1224:       assertFalse(node1.isHook());
1225:       assertFalse(node1.isThis());
1226:       assertFalse(node1.isGetProp());
1227:       assertEquals((-1), node1.getCharno());
1228:       assertFalse(node1.isString());
1229:       assertFalse(node1.isInc());
1230:       assertFalse(node1.isCase());
1231:       assertFalse(node1.isWith());
1232:       assertEquals(1, node1.getChildCount());
1233:       assertFalse(node1.isComma());
1234:       assertFalse(node1.isInstanceOf());
1235:       assertFalse(node1.isBreak());
1236:       assertTrue(node1.hasChildren());
1237:       assertFalse(node1.isExprResult());
1238:       assertFalse(node1.isAssign());
1239:       assertFalse(node1.isIf());
1240:       assertFalse(node1.isDec());
1241:       assertEquals((-1), node1.getSourcePosition());
1242:       assertFalse(node1.isNE());
1243:       assertTrue(node1.hasOneChild());
1244:       assertFalse(node1.isDebugger());
1245:       assertFalse(node1.isIn());
1246:       assertFalse(node1.isAnd());
1247:       assertFalse(node1.isContinue());
1248:       assertFalse(node1.isNot());
1249:       assertFalse(node1.isObjectLit());
1250:       assertEquals(1056, node1.getType());
1251:       assertFalse(node1.isFunction());
1252:       assertFalse(node1.isCast());
1253:       assertNull(string0);
1254:       assertNotSame(node0, node1);
1255:       assertNotSame(node1, node0);
1256:       assertFalse(node0.equals((Object)node1));
1257:       assertFalse(node1.equals((Object)node0));
1258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1259:       assertEquals(54, Node.SLASH_V);
1260:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1261:       assertEquals(52, Node.LENGTH);
1262:       assertEquals(40, Node.ORIGINALNAME_PROP);
1263:       assertEquals(49, Node.DIRECT_EVAL);
1264:       assertEquals(50, Node.FREE_CALL);
1265:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1266:       assertEquals(46, Node.IS_NAMESPACE);
1267:       assertEquals(57, Node.REFLECTED_OBJECT);
1268:       assertEquals(48, Node.DIRECTIVES);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(37, Node.OPT_ARG_NAME);
1271:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1272:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1273:       assertEquals(4095, Node.COLUMN_MASK);
1274:       assertEquals(1, Node.DECR_FLAG);
1275:       assertEquals(12, Node.COLUMN_BITS);
1276:       assertEquals(32, Node.INCRDECR_PROP);
1277:       assertEquals(53, Node.INPUT_ID);
1278:       assertEquals(36, Node.QUOTED_PROP);
1279:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1280:       assertEquals(56, Node.CHANGE_TIME);
1281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1282:       assertEquals(43, Node.IS_CONSTANT_NAME);
1283:       assertEquals(2, Node.POST_FLAG);
1284:       assertEquals(39, Node.EMPTY_BLOCK);
1285:       assertEquals(55, Node.INFERRED_FUNCTION);
1286:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1287:       assertEquals(8, Node.FLAG_NO_THROWS);
1288:       assertEquals(29, Node.JSDOC_INFO_PROP);
1289:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1290:       assertEquals(30, Node.VAR_ARGS_NAME);
1291:       assertEquals(57, Node.LAST_PROP);
1292:       assertEquals(47, Node.IS_DISPATCHER);
1293:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1294:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1295:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1296:       assertEquals(36, Node.QUOTED_PROP);
1297:       assertEquals(56, Node.CHANGE_TIME);
1298:       assertEquals(43, Node.IS_CONSTANT_NAME);
1299:       assertEquals(37, Node.OPT_ARG_NAME);
1300:       assertEquals(32, Node.INCRDECR_PROP);
1301:       assertEquals(46, Node.IS_NAMESPACE);
1302:       assertEquals(4095, Node.COLUMN_MASK);
1303:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1304:       assertEquals(12, Node.COLUMN_BITS);
1305:       assertEquals(50, Node.FREE_CALL);
1306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1307:       assertEquals(1, Node.DECR_FLAG);
1308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1309:       assertEquals(52, Node.LENGTH);
1310:       assertEquals(54, Node.SLASH_V);
1311:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1312:       assertEquals(57, Node.REFLECTED_OBJECT);
1313:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1314:       assertEquals(30, Node.VAR_ARGS_NAME);
1315:       assertEquals(49, Node.DIRECT_EVAL);
1316:       assertEquals(40, Node.ORIGINALNAME_PROP);
1317:       assertEquals(48, Node.DIRECTIVES);
1318:       assertEquals(2, Node.POST_FLAG);
1319:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1320:       assertEquals(47, Node.IS_DISPATCHER);
1321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1322:       assertEquals(8, Node.FLAG_NO_THROWS);
1323:       assertEquals(57, Node.LAST_PROP);
1324:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1325:       assertEquals(55, Node.INFERRED_FUNCTION);
1326:       assertEquals(29, Node.JSDOC_INFO_PROP);
1327:       assertEquals(53, Node.INPUT_ID);
1328:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1329:       assertEquals(39, Node.EMPTY_BLOCK);
1330:       
1331:       boolean boolean1 = node0.isCast();
1332:       assertFalse(boolean1);
1333:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1334:       assertTrue(arrayList0.isEmpty());
1335:       assertEquals(0, arrayList0.size());
1336:       assertFalse(node0.isArrayLit());
1337:       assertFalse(node0.isEmpty());
1338:       assertFalse(node0.isGetterDef());
1339:       assertFalse(node0.isFunction());
1340:       assertFalse(node0.isRegExp());
1341:       assertFalse(node0.isFor());
1342:       assertFalse(node0.isTry());
1343:       assertFalse(node0.isDefaultCase());
1344:       assertFalse(node0.isCatch());
1345:       assertFalse(node0.isIn());
1346:       assertFalse(node0.isNull());
1347:       assertFalse(node0.isNE());
1348:       assertFalse(node0.isTrue());
1349:       assertFalse(node0.isName());
1350:       assertFalse(node0.isVoid());
1351:       assertFalse(node0.isDelProp());
1352:       assertFalse(node0.isIf());
1353:       assertFalse(node0.isVar());
1354:       assertFalse(node0.isHook());
1355:       assertFalse(node0.isAdd());
1356:       assertFalse(node0.isThis());
1357:       assertFalse(node0.isBlock());
1358:       assertFalse(node0.isCase());
1359:       assertFalse(node0.isNew());
1360:       assertFalse(node0.isDo());
1361:       assertEquals(0, node0.getChildCount());
1362:       assertFalse(node0.isLabel());
1363:       assertEquals((-1), node0.getCharno());
1364:       assertFalse(node0.isStringKey());
1365:       assertFalse(node0.isLabelName());
1366:       assertFalse(node0.isSwitch());
1367:       assertFalse(node0.hasOneChild());
1368:       assertFalse(node0.isCast());
1369:       assertFalse(node0.isGetElem());
1370:       assertFalse(node0.isAssign());
1371:       assertFalse(node0.isNumber());
1372:       assertFalse(node0.isScript());
1373:       assertFalse(node0.isTypeOf());
1374:       assertFalse(node0.isDec());
1375:       assertFalse(node0.hasChildren());
1376:       assertFalse(node0.isAssignAdd());
1377:       assertFalse(node0.isInstanceOf());
1378:       assertEquals((-1), node0.getLineno());
1379:       assertFalse(node0.isReturn());
1380:       assertFalse(node0.isOr());
1381:       assertEquals(83, node0.getType());
1382:       assertFalse(node0.hasMoreThanOneChild());
1383:       assertFalse(node0.isWith());
1384:       assertFalse(node0.isExprResult());
1385:       assertFalse(node0.isBreak());
1386:       assertFalse(node0.isCall());
1387:       assertFalse(node0.isFalse());
1388:       assertFalse(node0.isInc());
1389:       assertFalse(node0.isComma());
1390:       assertFalse(node0.isSetterDef());
1391:       assertFalse(node0.isGetProp());
1392:       assertFalse(node0.isThrow());
1393:       assertFalse(node0.isWhile());
1394:       assertTrue(node0.isParamList());
1395:       assertFalse(node0.isNot());
1396:       assertFalse(node0.isObjectLit());
1397:       assertFalse(node0.isContinue());
1398:       assertFalse(node0.isString());
1399:       assertEquals((-1), node0.getSourcePosition());
1400:       assertFalse(node0.isDebugger());
1401:       assertFalse(node0.isAnd());
1402:       assertNotSame(node0, node1);
1403:       assertTrue(boolean1 == boolean0);
1404:       assertFalse(node0.equals((Object)node1));
1405:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1406:       assertEquals(54, Node.SLASH_V);
1407:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1408:       assertEquals(52, Node.LENGTH);
1409:       assertEquals(40, Node.ORIGINALNAME_PROP);
1410:       assertEquals(49, Node.DIRECT_EVAL);
1411:       assertEquals(50, Node.FREE_CALL);
1412:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1413:       assertEquals(46, Node.IS_NAMESPACE);
1414:       assertEquals(57, Node.REFLECTED_OBJECT);
1415:       assertEquals(48, Node.DIRECTIVES);
1416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1417:       assertEquals(37, Node.OPT_ARG_NAME);
1418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1419:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1420:       assertEquals(4095, Node.COLUMN_MASK);
1421:       assertEquals(1, Node.DECR_FLAG);
1422:       assertEquals(12, Node.COLUMN_BITS);
1423:       assertEquals(32, Node.INCRDECR_PROP);
1424:       assertEquals(53, Node.INPUT_ID);
1425:       assertEquals(36, Node.QUOTED_PROP);
1426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1427:       assertEquals(56, Node.CHANGE_TIME);
1428:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1429:       assertEquals(43, Node.IS_CONSTANT_NAME);
1430:       assertEquals(2, Node.POST_FLAG);
1431:       assertEquals(39, Node.EMPTY_BLOCK);
1432:       assertEquals(55, Node.INFERRED_FUNCTION);
1433:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1434:       assertEquals(8, Node.FLAG_NO_THROWS);
1435:       assertEquals(29, Node.JSDOC_INFO_PROP);
1436:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1437:       assertEquals(30, Node.VAR_ARGS_NAME);
1438:       assertEquals(57, Node.LAST_PROP);
1439:       assertEquals(47, Node.IS_DISPATCHER);
1440:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1441:       
1442:       boolean boolean2 = node0.isDebugger();
1443:       assertFalse(boolean2);
1444:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1445:       assertTrue(arrayList0.isEmpty());
1446:       assertEquals(0, arrayList0.size());
1447:       assertFalse(node0.isArrayLit());
1448:       assertFalse(node0.isEmpty());
1449:       assertFalse(node0.isGetterDef());
1450:       assertFalse(node0.isFunction());
1451:       assertFalse(node0.isRegExp());
1452:       assertFalse(node0.isFor());
1453:       assertFalse(node0.isTry());
1454:       assertFalse(node0.isDefaultCase());
1455:       assertFalse(node0.isCatch());
1456:       assertFalse(node0.isIn());
1457:       assertFalse(node0.isNull());
1458:       assertFalse(node0.isNE());
1459:       assertFalse(node0.isTrue());
1460:       assertFalse(node0.isName());
1461:       assertFalse(node0.isVoid());
1462:       assertFalse(node0.isDelProp());
1463:       assertFalse(node0.isIf());
1464:       assertFalse(node0.isVar());
1465:       assertFalse(node0.isHook());
1466:       assertFalse(node0.isAdd());
1467:       assertFalse(node0.isThis());
1468:       assertFalse(node0.isBlock());
1469:       assertFalse(node0.isCase());
1470:       assertFalse(node0.isNew());
1471:       assertFalse(node0.isDo());
1472:       assertEquals(0, node0.getChildCount());
1473:       assertFalse(node0.isLabel());
1474:       assertEquals((-1), node0.getCharno());
1475:       assertFalse(node0.isStringKey());
1476:       assertFalse(node0.isLabelName());
1477:       assertFalse(node0.isSwitch());
1478:       assertFalse(node0.hasOneChild());
1479:       assertFalse(node0.isCast());
1480:       assertFalse(node0.isGetElem());
1481:       assertFalse(node0.isAssign());
1482:       assertFalse(node0.isNumber());
1483:       assertFalse(node0.isScript());
1484:       assertFalse(node0.isTypeOf());
1485:       assertFalse(node0.isDec());
1486:       assertFalse(node0.hasChildren());
1487:       assertFalse(node0.isAssignAdd());
1488:       assertFalse(node0.isInstanceOf());
1489:       assertEquals((-1), node0.getLineno());
1490:       assertFalse(node0.isReturn());
1491:       assertFalse(node0.isOr());
1492:       assertEquals(83, node0.getType());
1493:       assertFalse(node0.hasMoreThanOneChild());
1494:       assertFalse(node0.isWith());
1495:       assertFalse(node0.isExprResult());
1496:       assertFalse(node0.isBreak());
1497:       assertFalse(node0.isCall());
1498:       assertFalse(node0.isFalse());
1499:       assertFalse(node0.isInc());
1500:       assertFalse(node0.isComma());
1501:       assertFalse(node0.isSetterDef());
1502:       assertFalse(node0.isGetProp());
1503:       assertFalse(node0.isThrow());
1504:       assertFalse(node0.isWhile());
1505:       assertTrue(node0.isParamList());
1506:       assertFalse(node0.isNot());
1507:       assertFalse(node0.isObjectLit());
1508:       assertFalse(node0.isContinue());
1509:       assertFalse(node0.isString());
1510:       assertEquals((-1), node0.getSourcePosition());
1511:       assertFalse(node0.isDebugger());
1512:       assertFalse(node0.isAnd());
1513:       assertNotSame(node0, node1);
1514:       assertTrue(boolean2 == boolean0);
1515:       assertTrue(boolean2 == boolean1);
1516:       assertFalse(node0.equals((Object)node1));
1517:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1518:       assertEquals(54, Node.SLASH_V);
1519:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1520:       assertEquals(52, Node.LENGTH);
1521:       assertEquals(40, Node.ORIGINALNAME_PROP);
1522:       assertEquals(49, Node.DIRECT_EVAL);
1523:       assertEquals(50, Node.FREE_CALL);
1524:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1525:       assertEquals(46, Node.IS_NAMESPACE);
1526:       assertEquals(57, Node.REFLECTED_OBJECT);
1527:       assertEquals(48, Node.DIRECTIVES);
1528:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1529:       assertEquals(37, Node.OPT_ARG_NAME);
1530:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1532:       assertEquals(4095, Node.COLUMN_MASK);
1533:       assertEquals(1, Node.DECR_FLAG);
1534:       assertEquals(12, Node.COLUMN_BITS);
1535:       assertEquals(32, Node.INCRDECR_PROP);
1536:       assertEquals(53, Node.INPUT_ID);
1537:       assertEquals(36, Node.QUOTED_PROP);
1538:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1539:       assertEquals(56, Node.CHANGE_TIME);
1540:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1541:       assertEquals(43, Node.IS_CONSTANT_NAME);
1542:       assertEquals(2, Node.POST_FLAG);
1543:       assertEquals(39, Node.EMPTY_BLOCK);
1544:       assertEquals(55, Node.INFERRED_FUNCTION);
1545:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1546:       assertEquals(8, Node.FLAG_NO_THROWS);
1547:       assertEquals(29, Node.JSDOC_INFO_PROP);
1548:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1549:       assertEquals(30, Node.VAR_ARGS_NAME);
1550:       assertEquals(57, Node.LAST_PROP);
1551:       assertEquals(47, Node.IS_DISPATCHER);
1552:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1553:       
1554:       int int0 = Node.mergeLineCharNo((byte) (-12), 8);
1555:       assertEquals((-1), int0);
1556:       
1557:       boolean boolean3 = node0.isAnd();
1558:       assertFalse(boolean3);
1559:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1560:       assertTrue(arrayList0.isEmpty());
1561:       assertEquals(0, arrayList0.size());
1562:       assertFalse(node0.isArrayLit());
1563:       assertFalse(node0.isEmpty());
1564:       assertFalse(node0.isGetterDef());
1565:       assertFalse(node0.isFunction());
1566:       assertFalse(node0.isRegExp());
1567:       assertFalse(node0.isFor());
1568:       assertFalse(node0.isTry());
1569:       assertFalse(node0.isDefaultCase());
1570:       assertFalse(node0.isCatch());
1571:       assertFalse(node0.isIn());
1572:       assertFalse(node0.isNull());
1573:       assertFalse(node0.isNE());
1574:       assertFalse(node0.isTrue());
1575:       assertFalse(node0.isName());
1576:       assertFalse(node0.isVoid());
1577:       assertFalse(node0.isDelProp());
1578:       assertFalse(node0.isIf());
1579:       assertFalse(node0.isVar());
1580:       assertFalse(node0.isHook());
1581:       assertFalse(node0.isAdd());
1582:       assertFalse(node0.isThis());
1583:       assertFalse(node0.isBlock());
1584:       assertFalse(node0.isCase());
1585:       assertFalse(node0.isNew());
1586:       assertFalse(node0.isDo());
1587:       assertEquals(0, node0.getChildCount());
1588:       assertFalse(node0.isLabel());
1589:       assertEquals((-1), node0.getCharno());
1590:       assertFalse(node0.isStringKey());
1591:       assertFalse(node0.isLabelName());
1592:       assertFalse(node0.isSwitch());
1593:       assertFalse(node0.hasOneChild());
1594:       assertFalse(node0.isCast());
1595:       assertFalse(node0.isGetElem());
1596:       assertFalse(node0.isAssign());
1597:       assertFalse(node0.isNumber());
1598:       assertFalse(node0.isScript());
1599:       assertFalse(node0.isTypeOf());
1600:       assertFalse(node0.isDec());
1601:       assertFalse(node0.hasChildren());
1602:       assertFalse(node0.isAssignAdd());
1603:       assertFalse(node0.isInstanceOf());
1604:       assertEquals((-1), node0.getLineno());
1605:       assertFalse(node0.isReturn());
1606:       assertFalse(node0.isOr());
1607:       assertEquals(83, node0.getType());
1608:       assertFalse(node0.hasMoreThanOneChild());
1609:       assertFalse(node0.isWith());
1610:       assertFalse(node0.isExprResult());
1611:       assertFalse(node0.isBreak());
1612:       assertFalse(node0.isCall());
1613:       assertFalse(node0.isFalse());
1614:       assertFalse(node0.isInc());
1615:       assertFalse(node0.isComma());
1616:       assertFalse(node0.isSetterDef());
1617:       assertFalse(node0.isGetProp());
1618:       assertFalse(node0.isThrow());
1619:       assertFalse(node0.isWhile());
1620:       assertTrue(node0.isParamList());
1621:       assertFalse(node0.isNot());
1622:       assertFalse(node0.isObjectLit());
1623:       assertFalse(node0.isContinue());
1624:       assertFalse(node0.isString());
1625:       assertEquals((-1), node0.getSourcePosition());
1626:       assertFalse(node0.isDebugger());
1627:       assertFalse(node0.isAnd());
1628:       assertNotSame(node0, node1);
1629:       assertTrue(boolean3 == boolean1);
1630:       assertTrue(boolean3 == boolean2);
1631:       assertTrue(boolean3 == boolean0);
1632:       assertFalse(node0.equals((Object)node1));
1633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1634:       assertEquals(54, Node.SLASH_V);
1635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1636:       assertEquals(52, Node.LENGTH);
1637:       assertEquals(40, Node.ORIGINALNAME_PROP);
1638:       assertEquals(49, Node.DIRECT_EVAL);
1639:       assertEquals(50, Node.FREE_CALL);
1640:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1641:       assertEquals(46, Node.IS_NAMESPACE);
1642:       assertEquals(57, Node.REFLECTED_OBJECT);
1643:       assertEquals(48, Node.DIRECTIVES);
1644:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1645:       assertEquals(37, Node.OPT_ARG_NAME);
1646:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1647:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1648:       assertEquals(4095, Node.COLUMN_MASK);
1649:       assertEquals(1, Node.DECR_FLAG);
1650:       assertEquals(12, Node.COLUMN_BITS);
1651:       assertEquals(32, Node.INCRDECR_PROP);
1652:       assertEquals(53, Node.INPUT_ID);
1653:       assertEquals(36, Node.QUOTED_PROP);
1654:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1655:       assertEquals(56, Node.CHANGE_TIME);
1656:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1657:       assertEquals(43, Node.IS_CONSTANT_NAME);
1658:       assertEquals(2, Node.POST_FLAG);
1659:       assertEquals(39, Node.EMPTY_BLOCK);
1660:       assertEquals(55, Node.INFERRED_FUNCTION);
1661:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1662:       assertEquals(8, Node.FLAG_NO_THROWS);
1663:       assertEquals(29, Node.JSDOC_INFO_PROP);
1664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1665:       assertEquals(30, Node.VAR_ARGS_NAME);
1666:       assertEquals(57, Node.LAST_PROP);
1667:       assertEquals(47, Node.IS_DISPATCHER);
1668:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1669:       
1670:       Node node2 = node0.useSourceInfoFrom(node1);
1671:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1672:       assertTrue(arrayList0.isEmpty());
1673:       assertEquals(0, arrayList0.size());
1674:       assertFalse(node0.isArrayLit());
1675:       assertFalse(node0.isEmpty());
1676:       assertFalse(node0.isGetterDef());
1677:       assertFalse(node0.isFunction());
1678:       assertFalse(node0.isRegExp());
1679:       assertFalse(node0.isFor());
1680:       assertFalse(node0.isTry());
1681:       assertFalse(node0.isDefaultCase());
1682:       assertFalse(node0.isCatch());
1683:       assertFalse(node0.isIn());
1684:       assertFalse(node0.isNull());
1685:       assertFalse(node0.isNE());
1686:       assertFalse(node0.isTrue());
1687:       assertFalse(node0.isName());
1688:       assertFalse(node0.isVoid());
1689:       assertFalse(node0.isDelProp());
1690:       assertFalse(node0.isIf());
1691:       assertFalse(node0.isVar());
1692:       assertFalse(node0.isHook());
1693:       assertFalse(node0.isAdd());
1694:       assertFalse(node0.isThis());
1695:       assertFalse(node0.isBlock());
1696:       assertFalse(node0.isCase());
1697:       assertFalse(node0.isNew());
1698:       assertFalse(node0.isDo());
1699:       assertEquals(0, node0.getChildCount());
1700:       assertFalse(node0.isLabel());
1701:       assertEquals((-1), node0.getCharno());
1702:       assertFalse(node0.isStringKey());
1703:       assertFalse(node0.isLabelName());
1704:       assertFalse(node0.isSwitch());
1705:       assertFalse(node0.hasOneChild());
1706:       assertFalse(node0.isCast());
1707:       assertFalse(node0.isGetElem());
1708:       assertFalse(node0.isAssign());
1709:       assertFalse(node0.isNumber());
1710:       assertFalse(node0.isScript());
1711:       assertFalse(node0.isTypeOf());
1712:       assertFalse(node0.isDec());
1713:       assertFalse(node0.hasChildren());
1714:       assertFalse(node0.isAssignAdd());
1715:       assertFalse(node0.isInstanceOf());
1716:       assertEquals((-1), node0.getLineno());
1717:       assertFalse(node0.isReturn());
1718:       assertFalse(node0.isOr());
1719:       assertEquals(83, node0.getType());
1720:       assertFalse(node0.hasMoreThanOneChild());
1721:       assertFalse(node0.isWith());
1722:       assertFalse(node0.isExprResult());
1723:       assertFalse(node0.isBreak());
1724:       assertFalse(node0.isCall());
1725:       assertFalse(node0.isFalse());
1726:       assertFalse(node0.isInc());
1727:       assertFalse(node0.isComma());
1728:       assertFalse(node0.isSetterDef());
1729:       assertFalse(node0.isGetProp());
1730:       assertFalse(node0.isThrow());
1731:       assertFalse(node0.isWhile());
1732:       assertTrue(node0.isParamList());
1733:       assertFalse(node0.isNot());
1734:       assertFalse(node0.isObjectLit());
1735:       assertFalse(node0.isContinue());
1736:       assertFalse(node0.isString());
1737:       assertEquals((-1), node0.getSourcePosition());
1738:       assertFalse(node0.isDebugger());
1739:       assertFalse(node0.isAnd());
1740:       assertFalse(node2.isBlock());
1741:       assertFalse(node2.isAdd());
1742:       assertFalse(node2.isNew());
1743:       assertFalse(node2.isVar());
1744:       assertFalse(node2.isWhile());
1745:       assertFalse(node2.isName());
1746:       assertFalse(node2.isCall());
1747:       assertFalse(node2.hasMoreThanOneChild());
1748:       assertFalse(node2.isContinue());
1749:       assertFalse(node2.isSetterDef());
1750:       assertFalse(node2.isLabel());
1751:       assertFalse(node2.isOr());
1752:       assertEquals((-1), node2.getLineno());
1753:       assertFalse(node2.isNull());
1754:       assertFalse(node2.isAssignAdd());
1755:       assertFalse(node2.isDo());
1756:       assertFalse(node2.isTry());
1757:       assertFalse(node2.isDefaultCase());
1758:       assertFalse(node2.hasOneChild());
1759:       assertFalse(node2.isFor());
1760:       assertFalse(node2.isLabelName());
1761:       assertFalse(node2.isArrayLit());
1762:       assertFalse(node2.isInstanceOf());
1763:       assertEquals(0, node2.getChildCount());
1764:       assertFalse(node2.isRegExp());
1765:       assertFalse(node2.isCatch());
1766:       assertFalse(node2.isWith());
1767:       assertFalse(node2.isThis());
1768:       assertFalse(node2.isStringKey());
1769:       assertFalse(node2.isCase());
1770:       assertFalse(node2.isNumber());
1771:       assertFalse(node2.isGetterDef());
1772:       assertFalse(node2.isScript());
1773:       assertFalse(node2.isInc());
1774:       assertEquals((-1), node2.getCharno());
1775:       assertFalse(node2.isHook());
1776:       assertFalse(node2.isSwitch());
1777:       assertFalse(node2.isThrow());
1778:       assertFalse(node2.isFalse());
1779:       assertFalse(node2.isBreak());
1780:       assertFalse(node2.isIf());
1781:       assertFalse(node2.isDelProp());
1782:       assertFalse(node2.isNE());
1783:       assertFalse(node2.isIn());
1784:       assertFalse(node2.isEmpty());
1785:       assertEquals(83, node2.getType());
1786:       assertFalse(node2.isVoid());
1787:       assertFalse(node2.isTrue());
1788:       assertFalse(node2.isFunction());
1789:       assertFalse(node2.isExprResult());
1790:       assertFalse(node2.isDebugger());
1791:       assertFalse(node2.isGetElem());
1792:       assertFalse(node2.isAssign());
1793:       assertFalse(node2.isDec());
1794:       assertFalse(node2.isTypeOf());
1795:       assertFalse(node2.isCast());
1796:       assertFalse(node2.isGetProp());
1797:       assertFalse(node2.isComma());
1798:       assertEquals((-1), node2.getSourcePosition());
1799:       assertFalse(node2.hasChildren());
1800:       assertFalse(node2.isReturn());
1801:       assertFalse(node2.isAnd());
1802:       assertFalse(node2.isObjectLit());
1803:       assertFalse(node2.isNot());
1804:       assertTrue(node2.isParamList());
1805:       assertFalse(node2.isString());
1806:       assertFalse(node1.isStringKey());
1807:       assertFalse(node1.isName());
1808:       assertFalse(node1.isVar());
1809:       assertFalse(node1.isBlock());
1810:       assertFalse(node1.isNull());
1811:       assertFalse(node1.isNew());
1812:       assertFalse(node1.isSetterDef());
1813:       assertFalse(node1.isAdd());
1814:       assertFalse(node1.hasMoreThanOneChild());
1815:       assertFalse(node1.isWhile());
1816:       assertFalse(node1.isTrue());
1817:       assertFalse(node1.isReturn());
1818:       assertFalse(node1.isVoid());
1819:       assertFalse(node1.isRegExp());
1820:       assertFalse(node1.isTypeOf());
1821:       assertEquals((-1), node1.getLineno());
1822:       assertFalse(node1.isCatch());
1823:       assertFalse(node1.isCall());
1824:       assertFalse(node1.isGetElem());
1825:       assertFalse(node1.isLabelName());
1826:       assertFalse(node1.isGetterDef());
1827:       assertFalse(node1.isDelProp());
1828:       assertFalse(node1.isFor());
1829:       assertFalse(node1.isTry());
1830:       assertFalse(node1.isAssignAdd());
1831:       assertFalse(node1.isOr());
1832:       assertFalse(node1.isNumber());
1833:       assertFalse(node1.isEmpty());
1834:       assertFalse(node1.isScript());
1835:       assertFalse(node1.isDo());
1836:       assertFalse(node1.isDefaultCase());
1837:       assertFalse(node1.isLabel());
1838:       assertFalse(node1.isParamList());
1839:       assertFalse(node1.isSwitch());
1840:       assertFalse(node1.isArrayLit());
1841:       assertFalse(node1.isThrow());
1842:       assertFalse(node1.isFalse());
1843:       assertFalse(node1.isHook());
1844:       assertFalse(node1.isThis());
1845:       assertFalse(node1.isGetProp());
1846:       assertEquals((-1), node1.getCharno());
1847:       assertFalse(node1.isString());
1848:       assertFalse(node1.isInc());
1849:       assertFalse(node1.isCase());
1850:       assertFalse(node1.isWith());
1851:       assertEquals(1, node1.getChildCount());
1852:       assertFalse(node1.isComma());
1853:       assertFalse(node1.isInstanceOf());
1854:       assertFalse(node1.isBreak());
1855:       assertTrue(node1.hasChildren());
1856:       assertFalse(node1.isExprResult());
1857:       assertFalse(node1.isAssign());
1858:       assertFalse(node1.isIf());
1859:       assertFalse(node1.isDec());
1860:       assertEquals((-1), node1.getSourcePosition());
1861:       assertFalse(node1.isNE());
1862:       assertTrue(node1.hasOneChild());
1863:       assertFalse(node1.isDebugger());
1864:       assertFalse(node1.isIn());
1865:       assertFalse(node1.isAnd());
1866:       assertFalse(node1.isContinue());
1867:       assertFalse(node1.isNot());
1868:       assertFalse(node1.isObjectLit());
1869:       assertEquals(1056, node1.getType());
1870:       assertFalse(node1.isFunction());
1871:       assertFalse(node1.isCast());
1872:       assertNotNull(node2);
1873:       assertNotSame(node0, node1);
1874:       assertSame(node0, node2);
1875:       assertNotSame(node2, node1);
1876:       assertSame(node2, node0);
1877:       assertNotSame(node1, node2);
1878:       assertNotSame(node1, node0);
1879:       assertFalse(node0.equals((Object)node1));
1880:       assertFalse(node2.equals((Object)node1));
1881:       assertFalse(node1.equals((Object)node0));
1882:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1883:       assertEquals(54, Node.SLASH_V);
1884:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1885:       assertEquals(52, Node.LENGTH);
1886:       assertEquals(40, Node.ORIGINALNAME_PROP);
1887:       assertEquals(49, Node.DIRECT_EVAL);
1888:       assertEquals(50, Node.FREE_CALL);
1889:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1890:       assertEquals(46, Node.IS_NAMESPACE);
1891:       assertEquals(57, Node.REFLECTED_OBJECT);
1892:       assertEquals(48, Node.DIRECTIVES);
1893:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1894:       assertEquals(37, Node.OPT_ARG_NAME);
1895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1896:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1897:       assertEquals(4095, Node.COLUMN_MASK);
1898:       assertEquals(1, Node.DECR_FLAG);
1899:       assertEquals(12, Node.COLUMN_BITS);
1900:       assertEquals(32, Node.INCRDECR_PROP);
1901:       assertEquals(53, Node.INPUT_ID);
1902:       assertEquals(36, Node.QUOTED_PROP);
1903:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1904:       assertEquals(56, Node.CHANGE_TIME);
1905:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1906:       assertEquals(43, Node.IS_CONSTANT_NAME);
1907:       assertEquals(2, Node.POST_FLAG);
1908:       assertEquals(39, Node.EMPTY_BLOCK);
1909:       assertEquals(55, Node.INFERRED_FUNCTION);
1910:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1911:       assertEquals(8, Node.FLAG_NO_THROWS);
1912:       assertEquals(29, Node.JSDOC_INFO_PROP);
1913:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1914:       assertEquals(30, Node.VAR_ARGS_NAME);
1915:       assertEquals(57, Node.LAST_PROP);
1916:       assertEquals(47, Node.IS_DISPATCHER);
1917:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1918:       assertEquals(36, Node.QUOTED_PROP);
1919:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1920:       assertEquals(43, Node.IS_CONSTANT_NAME);
1921:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1922:       assertEquals(8, Node.FLAG_NO_THROWS);
1923:       assertEquals(39, Node.EMPTY_BLOCK);
1924:       assertEquals(29, Node.JSDOC_INFO_PROP);
1925:       assertEquals(53, Node.INPUT_ID);
1926:       assertEquals(55, Node.INFERRED_FUNCTION);
1927:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1928:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1929:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1930:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1931:       assertEquals(56, Node.CHANGE_TIME);
1932:       assertEquals(48, Node.DIRECTIVES);
1933:       assertEquals(37, Node.OPT_ARG_NAME);
1934:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1935:       assertEquals(4095, Node.COLUMN_MASK);
1936:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1937:       assertEquals(57, Node.LAST_PROP);
1938:       assertEquals(49, Node.DIRECT_EVAL);
1939:       assertEquals(30, Node.VAR_ARGS_NAME);
1940:       assertEquals(1, Node.DECR_FLAG);
1941:       assertEquals(54, Node.SLASH_V);
1942:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1943:       assertEquals(12, Node.COLUMN_BITS);
1944:       assertEquals(32, Node.INCRDECR_PROP);
1945:       assertEquals(46, Node.IS_NAMESPACE);
1946:       assertEquals(52, Node.LENGTH);
1947:       assertEquals(57, Node.REFLECTED_OBJECT);
1948:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1949:       assertEquals(47, Node.IS_DISPATCHER);
1950:       assertEquals(50, Node.FREE_CALL);
1951:       assertEquals(2, Node.POST_FLAG);
1952:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1953:       assertEquals(40, Node.ORIGINALNAME_PROP);
1954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1955:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1956:       assertEquals(36, Node.QUOTED_PROP);
1957:       assertEquals(56, Node.CHANGE_TIME);
1958:       assertEquals(43, Node.IS_CONSTANT_NAME);
1959:       assertEquals(37, Node.OPT_ARG_NAME);
1960:       assertEquals(32, Node.INCRDECR_PROP);
1961:       assertEquals(46, Node.IS_NAMESPACE);
1962:       assertEquals(4095, Node.COLUMN_MASK);
1963:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1964:       assertEquals(12, Node.COLUMN_BITS);
1965:       assertEquals(50, Node.FREE_CALL);
1966:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1967:       assertEquals(1, Node.DECR_FLAG);
1968:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1969:       assertEquals(52, Node.LENGTH);
1970:       assertEquals(54, Node.SLASH_V);
1971:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1972:       assertEquals(57, Node.REFLECTED_OBJECT);
1973:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1974:       assertEquals(30, Node.VAR_ARGS_NAME);
1975:       assertEquals(49, Node.DIRECT_EVAL);
1976:       assertEquals(40, Node.ORIGINALNAME_PROP);
1977:       assertEquals(48, Node.DIRECTIVES);
1978:       assertEquals(2, Node.POST_FLAG);
1979:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1980:       assertEquals(47, Node.IS_DISPATCHER);
1981:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1982:       assertEquals(8, Node.FLAG_NO_THROWS);
1983:       assertEquals(57, Node.LAST_PROP);
1984:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1985:       assertEquals(55, Node.INFERRED_FUNCTION);
1986:       assertEquals(29, Node.JSDOC_INFO_PROP);
1987:       assertEquals(53, Node.INPUT_ID);
1988:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1989:       assertEquals(39, Node.EMPTY_BLOCK);
1990:   }
1991: }
RegularFileObject[/tmp/EvoSuite_198_1628256063280/com/google/javascript/rhino/Node_198_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:03 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_198_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_198_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_198_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:21:03.694 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertNotNull(arrayList0);

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNotNull(node0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)116;
byteArray0[1] = (byte) (-12);
byteArray0[2] = (byte) (-115);
byteArray0[3] = (byte) (-115);
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertEquals(4, byteArray0.length);
assertArrayEquals(new byte[] {(byte)116, (byte) (-12), (byte) (-115), (byte) (-115)}, byteArray0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNotNull(iterable0);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node1 = new Node(1642, node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(1642, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(1642, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertNotNull(node_NodeMismatch0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node1.setType(1056);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

node1.putProp(184, arrayList0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

String string0 = node1.getSourceFileName();
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertNull(string0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);

boolean boolean1 = node0.isCast();
assertFalse(boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNotSame(node0, node1);
assertTrue(boolean1 == boolean0);
assertFalse(node0.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

boolean boolean2 = node0.isDebugger();
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNotSame(node0, node1);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

int int0 = Node.mergeLineCharNo((byte) (-12), 8);
assertEquals((-1), int0);

boolean boolean3 = node0.isAnd();
assertFalse(boolean3);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertNotSame(node0, node1);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean0);
assertFalse(node0.equals((Object)node1));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);

Node node2 = node0.useSourceInfoFrom(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isArrayLit());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isCatch());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isVar());
assertFalse(node0.isHook());
assertFalse(node0.isAdd());
assertFalse(node0.isThis());
assertFalse(node0.isBlock());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isStringKey());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertEquals(83, node0.getType());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isComma());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertTrue(node0.isParamList());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDebugger());
assertFalse(node0.isAnd());
assertFalse(node2.isBlock());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isContinue());
assertFalse(node2.isSetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isNull());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isInstanceOf());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isWith());
assertFalse(node2.isThis());
assertFalse(node2.isStringKey());
assertFalse(node2.isCase());
assertFalse(node2.isNumber());
assertFalse(node2.isGetterDef());
assertFalse(node2.isScript());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isHook());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isIf());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isEmpty());
assertEquals(83, node2.getType());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isExprResult());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isCast());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertTrue(node2.isParamList());
assertFalse(node2.isString());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isBlock());
assertFalse(node1.isNull());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAdd());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isTrue());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isRegExp());
assertFalse(node1.isTypeOf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isFor());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNumber());
assertFalse(node1.isEmpty());
assertFalse(node1.isScript());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isLabel());
assertFalse(node1.isParamList());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isExprResult());
assertFalse(node1.isAssign());
assertFalse(node1.isIf());
assertFalse(node1.isDec());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNE());
assertTrue(node1.hasOneChild());
assertFalse(node1.isDebugger());
assertFalse(node1.isIn());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertEquals(1056, node1.getType());
assertFalse(node1.isFunction());
assertFalse(node1.isCast());
assertNotNull(node2);
assertNotSame(node0, node1);
assertSame(node0, node2);
assertNotSame(node2, node1);
assertSame(node2, node0);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);


[MASTER] 13:21:05.396 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_205_1628256065043/com/google/javascript/rhino/Node_205_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_205_1628256065043/com/google/javascript/rhino/Node_205_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:05.396 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:05.396 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:05.397 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 157
[MASTER] 13:21:05.398 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_205_1628256065043/com/google/javascript/rhino/Node_205_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:05 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.SimpleErrorReporter;
12: import com.google.javascript.rhino.jstype.JSType;
13: import com.google.javascript.rhino.jstype.JSTypeRegistry;
14: import java.util.ArrayList;
15: import java.util.List;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.evosuite.runtime.testdata.EvoSuiteFile;
19: import org.evosuite.runtime.testdata.FileSystemHandling;
20: import org.junit.runner.RunWith;
21: 
22: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
23: public class Node_205_tmp__ESTest extends Node_205_tmp__ESTest_scaffolding {
24: 
25:   @Test(timeout = 4000)
26:   public void test0()  throws Throwable  {
27:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
28:       assertNotNull(simpleErrorReporter0);
29:       
30:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
31:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
32:       assertNotNull(jSTypeRegistry0);
33:       
34:       ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
35:       assertTrue(arrayList0.isEmpty());
36:       assertEquals(0, arrayList0.size());
37:       assertNotNull(arrayList0);
38:       
39:       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
40:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
41:       assertTrue(arrayList0.isEmpty());
42:       assertEquals(0, arrayList0.size());
43:       assertFalse(node0.isFalse());
44:       assertFalse(node0.isThrow());
45:       assertFalse(node0.isBreak());
46:       assertFalse(node0.isHook());
47:       assertFalse(node0.isInc());
48:       assertEquals((-1), node0.getCharno());
49:       assertFalse(node0.isGetProp());
50:       assertTrue(node0.isParamList());
51:       assertFalse(node0.isString());
52:       assertEquals(83, node0.getType());
53:       assertFalse(node0.isCase());
54:       assertFalse(node0.isThis());
55:       assertFalse(node0.isExprResult());
56:       assertFalse(node0.isComma());
57:       assertFalse(node0.isInstanceOf());
58:       assertFalse(node0.isWith());
59:       assertFalse(node0.isGetElem());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isFor());
62:       assertFalse(node0.isLabelName());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.hasOneChild());
65:       assertFalse(node0.isDelProp());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isOr());
68:       assertFalse(node0.isTrue());
69:       assertFalse(node0.isNumber());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.isScript());
72:       assertFalse(node0.isDo());
73:       assertFalse(node0.isSwitch());
74:       assertFalse(node0.isDefaultCase());
75:       assertFalse(node0.isAssignAdd());
76:       assertFalse(node0.isLabel());
77:       assertEquals(0, node0.getChildCount());
78:       assertFalse(node0.isStringKey());
79:       assertFalse(node0.isName());
80:       assertFalse(node0.isCall());
81:       assertFalse(node0.isNull());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isNew());
84:       assertFalse(node0.isAdd());
85:       assertFalse(node0.isSetterDef());
86:       assertFalse(node0.isWhile());
87:       assertFalse(node0.isBlock());
88:       assertFalse(node0.isVoid());
89:       assertEquals((-1), node0.getLineno());
90:       assertFalse(node0.isReturn());
91:       assertFalse(node0.isDec());
92:       assertFalse(node0.isTypeOf());
93:       assertFalse(node0.isRegExp());
94:       assertFalse(node0.hasMoreThanOneChild());
95:       assertFalse(node0.isCatch());
96:       assertFalse(node0.isAssign());
97:       assertFalse(node0.hasChildren());
98:       assertFalse(node0.isNE());
99:       assertFalse(node0.isIf());
100:       assertFalse(node0.isDebugger());
101:       assertEquals((-1), node0.getSourcePosition());
102:       assertFalse(node0.isIn());
103:       assertFalse(node0.isNot());
104:       assertFalse(node0.isObjectLit());
105:       assertFalse(node0.isAnd());
106:       assertFalse(node0.isCast());
107:       assertFalse(node0.isFunction());
108:       assertFalse(node0.isContinue());
109:       assertNotNull(node0);
110:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
111:       assertEquals(43, Node.IS_CONSTANT_NAME);
112:       assertEquals(47, Node.IS_DISPATCHER);
113:       assertEquals(2, Node.POST_FLAG);
114:       assertEquals(37, Node.OPT_ARG_NAME);
115:       assertEquals(4095, Node.COLUMN_MASK);
116:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
117:       assertEquals(32, Node.INCRDECR_PROP);
118:       assertEquals(46, Node.IS_NAMESPACE);
119:       assertEquals(51, Node.STATIC_SOURCE_FILE);
120:       assertEquals(1, Node.DECR_FLAG);
121:       assertEquals(12, Node.COLUMN_BITS);
122:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
125:       assertEquals(57, Node.REFLECTED_OBJECT);
126:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
127:       assertEquals(54, Node.SLASH_V);
128:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
129:       assertEquals(30, Node.VAR_ARGS_NAME);
130:       assertEquals(49, Node.DIRECT_EVAL);
131:       assertEquals(40, Node.ORIGINALNAME_PROP);
132:       assertEquals(48, Node.DIRECTIVES);
133:       assertEquals(56, Node.CHANGE_TIME);
134:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(15, Node.NO_SIDE_EFFECTS);
137:       assertEquals(36, Node.QUOTED_PROP);
138:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(39, Node.EMPTY_BLOCK);
141:       assertEquals(53, Node.INPUT_ID);
142:       assertEquals(55, Node.INFERRED_FUNCTION);
143:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(52, Node.LENGTH);
146:       
147:       byte[] byteArray0 = new byte[4];
148:       byteArray0[0] = (byte)116;
149:       byteArray0[1] = (byte) (-12);
150:       byteArray0[3] = (byte) (-115);
151:       boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
152:       assertFalse(boolean0);
153:       assertEquals(4, byteArray0.length);
154:       assertArrayEquals(new byte[] {(byte)116, (byte) (-12), (byte)0, (byte) (-115)}, byteArray0);
155:       
156:       Iterable<Node> iterable0 = node0.children();
157:       assertFalse(iterable0.contains(node0));
158:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
159:       assertTrue(arrayList0.isEmpty());
160:       assertEquals(0, arrayList0.size());
161:       assertFalse(node0.isFalse());
162:       assertFalse(node0.isThrow());
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isHook());
165:       assertFalse(node0.isInc());
166:       assertEquals((-1), node0.getCharno());
167:       assertFalse(node0.isGetProp());
168:       assertTrue(node0.isParamList());
169:       assertFalse(node0.isString());
170:       assertEquals(83, node0.getType());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isThis());
173:       assertFalse(node0.isExprResult());
174:       assertFalse(node0.isComma());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isGetElem());
178:       assertFalse(node0.isEmpty());
179:       assertFalse(node0.isFor());
180:       assertFalse(node0.isLabelName());
181:       assertFalse(node0.isArrayLit());
182:       assertFalse(node0.hasOneChild());
183:       assertFalse(node0.isDelProp());
184:       assertFalse(node0.isTry());
185:       assertFalse(node0.isOr());
186:       assertFalse(node0.isTrue());
187:       assertFalse(node0.isNumber());
188:       assertFalse(node0.isGetterDef());
189:       assertFalse(node0.isScript());
190:       assertFalse(node0.isDo());
191:       assertFalse(node0.isSwitch());
192:       assertFalse(node0.isDefaultCase());
193:       assertFalse(node0.isAssignAdd());
194:       assertFalse(node0.isLabel());
195:       assertEquals(0, node0.getChildCount());
196:       assertFalse(node0.isStringKey());
197:       assertFalse(node0.isName());
198:       assertFalse(node0.isCall());
199:       assertFalse(node0.isNull());
200:       assertFalse(node0.isVar());
201:       assertFalse(node0.isNew());
202:       assertFalse(node0.isAdd());
203:       assertFalse(node0.isSetterDef());
204:       assertFalse(node0.isWhile());
205:       assertFalse(node0.isBlock());
206:       assertFalse(node0.isVoid());
207:       assertEquals((-1), node0.getLineno());
208:       assertFalse(node0.isReturn());
209:       assertFalse(node0.isDec());
210:       assertFalse(node0.isTypeOf());
211:       assertFalse(node0.isRegExp());
212:       assertFalse(node0.hasMoreThanOneChild());
213:       assertFalse(node0.isCatch());
214:       assertFalse(node0.isAssign());
215:       assertFalse(node0.hasChildren());
216:       assertFalse(node0.isNE());
217:       assertFalse(node0.isIf());
218:       assertFalse(node0.isDebugger());
219:       assertEquals((-1), node0.getSourcePosition());
220:       assertFalse(node0.isIn());
221:       assertFalse(node0.isNot());
222:       assertFalse(node0.isObjectLit());
223:       assertFalse(node0.isAnd());
224:       assertFalse(node0.isCast());
225:       assertFalse(node0.isFunction());
226:       assertFalse(node0.isContinue());
227:       assertNotNull(iterable0);
228:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
229:       assertEquals(43, Node.IS_CONSTANT_NAME);
230:       assertEquals(47, Node.IS_DISPATCHER);
231:       assertEquals(2, Node.POST_FLAG);
232:       assertEquals(37, Node.OPT_ARG_NAME);
233:       assertEquals(4095, Node.COLUMN_MASK);
234:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
235:       assertEquals(32, Node.INCRDECR_PROP);
236:       assertEquals(46, Node.IS_NAMESPACE);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(12, Node.COLUMN_BITS);
240:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
243:       assertEquals(57, Node.REFLECTED_OBJECT);
244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
245:       assertEquals(54, Node.SLASH_V);
246:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
247:       assertEquals(30, Node.VAR_ARGS_NAME);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(40, Node.ORIGINALNAME_PROP);
250:       assertEquals(48, Node.DIRECTIVES);
251:       assertEquals(56, Node.CHANGE_TIME);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(57, Node.LAST_PROP);
254:       assertEquals(15, Node.NO_SIDE_EFFECTS);
255:       assertEquals(36, Node.QUOTED_PROP);
256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(39, Node.EMPTY_BLOCK);
259:       assertEquals(53, Node.INPUT_ID);
260:       assertEquals(55, Node.INFERRED_FUNCTION);
261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
262:       assertEquals(29, Node.JSDOC_INFO_PROP);
263:       assertEquals(52, Node.LENGTH);
264:       
265:       Node node1 = new Node(1642, node0);
266:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
267:       assertTrue(arrayList0.isEmpty());
268:       assertEquals(0, arrayList0.size());
269:       assertFalse(node0.isFalse());
270:       assertFalse(node0.isThrow());
271:       assertFalse(node0.isBreak());
272:       assertFalse(node0.isHook());
273:       assertFalse(node0.isInc());
274:       assertEquals((-1), node0.getCharno());
275:       assertFalse(node0.isGetProp());
276:       assertTrue(node0.isParamList());
277:       assertFalse(node0.isString());
278:       assertEquals(83, node0.getType());
279:       assertFalse(node0.isCase());
280:       assertFalse(node0.isThis());
281:       assertFalse(node0.isExprResult());
282:       assertFalse(node0.isComma());
283:       assertFalse(node0.isInstanceOf());
284:       assertFalse(node0.isWith());
285:       assertFalse(node0.isGetElem());
286:       assertFalse(node0.isEmpty());
287:       assertFalse(node0.isFor());
288:       assertFalse(node0.isLabelName());
289:       assertFalse(node0.isArrayLit());
290:       assertFalse(node0.hasOneChild());
291:       assertFalse(node0.isDelProp());
292:       assertFalse(node0.isTry());
293:       assertFalse(node0.isOr());
294:       assertFalse(node0.isTrue());
295:       assertFalse(node0.isNumber());
296:       assertFalse(node0.isGetterDef());
297:       assertFalse(node0.isScript());
298:       assertFalse(node0.isDo());
299:       assertFalse(node0.isSwitch());
300:       assertFalse(node0.isDefaultCase());
301:       assertFalse(node0.isAssignAdd());
302:       assertFalse(node0.isLabel());
303:       assertEquals(0, node0.getChildCount());
304:       assertFalse(node0.isStringKey());
305:       assertFalse(node0.isName());
306:       assertFalse(node0.isCall());
307:       assertFalse(node0.isNull());
308:       assertFalse(node0.isVar());
309:       assertFalse(node0.isNew());
310:       assertFalse(node0.isAdd());
311:       assertFalse(node0.isSetterDef());
312:       assertFalse(node0.isWhile());
313:       assertFalse(node0.isBlock());
314:       assertFalse(node0.isVoid());
315:       assertEquals((-1), node0.getLineno());
316:       assertFalse(node0.isReturn());
317:       assertFalse(node0.isDec());
318:       assertFalse(node0.isTypeOf());
319:       assertFalse(node0.isRegExp());
320:       assertFalse(node0.hasMoreThanOneChild());
321:       assertFalse(node0.isCatch());
322:       assertFalse(node0.isAssign());
323:       assertFalse(node0.hasChildren());
324:       assertFalse(node0.isNE());
325:       assertFalse(node0.isIf());
326:       assertFalse(node0.isDebugger());
327:       assertEquals((-1), node0.getSourcePosition());
328:       assertFalse(node0.isIn());
329:       assertFalse(node0.isNot());
330:       assertFalse(node0.isObjectLit());
331:       assertFalse(node0.isAnd());
332:       assertFalse(node0.isCast());
333:       assertFalse(node0.isFunction());
334:       assertFalse(node0.isContinue());
335:       assertFalse(node1.isBlock());
336:       assertFalse(node1.isAdd());
337:       assertFalse(node1.isNew());
338:       assertFalse(node1.isVar());
339:       assertFalse(node1.isName());
340:       assertFalse(node1.isStringKey());
341:       assertFalse(node1.isContinue());
342:       assertFalse(node1.hasMoreThanOneChild());
343:       assertEquals((-1), node1.getLineno());
344:       assertFalse(node1.isCall());
345:       assertFalse(node1.isParamList());
346:       assertEquals((-1), node1.getSourcePosition());
347:       assertFalse(node1.isTypeOf());
348:       assertFalse(node1.isDec());
349:       assertFalse(node1.isReturn());
350:       assertFalse(node1.isWhile());
351:       assertFalse(node1.isNumber());
352:       assertFalse(node1.isVoid());
353:       assertFalse(node1.isTrue());
354:       assertFalse(node1.isGetElem());
355:       assertFalse(node1.isLabelName());
356:       assertFalse(node1.isAssign());
357:       assertFalse(node1.isDelProp());
358:       assertFalse(node1.isArrayLit());
359:       assertFalse(node1.isExprResult());
360:       assertFalse(node1.isOr());
361:       assertFalse(node1.isAssignAdd());
362:       assertFalse(node1.isNull());
363:       assertFalse(node1.isLabel());
364:       assertFalse(node1.isEmpty());
365:       assertFalse(node1.isDo());
366:       assertFalse(node1.isDefaultCase());
367:       assertFalse(node1.isSwitch());
368:       assertEquals((-1), node1.getCharno());
369:       assertFalse(node1.isHook());
370:       assertFalse(node1.isFalse());
371:       assertFalse(node1.isBreak());
372:       assertTrue(node1.hasChildren());
373:       assertFalse(node1.isThis());
374:       assertEquals(1, node1.getChildCount());
375:       assertTrue(node1.hasOneChild());
376:       assertFalse(node1.isComma());
377:       assertFalse(node1.isCase());
378:       assertFalse(node1.isFor());
379:       assertFalse(node1.isNot());
380:       assertFalse(node1.isGetterDef());
381:       assertFalse(node1.isObjectLit());
382:       assertFalse(node1.isString());
383:       assertFalse(node1.isScript());
384:       assertFalse(node1.isGetProp());
385:       assertFalse(node1.isTry());
386:       assertFalse(node1.isFunction());
387:       assertFalse(node1.isRegExp());
388:       assertFalse(node1.isDebugger());
389:       assertFalse(node1.isAnd());
390:       assertFalse(node1.isIf());
391:       assertFalse(node1.isWith());
392:       assertFalse(node1.isCatch());
393:       assertFalse(node1.isInstanceOf());
394:       assertFalse(node1.isCast());
395:       assertFalse(node1.isIn());
396:       assertEquals(1642, node1.getType());
397:       assertFalse(node1.isNE());
398:       assertFalse(node1.isThrow());
399:       assertFalse(node1.isInc());
400:       assertFalse(node1.isSetterDef());
401:       assertNotNull(node1);
402:       assertFalse(node1.equals((Object)node0));
403:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
404:       assertEquals(43, Node.IS_CONSTANT_NAME);
405:       assertEquals(47, Node.IS_DISPATCHER);
406:       assertEquals(2, Node.POST_FLAG);
407:       assertEquals(37, Node.OPT_ARG_NAME);
408:       assertEquals(4095, Node.COLUMN_MASK);
409:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
410:       assertEquals(32, Node.INCRDECR_PROP);
411:       assertEquals(46, Node.IS_NAMESPACE);
412:       assertEquals(51, Node.STATIC_SOURCE_FILE);
413:       assertEquals(1, Node.DECR_FLAG);
414:       assertEquals(12, Node.COLUMN_BITS);
415:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
416:       assertEquals(50, Node.FREE_CALL);
417:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
418:       assertEquals(57, Node.REFLECTED_OBJECT);
419:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
420:       assertEquals(54, Node.SLASH_V);
421:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
422:       assertEquals(30, Node.VAR_ARGS_NAME);
423:       assertEquals(49, Node.DIRECT_EVAL);
424:       assertEquals(40, Node.ORIGINALNAME_PROP);
425:       assertEquals(48, Node.DIRECTIVES);
426:       assertEquals(56, Node.CHANGE_TIME);
427:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
428:       assertEquals(57, Node.LAST_PROP);
429:       assertEquals(15, Node.NO_SIDE_EFFECTS);
430:       assertEquals(36, Node.QUOTED_PROP);
431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
432:       assertEquals(8, Node.FLAG_NO_THROWS);
433:       assertEquals(39, Node.EMPTY_BLOCK);
434:       assertEquals(53, Node.INPUT_ID);
435:       assertEquals(55, Node.INFERRED_FUNCTION);
436:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
437:       assertEquals(29, Node.JSDOC_INFO_PROP);
438:       assertEquals(52, Node.LENGTH);
439:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
440:       assertEquals(43, Node.IS_CONSTANT_NAME);
441:       assertEquals(36, Node.QUOTED_PROP);
442:       assertEquals(55, Node.INFERRED_FUNCTION);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
445:       assertEquals(53, Node.INPUT_ID);
446:       assertEquals(39, Node.EMPTY_BLOCK);
447:       assertEquals(47, Node.IS_DISPATCHER);
448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
449:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
450:       assertEquals(50, Node.FREE_CALL);
451:       assertEquals(2, Node.POST_FLAG);
452:       assertEquals(46, Node.IS_NAMESPACE);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(15, Node.NO_SIDE_EFFECTS);
455:       assertEquals(57, Node.LAST_PROP);
456:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
457:       assertEquals(54, Node.SLASH_V);
458:       assertEquals(30, Node.VAR_ARGS_NAME);
459:       assertEquals(51, Node.STATIC_SOURCE_FILE);
460:       assertEquals(12, Node.COLUMN_BITS);
461:       assertEquals(32, Node.INCRDECR_PROP);
462:       assertEquals(52, Node.LENGTH);
463:       assertEquals(1, Node.DECR_FLAG);
464:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
465:       assertEquals(56, Node.CHANGE_TIME);
466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
468:       assertEquals(8, Node.FLAG_NO_THROWS);
469:       assertEquals(57, Node.REFLECTED_OBJECT);
470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
471:       assertEquals(4095, Node.COLUMN_MASK);
472:       assertEquals(48, Node.DIRECTIVES);
473:       assertEquals(49, Node.DIRECT_EVAL);
474:       assertEquals(37, Node.OPT_ARG_NAME);
475:       
476:       Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
477:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
478:       assertTrue(arrayList0.isEmpty());
479:       assertEquals(0, arrayList0.size());
480:       assertFalse(node0.isFalse());
481:       assertFalse(node0.isThrow());
482:       assertFalse(node0.isBreak());
483:       assertFalse(node0.isHook());
484:       assertFalse(node0.isInc());
485:       assertEquals((-1), node0.getCharno());
486:       assertFalse(node0.isGetProp());
487:       assertTrue(node0.isParamList());
488:       assertFalse(node0.isString());
489:       assertEquals(83, node0.getType());
490:       assertFalse(node0.isCase());
491:       assertFalse(node0.isThis());
492:       assertFalse(node0.isExprResult());
493:       assertFalse(node0.isComma());
494:       assertFalse(node0.isInstanceOf());
495:       assertFalse(node0.isWith());
496:       assertFalse(node0.isGetElem());
497:       assertFalse(node0.isEmpty());
498:       assertFalse(node0.isFor());
499:       assertFalse(node0.isLabelName());
500:       assertFalse(node0.isArrayLit());
501:       assertFalse(node0.hasOneChild());
502:       assertFalse(node0.isDelProp());
503:       assertFalse(node0.isTry());
504:       assertFalse(node0.isOr());
505:       assertFalse(node0.isTrue());
506:       assertFalse(node0.isNumber());
507:       assertFalse(node0.isGetterDef());
508:       assertFalse(node0.isScript());
509:       assertFalse(node0.isDo());
510:       assertFalse(node0.isSwitch());
511:       assertFalse(node0.isDefaultCase());
512:       assertFalse(node0.isAssignAdd());
513:       assertFalse(node0.isLabel());
514:       assertEquals(0, node0.getChildCount());
515:       assertFalse(node0.isStringKey());
516:       assertFalse(node0.isName());
517:       assertFalse(node0.isCall());
518:       assertFalse(node0.isNull());
519:       assertFalse(node0.isVar());
520:       assertFalse(node0.isNew());
521:       assertFalse(node0.isAdd());
522:       assertFalse(node0.isSetterDef());
523:       assertFalse(node0.isWhile());
524:       assertFalse(node0.isBlock());
525:       assertFalse(node0.isVoid());
526:       assertEquals((-1), node0.getLineno());
527:       assertFalse(node0.isReturn());
528:       assertFalse(node0.isDec());
529:       assertFalse(node0.isTypeOf());
530:       assertFalse(node0.isRegExp());
531:       assertFalse(node0.hasMoreThanOneChild());
532:       assertFalse(node0.isCatch());
533:       assertFalse(node0.isAssign());
534:       assertFalse(node0.hasChildren());
535:       assertFalse(node0.isNE());
536:       assertFalse(node0.isIf());
537:       assertFalse(node0.isDebugger());
538:       assertEquals((-1), node0.getSourcePosition());
539:       assertFalse(node0.isIn());
540:       assertFalse(node0.isNot());
541:       assertFalse(node0.isObjectLit());
542:       assertFalse(node0.isAnd());
543:       assertFalse(node0.isCast());
544:       assertFalse(node0.isFunction());
545:       assertFalse(node0.isContinue());
546:       assertFalse(node1.isBlock());
547:       assertFalse(node1.isAdd());
548:       assertFalse(node1.isNew());
549:       assertFalse(node1.isVar());
550:       assertFalse(node1.isName());
551:       assertFalse(node1.isStringKey());
552:       assertFalse(node1.isContinue());
553:       assertFalse(node1.hasMoreThanOneChild());
554:       assertEquals((-1), node1.getLineno());
555:       assertFalse(node1.isCall());
556:       assertFalse(node1.isParamList());
557:       assertEquals((-1), node1.getSourcePosition());
558:       assertFalse(node1.isTypeOf());
559:       assertFalse(node1.isDec());
560:       assertFalse(node1.isReturn());
561:       assertFalse(node1.isWhile());
562:       assertFalse(node1.isNumber());
563:       assertFalse(node1.isVoid());
564:       assertFalse(node1.isTrue());
565:       assertFalse(node1.isGetElem());
566:       assertFalse(node1.isLabelName());
567:       assertFalse(node1.isAssign());
568:       assertFalse(node1.isDelProp());
569:       assertFalse(node1.isArrayLit());
570:       assertFalse(node1.isExprResult());
571:       assertFalse(node1.isOr());
572:       assertFalse(node1.isAssignAdd());
573:       assertFalse(node1.isNull());
574:       assertFalse(node1.isLabel());
575:       assertFalse(node1.isEmpty());
576:       assertFalse(node1.isDo());
577:       assertFalse(node1.isDefaultCase());
578:       assertFalse(node1.isSwitch());
579:       assertEquals((-1), node1.getCharno());
580:       assertFalse(node1.isHook());
581:       assertFalse(node1.isFalse());
582:       assertFalse(node1.isBreak());
583:       assertTrue(node1.hasChildren());
584:       assertFalse(node1.isThis());
585:       assertEquals(1, node1.getChildCount());
586:       assertTrue(node1.hasOneChild());
587:       assertFalse(node1.isComma());
588:       assertFalse(node1.isCase());
589:       assertFalse(node1.isFor());
590:       assertFalse(node1.isNot());
591:       assertFalse(node1.isGetterDef());
592:       assertFalse(node1.isObjectLit());
593:       assertFalse(node1.isString());
594:       assertFalse(node1.isScript());
595:       assertFalse(node1.isGetProp());
596:       assertFalse(node1.isTry());
597:       assertFalse(node1.isFunction());
598:       assertFalse(node1.isRegExp());
599:       assertFalse(node1.isDebugger());
600:       assertFalse(node1.isAnd());
601:       assertFalse(node1.isIf());
602:       assertFalse(node1.isWith());
603:       assertFalse(node1.isCatch());
604:       assertFalse(node1.isInstanceOf());
605:       assertFalse(node1.isCast());
606:       assertFalse(node1.isIn());
607:       assertEquals(1642, node1.getType());
608:       assertFalse(node1.isNE());
609:       assertFalse(node1.isThrow());
610:       assertFalse(node1.isInc());
611:       assertFalse(node1.isSetterDef());
612:       assertNotNull(node_NodeMismatch0);
613:       assertNotSame(node0, node1);
614:       assertNotSame(node1, node0);
615:       assertFalse(node0.equals((Object)node1));
616:       assertFalse(node1.equals((Object)node0));
617:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
618:       assertEquals(43, Node.IS_CONSTANT_NAME);
619:       assertEquals(47, Node.IS_DISPATCHER);
620:       assertEquals(2, Node.POST_FLAG);
621:       assertEquals(37, Node.OPT_ARG_NAME);
622:       assertEquals(4095, Node.COLUMN_MASK);
623:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
624:       assertEquals(32, Node.INCRDECR_PROP);
625:       assertEquals(46, Node.IS_NAMESPACE);
626:       assertEquals(51, Node.STATIC_SOURCE_FILE);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(12, Node.COLUMN_BITS);
629:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
630:       assertEquals(50, Node.FREE_CALL);
631:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
632:       assertEquals(57, Node.REFLECTED_OBJECT);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(54, Node.SLASH_V);
635:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
636:       assertEquals(30, Node.VAR_ARGS_NAME);
637:       assertEquals(49, Node.DIRECT_EVAL);
638:       assertEquals(40, Node.ORIGINALNAME_PROP);
639:       assertEquals(48, Node.DIRECTIVES);
640:       assertEquals(56, Node.CHANGE_TIME);
641:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
642:       assertEquals(57, Node.LAST_PROP);
643:       assertEquals(15, Node.NO_SIDE_EFFECTS);
644:       assertEquals(36, Node.QUOTED_PROP);
645:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
646:       assertEquals(8, Node.FLAG_NO_THROWS);
647:       assertEquals(39, Node.EMPTY_BLOCK);
648:       assertEquals(53, Node.INPUT_ID);
649:       assertEquals(55, Node.INFERRED_FUNCTION);
650:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
651:       assertEquals(29, Node.JSDOC_INFO_PROP);
652:       assertEquals(52, Node.LENGTH);
653:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
654:       assertEquals(43, Node.IS_CONSTANT_NAME);
655:       assertEquals(36, Node.QUOTED_PROP);
656:       assertEquals(55, Node.INFERRED_FUNCTION);
657:       assertEquals(29, Node.JSDOC_INFO_PROP);
658:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
659:       assertEquals(53, Node.INPUT_ID);
660:       assertEquals(39, Node.EMPTY_BLOCK);
661:       assertEquals(47, Node.IS_DISPATCHER);
662:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
663:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
664:       assertEquals(50, Node.FREE_CALL);
665:       assertEquals(2, Node.POST_FLAG);
666:       assertEquals(46, Node.IS_NAMESPACE);
667:       assertEquals(40, Node.ORIGINALNAME_PROP);
668:       assertEquals(15, Node.NO_SIDE_EFFECTS);
669:       assertEquals(57, Node.LAST_PROP);
670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
671:       assertEquals(54, Node.SLASH_V);
672:       assertEquals(30, Node.VAR_ARGS_NAME);
673:       assertEquals(51, Node.STATIC_SOURCE_FILE);
674:       assertEquals(12, Node.COLUMN_BITS);
675:       assertEquals(32, Node.INCRDECR_PROP);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(1, Node.DECR_FLAG);
678:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
679:       assertEquals(56, Node.CHANGE_TIME);
680:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
681:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
682:       assertEquals(8, Node.FLAG_NO_THROWS);
683:       assertEquals(57, Node.REFLECTED_OBJECT);
684:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
685:       assertEquals(4095, Node.COLUMN_MASK);
686:       assertEquals(48, Node.DIRECTIVES);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(37, Node.OPT_ARG_NAME);
689:       
690:       node1.setType(1056);
691:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
692:       assertTrue(arrayList0.isEmpty());
693:       assertEquals(0, arrayList0.size());
694:       assertFalse(node0.isFalse());
695:       assertFalse(node0.isThrow());
696:       assertFalse(node0.isBreak());
697:       assertFalse(node0.isHook());
698:       assertFalse(node0.isInc());
699:       assertEquals((-1), node0.getCharno());
700:       assertFalse(node0.isGetProp());
701:       assertTrue(node0.isParamList());
702:       assertFalse(node0.isString());
703:       assertEquals(83, node0.getType());
704:       assertFalse(node0.isCase());
705:       assertFalse(node0.isThis());
706:       assertFalse(node0.isExprResult());
707:       assertFalse(node0.isComma());
708:       assertFalse(node0.isInstanceOf());
709:       assertFalse(node0.isWith());
710:       assertFalse(node0.isGetElem());
711:       assertFalse(node0.isEmpty());
712:       assertFalse(node0.isFor());
713:       assertFalse(node0.isLabelName());
714:       assertFalse(node0.isArrayLit());
715:       assertFalse(node0.hasOneChild());
716:       assertFalse(node0.isDelProp());
717:       assertFalse(node0.isTry());
718:       assertFalse(node0.isOr());
719:       assertFalse(node0.isTrue());
720:       assertFalse(node0.isNumber());
721:       assertFalse(node0.isGetterDef());
722:       assertFalse(node0.isScript());
723:       assertFalse(node0.isDo());
724:       assertFalse(node0.isSwitch());
725:       assertFalse(node0.isDefaultCase());
726:       assertFalse(node0.isAssignAdd());
727:       assertFalse(node0.isLabel());
728:       assertEquals(0, node0.getChildCount());
729:       assertFalse(node0.isStringKey());
730:       assertFalse(node0.isName());
731:       assertFalse(node0.isCall());
732:       assertFalse(node0.isNull());
733:       assertFalse(node0.isVar());
734:       assertFalse(node0.isNew());
735:       assertFalse(node0.isAdd());
736:       assertFalse(node0.isSetterDef());
737:       assertFalse(node0.isWhile());
738:       assertFalse(node0.isBlock());
739:       assertFalse(node0.isVoid());
740:       assertEquals((-1), node0.getLineno());
741:       assertFalse(node0.isReturn());
742:       assertFalse(node0.isDec());
743:       assertFalse(node0.isTypeOf());
744:       assertFalse(node0.isRegExp());
745:       assertFalse(node0.hasMoreThanOneChild());
746:       assertFalse(node0.isCatch());
747:       assertFalse(node0.isAssign());
748:       assertFalse(node0.hasChildren());
749:       assertFalse(node0.isNE());
750:       assertFalse(node0.isIf());
751:       assertFalse(node0.isDebugger());
752:       assertEquals((-1), node0.getSourcePosition());
753:       assertFalse(node0.isIn());
754:       assertFalse(node0.isNot());
755:       assertFalse(node0.isObjectLit());
756:       assertFalse(node0.isAnd());
757:       assertFalse(node0.isCast());
758:       assertFalse(node0.isFunction());
759:       assertFalse(node0.isContinue());
760:       assertFalse(node1.isBlock());
761:       assertFalse(node1.isAdd());
762:       assertFalse(node1.isNew());
763:       assertFalse(node1.isVar());
764:       assertFalse(node1.isName());
765:       assertFalse(node1.isStringKey());
766:       assertFalse(node1.isContinue());
767:       assertFalse(node1.hasMoreThanOneChild());
768:       assertEquals((-1), node1.getLineno());
769:       assertFalse(node1.isCall());
770:       assertFalse(node1.isParamList());
771:       assertEquals((-1), node1.getSourcePosition());
772:       assertFalse(node1.isTypeOf());
773:       assertFalse(node1.isDec());
774:       assertFalse(node1.isReturn());
775:       assertFalse(node1.isWhile());
776:       assertFalse(node1.isNumber());
777:       assertFalse(node1.isVoid());
778:       assertFalse(node1.isTrue());
779:       assertFalse(node1.isGetElem());
780:       assertFalse(node1.isLabelName());
781:       assertFalse(node1.isAssign());
782:       assertFalse(node1.isDelProp());
783:       assertFalse(node1.isArrayLit());
784:       assertFalse(node1.isExprResult());
785:       assertFalse(node1.isOr());
786:       assertFalse(node1.isAssignAdd());
787:       assertFalse(node1.isNull());
788:       assertFalse(node1.isLabel());
789:       assertFalse(node1.isEmpty());
790:       assertFalse(node1.isDo());
791:       assertFalse(node1.isDefaultCase());
792:       assertFalse(node1.isSwitch());
793:       assertEquals((-1), node1.getCharno());
794:       assertFalse(node1.isHook());
795:       assertFalse(node1.isFalse());
796:       assertFalse(node1.isBreak());
797:       assertTrue(node1.hasChildren());
798:       assertFalse(node1.isThis());
799:       assertEquals(1, node1.getChildCount());
800:       assertTrue(node1.hasOneChild());
801:       assertFalse(node1.isComma());
802:       assertFalse(node1.isCase());
803:       assertFalse(node1.isFor());
804:       assertFalse(node1.isNot());
805:       assertFalse(node1.isGetterDef());
806:       assertFalse(node1.isObjectLit());
807:       assertFalse(node1.isString());
808:       assertFalse(node1.isScript());
809:       assertFalse(node1.isGetProp());
810:       assertFalse(node1.isTry());
811:       assertFalse(node1.isFunction());
812:       assertFalse(node1.isRegExp());
813:       assertFalse(node1.isDebugger());
814:       assertFalse(node1.isAnd());
815:       assertFalse(node1.isIf());
816:       assertFalse(node1.isWith());
817:       assertFalse(node1.isCatch());
818:       assertFalse(node1.isInstanceOf());
819:       assertFalse(node1.isCast());
820:       assertEquals(1056, node1.getType());
821:       assertFalse(node1.isIn());
822:       assertFalse(node1.isNE());
823:       assertFalse(node1.isThrow());
824:       assertFalse(node1.isInc());
825:       assertFalse(node1.isSetterDef());
826:       assertNotSame(node0, node1);
827:       assertNotSame(node1, node0);
828:       assertFalse(node0.equals((Object)node1));
829:       assertFalse(node1.equals((Object)node0));
830:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
831:       assertEquals(43, Node.IS_CONSTANT_NAME);
832:       assertEquals(47, Node.IS_DISPATCHER);
833:       assertEquals(2, Node.POST_FLAG);
834:       assertEquals(37, Node.OPT_ARG_NAME);
835:       assertEquals(4095, Node.COLUMN_MASK);
836:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
837:       assertEquals(32, Node.INCRDECR_PROP);
838:       assertEquals(46, Node.IS_NAMESPACE);
839:       assertEquals(51, Node.STATIC_SOURCE_FILE);
840:       assertEquals(1, Node.DECR_FLAG);
841:       assertEquals(12, Node.COLUMN_BITS);
842:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
843:       assertEquals(50, Node.FREE_CALL);
844:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
845:       assertEquals(57, Node.REFLECTED_OBJECT);
846:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
847:       assertEquals(54, Node.SLASH_V);
848:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
849:       assertEquals(30, Node.VAR_ARGS_NAME);
850:       assertEquals(49, Node.DIRECT_EVAL);
851:       assertEquals(40, Node.ORIGINALNAME_PROP);
852:       assertEquals(48, Node.DIRECTIVES);
853:       assertEquals(56, Node.CHANGE_TIME);
854:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
855:       assertEquals(57, Node.LAST_PROP);
856:       assertEquals(15, Node.NO_SIDE_EFFECTS);
857:       assertEquals(36, Node.QUOTED_PROP);
858:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
859:       assertEquals(8, Node.FLAG_NO_THROWS);
860:       assertEquals(39, Node.EMPTY_BLOCK);
861:       assertEquals(53, Node.INPUT_ID);
862:       assertEquals(55, Node.INFERRED_FUNCTION);
863:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
864:       assertEquals(29, Node.JSDOC_INFO_PROP);
865:       assertEquals(52, Node.LENGTH);
866:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
867:       assertEquals(43, Node.IS_CONSTANT_NAME);
868:       assertEquals(36, Node.QUOTED_PROP);
869:       assertEquals(55, Node.INFERRED_FUNCTION);
870:       assertEquals(29, Node.JSDOC_INFO_PROP);
871:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
872:       assertEquals(53, Node.INPUT_ID);
873:       assertEquals(39, Node.EMPTY_BLOCK);
874:       assertEquals(47, Node.IS_DISPATCHER);
875:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
876:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
877:       assertEquals(50, Node.FREE_CALL);
878:       assertEquals(2, Node.POST_FLAG);
879:       assertEquals(46, Node.IS_NAMESPACE);
880:       assertEquals(40, Node.ORIGINALNAME_PROP);
881:       assertEquals(15, Node.NO_SIDE_EFFECTS);
882:       assertEquals(57, Node.LAST_PROP);
883:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
884:       assertEquals(54, Node.SLASH_V);
885:       assertEquals(30, Node.VAR_ARGS_NAME);
886:       assertEquals(51, Node.STATIC_SOURCE_FILE);
887:       assertEquals(12, Node.COLUMN_BITS);
888:       assertEquals(32, Node.INCRDECR_PROP);
889:       assertEquals(52, Node.LENGTH);
890:       assertEquals(1, Node.DECR_FLAG);
891:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
892:       assertEquals(56, Node.CHANGE_TIME);
893:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
894:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
895:       assertEquals(8, Node.FLAG_NO_THROWS);
896:       assertEquals(57, Node.REFLECTED_OBJECT);
897:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
898:       assertEquals(4095, Node.COLUMN_MASK);
899:       assertEquals(48, Node.DIRECTIVES);
900:       assertEquals(49, Node.DIRECT_EVAL);
901:       assertEquals(37, Node.OPT_ARG_NAME);
902:       
903:       node1.putProp(184, arrayList0);
904:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
905:       assertTrue(arrayList0.isEmpty());
906:       assertEquals(0, arrayList0.size());
907:       assertFalse(node0.isFalse());
908:       assertFalse(node0.isThrow());
909:       assertFalse(node0.isBreak());
910:       assertFalse(node0.isHook());
911:       assertFalse(node0.isInc());
912:       assertEquals((-1), node0.getCharno());
913:       assertFalse(node0.isGetProp());
914:       assertTrue(node0.isParamList());
915:       assertFalse(node0.isString());
916:       assertEquals(83, node0.getType());
917:       assertFalse(node0.isCase());
918:       assertFalse(node0.isThis());
919:       assertFalse(node0.isExprResult());
920:       assertFalse(node0.isComma());
921:       assertFalse(node0.isInstanceOf());
922:       assertFalse(node0.isWith());
923:       assertFalse(node0.isGetElem());
924:       assertFalse(node0.isEmpty());
925:       assertFalse(node0.isFor());
926:       assertFalse(node0.isLabelName());
927:       assertFalse(node0.isArrayLit());
928:       assertFalse(node0.hasOneChild());
929:       assertFalse(node0.isDelProp());
930:       assertFalse(node0.isTry());
931:       assertFalse(node0.isOr());
932:       assertFalse(node0.isTrue());
933:       assertFalse(node0.isNumber());
934:       assertFalse(node0.isGetterDef());
935:       assertFalse(node0.isScript());
936:       assertFalse(node0.isDo());
937:       assertFalse(node0.isSwitch());
938:       assertFalse(node0.isDefaultCase());
939:       assertFalse(node0.isAssignAdd());
940:       assertFalse(node0.isLabel());
941:       assertEquals(0, node0.getChildCount());
942:       assertFalse(node0.isStringKey());
943:       assertFalse(node0.isName());
944:       assertFalse(node0.isCall());
945:       assertFalse(node0.isNull());
946:       assertFalse(node0.isVar());
947:       assertFalse(node0.isNew());
948:       assertFalse(node0.isAdd());
949:       assertFalse(node0.isSetterDef());
950:       assertFalse(node0.isWhile());
951:       assertFalse(node0.isBlock());
952:       assertFalse(node0.isVoid());
953:       assertEquals((-1), node0.getLineno());
954:       assertFalse(node0.isReturn());
955:       assertFalse(node0.isDec());
956:       assertFalse(node0.isTypeOf());
957:       assertFalse(node0.isRegExp());
958:       assertFalse(node0.hasMoreThanOneChild());
959:       assertFalse(node0.isCatch());
960:       assertFalse(node0.isAssign());
961:       assertFalse(node0.hasChildren());
962:       assertFalse(node0.isNE());
963:       assertFalse(node0.isIf());
964:       assertFalse(node0.isDebugger());
965:       assertEquals((-1), node0.getSourcePosition());
966:       assertFalse(node0.isIn());
967:       assertFalse(node0.isNot());
968:       assertFalse(node0.isObjectLit());
969:       assertFalse(node0.isAnd());
970:       assertFalse(node0.isCast());
971:       assertFalse(node0.isFunction());
972:       assertFalse(node0.isContinue());
973:       assertFalse(node1.isBlock());
974:       assertFalse(node1.isAdd());
975:       assertFalse(node1.isNew());
976:       assertFalse(node1.isVar());
977:       assertFalse(node1.isName());
978:       assertFalse(node1.isStringKey());
979:       assertFalse(node1.isContinue());
980:       assertFalse(node1.hasMoreThanOneChild());
981:       assertEquals((-1), node1.getLineno());
982:       assertFalse(node1.isCall());
983:       assertFalse(node1.isParamList());
984:       assertEquals((-1), node1.getSourcePosition());
985:       assertFalse(node1.isTypeOf());
986:       assertFalse(node1.isDec());
987:       assertFalse(node1.isReturn());
988:       assertFalse(node1.isWhile());
989:       assertFalse(node1.isNumber());
990:       assertFalse(node1.isVoid());
991:       assertFalse(node1.isTrue());
992:       assertFalse(node1.isGetElem());
993:       assertFalse(node1.isLabelName());
994:       assertFalse(node1.isAssign());
995:       assertFalse(node1.isDelProp());
996:       assertFalse(node1.isArrayLit());
997:       assertFalse(node1.isExprResult());
998:       assertFalse(node1.isOr());
999:       assertFalse(node1.isAssignAdd());
1000:       assertFalse(node1.isNull());
1001:       assertFalse(node1.isLabel());
1002:       assertFalse(node1.isEmpty());
1003:       assertFalse(node1.isDo());
1004:       assertFalse(node1.isDefaultCase());
1005:       assertFalse(node1.isSwitch());
1006:       assertEquals((-1), node1.getCharno());
1007:       assertFalse(node1.isHook());
1008:       assertFalse(node1.isFalse());
1009:       assertFalse(node1.isBreak());
1010:       assertTrue(node1.hasChildren());
1011:       assertFalse(node1.isThis());
1012:       assertEquals(1, node1.getChildCount());
1013:       assertTrue(node1.hasOneChild());
1014:       assertFalse(node1.isComma());
1015:       assertFalse(node1.isCase());
1016:       assertFalse(node1.isFor());
1017:       assertFalse(node1.isNot());
1018:       assertFalse(node1.isGetterDef());
1019:       assertFalse(node1.isObjectLit());
1020:       assertFalse(node1.isString());
1021:       assertFalse(node1.isScript());
1022:       assertFalse(node1.isGetProp());
1023:       assertFalse(node1.isTry());
1024:       assertFalse(node1.isFunction());
1025:       assertFalse(node1.isRegExp());
1026:       assertFalse(node1.isDebugger());
1027:       assertFalse(node1.isAnd());
1028:       assertFalse(node1.isIf());
1029:       assertFalse(node1.isWith());
1030:       assertFalse(node1.isCatch());
1031:       assertFalse(node1.isInstanceOf());
1032:       assertFalse(node1.isCast());
1033:       assertEquals(1056, node1.getType());
1034:       assertFalse(node1.isIn());
1035:       assertFalse(node1.isNE());
1036:       assertFalse(node1.isThrow());
1037:       assertFalse(node1.isInc());
1038:       assertFalse(node1.isSetterDef());
1039:       assertNotSame(node0, node1);
1040:       assertNotSame(node1, node0);
1041:       assertFalse(node0.equals((Object)node1));
1042:       assertFalse(node1.equals((Object)node0));
1043:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1044:       assertEquals(43, Node.IS_CONSTANT_NAME);
1045:       assertEquals(47, Node.IS_DISPATCHER);
1046:       assertEquals(2, Node.POST_FLAG);
1047:       assertEquals(37, Node.OPT_ARG_NAME);
1048:       assertEquals(4095, Node.COLUMN_MASK);
1049:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1050:       assertEquals(32, Node.INCRDECR_PROP);
1051:       assertEquals(46, Node.IS_NAMESPACE);
1052:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1053:       assertEquals(1, Node.DECR_FLAG);
1054:       assertEquals(12, Node.COLUMN_BITS);
1055:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1056:       assertEquals(50, Node.FREE_CALL);
1057:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1058:       assertEquals(57, Node.REFLECTED_OBJECT);
1059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1060:       assertEquals(54, Node.SLASH_V);
1061:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1062:       assertEquals(30, Node.VAR_ARGS_NAME);
1063:       assertEquals(49, Node.DIRECT_EVAL);
1064:       assertEquals(40, Node.ORIGINALNAME_PROP);
1065:       assertEquals(48, Node.DIRECTIVES);
1066:       assertEquals(56, Node.CHANGE_TIME);
1067:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1068:       assertEquals(57, Node.LAST_PROP);
1069:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1070:       assertEquals(36, Node.QUOTED_PROP);
1071:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1072:       assertEquals(8, Node.FLAG_NO_THROWS);
1073:       assertEquals(39, Node.EMPTY_BLOCK);
1074:       assertEquals(53, Node.INPUT_ID);
1075:       assertEquals(55, Node.INFERRED_FUNCTION);
1076:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1077:       assertEquals(29, Node.JSDOC_INFO_PROP);
1078:       assertEquals(52, Node.LENGTH);
1079:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1080:       assertEquals(43, Node.IS_CONSTANT_NAME);
1081:       assertEquals(36, Node.QUOTED_PROP);
1082:       assertEquals(55, Node.INFERRED_FUNCTION);
1083:       assertEquals(29, Node.JSDOC_INFO_PROP);
1084:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1085:       assertEquals(53, Node.INPUT_ID);
1086:       assertEquals(39, Node.EMPTY_BLOCK);
1087:       assertEquals(47, Node.IS_DISPATCHER);
1088:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1089:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1090:       assertEquals(50, Node.FREE_CALL);
1091:       assertEquals(2, Node.POST_FLAG);
1092:       assertEquals(46, Node.IS_NAMESPACE);
1093:       assertEquals(40, Node.ORIGINALNAME_PROP);
1094:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1095:       assertEquals(57, Node.LAST_PROP);
1096:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1097:       assertEquals(54, Node.SLASH_V);
1098:       assertEquals(30, Node.VAR_ARGS_NAME);
1099:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1100:       assertEquals(12, Node.COLUMN_BITS);
1101:       assertEquals(32, Node.INCRDECR_PROP);
1102:       assertEquals(52, Node.LENGTH);
1103:       assertEquals(1, Node.DECR_FLAG);
1104:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1105:       assertEquals(56, Node.CHANGE_TIME);
1106:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1107:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1108:       assertEquals(8, Node.FLAG_NO_THROWS);
1109:       assertEquals(57, Node.REFLECTED_OBJECT);
1110:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1111:       assertEquals(4095, Node.COLUMN_MASK);
1112:       assertEquals(48, Node.DIRECTIVES);
1113:       assertEquals(49, Node.DIRECT_EVAL);
1114:       assertEquals(37, Node.OPT_ARG_NAME);
1115:       
1116:       String string0 = node1.getSourceFileName();
1117:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1118:       assertTrue(arrayList0.isEmpty());
1119:       assertEquals(0, arrayList0.size());
1120:       assertFalse(node0.isFalse());
1121:       assertFalse(node0.isThrow());
1122:       assertFalse(node0.isBreak());
1123:       assertFalse(node0.isHook());
1124:       assertFalse(node0.isInc());
1125:       assertEquals((-1), node0.getCharno());
1126:       assertFalse(node0.isGetProp());
1127:       assertTrue(node0.isParamList());
1128:       assertFalse(node0.isString());
1129:       assertEquals(83, node0.getType());
1130:       assertFalse(node0.isCase());
1131:       assertFalse(node0.isThis());
1132:       assertFalse(node0.isExprResult());
1133:       assertFalse(node0.isComma());
1134:       assertFalse(node0.isInstanceOf());
1135:       assertFalse(node0.isWith());
1136:       assertFalse(node0.isGetElem());
1137:       assertFalse(node0.isEmpty());
1138:       assertFalse(node0.isFor());
1139:       assertFalse(node0.isLabelName());
1140:       assertFalse(node0.isArrayLit());
1141:       assertFalse(node0.hasOneChild());
1142:       assertFalse(node0.isDelProp());
1143:       assertFalse(node0.isTry());
1144:       assertFalse(node0.isOr());
1145:       assertFalse(node0.isTrue());
1146:       assertFalse(node0.isNumber());
1147:       assertFalse(node0.isGetterDef());
1148:       assertFalse(node0.isScript());
1149:       assertFalse(node0.isDo());
1150:       assertFalse(node0.isSwitch());
1151:       assertFalse(node0.isDefaultCase());
1152:       assertFalse(node0.isAssignAdd());
1153:       assertFalse(node0.isLabel());
1154:       assertEquals(0, node0.getChildCount());
1155:       assertFalse(node0.isStringKey());
1156:       assertFalse(node0.isName());
1157:       assertFalse(node0.isCall());
1158:       assertFalse(node0.isNull());
1159:       assertFalse(node0.isVar());
1160:       assertFalse(node0.isNew());
1161:       assertFalse(node0.isAdd());
1162:       assertFalse(node0.isSetterDef());
1163:       assertFalse(node0.isWhile());
1164:       assertFalse(node0.isBlock());
1165:       assertFalse(node0.isVoid());
1166:       assertEquals((-1), node0.getLineno());
1167:       assertFalse(node0.isReturn());
1168:       assertFalse(node0.isDec());
1169:       assertFalse(node0.isTypeOf());
1170:       assertFalse(node0.isRegExp());
1171:       assertFalse(node0.hasMoreThanOneChild());
1172:       assertFalse(node0.isCatch());
1173:       assertFalse(node0.isAssign());
1174:       assertFalse(node0.hasChildren());
1175:       assertFalse(node0.isNE());
1176:       assertFalse(node0.isIf());
1177:       assertFalse(node0.isDebugger());
1178:       assertEquals((-1), node0.getSourcePosition());
1179:       assertFalse(node0.isIn());
1180:       assertFalse(node0.isNot());
1181:       assertFalse(node0.isObjectLit());
1182:       assertFalse(node0.isAnd());
1183:       assertFalse(node0.isCast());
1184:       assertFalse(node0.isFunction());
1185:       assertFalse(node0.isContinue());
1186:       assertFalse(node1.isBlock());
1187:       assertFalse(node1.isAdd());
1188:       assertFalse(node1.isNew());
1189:       assertFalse(node1.isVar());
1190:       assertFalse(node1.isName());
1191:       assertFalse(node1.isStringKey());
1192:       assertFalse(node1.isContinue());
1193:       assertFalse(node1.hasMoreThanOneChild());
1194:       assertEquals((-1), node1.getLineno());
1195:       assertFalse(node1.isCall());
1196:       assertFalse(node1.isParamList());
1197:       assertEquals((-1), node1.getSourcePosition());
1198:       assertFalse(node1.isTypeOf());
1199:       assertFalse(node1.isDec());
1200:       assertFalse(node1.isReturn());
1201:       assertFalse(node1.isWhile());
1202:       assertFalse(node1.isNumber());
1203:       assertFalse(node1.isVoid());
1204:       assertFalse(node1.isTrue());
1205:       assertFalse(node1.isGetElem());
1206:       assertFalse(node1.isLabelName());
1207:       assertFalse(node1.isAssign());
1208:       assertFalse(node1.isDelProp());
1209:       assertFalse(node1.isArrayLit());
1210:       assertFalse(node1.isExprResult());
1211:       assertFalse(node1.isOr());
1212:       assertFalse(node1.isAssignAdd());
1213:       assertFalse(node1.isNull());
1214:       assertFalse(node1.isLabel());
1215:       assertFalse(node1.isEmpty());
1216:       assertFalse(node1.isDo());
1217:       assertFalse(node1.isDefaultCase());
1218:       assertFalse(node1.isSwitch());
1219:       assertEquals((-1), node1.getCharno());
1220:       assertFalse(node1.isHook());
1221:       assertFalse(node1.isFalse());
1222:       assertFalse(node1.isBreak());
1223:       assertTrue(node1.hasChildren());
1224:       assertFalse(node1.isThis());
1225:       assertEquals(1, node1.getChildCount());
1226:       assertTrue(node1.hasOneChild());
1227:       assertFalse(node1.isComma());
1228:       assertFalse(node1.isCase());
1229:       assertFalse(node1.isFor());
1230:       assertFalse(node1.isNot());
1231:       assertFalse(node1.isGetterDef());
1232:       assertFalse(node1.isObjectLit());
1233:       assertFalse(node1.isString());
1234:       assertFalse(node1.isScript());
1235:       assertFalse(node1.isGetProp());
1236:       assertFalse(node1.isTry());
1237:       assertFalse(node1.isFunction());
1238:       assertFalse(node1.isRegExp());
1239:       assertFalse(node1.isDebugger());
1240:       assertFalse(node1.isAnd());
1241:       assertFalse(node1.isIf());
1242:       assertFalse(node1.isWith());
1243:       assertFalse(node1.isCatch());
1244:       assertFalse(node1.isInstanceOf());
1245:       assertFalse(node1.isCast());
1246:       assertEquals(1056, node1.getType());
1247:       assertFalse(node1.isIn());
1248:       assertFalse(node1.isNE());
1249:       assertFalse(node1.isThrow());
1250:       assertFalse(node1.isInc());
1251:       assertFalse(node1.isSetterDef());
1252:       assertNull(string0);
1253:       assertNotSame(node0, node1);
1254:       assertNotSame(node1, node0);
1255:       assertFalse(node0.equals((Object)node1));
1256:       assertFalse(node1.equals((Object)node0));
1257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1258:       assertEquals(43, Node.IS_CONSTANT_NAME);
1259:       assertEquals(47, Node.IS_DISPATCHER);
1260:       assertEquals(2, Node.POST_FLAG);
1261:       assertEquals(37, Node.OPT_ARG_NAME);
1262:       assertEquals(4095, Node.COLUMN_MASK);
1263:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1264:       assertEquals(32, Node.INCRDECR_PROP);
1265:       assertEquals(46, Node.IS_NAMESPACE);
1266:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1267:       assertEquals(1, Node.DECR_FLAG);
1268:       assertEquals(12, Node.COLUMN_BITS);
1269:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1270:       assertEquals(50, Node.FREE_CALL);
1271:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1272:       assertEquals(57, Node.REFLECTED_OBJECT);
1273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1274:       assertEquals(54, Node.SLASH_V);
1275:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1276:       assertEquals(30, Node.VAR_ARGS_NAME);
1277:       assertEquals(49, Node.DIRECT_EVAL);
1278:       assertEquals(40, Node.ORIGINALNAME_PROP);
1279:       assertEquals(48, Node.DIRECTIVES);
1280:       assertEquals(56, Node.CHANGE_TIME);
1281:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1282:       assertEquals(57, Node.LAST_PROP);
1283:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1284:       assertEquals(36, Node.QUOTED_PROP);
1285:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1286:       assertEquals(8, Node.FLAG_NO_THROWS);
1287:       assertEquals(39, Node.EMPTY_BLOCK);
1288:       assertEquals(53, Node.INPUT_ID);
1289:       assertEquals(55, Node.INFERRED_FUNCTION);
1290:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1291:       assertEquals(29, Node.JSDOC_INFO_PROP);
1292:       assertEquals(52, Node.LENGTH);
1293:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1294:       assertEquals(43, Node.IS_CONSTANT_NAME);
1295:       assertEquals(36, Node.QUOTED_PROP);
1296:       assertEquals(55, Node.INFERRED_FUNCTION);
1297:       assertEquals(29, Node.JSDOC_INFO_PROP);
1298:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1299:       assertEquals(53, Node.INPUT_ID);
1300:       assertEquals(39, Node.EMPTY_BLOCK);
1301:       assertEquals(47, Node.IS_DISPATCHER);
1302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1303:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1304:       assertEquals(50, Node.FREE_CALL);
1305:       assertEquals(2, Node.POST_FLAG);
1306:       assertEquals(46, Node.IS_NAMESPACE);
1307:       assertEquals(40, Node.ORIGINALNAME_PROP);
1308:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1309:       assertEquals(57, Node.LAST_PROP);
1310:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1311:       assertEquals(54, Node.SLASH_V);
1312:       assertEquals(30, Node.VAR_ARGS_NAME);
1313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1314:       assertEquals(12, Node.COLUMN_BITS);
1315:       assertEquals(32, Node.INCRDECR_PROP);
1316:       assertEquals(52, Node.LENGTH);
1317:       assertEquals(1, Node.DECR_FLAG);
1318:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1319:       assertEquals(56, Node.CHANGE_TIME);
1320:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1321:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1322:       assertEquals(8, Node.FLAG_NO_THROWS);
1323:       assertEquals(57, Node.REFLECTED_OBJECT);
1324:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1325:       assertEquals(4095, Node.COLUMN_MASK);
1326:       assertEquals(48, Node.DIRECTIVES);
1327:       assertEquals(49, Node.DIRECT_EVAL);
1328:       assertEquals(37, Node.OPT_ARG_NAME);
1329:       
1330:       boolean boolean1 = node0.isCast();
1331:       assertFalse(boolean1);
1332:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1333:       assertTrue(arrayList0.isEmpty());
1334:       assertEquals(0, arrayList0.size());
1335:       assertFalse(node0.isFalse());
1336:       assertFalse(node0.isThrow());
1337:       assertFalse(node0.isBreak());
1338:       assertFalse(node0.isHook());
1339:       assertFalse(node0.isInc());
1340:       assertEquals((-1), node0.getCharno());
1341:       assertFalse(node0.isGetProp());
1342:       assertTrue(node0.isParamList());
1343:       assertFalse(node0.isString());
1344:       assertEquals(83, node0.getType());
1345:       assertFalse(node0.isCase());
1346:       assertFalse(node0.isThis());
1347:       assertFalse(node0.isExprResult());
1348:       assertFalse(node0.isComma());
1349:       assertFalse(node0.isInstanceOf());
1350:       assertFalse(node0.isWith());
1351:       assertFalse(node0.isGetElem());
1352:       assertFalse(node0.isEmpty());
1353:       assertFalse(node0.isFor());
1354:       assertFalse(node0.isLabelName());
1355:       assertFalse(node0.isArrayLit());
1356:       assertFalse(node0.hasOneChild());
1357:       assertFalse(node0.isDelProp());
1358:       assertFalse(node0.isTry());
1359:       assertFalse(node0.isOr());
1360:       assertFalse(node0.isTrue());
1361:       assertFalse(node0.isNumber());
1362:       assertFalse(node0.isGetterDef());
1363:       assertFalse(node0.isScript());
1364:       assertFalse(node0.isDo());
1365:       assertFalse(node0.isSwitch());
1366:       assertFalse(node0.isDefaultCase());
1367:       assertFalse(node0.isAssignAdd());
1368:       assertFalse(node0.isLabel());
1369:       assertEquals(0, node0.getChildCount());
1370:       assertFalse(node0.isStringKey());
1371:       assertFalse(node0.isName());
1372:       assertFalse(node0.isCall());
1373:       assertFalse(node0.isNull());
1374:       assertFalse(node0.isVar());
1375:       assertFalse(node0.isNew());
1376:       assertFalse(node0.isAdd());
1377:       assertFalse(node0.isSetterDef());
1378:       assertFalse(node0.isWhile());
1379:       assertFalse(node0.isBlock());
1380:       assertFalse(node0.isVoid());
1381:       assertEquals((-1), node0.getLineno());
1382:       assertFalse(node0.isReturn());
1383:       assertFalse(node0.isDec());
1384:       assertFalse(node0.isTypeOf());
1385:       assertFalse(node0.isRegExp());
1386:       assertFalse(node0.hasMoreThanOneChild());
1387:       assertFalse(node0.isCatch());
1388:       assertFalse(node0.isAssign());
1389:       assertFalse(node0.hasChildren());
1390:       assertFalse(node0.isNE());
1391:       assertFalse(node0.isIf());
1392:       assertFalse(node0.isDebugger());
1393:       assertEquals((-1), node0.getSourcePosition());
1394:       assertFalse(node0.isIn());
1395:       assertFalse(node0.isNot());
1396:       assertFalse(node0.isObjectLit());
1397:       assertFalse(node0.isAnd());
1398:       assertFalse(node0.isCast());
1399:       assertFalse(node0.isFunction());
1400:       assertFalse(node0.isContinue());
1401:       assertNotSame(node0, node1);
1402:       assertFalse(node0.equals((Object)node1));
1403:       assertTrue(boolean1 == boolean0);
1404:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1405:       assertEquals(43, Node.IS_CONSTANT_NAME);
1406:       assertEquals(47, Node.IS_DISPATCHER);
1407:       assertEquals(2, Node.POST_FLAG);
1408:       assertEquals(37, Node.OPT_ARG_NAME);
1409:       assertEquals(4095, Node.COLUMN_MASK);
1410:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1411:       assertEquals(32, Node.INCRDECR_PROP);
1412:       assertEquals(46, Node.IS_NAMESPACE);
1413:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1414:       assertEquals(1, Node.DECR_FLAG);
1415:       assertEquals(12, Node.COLUMN_BITS);
1416:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1417:       assertEquals(50, Node.FREE_CALL);
1418:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1419:       assertEquals(57, Node.REFLECTED_OBJECT);
1420:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1421:       assertEquals(54, Node.SLASH_V);
1422:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1423:       assertEquals(30, Node.VAR_ARGS_NAME);
1424:       assertEquals(49, Node.DIRECT_EVAL);
1425:       assertEquals(40, Node.ORIGINALNAME_PROP);
1426:       assertEquals(48, Node.DIRECTIVES);
1427:       assertEquals(56, Node.CHANGE_TIME);
1428:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1429:       assertEquals(57, Node.LAST_PROP);
1430:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1431:       assertEquals(36, Node.QUOTED_PROP);
1432:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1433:       assertEquals(8, Node.FLAG_NO_THROWS);
1434:       assertEquals(39, Node.EMPTY_BLOCK);
1435:       assertEquals(53, Node.INPUT_ID);
1436:       assertEquals(55, Node.INFERRED_FUNCTION);
1437:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1438:       assertEquals(29, Node.JSDOC_INFO_PROP);
1439:       assertEquals(52, Node.LENGTH);
1440:       
1441:       boolean boolean2 = node0.isDebugger();
1442:       assertFalse(boolean2);
1443:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1444:       assertTrue(arrayList0.isEmpty());
1445:       assertEquals(0, arrayList0.size());
1446:       assertFalse(node0.isFalse());
1447:       assertFalse(node0.isThrow());
1448:       assertFalse(node0.isBreak());
1449:       assertFalse(node0.isHook());
1450:       assertFalse(node0.isInc());
1451:       assertEquals((-1), node0.getCharno());
1452:       assertFalse(node0.isGetProp());
1453:       assertTrue(node0.isParamList());
1454:       assertFalse(node0.isString());
1455:       assertEquals(83, node0.getType());
1456:       assertFalse(node0.isCase());
1457:       assertFalse(node0.isThis());
1458:       assertFalse(node0.isExprResult());
1459:       assertFalse(node0.isComma());
1460:       assertFalse(node0.isInstanceOf());
1461:       assertFalse(node0.isWith());
1462:       assertFalse(node0.isGetElem());
1463:       assertFalse(node0.isEmpty());
1464:       assertFalse(node0.isFor());
1465:       assertFalse(node0.isLabelName());
1466:       assertFalse(node0.isArrayLit());
1467:       assertFalse(node0.hasOneChild());
1468:       assertFalse(node0.isDelProp());
1469:       assertFalse(node0.isTry());
1470:       assertFalse(node0.isOr());
1471:       assertFalse(node0.isTrue());
1472:       assertFalse(node0.isNumber());
1473:       assertFalse(node0.isGetterDef());
1474:       assertFalse(node0.isScript());
1475:       assertFalse(node0.isDo());
1476:       assertFalse(node0.isSwitch());
1477:       assertFalse(node0.isDefaultCase());
1478:       assertFalse(node0.isAssignAdd());
1479:       assertFalse(node0.isLabel());
1480:       assertEquals(0, node0.getChildCount());
1481:       assertFalse(node0.isStringKey());
1482:       assertFalse(node0.isName());
1483:       assertFalse(node0.isCall());
1484:       assertFalse(node0.isNull());
1485:       assertFalse(node0.isVar());
1486:       assertFalse(node0.isNew());
1487:       assertFalse(node0.isAdd());
1488:       assertFalse(node0.isSetterDef());
1489:       assertFalse(node0.isWhile());
1490:       assertFalse(node0.isBlock());
1491:       assertFalse(node0.isVoid());
1492:       assertEquals((-1), node0.getLineno());
1493:       assertFalse(node0.isReturn());
1494:       assertFalse(node0.isDec());
1495:       assertFalse(node0.isTypeOf());
1496:       assertFalse(node0.isRegExp());
1497:       assertFalse(node0.hasMoreThanOneChild());
1498:       assertFalse(node0.isCatch());
1499:       assertFalse(node0.isAssign());
1500:       assertFalse(node0.hasChildren());
1501:       assertFalse(node0.isNE());
1502:       assertFalse(node0.isIf());
1503:       assertFalse(node0.isDebugger());
1504:       assertEquals((-1), node0.getSourcePosition());
1505:       assertFalse(node0.isIn());
1506:       assertFalse(node0.isNot());
1507:       assertFalse(node0.isObjectLit());
1508:       assertFalse(node0.isAnd());
1509:       assertFalse(node0.isCast());
1510:       assertFalse(node0.isFunction());
1511:       assertFalse(node0.isContinue());
1512:       assertNotSame(node0, node1);
1513:       assertTrue(boolean2 == boolean0);
1514:       assertTrue(boolean2 == boolean1);
1515:       assertFalse(node0.equals((Object)node1));
1516:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1517:       assertEquals(43, Node.IS_CONSTANT_NAME);
1518:       assertEquals(47, Node.IS_DISPATCHER);
1519:       assertEquals(2, Node.POST_FLAG);
1520:       assertEquals(37, Node.OPT_ARG_NAME);
1521:       assertEquals(4095, Node.COLUMN_MASK);
1522:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1523:       assertEquals(32, Node.INCRDECR_PROP);
1524:       assertEquals(46, Node.IS_NAMESPACE);
1525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1526:       assertEquals(1, Node.DECR_FLAG);
1527:       assertEquals(12, Node.COLUMN_BITS);
1528:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1529:       assertEquals(50, Node.FREE_CALL);
1530:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1531:       assertEquals(57, Node.REFLECTED_OBJECT);
1532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1533:       assertEquals(54, Node.SLASH_V);
1534:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1535:       assertEquals(30, Node.VAR_ARGS_NAME);
1536:       assertEquals(49, Node.DIRECT_EVAL);
1537:       assertEquals(40, Node.ORIGINALNAME_PROP);
1538:       assertEquals(48, Node.DIRECTIVES);
1539:       assertEquals(56, Node.CHANGE_TIME);
1540:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1541:       assertEquals(57, Node.LAST_PROP);
1542:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1543:       assertEquals(36, Node.QUOTED_PROP);
1544:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1545:       assertEquals(8, Node.FLAG_NO_THROWS);
1546:       assertEquals(39, Node.EMPTY_BLOCK);
1547:       assertEquals(53, Node.INPUT_ID);
1548:       assertEquals(55, Node.INFERRED_FUNCTION);
1549:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1550:       assertEquals(29, Node.JSDOC_INFO_PROP);
1551:       assertEquals(52, Node.LENGTH);
1552:       
1553:       int int0 = Node.mergeLineCharNo((byte) (-12), 8);
1554:       assertEquals((-1), int0);
1555:       
1556:       boolean boolean3 = node0.isAnd();
1557:       assertFalse(boolean3);
1558:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1559:       assertTrue(arrayList0.isEmpty());
1560:       assertEquals(0, arrayList0.size());
1561:       assertFalse(node0.isFalse());
1562:       assertFalse(node0.isThrow());
1563:       assertFalse(node0.isBreak());
1564:       assertFalse(node0.isHook());
1565:       assertFalse(node0.isInc());
1566:       assertEquals((-1), node0.getCharno());
1567:       assertFalse(node0.isGetProp());
1568:       assertTrue(node0.isParamList());
1569:       assertFalse(node0.isString());
1570:       assertEquals(83, node0.getType());
1571:       assertFalse(node0.isCase());
1572:       assertFalse(node0.isThis());
1573:       assertFalse(node0.isExprResult());
1574:       assertFalse(node0.isComma());
1575:       assertFalse(node0.isInstanceOf());
1576:       assertFalse(node0.isWith());
1577:       assertFalse(node0.isGetElem());
1578:       assertFalse(node0.isEmpty());
1579:       assertFalse(node0.isFor());
1580:       assertFalse(node0.isLabelName());
1581:       assertFalse(node0.isArrayLit());
1582:       assertFalse(node0.hasOneChild());
1583:       assertFalse(node0.isDelProp());
1584:       assertFalse(node0.isTry());
1585:       assertFalse(node0.isOr());
1586:       assertFalse(node0.isTrue());
1587:       assertFalse(node0.isNumber());
1588:       assertFalse(node0.isGetterDef());
1589:       assertFalse(node0.isScript());
1590:       assertFalse(node0.isDo());
1591:       assertFalse(node0.isSwitch());
1592:       assertFalse(node0.isDefaultCase());
1593:       assertFalse(node0.isAssignAdd());
1594:       assertFalse(node0.isLabel());
1595:       assertEquals(0, node0.getChildCount());
1596:       assertFalse(node0.isStringKey());
1597:       assertFalse(node0.isName());
1598:       assertFalse(node0.isCall());
1599:       assertFalse(node0.isNull());
1600:       assertFalse(node0.isVar());
1601:       assertFalse(node0.isNew());
1602:       assertFalse(node0.isAdd());
1603:       assertFalse(node0.isSetterDef());
1604:       assertFalse(node0.isWhile());
1605:       assertFalse(node0.isBlock());
1606:       assertFalse(node0.isVoid());
1607:       assertEquals((-1), node0.getLineno());
1608:       assertFalse(node0.isReturn());
1609:       assertFalse(node0.isDec());
1610:       assertFalse(node0.isTypeOf());
1611:       assertFalse(node0.isRegExp());
1612:       assertFalse(node0.hasMoreThanOneChild());
1613:       assertFalse(node0.isCatch());
1614:       assertFalse(node0.isAssign());
1615:       assertFalse(node0.hasChildren());
1616:       assertFalse(node0.isNE());
1617:       assertFalse(node0.isIf());
1618:       assertFalse(node0.isDebugger());
1619:       assertEquals((-1), node0.getSourcePosition());
1620:       assertFalse(node0.isIn());
1621:       assertFalse(node0.isNot());
1622:       assertFalse(node0.isObjectLit());
1623:       assertFalse(node0.isAnd());
1624:       assertFalse(node0.isCast());
1625:       assertFalse(node0.isFunction());
1626:       assertFalse(node0.isContinue());
1627:       assertNotSame(node0, node1);
1628:       assertTrue(boolean3 == boolean1);
1629:       assertTrue(boolean3 == boolean0);
1630:       assertTrue(boolean3 == boolean2);
1631:       assertFalse(node0.equals((Object)node1));
1632:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1633:       assertEquals(43, Node.IS_CONSTANT_NAME);
1634:       assertEquals(47, Node.IS_DISPATCHER);
1635:       assertEquals(2, Node.POST_FLAG);
1636:       assertEquals(37, Node.OPT_ARG_NAME);
1637:       assertEquals(4095, Node.COLUMN_MASK);
1638:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1639:       assertEquals(32, Node.INCRDECR_PROP);
1640:       assertEquals(46, Node.IS_NAMESPACE);
1641:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1642:       assertEquals(1, Node.DECR_FLAG);
1643:       assertEquals(12, Node.COLUMN_BITS);
1644:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1645:       assertEquals(50, Node.FREE_CALL);
1646:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1647:       assertEquals(57, Node.REFLECTED_OBJECT);
1648:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1649:       assertEquals(54, Node.SLASH_V);
1650:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1651:       assertEquals(30, Node.VAR_ARGS_NAME);
1652:       assertEquals(49, Node.DIRECT_EVAL);
1653:       assertEquals(40, Node.ORIGINALNAME_PROP);
1654:       assertEquals(48, Node.DIRECTIVES);
1655:       assertEquals(56, Node.CHANGE_TIME);
1656:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1657:       assertEquals(57, Node.LAST_PROP);
1658:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1659:       assertEquals(36, Node.QUOTED_PROP);
1660:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1661:       assertEquals(8, Node.FLAG_NO_THROWS);
1662:       assertEquals(39, Node.EMPTY_BLOCK);
1663:       assertEquals(53, Node.INPUT_ID);
1664:       assertEquals(55, Node.INFERRED_FUNCTION);
1665:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1666:       assertEquals(29, Node.JSDOC_INFO_PROP);
1667:       assertEquals(52, Node.LENGTH);
1668:       
1669:       Node node2 = node1.srcrefTree(node0);
1670:       assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
1671:       assertTrue(arrayList0.isEmpty());
1672:       assertEquals(0, arrayList0.size());
1673:       assertFalse(node2.isTry());
1674:       assertFalse(node2.isVoid());
1675:       assertFalse(node2.isFunction());
1676:       assertFalse(node2.isArrayLit());
1677:       assertEquals(1056, node2.getType());
1678:       assertFalse(node2.isEmpty());
1679:       assertFalse(node2.isIf());
1680:       assertFalse(node2.isGetterDef());
1681:       assertFalse(node2.isDelProp());
1682:       assertFalse(node2.isNE());
1683:       assertFalse(node2.isDebugger());
1684:       assertFalse(node2.isTrue());
1685:       assertFalse(node2.isIn());
1686:       assertFalse(node2.isSetterDef());
1687:       assertFalse(node2.isDefaultCase());
1688:       assertFalse(node2.isVar());
1689:       assertFalse(node2.isInc());
1690:       assertFalse(node2.isSwitch());
1691:       assertFalse(node2.isParamList());
1692:       assertEquals((-1), node2.getCharno());
1693:       assertFalse(node2.isStringKey());
1694:       assertEquals((-1), node2.getLineno());
1695:       assertTrue(node2.hasChildren());
1696:       assertEquals(1, node2.getChildCount());
1697:       assertFalse(node2.hasMoreThanOneChild());
1698:       assertFalse(node2.isCatch());
1699:       assertFalse(node2.isInstanceOf());
1700:       assertFalse(node2.isWith());
1701:       assertFalse(node2.isCase());
1702:       assertFalse(node2.isRegExp());
1703:       assertFalse(node2.isThis());
1704:       assertFalse(node2.isHook());
1705:       assertFalse(node2.isBlock());
1706:       assertFalse(node2.isFor());
1707:       assertFalse(node2.isCast());
1708:       assertFalse(node2.isGetElem());
1709:       assertFalse(node2.isExprResult());
1710:       assertFalse(node2.isScript());
1711:       assertFalse(node2.isNot());
1712:       assertFalse(node2.isLabelName());
1713:       assertFalse(node2.isNumber());
1714:       assertFalse(node2.isObjectLit());
1715:       assertFalse(node2.isAnd());
1716:       assertEquals((-1), node2.getSourcePosition());
1717:       assertFalse(node2.isAssignAdd());
1718:       assertFalse(node2.isOr());
1719:       assertFalse(node2.isLabel());
1720:       assertFalse(node2.isContinue());
1721:       assertFalse(node2.isDo());
1722:       assertFalse(node2.isFalse());
1723:       assertFalse(node2.isThrow());
1724:       assertFalse(node2.isNew());
1725:       assertFalse(node2.isAdd());
1726:       assertFalse(node2.isCall());
1727:       assertFalse(node2.isString());
1728:       assertFalse(node2.isBreak());
1729:       assertFalse(node2.isName());
1730:       assertFalse(node2.isNull());
1731:       assertFalse(node2.isReturn());
1732:       assertFalse(node2.isGetProp());
1733:       assertTrue(node2.hasOneChild());
1734:       assertFalse(node2.isAssign());
1735:       assertFalse(node2.isWhile());
1736:       assertFalse(node2.isDec());
1737:       assertFalse(node2.isTypeOf());
1738:       assertFalse(node2.isComma());
1739:       assertFalse(node0.isFalse());
1740:       assertFalse(node0.isThrow());
1741:       assertFalse(node0.isBreak());
1742:       assertFalse(node0.isHook());
1743:       assertFalse(node0.isInc());
1744:       assertEquals((-1), node0.getCharno());
1745:       assertFalse(node0.isGetProp());
1746:       assertTrue(node0.isParamList());
1747:       assertFalse(node0.isString());
1748:       assertEquals(83, node0.getType());
1749:       assertFalse(node0.isCase());
1750:       assertFalse(node0.isThis());
1751:       assertFalse(node0.isExprResult());
1752:       assertFalse(node0.isComma());
1753:       assertFalse(node0.isInstanceOf());
1754:       assertFalse(node0.isWith());
1755:       assertFalse(node0.isGetElem());
1756:       assertFalse(node0.isEmpty());
1757:       assertFalse(node0.isFor());
1758:       assertFalse(node0.isLabelName());
1759:       assertFalse(node0.isArrayLit());
1760:       assertFalse(node0.hasOneChild());
1761:       assertFalse(node0.isDelProp());
1762:       assertFalse(node0.isTry());
1763:       assertFalse(node0.isOr());
1764:       assertFalse(node0.isTrue());
1765:       assertFalse(node0.isNumber());
1766:       assertFalse(node0.isGetterDef());
1767:       assertFalse(node0.isScript());
1768:       assertFalse(node0.isDo());
1769:       assertFalse(node0.isSwitch());
1770:       assertFalse(node0.isDefaultCase());
1771:       assertFalse(node0.isAssignAdd());
1772:       assertFalse(node0.isLabel());
1773:       assertEquals(0, node0.getChildCount());
1774:       assertFalse(node0.isStringKey());
1775:       assertFalse(node0.isName());
1776:       assertFalse(node0.isCall());
1777:       assertFalse(node0.isNull());
1778:       assertFalse(node0.isVar());
1779:       assertFalse(node0.isNew());
1780:       assertFalse(node0.isAdd());
1781:       assertFalse(node0.isSetterDef());
1782:       assertFalse(node0.isWhile());
1783:       assertFalse(node0.isBlock());
1784:       assertFalse(node0.isVoid());
1785:       assertEquals((-1), node0.getLineno());
1786:       assertFalse(node0.isReturn());
1787:       assertFalse(node0.isDec());
1788:       assertFalse(node0.isTypeOf());
1789:       assertFalse(node0.isRegExp());
1790:       assertFalse(node0.hasMoreThanOneChild());
1791:       assertFalse(node0.isCatch());
1792:       assertFalse(node0.isAssign());
1793:       assertFalse(node0.hasChildren());
1794:       assertFalse(node0.isNE());
1795:       assertFalse(node0.isIf());
1796:       assertFalse(node0.isDebugger());
1797:       assertEquals((-1), node0.getSourcePosition());
1798:       assertFalse(node0.isIn());
1799:       assertFalse(node0.isNot());
1800:       assertFalse(node0.isObjectLit());
1801:       assertFalse(node0.isAnd());
1802:       assertFalse(node0.isCast());
1803:       assertFalse(node0.isFunction());
1804:       assertFalse(node0.isContinue());
1805:       assertFalse(node1.isBlock());
1806:       assertFalse(node1.isAdd());
1807:       assertFalse(node1.isNew());
1808:       assertFalse(node1.isVar());
1809:       assertFalse(node1.isName());
1810:       assertFalse(node1.isStringKey());
1811:       assertFalse(node1.isContinue());
1812:       assertFalse(node1.hasMoreThanOneChild());
1813:       assertEquals((-1), node1.getLineno());
1814:       assertFalse(node1.isCall());
1815:       assertFalse(node1.isParamList());
1816:       assertEquals((-1), node1.getSourcePosition());
1817:       assertFalse(node1.isTypeOf());
1818:       assertFalse(node1.isDec());
1819:       assertFalse(node1.isReturn());
1820:       assertFalse(node1.isWhile());
1821:       assertFalse(node1.isNumber());
1822:       assertFalse(node1.isVoid());
1823:       assertFalse(node1.isTrue());
1824:       assertFalse(node1.isGetElem());
1825:       assertFalse(node1.isLabelName());
1826:       assertFalse(node1.isAssign());
1827:       assertFalse(node1.isDelProp());
1828:       assertFalse(node1.isArrayLit());
1829:       assertFalse(node1.isExprResult());
1830:       assertFalse(node1.isOr());
1831:       assertFalse(node1.isAssignAdd());
1832:       assertFalse(node1.isNull());
1833:       assertFalse(node1.isLabel());
1834:       assertFalse(node1.isEmpty());
1835:       assertFalse(node1.isDo());
1836:       assertFalse(node1.isDefaultCase());
1837:       assertFalse(node1.isSwitch());
1838:       assertEquals((-1), node1.getCharno());
1839:       assertFalse(node1.isHook());
1840:       assertFalse(node1.isFalse());
1841:       assertFalse(node1.isBreak());
1842:       assertTrue(node1.hasChildren());
1843:       assertFalse(node1.isThis());
1844:       assertEquals(1, node1.getChildCount());
1845:       assertTrue(node1.hasOneChild());
1846:       assertFalse(node1.isComma());
1847:       assertFalse(node1.isCase());
1848:       assertFalse(node1.isFor());
1849:       assertFalse(node1.isNot());
1850:       assertFalse(node1.isGetterDef());
1851:       assertFalse(node1.isObjectLit());
1852:       assertFalse(node1.isString());
1853:       assertFalse(node1.isScript());
1854:       assertFalse(node1.isGetProp());
1855:       assertFalse(node1.isTry());
1856:       assertFalse(node1.isFunction());
1857:       assertFalse(node1.isRegExp());
1858:       assertFalse(node1.isDebugger());
1859:       assertFalse(node1.isAnd());
1860:       assertFalse(node1.isIf());
1861:       assertFalse(node1.isWith());
1862:       assertFalse(node1.isCatch());
1863:       assertFalse(node1.isInstanceOf());
1864:       assertFalse(node1.isCast());
1865:       assertEquals(1056, node1.getType());
1866:       assertFalse(node1.isIn());
1867:       assertFalse(node1.isNE());
1868:       assertFalse(node1.isThrow());
1869:       assertFalse(node1.isInc());
1870:       assertFalse(node1.isSetterDef());
1871:       assertNotNull(node2);
1872:       assertSame(node2, node1);
1873:       assertNotSame(node2, node0);
1874:       assertNotSame(node0, node1);
1875:       assertNotSame(node0, node2);
1876:       assertNotSame(node1, node0);
1877:       assertSame(node1, node2);
1878:       assertFalse(node2.equals((Object)node0));
1879:       assertFalse(node0.equals((Object)node1));
1880:       assertFalse(node1.equals((Object)node0));
1881:       assertEquals(57, Node.LAST_PROP);
1882:       assertEquals(49, Node.DIRECT_EVAL);
1883:       assertEquals(1, Node.DECR_FLAG);
1884:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1885:       assertEquals(12, Node.COLUMN_BITS);
1886:       assertEquals(32, Node.INCRDECR_PROP);
1887:       assertEquals(30, Node.VAR_ARGS_NAME);
1888:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1889:       assertEquals(56, Node.CHANGE_TIME);
1890:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1891:       assertEquals(8, Node.FLAG_NO_THROWS);
1892:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1893:       assertEquals(29, Node.JSDOC_INFO_PROP);
1894:       assertEquals(48, Node.DIRECTIVES);
1895:       assertEquals(37, Node.OPT_ARG_NAME);
1896:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1897:       assertEquals(39, Node.EMPTY_BLOCK);
1898:       assertEquals(55, Node.INFERRED_FUNCTION);
1899:       assertEquals(52, Node.LENGTH);
1900:       assertEquals(57, Node.REFLECTED_OBJECT);
1901:       assertEquals(36, Node.QUOTED_PROP);
1902:       assertEquals(43, Node.IS_CONSTANT_NAME);
1903:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1904:       assertEquals(53, Node.INPUT_ID);
1905:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1906:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1907:       assertEquals(4095, Node.COLUMN_MASK);
1908:       assertEquals(47, Node.IS_DISPATCHER);
1909:       assertEquals(2, Node.POST_FLAG);
1910:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1911:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1912:       assertEquals(40, Node.ORIGINALNAME_PROP);
1913:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1914:       assertEquals(50, Node.FREE_CALL);
1915:       assertEquals(46, Node.IS_NAMESPACE);
1916:       assertEquals(54, Node.SLASH_V);
1917:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1918:       assertEquals(43, Node.IS_CONSTANT_NAME);
1919:       assertEquals(47, Node.IS_DISPATCHER);
1920:       assertEquals(2, Node.POST_FLAG);
1921:       assertEquals(37, Node.OPT_ARG_NAME);
1922:       assertEquals(4095, Node.COLUMN_MASK);
1923:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1924:       assertEquals(32, Node.INCRDECR_PROP);
1925:       assertEquals(46, Node.IS_NAMESPACE);
1926:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1927:       assertEquals(1, Node.DECR_FLAG);
1928:       assertEquals(12, Node.COLUMN_BITS);
1929:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1930:       assertEquals(50, Node.FREE_CALL);
1931:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1932:       assertEquals(57, Node.REFLECTED_OBJECT);
1933:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1934:       assertEquals(54, Node.SLASH_V);
1935:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1936:       assertEquals(30, Node.VAR_ARGS_NAME);
1937:       assertEquals(49, Node.DIRECT_EVAL);
1938:       assertEquals(40, Node.ORIGINALNAME_PROP);
1939:       assertEquals(48, Node.DIRECTIVES);
1940:       assertEquals(56, Node.CHANGE_TIME);
1941:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1942:       assertEquals(57, Node.LAST_PROP);
1943:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1944:       assertEquals(36, Node.QUOTED_PROP);
1945:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1946:       assertEquals(8, Node.FLAG_NO_THROWS);
1947:       assertEquals(39, Node.EMPTY_BLOCK);
1948:       assertEquals(53, Node.INPUT_ID);
1949:       assertEquals(55, Node.INFERRED_FUNCTION);
1950:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1951:       assertEquals(29, Node.JSDOC_INFO_PROP);
1952:       assertEquals(52, Node.LENGTH);
1953:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1954:       assertEquals(43, Node.IS_CONSTANT_NAME);
1955:       assertEquals(36, Node.QUOTED_PROP);
1956:       assertEquals(55, Node.INFERRED_FUNCTION);
1957:       assertEquals(29, Node.JSDOC_INFO_PROP);
1958:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1959:       assertEquals(53, Node.INPUT_ID);
1960:       assertEquals(39, Node.EMPTY_BLOCK);
1961:       assertEquals(47, Node.IS_DISPATCHER);
1962:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1963:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1964:       assertEquals(50, Node.FREE_CALL);
1965:       assertEquals(2, Node.POST_FLAG);
1966:       assertEquals(46, Node.IS_NAMESPACE);
1967:       assertEquals(40, Node.ORIGINALNAME_PROP);
1968:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1969:       assertEquals(57, Node.LAST_PROP);
1970:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1971:       assertEquals(54, Node.SLASH_V);
1972:       assertEquals(30, Node.VAR_ARGS_NAME);
1973:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1974:       assertEquals(12, Node.COLUMN_BITS);
1975:       assertEquals(32, Node.INCRDECR_PROP);
1976:       assertEquals(52, Node.LENGTH);
1977:       assertEquals(1, Node.DECR_FLAG);
1978:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1979:       assertEquals(56, Node.CHANGE_TIME);
1980:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1981:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1982:       assertEquals(8, Node.FLAG_NO_THROWS);
1983:       assertEquals(57, Node.REFLECTED_OBJECT);
1984:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1985:       assertEquals(4095, Node.COLUMN_MASK);
1986:       assertEquals(48, Node.DIRECTIVES);
1987:       assertEquals(49, Node.DIRECT_EVAL);
1988:       assertEquals(37, Node.OPT_ARG_NAME);
1989:   }
1990: }
RegularFileObject[/tmp/EvoSuite_205_1628256065043/com/google/javascript/rhino/Node_205_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:05 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_205_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_205_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_205_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:21:05.546 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

ArrayList<JSType> arrayList0 = new ArrayList<JSType>();
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertNotNull(arrayList0);

Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) arrayList0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertNotNull(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)116;
byteArray0[1] = (byte) (-12);
byteArray0[3] = (byte) (-115);
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertEquals(4, byteArray0.length);
assertArrayEquals(new byte[] {(byte)116, (byte) (-12), (byte)0, (byte) (-115)}, byteArray0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertNotNull(iterable0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

Node node1 = new Node(1642, node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertEquals(1642, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

Node.NodeMismatch node_NodeMismatch0 = node0.checkTreeEqualsImpl(node1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertFalse(node1.isIn());
assertEquals(1642, node1.getType());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotNull(node_NodeMismatch0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

node1.setType(1056);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertEquals(1056, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

node1.putProp(184, arrayList0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertEquals(1056, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

String string0 = node1.getSourceFileName();
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertEquals(1056, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNull(string0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);

boolean boolean1 = node0.isCast();
assertFalse(boolean1);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

boolean boolean2 = node0.isDebugger();
assertFalse(boolean2);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertNotSame(node0, node1);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

int int0 = Node.mergeLineCharNo((byte) (-12), 8);
assertEquals((-1), int0);

boolean boolean3 = node0.isAnd();
assertFalse(boolean3);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertNotSame(node0, node1);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node0.equals((Object)node1));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);

Node node2 = node1.srcrefTree(node0);
assertTrue(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertTrue(arrayList0.isEmpty());
assertEquals(0, arrayList0.size());
assertFalse(node2.isTry());
assertFalse(node2.isVoid());
assertFalse(node2.isFunction());
assertFalse(node2.isArrayLit());
assertEquals(1056, node2.getType());
assertFalse(node2.isEmpty());
assertFalse(node2.isIf());
assertFalse(node2.isGetterDef());
assertFalse(node2.isDelProp());
assertFalse(node2.isNE());
assertFalse(node2.isDebugger());
assertFalse(node2.isTrue());
assertFalse(node2.isIn());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertTrue(node2.hasChildren());
assertEquals(1, node2.getChildCount());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isCase());
assertFalse(node2.isRegExp());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isFor());
assertFalse(node2.isCast());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isNot());
assertFalse(node2.isLabelName());
assertFalse(node2.isNumber());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.isDo());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isCall());
assertFalse(node2.isString());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isNull());
assertFalse(node2.isReturn());
assertFalse(node2.isGetProp());
assertTrue(node2.hasOneChild());
assertFalse(node2.isAssign());
assertFalse(node2.isWhile());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isBreak());
assertFalse(node0.isHook());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isGetProp());
assertTrue(node0.isParamList());
assertFalse(node0.isString());
assertEquals(83, node0.getType());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isExprResult());
assertFalse(node0.isComma());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isWith());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isTrue());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isSwitch());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isIn());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isParamList());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isNumber());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDelProp());
assertFalse(node1.isArrayLit());
assertFalse(node1.isExprResult());
assertFalse(node1.isOr());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isNull());
assertFalse(node1.isLabel());
assertFalse(node1.isEmpty());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isHook());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertTrue(node1.hasChildren());
assertFalse(node1.isThis());
assertEquals(1, node1.getChildCount());
assertTrue(node1.hasOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isCase());
assertFalse(node1.isFor());
assertFalse(node1.isNot());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.isScript());
assertFalse(node1.isGetProp());
assertFalse(node1.isTry());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isDebugger());
assertFalse(node1.isAnd());
assertFalse(node1.isIf());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCast());
assertEquals(1056, node1.getType());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isThrow());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertNotNull(node2);
assertSame(node2, node1);
assertNotSame(node2, node0);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node0);
assertSame(node1, node2);
assertFalse(node2.equals((Object)node0));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);


[MASTER] 13:21:07.835 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_218_1628256067613/com/google/javascript/rhino/Node_218_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_218_1628256067613/com/google/javascript/rhino/Node_218_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:07.835 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:07.835 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:07.836 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 758
[MASTER] 13:21:07.837 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_218_1628256067613/com/google/javascript/rhino/Node_218_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:07 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_218_tmp__ESTest extends Node_218_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber((-2591.135802832726), 0, 0);
23:       assertFalse(node0.isThis());
24:       assertFalse(node0.isComma());
25:       assertFalse(node0.isBreak());
26:       assertFalse(node0.isInstanceOf());
27:       assertFalse(node0.isGetProp());
28:       assertFalse(node0.isFalse());
29:       assertFalse(node0.isHook());
30:       assertFalse(node0.isThrow());
31:       assertFalse(node0.isSwitch());
32:       assertFalse(node0.isCase());
33:       assertFalse(node0.isString());
34:       assertFalse(node0.isScript());
35:       assertFalse(node0.isAnd());
36:       assertFalse(node0.isObjectLit());
37:       assertFalse(node0.isNot());
38:       assertFalse(node0.isNE());
39:       assertFalse(node0.isIf());
40:       assertFalse(node0.isGetterDef());
41:       assertFalse(node0.hasMoreThanOneChild());
42:       assertFalse(node0.isCast());
43:       assertFalse(node0.isContinue());
44:       assertFalse(node0.hasOneChild());
45:       assertEquals(39, node0.getType());
46:       assertFalse(node0.isFor());
47:       assertEquals(0, node0.getCharno());
48:       assertFalse(node0.isInc());
49:       assertFalse(node0.isRegExp());
50:       assertFalse(node0.isWith());
51:       assertFalse(node0.isIn());
52:       assertFalse(node0.isSetterDef());
53:       assertFalse(node0.isParamList());
54:       assertEquals(0, node0.getLineno());
55:       assertFalse(node0.isCall());
56:       assertFalse(node0.isCatch());
57:       assertEquals(0, node0.getChildCount());
58:       assertFalse(node0.isVar());
59:       assertFalse(node0.isBlock());
60:       assertFalse(node0.isDebugger());
61:       assertFalse(node0.isTry());
62:       assertFalse(node0.isFunction());
63:       assertFalse(node0.isArrayLit());
64:       assertFalse(node0.isStringKey());
65:       assertFalse(node0.isDec());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isTypeOf());
68:       assertTrue(node0.isNumber());
69:       assertFalse(node0.isLabelName());
70:       assertFalse(node0.isGetElem());
71:       assertFalse(node0.isEmpty());
72:       assertFalse(node0.isAssignAdd());
73:       assertFalse(node0.isReturn());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isLabel());
76:       assertFalse(node0.isWhile());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isDefaultCase());
79:       assertFalse(node0.isVoid());
80:       assertFalse(node0.isDo());
81:       assertFalse(node0.isNew());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isAdd());
84:       assertFalse(node0.isName());
85:       assertFalse(node0.isOr());
86:       assertEquals(0, node0.getSourcePosition());
87:       assertFalse(node0.isTrue());
88:       assertFalse(node0.isNull());
89:       assertNotNull(node0);
90:       assertEquals(29, Node.JSDOC_INFO_PROP);
91:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
92:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
93:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
94:       assertEquals(37, Node.OPT_ARG_NAME);
95:       assertEquals(53, Node.INPUT_ID);
96:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
97:       assertEquals(36, Node.QUOTED_PROP);
98:       assertEquals(43, Node.IS_CONSTANT_NAME);
99:       assertEquals(56, Node.CHANGE_TIME);
100:       assertEquals(51, Node.STATIC_SOURCE_FILE);
101:       assertEquals(46, Node.IS_NAMESPACE);
102:       assertEquals(30, Node.VAR_ARGS_NAME);
103:       assertEquals(57, Node.LAST_PROP);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
106:       assertEquals(15, Node.NO_SIDE_EFFECTS);
107:       assertEquals(2, Node.POST_FLAG);
108:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
109:       assertEquals(47, Node.IS_DISPATCHER);
110:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
111:       assertEquals(50, Node.FREE_CALL);
112:       assertEquals(40, Node.ORIGINALNAME_PROP);
113:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
114:       assertEquals(39, Node.EMPTY_BLOCK);
115:       assertEquals(48, Node.DIRECTIVES);
116:       assertEquals(52, Node.LENGTH);
117:       assertEquals(8, Node.FLAG_NO_THROWS);
118:       assertEquals(54, Node.SLASH_V);
119:       assertEquals(57, Node.REFLECTED_OBJECT);
120:       assertEquals(49, Node.DIRECT_EVAL);
121:       assertEquals(1, Node.DECR_FLAG);
122:       assertEquals(4095, Node.COLUMN_MASK);
123:       assertEquals(32, Node.INCRDECR_PROP);
124:       assertEquals(12, Node.COLUMN_BITS);
125:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
126:       
127:       InputId inputId0 = node0.getInputId();
128:       assertFalse(node0.isThis());
129:       assertFalse(node0.isComma());
130:       assertFalse(node0.isBreak());
131:       assertFalse(node0.isInstanceOf());
132:       assertFalse(node0.isGetProp());
133:       assertFalse(node0.isFalse());
134:       assertFalse(node0.isHook());
135:       assertFalse(node0.isThrow());
136:       assertFalse(node0.isSwitch());
137:       assertFalse(node0.isCase());
138:       assertFalse(node0.isString());
139:       assertFalse(node0.isScript());
140:       assertFalse(node0.isAnd());
141:       assertFalse(node0.isObjectLit());
142:       assertFalse(node0.isNot());
143:       assertFalse(node0.isNE());
144:       assertFalse(node0.isIf());
145:       assertFalse(node0.isGetterDef());
146:       assertFalse(node0.hasMoreThanOneChild());
147:       assertFalse(node0.isCast());
148:       assertFalse(node0.isContinue());
149:       assertFalse(node0.hasOneChild());
150:       assertEquals(39, node0.getType());
151:       assertFalse(node0.isFor());
152:       assertEquals(0, node0.getCharno());
153:       assertFalse(node0.isInc());
154:       assertFalse(node0.isRegExp());
155:       assertFalse(node0.isWith());
156:       assertFalse(node0.isIn());
157:       assertFalse(node0.isSetterDef());
158:       assertFalse(node0.isParamList());
159:       assertEquals(0, node0.getLineno());
160:       assertFalse(node0.isCall());
161:       assertFalse(node0.isCatch());
162:       assertEquals(0, node0.getChildCount());
163:       assertFalse(node0.isVar());
164:       assertFalse(node0.isBlock());
165:       assertFalse(node0.isDebugger());
166:       assertFalse(node0.isTry());
167:       assertFalse(node0.isFunction());
168:       assertFalse(node0.isArrayLit());
169:       assertFalse(node0.isStringKey());
170:       assertFalse(node0.isDec());
171:       assertFalse(node0.isDelProp());
172:       assertFalse(node0.isTypeOf());
173:       assertTrue(node0.isNumber());
174:       assertFalse(node0.isLabelName());
175:       assertFalse(node0.isGetElem());
176:       assertFalse(node0.isEmpty());
177:       assertFalse(node0.isAssignAdd());
178:       assertFalse(node0.isReturn());
179:       assertFalse(node0.isAssign());
180:       assertFalse(node0.isLabel());
181:       assertFalse(node0.isWhile());
182:       assertFalse(node0.hasChildren());
183:       assertFalse(node0.isDefaultCase());
184:       assertFalse(node0.isVoid());
185:       assertFalse(node0.isDo());
186:       assertFalse(node0.isNew());
187:       assertFalse(node0.isExprResult());
188:       assertFalse(node0.isAdd());
189:       assertFalse(node0.isName());
190:       assertFalse(node0.isOr());
191:       assertEquals(0, node0.getSourcePosition());
192:       assertFalse(node0.isTrue());
193:       assertFalse(node0.isNull());
194:       assertNull(inputId0);
195:       assertEquals(29, Node.JSDOC_INFO_PROP);
196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
197:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
199:       assertEquals(37, Node.OPT_ARG_NAME);
200:       assertEquals(53, Node.INPUT_ID);
201:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
202:       assertEquals(36, Node.QUOTED_PROP);
203:       assertEquals(43, Node.IS_CONSTANT_NAME);
204:       assertEquals(56, Node.CHANGE_TIME);
205:       assertEquals(51, Node.STATIC_SOURCE_FILE);
206:       assertEquals(46, Node.IS_NAMESPACE);
207:       assertEquals(30, Node.VAR_ARGS_NAME);
208:       assertEquals(57, Node.LAST_PROP);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
211:       assertEquals(15, Node.NO_SIDE_EFFECTS);
212:       assertEquals(2, Node.POST_FLAG);
213:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
214:       assertEquals(47, Node.IS_DISPATCHER);
215:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
216:       assertEquals(50, Node.FREE_CALL);
217:       assertEquals(40, Node.ORIGINALNAME_PROP);
218:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
219:       assertEquals(39, Node.EMPTY_BLOCK);
220:       assertEquals(48, Node.DIRECTIVES);
221:       assertEquals(52, Node.LENGTH);
222:       assertEquals(8, Node.FLAG_NO_THROWS);
223:       assertEquals(54, Node.SLASH_V);
224:       assertEquals(57, Node.REFLECTED_OBJECT);
225:       assertEquals(49, Node.DIRECT_EVAL);
226:       assertEquals(1, Node.DECR_FLAG);
227:       assertEquals(4095, Node.COLUMN_MASK);
228:       assertEquals(32, Node.INCRDECR_PROP);
229:       assertEquals(12, Node.COLUMN_BITS);
230:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
231:       
232:       int int0 = node0.getType();
233:       assertEquals(39, int0);
234:       assertFalse(node0.isThis());
235:       assertFalse(node0.isComma());
236:       assertFalse(node0.isBreak());
237:       assertFalse(node0.isInstanceOf());
238:       assertFalse(node0.isGetProp());
239:       assertFalse(node0.isFalse());
240:       assertFalse(node0.isHook());
241:       assertFalse(node0.isThrow());
242:       assertFalse(node0.isSwitch());
243:       assertFalse(node0.isCase());
244:       assertFalse(node0.isString());
245:       assertFalse(node0.isScript());
246:       assertFalse(node0.isAnd());
247:       assertFalse(node0.isObjectLit());
248:       assertFalse(node0.isNot());
249:       assertFalse(node0.isNE());
250:       assertFalse(node0.isIf());
251:       assertFalse(node0.isGetterDef());
252:       assertFalse(node0.hasMoreThanOneChild());
253:       assertFalse(node0.isCast());
254:       assertFalse(node0.isContinue());
255:       assertFalse(node0.hasOneChild());
256:       assertEquals(39, node0.getType());
257:       assertFalse(node0.isFor());
258:       assertEquals(0, node0.getCharno());
259:       assertFalse(node0.isInc());
260:       assertFalse(node0.isRegExp());
261:       assertFalse(node0.isWith());
262:       assertFalse(node0.isIn());
263:       assertFalse(node0.isSetterDef());
264:       assertFalse(node0.isParamList());
265:       assertEquals(0, node0.getLineno());
266:       assertFalse(node0.isCall());
267:       assertFalse(node0.isCatch());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isVar());
270:       assertFalse(node0.isBlock());
271:       assertFalse(node0.isDebugger());
272:       assertFalse(node0.isTry());
273:       assertFalse(node0.isFunction());
274:       assertFalse(node0.isArrayLit());
275:       assertFalse(node0.isStringKey());
276:       assertFalse(node0.isDec());
277:       assertFalse(node0.isDelProp());
278:       assertFalse(node0.isTypeOf());
279:       assertTrue(node0.isNumber());
280:       assertFalse(node0.isLabelName());
281:       assertFalse(node0.isGetElem());
282:       assertFalse(node0.isEmpty());
283:       assertFalse(node0.isAssignAdd());
284:       assertFalse(node0.isReturn());
285:       assertFalse(node0.isAssign());
286:       assertFalse(node0.isLabel());
287:       assertFalse(node0.isWhile());
288:       assertFalse(node0.hasChildren());
289:       assertFalse(node0.isDefaultCase());
290:       assertFalse(node0.isVoid());
291:       assertFalse(node0.isDo());
292:       assertFalse(node0.isNew());
293:       assertFalse(node0.isExprResult());
294:       assertFalse(node0.isAdd());
295:       assertFalse(node0.isName());
296:       assertFalse(node0.isOr());
297:       assertEquals(0, node0.getSourcePosition());
298:       assertFalse(node0.isTrue());
299:       assertFalse(node0.isNull());
300:       assertEquals(29, Node.JSDOC_INFO_PROP);
301:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
302:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
303:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
304:       assertEquals(37, Node.OPT_ARG_NAME);
305:       assertEquals(53, Node.INPUT_ID);
306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
307:       assertEquals(36, Node.QUOTED_PROP);
308:       assertEquals(43, Node.IS_CONSTANT_NAME);
309:       assertEquals(56, Node.CHANGE_TIME);
310:       assertEquals(51, Node.STATIC_SOURCE_FILE);
311:       assertEquals(46, Node.IS_NAMESPACE);
312:       assertEquals(30, Node.VAR_ARGS_NAME);
313:       assertEquals(57, Node.LAST_PROP);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
316:       assertEquals(15, Node.NO_SIDE_EFFECTS);
317:       assertEquals(2, Node.POST_FLAG);
318:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
319:       assertEquals(47, Node.IS_DISPATCHER);
320:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
321:       assertEquals(50, Node.FREE_CALL);
322:       assertEquals(40, Node.ORIGINALNAME_PROP);
323:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
324:       assertEquals(39, Node.EMPTY_BLOCK);
325:       assertEquals(48, Node.DIRECTIVES);
326:       assertEquals(52, Node.LENGTH);
327:       assertEquals(8, Node.FLAG_NO_THROWS);
328:       assertEquals(54, Node.SLASH_V);
329:       assertEquals(57, Node.REFLECTED_OBJECT);
330:       assertEquals(49, Node.DIRECT_EVAL);
331:       assertEquals(1, Node.DECR_FLAG);
332:       assertEquals(4095, Node.COLUMN_MASK);
333:       assertEquals(32, Node.INCRDECR_PROP);
334:       assertEquals(12, Node.COLUMN_BITS);
335:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
336:       
337:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
338:       assertFalse(node0.isThis());
339:       assertFalse(node0.isComma());
340:       assertFalse(node0.isBreak());
341:       assertFalse(node0.isInstanceOf());
342:       assertFalse(node0.isGetProp());
343:       assertFalse(node0.isFalse());
344:       assertFalse(node0.isHook());
345:       assertFalse(node0.isThrow());
346:       assertFalse(node0.isSwitch());
347:       assertFalse(node0.isCase());
348:       assertFalse(node0.isString());
349:       assertFalse(node0.isScript());
350:       assertFalse(node0.isAnd());
351:       assertFalse(node0.isObjectLit());
352:       assertFalse(node0.isNot());
353:       assertFalse(node0.isNE());
354:       assertFalse(node0.isIf());
355:       assertFalse(node0.isGetterDef());
356:       assertFalse(node0.hasMoreThanOneChild());
357:       assertFalse(node0.isCast());
358:       assertFalse(node0.isContinue());
359:       assertFalse(node0.hasOneChild());
360:       assertEquals(39, node0.getType());
361:       assertFalse(node0.isFor());
362:       assertEquals(0, node0.getCharno());
363:       assertFalse(node0.isInc());
364:       assertFalse(node0.isRegExp());
365:       assertFalse(node0.isWith());
366:       assertFalse(node0.isIn());
367:       assertFalse(node0.isSetterDef());
368:       assertFalse(node0.isParamList());
369:       assertEquals(0, node0.getLineno());
370:       assertFalse(node0.isCall());
371:       assertFalse(node0.isCatch());
372:       assertEquals(0, node0.getChildCount());
373:       assertFalse(node0.isVar());
374:       assertFalse(node0.isBlock());
375:       assertFalse(node0.isDebugger());
376:       assertFalse(node0.isTry());
377:       assertFalse(node0.isFunction());
378:       assertFalse(node0.isArrayLit());
379:       assertFalse(node0.isStringKey());
380:       assertFalse(node0.isDec());
381:       assertFalse(node0.isDelProp());
382:       assertFalse(node0.isTypeOf());
383:       assertTrue(node0.isNumber());
384:       assertFalse(node0.isLabelName());
385:       assertFalse(node0.isGetElem());
386:       assertFalse(node0.isEmpty());
387:       assertFalse(node0.isAssignAdd());
388:       assertFalse(node0.isReturn());
389:       assertFalse(node0.isAssign());
390:       assertFalse(node0.isLabel());
391:       assertFalse(node0.isWhile());
392:       assertFalse(node0.hasChildren());
393:       assertFalse(node0.isDefaultCase());
394:       assertFalse(node0.isVoid());
395:       assertFalse(node0.isDo());
396:       assertFalse(node0.isNew());
397:       assertFalse(node0.isExprResult());
398:       assertFalse(node0.isAdd());
399:       assertFalse(node0.isName());
400:       assertFalse(node0.isOr());
401:       assertEquals(0, node0.getSourcePosition());
402:       assertFalse(node0.isTrue());
403:       assertFalse(node0.isNull());
404:       assertNotNull(node_FileLevelJsDocBuilder0);
405:       assertEquals(29, Node.JSDOC_INFO_PROP);
406:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
407:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
408:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
409:       assertEquals(37, Node.OPT_ARG_NAME);
410:       assertEquals(53, Node.INPUT_ID);
411:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
412:       assertEquals(36, Node.QUOTED_PROP);
413:       assertEquals(43, Node.IS_CONSTANT_NAME);
414:       assertEquals(56, Node.CHANGE_TIME);
415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
416:       assertEquals(46, Node.IS_NAMESPACE);
417:       assertEquals(30, Node.VAR_ARGS_NAME);
418:       assertEquals(57, Node.LAST_PROP);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
421:       assertEquals(15, Node.NO_SIDE_EFFECTS);
422:       assertEquals(2, Node.POST_FLAG);
423:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
424:       assertEquals(47, Node.IS_DISPATCHER);
425:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
426:       assertEquals(50, Node.FREE_CALL);
427:       assertEquals(40, Node.ORIGINALNAME_PROP);
428:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
429:       assertEquals(39, Node.EMPTY_BLOCK);
430:       assertEquals(48, Node.DIRECTIVES);
431:       assertEquals(52, Node.LENGTH);
432:       assertEquals(8, Node.FLAG_NO_THROWS);
433:       assertEquals(54, Node.SLASH_V);
434:       assertEquals(57, Node.REFLECTED_OBJECT);
435:       assertEquals(49, Node.DIRECT_EVAL);
436:       assertEquals(1, Node.DECR_FLAG);
437:       assertEquals(4095, Node.COLUMN_MASK);
438:       assertEquals(32, Node.INCRDECR_PROP);
439:       assertEquals(12, Node.COLUMN_BITS);
440:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
441:       
442:       node_FileLevelJsDocBuilder0.append("Object");
443:       assertFalse(node0.isThis());
444:       assertFalse(node0.isComma());
445:       assertFalse(node0.isBreak());
446:       assertFalse(node0.isInstanceOf());
447:       assertFalse(node0.isGetProp());
448:       assertFalse(node0.isFalse());
449:       assertFalse(node0.isHook());
450:       assertFalse(node0.isThrow());
451:       assertFalse(node0.isSwitch());
452:       assertFalse(node0.isCase());
453:       assertFalse(node0.isString());
454:       assertFalse(node0.isScript());
455:       assertFalse(node0.isAnd());
456:       assertFalse(node0.isObjectLit());
457:       assertFalse(node0.isNot());
458:       assertFalse(node0.isNE());
459:       assertFalse(node0.isIf());
460:       assertFalse(node0.isGetterDef());
461:       assertFalse(node0.hasMoreThanOneChild());
462:       assertFalse(node0.isCast());
463:       assertFalse(node0.isContinue());
464:       assertFalse(node0.hasOneChild());
465:       assertEquals(39, node0.getType());
466:       assertFalse(node0.isFor());
467:       assertEquals(0, node0.getCharno());
468:       assertFalse(node0.isInc());
469:       assertFalse(node0.isRegExp());
470:       assertFalse(node0.isWith());
471:       assertFalse(node0.isIn());
472:       assertFalse(node0.isSetterDef());
473:       assertFalse(node0.isParamList());
474:       assertEquals(0, node0.getLineno());
475:       assertFalse(node0.isCall());
476:       assertFalse(node0.isCatch());
477:       assertEquals(0, node0.getChildCount());
478:       assertFalse(node0.isVar());
479:       assertFalse(node0.isBlock());
480:       assertFalse(node0.isDebugger());
481:       assertFalse(node0.isTry());
482:       assertFalse(node0.isFunction());
483:       assertFalse(node0.isArrayLit());
484:       assertFalse(node0.isStringKey());
485:       assertFalse(node0.isDec());
486:       assertFalse(node0.isDelProp());
487:       assertFalse(node0.isTypeOf());
488:       assertTrue(node0.isNumber());
489:       assertFalse(node0.isLabelName());
490:       assertFalse(node0.isGetElem());
491:       assertFalse(node0.isEmpty());
492:       assertFalse(node0.isAssignAdd());
493:       assertFalse(node0.isReturn());
494:       assertFalse(node0.isAssign());
495:       assertFalse(node0.isLabel());
496:       assertFalse(node0.isWhile());
497:       assertFalse(node0.hasChildren());
498:       assertFalse(node0.isDefaultCase());
499:       assertFalse(node0.isVoid());
500:       assertFalse(node0.isDo());
501:       assertFalse(node0.isNew());
502:       assertFalse(node0.isExprResult());
503:       assertFalse(node0.isAdd());
504:       assertFalse(node0.isName());
505:       assertFalse(node0.isOr());
506:       assertEquals(0, node0.getSourcePosition());
507:       assertFalse(node0.isTrue());
508:       assertFalse(node0.isNull());
509:       assertEquals(29, Node.JSDOC_INFO_PROP);
510:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
511:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
512:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
513:       assertEquals(37, Node.OPT_ARG_NAME);
514:       assertEquals(53, Node.INPUT_ID);
515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
516:       assertEquals(36, Node.QUOTED_PROP);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertEquals(56, Node.CHANGE_TIME);
519:       assertEquals(51, Node.STATIC_SOURCE_FILE);
520:       assertEquals(46, Node.IS_NAMESPACE);
521:       assertEquals(30, Node.VAR_ARGS_NAME);
522:       assertEquals(57, Node.LAST_PROP);
523:       assertEquals(55, Node.INFERRED_FUNCTION);
524:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
525:       assertEquals(15, Node.NO_SIDE_EFFECTS);
526:       assertEquals(2, Node.POST_FLAG);
527:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
528:       assertEquals(47, Node.IS_DISPATCHER);
529:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
530:       assertEquals(50, Node.FREE_CALL);
531:       assertEquals(40, Node.ORIGINALNAME_PROP);
532:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
533:       assertEquals(39, Node.EMPTY_BLOCK);
534:       assertEquals(48, Node.DIRECTIVES);
535:       assertEquals(52, Node.LENGTH);
536:       assertEquals(8, Node.FLAG_NO_THROWS);
537:       assertEquals(54, Node.SLASH_V);
538:       assertEquals(57, Node.REFLECTED_OBJECT);
539:       assertEquals(49, Node.DIRECT_EVAL);
540:       assertEquals(1, Node.DECR_FLAG);
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(32, Node.INCRDECR_PROP);
543:       assertEquals(12, Node.COLUMN_BITS);
544:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
545:       
546:       Set<String> set0 = node0.getDirectives();
547:       assertFalse(node0.isThis());
548:       assertFalse(node0.isComma());
549:       assertFalse(node0.isBreak());
550:       assertFalse(node0.isInstanceOf());
551:       assertFalse(node0.isGetProp());
552:       assertFalse(node0.isFalse());
553:       assertFalse(node0.isHook());
554:       assertFalse(node0.isThrow());
555:       assertFalse(node0.isSwitch());
556:       assertFalse(node0.isCase());
557:       assertFalse(node0.isString());
558:       assertFalse(node0.isScript());
559:       assertFalse(node0.isAnd());
560:       assertFalse(node0.isObjectLit());
561:       assertFalse(node0.isNot());
562:       assertFalse(node0.isNE());
563:       assertFalse(node0.isIf());
564:       assertFalse(node0.isGetterDef());
565:       assertFalse(node0.hasMoreThanOneChild());
566:       assertFalse(node0.isCast());
567:       assertFalse(node0.isContinue());
568:       assertFalse(node0.hasOneChild());
569:       assertEquals(39, node0.getType());
570:       assertFalse(node0.isFor());
571:       assertEquals(0, node0.getCharno());
572:       assertFalse(node0.isInc());
573:       assertFalse(node0.isRegExp());
574:       assertFalse(node0.isWith());
575:       assertFalse(node0.isIn());
576:       assertFalse(node0.isSetterDef());
577:       assertFalse(node0.isParamList());
578:       assertEquals(0, node0.getLineno());
579:       assertFalse(node0.isCall());
580:       assertFalse(node0.isCatch());
581:       assertEquals(0, node0.getChildCount());
582:       assertFalse(node0.isVar());
583:       assertFalse(node0.isBlock());
584:       assertFalse(node0.isDebugger());
585:       assertFalse(node0.isTry());
586:       assertFalse(node0.isFunction());
587:       assertFalse(node0.isArrayLit());
588:       assertFalse(node0.isStringKey());
589:       assertFalse(node0.isDec());
590:       assertFalse(node0.isDelProp());
591:       assertFalse(node0.isTypeOf());
592:       assertTrue(node0.isNumber());
593:       assertFalse(node0.isLabelName());
594:       assertFalse(node0.isGetElem());
595:       assertFalse(node0.isEmpty());
596:       assertFalse(node0.isAssignAdd());
597:       assertFalse(node0.isReturn());
598:       assertFalse(node0.isAssign());
599:       assertFalse(node0.isLabel());
600:       assertFalse(node0.isWhile());
601:       assertFalse(node0.hasChildren());
602:       assertFalse(node0.isDefaultCase());
603:       assertFalse(node0.isVoid());
604:       assertFalse(node0.isDo());
605:       assertFalse(node0.isNew());
606:       assertFalse(node0.isExprResult());
607:       assertFalse(node0.isAdd());
608:       assertFalse(node0.isName());
609:       assertFalse(node0.isOr());
610:       assertEquals(0, node0.getSourcePosition());
611:       assertFalse(node0.isTrue());
612:       assertFalse(node0.isNull());
613:       assertNull(set0);
614:       assertEquals(29, Node.JSDOC_INFO_PROP);
615:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
616:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
617:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
618:       assertEquals(37, Node.OPT_ARG_NAME);
619:       assertEquals(53, Node.INPUT_ID);
620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
621:       assertEquals(36, Node.QUOTED_PROP);
622:       assertEquals(43, Node.IS_CONSTANT_NAME);
623:       assertEquals(56, Node.CHANGE_TIME);
624:       assertEquals(51, Node.STATIC_SOURCE_FILE);
625:       assertEquals(46, Node.IS_NAMESPACE);
626:       assertEquals(30, Node.VAR_ARGS_NAME);
627:       assertEquals(57, Node.LAST_PROP);
628:       assertEquals(55, Node.INFERRED_FUNCTION);
629:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(2, Node.POST_FLAG);
632:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
633:       assertEquals(47, Node.IS_DISPATCHER);
634:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
635:       assertEquals(50, Node.FREE_CALL);
636:       assertEquals(40, Node.ORIGINALNAME_PROP);
637:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
638:       assertEquals(39, Node.EMPTY_BLOCK);
639:       assertEquals(48, Node.DIRECTIVES);
640:       assertEquals(52, Node.LENGTH);
641:       assertEquals(8, Node.FLAG_NO_THROWS);
642:       assertEquals(54, Node.SLASH_V);
643:       assertEquals(57, Node.REFLECTED_OBJECT);
644:       assertEquals(49, Node.DIRECT_EVAL);
645:       assertEquals(1, Node.DECR_FLAG);
646:       assertEquals(4095, Node.COLUMN_MASK);
647:       assertEquals(32, Node.INCRDECR_PROP);
648:       assertEquals(12, Node.COLUMN_BITS);
649:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
650:       
651:       Node node1 = Node.newString(43, "O|5`v|$6-", 46, 31);
652:       assertFalse(node1.isString());
653:       assertFalse(node1.isIn());
654:       assertFalse(node1.isInc());
655:       assertFalse(node1.isFor());
656:       assertFalse(node1.isCase());
657:       assertFalse(node1.isArrayLit());
658:       assertFalse(node1.isThrow());
659:       assertFalse(node1.isGetterDef());
660:       assertFalse(node1.isFunction());
661:       assertFalse(node1.isSwitch());
662:       assertFalse(node1.isDebugger());
663:       assertFalse(node1.isCatch());
664:       assertFalse(node1.isInstanceOf());
665:       assertFalse(node1.isWith());
666:       assertFalse(node1.isRegExp());
667:       assertFalse(node1.isScript());
668:       assertFalse(node1.isSetterDef());
669:       assertFalse(node1.isThis());
670:       assertFalse(node1.isTry());
671:       assertFalse(node1.isHook());
672:       assertFalse(node1.isNE());
673:       assertFalse(node1.isIf());
674:       assertEquals(43, node1.getType());
675:       assertFalse(node1.hasMoreThanOneChild());
676:       assertFalse(node1.isReturn());
677:       assertFalse(node1.isLabel());
678:       assertFalse(node1.isOr());
679:       assertFalse(node1.isContinue());
680:       assertFalse(node1.isDec());
681:       assertFalse(node1.hasChildren());
682:       assertFalse(node1.isBlock());
683:       assertFalse(node1.isAssignAdd());
684:       assertFalse(node1.isDo());
685:       assertFalse(node1.isNew());
686:       assertFalse(node1.isWhile());
687:       assertFalse(node1.isVar());
688:       assertFalse(node1.isCast());
689:       assertFalse(node1.hasOneChild());
690:       assertFalse(node1.isNumber());
691:       assertFalse(node1.isParamList());
692:       assertTrue(node1.isFalse());
693:       assertFalse(node1.isLabelName());
694:       assertFalse(node1.isStringKey());
695:       assertFalse(node1.isAnd());
696:       assertEquals(188447, node1.getSourcePosition());
697:       assertFalse(node1.isNot());
698:       assertEquals(0, node1.getChildCount());
699:       assertFalse(node1.isObjectLit());
700:       assertFalse(node1.isComma());
701:       assertFalse(node1.isGetProp());
702:       assertFalse(node1.isDefaultCase());
703:       assertEquals(46, node1.getLineno());
704:       assertFalse(node1.isCall());
705:       assertFalse(node1.isGetElem());
706:       assertFalse(node1.isEmpty());
707:       assertFalse(node1.isAdd());
708:       assertFalse(node1.isAssign());
709:       assertFalse(node1.isTypeOf());
710:       assertEquals(31, node1.getCharno());
711:       assertFalse(node1.isBreak());
712:       assertFalse(node1.isTrue());
713:       assertFalse(node1.isExprResult());
714:       assertFalse(node1.isNull());
715:       assertFalse(node1.isVoid());
716:       assertFalse(node1.isDelProp());
717:       assertFalse(node1.isName());
718:       assertNotNull(node1);
719:       assertFalse(node1.equals((Object)node0));
720:       assertEquals(48, Node.DIRECTIVES);
721:       assertEquals(39, Node.EMPTY_BLOCK);
722:       assertEquals(55, Node.INFERRED_FUNCTION);
723:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
724:       assertEquals(8, Node.FLAG_NO_THROWS);
725:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
726:       assertEquals(4095, Node.COLUMN_MASK);
727:       assertEquals(50, Node.FREE_CALL);
728:       assertEquals(40, Node.ORIGINALNAME_PROP);
729:       assertEquals(43, Node.IS_CONSTANT_NAME);
730:       assertEquals(57, Node.REFLECTED_OBJECT);
731:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
732:       assertEquals(53, Node.INPUT_ID);
733:       assertEquals(36, Node.QUOTED_PROP);
734:       assertEquals(52, Node.LENGTH);
735:       assertEquals(29, Node.JSDOC_INFO_PROP);
736:       assertEquals(30, Node.VAR_ARGS_NAME);
737:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
738:       assertEquals(15, Node.NO_SIDE_EFFECTS);
739:       assertEquals(47, Node.IS_DISPATCHER);
740:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
741:       assertEquals(57, Node.LAST_PROP);
742:       assertEquals(37, Node.OPT_ARG_NAME);
743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
744:       assertEquals(51, Node.STATIC_SOURCE_FILE);
745:       assertEquals(2, Node.POST_FLAG);
746:       assertEquals(49, Node.DIRECT_EVAL);
747:       assertEquals(56, Node.CHANGE_TIME);
748:       assertEquals(46, Node.IS_NAMESPACE);
749:       assertEquals(54, Node.SLASH_V);
750:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
751:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
752:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
753:       assertEquals(1, Node.DECR_FLAG);
754:       assertEquals(12, Node.COLUMN_BITS);
755:       assertEquals(32, Node.INCRDECR_PROP);
756:       
757:       Iterable<Node> iterable0 = node0.children();
758:       assertFalse(iterable0.contains(node1));
759:       assertFalse(node0.isThis());
760:       assertFalse(node0.isComma());
761:       assertFalse(node0.isBreak());
762:       assertFalse(node0.isInstanceOf());
763:       assertFalse(node0.isGetProp());
764:       assertFalse(node0.isFalse());
765:       assertFalse(node0.isHook());
766:       assertFalse(node0.isThrow());
767:       assertFalse(node0.isSwitch());
768:       assertFalse(node0.isCase());
769:       assertFalse(node0.isString());
770:       assertFalse(node0.isScript());
771:       assertFalse(node0.isAnd());
772:       assertFalse(node0.isObjectLit());
773:       assertFalse(node0.isNot());
774:       assertFalse(node0.isNE());
775:       assertFalse(node0.isIf());
776:       assertFalse(node0.isGetterDef());
777:       assertFalse(node0.hasMoreThanOneChild());
778:       assertFalse(node0.isCast());
779:       assertFalse(node0.isContinue());
780:       assertFalse(node0.hasOneChild());
781:       assertEquals(39, node0.getType());
782:       assertFalse(node0.isFor());
783:       assertEquals(0, node0.getCharno());
784:       assertFalse(node0.isInc());
785:       assertFalse(node0.isRegExp());
786:       assertFalse(node0.isWith());
787:       assertFalse(node0.isIn());
788:       assertFalse(node0.isSetterDef());
789:       assertFalse(node0.isParamList());
790:       assertEquals(0, node0.getLineno());
791:       assertFalse(node0.isCall());
792:       assertFalse(node0.isCatch());
793:       assertEquals(0, node0.getChildCount());
794:       assertFalse(node0.isVar());
795:       assertFalse(node0.isBlock());
796:       assertFalse(node0.isDebugger());
797:       assertFalse(node0.isTry());
798:       assertFalse(node0.isFunction());
799:       assertFalse(node0.isArrayLit());
800:       assertFalse(node0.isStringKey());
801:       assertFalse(node0.isDec());
802:       assertFalse(node0.isDelProp());
803:       assertFalse(node0.isTypeOf());
804:       assertTrue(node0.isNumber());
805:       assertFalse(node0.isLabelName());
806:       assertFalse(node0.isGetElem());
807:       assertFalse(node0.isEmpty());
808:       assertFalse(node0.isAssignAdd());
809:       assertFalse(node0.isReturn());
810:       assertFalse(node0.isAssign());
811:       assertFalse(node0.isLabel());
812:       assertFalse(node0.isWhile());
813:       assertFalse(node0.hasChildren());
814:       assertFalse(node0.isDefaultCase());
815:       assertFalse(node0.isVoid());
816:       assertFalse(node0.isDo());
817:       assertFalse(node0.isNew());
818:       assertFalse(node0.isExprResult());
819:       assertFalse(node0.isAdd());
820:       assertFalse(node0.isName());
821:       assertFalse(node0.isOr());
822:       assertEquals(0, node0.getSourcePosition());
823:       assertFalse(node0.isTrue());
824:       assertFalse(node0.isNull());
825:       assertNotNull(iterable0);
826:       assertFalse(node0.equals((Object)node1));
827:       assertEquals(29, Node.JSDOC_INFO_PROP);
828:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
829:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
830:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
831:       assertEquals(37, Node.OPT_ARG_NAME);
832:       assertEquals(53, Node.INPUT_ID);
833:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
834:       assertEquals(36, Node.QUOTED_PROP);
835:       assertEquals(43, Node.IS_CONSTANT_NAME);
836:       assertEquals(56, Node.CHANGE_TIME);
837:       assertEquals(51, Node.STATIC_SOURCE_FILE);
838:       assertEquals(46, Node.IS_NAMESPACE);
839:       assertEquals(30, Node.VAR_ARGS_NAME);
840:       assertEquals(57, Node.LAST_PROP);
841:       assertEquals(55, Node.INFERRED_FUNCTION);
842:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
843:       assertEquals(15, Node.NO_SIDE_EFFECTS);
844:       assertEquals(2, Node.POST_FLAG);
845:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
846:       assertEquals(47, Node.IS_DISPATCHER);
847:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
848:       assertEquals(50, Node.FREE_CALL);
849:       assertEquals(40, Node.ORIGINALNAME_PROP);
850:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
851:       assertEquals(39, Node.EMPTY_BLOCK);
852:       assertEquals(48, Node.DIRECTIVES);
853:       assertEquals(52, Node.LENGTH);
854:       assertEquals(8, Node.FLAG_NO_THROWS);
855:       assertEquals(54, Node.SLASH_V);
856:       assertEquals(57, Node.REFLECTED_OBJECT);
857:       assertEquals(49, Node.DIRECT_EVAL);
858:       assertEquals(1, Node.DECR_FLAG);
859:       assertEquals(4095, Node.COLUMN_MASK);
860:       assertEquals(32, Node.INCRDECR_PROP);
861:       assertEquals(12, Node.COLUMN_BITS);
862:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
863:       
864:       Set<String> set1 = node0.getDirectives();
865:       assertFalse(node0.isThis());
866:       assertFalse(node0.isComma());
867:       assertFalse(node0.isBreak());
868:       assertFalse(node0.isInstanceOf());
869:       assertFalse(node0.isGetProp());
870:       assertFalse(node0.isFalse());
871:       assertFalse(node0.isHook());
872:       assertFalse(node0.isThrow());
873:       assertFalse(node0.isSwitch());
874:       assertFalse(node0.isCase());
875:       assertFalse(node0.isString());
876:       assertFalse(node0.isScript());
877:       assertFalse(node0.isAnd());
878:       assertFalse(node0.isObjectLit());
879:       assertFalse(node0.isNot());
880:       assertFalse(node0.isNE());
881:       assertFalse(node0.isIf());
882:       assertFalse(node0.isGetterDef());
883:       assertFalse(node0.hasMoreThanOneChild());
884:       assertFalse(node0.isCast());
885:       assertFalse(node0.isContinue());
886:       assertFalse(node0.hasOneChild());
887:       assertEquals(39, node0.getType());
888:       assertFalse(node0.isFor());
889:       assertEquals(0, node0.getCharno());
890:       assertFalse(node0.isInc());
891:       assertFalse(node0.isRegExp());
892:       assertFalse(node0.isWith());
893:       assertFalse(node0.isIn());
894:       assertFalse(node0.isSetterDef());
895:       assertFalse(node0.isParamList());
896:       assertEquals(0, node0.getLineno());
897:       assertFalse(node0.isCall());
898:       assertFalse(node0.isCatch());
899:       assertEquals(0, node0.getChildCount());
900:       assertFalse(node0.isVar());
901:       assertFalse(node0.isBlock());
902:       assertFalse(node0.isDebugger());
903:       assertFalse(node0.isTry());
904:       assertFalse(node0.isFunction());
905:       assertFalse(node0.isArrayLit());
906:       assertFalse(node0.isStringKey());
907:       assertFalse(node0.isDec());
908:       assertFalse(node0.isDelProp());
909:       assertFalse(node0.isTypeOf());
910:       assertTrue(node0.isNumber());
911:       assertFalse(node0.isLabelName());
912:       assertFalse(node0.isGetElem());
913:       assertFalse(node0.isEmpty());
914:       assertFalse(node0.isAssignAdd());
915:       assertFalse(node0.isReturn());
916:       assertFalse(node0.isAssign());
917:       assertFalse(node0.isLabel());
918:       assertFalse(node0.isWhile());
919:       assertFalse(node0.hasChildren());
920:       assertFalse(node0.isDefaultCase());
921:       assertFalse(node0.isVoid());
922:       assertFalse(node0.isDo());
923:       assertFalse(node0.isNew());
924:       assertFalse(node0.isExprResult());
925:       assertFalse(node0.isAdd());
926:       assertFalse(node0.isName());
927:       assertFalse(node0.isOr());
928:       assertEquals(0, node0.getSourcePosition());
929:       assertFalse(node0.isTrue());
930:       assertFalse(node0.isNull());
931:       assertNull(set1);
932:       assertFalse(node0.equals((Object)node1));
933:       assertEquals(29, Node.JSDOC_INFO_PROP);
934:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
935:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
936:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
937:       assertEquals(37, Node.OPT_ARG_NAME);
938:       assertEquals(53, Node.INPUT_ID);
939:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
940:       assertEquals(36, Node.QUOTED_PROP);
941:       assertEquals(43, Node.IS_CONSTANT_NAME);
942:       assertEquals(56, Node.CHANGE_TIME);
943:       assertEquals(51, Node.STATIC_SOURCE_FILE);
944:       assertEquals(46, Node.IS_NAMESPACE);
945:       assertEquals(30, Node.VAR_ARGS_NAME);
946:       assertEquals(57, Node.LAST_PROP);
947:       assertEquals(55, Node.INFERRED_FUNCTION);
948:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
949:       assertEquals(15, Node.NO_SIDE_EFFECTS);
950:       assertEquals(2, Node.POST_FLAG);
951:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
952:       assertEquals(47, Node.IS_DISPATCHER);
953:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
954:       assertEquals(50, Node.FREE_CALL);
955:       assertEquals(40, Node.ORIGINALNAME_PROP);
956:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
957:       assertEquals(39, Node.EMPTY_BLOCK);
958:       assertEquals(48, Node.DIRECTIVES);
959:       assertEquals(52, Node.LENGTH);
960:       assertEquals(8, Node.FLAG_NO_THROWS);
961:       assertEquals(54, Node.SLASH_V);
962:       assertEquals(57, Node.REFLECTED_OBJECT);
963:       assertEquals(49, Node.DIRECT_EVAL);
964:       assertEquals(1, Node.DECR_FLAG);
965:       assertEquals(4095, Node.COLUMN_MASK);
966:       assertEquals(32, Node.INCRDECR_PROP);
967:       assertEquals(12, Node.COLUMN_BITS);
968:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
969:       
970:       boolean boolean0 = node0.isScript();
971:       assertFalse(boolean0);
972:       assertFalse(node0.isThis());
973:       assertFalse(node0.isComma());
974:       assertFalse(node0.isBreak());
975:       assertFalse(node0.isInstanceOf());
976:       assertFalse(node0.isGetProp());
977:       assertFalse(node0.isFalse());
978:       assertFalse(node0.isHook());
979:       assertFalse(node0.isThrow());
980:       assertFalse(node0.isSwitch());
981:       assertFalse(node0.isCase());
982:       assertFalse(node0.isString());
983:       assertFalse(node0.isScript());
984:       assertFalse(node0.isAnd());
985:       assertFalse(node0.isObjectLit());
986:       assertFalse(node0.isNot());
987:       assertFalse(node0.isNE());
988:       assertFalse(node0.isIf());
989:       assertFalse(node0.isGetterDef());
990:       assertFalse(node0.hasMoreThanOneChild());
991:       assertFalse(node0.isCast());
992:       assertFalse(node0.isContinue());
993:       assertFalse(node0.hasOneChild());
994:       assertEquals(39, node0.getType());
995:       assertFalse(node0.isFor());
996:       assertEquals(0, node0.getCharno());
997:       assertFalse(node0.isInc());
998:       assertFalse(node0.isRegExp());
999:       assertFalse(node0.isWith());
1000:       assertFalse(node0.isIn());
1001:       assertFalse(node0.isSetterDef());
1002:       assertFalse(node0.isParamList());
1003:       assertEquals(0, node0.getLineno());
1004:       assertFalse(node0.isCall());
1005:       assertFalse(node0.isCatch());
1006:       assertEquals(0, node0.getChildCount());
1007:       assertFalse(node0.isVar());
1008:       assertFalse(node0.isBlock());
1009:       assertFalse(node0.isDebugger());
1010:       assertFalse(node0.isTry());
1011:       assertFalse(node0.isFunction());
1012:       assertFalse(node0.isArrayLit());
1013:       assertFalse(node0.isStringKey());
1014:       assertFalse(node0.isDec());
1015:       assertFalse(node0.isDelProp());
1016:       assertFalse(node0.isTypeOf());
1017:       assertTrue(node0.isNumber());
1018:       assertFalse(node0.isLabelName());
1019:       assertFalse(node0.isGetElem());
1020:       assertFalse(node0.isEmpty());
1021:       assertFalse(node0.isAssignAdd());
1022:       assertFalse(node0.isReturn());
1023:       assertFalse(node0.isAssign());
1024:       assertFalse(node0.isLabel());
1025:       assertFalse(node0.isWhile());
1026:       assertFalse(node0.hasChildren());
1027:       assertFalse(node0.isDefaultCase());
1028:       assertFalse(node0.isVoid());
1029:       assertFalse(node0.isDo());
1030:       assertFalse(node0.isNew());
1031:       assertFalse(node0.isExprResult());
1032:       assertFalse(node0.isAdd());
1033:       assertFalse(node0.isName());
1034:       assertFalse(node0.isOr());
1035:       assertEquals(0, node0.getSourcePosition());
1036:       assertFalse(node0.isTrue());
1037:       assertFalse(node0.isNull());
1038:       assertFalse(node0.equals((Object)node1));
1039:       assertEquals(29, Node.JSDOC_INFO_PROP);
1040:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1041:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1042:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1043:       assertEquals(37, Node.OPT_ARG_NAME);
1044:       assertEquals(53, Node.INPUT_ID);
1045:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1046:       assertEquals(36, Node.QUOTED_PROP);
1047:       assertEquals(43, Node.IS_CONSTANT_NAME);
1048:       assertEquals(56, Node.CHANGE_TIME);
1049:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1050:       assertEquals(46, Node.IS_NAMESPACE);
1051:       assertEquals(30, Node.VAR_ARGS_NAME);
1052:       assertEquals(57, Node.LAST_PROP);
1053:       assertEquals(55, Node.INFERRED_FUNCTION);
1054:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1055:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1056:       assertEquals(2, Node.POST_FLAG);
1057:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1058:       assertEquals(47, Node.IS_DISPATCHER);
1059:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1060:       assertEquals(50, Node.FREE_CALL);
1061:       assertEquals(40, Node.ORIGINALNAME_PROP);
1062:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1063:       assertEquals(39, Node.EMPTY_BLOCK);
1064:       assertEquals(48, Node.DIRECTIVES);
1065:       assertEquals(52, Node.LENGTH);
1066:       assertEquals(8, Node.FLAG_NO_THROWS);
1067:       assertEquals(54, Node.SLASH_V);
1068:       assertEquals(57, Node.REFLECTED_OBJECT);
1069:       assertEquals(49, Node.DIRECT_EVAL);
1070:       assertEquals(1, Node.DECR_FLAG);
1071:       assertEquals(4095, Node.COLUMN_MASK);
1072:       assertEquals(32, Node.INCRDECR_PROP);
1073:       assertEquals(12, Node.COLUMN_BITS);
1074:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1075:       
1076:       Node node2 = Node.newNumber(431.72676541559, 43, 52);
1077:       assertFalse(node2.isExprResult());
1078:       assertFalse(node2.isScript());
1079:       assertFalse(node2.isAnd());
1080:       assertFalse(node2.isObjectLit());
1081:       assertFalse(node2.hasOneChild());
1082:       assertFalse(node2.isNot());
1083:       assertFalse(node2.isLabel());
1084:       assertFalse(node2.isLabelName());
1085:       assertFalse(node2.isAssignAdd());
1086:       assertEquals(43, node2.getLineno());
1087:       assertFalse(node2.isCast());
1088:       assertFalse(node2.isThrow());
1089:       assertFalse(node2.isFalse());
1090:       assertFalse(node2.isContinue());
1091:       assertFalse(node2.isInc());
1092:       assertFalse(node2.isBlock());
1093:       assertFalse(node2.isSwitch());
1094:       assertFalse(node2.isCase());
1095:       assertEquals(176180, node2.getSourcePosition());
1096:       assertFalse(node2.isIn());
1097:       assertFalse(node2.isThis());
1098:       assertFalse(node2.isNE());
1099:       assertFalse(node2.isFor());
1100:       assertFalse(node2.isIf());
1101:       assertFalse(node2.hasMoreThanOneChild());
1102:       assertFalse(node2.isCatch());
1103:       assertFalse(node2.isHook());
1104:       assertEquals(39, node2.getType());
1105:       assertFalse(node2.isWith());
1106:       assertFalse(node2.isInstanceOf());
1107:       assertFalse(node2.isTrue());
1108:       assertFalse(node2.isFunction());
1109:       assertFalse(node2.isVoid());
1110:       assertFalse(node2.isRegExp());
1111:       assertFalse(node2.isDebugger());
1112:       assertFalse(node2.isTry());
1113:       assertFalse(node2.isDefaultCase());
1114:       assertFalse(node2.isEmpty());
1115:       assertFalse(node2.isGetterDef());
1116:       assertFalse(node2.isSetterDef());
1117:       assertFalse(node2.isParamList());
1118:       assertEquals(52, node2.getCharno());
1119:       assertFalse(node2.isStringKey());
1120:       assertFalse(node2.isVar());
1121:       assertFalse(node2.isArrayLit());
1122:       assertEquals(0, node2.getChildCount());
1123:       assertFalse(node2.isNew());
1124:       assertFalse(node2.isWhile());
1125:       assertFalse(node2.isDo());
1126:       assertFalse(node2.isString());
1127:       assertFalse(node2.isAdd());
1128:       assertFalse(node2.isOr());
1129:       assertFalse(node2.isComma());
1130:       assertFalse(node2.isNull());
1131:       assertFalse(node2.isDec());
1132:       assertFalse(node2.isBreak());
1133:       assertFalse(node2.isGetProp());
1134:       assertFalse(node2.hasChildren());
1135:       assertTrue(node2.isNumber());
1136:       assertFalse(node2.isReturn());
1137:       assertFalse(node2.isDelProp());
1138:       assertFalse(node2.isName());
1139:       assertFalse(node2.isCall());
1140:       assertFalse(node2.isGetElem());
1141:       assertFalse(node2.isAssign());
1142:       assertFalse(node2.isTypeOf());
1143:       assertNotNull(node2);
1144:       assertNotSame(node2, node0);
1145:       assertFalse(node2.equals((Object)node1));
1146:       assertFalse(node2.equals((Object)node0));
1147:       assertEquals(30, Node.VAR_ARGS_NAME);
1148:       assertEquals(49, Node.DIRECT_EVAL);
1149:       assertEquals(1, Node.DECR_FLAG);
1150:       assertEquals(12, Node.COLUMN_BITS);
1151:       assertEquals(57, Node.LAST_PROP);
1152:       assertEquals(46, Node.IS_NAMESPACE);
1153:       assertEquals(54, Node.SLASH_V);
1154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1155:       assertEquals(37, Node.OPT_ARG_NAME);
1156:       assertEquals(2, Node.POST_FLAG);
1157:       assertEquals(40, Node.ORIGINALNAME_PROP);
1158:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1159:       assertEquals(29, Node.JSDOC_INFO_PROP);
1160:       assertEquals(47, Node.IS_DISPATCHER);
1161:       assertEquals(57, Node.REFLECTED_OBJECT);
1162:       assertEquals(56, Node.CHANGE_TIME);
1163:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1164:       assertEquals(52, Node.LENGTH);
1165:       assertEquals(53, Node.INPUT_ID);
1166:       assertEquals(55, Node.INFERRED_FUNCTION);
1167:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1168:       assertEquals(8, Node.FLAG_NO_THROWS);
1169:       assertEquals(39, Node.EMPTY_BLOCK);
1170:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1171:       assertEquals(36, Node.QUOTED_PROP);
1172:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1173:       assertEquals(43, Node.IS_CONSTANT_NAME);
1174:       assertEquals(48, Node.DIRECTIVES);
1175:       assertEquals(4095, Node.COLUMN_MASK);
1176:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1177:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1178:       assertEquals(50, Node.FREE_CALL);
1179:       assertEquals(32, Node.INCRDECR_PROP);
1180:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1181:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1182:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1183:       
1184:       node2.addChildToBack(node0);
1185:       assertFalse(node0.isThis());
1186:       assertFalse(node0.isComma());
1187:       assertFalse(node0.isBreak());
1188:       assertFalse(node0.isInstanceOf());
1189:       assertFalse(node0.isGetProp());
1190:       assertFalse(node0.isFalse());
1191:       assertFalse(node0.isHook());
1192:       assertFalse(node0.isThrow());
1193:       assertFalse(node0.isSwitch());
1194:       assertFalse(node0.isCase());
1195:       assertFalse(node0.isString());
1196:       assertFalse(node0.isScript());
1197:       assertFalse(node0.isAnd());
1198:       assertFalse(node0.isObjectLit());
1199:       assertFalse(node0.isNot());
1200:       assertFalse(node0.isNE());
1201:       assertFalse(node0.isIf());
1202:       assertFalse(node0.isGetterDef());
1203:       assertFalse(node0.hasMoreThanOneChild());
1204:       assertFalse(node0.isCast());
1205:       assertFalse(node0.isContinue());
1206:       assertFalse(node0.hasOneChild());
1207:       assertEquals(39, node0.getType());
1208:       assertFalse(node0.isFor());
1209:       assertEquals(0, node0.getCharno());
1210:       assertFalse(node0.isInc());
1211:       assertFalse(node0.isRegExp());
1212:       assertFalse(node0.isWith());
1213:       assertFalse(node0.isIn());
1214:       assertFalse(node0.isSetterDef());
1215:       assertFalse(node0.isParamList());
1216:       assertEquals(0, node0.getLineno());
1217:       assertFalse(node0.isCall());
1218:       assertFalse(node0.isCatch());
1219:       assertEquals(0, node0.getChildCount());
1220:       assertFalse(node0.isVar());
1221:       assertFalse(node0.isBlock());
1222:       assertFalse(node0.isDebugger());
1223:       assertFalse(node0.isTry());
1224:       assertFalse(node0.isFunction());
1225:       assertFalse(node0.isArrayLit());
1226:       assertFalse(node0.isStringKey());
1227:       assertFalse(node0.isDec());
1228:       assertFalse(node0.isDelProp());
1229:       assertFalse(node0.isTypeOf());
1230:       assertTrue(node0.isNumber());
1231:       assertFalse(node0.isLabelName());
1232:       assertFalse(node0.isGetElem());
1233:       assertFalse(node0.isEmpty());
1234:       assertFalse(node0.isAssignAdd());
1235:       assertFalse(node0.isReturn());
1236:       assertFalse(node0.isAssign());
1237:       assertFalse(node0.isLabel());
1238:       assertFalse(node0.isWhile());
1239:       assertFalse(node0.hasChildren());
1240:       assertFalse(node0.isDefaultCase());
1241:       assertFalse(node0.isVoid());
1242:       assertFalse(node0.isDo());
1243:       assertFalse(node0.isNew());
1244:       assertFalse(node0.isExprResult());
1245:       assertFalse(node0.isAdd());
1246:       assertFalse(node0.isName());
1247:       assertFalse(node0.isOr());
1248:       assertEquals(0, node0.getSourcePosition());
1249:       assertFalse(node0.isTrue());
1250:       assertFalse(node0.isNull());
1251:       assertFalse(node2.isExprResult());
1252:       assertFalse(node2.isScript());
1253:       assertFalse(node2.isAnd());
1254:       assertFalse(node2.isObjectLit());
1255:       assertFalse(node2.isNot());
1256:       assertFalse(node2.isLabel());
1257:       assertFalse(node2.isLabelName());
1258:       assertFalse(node2.isAssignAdd());
1259:       assertEquals(43, node2.getLineno());
1260:       assertFalse(node2.isCast());
1261:       assertFalse(node2.isThrow());
1262:       assertFalse(node2.isFalse());
1263:       assertFalse(node2.isContinue());
1264:       assertFalse(node2.isInc());
1265:       assertFalse(node2.isBlock());
1266:       assertFalse(node2.isSwitch());
1267:       assertFalse(node2.isCase());
1268:       assertEquals(176180, node2.getSourcePosition());
1269:       assertFalse(node2.isIn());
1270:       assertFalse(node2.isThis());
1271:       assertFalse(node2.isNE());
1272:       assertFalse(node2.isFor());
1273:       assertFalse(node2.isIf());
1274:       assertFalse(node2.hasMoreThanOneChild());
1275:       assertFalse(node2.isCatch());
1276:       assertFalse(node2.isHook());
1277:       assertEquals(39, node2.getType());
1278:       assertFalse(node2.isWith());
1279:       assertEquals(1, node2.getChildCount());
1280:       assertTrue(node2.hasChildren());
1281:       assertFalse(node2.isInstanceOf());
1282:       assertFalse(node2.isTrue());
1283:       assertFalse(node2.isFunction());
1284:       assertFalse(node2.isVoid());
1285:       assertFalse(node2.isRegExp());
1286:       assertFalse(node2.isDebugger());
1287:       assertFalse(node2.isTry());
1288:       assertFalse(node2.isDefaultCase());
1289:       assertFalse(node2.isEmpty());
1290:       assertFalse(node2.isGetterDef());
1291:       assertFalse(node2.isSetterDef());
1292:       assertFalse(node2.isParamList());
1293:       assertEquals(52, node2.getCharno());
1294:       assertFalse(node2.isStringKey());
1295:       assertFalse(node2.isVar());
1296:       assertFalse(node2.isArrayLit());
1297:       assertFalse(node2.isNew());
1298:       assertFalse(node2.isWhile());
1299:       assertFalse(node2.isDo());
1300:       assertFalse(node2.isString());
1301:       assertFalse(node2.isAdd());
1302:       assertFalse(node2.isOr());
1303:       assertFalse(node2.isComma());
1304:       assertFalse(node2.isNull());
1305:       assertFalse(node2.isDec());
1306:       assertFalse(node2.isBreak());
1307:       assertFalse(node2.isGetProp());
1308:       assertTrue(node2.hasOneChild());
1309:       assertTrue(node2.isNumber());
1310:       assertFalse(node2.isReturn());
1311:       assertFalse(node2.isDelProp());
1312:       assertFalse(node2.isName());
1313:       assertFalse(node2.isCall());
1314:       assertFalse(node2.isGetElem());
1315:       assertFalse(node2.isAssign());
1316:       assertFalse(node2.isTypeOf());
1317:       assertNotSame(node0, node2);
1318:       assertNotSame(node2, node0);
1319:       assertFalse(node0.equals((Object)node1));
1320:       assertFalse(node0.equals((Object)node2));
1321:       assertFalse(node2.equals((Object)node1));
1322:       assertFalse(node2.equals((Object)node0));
1323:       assertEquals(29, Node.JSDOC_INFO_PROP);
1324:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1325:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1326:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1327:       assertEquals(37, Node.OPT_ARG_NAME);
1328:       assertEquals(53, Node.INPUT_ID);
1329:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1330:       assertEquals(36, Node.QUOTED_PROP);
1331:       assertEquals(43, Node.IS_CONSTANT_NAME);
1332:       assertEquals(56, Node.CHANGE_TIME);
1333:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1334:       assertEquals(46, Node.IS_NAMESPACE);
1335:       assertEquals(30, Node.VAR_ARGS_NAME);
1336:       assertEquals(57, Node.LAST_PROP);
1337:       assertEquals(55, Node.INFERRED_FUNCTION);
1338:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1339:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1340:       assertEquals(2, Node.POST_FLAG);
1341:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1342:       assertEquals(47, Node.IS_DISPATCHER);
1343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1344:       assertEquals(50, Node.FREE_CALL);
1345:       assertEquals(40, Node.ORIGINALNAME_PROP);
1346:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1347:       assertEquals(39, Node.EMPTY_BLOCK);
1348:       assertEquals(48, Node.DIRECTIVES);
1349:       assertEquals(52, Node.LENGTH);
1350:       assertEquals(8, Node.FLAG_NO_THROWS);
1351:       assertEquals(54, Node.SLASH_V);
1352:       assertEquals(57, Node.REFLECTED_OBJECT);
1353:       assertEquals(49, Node.DIRECT_EVAL);
1354:       assertEquals(1, Node.DECR_FLAG);
1355:       assertEquals(4095, Node.COLUMN_MASK);
1356:       assertEquals(32, Node.INCRDECR_PROP);
1357:       assertEquals(12, Node.COLUMN_BITS);
1358:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1359:       assertEquals(30, Node.VAR_ARGS_NAME);
1360:       assertEquals(49, Node.DIRECT_EVAL);
1361:       assertEquals(1, Node.DECR_FLAG);
1362:       assertEquals(12, Node.COLUMN_BITS);
1363:       assertEquals(57, Node.LAST_PROP);
1364:       assertEquals(46, Node.IS_NAMESPACE);
1365:       assertEquals(54, Node.SLASH_V);
1366:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1367:       assertEquals(37, Node.OPT_ARG_NAME);
1368:       assertEquals(2, Node.POST_FLAG);
1369:       assertEquals(40, Node.ORIGINALNAME_PROP);
1370:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1371:       assertEquals(29, Node.JSDOC_INFO_PROP);
1372:       assertEquals(47, Node.IS_DISPATCHER);
1373:       assertEquals(57, Node.REFLECTED_OBJECT);
1374:       assertEquals(56, Node.CHANGE_TIME);
1375:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1376:       assertEquals(52, Node.LENGTH);
1377:       assertEquals(53, Node.INPUT_ID);
1378:       assertEquals(55, Node.INFERRED_FUNCTION);
1379:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1380:       assertEquals(8, Node.FLAG_NO_THROWS);
1381:       assertEquals(39, Node.EMPTY_BLOCK);
1382:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1383:       assertEquals(36, Node.QUOTED_PROP);
1384:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1385:       assertEquals(43, Node.IS_CONSTANT_NAME);
1386:       assertEquals(48, Node.DIRECTIVES);
1387:       assertEquals(4095, Node.COLUMN_MASK);
1388:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1389:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1390:       assertEquals(50, Node.FREE_CALL);
1391:       assertEquals(32, Node.INCRDECR_PROP);
1392:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1393:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1394:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1395:       
1396:       node2.setVarArgs(false);
1397:       assertFalse(node2.isExprResult());
1398:       assertFalse(node2.isScript());
1399:       assertFalse(node2.isAnd());
1400:       assertFalse(node2.isObjectLit());
1401:       assertFalse(node2.isNot());
1402:       assertFalse(node2.isLabel());
1403:       assertFalse(node2.isLabelName());
1404:       assertFalse(node2.isAssignAdd());
1405:       assertEquals(43, node2.getLineno());
1406:       assertFalse(node2.isCast());
1407:       assertFalse(node2.isThrow());
1408:       assertFalse(node2.isFalse());
1409:       assertFalse(node2.isContinue());
1410:       assertFalse(node2.isInc());
1411:       assertFalse(node2.isBlock());
1412:       assertFalse(node2.isSwitch());
1413:       assertFalse(node2.isCase());
1414:       assertEquals(176180, node2.getSourcePosition());
1415:       assertFalse(node2.isIn());
1416:       assertFalse(node2.isThis());
1417:       assertFalse(node2.isNE());
1418:       assertFalse(node2.isFor());
1419:       assertFalse(node2.isIf());
1420:       assertFalse(node2.hasMoreThanOneChild());
1421:       assertFalse(node2.isCatch());
1422:       assertFalse(node2.isHook());
1423:       assertEquals(39, node2.getType());
1424:       assertFalse(node2.isWith());
1425:       assertEquals(1, node2.getChildCount());
1426:       assertTrue(node2.hasChildren());
1427:       assertFalse(node2.isInstanceOf());
1428:       assertFalse(node2.isTrue());
1429:       assertFalse(node2.isFunction());
1430:       assertFalse(node2.isVoid());
1431:       assertFalse(node2.isRegExp());
1432:       assertFalse(node2.isDebugger());
1433:       assertFalse(node2.isTry());
1434:       assertFalse(node2.isDefaultCase());
1435:       assertFalse(node2.isEmpty());
1436:       assertFalse(node2.isGetterDef());
1437:       assertFalse(node2.isSetterDef());
1438:       assertFalse(node2.isParamList());
1439:       assertEquals(52, node2.getCharno());
1440:       assertFalse(node2.isStringKey());
1441:       assertFalse(node2.isVar());
1442:       assertFalse(node2.isArrayLit());
1443:       assertFalse(node2.isNew());
1444:       assertFalse(node2.isWhile());
1445:       assertFalse(node2.isDo());
1446:       assertFalse(node2.isString());
1447:       assertFalse(node2.isAdd());
1448:       assertFalse(node2.isOr());
1449:       assertFalse(node2.isComma());
1450:       assertFalse(node2.isNull());
1451:       assertFalse(node2.isDec());
1452:       assertFalse(node2.isBreak());
1453:       assertFalse(node2.isGetProp());
1454:       assertTrue(node2.hasOneChild());
1455:       assertTrue(node2.isNumber());
1456:       assertFalse(node2.isReturn());
1457:       assertFalse(node2.isDelProp());
1458:       assertFalse(node2.isName());
1459:       assertFalse(node2.isCall());
1460:       assertFalse(node2.isGetElem());
1461:       assertFalse(node2.isAssign());
1462:       assertFalse(node2.isTypeOf());
1463:       assertNotSame(node2, node0);
1464:       assertFalse(node2.equals((Object)node1));
1465:       assertFalse(node2.equals((Object)node0));
1466:       assertEquals(30, Node.VAR_ARGS_NAME);
1467:       assertEquals(49, Node.DIRECT_EVAL);
1468:       assertEquals(1, Node.DECR_FLAG);
1469:       assertEquals(12, Node.COLUMN_BITS);
1470:       assertEquals(57, Node.LAST_PROP);
1471:       assertEquals(46, Node.IS_NAMESPACE);
1472:       assertEquals(54, Node.SLASH_V);
1473:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1474:       assertEquals(37, Node.OPT_ARG_NAME);
1475:       assertEquals(2, Node.POST_FLAG);
1476:       assertEquals(40, Node.ORIGINALNAME_PROP);
1477:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1478:       assertEquals(29, Node.JSDOC_INFO_PROP);
1479:       assertEquals(47, Node.IS_DISPATCHER);
1480:       assertEquals(57, Node.REFLECTED_OBJECT);
1481:       assertEquals(56, Node.CHANGE_TIME);
1482:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1483:       assertEquals(52, Node.LENGTH);
1484:       assertEquals(53, Node.INPUT_ID);
1485:       assertEquals(55, Node.INFERRED_FUNCTION);
1486:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1487:       assertEquals(8, Node.FLAG_NO_THROWS);
1488:       assertEquals(39, Node.EMPTY_BLOCK);
1489:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1490:       assertEquals(36, Node.QUOTED_PROP);
1491:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1492:       assertEquals(43, Node.IS_CONSTANT_NAME);
1493:       assertEquals(48, Node.DIRECTIVES);
1494:       assertEquals(4095, Node.COLUMN_MASK);
1495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1496:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1497:       assertEquals(50, Node.FREE_CALL);
1498:       assertEquals(32, Node.INCRDECR_PROP);
1499:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1500:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1501:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1502:       
1503:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1504:       assertEquals(0, node_SideEffectFlags0.valueOf());
1505:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1506:       assertNotNull(node_SideEffectFlags0);
1507:       
1508:       boolean boolean1 = node0.mayMutateArguments();
1509:       assertTrue(boolean1);
1510:       assertFalse(node0.isThis());
1511:       assertFalse(node0.isComma());
1512:       assertFalse(node0.isBreak());
1513:       assertFalse(node0.isInstanceOf());
1514:       assertFalse(node0.isGetProp());
1515:       assertFalse(node0.isFalse());
1516:       assertFalse(node0.isHook());
1517:       assertFalse(node0.isThrow());
1518:       assertFalse(node0.isSwitch());
1519:       assertFalse(node0.isCase());
1520:       assertFalse(node0.isString());
1521:       assertFalse(node0.isScript());
1522:       assertFalse(node0.isAnd());
1523:       assertFalse(node0.isObjectLit());
1524:       assertFalse(node0.isNot());
1525:       assertFalse(node0.isNE());
1526:       assertFalse(node0.isIf());
1527:       assertFalse(node0.isGetterDef());
1528:       assertFalse(node0.hasMoreThanOneChild());
1529:       assertFalse(node0.isCast());
1530:       assertFalse(node0.isContinue());
1531:       assertFalse(node0.hasOneChild());
1532:       assertEquals(39, node0.getType());
1533:       assertFalse(node0.isFor());
1534:       assertEquals(0, node0.getCharno());
1535:       assertFalse(node0.isInc());
1536:       assertFalse(node0.isRegExp());
1537:       assertFalse(node0.isWith());
1538:       assertFalse(node0.isIn());
1539:       assertFalse(node0.isSetterDef());
1540:       assertFalse(node0.isParamList());
1541:       assertEquals(0, node0.getLineno());
1542:       assertFalse(node0.isCall());
1543:       assertFalse(node0.isCatch());
1544:       assertEquals(0, node0.getChildCount());
1545:       assertFalse(node0.isVar());
1546:       assertFalse(node0.isBlock());
1547:       assertFalse(node0.isDebugger());
1548:       assertFalse(node0.isTry());
1549:       assertFalse(node0.isFunction());
1550:       assertFalse(node0.isArrayLit());
1551:       assertFalse(node0.isStringKey());
1552:       assertFalse(node0.isDec());
1553:       assertFalse(node0.isDelProp());
1554:       assertFalse(node0.isTypeOf());
1555:       assertTrue(node0.isNumber());
1556:       assertFalse(node0.isLabelName());
1557:       assertFalse(node0.isGetElem());
1558:       assertFalse(node0.isEmpty());
1559:       assertFalse(node0.isAssignAdd());
1560:       assertFalse(node0.isReturn());
1561:       assertFalse(node0.isAssign());
1562:       assertFalse(node0.isLabel());
1563:       assertFalse(node0.isWhile());
1564:       assertFalse(node0.hasChildren());
1565:       assertFalse(node0.isDefaultCase());
1566:       assertFalse(node0.isVoid());
1567:       assertFalse(node0.isDo());
1568:       assertFalse(node0.isNew());
1569:       assertFalse(node0.isExprResult());
1570:       assertFalse(node0.isAdd());
1571:       assertFalse(node0.isName());
1572:       assertFalse(node0.isOr());
1573:       assertEquals(0, node0.getSourcePosition());
1574:       assertFalse(node0.isTrue());
1575:       assertFalse(node0.isNull());
1576:       assertNotSame(node0, node2);
1577:       assertFalse(node0.equals((Object)node1));
1578:       assertFalse(node0.equals((Object)node2));
1579:       assertFalse(boolean1 == boolean0);
1580:       assertEquals(29, Node.JSDOC_INFO_PROP);
1581:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1582:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1583:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1584:       assertEquals(37, Node.OPT_ARG_NAME);
1585:       assertEquals(53, Node.INPUT_ID);
1586:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1587:       assertEquals(36, Node.QUOTED_PROP);
1588:       assertEquals(43, Node.IS_CONSTANT_NAME);
1589:       assertEquals(56, Node.CHANGE_TIME);
1590:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1591:       assertEquals(46, Node.IS_NAMESPACE);
1592:       assertEquals(30, Node.VAR_ARGS_NAME);
1593:       assertEquals(57, Node.LAST_PROP);
1594:       assertEquals(55, Node.INFERRED_FUNCTION);
1595:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1596:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1597:       assertEquals(2, Node.POST_FLAG);
1598:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1599:       assertEquals(47, Node.IS_DISPATCHER);
1600:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1601:       assertEquals(50, Node.FREE_CALL);
1602:       assertEquals(40, Node.ORIGINALNAME_PROP);
1603:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1604:       assertEquals(39, Node.EMPTY_BLOCK);
1605:       assertEquals(48, Node.DIRECTIVES);
1606:       assertEquals(52, Node.LENGTH);
1607:       assertEquals(8, Node.FLAG_NO_THROWS);
1608:       assertEquals(54, Node.SLASH_V);
1609:       assertEquals(57, Node.REFLECTED_OBJECT);
1610:       assertEquals(49, Node.DIRECT_EVAL);
1611:       assertEquals(1, Node.DECR_FLAG);
1612:       assertEquals(4095, Node.COLUMN_MASK);
1613:       assertEquals(32, Node.INCRDECR_PROP);
1614:       assertEquals(12, Node.COLUMN_BITS);
1615:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1616:       
1617:       Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
1618:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1619:       assertEquals(0, node_SideEffectFlags1.valueOf());
1620:       assertNotNull(node_SideEffectFlags1);
1621:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
1622:       
1623:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
1624:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1625:       assertEquals(0, node_SideEffectFlags2.valueOf());
1626:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1627:       assertEquals(0, node_SideEffectFlags1.valueOf());
1628:       assertNotNull(node_SideEffectFlags2);
1629:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1630:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
1631:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1632:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
1633:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
1634:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
1635:       
1636:       boolean boolean2 = node0.isTry();
1637:       assertFalse(boolean2);
1638:       assertFalse(node0.isThis());
1639:       assertFalse(node0.isComma());
1640:       assertFalse(node0.isBreak());
1641:       assertFalse(node0.isInstanceOf());
1642:       assertFalse(node0.isGetProp());
1643:       assertFalse(node0.isFalse());
1644:       assertFalse(node0.isHook());
1645:       assertFalse(node0.isThrow());
1646:       assertFalse(node0.isSwitch());
1647:       assertFalse(node0.isCase());
1648:       assertFalse(node0.isString());
1649:       assertFalse(node0.isScript());
1650:       assertFalse(node0.isAnd());
1651:       assertFalse(node0.isObjectLit());
1652:       assertFalse(node0.isNot());
1653:       assertFalse(node0.isNE());
1654:       assertFalse(node0.isIf());
1655:       assertFalse(node0.isGetterDef());
1656:       assertFalse(node0.hasMoreThanOneChild());
1657:       assertFalse(node0.isCast());
1658:       assertFalse(node0.isContinue());
1659:       assertFalse(node0.hasOneChild());
1660:       assertEquals(39, node0.getType());
1661:       assertFalse(node0.isFor());
1662:       assertEquals(0, node0.getCharno());
1663:       assertFalse(node0.isInc());
1664:       assertFalse(node0.isRegExp());
1665:       assertFalse(node0.isWith());
1666:       assertFalse(node0.isIn());
1667:       assertFalse(node0.isSetterDef());
1668:       assertFalse(node0.isParamList());
1669:       assertEquals(0, node0.getLineno());
1670:       assertFalse(node0.isCall());
1671:       assertFalse(node0.isCatch());
1672:       assertEquals(0, node0.getChildCount());
1673:       assertFalse(node0.isVar());
1674:       assertFalse(node0.isBlock());
1675:       assertFalse(node0.isDebugger());
1676:       assertFalse(node0.isTry());
1677:       assertFalse(node0.isFunction());
1678:       assertFalse(node0.isArrayLit());
1679:       assertFalse(node0.isStringKey());
1680:       assertFalse(node0.isDec());
1681:       assertFalse(node0.isDelProp());
1682:       assertFalse(node0.isTypeOf());
1683:       assertTrue(node0.isNumber());
1684:       assertFalse(node0.isLabelName());
1685:       assertFalse(node0.isGetElem());
1686:       assertFalse(node0.isEmpty());
1687:       assertFalse(node0.isAssignAdd());
1688:       assertFalse(node0.isReturn());
1689:       assertFalse(node0.isAssign());
1690:       assertFalse(node0.isLabel());
1691:       assertFalse(node0.isWhile());
1692:       assertFalse(node0.hasChildren());
1693:       assertFalse(node0.isDefaultCase());
1694:       assertFalse(node0.isVoid());
1695:       assertFalse(node0.isDo());
1696:       assertFalse(node0.isNew());
1697:       assertFalse(node0.isExprResult());
1698:       assertFalse(node0.isAdd());
1699:       assertFalse(node0.isName());
1700:       assertFalse(node0.isOr());
1701:       assertEquals(0, node0.getSourcePosition());
1702:       assertFalse(node0.isTrue());
1703:       assertFalse(node0.isNull());
1704:       assertNotSame(node0, node2);
1705:       assertFalse(node0.equals((Object)node1));
1706:       assertFalse(node0.equals((Object)node2));
1707:       assertTrue(boolean2 == boolean0);
1708:       assertFalse(boolean2 == boolean1);
1709:       assertEquals(29, Node.JSDOC_INFO_PROP);
1710:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1711:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1712:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1713:       assertEquals(37, Node.OPT_ARG_NAME);
1714:       assertEquals(53, Node.INPUT_ID);
1715:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1716:       assertEquals(36, Node.QUOTED_PROP);
1717:       assertEquals(43, Node.IS_CONSTANT_NAME);
1718:       assertEquals(56, Node.CHANGE_TIME);
1719:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1720:       assertEquals(46, Node.IS_NAMESPACE);
1721:       assertEquals(30, Node.VAR_ARGS_NAME);
1722:       assertEquals(57, Node.LAST_PROP);
1723:       assertEquals(55, Node.INFERRED_FUNCTION);
1724:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1725:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1726:       assertEquals(2, Node.POST_FLAG);
1727:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1728:       assertEquals(47, Node.IS_DISPATCHER);
1729:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1730:       assertEquals(50, Node.FREE_CALL);
1731:       assertEquals(40, Node.ORIGINALNAME_PROP);
1732:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1733:       assertEquals(39, Node.EMPTY_BLOCK);
1734:       assertEquals(48, Node.DIRECTIVES);
1735:       assertEquals(52, Node.LENGTH);
1736:       assertEquals(8, Node.FLAG_NO_THROWS);
1737:       assertEquals(54, Node.SLASH_V);
1738:       assertEquals(57, Node.REFLECTED_OBJECT);
1739:       assertEquals(49, Node.DIRECT_EVAL);
1740:       assertEquals(1, Node.DECR_FLAG);
1741:       assertEquals(4095, Node.COLUMN_MASK);
1742:       assertEquals(32, Node.INCRDECR_PROP);
1743:       assertEquals(12, Node.COLUMN_BITS);
1744:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1745:   }
1746: }
RegularFileObject[/tmp/EvoSuite_218_1628256067613/com/google/javascript/rhino/Node_218_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:07 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_218_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_218_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_218_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:21:07.942 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-2591.135802832726), 0, 0);
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(node0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

InputId inputId0 = node0.getInputId();
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNull(inputId0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

int int0 = node0.getType();
assertEquals(39, int0);
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

node_FileLevelJsDocBuilder0.append("Object");
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Set<String> set0 = node0.getDirectives();
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNull(set0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node1 = Node.newString(43, "O|5`v|$6-", 46, 31);
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isInc());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isArrayLit());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFunction());
assertFalse(node1.isSwitch());
assertFalse(node1.isDebugger());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertEquals(43, node1.getType());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertFalse(node1.isContinue());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isBlock());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNumber());
assertFalse(node1.isParamList());
assertTrue(node1.isFalse());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isAnd());
assertEquals(188447, node1.getSourcePosition());
assertFalse(node1.isNot());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isObjectLit());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isDefaultCase());
assertEquals(46, node1.getLineno());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(31, node1.getCharno());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isNull());
assertFalse(node1.isVoid());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.POST_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node1));
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(iterable0);
assertFalse(node0.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Set<String> set1 = node0.getDirectives();
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNull(set1);
assertFalse(node0.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

boolean boolean0 = node0.isScript();
assertFalse(boolean0);
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node0.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node node2 = Node.newNumber(431.72676541559, 43, 52);
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.hasOneChild());
assertFalse(node2.isNot());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertEquals(43, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertEquals(176180, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(52, node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.hasChildren());
assertTrue(node2.isNumber());
assertFalse(node2.isReturn());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertNotNull(node2);
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node2.addChildToBack(node0);
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertEquals(43, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertEquals(176180, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(52, node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertTrue(node2.hasOneChild());
assertTrue(node2.isNumber());
assertFalse(node2.isReturn());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node2.setVarArgs(false);
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isAnd());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isLabel());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertEquals(43, node2.getLineno());
assertFalse(node2.isCast());
assertFalse(node2.isThrow());
assertFalse(node2.isFalse());
assertFalse(node2.isContinue());
assertFalse(node2.isInc());
assertFalse(node2.isBlock());
assertFalse(node2.isSwitch());
assertFalse(node2.isCase());
assertEquals(176180, node2.getSourcePosition());
assertFalse(node2.isIn());
assertFalse(node2.isThis());
assertFalse(node2.isNE());
assertFalse(node2.isFor());
assertFalse(node2.isIf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isHook());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertEquals(1, node2.getChildCount());
assertTrue(node2.hasChildren());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isRegExp());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isSetterDef());
assertFalse(node2.isParamList());
assertEquals(52, node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isString());
assertFalse(node2.isAdd());
assertFalse(node2.isOr());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isDec());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertTrue(node2.hasOneChild());
assertTrue(node2.isNumber());
assertFalse(node2.isReturn());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertNotNull(node_SideEffectFlags0);

boolean boolean1 = node0.mayMutateArguments();
assertTrue(boolean1);
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(boolean1 == boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);

Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));

boolean boolean2 = node0.isTry();
assertFalse(boolean2);
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertEquals(39, node0.getType());
assertFalse(node0.isFor());
assertEquals(0, node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isRegExp());
assertFalse(node0.isWith());
assertFalse(node0.isIn());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isTry());
assertFalse(node0.isFunction());
assertFalse(node0.isArrayLit());
assertFalse(node0.isStringKey());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertTrue(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isOr());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);


[MASTER] 13:21:09.639 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_229_1628256069301/com/google/javascript/rhino/Node_229_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_229_1628256069301/com/google/javascript/rhino/Node_229_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:09.639 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:09.639 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:09.639 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 758
[MASTER] 13:21:09.641 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_229_1628256069301/com/google/javascript/rhino/Node_229_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:09 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import java.util.Set;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_229_tmp__ESTest extends Node_229_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newNumber(1.0, (-1046), (-1046));
23:       assertFalse(node0.isHook());
24:       assertFalse(node0.isFalse());
25:       assertFalse(node0.isInc());
26:       assertFalse(node0.isBreak());
27:       assertEquals((-1), node0.getCharno());
28:       assertFalse(node0.isSwitch());
29:       assertFalse(node0.isIn());
30:       assertFalse(node0.isThrow());
31:       assertFalse(node0.isEmpty());
32:       assertFalse(node0.isFunction());
33:       assertFalse(node0.isExprResult());
34:       assertFalse(node0.isGetElem());
35:       assertFalse(node0.isCast());
36:       assertFalse(node0.isDelProp());
37:       assertFalse(node0.isNot());
38:       assertFalse(node0.isDebugger());
39:       assertEquals((-1), node0.getSourcePosition());
40:       assertFalse(node0.isTrue());
41:       assertFalse(node0.isVoid());
42:       assertFalse(node0.isAnd());
43:       assertTrue(node0.isNumber());
44:       assertFalse(node0.isReturn());
45:       assertFalse(node0.isGetProp());
46:       assertFalse(node0.isObjectLit());
47:       assertFalse(node0.isString());
48:       assertFalse(node0.hasChildren());
49:       assertFalse(node0.isDec());
50:       assertFalse(node0.isTypeOf());
51:       assertFalse(node0.isComma());
52:       assertFalse(node0.isAssign());
53:       assertFalse(node0.isWhile());
54:       assertFalse(node0.isNew());
55:       assertFalse(node0.isAdd());
56:       assertFalse(node0.isCall());
57:       assertFalse(node0.isNull());
58:       assertFalse(node0.isStringKey());
59:       assertFalse(node0.isName());
60:       assertFalse(node0.isParamList());
61:       assertEquals(0, node0.getChildCount());
62:       assertFalse(node0.isOr());
63:       assertFalse(node0.isLabel());
64:       assertFalse(node0.isContinue());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isDo());
68:       assertFalse(node0.isVar());
69:       assertFalse(node0.isAssignAdd());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.isArrayLit());
73:       assertFalse(node0.isIf());
74:       assertFalse(node0.isGetterDef());
75:       assertFalse(node0.isLabelName());
76:       assertFalse(node0.isNE());
77:       assertFalse(node0.isInstanceOf());
78:       assertEquals((-1), node0.getLineno());
79:       assertFalse(node0.hasMoreThanOneChild());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isRegExp());
83:       assertFalse(node0.isScript());
84:       assertEquals(39, node0.getType());
85:       assertFalse(node0.isThis());
86:       assertFalse(node0.isCase());
87:       assertFalse(node0.isBlock());
88:       assertFalse(node0.isFor());
89:       assertNotNull(node0);
90:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
91:       assertEquals(36, Node.QUOTED_PROP);
92:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
93:       assertEquals(53, Node.INPUT_ID);
94:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
95:       assertEquals(47, Node.IS_DISPATCHER);
96:       assertEquals(37, Node.OPT_ARG_NAME);
97:       assertEquals(8, Node.FLAG_NO_THROWS);
98:       assertEquals(39, Node.EMPTY_BLOCK);
99:       assertEquals(48, Node.DIRECTIVES);
100:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
101:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
102:       assertEquals(29, Node.JSDOC_INFO_PROP);
103:       assertEquals(4095, Node.COLUMN_MASK);
104:       assertEquals(55, Node.INFERRED_FUNCTION);
105:       assertEquals(49, Node.DIRECT_EVAL);
106:       assertEquals(57, Node.REFLECTED_OBJECT);
107:       assertEquals(56, Node.CHANGE_TIME);
108:       assertEquals(54, Node.SLASH_V);
109:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
110:       assertEquals(52, Node.LENGTH);
111:       assertEquals(15, Node.NO_SIDE_EFFECTS);
112:       assertEquals(30, Node.VAR_ARGS_NAME);
113:       assertEquals(1, Node.DECR_FLAG);
114:       assertEquals(32, Node.INCRDECR_PROP);
115:       assertEquals(57, Node.LAST_PROP);
116:       assertEquals(12, Node.COLUMN_BITS);
117:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
118:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
119:       assertEquals(2, Node.POST_FLAG);
120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
121:       assertEquals(40, Node.ORIGINALNAME_PROP);
122:       assertEquals(51, Node.STATIC_SOURCE_FILE);
123:       assertEquals(50, Node.FREE_CALL);
124:       assertEquals(46, Node.IS_NAMESPACE);
125:       assertEquals(43, Node.IS_CONSTANT_NAME);
126:       
127:       InputId inputId0 = node0.getInputId();
128:       assertFalse(node0.isHook());
129:       assertFalse(node0.isFalse());
130:       assertFalse(node0.isInc());
131:       assertFalse(node0.isBreak());
132:       assertEquals((-1), node0.getCharno());
133:       assertFalse(node0.isSwitch());
134:       assertFalse(node0.isIn());
135:       assertFalse(node0.isThrow());
136:       assertFalse(node0.isEmpty());
137:       assertFalse(node0.isFunction());
138:       assertFalse(node0.isExprResult());
139:       assertFalse(node0.isGetElem());
140:       assertFalse(node0.isCast());
141:       assertFalse(node0.isDelProp());
142:       assertFalse(node0.isNot());
143:       assertFalse(node0.isDebugger());
144:       assertEquals((-1), node0.getSourcePosition());
145:       assertFalse(node0.isTrue());
146:       assertFalse(node0.isVoid());
147:       assertFalse(node0.isAnd());
148:       assertTrue(node0.isNumber());
149:       assertFalse(node0.isReturn());
150:       assertFalse(node0.isGetProp());
151:       assertFalse(node0.isObjectLit());
152:       assertFalse(node0.isString());
153:       assertFalse(node0.hasChildren());
154:       assertFalse(node0.isDec());
155:       assertFalse(node0.isTypeOf());
156:       assertFalse(node0.isComma());
157:       assertFalse(node0.isAssign());
158:       assertFalse(node0.isWhile());
159:       assertFalse(node0.isNew());
160:       assertFalse(node0.isAdd());
161:       assertFalse(node0.isCall());
162:       assertFalse(node0.isNull());
163:       assertFalse(node0.isStringKey());
164:       assertFalse(node0.isName());
165:       assertFalse(node0.isParamList());
166:       assertEquals(0, node0.getChildCount());
167:       assertFalse(node0.isOr());
168:       assertFalse(node0.isLabel());
169:       assertFalse(node0.isContinue());
170:       assertFalse(node0.isDefaultCase());
171:       assertFalse(node0.isSetterDef());
172:       assertFalse(node0.isDo());
173:       assertFalse(node0.isVar());
174:       assertFalse(node0.isAssignAdd());
175:       assertFalse(node0.hasOneChild());
176:       assertFalse(node0.isTry());
177:       assertFalse(node0.isArrayLit());
178:       assertFalse(node0.isIf());
179:       assertFalse(node0.isGetterDef());
180:       assertFalse(node0.isLabelName());
181:       assertFalse(node0.isNE());
182:       assertFalse(node0.isInstanceOf());
183:       assertEquals((-1), node0.getLineno());
184:       assertFalse(node0.hasMoreThanOneChild());
185:       assertFalse(node0.isCatch());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.isRegExp());
188:       assertFalse(node0.isScript());
189:       assertEquals(39, node0.getType());
190:       assertFalse(node0.isThis());
191:       assertFalse(node0.isCase());
192:       assertFalse(node0.isBlock());
193:       assertFalse(node0.isFor());
194:       assertNull(inputId0);
195:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
196:       assertEquals(36, Node.QUOTED_PROP);
197:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
198:       assertEquals(53, Node.INPUT_ID);
199:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
200:       assertEquals(47, Node.IS_DISPATCHER);
201:       assertEquals(37, Node.OPT_ARG_NAME);
202:       assertEquals(8, Node.FLAG_NO_THROWS);
203:       assertEquals(39, Node.EMPTY_BLOCK);
204:       assertEquals(48, Node.DIRECTIVES);
205:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
206:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
207:       assertEquals(29, Node.JSDOC_INFO_PROP);
208:       assertEquals(4095, Node.COLUMN_MASK);
209:       assertEquals(55, Node.INFERRED_FUNCTION);
210:       assertEquals(49, Node.DIRECT_EVAL);
211:       assertEquals(57, Node.REFLECTED_OBJECT);
212:       assertEquals(56, Node.CHANGE_TIME);
213:       assertEquals(54, Node.SLASH_V);
214:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
215:       assertEquals(52, Node.LENGTH);
216:       assertEquals(15, Node.NO_SIDE_EFFECTS);
217:       assertEquals(30, Node.VAR_ARGS_NAME);
218:       assertEquals(1, Node.DECR_FLAG);
219:       assertEquals(32, Node.INCRDECR_PROP);
220:       assertEquals(57, Node.LAST_PROP);
221:       assertEquals(12, Node.COLUMN_BITS);
222:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
223:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
224:       assertEquals(2, Node.POST_FLAG);
225:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
226:       assertEquals(40, Node.ORIGINALNAME_PROP);
227:       assertEquals(51, Node.STATIC_SOURCE_FILE);
228:       assertEquals(50, Node.FREE_CALL);
229:       assertEquals(46, Node.IS_NAMESPACE);
230:       assertEquals(43, Node.IS_CONSTANT_NAME);
231:       
232:       int int0 = node0.getType();
233:       assertEquals(39, int0);
234:       assertFalse(node0.isHook());
235:       assertFalse(node0.isFalse());
236:       assertFalse(node0.isInc());
237:       assertFalse(node0.isBreak());
238:       assertEquals((-1), node0.getCharno());
239:       assertFalse(node0.isSwitch());
240:       assertFalse(node0.isIn());
241:       assertFalse(node0.isThrow());
242:       assertFalse(node0.isEmpty());
243:       assertFalse(node0.isFunction());
244:       assertFalse(node0.isExprResult());
245:       assertFalse(node0.isGetElem());
246:       assertFalse(node0.isCast());
247:       assertFalse(node0.isDelProp());
248:       assertFalse(node0.isNot());
249:       assertFalse(node0.isDebugger());
250:       assertEquals((-1), node0.getSourcePosition());
251:       assertFalse(node0.isTrue());
252:       assertFalse(node0.isVoid());
253:       assertFalse(node0.isAnd());
254:       assertTrue(node0.isNumber());
255:       assertFalse(node0.isReturn());
256:       assertFalse(node0.isGetProp());
257:       assertFalse(node0.isObjectLit());
258:       assertFalse(node0.isString());
259:       assertFalse(node0.hasChildren());
260:       assertFalse(node0.isDec());
261:       assertFalse(node0.isTypeOf());
262:       assertFalse(node0.isComma());
263:       assertFalse(node0.isAssign());
264:       assertFalse(node0.isWhile());
265:       assertFalse(node0.isNew());
266:       assertFalse(node0.isAdd());
267:       assertFalse(node0.isCall());
268:       assertFalse(node0.isNull());
269:       assertFalse(node0.isStringKey());
270:       assertFalse(node0.isName());
271:       assertFalse(node0.isParamList());
272:       assertEquals(0, node0.getChildCount());
273:       assertFalse(node0.isOr());
274:       assertFalse(node0.isLabel());
275:       assertFalse(node0.isContinue());
276:       assertFalse(node0.isDefaultCase());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isDo());
279:       assertFalse(node0.isVar());
280:       assertFalse(node0.isAssignAdd());
281:       assertFalse(node0.hasOneChild());
282:       assertFalse(node0.isTry());
283:       assertFalse(node0.isArrayLit());
284:       assertFalse(node0.isIf());
285:       assertFalse(node0.isGetterDef());
286:       assertFalse(node0.isLabelName());
287:       assertFalse(node0.isNE());
288:       assertFalse(node0.isInstanceOf());
289:       assertEquals((-1), node0.getLineno());
290:       assertFalse(node0.hasMoreThanOneChild());
291:       assertFalse(node0.isCatch());
292:       assertFalse(node0.isWith());
293:       assertFalse(node0.isRegExp());
294:       assertFalse(node0.isScript());
295:       assertEquals(39, node0.getType());
296:       assertFalse(node0.isThis());
297:       assertFalse(node0.isCase());
298:       assertFalse(node0.isBlock());
299:       assertFalse(node0.isFor());
300:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
301:       assertEquals(36, Node.QUOTED_PROP);
302:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
303:       assertEquals(53, Node.INPUT_ID);
304:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
305:       assertEquals(47, Node.IS_DISPATCHER);
306:       assertEquals(37, Node.OPT_ARG_NAME);
307:       assertEquals(8, Node.FLAG_NO_THROWS);
308:       assertEquals(39, Node.EMPTY_BLOCK);
309:       assertEquals(48, Node.DIRECTIVES);
310:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
311:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
312:       assertEquals(29, Node.JSDOC_INFO_PROP);
313:       assertEquals(4095, Node.COLUMN_MASK);
314:       assertEquals(55, Node.INFERRED_FUNCTION);
315:       assertEquals(49, Node.DIRECT_EVAL);
316:       assertEquals(57, Node.REFLECTED_OBJECT);
317:       assertEquals(56, Node.CHANGE_TIME);
318:       assertEquals(54, Node.SLASH_V);
319:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
320:       assertEquals(52, Node.LENGTH);
321:       assertEquals(15, Node.NO_SIDE_EFFECTS);
322:       assertEquals(30, Node.VAR_ARGS_NAME);
323:       assertEquals(1, Node.DECR_FLAG);
324:       assertEquals(32, Node.INCRDECR_PROP);
325:       assertEquals(57, Node.LAST_PROP);
326:       assertEquals(12, Node.COLUMN_BITS);
327:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
328:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
329:       assertEquals(2, Node.POST_FLAG);
330:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
331:       assertEquals(40, Node.ORIGINALNAME_PROP);
332:       assertEquals(51, Node.STATIC_SOURCE_FILE);
333:       assertEquals(50, Node.FREE_CALL);
334:       assertEquals(46, Node.IS_NAMESPACE);
335:       assertEquals(43, Node.IS_CONSTANT_NAME);
336:       
337:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
338:       assertFalse(node0.isHook());
339:       assertFalse(node0.isFalse());
340:       assertFalse(node0.isInc());
341:       assertFalse(node0.isBreak());
342:       assertEquals((-1), node0.getCharno());
343:       assertFalse(node0.isSwitch());
344:       assertFalse(node0.isIn());
345:       assertFalse(node0.isThrow());
346:       assertFalse(node0.isEmpty());
347:       assertFalse(node0.isFunction());
348:       assertFalse(node0.isExprResult());
349:       assertFalse(node0.isGetElem());
350:       assertFalse(node0.isCast());
351:       assertFalse(node0.isDelProp());
352:       assertFalse(node0.isNot());
353:       assertFalse(node0.isDebugger());
354:       assertEquals((-1), node0.getSourcePosition());
355:       assertFalse(node0.isTrue());
356:       assertFalse(node0.isVoid());
357:       assertFalse(node0.isAnd());
358:       assertTrue(node0.isNumber());
359:       assertFalse(node0.isReturn());
360:       assertFalse(node0.isGetProp());
361:       assertFalse(node0.isObjectLit());
362:       assertFalse(node0.isString());
363:       assertFalse(node0.hasChildren());
364:       assertFalse(node0.isDec());
365:       assertFalse(node0.isTypeOf());
366:       assertFalse(node0.isComma());
367:       assertFalse(node0.isAssign());
368:       assertFalse(node0.isWhile());
369:       assertFalse(node0.isNew());
370:       assertFalse(node0.isAdd());
371:       assertFalse(node0.isCall());
372:       assertFalse(node0.isNull());
373:       assertFalse(node0.isStringKey());
374:       assertFalse(node0.isName());
375:       assertFalse(node0.isParamList());
376:       assertEquals(0, node0.getChildCount());
377:       assertFalse(node0.isOr());
378:       assertFalse(node0.isLabel());
379:       assertFalse(node0.isContinue());
380:       assertFalse(node0.isDefaultCase());
381:       assertFalse(node0.isSetterDef());
382:       assertFalse(node0.isDo());
383:       assertFalse(node0.isVar());
384:       assertFalse(node0.isAssignAdd());
385:       assertFalse(node0.hasOneChild());
386:       assertFalse(node0.isTry());
387:       assertFalse(node0.isArrayLit());
388:       assertFalse(node0.isIf());
389:       assertFalse(node0.isGetterDef());
390:       assertFalse(node0.isLabelName());
391:       assertFalse(node0.isNE());
392:       assertFalse(node0.isInstanceOf());
393:       assertEquals((-1), node0.getLineno());
394:       assertFalse(node0.hasMoreThanOneChild());
395:       assertFalse(node0.isCatch());
396:       assertFalse(node0.isWith());
397:       assertFalse(node0.isRegExp());
398:       assertFalse(node0.isScript());
399:       assertEquals(39, node0.getType());
400:       assertFalse(node0.isThis());
401:       assertFalse(node0.isCase());
402:       assertFalse(node0.isBlock());
403:       assertFalse(node0.isFor());
404:       assertNotNull(node_FileLevelJsDocBuilder0);
405:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
406:       assertEquals(36, Node.QUOTED_PROP);
407:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
408:       assertEquals(53, Node.INPUT_ID);
409:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
410:       assertEquals(47, Node.IS_DISPATCHER);
411:       assertEquals(37, Node.OPT_ARG_NAME);
412:       assertEquals(8, Node.FLAG_NO_THROWS);
413:       assertEquals(39, Node.EMPTY_BLOCK);
414:       assertEquals(48, Node.DIRECTIVES);
415:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
416:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
417:       assertEquals(29, Node.JSDOC_INFO_PROP);
418:       assertEquals(4095, Node.COLUMN_MASK);
419:       assertEquals(55, Node.INFERRED_FUNCTION);
420:       assertEquals(49, Node.DIRECT_EVAL);
421:       assertEquals(57, Node.REFLECTED_OBJECT);
422:       assertEquals(56, Node.CHANGE_TIME);
423:       assertEquals(54, Node.SLASH_V);
424:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
425:       assertEquals(52, Node.LENGTH);
426:       assertEquals(15, Node.NO_SIDE_EFFECTS);
427:       assertEquals(30, Node.VAR_ARGS_NAME);
428:       assertEquals(1, Node.DECR_FLAG);
429:       assertEquals(32, Node.INCRDECR_PROP);
430:       assertEquals(57, Node.LAST_PROP);
431:       assertEquals(12, Node.COLUMN_BITS);
432:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
433:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
434:       assertEquals(2, Node.POST_FLAG);
435:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
436:       assertEquals(40, Node.ORIGINALNAME_PROP);
437:       assertEquals(51, Node.STATIC_SOURCE_FILE);
438:       assertEquals(50, Node.FREE_CALL);
439:       assertEquals(46, Node.IS_NAMESPACE);
440:       assertEquals(43, Node.IS_CONSTANT_NAME);
441:       
442:       node_FileLevelJsDocBuilder0.append("opt_arg");
443:       assertFalse(node0.isHook());
444:       assertFalse(node0.isFalse());
445:       assertFalse(node0.isInc());
446:       assertFalse(node0.isBreak());
447:       assertEquals((-1), node0.getCharno());
448:       assertFalse(node0.isSwitch());
449:       assertFalse(node0.isIn());
450:       assertFalse(node0.isThrow());
451:       assertFalse(node0.isEmpty());
452:       assertFalse(node0.isFunction());
453:       assertFalse(node0.isExprResult());
454:       assertFalse(node0.isGetElem());
455:       assertFalse(node0.isCast());
456:       assertFalse(node0.isDelProp());
457:       assertFalse(node0.isNot());
458:       assertFalse(node0.isDebugger());
459:       assertEquals((-1), node0.getSourcePosition());
460:       assertFalse(node0.isTrue());
461:       assertFalse(node0.isVoid());
462:       assertFalse(node0.isAnd());
463:       assertTrue(node0.isNumber());
464:       assertFalse(node0.isReturn());
465:       assertFalse(node0.isGetProp());
466:       assertFalse(node0.isObjectLit());
467:       assertFalse(node0.isString());
468:       assertFalse(node0.hasChildren());
469:       assertFalse(node0.isDec());
470:       assertFalse(node0.isTypeOf());
471:       assertFalse(node0.isComma());
472:       assertFalse(node0.isAssign());
473:       assertFalse(node0.isWhile());
474:       assertFalse(node0.isNew());
475:       assertFalse(node0.isAdd());
476:       assertFalse(node0.isCall());
477:       assertFalse(node0.isNull());
478:       assertFalse(node0.isStringKey());
479:       assertFalse(node0.isName());
480:       assertFalse(node0.isParamList());
481:       assertEquals(0, node0.getChildCount());
482:       assertFalse(node0.isOr());
483:       assertFalse(node0.isLabel());
484:       assertFalse(node0.isContinue());
485:       assertFalse(node0.isDefaultCase());
486:       assertFalse(node0.isSetterDef());
487:       assertFalse(node0.isDo());
488:       assertFalse(node0.isVar());
489:       assertFalse(node0.isAssignAdd());
490:       assertFalse(node0.hasOneChild());
491:       assertFalse(node0.isTry());
492:       assertFalse(node0.isArrayLit());
493:       assertFalse(node0.isIf());
494:       assertFalse(node0.isGetterDef());
495:       assertFalse(node0.isLabelName());
496:       assertFalse(node0.isNE());
497:       assertFalse(node0.isInstanceOf());
498:       assertEquals((-1), node0.getLineno());
499:       assertFalse(node0.hasMoreThanOneChild());
500:       assertFalse(node0.isCatch());
501:       assertFalse(node0.isWith());
502:       assertFalse(node0.isRegExp());
503:       assertFalse(node0.isScript());
504:       assertEquals(39, node0.getType());
505:       assertFalse(node0.isThis());
506:       assertFalse(node0.isCase());
507:       assertFalse(node0.isBlock());
508:       assertFalse(node0.isFor());
509:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
510:       assertEquals(36, Node.QUOTED_PROP);
511:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
512:       assertEquals(53, Node.INPUT_ID);
513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
514:       assertEquals(47, Node.IS_DISPATCHER);
515:       assertEquals(37, Node.OPT_ARG_NAME);
516:       assertEquals(8, Node.FLAG_NO_THROWS);
517:       assertEquals(39, Node.EMPTY_BLOCK);
518:       assertEquals(48, Node.DIRECTIVES);
519:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
520:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
521:       assertEquals(29, Node.JSDOC_INFO_PROP);
522:       assertEquals(4095, Node.COLUMN_MASK);
523:       assertEquals(55, Node.INFERRED_FUNCTION);
524:       assertEquals(49, Node.DIRECT_EVAL);
525:       assertEquals(57, Node.REFLECTED_OBJECT);
526:       assertEquals(56, Node.CHANGE_TIME);
527:       assertEquals(54, Node.SLASH_V);
528:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
529:       assertEquals(52, Node.LENGTH);
530:       assertEquals(15, Node.NO_SIDE_EFFECTS);
531:       assertEquals(30, Node.VAR_ARGS_NAME);
532:       assertEquals(1, Node.DECR_FLAG);
533:       assertEquals(32, Node.INCRDECR_PROP);
534:       assertEquals(57, Node.LAST_PROP);
535:       assertEquals(12, Node.COLUMN_BITS);
536:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
537:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
538:       assertEquals(2, Node.POST_FLAG);
539:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
540:       assertEquals(40, Node.ORIGINALNAME_PROP);
541:       assertEquals(51, Node.STATIC_SOURCE_FILE);
542:       assertEquals(50, Node.FREE_CALL);
543:       assertEquals(46, Node.IS_NAMESPACE);
544:       assertEquals(43, Node.IS_CONSTANT_NAME);
545:       
546:       Set<String> set0 = node0.getDirectives();
547:       assertFalse(node0.isHook());
548:       assertFalse(node0.isFalse());
549:       assertFalse(node0.isInc());
550:       assertFalse(node0.isBreak());
551:       assertEquals((-1), node0.getCharno());
552:       assertFalse(node0.isSwitch());
553:       assertFalse(node0.isIn());
554:       assertFalse(node0.isThrow());
555:       assertFalse(node0.isEmpty());
556:       assertFalse(node0.isFunction());
557:       assertFalse(node0.isExprResult());
558:       assertFalse(node0.isGetElem());
559:       assertFalse(node0.isCast());
560:       assertFalse(node0.isDelProp());
561:       assertFalse(node0.isNot());
562:       assertFalse(node0.isDebugger());
563:       assertEquals((-1), node0.getSourcePosition());
564:       assertFalse(node0.isTrue());
565:       assertFalse(node0.isVoid());
566:       assertFalse(node0.isAnd());
567:       assertTrue(node0.isNumber());
568:       assertFalse(node0.isReturn());
569:       assertFalse(node0.isGetProp());
570:       assertFalse(node0.isObjectLit());
571:       assertFalse(node0.isString());
572:       assertFalse(node0.hasChildren());
573:       assertFalse(node0.isDec());
574:       assertFalse(node0.isTypeOf());
575:       assertFalse(node0.isComma());
576:       assertFalse(node0.isAssign());
577:       assertFalse(node0.isWhile());
578:       assertFalse(node0.isNew());
579:       assertFalse(node0.isAdd());
580:       assertFalse(node0.isCall());
581:       assertFalse(node0.isNull());
582:       assertFalse(node0.isStringKey());
583:       assertFalse(node0.isName());
584:       assertFalse(node0.isParamList());
585:       assertEquals(0, node0.getChildCount());
586:       assertFalse(node0.isOr());
587:       assertFalse(node0.isLabel());
588:       assertFalse(node0.isContinue());
589:       assertFalse(node0.isDefaultCase());
590:       assertFalse(node0.isSetterDef());
591:       assertFalse(node0.isDo());
592:       assertFalse(node0.isVar());
593:       assertFalse(node0.isAssignAdd());
594:       assertFalse(node0.hasOneChild());
595:       assertFalse(node0.isTry());
596:       assertFalse(node0.isArrayLit());
597:       assertFalse(node0.isIf());
598:       assertFalse(node0.isGetterDef());
599:       assertFalse(node0.isLabelName());
600:       assertFalse(node0.isNE());
601:       assertFalse(node0.isInstanceOf());
602:       assertEquals((-1), node0.getLineno());
603:       assertFalse(node0.hasMoreThanOneChild());
604:       assertFalse(node0.isCatch());
605:       assertFalse(node0.isWith());
606:       assertFalse(node0.isRegExp());
607:       assertFalse(node0.isScript());
608:       assertEquals(39, node0.getType());
609:       assertFalse(node0.isThis());
610:       assertFalse(node0.isCase());
611:       assertFalse(node0.isBlock());
612:       assertFalse(node0.isFor());
613:       assertNull(set0);
614:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
615:       assertEquals(36, Node.QUOTED_PROP);
616:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
617:       assertEquals(53, Node.INPUT_ID);
618:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
619:       assertEquals(47, Node.IS_DISPATCHER);
620:       assertEquals(37, Node.OPT_ARG_NAME);
621:       assertEquals(8, Node.FLAG_NO_THROWS);
622:       assertEquals(39, Node.EMPTY_BLOCK);
623:       assertEquals(48, Node.DIRECTIVES);
624:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
625:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
626:       assertEquals(29, Node.JSDOC_INFO_PROP);
627:       assertEquals(4095, Node.COLUMN_MASK);
628:       assertEquals(55, Node.INFERRED_FUNCTION);
629:       assertEquals(49, Node.DIRECT_EVAL);
630:       assertEquals(57, Node.REFLECTED_OBJECT);
631:       assertEquals(56, Node.CHANGE_TIME);
632:       assertEquals(54, Node.SLASH_V);
633:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
634:       assertEquals(52, Node.LENGTH);
635:       assertEquals(15, Node.NO_SIDE_EFFECTS);
636:       assertEquals(30, Node.VAR_ARGS_NAME);
637:       assertEquals(1, Node.DECR_FLAG);
638:       assertEquals(32, Node.INCRDECR_PROP);
639:       assertEquals(57, Node.LAST_PROP);
640:       assertEquals(12, Node.COLUMN_BITS);
641:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
642:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
643:       assertEquals(2, Node.POST_FLAG);
644:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
645:       assertEquals(40, Node.ORIGINALNAME_PROP);
646:       assertEquals(51, Node.STATIC_SOURCE_FILE);
647:       assertEquals(50, Node.FREE_CALL);
648:       assertEquals(46, Node.IS_NAMESPACE);
649:       assertEquals(43, Node.IS_CONSTANT_NAME);
650:       
651:       Node node1 = Node.newString(0, "O|5`v|$6-", 16, 47);
652:       assertFalse(node1.isContinue());
653:       assertFalse(node1.isWhile());
654:       assertFalse(node1.isDo());
655:       assertFalse(node1.isAssignAdd());
656:       assertFalse(node1.isBlock());
657:       assertFalse(node1.isLabel());
658:       assertFalse(node1.hasChildren());
659:       assertFalse(node1.isReturn());
660:       assertFalse(node1.isAssign());
661:       assertFalse(node1.isDec());
662:       assertFalse(node1.isTypeOf());
663:       assertFalse(node1.hasMoreThanOneChild());
664:       assertFalse(node1.isStringKey());
665:       assertFalse(node1.isCast());
666:       assertFalse(node1.hasOneChild());
667:       assertFalse(node1.isLabelName());
668:       assertFalse(node1.isParamList());
669:       assertFalse(node1.isScript());
670:       assertFalse(node1.isNot());
671:       assertFalse(node1.isNumber());
672:       assertFalse(node1.isAnd());
673:       assertFalse(node1.isObjectLit());
674:       assertFalse(node1.isCatch());
675:       assertFalse(node1.isFunction());
676:       assertFalse(node1.isThis());
677:       assertEquals(65583, node1.getSourcePosition());
678:       assertFalse(node1.isInstanceOf());
679:       assertFalse(node1.isRegExp());
680:       assertFalse(node1.isWith());
681:       assertFalse(node1.isFalse());
682:       assertFalse(node1.isThrow());
683:       assertFalse(node1.isIf());
684:       assertFalse(node1.isInc());
685:       assertFalse(node1.isNE());
686:       assertFalse(node1.isSetterDef());
687:       assertEquals(16, node1.getLineno());
688:       assertFalse(node1.isIn());
689:       assertFalse(node1.isCase());
690:       assertFalse(node1.isSwitch());
691:       assertEquals(0, node1.getType());
692:       assertFalse(node1.isArrayLit());
693:       assertFalse(node1.isFor());
694:       assertFalse(node1.isHook());
695:       assertFalse(node1.isTry());
696:       assertFalse(node1.isDebugger());
697:       assertFalse(node1.isGetProp());
698:       assertFalse(node1.isGetterDef());
699:       assertFalse(node1.isString());
700:       assertFalse(node1.isDefaultCase());
701:       assertFalse(node1.isVoid());
702:       assertEquals(47, node1.getCharno());
703:       assertFalse(node1.isExprResult());
704:       assertFalse(node1.isComma());
705:       assertFalse(node1.isBreak());
706:       assertEquals(0, node1.getChildCount());
707:       assertFalse(node1.isCall());
708:       assertFalse(node1.isVar());
709:       assertFalse(node1.isEmpty());
710:       assertFalse(node1.isGetElem());
711:       assertFalse(node1.isDelProp());
712:       assertFalse(node1.isName());
713:       assertFalse(node1.isTrue());
714:       assertFalse(node1.isAdd());
715:       assertFalse(node1.isNew());
716:       assertFalse(node1.isNull());
717:       assertFalse(node1.isOr());
718:       assertNotNull(node1);
719:       assertFalse(node1.equals((Object)node0));
720:       assertEquals(48, Node.DIRECTIVES);
721:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
722:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
723:       assertEquals(50, Node.FREE_CALL);
724:       assertEquals(36, Node.QUOTED_PROP);
725:       assertEquals(55, Node.INFERRED_FUNCTION);
726:       assertEquals(8, Node.FLAG_NO_THROWS);
727:       assertEquals(39, Node.EMPTY_BLOCK);
728:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
729:       assertEquals(53, Node.INPUT_ID);
730:       assertEquals(54, Node.SLASH_V);
731:       assertEquals(57, Node.LAST_PROP);
732:       assertEquals(43, Node.IS_CONSTANT_NAME);
733:       assertEquals(30, Node.VAR_ARGS_NAME);
734:       assertEquals(47, Node.IS_DISPATCHER);
735:       assertEquals(2, Node.POST_FLAG);
736:       assertEquals(40, Node.ORIGINALNAME_PROP);
737:       assertEquals(32, Node.INCRDECR_PROP);
738:       assertEquals(46, Node.IS_NAMESPACE);
739:       assertEquals(37, Node.OPT_ARG_NAME);
740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
741:       assertEquals(12, Node.COLUMN_BITS);
742:       assertEquals(56, Node.CHANGE_TIME);
743:       assertEquals(29, Node.JSDOC_INFO_PROP);
744:       assertEquals(15, Node.NO_SIDE_EFFECTS);
745:       assertEquals(1, Node.DECR_FLAG);
746:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
747:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
748:       assertEquals(52, Node.LENGTH);
749:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
750:       assertEquals(57, Node.REFLECTED_OBJECT);
751:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
752:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
753:       assertEquals(49, Node.DIRECT_EVAL);
754:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
755:       assertEquals(4095, Node.COLUMN_MASK);
756:       
757:       Iterable<Node> iterable0 = node1.children();
758:       assertFalse(iterable0.contains(node0));
759:       assertFalse(node1.isContinue());
760:       assertFalse(node1.isWhile());
761:       assertFalse(node1.isDo());
762:       assertFalse(node1.isAssignAdd());
763:       assertFalse(node1.isBlock());
764:       assertFalse(node1.isLabel());
765:       assertFalse(node1.hasChildren());
766:       assertFalse(node1.isReturn());
767:       assertFalse(node1.isAssign());
768:       assertFalse(node1.isDec());
769:       assertFalse(node1.isTypeOf());
770:       assertFalse(node1.hasMoreThanOneChild());
771:       assertFalse(node1.isStringKey());
772:       assertFalse(node1.isCast());
773:       assertFalse(node1.hasOneChild());
774:       assertFalse(node1.isLabelName());
775:       assertFalse(node1.isParamList());
776:       assertFalse(node1.isScript());
777:       assertFalse(node1.isNot());
778:       assertFalse(node1.isNumber());
779:       assertFalse(node1.isAnd());
780:       assertFalse(node1.isObjectLit());
781:       assertFalse(node1.isCatch());
782:       assertFalse(node1.isFunction());
783:       assertFalse(node1.isThis());
784:       assertEquals(65583, node1.getSourcePosition());
785:       assertFalse(node1.isInstanceOf());
786:       assertFalse(node1.isRegExp());
787:       assertFalse(node1.isWith());
788:       assertFalse(node1.isFalse());
789:       assertFalse(node1.isThrow());
790:       assertFalse(node1.isIf());
791:       assertFalse(node1.isInc());
792:       assertFalse(node1.isNE());
793:       assertFalse(node1.isSetterDef());
794:       assertEquals(16, node1.getLineno());
795:       assertFalse(node1.isIn());
796:       assertFalse(node1.isCase());
797:       assertFalse(node1.isSwitch());
798:       assertEquals(0, node1.getType());
799:       assertFalse(node1.isArrayLit());
800:       assertFalse(node1.isFor());
801:       assertFalse(node1.isHook());
802:       assertFalse(node1.isTry());
803:       assertFalse(node1.isDebugger());
804:       assertFalse(node1.isGetProp());
805:       assertFalse(node1.isGetterDef());
806:       assertFalse(node1.isString());
807:       assertFalse(node1.isDefaultCase());
808:       assertFalse(node1.isVoid());
809:       assertEquals(47, node1.getCharno());
810:       assertFalse(node1.isExprResult());
811:       assertFalse(node1.isComma());
812:       assertFalse(node1.isBreak());
813:       assertEquals(0, node1.getChildCount());
814:       assertFalse(node1.isCall());
815:       assertFalse(node1.isVar());
816:       assertFalse(node1.isEmpty());
817:       assertFalse(node1.isGetElem());
818:       assertFalse(node1.isDelProp());
819:       assertFalse(node1.isName());
820:       assertFalse(node1.isTrue());
821:       assertFalse(node1.isAdd());
822:       assertFalse(node1.isNew());
823:       assertFalse(node1.isNull());
824:       assertFalse(node1.isOr());
825:       assertNotNull(iterable0);
826:       assertFalse(node1.equals((Object)node0));
827:       assertEquals(48, Node.DIRECTIVES);
828:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
829:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
830:       assertEquals(50, Node.FREE_CALL);
831:       assertEquals(36, Node.QUOTED_PROP);
832:       assertEquals(55, Node.INFERRED_FUNCTION);
833:       assertEquals(8, Node.FLAG_NO_THROWS);
834:       assertEquals(39, Node.EMPTY_BLOCK);
835:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
836:       assertEquals(53, Node.INPUT_ID);
837:       assertEquals(54, Node.SLASH_V);
838:       assertEquals(57, Node.LAST_PROP);
839:       assertEquals(43, Node.IS_CONSTANT_NAME);
840:       assertEquals(30, Node.VAR_ARGS_NAME);
841:       assertEquals(47, Node.IS_DISPATCHER);
842:       assertEquals(2, Node.POST_FLAG);
843:       assertEquals(40, Node.ORIGINALNAME_PROP);
844:       assertEquals(32, Node.INCRDECR_PROP);
845:       assertEquals(46, Node.IS_NAMESPACE);
846:       assertEquals(37, Node.OPT_ARG_NAME);
847:       assertEquals(51, Node.STATIC_SOURCE_FILE);
848:       assertEquals(12, Node.COLUMN_BITS);
849:       assertEquals(56, Node.CHANGE_TIME);
850:       assertEquals(29, Node.JSDOC_INFO_PROP);
851:       assertEquals(15, Node.NO_SIDE_EFFECTS);
852:       assertEquals(1, Node.DECR_FLAG);
853:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
854:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
855:       assertEquals(52, Node.LENGTH);
856:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
857:       assertEquals(57, Node.REFLECTED_OBJECT);
858:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
859:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
860:       assertEquals(49, Node.DIRECT_EVAL);
861:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
862:       assertEquals(4095, Node.COLUMN_MASK);
863:       
864:       Set<String> set1 = node1.getDirectives();
865:       assertFalse(node1.isContinue());
866:       assertFalse(node1.isWhile());
867:       assertFalse(node1.isDo());
868:       assertFalse(node1.isAssignAdd());
869:       assertFalse(node1.isBlock());
870:       assertFalse(node1.isLabel());
871:       assertFalse(node1.hasChildren());
872:       assertFalse(node1.isReturn());
873:       assertFalse(node1.isAssign());
874:       assertFalse(node1.isDec());
875:       assertFalse(node1.isTypeOf());
876:       assertFalse(node1.hasMoreThanOneChild());
877:       assertFalse(node1.isStringKey());
878:       assertFalse(node1.isCast());
879:       assertFalse(node1.hasOneChild());
880:       assertFalse(node1.isLabelName());
881:       assertFalse(node1.isParamList());
882:       assertFalse(node1.isScript());
883:       assertFalse(node1.isNot());
884:       assertFalse(node1.isNumber());
885:       assertFalse(node1.isAnd());
886:       assertFalse(node1.isObjectLit());
887:       assertFalse(node1.isCatch());
888:       assertFalse(node1.isFunction());
889:       assertFalse(node1.isThis());
890:       assertEquals(65583, node1.getSourcePosition());
891:       assertFalse(node1.isInstanceOf());
892:       assertFalse(node1.isRegExp());
893:       assertFalse(node1.isWith());
894:       assertFalse(node1.isFalse());
895:       assertFalse(node1.isThrow());
896:       assertFalse(node1.isIf());
897:       assertFalse(node1.isInc());
898:       assertFalse(node1.isNE());
899:       assertFalse(node1.isSetterDef());
900:       assertEquals(16, node1.getLineno());
901:       assertFalse(node1.isIn());
902:       assertFalse(node1.isCase());
903:       assertFalse(node1.isSwitch());
904:       assertEquals(0, node1.getType());
905:       assertFalse(node1.isArrayLit());
906:       assertFalse(node1.isFor());
907:       assertFalse(node1.isHook());
908:       assertFalse(node1.isTry());
909:       assertFalse(node1.isDebugger());
910:       assertFalse(node1.isGetProp());
911:       assertFalse(node1.isGetterDef());
912:       assertFalse(node1.isString());
913:       assertFalse(node1.isDefaultCase());
914:       assertFalse(node1.isVoid());
915:       assertEquals(47, node1.getCharno());
916:       assertFalse(node1.isExprResult());
917:       assertFalse(node1.isComma());
918:       assertFalse(node1.isBreak());
919:       assertEquals(0, node1.getChildCount());
920:       assertFalse(node1.isCall());
921:       assertFalse(node1.isVar());
922:       assertFalse(node1.isEmpty());
923:       assertFalse(node1.isGetElem());
924:       assertFalse(node1.isDelProp());
925:       assertFalse(node1.isName());
926:       assertFalse(node1.isTrue());
927:       assertFalse(node1.isAdd());
928:       assertFalse(node1.isNew());
929:       assertFalse(node1.isNull());
930:       assertFalse(node1.isOr());
931:       assertNull(set1);
932:       assertFalse(node1.equals((Object)node0));
933:       assertEquals(48, Node.DIRECTIVES);
934:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
935:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
936:       assertEquals(50, Node.FREE_CALL);
937:       assertEquals(36, Node.QUOTED_PROP);
938:       assertEquals(55, Node.INFERRED_FUNCTION);
939:       assertEquals(8, Node.FLAG_NO_THROWS);
940:       assertEquals(39, Node.EMPTY_BLOCK);
941:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
942:       assertEquals(53, Node.INPUT_ID);
943:       assertEquals(54, Node.SLASH_V);
944:       assertEquals(57, Node.LAST_PROP);
945:       assertEquals(43, Node.IS_CONSTANT_NAME);
946:       assertEquals(30, Node.VAR_ARGS_NAME);
947:       assertEquals(47, Node.IS_DISPATCHER);
948:       assertEquals(2, Node.POST_FLAG);
949:       assertEquals(40, Node.ORIGINALNAME_PROP);
950:       assertEquals(32, Node.INCRDECR_PROP);
951:       assertEquals(46, Node.IS_NAMESPACE);
952:       assertEquals(37, Node.OPT_ARG_NAME);
953:       assertEquals(51, Node.STATIC_SOURCE_FILE);
954:       assertEquals(12, Node.COLUMN_BITS);
955:       assertEquals(56, Node.CHANGE_TIME);
956:       assertEquals(29, Node.JSDOC_INFO_PROP);
957:       assertEquals(15, Node.NO_SIDE_EFFECTS);
958:       assertEquals(1, Node.DECR_FLAG);
959:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
960:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
961:       assertEquals(52, Node.LENGTH);
962:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
963:       assertEquals(57, Node.REFLECTED_OBJECT);
964:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
965:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
966:       assertEquals(49, Node.DIRECT_EVAL);
967:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
968:       assertEquals(4095, Node.COLUMN_MASK);
969:       
970:       boolean boolean0 = node1.isScript();
971:       assertFalse(boolean0);
972:       assertFalse(node1.isContinue());
973:       assertFalse(node1.isWhile());
974:       assertFalse(node1.isDo());
975:       assertFalse(node1.isAssignAdd());
976:       assertFalse(node1.isBlock());
977:       assertFalse(node1.isLabel());
978:       assertFalse(node1.hasChildren());
979:       assertFalse(node1.isReturn());
980:       assertFalse(node1.isAssign());
981:       assertFalse(node1.isDec());
982:       assertFalse(node1.isTypeOf());
983:       assertFalse(node1.hasMoreThanOneChild());
984:       assertFalse(node1.isStringKey());
985:       assertFalse(node1.isCast());
986:       assertFalse(node1.hasOneChild());
987:       assertFalse(node1.isLabelName());
988:       assertFalse(node1.isParamList());
989:       assertFalse(node1.isScript());
990:       assertFalse(node1.isNot());
991:       assertFalse(node1.isNumber());
992:       assertFalse(node1.isAnd());
993:       assertFalse(node1.isObjectLit());
994:       assertFalse(node1.isCatch());
995:       assertFalse(node1.isFunction());
996:       assertFalse(node1.isThis());
997:       assertEquals(65583, node1.getSourcePosition());
998:       assertFalse(node1.isInstanceOf());
999:       assertFalse(node1.isRegExp());
1000:       assertFalse(node1.isWith());
1001:       assertFalse(node1.isFalse());
1002:       assertFalse(node1.isThrow());
1003:       assertFalse(node1.isIf());
1004:       assertFalse(node1.isInc());
1005:       assertFalse(node1.isNE());
1006:       assertFalse(node1.isSetterDef());
1007:       assertEquals(16, node1.getLineno());
1008:       assertFalse(node1.isIn());
1009:       assertFalse(node1.isCase());
1010:       assertFalse(node1.isSwitch());
1011:       assertEquals(0, node1.getType());
1012:       assertFalse(node1.isArrayLit());
1013:       assertFalse(node1.isFor());
1014:       assertFalse(node1.isHook());
1015:       assertFalse(node1.isTry());
1016:       assertFalse(node1.isDebugger());
1017:       assertFalse(node1.isGetProp());
1018:       assertFalse(node1.isGetterDef());
1019:       assertFalse(node1.isString());
1020:       assertFalse(node1.isDefaultCase());
1021:       assertFalse(node1.isVoid());
1022:       assertEquals(47, node1.getCharno());
1023:       assertFalse(node1.isExprResult());
1024:       assertFalse(node1.isComma());
1025:       assertFalse(node1.isBreak());
1026:       assertEquals(0, node1.getChildCount());
1027:       assertFalse(node1.isCall());
1028:       assertFalse(node1.isVar());
1029:       assertFalse(node1.isEmpty());
1030:       assertFalse(node1.isGetElem());
1031:       assertFalse(node1.isDelProp());
1032:       assertFalse(node1.isName());
1033:       assertFalse(node1.isTrue());
1034:       assertFalse(node1.isAdd());
1035:       assertFalse(node1.isNew());
1036:       assertFalse(node1.isNull());
1037:       assertFalse(node1.isOr());
1038:       assertFalse(node1.equals((Object)node0));
1039:       assertEquals(48, Node.DIRECTIVES);
1040:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1041:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1042:       assertEquals(50, Node.FREE_CALL);
1043:       assertEquals(36, Node.QUOTED_PROP);
1044:       assertEquals(55, Node.INFERRED_FUNCTION);
1045:       assertEquals(8, Node.FLAG_NO_THROWS);
1046:       assertEquals(39, Node.EMPTY_BLOCK);
1047:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1048:       assertEquals(53, Node.INPUT_ID);
1049:       assertEquals(54, Node.SLASH_V);
1050:       assertEquals(57, Node.LAST_PROP);
1051:       assertEquals(43, Node.IS_CONSTANT_NAME);
1052:       assertEquals(30, Node.VAR_ARGS_NAME);
1053:       assertEquals(47, Node.IS_DISPATCHER);
1054:       assertEquals(2, Node.POST_FLAG);
1055:       assertEquals(40, Node.ORIGINALNAME_PROP);
1056:       assertEquals(32, Node.INCRDECR_PROP);
1057:       assertEquals(46, Node.IS_NAMESPACE);
1058:       assertEquals(37, Node.OPT_ARG_NAME);
1059:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1060:       assertEquals(12, Node.COLUMN_BITS);
1061:       assertEquals(56, Node.CHANGE_TIME);
1062:       assertEquals(29, Node.JSDOC_INFO_PROP);
1063:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1064:       assertEquals(1, Node.DECR_FLAG);
1065:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1066:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1067:       assertEquals(52, Node.LENGTH);
1068:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1069:       assertEquals(57, Node.REFLECTED_OBJECT);
1070:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1071:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1072:       assertEquals(49, Node.DIRECT_EVAL);
1073:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1074:       assertEquals(4095, Node.COLUMN_MASK);
1075:       
1076:       Node node2 = Node.newNumber(0.0, 39, 30);
1077:       assertFalse(node2.isOr());
1078:       assertFalse(node2.isReturn());
1079:       assertFalse(node2.isAssign());
1080:       assertFalse(node2.isLabel());
1081:       assertFalse(node2.hasChildren());
1082:       assertFalse(node2.isDec());
1083:       assertFalse(node2.isTypeOf());
1084:       assertFalse(node2.hasMoreThanOneChild());
1085:       assertFalse(node2.isCast());
1086:       assertFalse(node2.isContinue());
1087:       assertFalse(node2.isGetElem());
1088:       assertFalse(node2.isLabelName());
1089:       assertFalse(node2.isAdd());
1090:       assertFalse(node2.isVar());
1091:       assertFalse(node2.isDo());
1092:       assertFalse(node2.isAssignAdd());
1093:       assertFalse(node2.isNew());
1094:       assertFalse(node2.isSetterDef());
1095:       assertFalse(node2.isThis());
1096:       assertFalse(node2.isParamList());
1097:       assertEquals(39, node2.getLineno());
1098:       assertEquals(0, node2.getChildCount());
1099:       assertFalse(node2.isCatch());
1100:       assertFalse(node2.isStringKey());
1101:       assertFalse(node2.isInstanceOf());
1102:       assertFalse(node2.isSwitch());
1103:       assertFalse(node2.isBlock());
1104:       assertFalse(node2.isScript());
1105:       assertEquals(39, node2.getType());
1106:       assertFalse(node2.isWith());
1107:       assertFalse(node2.isRegExp());
1108:       assertFalse(node2.isHook());
1109:       assertFalse(node2.isFor());
1110:       assertFalse(node2.isCase());
1111:       assertFalse(node2.hasOneChild());
1112:       assertFalse(node2.isTry());
1113:       assertFalse(node2.isNE());
1114:       assertFalse(node2.isIn());
1115:       assertFalse(node2.isGetterDef());
1116:       assertFalse(node2.isArrayLit());
1117:       assertFalse(node2.isIf());
1118:       assertFalse(node2.isVoid());
1119:       assertFalse(node2.isDelProp());
1120:       assertFalse(node2.isFunction());
1121:       assertFalse(node2.isInc());
1122:       assertFalse(node2.isTrue());
1123:       assertFalse(node2.isThrow());
1124:       assertFalse(node2.isEmpty());
1125:       assertFalse(node2.isDefaultCase());
1126:       assertFalse(node2.isComma());
1127:       assertFalse(node2.isGetProp());
1128:       assertFalse(node2.isNull());
1129:       assertFalse(node2.isFalse());
1130:       assertFalse(node2.isAnd());
1131:       assertFalse(node2.isCall());
1132:       assertFalse(node2.isBreak());
1133:       assertFalse(node2.isName());
1134:       assertFalse(node2.isDebugger());
1135:       assertFalse(node2.isExprResult());
1136:       assertFalse(node2.isString());
1137:       assertEquals(30, node2.getCharno());
1138:       assertFalse(node2.isNot());
1139:       assertFalse(node2.isObjectLit());
1140:       assertTrue(node2.isNumber());
1141:       assertEquals(159774, node2.getSourcePosition());
1142:       assertFalse(node2.isWhile());
1143:       assertNotNull(node2);
1144:       assertNotSame(node2, node0);
1145:       assertFalse(node2.equals((Object)node0));
1146:       assertFalse(node2.equals((Object)node1));
1147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1148:       assertEquals(50, Node.FREE_CALL);
1149:       assertEquals(40, Node.ORIGINALNAME_PROP);
1150:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1151:       assertEquals(52, Node.LENGTH);
1152:       assertEquals(8, Node.FLAG_NO_THROWS);
1153:       assertEquals(39, Node.EMPTY_BLOCK);
1154:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1156:       assertEquals(57, Node.LAST_PROP);
1157:       assertEquals(49, Node.DIRECT_EVAL);
1158:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1159:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1160:       assertEquals(4095, Node.COLUMN_MASK);
1161:       assertEquals(55, Node.INFERRED_FUNCTION);
1162:       assertEquals(36, Node.QUOTED_PROP);
1163:       assertEquals(37, Node.OPT_ARG_NAME);
1164:       assertEquals(57, Node.REFLECTED_OBJECT);
1165:       assertEquals(56, Node.CHANGE_TIME);
1166:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1167:       assertEquals(48, Node.DIRECTIVES);
1168:       assertEquals(29, Node.JSDOC_INFO_PROP);
1169:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1170:       assertEquals(47, Node.IS_DISPATCHER);
1171:       assertEquals(2, Node.POST_FLAG);
1172:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1173:       assertEquals(53, Node.INPUT_ID);
1174:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1175:       assertEquals(12, Node.COLUMN_BITS);
1176:       assertEquals(32, Node.INCRDECR_PROP);
1177:       assertEquals(30, Node.VAR_ARGS_NAME);
1178:       assertEquals(1, Node.DECR_FLAG);
1179:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1180:       assertEquals(46, Node.IS_NAMESPACE);
1181:       assertEquals(54, Node.SLASH_V);
1182:       assertEquals(43, Node.IS_CONSTANT_NAME);
1183:       
1184:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
1185:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1186:       assertEquals(0, node_SideEffectFlags0.valueOf());
1187:       assertNotNull(node_SideEffectFlags0);
1188:       
1189:       boolean boolean1 = node2.mayMutateArguments();
1190:       assertTrue(boolean1);
1191:       assertFalse(node2.isOr());
1192:       assertFalse(node2.isReturn());
1193:       assertFalse(node2.isAssign());
1194:       assertFalse(node2.isLabel());
1195:       assertFalse(node2.hasChildren());
1196:       assertFalse(node2.isDec());
1197:       assertFalse(node2.isTypeOf());
1198:       assertFalse(node2.hasMoreThanOneChild());
1199:       assertFalse(node2.isCast());
1200:       assertFalse(node2.isContinue());
1201:       assertFalse(node2.isGetElem());
1202:       assertFalse(node2.isLabelName());
1203:       assertFalse(node2.isAdd());
1204:       assertFalse(node2.isVar());
1205:       assertFalse(node2.isDo());
1206:       assertFalse(node2.isAssignAdd());
1207:       assertFalse(node2.isNew());
1208:       assertFalse(node2.isSetterDef());
1209:       assertFalse(node2.isThis());
1210:       assertFalse(node2.isParamList());
1211:       assertEquals(39, node2.getLineno());
1212:       assertEquals(0, node2.getChildCount());
1213:       assertFalse(node2.isCatch());
1214:       assertFalse(node2.isStringKey());
1215:       assertFalse(node2.isInstanceOf());
1216:       assertFalse(node2.isSwitch());
1217:       assertFalse(node2.isBlock());
1218:       assertFalse(node2.isScript());
1219:       assertEquals(39, node2.getType());
1220:       assertFalse(node2.isWith());
1221:       assertFalse(node2.isRegExp());
1222:       assertFalse(node2.isHook());
1223:       assertFalse(node2.isFor());
1224:       assertFalse(node2.isCase());
1225:       assertFalse(node2.hasOneChild());
1226:       assertFalse(node2.isTry());
1227:       assertFalse(node2.isNE());
1228:       assertFalse(node2.isIn());
1229:       assertFalse(node2.isGetterDef());
1230:       assertFalse(node2.isArrayLit());
1231:       assertFalse(node2.isIf());
1232:       assertFalse(node2.isVoid());
1233:       assertFalse(node2.isDelProp());
1234:       assertFalse(node2.isFunction());
1235:       assertFalse(node2.isInc());
1236:       assertFalse(node2.isTrue());
1237:       assertFalse(node2.isThrow());
1238:       assertFalse(node2.isEmpty());
1239:       assertFalse(node2.isDefaultCase());
1240:       assertFalse(node2.isComma());
1241:       assertFalse(node2.isGetProp());
1242:       assertFalse(node2.isNull());
1243:       assertFalse(node2.isFalse());
1244:       assertFalse(node2.isAnd());
1245:       assertFalse(node2.isCall());
1246:       assertFalse(node2.isBreak());
1247:       assertFalse(node2.isName());
1248:       assertFalse(node2.isDebugger());
1249:       assertFalse(node2.isExprResult());
1250:       assertFalse(node2.isString());
1251:       assertEquals(30, node2.getCharno());
1252:       assertFalse(node2.isNot());
1253:       assertFalse(node2.isObjectLit());
1254:       assertTrue(node2.isNumber());
1255:       assertEquals(159774, node2.getSourcePosition());
1256:       assertFalse(node2.isWhile());
1257:       assertNotSame(node2, node0);
1258:       assertFalse(node2.equals((Object)node0));
1259:       assertFalse(node2.equals((Object)node1));
1260:       assertFalse(boolean1 == boolean0);
1261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1262:       assertEquals(50, Node.FREE_CALL);
1263:       assertEquals(40, Node.ORIGINALNAME_PROP);
1264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1265:       assertEquals(52, Node.LENGTH);
1266:       assertEquals(8, Node.FLAG_NO_THROWS);
1267:       assertEquals(39, Node.EMPTY_BLOCK);
1268:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1269:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1270:       assertEquals(57, Node.LAST_PROP);
1271:       assertEquals(49, Node.DIRECT_EVAL);
1272:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1273:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1274:       assertEquals(4095, Node.COLUMN_MASK);
1275:       assertEquals(55, Node.INFERRED_FUNCTION);
1276:       assertEquals(36, Node.QUOTED_PROP);
1277:       assertEquals(37, Node.OPT_ARG_NAME);
1278:       assertEquals(57, Node.REFLECTED_OBJECT);
1279:       assertEquals(56, Node.CHANGE_TIME);
1280:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1281:       assertEquals(48, Node.DIRECTIVES);
1282:       assertEquals(29, Node.JSDOC_INFO_PROP);
1283:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1284:       assertEquals(47, Node.IS_DISPATCHER);
1285:       assertEquals(2, Node.POST_FLAG);
1286:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1287:       assertEquals(53, Node.INPUT_ID);
1288:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1289:       assertEquals(12, Node.COLUMN_BITS);
1290:       assertEquals(32, Node.INCRDECR_PROP);
1291:       assertEquals(30, Node.VAR_ARGS_NAME);
1292:       assertEquals(1, Node.DECR_FLAG);
1293:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1294:       assertEquals(46, Node.IS_NAMESPACE);
1295:       assertEquals(54, Node.SLASH_V);
1296:       assertEquals(43, Node.IS_CONSTANT_NAME);
1297:       
1298:       Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
1299:       assertEquals(0, node_SideEffectFlags1.valueOf());
1300:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1301:       assertNotNull(node_SideEffectFlags1);
1302:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
1303:       
1304:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
1305:       assertEquals(0, node_SideEffectFlags1.valueOf());
1306:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1307:       assertEquals(0, node_SideEffectFlags2.valueOf());
1308:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1309:       assertNotNull(node_SideEffectFlags2);
1310:       assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
1311:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1312:       assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
1313:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1314:       assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
1315:       assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));
1316:       
1317:       Node node3 = new Node((-1368), node0, node0);
1318:       assertFalse(node0.isHook());
1319:       assertFalse(node0.isFalse());
1320:       assertFalse(node0.isInc());
1321:       assertFalse(node0.isBreak());
1322:       assertEquals((-1), node0.getCharno());
1323:       assertFalse(node0.isSwitch());
1324:       assertFalse(node0.isIn());
1325:       assertFalse(node0.isThrow());
1326:       assertFalse(node0.isEmpty());
1327:       assertFalse(node0.isFunction());
1328:       assertFalse(node0.isExprResult());
1329:       assertFalse(node0.isGetElem());
1330:       assertFalse(node0.isCast());
1331:       assertFalse(node0.isDelProp());
1332:       assertFalse(node0.isNot());
1333:       assertFalse(node0.isDebugger());
1334:       assertEquals((-1), node0.getSourcePosition());
1335:       assertFalse(node0.isTrue());
1336:       assertFalse(node0.isVoid());
1337:       assertFalse(node0.isAnd());
1338:       assertTrue(node0.isNumber());
1339:       assertFalse(node0.isReturn());
1340:       assertFalse(node0.isGetProp());
1341:       assertFalse(node0.isObjectLit());
1342:       assertFalse(node0.isString());
1343:       assertFalse(node0.hasChildren());
1344:       assertFalse(node0.isDec());
1345:       assertFalse(node0.isTypeOf());
1346:       assertFalse(node0.isComma());
1347:       assertFalse(node0.isAssign());
1348:       assertFalse(node0.isWhile());
1349:       assertFalse(node0.isNew());
1350:       assertFalse(node0.isAdd());
1351:       assertFalse(node0.isCall());
1352:       assertFalse(node0.isNull());
1353:       assertFalse(node0.isStringKey());
1354:       assertFalse(node0.isName());
1355:       assertFalse(node0.isParamList());
1356:       assertEquals(0, node0.getChildCount());
1357:       assertFalse(node0.isOr());
1358:       assertFalse(node0.isLabel());
1359:       assertFalse(node0.isContinue());
1360:       assertFalse(node0.isDefaultCase());
1361:       assertFalse(node0.isSetterDef());
1362:       assertFalse(node0.isDo());
1363:       assertFalse(node0.isVar());
1364:       assertFalse(node0.isAssignAdd());
1365:       assertFalse(node0.hasOneChild());
1366:       assertFalse(node0.isTry());
1367:       assertFalse(node0.isArrayLit());
1368:       assertFalse(node0.isIf());
1369:       assertFalse(node0.isGetterDef());
1370:       assertFalse(node0.isLabelName());
1371:       assertFalse(node0.isNE());
1372:       assertFalse(node0.isInstanceOf());
1373:       assertEquals((-1), node0.getLineno());
1374:       assertFalse(node0.hasMoreThanOneChild());
1375:       assertFalse(node0.isCatch());
1376:       assertFalse(node0.isWith());
1377:       assertFalse(node0.isRegExp());
1378:       assertFalse(node0.isScript());
1379:       assertEquals(39, node0.getType());
1380:       assertFalse(node0.isThis());
1381:       assertFalse(node0.isCase());
1382:       assertFalse(node0.isBlock());
1383:       assertFalse(node0.isFor());
1384:       assertFalse(node3.isThis());
1385:       assertFalse(node3.isComma());
1386:       assertFalse(node3.isInstanceOf());
1387:       assertFalse(node3.isBreak());
1388:       assertFalse(node3.isGetProp());
1389:       assertFalse(node3.isAnd());
1390:       assertFalse(node3.isObjectLit());
1391:       assertFalse(node3.isNot());
1392:       assertEquals((-1), node3.getCharno());
1393:       assertFalse(node3.isExprResult());
1394:       assertFalse(node3.isString());
1395:       assertFalse(node3.isCase());
1396:       assertFalse(node3.isScript());
1397:       assertFalse(node3.isWith());
1398:       assertEquals(1, node3.getChildCount());
1399:       assertFalse(node3.isAssign());
1400:       assertFalse(node3.isDec());
1401:       assertFalse(node3.isHook());
1402:       assertFalse(node3.isNE());
1403:       assertFalse(node3.isIf());
1404:       assertEquals((-1), node3.getLineno());
1405:       assertTrue(node3.hasChildren());
1406:       assertFalse(node3.isIn());
1407:       assertEquals((-1), node3.getSourcePosition());
1408:       assertFalse(node3.isFunction());
1409:       assertFalse(node3.isInc());
1410:       assertFalse(node3.isContinue());
1411:       assertFalse(node3.isCast());
1412:       assertFalse(node3.isThrow());
1413:       assertFalse(node3.isFalse());
1414:       assertEquals((-1368), node3.getType());
1415:       assertFalse(node3.isParamList());
1416:       assertFalse(node3.isSetterDef());
1417:       assertFalse(node3.isStringKey());
1418:       assertFalse(node3.isName());
1419:       assertFalse(node3.isNull());
1420:       assertFalse(node3.isDebugger());
1421:       assertFalse(node3.isTrue());
1422:       assertFalse(node3.isVoid());
1423:       assertFalse(node3.isRegExp());
1424:       assertFalse(node3.isTry());
1425:       assertFalse(node3.isCall());
1426:       assertFalse(node3.isCatch());
1427:       assertFalse(node3.hasMoreThanOneChild());
1428:       assertFalse(node3.isWhile());
1429:       assertFalse(node3.isReturn());
1430:       assertFalse(node3.isBlock());
1431:       assertFalse(node3.isFor());
1432:       assertTrue(node3.hasOneChild());
1433:       assertFalse(node3.isTypeOf());
1434:       assertFalse(node3.isNumber());
1435:       assertFalse(node3.isAssignAdd());
1436:       assertFalse(node3.isDelProp());
1437:       assertFalse(node3.isEmpty());
1438:       assertFalse(node3.isLabelName());
1439:       assertFalse(node3.isGetElem());
1440:       assertFalse(node3.isGetterDef());
1441:       assertFalse(node3.isOr());
1442:       assertFalse(node3.isDefaultCase());
1443:       assertFalse(node3.isSwitch());
1444:       assertFalse(node3.isDo());
1445:       assertFalse(node3.isArrayLit());
1446:       assertFalse(node3.isAdd());
1447:       assertFalse(node3.isNew());
1448:       assertFalse(node3.isVar());
1449:       assertFalse(node3.isLabel());
1450:       assertNotNull(node3);
1451:       assertFalse(node0.equals((Object)node2));
1452:       assertFalse(node0.equals((Object)node1));
1453:       assertFalse(node3.equals((Object)node1));
1454:       assertFalse(node3.equals((Object)node0));
1455:       assertFalse(node3.equals((Object)node2));
1456:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1457:       assertEquals(36, Node.QUOTED_PROP);
1458:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1459:       assertEquals(53, Node.INPUT_ID);
1460:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1461:       assertEquals(47, Node.IS_DISPATCHER);
1462:       assertEquals(37, Node.OPT_ARG_NAME);
1463:       assertEquals(8, Node.FLAG_NO_THROWS);
1464:       assertEquals(39, Node.EMPTY_BLOCK);
1465:       assertEquals(48, Node.DIRECTIVES);
1466:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1468:       assertEquals(29, Node.JSDOC_INFO_PROP);
1469:       assertEquals(4095, Node.COLUMN_MASK);
1470:       assertEquals(55, Node.INFERRED_FUNCTION);
1471:       assertEquals(49, Node.DIRECT_EVAL);
1472:       assertEquals(57, Node.REFLECTED_OBJECT);
1473:       assertEquals(56, Node.CHANGE_TIME);
1474:       assertEquals(54, Node.SLASH_V);
1475:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1476:       assertEquals(52, Node.LENGTH);
1477:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1478:       assertEquals(30, Node.VAR_ARGS_NAME);
1479:       assertEquals(1, Node.DECR_FLAG);
1480:       assertEquals(32, Node.INCRDECR_PROP);
1481:       assertEquals(57, Node.LAST_PROP);
1482:       assertEquals(12, Node.COLUMN_BITS);
1483:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1484:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1485:       assertEquals(2, Node.POST_FLAG);
1486:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1487:       assertEquals(40, Node.ORIGINALNAME_PROP);
1488:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1489:       assertEquals(50, Node.FREE_CALL);
1490:       assertEquals(46, Node.IS_NAMESPACE);
1491:       assertEquals(43, Node.IS_CONSTANT_NAME);
1492:       assertEquals(29, Node.JSDOC_INFO_PROP);
1493:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1494:       assertEquals(56, Node.CHANGE_TIME);
1495:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1496:       assertEquals(37, Node.OPT_ARG_NAME);
1497:       assertEquals(32, Node.INCRDECR_PROP);
1498:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1499:       assertEquals(2, Node.POST_FLAG);
1500:       assertEquals(12, Node.COLUMN_BITS);
1501:       assertEquals(47, Node.IS_DISPATCHER);
1502:       assertEquals(30, Node.VAR_ARGS_NAME);
1503:       assertEquals(43, Node.IS_CONSTANT_NAME);
1504:       assertEquals(1, Node.DECR_FLAG);
1505:       assertEquals(46, Node.IS_NAMESPACE);
1506:       assertEquals(54, Node.SLASH_V);
1507:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1509:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1510:       assertEquals(50, Node.FREE_CALL);
1511:       assertEquals(39, Node.EMPTY_BLOCK);
1512:       assertEquals(40, Node.ORIGINALNAME_PROP);
1513:       assertEquals(48, Node.DIRECTIVES);
1514:       assertEquals(4095, Node.COLUMN_MASK);
1515:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1516:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1517:       assertEquals(49, Node.DIRECT_EVAL);
1518:       assertEquals(57, Node.LAST_PROP);
1519:       assertEquals(55, Node.INFERRED_FUNCTION);
1520:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1521:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1522:       assertEquals(52, Node.LENGTH);
1523:       assertEquals(53, Node.INPUT_ID);
1524:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1525:       assertEquals(8, Node.FLAG_NO_THROWS);
1526:       assertEquals(57, Node.REFLECTED_OBJECT);
1527:       assertEquals(36, Node.QUOTED_PROP);
1528:       
1529:       Node node4 = node3.srcref(node2);
1530:       assertEquals(30, node4.getCharno());
1531:       assertFalse(node4.isStringKey());
1532:       assertFalse(node4.isVar());
1533:       assertFalse(node4.isBlock());
1534:       assertFalse(node4.isName());
1535:       assertFalse(node4.isContinue());
1536:       assertFalse(node4.isCall());
1537:       assertFalse(node4.hasMoreThanOneChild());
1538:       assertFalse(node4.isParamList());
1539:       assertFalse(node4.isReturn());
1540:       assertFalse(node4.isWhile());
1541:       assertFalse(node4.isNumber());
1542:       assertFalse(node4.isTry());
1543:       assertFalse(node4.isDebugger());
1544:       assertFalse(node4.isFor());
1545:       assertFalse(node4.isIf());
1546:       assertFalse(node4.isRegExp());
1547:       assertFalse(node4.isFunction());
1548:       assertFalse(node4.isWith());
1549:       assertFalse(node4.isCatch());
1550:       assertFalse(node4.isCast());
1551:       assertTrue(node4.hasChildren());
1552:       assertFalse(node4.isIn());
1553:       assertEquals((-1368), node4.getType());
1554:       assertFalse(node4.isNE());
1555:       assertFalse(node4.isSetterDef());
1556:       assertFalse(node4.isInc());
1557:       assertFalse(node4.isThrow());
1558:       assertFalse(node4.isHook());
1559:       assertFalse(node4.isBreak());
1560:       assertEquals(39, node4.getLineno());
1561:       assertFalse(node4.isSwitch());
1562:       assertFalse(node4.isFalse());
1563:       assertEquals(1, node4.getChildCount());
1564:       assertFalse(node4.isInstanceOf());
1565:       assertFalse(node4.isAnd());
1566:       assertFalse(node4.isObjectLit());
1567:       assertFalse(node4.isComma());
1568:       assertFalse(node4.isThis());
1569:       assertFalse(node4.isGetterDef());
1570:       assertFalse(node4.isString());
1571:       assertFalse(node4.isNot());
1572:       assertFalse(node4.isCase());
1573:       assertFalse(node4.isScript());
1574:       assertFalse(node4.isGetProp());
1575:       assertEquals(159774, node4.getSourcePosition());
1576:       assertFalse(node4.isTrue());
1577:       assertTrue(node4.hasOneChild());
1578:       assertFalse(node4.isDelProp());
1579:       assertFalse(node4.isDec());
1580:       assertFalse(node4.isLabelName());
1581:       assertFalse(node4.isAssign());
1582:       assertFalse(node4.isTypeOf());
1583:       assertFalse(node4.isVoid());
1584:       assertFalse(node4.isExprResult());
1585:       assertFalse(node4.isArrayLit());
1586:       assertFalse(node4.isGetElem());
1587:       assertFalse(node4.isAssignAdd());
1588:       assertFalse(node4.isOr());
1589:       assertFalse(node4.isLabel());
1590:       assertFalse(node4.isNull());
1591:       assertFalse(node4.isDo());
1592:       assertFalse(node4.isDefaultCase());
1593:       assertFalse(node4.isNew());
1594:       assertFalse(node4.isEmpty());
1595:       assertFalse(node4.isAdd());
1596:       assertFalse(node0.isHook());
1597:       assertFalse(node0.isFalse());
1598:       assertFalse(node0.isInc());
1599:       assertFalse(node0.isBreak());
1600:       assertEquals((-1), node0.getCharno());
1601:       assertFalse(node0.isSwitch());
1602:       assertFalse(node0.isIn());
1603:       assertFalse(node0.isThrow());
1604:       assertFalse(node0.isEmpty());
1605:       assertFalse(node0.isFunction());
1606:       assertFalse(node0.isExprResult());
1607:       assertFalse(node0.isGetElem());
1608:       assertFalse(node0.isCast());
1609:       assertFalse(node0.isDelProp());
1610:       assertFalse(node0.isNot());
1611:       assertFalse(node0.isDebugger());
1612:       assertEquals((-1), node0.getSourcePosition());
1613:       assertFalse(node0.isTrue());
1614:       assertFalse(node0.isVoid());
1615:       assertFalse(node0.isAnd());
1616:       assertTrue(node0.isNumber());
1617:       assertFalse(node0.isReturn());
1618:       assertFalse(node0.isGetProp());
1619:       assertFalse(node0.isObjectLit());
1620:       assertFalse(node0.isString());
1621:       assertFalse(node0.hasChildren());
1622:       assertFalse(node0.isDec());
1623:       assertFalse(node0.isTypeOf());
1624:       assertFalse(node0.isComma());
1625:       assertFalse(node0.isAssign());
1626:       assertFalse(node0.isWhile());
1627:       assertFalse(node0.isNew());
1628:       assertFalse(node0.isAdd());
1629:       assertFalse(node0.isCall());
1630:       assertFalse(node0.isNull());
1631:       assertFalse(node0.isStringKey());
1632:       assertFalse(node0.isName());
1633:       assertFalse(node0.isParamList());
1634:       assertEquals(0, node0.getChildCount());
1635:       assertFalse(node0.isOr());
1636:       assertFalse(node0.isLabel());
1637:       assertFalse(node0.isContinue());
1638:       assertFalse(node0.isDefaultCase());
1639:       assertFalse(node0.isSetterDef());
1640:       assertFalse(node0.isDo());
1641:       assertFalse(node0.isVar());
1642:       assertFalse(node0.isAssignAdd());
1643:       assertFalse(node0.hasOneChild());
1644:       assertFalse(node0.isTry());
1645:       assertFalse(node0.isArrayLit());
1646:       assertFalse(node0.isIf());
1647:       assertFalse(node0.isGetterDef());
1648:       assertFalse(node0.isLabelName());
1649:       assertFalse(node0.isNE());
1650:       assertFalse(node0.isInstanceOf());
1651:       assertEquals((-1), node0.getLineno());
1652:       assertFalse(node0.hasMoreThanOneChild());
1653:       assertFalse(node0.isCatch());
1654:       assertFalse(node0.isWith());
1655:       assertFalse(node0.isRegExp());
1656:       assertFalse(node0.isScript());
1657:       assertEquals(39, node0.getType());
1658:       assertFalse(node0.isThis());
1659:       assertFalse(node0.isCase());
1660:       assertFalse(node0.isBlock());
1661:       assertFalse(node0.isFor());
1662:       assertFalse(node2.isOr());
1663:       assertFalse(node2.isReturn());
1664:       assertFalse(node2.isAssign());
1665:       assertFalse(node2.isLabel());
1666:       assertFalse(node2.hasChildren());
1667:       assertFalse(node2.isDec());
1668:       assertFalse(node2.isTypeOf());
1669:       assertFalse(node2.hasMoreThanOneChild());
1670:       assertFalse(node2.isCast());
1671:       assertFalse(node2.isContinue());
1672:       assertFalse(node2.isGetElem());
1673:       assertFalse(node2.isLabelName());
1674:       assertFalse(node2.isAdd());
1675:       assertFalse(node2.isVar());
1676:       assertFalse(node2.isDo());
1677:       assertFalse(node2.isAssignAdd());
1678:       assertFalse(node2.isNew());
1679:       assertFalse(node2.isSetterDef());
1680:       assertFalse(node2.isThis());
1681:       assertFalse(node2.isParamList());
1682:       assertEquals(39, node2.getLineno());
1683:       assertEquals(0, node2.getChildCount());
1684:       assertFalse(node2.isCatch());
1685:       assertFalse(node2.isStringKey());
1686:       assertFalse(node2.isInstanceOf());
1687:       assertFalse(node2.isSwitch());
1688:       assertFalse(node2.isBlock());
1689:       assertFalse(node2.isScript());
1690:       assertEquals(39, node2.getType());
1691:       assertFalse(node2.isWith());
1692:       assertFalse(node2.isRegExp());
1693:       assertFalse(node2.isHook());
1694:       assertFalse(node2.isFor());
1695:       assertFalse(node2.isCase());
1696:       assertFalse(node2.hasOneChild());
1697:       assertFalse(node2.isTry());
1698:       assertFalse(node2.isNE());
1699:       assertFalse(node2.isIn());
1700:       assertFalse(node2.isGetterDef());
1701:       assertFalse(node2.isArrayLit());
1702:       assertFalse(node2.isIf());
1703:       assertFalse(node2.isVoid());
1704:       assertFalse(node2.isDelProp());
1705:       assertFalse(node2.isFunction());
1706:       assertFalse(node2.isInc());
1707:       assertFalse(node2.isTrue());
1708:       assertFalse(node2.isThrow());
1709:       assertFalse(node2.isEmpty());
1710:       assertFalse(node2.isDefaultCase());
1711:       assertFalse(node2.isComma());
1712:       assertFalse(node2.isGetProp());
1713:       assertFalse(node2.isNull());
1714:       assertFalse(node2.isFalse());
1715:       assertFalse(node2.isAnd());
1716:       assertFalse(node2.isCall());
1717:       assertFalse(node2.isBreak());
1718:       assertFalse(node2.isName());
1719:       assertFalse(node2.isDebugger());
1720:       assertFalse(node2.isExprResult());
1721:       assertFalse(node2.isString());
1722:       assertEquals(30, node2.getCharno());
1723:       assertFalse(node2.isNot());
1724:       assertFalse(node2.isObjectLit());
1725:       assertTrue(node2.isNumber());
1726:       assertEquals(159774, node2.getSourcePosition());
1727:       assertFalse(node2.isWhile());
1728:       assertFalse(node3.isThis());
1729:       assertFalse(node3.isComma());
1730:       assertFalse(node3.isInstanceOf());
1731:       assertFalse(node3.isBreak());
1732:       assertFalse(node3.isGetProp());
1733:       assertFalse(node3.isAnd());
1734:       assertFalse(node3.isObjectLit());
1735:       assertFalse(node3.isNot());
1736:       assertFalse(node3.isExprResult());
1737:       assertFalse(node3.isString());
1738:       assertFalse(node3.isCase());
1739:       assertFalse(node3.isScript());
1740:       assertFalse(node3.isWith());
1741:       assertEquals(1, node3.getChildCount());
1742:       assertEquals(159774, node3.getSourcePosition());
1743:       assertFalse(node3.isAssign());
1744:       assertFalse(node3.isDec());
1745:       assertFalse(node3.isHook());
1746:       assertFalse(node3.isNE());
1747:       assertFalse(node3.isIf());
1748:       assertTrue(node3.hasChildren());
1749:       assertFalse(node3.isIn());
1750:       assertFalse(node3.isFunction());
1751:       assertFalse(node3.isInc());
1752:       assertFalse(node3.isContinue());
1753:       assertFalse(node3.isCast());
1754:       assertFalse(node3.isThrow());
1755:       assertFalse(node3.isFalse());
1756:       assertEquals((-1368), node3.getType());
1757:       assertFalse(node3.isParamList());
1758:       assertFalse(node3.isSetterDef());
1759:       assertFalse(node3.isStringKey());
1760:       assertFalse(node3.isName());
1761:       assertFalse(node3.isNull());
1762:       assertFalse(node3.isDebugger());
1763:       assertFalse(node3.isTrue());
1764:       assertFalse(node3.isVoid());
1765:       assertEquals(30, node3.getCharno());
1766:       assertFalse(node3.isRegExp());
1767:       assertFalse(node3.isTry());
1768:       assertFalse(node3.isCall());
1769:       assertFalse(node3.isCatch());
1770:       assertFalse(node3.hasMoreThanOneChild());
1771:       assertFalse(node3.isWhile());
1772:       assertFalse(node3.isReturn());
1773:       assertFalse(node3.isBlock());
1774:       assertFalse(node3.isFor());
1775:       assertTrue(node3.hasOneChild());
1776:       assertFalse(node3.isTypeOf());
1777:       assertFalse(node3.isNumber());
1778:       assertFalse(node3.isAssignAdd());
1779:       assertFalse(node3.isDelProp());
1780:       assertFalse(node3.isEmpty());
1781:       assertFalse(node3.isLabelName());
1782:       assertFalse(node3.isGetElem());
1783:       assertFalse(node3.isGetterDef());
1784:       assertFalse(node3.isOr());
1785:       assertFalse(node3.isDefaultCase());
1786:       assertFalse(node3.isSwitch());
1787:       assertFalse(node3.isDo());
1788:       assertFalse(node3.isArrayLit());
1789:       assertFalse(node3.isAdd());
1790:       assertFalse(node3.isNew());
1791:       assertFalse(node3.isVar());
1792:       assertEquals(39, node3.getLineno());
1793:       assertFalse(node3.isLabel());
1794:       assertNotNull(node4);
1795:       assertSame(node4, node3);
1796:       assertNotSame(node0, node2);
1797:       assertNotSame(node2, node0);
1798:       assertSame(node3, node4);
1799:       assertFalse(node4.equals((Object)node2));
1800:       assertFalse(node4.equals((Object)node1));
1801:       assertFalse(node4.equals((Object)node0));
1802:       assertFalse(node0.equals((Object)node2));
1803:       assertFalse(node0.equals((Object)node1));
1804:       assertFalse(node0.equals((Object)node3));
1805:       assertFalse(node2.equals((Object)node0));
1806:       assertFalse(node2.equals((Object)node1));
1807:       assertFalse(node2.equals((Object)node3));
1808:       assertFalse(node3.equals((Object)node1));
1809:       assertFalse(node3.equals((Object)node0));
1810:       assertFalse(node3.equals((Object)node2));
1811:       assertEquals(43, Node.IS_CONSTANT_NAME);
1812:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1813:       assertEquals(36, Node.QUOTED_PROP);
1814:       assertEquals(55, Node.INFERRED_FUNCTION);
1815:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1816:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1817:       assertEquals(29, Node.JSDOC_INFO_PROP);
1818:       assertEquals(53, Node.INPUT_ID);
1819:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1820:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1821:       assertEquals(2, Node.POST_FLAG);
1822:       assertEquals(46, Node.IS_NAMESPACE);
1823:       assertEquals(50, Node.FREE_CALL);
1824:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1825:       assertEquals(47, Node.IS_DISPATCHER);
1826:       assertEquals(40, Node.ORIGINALNAME_PROP);
1827:       assertEquals(54, Node.SLASH_V);
1828:       assertEquals(57, Node.LAST_PROP);
1829:       assertEquals(52, Node.LENGTH);
1830:       assertEquals(30, Node.VAR_ARGS_NAME);
1831:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1832:       assertEquals(57, Node.REFLECTED_OBJECT);
1833:       assertEquals(12, Node.COLUMN_BITS);
1834:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1835:       assertEquals(32, Node.INCRDECR_PROP);
1836:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1837:       assertEquals(1, Node.DECR_FLAG);
1838:       assertEquals(37, Node.OPT_ARG_NAME);
1839:       assertEquals(8, Node.FLAG_NO_THROWS);
1840:       assertEquals(39, Node.EMPTY_BLOCK);
1841:       assertEquals(48, Node.DIRECTIVES);
1842:       assertEquals(56, Node.CHANGE_TIME);
1843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1844:       assertEquals(4095, Node.COLUMN_MASK);
1845:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1846:       assertEquals(49, Node.DIRECT_EVAL);
1847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1848:       assertEquals(36, Node.QUOTED_PROP);
1849:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1850:       assertEquals(53, Node.INPUT_ID);
1851:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1852:       assertEquals(47, Node.IS_DISPATCHER);
1853:       assertEquals(37, Node.OPT_ARG_NAME);
1854:       assertEquals(8, Node.FLAG_NO_THROWS);
1855:       assertEquals(39, Node.EMPTY_BLOCK);
1856:       assertEquals(48, Node.DIRECTIVES);
1857:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1858:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1859:       assertEquals(29, Node.JSDOC_INFO_PROP);
1860:       assertEquals(4095, Node.COLUMN_MASK);
1861:       assertEquals(55, Node.INFERRED_FUNCTION);
1862:       assertEquals(49, Node.DIRECT_EVAL);
1863:       assertEquals(57, Node.REFLECTED_OBJECT);
1864:       assertEquals(56, Node.CHANGE_TIME);
1865:       assertEquals(54, Node.SLASH_V);
1866:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1867:       assertEquals(52, Node.LENGTH);
1868:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1869:       assertEquals(30, Node.VAR_ARGS_NAME);
1870:       assertEquals(1, Node.DECR_FLAG);
1871:       assertEquals(32, Node.INCRDECR_PROP);
1872:       assertEquals(57, Node.LAST_PROP);
1873:       assertEquals(12, Node.COLUMN_BITS);
1874:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1875:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1876:       assertEquals(2, Node.POST_FLAG);
1877:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1878:       assertEquals(40, Node.ORIGINALNAME_PROP);
1879:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1880:       assertEquals(50, Node.FREE_CALL);
1881:       assertEquals(46, Node.IS_NAMESPACE);
1882:       assertEquals(43, Node.IS_CONSTANT_NAME);
1883:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1884:       assertEquals(50, Node.FREE_CALL);
1885:       assertEquals(40, Node.ORIGINALNAME_PROP);
1886:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1887:       assertEquals(52, Node.LENGTH);
1888:       assertEquals(8, Node.FLAG_NO_THROWS);
1889:       assertEquals(39, Node.EMPTY_BLOCK);
1890:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1892:       assertEquals(57, Node.LAST_PROP);
1893:       assertEquals(49, Node.DIRECT_EVAL);
1894:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1895:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1896:       assertEquals(4095, Node.COLUMN_MASK);
1897:       assertEquals(55, Node.INFERRED_FUNCTION);
1898:       assertEquals(36, Node.QUOTED_PROP);
1899:       assertEquals(37, Node.OPT_ARG_NAME);
1900:       assertEquals(57, Node.REFLECTED_OBJECT);
1901:       assertEquals(56, Node.CHANGE_TIME);
1902:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1903:       assertEquals(48, Node.DIRECTIVES);
1904:       assertEquals(29, Node.JSDOC_INFO_PROP);
1905:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1906:       assertEquals(47, Node.IS_DISPATCHER);
1907:       assertEquals(2, Node.POST_FLAG);
1908:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1909:       assertEquals(53, Node.INPUT_ID);
1910:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1911:       assertEquals(12, Node.COLUMN_BITS);
1912:       assertEquals(32, Node.INCRDECR_PROP);
1913:       assertEquals(30, Node.VAR_ARGS_NAME);
1914:       assertEquals(1, Node.DECR_FLAG);
1915:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1916:       assertEquals(46, Node.IS_NAMESPACE);
1917:       assertEquals(54, Node.SLASH_V);
1918:       assertEquals(43, Node.IS_CONSTANT_NAME);
1919:       assertEquals(29, Node.JSDOC_INFO_PROP);
1920:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1921:       assertEquals(56, Node.CHANGE_TIME);
1922:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1923:       assertEquals(37, Node.OPT_ARG_NAME);
1924:       assertEquals(32, Node.INCRDECR_PROP);
1925:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1926:       assertEquals(2, Node.POST_FLAG);
1927:       assertEquals(12, Node.COLUMN_BITS);
1928:       assertEquals(47, Node.IS_DISPATCHER);
1929:       assertEquals(30, Node.VAR_ARGS_NAME);
1930:       assertEquals(43, Node.IS_CONSTANT_NAME);
1931:       assertEquals(1, Node.DECR_FLAG);
1932:       assertEquals(46, Node.IS_NAMESPACE);
1933:       assertEquals(54, Node.SLASH_V);
1934:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1935:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1936:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1937:       assertEquals(50, Node.FREE_CALL);
1938:       assertEquals(39, Node.EMPTY_BLOCK);
1939:       assertEquals(40, Node.ORIGINALNAME_PROP);
1940:       assertEquals(48, Node.DIRECTIVES);
1941:       assertEquals(4095, Node.COLUMN_MASK);
1942:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1943:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1944:       assertEquals(49, Node.DIRECT_EVAL);
1945:       assertEquals(57, Node.LAST_PROP);
1946:       assertEquals(55, Node.INFERRED_FUNCTION);
1947:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1948:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1949:       assertEquals(52, Node.LENGTH);
1950:       assertEquals(53, Node.INPUT_ID);
1951:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1952:       assertEquals(8, Node.FLAG_NO_THROWS);
1953:       assertEquals(57, Node.REFLECTED_OBJECT);
1954:       assertEquals(36, Node.QUOTED_PROP);
1955:       
1956:       boolean boolean2 = node1.isFor();
1957:       assertFalse(boolean2);
1958:       assertFalse(node1.isContinue());
1959:       assertFalse(node1.isWhile());
1960:       assertFalse(node1.isDo());
1961:       assertFalse(node1.isAssignAdd());
1962:       assertFalse(node1.isBlock());
1963:       assertFalse(node1.isLabel());
1964:       assertFalse(node1.hasChildren());
1965:       assertFalse(node1.isReturn());
1966:       assertFalse(node1.isAssign());
1967:       assertFalse(node1.isDec());
1968:       assertFalse(node1.isTypeOf());
1969:       assertFalse(node1.hasMoreThanOneChild());
1970:       assertFalse(node1.isStringKey());
1971:       assertFalse(node1.isCast());
1972:       assertFalse(node1.hasOneChild());
1973:       assertFalse(node1.isLabelName());
1974:       assertFalse(node1.isParamList());
1975:       assertFalse(node1.isScript());
1976:       assertFalse(node1.isNot());
1977:       assertFalse(node1.isNumber());
1978:       assertFalse(node1.isAnd());
1979:       assertFalse(node1.isObjectLit());
1980:       assertFalse(node1.isCatch());
1981:       assertFalse(node1.isFunction());
1982:       assertFalse(node1.isThis());
1983:       assertEquals(65583, node1.getSourcePosition());
1984:       assertFalse(node1.isInstanceOf());
1985:       assertFalse(node1.isRegExp());
1986:       assertFalse(node1.isWith());
1987:       assertFalse(node1.isFalse());
1988:       assertFalse(node1.isThrow());
1989:       assertFalse(node1.isIf());
1990:       assertFalse(node1.isInc());
1991:       assertFalse(node1.isNE());
1992:       assertFalse(node1.isSetterDef());
1993:       assertEquals(16, node1.getLineno());
1994:       assertFalse(node1.isIn());
1995:       assertFalse(node1.isCase());
1996:       assertFalse(node1.isSwitch());
1997:       assertEquals(0, node1.getType());
1998:       assertFalse(node1.isArrayLit());
1999:       assertFalse(node1.isFor());
2000:       assertFalse(node1.isHook());
2001:       assertFalse(node1.isTry());
2002:       assertFalse(node1.isDebugger());
2003:       assertFalse(node1.isGetProp());
2004:       assertFalse(node1.isGetterDef());
2005:       assertFalse(node1.isString());
2006:       assertFalse(node1.isDefaultCase());
2007:       assertFalse(node1.isVoid());
2008:       assertEquals(47, node1.getCharno());
2009:       assertFalse(node1.isExprResult());
2010:       assertFalse(node1.isComma());
2011:       assertFalse(node1.isBreak());
2012:       assertEquals(0, node1.getChildCount());
2013:       assertFalse(node1.isCall());
2014:       assertFalse(node1.isVar());
2015:       assertFalse(node1.isEmpty());
2016:       assertFalse(node1.isGetElem());
2017:       assertFalse(node1.isDelProp());
2018:       assertFalse(node1.isName());
2019:       assertFalse(node1.isTrue());
2020:       assertFalse(node1.isAdd());
2021:       assertFalse(node1.isNew());
2022:       assertFalse(node1.isNull());
2023:       assertFalse(node1.isOr());
2024:       assertTrue(boolean2 == boolean0);
2025:       assertFalse(boolean2 == boolean1);
2026:       assertFalse(node1.equals((Object)node2));
2027:       assertFalse(node1.equals((Object)node4));
2028:       assertFalse(node1.equals((Object)node3));
2029:       assertFalse(node1.equals((Object)node0));
2030:       assertEquals(48, Node.DIRECTIVES);
2031:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2032:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2033:       assertEquals(50, Node.FREE_CALL);
2034:       assertEquals(36, Node.QUOTED_PROP);
2035:       assertEquals(55, Node.INFERRED_FUNCTION);
2036:       assertEquals(8, Node.FLAG_NO_THROWS);
2037:       assertEquals(39, Node.EMPTY_BLOCK);
2038:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2039:       assertEquals(53, Node.INPUT_ID);
2040:       assertEquals(54, Node.SLASH_V);
2041:       assertEquals(57, Node.LAST_PROP);
2042:       assertEquals(43, Node.IS_CONSTANT_NAME);
2043:       assertEquals(30, Node.VAR_ARGS_NAME);
2044:       assertEquals(47, Node.IS_DISPATCHER);
2045:       assertEquals(2, Node.POST_FLAG);
2046:       assertEquals(40, Node.ORIGINALNAME_PROP);
2047:       assertEquals(32, Node.INCRDECR_PROP);
2048:       assertEquals(46, Node.IS_NAMESPACE);
2049:       assertEquals(37, Node.OPT_ARG_NAME);
2050:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2051:       assertEquals(12, Node.COLUMN_BITS);
2052:       assertEquals(56, Node.CHANGE_TIME);
2053:       assertEquals(29, Node.JSDOC_INFO_PROP);
2054:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2055:       assertEquals(1, Node.DECR_FLAG);
2056:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2057:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2058:       assertEquals(52, Node.LENGTH);
2059:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2060:       assertEquals(57, Node.REFLECTED_OBJECT);
2061:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2062:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2063:       assertEquals(49, Node.DIRECT_EVAL);
2064:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2065:       assertEquals(4095, Node.COLUMN_MASK);
2066:       
2067:       boolean boolean3 = node3.isLabel();
2068:       assertFalse(boolean3);
2069:       assertFalse(node0.isHook());
2070:       assertFalse(node0.isFalse());
2071:       assertFalse(node0.isInc());
2072:       assertFalse(node0.isBreak());
2073:       assertEquals((-1), node0.getCharno());
2074:       assertFalse(node0.isSwitch());
2075:       assertFalse(node0.isIn());
2076:       assertFalse(node0.isThrow());
2077:       assertFalse(node0.isEmpty());
2078:       assertFalse(node0.isFunction());
2079:       assertFalse(node0.isExprResult());
2080:       assertFalse(node0.isGetElem());
2081:       assertFalse(node0.isCast());
2082:       assertFalse(node0.isDelProp());
2083:       assertFalse(node0.isNot());
2084:       assertFalse(node0.isDebugger());
2085:       assertEquals((-1), node0.getSourcePosition());
2086:       assertFalse(node0.isTrue());
2087:       assertFalse(node0.isVoid());
2088:       assertFalse(node0.isAnd());
2089:       assertTrue(node0.isNumber());
2090:       assertFalse(node0.isReturn());
2091:       assertFalse(node0.isGetProp());
2092:       assertFalse(node0.isObjectLit());
2093:       assertFalse(node0.isString());
2094:       assertFalse(node0.hasChildren());
2095:       assertFalse(node0.isDec());
2096:       assertFalse(node0.isTypeOf());
2097:       assertFalse(node0.isComma());
2098:       assertFalse(node0.isAssign());
2099:       assertFalse(node0.isWhile());
2100:       assertFalse(node0.isNew());
2101:       assertFalse(node0.isAdd());
2102:       assertFalse(node0.isCall());
2103:       assertFalse(node0.isNull());
2104:       assertFalse(node0.isStringKey());
2105:       assertFalse(node0.isName());
2106:       assertFalse(node0.isParamList());
2107:       assertEquals(0, node0.getChildCount());
2108:       assertFalse(node0.isOr());
2109:       assertFalse(node0.isLabel());
2110:       assertFalse(node0.isContinue());
2111:       assertFalse(node0.isDefaultCase());
2112:       assertFalse(node0.isSetterDef());
2113:       assertFalse(node0.isDo());
2114:       assertFalse(node0.isVar());
2115:       assertFalse(node0.isAssignAdd());
2116:       assertFalse(node0.hasOneChild());
2117:       assertFalse(node0.isTry());
2118:       assertFalse(node0.isArrayLit());
2119:       assertFalse(node0.isIf());
2120:       assertFalse(node0.isGetterDef());
2121:       assertFalse(node0.isLabelName());
2122:       assertFalse(node0.isNE());
2123:       assertFalse(node0.isInstanceOf());
2124:       assertEquals((-1), node0.getLineno());
2125:       assertFalse(node0.hasMoreThanOneChild());
2126:       assertFalse(node0.isCatch());
2127:       assertFalse(node0.isWith());
2128:       assertFalse(node0.isRegExp());
2129:       assertFalse(node0.isScript());
2130:       assertEquals(39, node0.getType());
2131:       assertFalse(node0.isThis());
2132:       assertFalse(node0.isCase());
2133:       assertFalse(node0.isBlock());
2134:       assertFalse(node0.isFor());
2135:       assertFalse(node3.isThis());
2136:       assertFalse(node3.isComma());
2137:       assertFalse(node3.isInstanceOf());
2138:       assertFalse(node3.isBreak());
2139:       assertFalse(node3.isGetProp());
2140:       assertFalse(node3.isAnd());
2141:       assertFalse(node3.isObjectLit());
2142:       assertFalse(node3.isNot());
2143:       assertFalse(node3.isExprResult());
2144:       assertFalse(node3.isString());
2145:       assertFalse(node3.isCase());
2146:       assertFalse(node3.isScript());
2147:       assertFalse(node3.isWith());
2148:       assertEquals(1, node3.getChildCount());
2149:       assertEquals(159774, node3.getSourcePosition());
2150:       assertFalse(node3.isAssign());
2151:       assertFalse(node3.isDec());
2152:       assertFalse(node3.isHook());
2153:       assertFalse(node3.isNE());
2154:       assertFalse(node3.isIf());
2155:       assertTrue(node3.hasChildren());
2156:       assertFalse(node3.isIn());
2157:       assertFalse(node3.isFunction());
2158:       assertFalse(node3.isInc());
2159:       assertFalse(node3.isContinue());
2160:       assertFalse(node3.isCast());
2161:       assertFalse(node3.isThrow());
2162:       assertFalse(node3.isFalse());
2163:       assertEquals((-1368), node3.getType());
2164:       assertFalse(node3.isParamList());
2165:       assertFalse(node3.isSetterDef());
2166:       assertFalse(node3.isStringKey());
2167:       assertFalse(node3.isName());
2168:       assertFalse(node3.isNull());
2169:       assertFalse(node3.isDebugger());
2170:       assertFalse(node3.isTrue());
2171:       assertFalse(node3.isVoid());
2172:       assertEquals(30, node3.getCharno());
2173:       assertFalse(node3.isRegExp());
2174:       assertFalse(node3.isTry());
2175:       assertFalse(node3.isCall());
2176:       assertFalse(node3.isCatch());
2177:       assertFalse(node3.hasMoreThanOneChild());
2178:       assertFalse(node3.isWhile());
2179:       assertFalse(node3.isReturn());
2180:       assertFalse(node3.isBlock());
2181:       assertFalse(node3.isFor());
2182:       assertTrue(node3.hasOneChild());
2183:       assertFalse(node3.isTypeOf());
2184:       assertFalse(node3.isNumber());
2185:       assertFalse(node3.isAssignAdd());
2186:       assertFalse(node3.isDelProp());
2187:       assertFalse(node3.isEmpty());
2188:       assertFalse(node3.isLabelName());
2189:       assertFalse(node3.isGetElem());
2190:       assertFalse(node3.isGetterDef());
2191:       assertFalse(node3.isOr());
2192:       assertFalse(node3.isDefaultCase());
2193:       assertFalse(node3.isSwitch());
2194:       assertFalse(node3.isDo());
2195:       assertFalse(node3.isArrayLit());
2196:       assertFalse(node3.isAdd());
2197:       assertFalse(node3.isNew());
2198:       assertFalse(node3.isVar());
2199:       assertEquals(39, node3.getLineno());
2200:       assertFalse(node3.isLabel());
2201:       assertNotSame(node0, node2);
2202:       assertSame(node3, node4);
2203:       assertFalse(node0.equals((Object)node2));
2204:       assertFalse(node0.equals((Object)node1));
2205:       assertFalse(node0.equals((Object)node4));
2206:       assertFalse(node0.equals((Object)node3));
2207:       assertFalse(boolean3 == boolean1);
2208:       assertTrue(boolean3 == boolean0);
2209:       assertTrue(boolean3 == boolean2);
2210:       assertFalse(node3.equals((Object)node1));
2211:       assertFalse(node3.equals((Object)node0));
2212:       assertFalse(node3.equals((Object)node2));
2213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2214:       assertEquals(36, Node.QUOTED_PROP);
2215:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2216:       assertEquals(53, Node.INPUT_ID);
2217:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2218:       assertEquals(47, Node.IS_DISPATCHER);
2219:       assertEquals(37, Node.OPT_ARG_NAME);
2220:       assertEquals(8, Node.FLAG_NO_THROWS);
2221:       assertEquals(39, Node.EMPTY_BLOCK);
2222:       assertEquals(48, Node.DIRECTIVES);
2223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2224:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2225:       assertEquals(29, Node.JSDOC_INFO_PROP);
2226:       assertEquals(4095, Node.COLUMN_MASK);
2227:       assertEquals(55, Node.INFERRED_FUNCTION);
2228:       assertEquals(49, Node.DIRECT_EVAL);
2229:       assertEquals(57, Node.REFLECTED_OBJECT);
2230:       assertEquals(56, Node.CHANGE_TIME);
2231:       assertEquals(54, Node.SLASH_V);
2232:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2233:       assertEquals(52, Node.LENGTH);
2234:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2235:       assertEquals(30, Node.VAR_ARGS_NAME);
2236:       assertEquals(1, Node.DECR_FLAG);
2237:       assertEquals(32, Node.INCRDECR_PROP);
2238:       assertEquals(57, Node.LAST_PROP);
2239:       assertEquals(12, Node.COLUMN_BITS);
2240:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2241:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2242:       assertEquals(2, Node.POST_FLAG);
2243:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2244:       assertEquals(40, Node.ORIGINALNAME_PROP);
2245:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2246:       assertEquals(50, Node.FREE_CALL);
2247:       assertEquals(46, Node.IS_NAMESPACE);
2248:       assertEquals(43, Node.IS_CONSTANT_NAME);
2249:       assertEquals(29, Node.JSDOC_INFO_PROP);
2250:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2251:       assertEquals(56, Node.CHANGE_TIME);
2252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2253:       assertEquals(37, Node.OPT_ARG_NAME);
2254:       assertEquals(32, Node.INCRDECR_PROP);
2255:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2256:       assertEquals(2, Node.POST_FLAG);
2257:       assertEquals(12, Node.COLUMN_BITS);
2258:       assertEquals(47, Node.IS_DISPATCHER);
2259:       assertEquals(30, Node.VAR_ARGS_NAME);
2260:       assertEquals(43, Node.IS_CONSTANT_NAME);
2261:       assertEquals(1, Node.DECR_FLAG);
2262:       assertEquals(46, Node.IS_NAMESPACE);
2263:       assertEquals(54, Node.SLASH_V);
2264:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2266:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2267:       assertEquals(50, Node.FREE_CALL);
2268:       assertEquals(39, Node.EMPTY_BLOCK);
2269:       assertEquals(40, Node.ORIGINALNAME_PROP);
2270:       assertEquals(48, Node.DIRECTIVES);
2271:       assertEquals(4095, Node.COLUMN_MASK);
2272:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2273:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2274:       assertEquals(49, Node.DIRECT_EVAL);
2275:       assertEquals(57, Node.LAST_PROP);
2276:       assertEquals(55, Node.INFERRED_FUNCTION);
2277:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2278:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2279:       assertEquals(52, Node.LENGTH);
2280:       assertEquals(53, Node.INPUT_ID);
2281:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2282:       assertEquals(8, Node.FLAG_NO_THROWS);
2283:       assertEquals(57, Node.REFLECTED_OBJECT);
2284:       assertEquals(36, Node.QUOTED_PROP);
2285:   }
2286: }
RegularFileObject[/tmp/EvoSuite_229_1628256069301/com/google/javascript/rhino/Node_229_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:09 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_229_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_229_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.javascript.rhino.JSDocInfo$StringPosition",
72:       "com.google.common.collect.ImmutableList$SubList",
73:       "com.google.javascript.rhino.jstype.NoType",
74:       "com.google.javascript.rhino.JSDocInfo$Visibility",
75:       "com.google.common.collect.ListMultimap",
76:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
77:       "com.google.javascript.rhino.jstype.ArrowType",
78:       "com.google.javascript.rhino.SimpleErrorReporter",
79:       "com.google.common.collect.Lists$RandomAccessPartition",
80:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
81:       "com.google.common.collect.Collections2",
82:       "com.google.javascript.rhino.jstype.NumberType",
83:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
84:       "com.google.common.collect.PeekingIterator",
85:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
86:       "com.google.common.collect.RegularImmutableList",
87:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
88:       "com.google.javascript.rhino.jstype.StaticScope",
89:       "com.google.javascript.rhino.jstype.InstanceObjectType",
90:       "com.google.common.collect.Lists$TransformingRandomAccessList",
91:       "com.google.javascript.rhino.Node$PropListItem",
92:       "com.google.javascript.rhino.Node$IntPropListItem",
93:       "com.google.common.collect.Sets$2",
94:       "com.google.common.collect.Maps$KeySet",
95:       "com.google.common.collect.Sets$3",
96:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
97:       "com.google.common.collect.LinkedHashMultimap",
98:       "com.google.javascript.rhino.Node",
99:       "com.google.javascript.rhino.jstype.ObjectType",
100:       "com.google.javascript.rhino.SourcePosition",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.Platform",
103:       "com.google.javascript.rhino.JSDocInfo$TrimmedStringPosition",
104:       "com.google.common.collect.ImmutableMapKeySet",
105:       "com.google.javascript.rhino.JSDocInfo$Marker",
106:       "com.google.common.collect.RegularImmutableMap",
107:       "com.google.common.collect.RegularImmutableBiMap",
108:       "com.google.javascript.rhino.Node$NodeMismatch",
109:       "com.google.javascript.rhino.jstype.RecordType",
110:       "com.google.common.collect.SortedMapDifference",
111:       "com.google.common.collect.RegularImmutableSet",
112:       "com.google.javascript.rhino.jstype.ModificationVisitor",
113:       "com.google.javascript.rhino.jstype.PropertyMap$1",
114:       "com.google.common.collect.AbstractMapEntry",
115:       "com.google.javascript.rhino.Node$AncestorIterable$1",
116:       "com.google.common.collect.Iterators$12",
117:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
118:       "com.google.common.collect.Iterators$11",
119:       "com.google.javascript.rhino.jstype.JSType$1",
120:       "com.google.common.collect.EmptyImmutableBiMap",
121:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
122:       "com.google.common.base.Predicate",
123:       "com.google.javascript.rhino.jstype.JSType$2",
124:       "com.google.javascript.rhino.jstype.VoidType",
125:       "com.google.common.base.Joiner",
126:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
127:       "com.google.common.collect.AbstractListMultimap",
128:       "com.google.javascript.rhino.jstype.JSType",
129:       "com.google.common.collect.ImmutableAsList",
130:       "com.google.javascript.rhino.Node$StringNode",
131:       "com.google.javascript.rhino.jstype.ProxyObjectType",
132:       "com.google.common.collect.Sets$SetView",
133:       "com.google.common.collect.RegularImmutableAsList",
134:       "com.google.javascript.rhino.jstype.TemplateType",
135:       "com.google.common.collect.SingletonImmutableSet",
136:       "com.google.javascript.rhino.jstype.NamedType",
137:       "com.google.common.collect.Iterators$13",
138:       "com.google.javascript.rhino.InputId",
139:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
140:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
141:       "com.google.common.collect.AbstractMapBasedMultimap",
142:       "com.google.common.collect.Lists$Partition",
143:       "com.google.common.collect.Lists",
144:       "com.google.javascript.rhino.Node$SideEffectFlags",
145:       "com.google.common.collect.UnmodifiableListIterator",
146:       "com.google.javascript.rhino.jstype.NullType",
147:       "com.google.common.collect.Lists$TransformingSequentialList",
148:       "com.google.javascript.rhino.ErrorReporter",
149:       "com.google.javascript.rhino.jstype.UnknownType",
150:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
151:       "com.google.javascript.rhino.jstype.ValueType",
152:       "com.google.javascript.rhino.jstype.PropertyMap",
153:       "com.google.javascript.rhino.Token",
154:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
155:       "com.google.common.collect.ObjectArrays",
156:       "com.google.javascript.rhino.jstype.StaticSourceFile",
157:       "com.google.javascript.rhino.jstype.BooleanType",
158:       "com.google.javascript.rhino.jstype.NoObjectType",
159:       "com.google.common.collect.AbstractIterator",
160:       "com.google.javascript.rhino.jstype.FunctionBuilder",
161:       "com.google.javascript.rhino.jstype.JSType$TypePair",
162:       "com.google.common.base.Joiner$MapJoiner",
163:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
164:       "com.google.common.collect.ImmutableList$1",
165:       "com.google.common.collect.MapDifference",
166:       "com.google.javascript.rhino.JSDocInfo$1",
167:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
168:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
169:       "com.google.common.collect.Sets$ImprovedAbstractSet",
170:       "com.google.javascript.rhino.jstype.FunctionType",
171:       "com.google.common.base.Preconditions",
172:       "com.google.common.collect.UnmodifiableIterator",
173:       "com.google.javascript.rhino.JSDocInfo",
174:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
175:       "com.google.javascript.rhino.jstype.Property",
176:       "com.google.common.collect.ImmutableMapValues",
177:       "com.google.common.collect.ImmutableEntry",
178:       "com.google.common.base.Joiner$1",
179:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
180:       "com.google.common.base.Joiner$2",
181:       "com.google.common.collect.ImmutableCollection",
182:       "com.google.common.collect.ImmutableEnumMap",
183:       "com.google.javascript.rhino.jstype.TernaryValue",
184:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
185:       "com.google.javascript.rhino.Node$AncestorIterable",
186:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
187:       "com.google.common.collect.Lists$RandomAccessListWrapper",
188:       "com.google.common.collect.ImmutableEnumSet",
189:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
190:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
191:       "com.google.javascript.rhino.jstype.EnumElementType",
192:       "com.google.javascript.rhino.jstype.UnionType",
193:       "com.google.common.base.Objects",
194:       "com.google.javascript.rhino.Node$NumberNode",
195:       "com.google.common.collect.SingletonImmutableList",
196:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
197:       "com.google.common.collect.ImmutableCollection$Builder",
198:       "com.google.javascript.rhino.jstype.StaticSlot",
199:       "com.google.common.collect.Iterators$6",
200:       "com.google.common.collect.BiMap",
201:       "com.google.common.collect.Iterators$7",
202:       "com.google.common.collect.AbstractSetMultimap",
203:       "com.google.common.base.Function",
204:       "com.google.common.collect.ImmutableSet",
205:       "com.google.common.collect.Lists$AbstractListWrapper",
206:       "com.google.common.collect.ImmutableMap",
207:       "com.google.common.collect.AbstractIndexedListIterator",
208:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
209:       "com.google.common.collect.Maps$1",
210:       "com.google.javascript.rhino.jstype.EnumType",
211:       "com.google.javascript.rhino.JSDocInfo$TypePosition",
212:       "com.google.common.collect.Iterators$1",
213:       "com.google.common.collect.Iterators$2",
214:       "com.google.javascript.rhino.jstype.NamespaceType",
215:       "com.google.common.collect.Iterators$3",
216:       "com.google.common.collect.Sets",
217:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
218:       "com.google.javascript.rhino.Node$ObjectPropListItem",
219:       "com.google.common.collect.Lists$StringAsImmutableList",
220:       "com.google.common.collect.Lists$2",
221:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
222:       "com.google.common.collect.ImmutableList$Builder",
223:       "com.google.common.collect.Lists$1",
224:       "com.google.javascript.rhino.jstype.StaticReference",
225:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
226:       "com.google.common.collect.Multiset",
227:       "com.google.common.collect.AbstractMultimap",
228:       "com.google.common.collect.Multimap",
229:       "com.google.common.collect.Iterators",
230:       "com.google.common.collect.EmptyImmutableSet",
231:       "com.google.common.collect.Maps$ImprovedAbstractMap",
232:       "com.google.common.collect.ImmutableBiMap",
233:       "com.google.javascript.rhino.JSDocInfo$NamePosition",
234:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
235:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
236:       "com.google.common.collect.ImmutableList",
237:       "com.google.common.collect.SingletonImmutableBiMap",
238:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
239:       "com.google.javascript.rhino.jstype.StringType",
240:       "com.google.javascript.rhino.Node$AbstractPropListItem",
241:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
242:       "com.google.javascript.rhino.jstype.TemplatizedType",
243:       "com.google.javascript.rhino.jstype.Visitor",
244:       "com.google.javascript.rhino.jstype.NoResolvedType",
245:       "com.google.javascript.rhino.jstype.JSTypeNative",
246:       "com.google.javascript.rhino.jstype.AllType",
247:       "com.google.common.collect.Maps",
248:       "com.google.common.collect.SetMultimap",
249:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
250:       "com.google.common.collect.Maps$EntryTransformer",
251:       "com.google.javascript.rhino.JSTypeExpression",
252:       "com.google.common.collect.Iterators$MergingIterator"
253:     );
254:   } 
255: 
256:   private static void resetClasses() {
257:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_229_tmp__ESTest_scaffolding.class.getClassLoader()); 
258: 
259:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
260:       "com.google.javascript.rhino.Node",
261:       "com.google.javascript.rhino.Node$NumberNode",
262:       "com.google.javascript.rhino.Node$StringNode",
263:       "com.google.javascript.rhino.Node$AbstractPropListItem",
264:       "com.google.javascript.rhino.Node$ObjectPropListItem",
265:       "com.google.javascript.rhino.Node$IntPropListItem",
266:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
267:       "com.google.javascript.rhino.Node$AncestorIterable",
268:       "com.google.javascript.rhino.Node$NodeMismatch",
269:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
270:       "com.google.javascript.rhino.Node$SideEffectFlags",
271:       "com.google.javascript.rhino.Token",
272:       "com.google.common.base.Preconditions",
273:       "com.google.javascript.rhino.SimpleErrorReporter",
274:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
275:       "com.google.common.base.Joiner",
276:       "com.google.common.base.Joiner$1",
277:       "com.google.common.collect.Collections2",
278:       "com.google.common.base.Joiner$MapJoiner",
279:       "com.google.common.collect.Maps",
280:       "com.google.common.collect.AbstractMultimap",
281:       "com.google.common.collect.AbstractMapBasedMultimap",
282:       "com.google.common.collect.AbstractSetMultimap",
283:       "com.google.common.collect.LinkedHashMultimap",
284:       "com.google.common.collect.AbstractMapEntry",
285:       "com.google.common.collect.ImmutableEntry",
286:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
287:       "com.google.common.collect.AbstractListMultimap",
288:       "com.google.common.collect.ArrayListMultimap",
289:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
290:       "com.google.common.collect.ImmutableCollection",
291:       "com.google.common.collect.RegularImmutableList",
292:       "com.google.common.collect.ObjectArrays",
293:       "com.google.common.collect.ImmutableList",
294:       "com.google.javascript.rhino.jstype.ModificationVisitor",
295:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
296:       "com.google.common.collect.ImmutableCollection$Builder",
297:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
298:       "com.google.common.collect.ImmutableList$Builder",
299:       "com.google.common.collect.UnmodifiableIterator",
300:       "com.google.common.collect.UnmodifiableListIterator",
301:       "com.google.common.collect.Iterators$1",
302:       "com.google.common.collect.Iterators$2",
303:       "com.google.common.collect.Iterators",
304:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
305:       "com.google.javascript.rhino.jstype.JSType$1",
306:       "com.google.javascript.rhino.jstype.JSType",
307:       "com.google.javascript.rhino.jstype.ObjectType",
308:       "com.google.javascript.rhino.jstype.ProxyObjectType",
309:       "com.google.javascript.rhino.jstype.TemplateType",
310:       "com.google.javascript.rhino.jstype.ValueType",
311:       "com.google.javascript.rhino.jstype.BooleanType",
312:       "com.google.javascript.rhino.jstype.NullType",
313:       "com.google.javascript.rhino.jstype.NumberType",
314:       "com.google.javascript.rhino.jstype.StringType",
315:       "com.google.javascript.rhino.jstype.UnknownType",
316:       "com.google.javascript.rhino.jstype.VoidType",
317:       "com.google.javascript.rhino.jstype.AllType",
318:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
319:       "com.google.common.collect.ImmutableMap",
320:       "com.google.common.collect.ImmutableBiMap",
321:       "com.google.common.collect.EmptyImmutableBiMap",
322:       "com.google.javascript.rhino.jstype.PropertyMap$1",
323:       "com.google.javascript.rhino.jstype.PropertyMap",
324:       "com.google.javascript.rhino.jstype.FunctionType",
325:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
326:       "com.google.javascript.rhino.jstype.ArrowType",
327:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
328:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
329:       "com.google.javascript.rhino.jstype.InstanceObjectType",
330:       "com.google.javascript.rhino.jstype.Property",
331:       "com.google.common.collect.Lists",
332:       "com.google.javascript.rhino.jstype.NoObjectType",
333:       "com.google.javascript.rhino.jstype.NoType",
334:       "com.google.javascript.rhino.jstype.NoResolvedType",
335:       "com.google.common.collect.SingletonImmutableList",
336:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
337:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
338:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
339:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
340:       "com.google.javascript.rhino.jstype.UnionType",
341:       "com.google.javascript.rhino.jstype.FunctionBuilder",
342:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
345:       "com.google.common.collect.AbstractIndexedListIterator",
346:       "com.google.common.collect.Iterators$11",
347:       "com.google.common.collect.Platform",
348:       "com.google.javascript.rhino.JSDocInfo",
349:       "com.google.javascript.rhino.jstype.EnumType",
350:       "com.google.javascript.rhino.jstype.EnumElementType",
351:       "com.google.common.collect.ImmutableSet",
352:       "com.google.common.collect.EmptyImmutableSet",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
354:       "com.google.common.collect.Sets",
355:       "com.google.javascript.rhino.Node$AncestorIterable$1",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
359:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
360:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
361:       "com.google.javascript.rhino.jstype.TemplatizedType",
362:       "com.google.javascript.rhino.JSDocInfo$Visibility",
363:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
364:       "com.google.javascript.rhino.InputId",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.javascript.rhino.jstype.JSType$2",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
370:       "com.google.javascript.rhino.jstype.NamespaceType",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.common.collect.ImmutableList$1",
373:       "com.google.common.collect.AbstractMultimap$Values",
374:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
375:       "com.google.common.collect.AbstractMapBasedMultimap$1",
376:       "com.google.common.collect.Multimaps$Entries",
377:       "com.google.common.collect.AbstractMultimap$Entries",
378:       "com.google.common.collect.AbstractMapBasedMultimap$2"
379:     );
380:   }
381: }

[MASTER] 13:21:09.775 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(1.0, (-1046), (-1046));
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertNotNull(node0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

InputId inputId0 = node0.getInputId();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertNull(inputId0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

int int0 = node0.getType();
assertEquals(39, int0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertNotNull(node_FileLevelJsDocBuilder0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

node_FileLevelJsDocBuilder0.append("opt_arg");
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Set<String> set0 = node0.getDirectives();
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertNull(set0);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node node1 = Node.newString(0, "O|5`v|$6-", 16, 47);
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertEquals(65583, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals(16, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(47, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertNotNull(node1);
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Iterable<Node> iterable0 = node1.children();
assertFalse(iterable0.contains(node0));
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertEquals(65583, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals(16, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(47, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertNotNull(iterable0);
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Set<String> set1 = node1.getDirectives();
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertEquals(65583, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals(16, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(47, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertNull(set1);
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean0 = node1.isScript();
assertFalse(boolean0);
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertEquals(65583, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals(16, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(47, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

Node node2 = Node.newNumber(0.0, 39, 30);
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertEquals(39, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertEquals(30, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertTrue(node2.isNumber());
assertEquals(159774, node2.getSourcePosition());
assertFalse(node2.isWhile());
assertNotNull(node2);
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

boolean boolean1 = node2.mayMutateArguments();
assertTrue(boolean1);
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertEquals(39, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertEquals(30, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertTrue(node2.isNumber());
assertEquals(159774, node2.getSourcePosition());
assertFalse(node2.isWhile());
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(boolean1 == boolean0);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);

Node.SideEffectFlags node_SideEffectFlags1 = new Node.SideEffectFlags();
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertNotNull(node_SideEffectFlags1);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesThis();
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertNotNull(node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertNotSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertFalse(node_SideEffectFlags1.equals((Object)node_SideEffectFlags0));
assertFalse(node_SideEffectFlags2.equals((Object)node_SideEffectFlags0));

Node node3 = new Node((-1368), node0, node0);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isExprResult());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertEquals((-1), node3.getLineno());
assertTrue(node3.hasChildren());
assertFalse(node3.isIn());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFunction());
assertFalse(node3.isInc());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals((-1368), node3.getType());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isGetterDef());
assertFalse(node3.isOr());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isArrayLit());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertFalse(node3.isLabel());
assertNotNull(node3);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

Node node4 = node3.srcref(node2);
assertEquals(30, node4.getCharno());
assertFalse(node4.isStringKey());
assertFalse(node4.isVar());
assertFalse(node4.isBlock());
assertFalse(node4.isName());
assertFalse(node4.isContinue());
assertFalse(node4.isCall());
assertFalse(node4.hasMoreThanOneChild());
assertFalse(node4.isParamList());
assertFalse(node4.isReturn());
assertFalse(node4.isWhile());
assertFalse(node4.isNumber());
assertFalse(node4.isTry());
assertFalse(node4.isDebugger());
assertFalse(node4.isFor());
assertFalse(node4.isIf());
assertFalse(node4.isRegExp());
assertFalse(node4.isFunction());
assertFalse(node4.isWith());
assertFalse(node4.isCatch());
assertFalse(node4.isCast());
assertTrue(node4.hasChildren());
assertFalse(node4.isIn());
assertEquals((-1368), node4.getType());
assertFalse(node4.isNE());
assertFalse(node4.isSetterDef());
assertFalse(node4.isInc());
assertFalse(node4.isThrow());
assertFalse(node4.isHook());
assertFalse(node4.isBreak());
assertEquals(39, node4.getLineno());
assertFalse(node4.isSwitch());
assertFalse(node4.isFalse());
assertEquals(1, node4.getChildCount());
assertFalse(node4.isInstanceOf());
assertFalse(node4.isAnd());
assertFalse(node4.isObjectLit());
assertFalse(node4.isComma());
assertFalse(node4.isThis());
assertFalse(node4.isGetterDef());
assertFalse(node4.isString());
assertFalse(node4.isNot());
assertFalse(node4.isCase());
assertFalse(node4.isScript());
assertFalse(node4.isGetProp());
assertEquals(159774, node4.getSourcePosition());
assertFalse(node4.isTrue());
assertTrue(node4.hasOneChild());
assertFalse(node4.isDelProp());
assertFalse(node4.isDec());
assertFalse(node4.isLabelName());
assertFalse(node4.isAssign());
assertFalse(node4.isTypeOf());
assertFalse(node4.isVoid());
assertFalse(node4.isExprResult());
assertFalse(node4.isArrayLit());
assertFalse(node4.isGetElem());
assertFalse(node4.isAssignAdd());
assertFalse(node4.isOr());
assertFalse(node4.isLabel());
assertFalse(node4.isNull());
assertFalse(node4.isDo());
assertFalse(node4.isDefaultCase());
assertFalse(node4.isNew());
assertFalse(node4.isEmpty());
assertFalse(node4.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node2.isOr());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isLabel());
assertFalse(node2.hasChildren());
assertFalse(node2.isDec());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isGetElem());
assertFalse(node2.isLabelName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isNew());
assertFalse(node2.isSetterDef());
assertFalse(node2.isThis());
assertFalse(node2.isParamList());
assertEquals(39, node2.getLineno());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isCatch());
assertFalse(node2.isStringKey());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isSwitch());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertEquals(39, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isRegExp());
assertFalse(node2.isHook());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isNE());
assertFalse(node2.isIn());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isIf());
assertFalse(node2.isVoid());
assertFalse(node2.isDelProp());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isTrue());
assertFalse(node2.isThrow());
assertFalse(node2.isEmpty());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isNull());
assertFalse(node2.isFalse());
assertFalse(node2.isAnd());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isName());
assertFalse(node2.isDebugger());
assertFalse(node2.isExprResult());
assertFalse(node2.isString());
assertEquals(30, node2.getCharno());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertTrue(node2.isNumber());
assertEquals(159774, node2.getSourcePosition());
assertFalse(node2.isWhile());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertEquals(159774, node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.hasChildren());
assertFalse(node3.isIn());
assertFalse(node3.isFunction());
assertFalse(node3.isInc());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals((-1368), node3.getType());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertEquals(30, node3.getCharno());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isGetterDef());
assertFalse(node3.isOr());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isArrayLit());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertEquals(39, node3.getLineno());
assertFalse(node3.isLabel());
assertNotNull(node4);
assertSame(node4, node3);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertSame(node3, node4);
assertFalse(node4.equals((Object)node2));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node0));
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);

boolean boolean2 = node1.isFor();
assertFalse(boolean2);
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isStringKey());
assertFalse(node1.isCast());
assertFalse(node1.hasOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isParamList());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isNumber());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertEquals(65583, node1.getSourcePosition());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isIf());
assertFalse(node1.isInc());
assertFalse(node1.isNE());
assertFalse(node1.isSetterDef());
assertEquals(16, node1.getLineno());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getType());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isTry());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isString());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertEquals(47, node1.getCharno());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isVar());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isNull());
assertFalse(node1.isOr());
assertTrue(boolean2 == boolean0);
assertFalse(boolean2 == boolean1);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node4));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);

boolean boolean3 = node3.isLabel();
assertFalse(boolean3);
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isEmpty());
assertFalse(node0.isFunction());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.isDelProp());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isAnd());
assertTrue(node0.isNumber());
assertFalse(node0.isReturn());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isName());
assertFalse(node0.isParamList());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isOr());
assertFalse(node0.isLabel());
assertFalse(node0.isContinue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSetterDef());
assertFalse(node0.isDo());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isTry());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isLabelName());
assertFalse(node0.isNE());
assertFalse(node0.isInstanceOf());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isWith());
assertFalse(node0.isRegExp());
assertFalse(node0.isScript());
assertEquals(39, node0.getType());
assertFalse(node0.isThis());
assertFalse(node0.isCase());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertFalse(node3.isString());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isWith());
assertEquals(1, node3.getChildCount());
assertEquals(159774, node3.getSourcePosition());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isHook());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertTrue(node3.hasChildren());
assertFalse(node3.isIn());
assertFalse(node3.isFunction());
assertFalse(node3.isInc());
assertFalse(node3.isContinue());
assertFalse(node3.isCast());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals((-1368), node3.getType());
assertFalse(node3.isParamList());
assertFalse(node3.isSetterDef());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isDebugger());
assertFalse(node3.isTrue());
assertFalse(node3.isVoid());
assertEquals(30, node3.getCharno());
assertFalse(node3.isRegExp());
assertFalse(node3.isTry());
assertFalse(node3.isCall());
assertFalse(node3.isCatch());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isWhile());
assertFalse(node3.isReturn());
assertFalse(node3.isBlock());
assertFalse(node3.isFor());
assertTrue(node3.hasOneChild());
assertFalse(node3.isTypeOf());
assertFalse(node3.isNumber());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isDelProp());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isGetterDef());
assertFalse(node3.isOr());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isArrayLit());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertFalse(node3.isVar());
assertEquals(39, node3.getLineno());
assertFalse(node3.isLabel());
assertNotSame(node0, node2);
assertSame(node3, node4);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node4));
assertFalse(node0.equals((Object)node3));
assertFalse(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);


[MASTER] 13:21:22.203 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:22.638 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:22.931 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:23.228 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:24.183 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:24.443 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:24.771 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:25.030 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:25.279 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:25.492 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:25.735 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:25.982 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:26.263 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:26.558 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:26.794 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:27.024 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:27.257 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:27.478 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:27.693 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:27.896 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/23
* Done!

* Computation finished
