* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 9998
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 1671296036
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:03:29.859 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:03:38.582 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:04:02.177 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
[MASTER] 13:06:31.965 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 645,0,0| Number of FF evals: 738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 907,0,0| Number of FF evals: 366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 30610,26713,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 645,0,0| Number of FF evals: 794
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 306,0,0| Number of FF evals: 847
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 6802,5211,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 45,0,0| Number of FF evals: 91
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 534,0,0| Number of FF evals: 940
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1889,1505,30| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 14,0,0| Number of FF evals: 767
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 1047,0,0| Number of FF evals: 407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1774,1536,0| Number of FF evals: 18119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 3786,367,0| Number of FF evals: 2502
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 1047,0,0| Number of FF evals: 407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 1047,0,0| Number of FF evals: 407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 7397,6591,0| Number of FF evals: 5200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 1047,0,0| Number of FF evals: 407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 227,0,0| Number of FF evals: 585
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 135,0,0| Number of FF evals: 658
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 1764,416,0| Number of FF evals: 7621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 10984,10243,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 1047,0,0| Number of FF evals: 407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 135,0,0| Number of FF evals: 1396
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 1047,0,0| Number of FF evals: 407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 309,0,0| Number of FF evals: 959
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 777,0,0| Number of FF evals: 906
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 11226,9252,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 68,0,0| Number of FF evals: 985
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 25,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 1047,0,0| Number of FF evals: 680
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 12200,11446,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 135,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 419,0,0| Number of FF evals: 634
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 45,0,0| Number of FF evals: 584
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 1028,766,5| Number of FF evals: 7890
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 135,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 527,0,0| Number of FF evals: 257
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 10068,9417,0| Number of FF evals: 6751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 60,0,0| Number of FF evals: 228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 660,254,38| Number of FF evals: 3456
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 543,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 13300,12023,12| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I3 Branch 101 IFNONNULL L798 - true: 22,0,0| Number of FF evals: 567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 103,0,0| Number of FF evals: 724
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 135,0,0| Number of FF evals: 101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 1789,1401,3| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 17,0,0| Number of FF evals: 299
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 103,0,0| Number of FF evals: 759
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 2203,0,0| Number of FF evals: 1724
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 13847,13196,0| Number of FF evals: 10322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 10483,1883,0| Number of FF evals: 2755
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 606,401,0| Number of FF evals: 5331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 25,0,0| Number of FF evals: 439
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 6760,0,0| Number of FF evals: 1758
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 2478,783,0| Number of FF evals: 3307
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 2302,0,0| Number of FF evals: 1601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1809,114,0| Number of FF evals: 2332
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 45,0,0| Number of FF evals: 325
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 17259,15894,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 355,0,0| Number of FF evals: 332
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 45,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 822,251,0| Number of FF evals: 6286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 45,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 10315,8994,70| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 69,0,0| Number of FF evals: 531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 2215,0,0| Number of FF evals: 1294
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 135,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 1184,0,0| Number of FF evals: 594
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 569,320,0| Number of FF evals: 6128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 883,667,94| Number of FF evals: 7041
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1840,1447,4| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 1491,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 419,0,0| Number of FF evals: 244
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 45,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 2940,1719,0| Number of FF evals: 6650
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 45,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 12844,11175,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 3264,2954,378| Number of FF evals: 18119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 15013,6413,0| Number of FF evals: 3609
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 103,0,0| Number of FF evals: 493
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: root-Branch: 226,0,0| Number of FF evals: 240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 22,0,0| Number of FF evals: 670
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 2215,0,0| Number of FF evals: 1286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 45,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 45,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 2215,0,0| Number of FF evals: 1249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 2490,2104,25| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 1649,0,0| Number of FF evals: 803
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 45,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 4396,1841,0| Number of FF evals: 3834
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 527,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 527,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 4488,1933,0| Number of FF evals: 3888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 419,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 1660,1228,0| Number of FF evals: 7879
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 9204,5065,0| Number of FF evals: 7822
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - true: 476,44,0| Number of FF evals: 1795
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 11609,8190,0| Number of FF evals: 5364
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 1358,0,0| Number of FF evals: 880
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 645,0,0| Number of FF evals: 453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - false: 45,0,0| Number of FF evals: 715
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 24202,17920,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: Line 2331: 1807,0,0| Number of FF evals: 628
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 551,0,0| Number of FF evals: 326
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 45,0,0| Number of FF evals: 534
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 419,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 2702,0,0| Number of FF evals: 1236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 2052,913,0| Number of FF evals: 3685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 551,0,0| Number of FF evals: 326
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 1337,0,0| Number of FF evals: 506
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 4314,3756,16| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 4757,0,0| Number of FF evals: 1652
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 19593,17723,11| Number of FF evals: 17962
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 226,0,0| Number of FF evals: 574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 7202,2737,0| Number of FF evals: 3550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - true: 325,0,0| Number of FF evals: 1318
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 2612,0,0| Number of FF evals: 1132
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 4885,734,0| Number of FF evals: 6243
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 319,0,0| Number of FF evals: 485
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 72309,63709,44108| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 72309,63709,0| Number of FF evals: 18158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 45,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 1660,0,0| Number of FF evals: 1526
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 72309,63709,43853| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1789,1401,3| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 7672,0,0| Number of FF evals: 2279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1513,1127,35| Number of FF evals: 12418
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 476,0,0| Number of FF evals: 756
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 455,0,0| Number of FF evals: 768
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 1888,1504,34| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 135,0,0| Number of FF evals: 904
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 1292,0,0| Number of FF evals: 906
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 11952,3352,0| Number of FF evals: 4525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - true: 3132,0,0| Number of FF evals: 1651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 48,0,0| Number of FF evals: 506
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 24,0,0| Number of FF evals: 55
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 1144,19,0| Number of FF evals: 2234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 12755,11875,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 1807,0,0| Number of FF evals: 634
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 30,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 29135,20970,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 645,0,0| Number of FF evals: 298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 135,0,0| Number of FF evals: 121
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 3454,1700,0| Number of FF evals: 3634
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 1893,1507,35| Number of FF evals: 16002
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 645,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 419,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 135,0,0| Number of FF evals: 753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 477,99,24| Number of FF evals: 2806
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1847,1454,4| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 777,0,0| Number of FF evals: 561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 933,555,31| Number of FF evals: 6401
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 32,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 14,0,0| Number of FF evals: 733
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 5085,4734,1006| Number of FF evals: 18162
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 454,76,0| Number of FF evals: 3011
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 10068,9417,0| Number of FF evals: 6751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 8635,3675,0| Number of FF evals: 3858
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 4602,0,0| Number of FF evals: 1739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 6402,5401,824| Number of FF evals: 18164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 701,0,0| Number of FF evals: 1255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 226,0,0| Number of FF evals: 138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 72309,63709,0| Number of FF evals: 18158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 3310,0,0| Number of FF evals: 1061
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 3132,0,0| Number of FF evals: 921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 56,0,0| Number of FF evals: 283
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 550: 45,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 77,0,0| Number of FF evals: 535
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 45,0,0| Number of FF evals: 177
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 1649,0,0| Number of FF evals: 611
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 226,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 226,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 226,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 4595,576,0| Number of FF evals: 3036
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 226,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 226,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 645,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 226,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 30781,26735,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 319,0,0| Number of FF evals: 196
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 2001,1596,2| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 226,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 2702,0,0| Number of FF evals: 1348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 777,0,0| Number of FF evals: 740
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 6686,4223,0| Number of FF evals: 5526
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 2790,0,0| Number of FF evals: 955
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 907,0,0| Number of FF evals: 374
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 1595,0,0| Number of FF evals: 1604
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 4351,2305,0| Number of FF evals: 5490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 2287,0,0| Number of FF evals: 730
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 527,0,0| Number of FF evals: 1524
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 133,0,0| Number of FF evals: 352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 3868,2995,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 15127,11088,17| Number of FF evals: 10853
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 4870,3935,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 551,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 551,0,0| Number of FF evals: 489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 1649,0,0| Number of FF evals: 615
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 2672,0,0| Number of FF evals: 1349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 135,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 419,0,0| Number of FF evals: 360
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 3310,0,0| Number of FF evals: 1420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 226,0,0| Number of FF evals: 1124
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 72309,63709,44160| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 1644,0,0| Number of FF evals: 2089
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 11884,11058,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 7,0,0| Number of FF evals: 104
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 1768,12,0| Number of FF evals: 2203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - false: 319,0,0| Number of FF evals: 726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 1644,0,0| Number of FF evals: 2089
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 1337,0,0| Number of FF evals: 637
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 419,0,0| Number of FF evals: 717
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 10,0,0| Number of FF evals: 1329
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 244,0,0| Number of FF evals: 1253
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 3306,3008,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 419,0,0| Number of FF evals: 609
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1837,1444,3| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 36618,31317,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 534,0,0| Number of FF evals: 940
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 3132,0,0| Number of FF evals: 931
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 72,0,0| Number of FF evals: 246
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 97,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 135,0,0| Number of FF evals: 377
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 15013,6413,0| Number of FF evals: 3609
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 135,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 2287,0,0| Number of FF evals: 749
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 226,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 13271,12011,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 319,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 2790,0,0| Number of FF evals: 874
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 31093,29467,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 2734,1432,0| Number of FF evals: 4917
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 6760,0,0| Number of FF evals: 1759
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 8689,4034,0| Number of FF evals: 5714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 6760,0,0| Number of FF evals: 1759
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 22,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 322,0,0| Number of FF evals: 1821
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 135,0,0| Number of FF evals: 248
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 90,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 1491,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1802,1409,1| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 527,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1985,1592,40| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 370: 12,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 135,0,0| Number of FF evals: 729
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 472,0,0| Number of FF evals: 725
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 367: 12,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 420,0,0| Number of FF evals: 473
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 1667,0,0| Number of FF evals: 662
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 885,501,10| Number of FF evals: 8857
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 669: 319,0,0| Number of FF evals: 212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 419,0,0| Number of FF evals: 350
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 956,0,0| Number of FF evals: 1892
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 1521,0,0| Number of FF evals: 1878
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 4757,0,0| Number of FF evals: 1318
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 804,588,78| Number of FF evals: 5998
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 376: 12,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 375: 12,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 374: 12,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 373: 12,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 372: 12,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 72309,63709,0| Number of FF evals: 18158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: Line 371: 12,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 3484,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 731,0,0| Number of FF evals: 1277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 135,0,0| Number of FF evals: 132
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 1856,1372,0| Number of FF evals: 10127
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 20763,15400,0| Number of FF evals: 16282
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 6865,6173,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 29430,23779,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 91,0,0| Number of FF evals: 450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 4260,3776,0| Number of FF evals: 18164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 72309,63709,0| Number of FF evals: 18158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 2214,1836,125| Number of FF evals: 18119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 420,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 1963,0,0| Number of FF evals: 1031
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 405,0,0| Number of FF evals: 898
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 2326,1105,0| Number of FF evals: 4916
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - false: 527,0,0| Number of FF evals: 622
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 12625,10540,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 1047,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 645,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 1491,0,0| Number of FF evals: 539
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 930,387,0| Number of FF evals: 4090
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 454,76,0| Number of FF evals: 3010
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 420,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1099: 226,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 7186,2609,0| Number of FF evals: 4543
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 420,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 966,423,0| Number of FF evals: 4188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 25,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1752: 45,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 25,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 132,0,0| Number of FF evals: 325
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 2790,0,0| Number of FF evals: 911
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1747: 45,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 25,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceFileForTesting(Ljava/lang/String;)V: Line 1100: 226,0,0| Number of FF evals: 144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 45,0,0| Number of FF evals: 157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 25,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 135,0,0| Number of FF evals: 754
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 25,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1743: 45,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 792,408,2| Number of FF evals: 6320
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 2287,0,0| Number of FF evals: 1060
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 4425,3674,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 2920,2558,88| Number of FF evals: 18168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 135,0,0| Number of FF evals: 759
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 1441,991,0| Number of FF evals: 7918
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 419,0,0| Number of FF evals: 241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 1441,991,0| Number of FF evals: 7918
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 18043,9443,0| Number of FF evals: 4276
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 1441,991,0| Number of FF evals: 7918
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 175,0,0| Number of FF evals: 423
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 1441,991,0| Number of FF evals: 7918
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 14044,10295,0| Number of FF evals: 17552
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1806,1413,3| Number of FF evals: 17935
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 1807,0,0| Number of FF evals: 907
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 804,584,79| Number of FF evals: 6000
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2340,1888,12| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 2601,269,0| Number of FF evals: 5075
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 7,0,0| Number of FF evals: 199
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 419,0,0| Number of FF evals: 238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 2890,1711,0| Number of FF evals: 5027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 645,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 14617,12477,0| Number of FF evals: 11041
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 33457,30730,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 12508,11710,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 319,0,0| Number of FF evals: 525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - true: 52,0,0| Number of FF evals: 459
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 3310,0,0| Number of FF evals: 967
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 135,0,0| Number of FF evals: 693
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 645,0,0| Number of FF evals: 630
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 5878,245,0| Number of FF evals: 2241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 226,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 6760,0,0| Number of FF evals: 1812
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 45,0,0| Number of FF evals: 89
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 2116,1138,150| Number of FF evals: 4473
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 828,435,0| Number of FF evals: 6740
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 2208,1731,0| Number of FF evals: 11212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 45,0,0| Number of FF evals: 1167
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 7058,0,0| Number of FF evals: 1825
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 1491,0,0| Number of FF evals: 914
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 155,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 22455,19253,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 1184,0,0| Number of FF evals: 445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 1413,876,0| Number of FF evals: 4648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 7558,4192,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 1184,0,0| Number of FF evals: 468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 32,0,0| Number of FF evals: 763
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 281,0,0| Number of FF evals: 295
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 204,0,0| Number of FF evals: 432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 22,0,0| Number of FF evals: 670
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 1291,1058,0| Number of FF evals: 6810
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 135,0,0| Number of FF evals: 666
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 4357,4029,0| Number of FF evals: 17379
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 2287,0,0| Number of FF evals: 1539
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 777,0,0| Number of FF evals: 350
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getStaticSourceFile()Lcom/google/javascript/rhino/jstype/StaticSourceFile;: Line 1109: 135,0,0| Number of FF evals: 122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 891,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 319,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 1649,0,0| Number of FF evals: 616
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 12211,10620,0| Number of FF evals: 15578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getStaticSourceFile()Lcom/google/javascript/rhino/jstype/StaticSourceFile;: root-Branch: 135,0,0| Number of FF evals: 1247
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 11031,9876,0| Number of FF evals: 17895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 45,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 907,0,0| Number of FF evals: 824
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 45,0,0| Number of FF evals: 381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 729,191,9| Number of FF evals: 2801
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 10178,8924,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 9769,9224,4090| Number of FF evals: 17702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 5854,1969,0| Number of FF evals: 5696
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 134,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 4031,2473,0| Number of FF evals: 4947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 393,0,0| Number of FF evals: 1067
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 225,0,0| Number of FF evals: 835
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: Line 2319: 3132,0,0| Number of FF evals: 921
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 53,0,0| Number of FF evals: 253
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 14746,13627,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 2448,0,0| Number of FF evals: 1060
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 419,0,0| Number of FF evals: 540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 4267,4110,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 226,0,0| Number of FF evals: 218
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1682: 319,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - false: 22,0,0| Number of FF evals: 736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 72309,63709,44191| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 13090,8949,195| Number of FF evals: 9870
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 419,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 6760,0,0| Number of FF evals: 1947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 13383,12075,64| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 320,0,0| Number of FF evals: 625
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 226,0,0| Number of FF evals: 157
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2216,1934,81| Number of FF evals: 17455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 45,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 747,0,0| Number of FF evals: 1772
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 960,678,3| Number of FF evals: 7226
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 777,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 2770,0,0| Number of FF evals: 1371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 135,0,0| Number of FF evals: 737
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 319,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - true: 1807,0,0| Number of FF evals: 648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 1595,0,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 135,0,0| Number of FF evals: 694
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 645,0,0| Number of FF evals: 494
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 319,0,0| Number of FF evals: 568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 1595,0,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 1595,0,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 904,0,0| Number of FF evals: 1114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 319,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 355,0,0| Number of FF evals: 1911
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 1595,0,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 23483,20701,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 419,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 1595,0,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 1595,0,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 4388,0,0| Number of FF evals: 1242
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 1649,0,0| Number of FF evals: 617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 28,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 135,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 103,0,0| Number of FF evals: 708
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 3310,0,0| Number of FF evals: 998
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 8472,7280,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 8472,7280,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 68,0,0| Number of FF evals: 984
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 226,0,0| Number of FF evals: 271
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 226,0,0| Number of FF evals: 156
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 12667,10561,21| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 10,0,0| Number of FF evals: 1310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 419,0,0| Number of FF evals: 340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - false: 527,0,0| Number of FF evals: 647
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 1561,0,0| Number of FF evals: 1605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 18043,9443,0| Number of FF evals: 4276
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 843,0,0| Number of FF evals: 887
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 135,0,0| Number of FF evals: 107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 1479,0,0| Number of FF evals: 2094
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 135,0,0| Number of FF evals: 743
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1885,1647,0| Number of FF evals: 18119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 1649,0,0| Number of FF evals: 1105
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 1184,0,0| Number of FF evals: 477
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 1184,0,0| Number of FF evals: 475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 414,21,0| Number of FF evals: 2393
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1885,1647,0| Number of FF evals: 18119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 20702,16710,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 135,0,0| Number of FF evals: 122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 419,0,0| Number of FF evals: 692
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 135,0,0| Number of FF evals: 122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 5121,0,0| Number of FF evals: 1378
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 645,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 667,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 378,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 4574,4086,0| Number of FF evals: 18164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 93,0,0| Number of FF evals: 415
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 314,0,0| Number of FF evals: 823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 4574,4086,0| Number of FF evals: 18164
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 27035,25550,15| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 5878,245,0| Number of FF evals: 2227
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 6680,4866,0| Number of FF evals: 10391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 5878,245,0| Number of FF evals: 2227
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 135,0,0| Number of FF evals: 819
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 135,0,0| Number of FF evals: 889
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 167,0,0| Number of FF evals: 465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 419,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 319,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 135,0,0| Number of FF evals: 521
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 2116,1138,150| Number of FF evals: 4478
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 13324,12045,34| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - true: 22,0,0| Number of FF evals: 736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 319,0,0| Number of FF evals: 393
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 319,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 2598,1070,0| Number of FF evals: 3751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 1047,0,0| Number of FF evals: 615
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 8582,5572,0| Number of FF evals: 7409
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 419,0,0| Number of FF evals: 239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 499,143,24| Number of FF evals: 3079
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 1143,1039,114| Number of FF evals: 12369
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 565,81,0| Number of FF evals: 3504
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 7394,3163,1| Number of FF evals: 4178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 2836,377,0| Number of FF evals: 2372
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: root-Branch: 907,0,0| Number of FF evals: 673
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 14270,12058,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 559,0,0| Number of FF evals: 507
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 319,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 47591,44123,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 2790,0,0| Number of FF evals: 861
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 11771,8303,0| Number of FF evals: 5362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1826,1442,4| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2652,2370,245| Number of FF evals: 17455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 33457,30730,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 419,0,0| Number of FF evals: 217
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 1963,0,0| Number of FF evals: 655
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 10212,8950,26| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 226,0,0| Number of FF evals: 608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1912,1674,0| Number of FF evals: 18119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 531: 45,0,0| Number of FF evals: 82
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 530: 45,0,0| Number of FF evals: 82
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 3132,0,0| Number of FF evals: 1129
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 18428,13644,0| Number of FF evals: 11488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 15798,12309,0| Number of FF evals: 13113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 319,0,0| Number of FF evals: 550
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 2448,0,0| Number of FF evals: 794
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1459: 476,44,0| Number of FF evals: 1750
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 1963,0,0| Number of FF evals: 726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 420,0,0| Number of FF evals: 690
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 54,0,0| Number of FF evals: 504
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 226,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 226,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 4937,3451,0| Number of FF evals: 7331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 209,0,0| Number of FF evals: 932
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 226,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 226,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 226,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 230,0,0| Number of FF evals: 1109
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 124,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 36,0,0| Number of FF evals: 342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 135,0,0| Number of FF evals: 221
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 1649,0,0| Number of FF evals: 988
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 135,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 12825,11604,212| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1001,608,0| Number of FF evals: 7242
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 2048,1843,318| Number of FF evals: 15285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 135,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 135,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 135,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 12825,11604,212| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 135,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 1066,680,22| Number of FF evals: 6603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 45,0,0| Number of FF evals: 605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 456,251,0| Number of FF evals: 3791
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 135,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 135,0,0| Number of FF evals: 760
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 570,0,0| Number of FF evals: 981
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 198,0,0| Number of FF evals: 649
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 241,0,0| Number of FF evals: 361
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 5121,0,0| Number of FF evals: 1371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1785,1401,3| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 7153,6180,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 237,0,0| Number of FF evals: 455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 155,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 11771,8303,0| Number of FF evals: 5327
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 135,0,0| Number of FF evals: 753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 17002,15089,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 1184,0,0| Number of FF evals: 480
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 10483,1883,0| Number of FF evals: 2589
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 2215,0,0| Number of FF evals: 1200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 113,0,0| Number of FF evals: 283
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 2215,0,0| Number of FF evals: 1200
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 7738,7243,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 7738,7243,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 16431,14220,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 16518,14279,59| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 135,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 319,0,0| Number of FF evals: 212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 731,0,0| Number of FF evals: 1278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 319,0,0| Number of FF evals: 212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 1184,0,0| Number of FF evals: 726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 7266,4256,1| Number of FF evals: 6416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 20855,19792,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 23918,23250,123| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 1337,0,0| Number of FF evals: 512
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 45,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 319,0,0| Number of FF evals: 573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 319,0,0| Number of FF evals: 353
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - false: 12,0,0| Number of FF evals: 2752
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 12579,10762,2474| Number of FF evals: 18162
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 3484,0,0| Number of FF evals: 1013
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 9002,7185,1589| Number of FF evals: 10457
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 12752,11131,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 19286,15769,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 10996,5396,0| Number of FF evals: 10789
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 716,0,0| Number of FF evals: 1011
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 2790,0,0| Number of FF evals: 845
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 4388,0,0| Number of FF evals: 1747
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 2790,0,0| Number of FF evals: 845
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 2985,2535,13| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 1025,0,0| Number of FF evals: 1306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 319,0,0| Number of FF evals: 511
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 57,0,0| Number of FF evals: 345
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 907,0,0| Number of FF evals: 866
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 319,0,0| Number of FF evals: 702
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 1532,410,27| Number of FF evals: 4280
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 319,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 6009,2295,0| Number of FF evals: 4501
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 15,0,0| Number of FF evals: 86
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 719,480,2| Number of FF evals: 7890
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 7672,0,0| Number of FF evals: 1953
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 4437,206,0| Number of FF evals: 2320
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 522,0,0| Number of FF evals: 630
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 2612,0,0| Number of FF evals: 832
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 1047,0,0| Number of FF evals: 595
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 10234,9193,0| Number of FF evals: 13895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 1337,0,0| Number of FF evals: 741
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 23819,19220,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 450: 22,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 3132,0,0| Number of FF evals: 1278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 449: 22,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 666,0,0| Number of FF evals: 1100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 419,0,0| Number of FF evals: 509
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 45,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 527,0,0| Number of FF evals: 477
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 1184,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 14675,11823,0| Number of FF evals: 12883
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 1441,991,0| Number of FF evals: 7998
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 527,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 45,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 1184,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 19531,16594,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.wasEmptyNode()Z: Line 1993: 907,0,0| Number of FF evals: 379
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;II)V: Line 451: 22,0,0| Number of FF evals: 49
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 14615,11763,0| Number of FF evals: 12753
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 226,0,0| Number of FF evals: 540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 20023,19509,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 645,0,0| Number of FF evals: 308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 1649,0,0| Number of FF evals: 1261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 636,0,0| Number of FF evals: 366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 9002,7185,1606| Number of FF evals: 10457
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 135,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 6704,6329,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 135,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 230,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 135,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 256,0,0| Number of FF evals: 982
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 1963,0,0| Number of FF evals: 685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 22839,20266,0| Number of FF evals: 17963
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 72309,63709,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 1963,0,0| Number of FF evals: 685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 135,0,0| Number of FF evals: 111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 135,0,0| Number of FF evals: 706
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 2,0,0| Number of FF evals: 148
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1818: 527,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 777,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 777,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1813: 527,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 22801,17962,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 527,0,0| Number of FF evals: 351
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 794,410,2| Number of FF evals: 6376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 135,0,0| Number of FF evals: 738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1809: 527,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 72309,63709,0| Number of FF evals: 18158
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 1888,1504,34| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 135,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 22839,20266,0| Number of FF evals: 17963
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 1203,832,0| Number of FF evals: 7998
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 72309,63709,44035| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 4749,3771,155| Number of FF evals: 18119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - true: 35,0,0| Number of FF evals: 358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 25,0,0| Number of FF evals: 90
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 32,0,0| Number of FF evals: 255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - false: 45,0,0| Number of FF evals: 700
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - false: 12,0,0| Number of FF evals: 2751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 135,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 2790,0,0| Number of FF evals: 947
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 45,0,0| Number of FF evals: 178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 45,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 2054,0,0| Number of FF evals: 1379
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 8017,6920,0| Number of FF evals: 18160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 5730,0,0| Number of FF evals: 2090
* Search finished after 605s and 421 generations, 182554 statements, best individual has fitness: 3059.0
* Minimizing test suite
[MASTER] 13:14:59.695 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 94%
* Total number of goals: 853
* Number of covered goals: 798
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 601
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 101
* Number of covered goals: 101
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 87%
* Total number of goals: 530
* Number of covered goals: 460
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 4536
* Number of covered goals: 2049
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 213
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 714
* Number of covered goals: 556
* Generated 709 tests with total length 9087
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:16:07.110 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6798833333333333% of time used, but only 30/709 tests minimized), falling back to using all assertions
[MASTER] 13:16:26.428 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 13:16:36.323 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 13:16:39.881 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_47_1628255799840/com/google/javascript/rhino/Node_47_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_47_1628255799840/com/google/javascript/rhino/Node_47_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:39.881 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:39.881 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:39.888 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 228
[MASTER] 13:16:39.889 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_47_1628255799840/com/google/javascript/rhino/Node_47_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:39 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_47_tmp__ESTest extends Node_47_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = new Node(77);
21:       assertEquals(56, Node.CHANGE_TIME);
22:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
23:       assertEquals(47, Node.IS_DISPATCHER);
24:       assertEquals(29, Node.JSDOC_INFO_PROP);
25:       assertEquals(37, Node.OPT_ARG_NAME);
26:       assertEquals(32, Node.INCRDECR_PROP);
27:       assertEquals(51, Node.STATIC_SOURCE_FILE);
28:       assertEquals(46, Node.IS_NAMESPACE);
29:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
30:       assertEquals(43, Node.IS_CONSTANT_NAME);
31:       assertEquals(15, Node.NO_SIDE_EFFECTS);
32:       assertEquals(57, Node.LAST_PROP);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(53, Node.INPUT_ID);
35:       assertEquals(40, Node.ORIGINALNAME_PROP);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(8, Node.FLAG_NO_THROWS);
39:       assertEquals(39, Node.EMPTY_BLOCK);
40:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(48, Node.DIRECTIVES);
43:       assertEquals(57, Node.REFLECTED_OBJECT);
44:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
45:       assertEquals(55, Node.INFERRED_FUNCTION);
46:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
47:       assertEquals(52, Node.LENGTH);
48:       assertEquals(50, Node.FREE_CALL);
49:       assertEquals(36, Node.QUOTED_PROP);
50:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
51:       assertEquals(49, Node.DIRECT_EVAL);
52:       assertEquals(1, Node.DECR_FLAG);
53:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
54:       assertEquals(12, Node.COLUMN_BITS);
55:       assertEquals(4095, Node.COLUMN_MASK);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertFalse(node0.isString());
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isSwitch());
60:       assertFalse(node0.isCase());
61:       assertFalse(node0.isIn());
62:       assertEquals((-1), node0.getCharno());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isBreak());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isFor());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isGetProp());
70:       assertFalse(node0.isHook());
71:       assertFalse(node0.isInstanceOf());
72:       assertFalse(node0.isThis());
73:       assertFalse(node0.isRegExp());
74:       assertFalse(node0.isComma());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.isAnd());
77:       assertFalse(node0.isDebugger());
78:       assertFalse(node0.isObjectLit());
79:       assertFalse(node0.isNot());
80:       assertFalse(node0.isSetterDef());
81:       assertEquals(77, node0.getType());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isContinue());
84:       assertFalse(node0.isThrow());
85:       assertFalse(node0.isFunction());
86:       assertFalse(node0.isFalse());
87:       assertFalse(node0.isWhile());
88:       assertFalse(node0.isDo());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isOr());
92:       assertEquals((-1), node0.getSourcePosition());
93:       assertFalse(node0.hasChildren());
94:       assertFalse(node0.isNumber());
95:       assertFalse(node0.isNull());
96:       assertFalse(node0.isCall());
97:       assertFalse(node0.isName());
98:       assertFalse(node0.isGetElem());
99:       assertFalse(node0.hasOneChild());
100:       assertEquals((-1), node0.getLineno());
101:       assertFalse(node0.isReturn());
102:       assertFalse(node0.isCatch());
103:       assertTrue(node0.isTry());
104:       assertFalse(node0.isBlock());
105:       assertFalse(node0.hasMoreThanOneChild());
106:       assertFalse(node0.isAssign());
107:       assertFalse(node0.isTypeOf());
108:       assertFalse(node0.isDec());
109:       assertFalse(node0.isDefaultCase());
110:       assertFalse(node0.isScript());
111:       assertFalse(node0.isVoid());
112:       assertFalse(node0.isExprResult());
113:       assertFalse(node0.isTrue());
114:       assertFalse(node0.isEmpty());
115:       assertFalse(node0.isStringKey());
116:       assertFalse(node0.isParamList());
117:       assertFalse(node0.isArrayLit());
118:       assertFalse(node0.isLabelName());
119:       assertEquals(0, node0.getChildCount());
120:       assertFalse(node0.isVar());
121:       assertFalse(node0.isAssignAdd());
122:       assertFalse(node0.isLabel());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(56, Node.CHANGE_TIME);
127:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
128:       assertEquals(47, Node.IS_DISPATCHER);
129:       assertEquals(29, Node.JSDOC_INFO_PROP);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(32, Node.INCRDECR_PROP);
132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(43, Node.IS_CONSTANT_NAME);
136:       assertEquals(15, Node.NO_SIDE_EFFECTS);
137:       assertEquals(57, Node.LAST_PROP);
138:       assertEquals(54, Node.SLASH_V);
139:       assertEquals(53, Node.INPUT_ID);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(30, Node.VAR_ARGS_NAME);
143:       assertEquals(8, Node.FLAG_NO_THROWS);
144:       assertEquals(39, Node.EMPTY_BLOCK);
145:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
146:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
147:       assertEquals(48, Node.DIRECTIVES);
148:       assertEquals(57, Node.REFLECTED_OBJECT);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
152:       assertEquals(52, Node.LENGTH);
153:       assertEquals(50, Node.FREE_CALL);
154:       assertEquals(36, Node.QUOTED_PROP);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(49, Node.DIRECT_EVAL);
157:       assertEquals(1, Node.DECR_FLAG);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(12, Node.COLUMN_BITS);
160:       assertEquals(4095, Node.COLUMN_MASK);
161:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
162:       assertFalse(node0.isString());
163:       assertFalse(node0.isInc());
164:       assertFalse(node0.isSwitch());
165:       assertFalse(node0.isCase());
166:       assertFalse(node0.isIn());
167:       assertEquals((-1), node0.getCharno());
168:       assertFalse(node0.isIf());
169:       assertFalse(node0.isBreak());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isDelProp());
172:       assertFalse(node0.isFor());
173:       assertFalse(node0.isNE());
174:       assertFalse(node0.isGetProp());
175:       assertFalse(node0.isHook());
176:       assertFalse(node0.isInstanceOf());
177:       assertFalse(node0.isThis());
178:       assertFalse(node0.isRegExp());
179:       assertFalse(node0.isComma());
180:       assertFalse(node0.isWith());
181:       assertFalse(node0.isAnd());
182:       assertFalse(node0.isDebugger());
183:       assertFalse(node0.isObjectLit());
184:       assertFalse(node0.isNot());
185:       assertFalse(node0.isSetterDef());
186:       assertEquals(77, node0.getType());
187:       assertFalse(node0.isCast());
188:       assertFalse(node0.isContinue());
189:       assertFalse(node0.isThrow());
190:       assertFalse(node0.isFunction());
191:       assertFalse(node0.isFalse());
192:       assertFalse(node0.isWhile());
193:       assertFalse(node0.isDo());
194:       assertFalse(node0.isNew());
195:       assertFalse(node0.isAdd());
196:       assertFalse(node0.isOr());
197:       assertEquals((-1), node0.getSourcePosition());
198:       assertFalse(node0.hasChildren());
199:       assertFalse(node0.isNumber());
200:       assertFalse(node0.isNull());
201:       assertFalse(node0.isCall());
202:       assertFalse(node0.isName());
203:       assertFalse(node0.isGetElem());
204:       assertFalse(node0.hasOneChild());
205:       assertEquals((-1), node0.getLineno());
206:       assertFalse(node0.isReturn());
207:       assertFalse(node0.isCatch());
208:       assertTrue(node0.isTry());
209:       assertFalse(node0.isBlock());
210:       assertFalse(node0.hasMoreThanOneChild());
211:       assertFalse(node0.isAssign());
212:       assertFalse(node0.isTypeOf());
213:       assertFalse(node0.isDec());
214:       assertFalse(node0.isDefaultCase());
215:       assertFalse(node0.isScript());
216:       assertFalse(node0.isVoid());
217:       assertFalse(node0.isExprResult());
218:       assertFalse(node0.isTrue());
219:       assertFalse(node0.isEmpty());
220:       assertFalse(node0.isStringKey());
221:       assertFalse(node0.isParamList());
222:       assertFalse(node0.isArrayLit());
223:       assertFalse(node0.isLabelName());
224:       assertEquals(0, node0.getChildCount());
225:       assertFalse(node0.isVar());
226:       assertFalse(node0.isAssignAdd());
227:       assertFalse(node0.isLabel());
228:       assertFalse(iterable0.contains(node0));
229:       assertNotNull(iterable0);
230:       
231:       boolean boolean0 = node0.isReturn();
232:       assertEquals(56, Node.CHANGE_TIME);
233:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
234:       assertEquals(47, Node.IS_DISPATCHER);
235:       assertEquals(29, Node.JSDOC_INFO_PROP);
236:       assertEquals(37, Node.OPT_ARG_NAME);
237:       assertEquals(32, Node.INCRDECR_PROP);
238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
239:       assertEquals(46, Node.IS_NAMESPACE);
240:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
241:       assertEquals(43, Node.IS_CONSTANT_NAME);
242:       assertEquals(15, Node.NO_SIDE_EFFECTS);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(54, Node.SLASH_V);
245:       assertEquals(53, Node.INPUT_ID);
246:       assertEquals(40, Node.ORIGINALNAME_PROP);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(8, Node.FLAG_NO_THROWS);
250:       assertEquals(39, Node.EMPTY_BLOCK);
251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
252:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
253:       assertEquals(48, Node.DIRECTIVES);
254:       assertEquals(57, Node.REFLECTED_OBJECT);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(55, Node.INFERRED_FUNCTION);
257:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
258:       assertEquals(52, Node.LENGTH);
259:       assertEquals(50, Node.FREE_CALL);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
262:       assertEquals(49, Node.DIRECT_EVAL);
263:       assertEquals(1, Node.DECR_FLAG);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(12, Node.COLUMN_BITS);
266:       assertEquals(4095, Node.COLUMN_MASK);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertFalse(node0.isString());
269:       assertFalse(node0.isInc());
270:       assertFalse(node0.isSwitch());
271:       assertFalse(node0.isCase());
272:       assertFalse(node0.isIn());
273:       assertEquals((-1), node0.getCharno());
274:       assertFalse(node0.isIf());
275:       assertFalse(node0.isBreak());
276:       assertFalse(node0.isGetterDef());
277:       assertFalse(node0.isDelProp());
278:       assertFalse(node0.isFor());
279:       assertFalse(node0.isNE());
280:       assertFalse(node0.isGetProp());
281:       assertFalse(node0.isHook());
282:       assertFalse(node0.isInstanceOf());
283:       assertFalse(node0.isThis());
284:       assertFalse(node0.isRegExp());
285:       assertFalse(node0.isComma());
286:       assertFalse(node0.isWith());
287:       assertFalse(node0.isAnd());
288:       assertFalse(node0.isDebugger());
289:       assertFalse(node0.isObjectLit());
290:       assertFalse(node0.isNot());
291:       assertFalse(node0.isSetterDef());
292:       assertEquals(77, node0.getType());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.isContinue());
295:       assertFalse(node0.isThrow());
296:       assertFalse(node0.isFunction());
297:       assertFalse(node0.isFalse());
298:       assertFalse(node0.isWhile());
299:       assertFalse(node0.isDo());
300:       assertFalse(node0.isNew());
301:       assertFalse(node0.isAdd());
302:       assertFalse(node0.isOr());
303:       assertEquals((-1), node0.getSourcePosition());
304:       assertFalse(node0.hasChildren());
305:       assertFalse(node0.isNumber());
306:       assertFalse(node0.isNull());
307:       assertFalse(node0.isCall());
308:       assertFalse(node0.isName());
309:       assertFalse(node0.isGetElem());
310:       assertFalse(node0.hasOneChild());
311:       assertEquals((-1), node0.getLineno());
312:       assertFalse(node0.isReturn());
313:       assertFalse(node0.isCatch());
314:       assertTrue(node0.isTry());
315:       assertFalse(node0.isBlock());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isAssign());
318:       assertFalse(node0.isTypeOf());
319:       assertFalse(node0.isDec());
320:       assertFalse(node0.isDefaultCase());
321:       assertFalse(node0.isScript());
322:       assertFalse(node0.isVoid());
323:       assertFalse(node0.isExprResult());
324:       assertFalse(node0.isTrue());
325:       assertFalse(node0.isEmpty());
326:       assertFalse(node0.isStringKey());
327:       assertFalse(node0.isParamList());
328:       assertFalse(node0.isArrayLit());
329:       assertFalse(node0.isLabelName());
330:       assertEquals(0, node0.getChildCount());
331:       assertFalse(node0.isVar());
332:       assertFalse(node0.isAssignAdd());
333:       assertFalse(node0.isLabel());
334:       assertFalse(boolean0);
335:       
336:       boolean boolean1 = node0.isGetElem();
337:       assertEquals(56, Node.CHANGE_TIME);
338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
339:       assertEquals(47, Node.IS_DISPATCHER);
340:       assertEquals(29, Node.JSDOC_INFO_PROP);
341:       assertEquals(37, Node.OPT_ARG_NAME);
342:       assertEquals(32, Node.INCRDECR_PROP);
343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
344:       assertEquals(46, Node.IS_NAMESPACE);
345:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
346:       assertEquals(43, Node.IS_CONSTANT_NAME);
347:       assertEquals(15, Node.NO_SIDE_EFFECTS);
348:       assertEquals(57, Node.LAST_PROP);
349:       assertEquals(54, Node.SLASH_V);
350:       assertEquals(53, Node.INPUT_ID);
351:       assertEquals(40, Node.ORIGINALNAME_PROP);
352:       assertEquals(2, Node.POST_FLAG);
353:       assertEquals(30, Node.VAR_ARGS_NAME);
354:       assertEquals(8, Node.FLAG_NO_THROWS);
355:       assertEquals(39, Node.EMPTY_BLOCK);
356:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(48, Node.DIRECTIVES);
359:       assertEquals(57, Node.REFLECTED_OBJECT);
360:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
361:       assertEquals(55, Node.INFERRED_FUNCTION);
362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
363:       assertEquals(52, Node.LENGTH);
364:       assertEquals(50, Node.FREE_CALL);
365:       assertEquals(36, Node.QUOTED_PROP);
366:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
367:       assertEquals(49, Node.DIRECT_EVAL);
368:       assertEquals(1, Node.DECR_FLAG);
369:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
370:       assertEquals(12, Node.COLUMN_BITS);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
373:       assertFalse(node0.isString());
374:       assertFalse(node0.isInc());
375:       assertFalse(node0.isSwitch());
376:       assertFalse(node0.isCase());
377:       assertFalse(node0.isIn());
378:       assertEquals((-1), node0.getCharno());
379:       assertFalse(node0.isIf());
380:       assertFalse(node0.isBreak());
381:       assertFalse(node0.isGetterDef());
382:       assertFalse(node0.isDelProp());
383:       assertFalse(node0.isFor());
384:       assertFalse(node0.isNE());
385:       assertFalse(node0.isGetProp());
386:       assertFalse(node0.isHook());
387:       assertFalse(node0.isInstanceOf());
388:       assertFalse(node0.isThis());
389:       assertFalse(node0.isRegExp());
390:       assertFalse(node0.isComma());
391:       assertFalse(node0.isWith());
392:       assertFalse(node0.isAnd());
393:       assertFalse(node0.isDebugger());
394:       assertFalse(node0.isObjectLit());
395:       assertFalse(node0.isNot());
396:       assertFalse(node0.isSetterDef());
397:       assertEquals(77, node0.getType());
398:       assertFalse(node0.isCast());
399:       assertFalse(node0.isContinue());
400:       assertFalse(node0.isThrow());
401:       assertFalse(node0.isFunction());
402:       assertFalse(node0.isFalse());
403:       assertFalse(node0.isWhile());
404:       assertFalse(node0.isDo());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isAdd());
407:       assertFalse(node0.isOr());
408:       assertEquals((-1), node0.getSourcePosition());
409:       assertFalse(node0.hasChildren());
410:       assertFalse(node0.isNumber());
411:       assertFalse(node0.isNull());
412:       assertFalse(node0.isCall());
413:       assertFalse(node0.isName());
414:       assertFalse(node0.isGetElem());
415:       assertFalse(node0.hasOneChild());
416:       assertEquals((-1), node0.getLineno());
417:       assertFalse(node0.isReturn());
418:       assertFalse(node0.isCatch());
419:       assertTrue(node0.isTry());
420:       assertFalse(node0.isBlock());
421:       assertFalse(node0.hasMoreThanOneChild());
422:       assertFalse(node0.isAssign());
423:       assertFalse(node0.isTypeOf());
424:       assertFalse(node0.isDec());
425:       assertFalse(node0.isDefaultCase());
426:       assertFalse(node0.isScript());
427:       assertFalse(node0.isVoid());
428:       assertFalse(node0.isExprResult());
429:       assertFalse(node0.isTrue());
430:       assertFalse(node0.isEmpty());
431:       assertFalse(node0.isStringKey());
432:       assertFalse(node0.isParamList());
433:       assertFalse(node0.isArrayLit());
434:       assertFalse(node0.isLabelName());
435:       assertEquals(0, node0.getChildCount());
436:       assertFalse(node0.isVar());
437:       assertFalse(node0.isAssignAdd());
438:       assertFalse(node0.isLabel());
439:       assertTrue(boolean1 == boolean0);
440:       assertFalse(boolean1);
441:   }
442: }
RegularFileObject[/tmp/EvoSuite_47_1628255799840/com/google/javascript/rhino/Node_47_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:39 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_47_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_47_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_47_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.common.collect.AbstractMultimap$Values",
337:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
338:       "com.google.common.collect.AbstractMapBasedMultimap$1",
339:       "com.google.common.collect.Multimaps$Entries",
340:       "com.google.common.collect.AbstractMultimap$Entries",
341:       "com.google.common.collect.AbstractMapBasedMultimap$2",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.jstype.EnumType",
346:       "com.google.javascript.rhino.jstype.EnumElementType",
347:       "com.google.common.collect.Sets",
348:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
349:       "com.google.common.base.Objects",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
363:       "com.google.common.collect.Iterables",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
366:       "com.google.javascript.rhino.JSTypeExpression",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.javascript.rhino.jstype.JSType$2",
369:       "com.google.common.collect.Iterators$12",
370:       "com.google.common.collect.Platform",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 13:16:39.895 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(77);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertEquals(77, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertTrue(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertEquals(77, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertTrue(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean0 = node0.isReturn();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertEquals(77, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertTrue(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertFalse(boolean0);

boolean boolean1 = node0.isGetElem();
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isString());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertFalse(node0.isCase());
assertFalse(node0.isIn());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isGetProp());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isAnd());
assertFalse(node0.isDebugger());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isSetterDef());
assertEquals(77, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isGetElem());
assertFalse(node0.hasOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isReturn());
assertFalse(node0.isCatch());
assertTrue(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isVoid());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isEmpty());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);


[MASTER] 13:16:41.508 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1628255801382/com/google/javascript/rhino/Node_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1628255801382/com/google/javascript/rhino/Node_63_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:41.508 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:41.508 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:41.509 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 654
[MASTER] 13:16:41.510 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_63_1628255801382/com/google/javascript/rhino/Node_63_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 13:16:41.510 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 13:16:41.512 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1628255801382/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import com.google.javascript.rhino.Node;
12: import java.util.function.Consumer;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.junit.runner.RunWith;
17: 
18: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
19: public class Node_63_tmp__ESTest extends Node_63_tmp__ESTest_scaffolding {
20: 
21:   @Test(timeout = 4000)
22:   public void test0()  throws Throwable  {
23:       Node node0 = new Node(47, 47, 47);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(36, Node.QUOTED_PROP);
26:       assertEquals(53, Node.INPUT_ID);
27:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
28:       assertEquals(4095, Node.COLUMN_MASK);
29:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
30:       assertEquals(2, Node.POST_FLAG);
31:       assertEquals(37, Node.OPT_ARG_NAME);
32:       assertEquals(56, Node.CHANGE_TIME);
33:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
34:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(48, Node.DIRECTIVES);
38:       assertEquals(55, Node.INFERRED_FUNCTION);
39:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
42:       assertEquals(29, Node.JSDOC_INFO_PROP);
43:       assertEquals(52, Node.LENGTH);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
46:       assertEquals(54, Node.SLASH_V);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(49, Node.DIRECT_EVAL);
49:       assertEquals(57, Node.LAST_PROP);
50:       assertEquals(1, Node.DECR_FLAG);
51:       assertEquals(12, Node.COLUMN_BITS);
52:       assertEquals(40, Node.ORIGINALNAME_PROP);
53:       assertEquals(30, Node.VAR_ARGS_NAME);
54:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(51, Node.STATIC_SOURCE_FILE);
57:       assertEquals(46, Node.IS_NAMESPACE);
58:       assertEquals(50, Node.FREE_CALL);
59:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
60:       assertFalse(node0.isIf());
61:       assertFalse(node0.isNE());
62:       assertFalse(node0.isFor());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isArrayLit());
66:       assertFalse(node0.isFunction());
67:       assertFalse(node0.isString());
68:       assertFalse(node0.isCase());
69:       assertFalse(node0.isSwitch());
70:       assertFalse(node0.isTry());
71:       assertFalse(node0.isDebugger());
72:       assertFalse(node0.isGetterDef());
73:       assertFalse(node0.isSetterDef());
74:       assertFalse(node0.isThis());
75:       assertFalse(node0.isThrow());
76:       assertFalse(node0.isHook());
77:       assertFalse(node0.isInstanceOf());
78:       assertFalse(node0.isCatch());
79:       assertFalse(node0.isBlock());
80:       assertFalse(node0.isFalse());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isInc());
83:       assertFalse(node0.isIn());
84:       assertFalse(node0.isNumber());
85:       assertFalse(node0.hasChildren());
86:       assertFalse(node0.isDec());
87:       assertFalse(node0.isGetElem());
88:       assertFalse(node0.isLabelName());
89:       assertFalse(node0.isAssignAdd());
90:       assertTrue(node0.isRegExp());
91:       assertFalse(node0.isCast());
92:       assertFalse(node0.isReturn());
93:       assertFalse(node0.isContinue());
94:       assertFalse(node0.isLabel());
95:       assertFalse(node0.hasMoreThanOneChild());
96:       assertFalse(node0.isAssign());
97:       assertFalse(node0.isTypeOf());
98:       assertFalse(node0.isWhile());
99:       assertFalse(node0.isScript());
100:       assertFalse(node0.isAnd());
101:       assertFalse(node0.hasOneChild());
102:       assertEquals(47, node0.getType());
103:       assertFalse(node0.isNot());
104:       assertFalse(node0.isObjectLit());
105:       assertFalse(node0.isBreak());
106:       assertFalse(node0.isNull());
107:       assertFalse(node0.isStringKey());
108:       assertFalse(node0.isGetProp());
109:       assertFalse(node0.isParamList());
110:       assertFalse(node0.isName());
111:       assertEquals(0, node0.getChildCount());
112:       assertFalse(node0.isVar());
113:       assertFalse(node0.isCall());
114:       assertEquals(47, node0.getCharno());
115:       assertFalse(node0.isComma());
116:       assertFalse(node0.isDefaultCase());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isTrue());
119:       assertFalse(node0.isNew());
120:       assertEquals(192559, node0.getSourcePosition());
121:       assertEquals(47, node0.getLineno());
122:       assertFalse(node0.isDo());
123:       assertFalse(node0.isVoid());
124:       assertFalse(node0.isAdd());
125:       assertFalse(node0.isOr());
126:       assertNotNull(node0);
127:       
128:       Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
129:       assertEquals(43, Node.IS_CONSTANT_NAME);
130:       assertEquals(36, Node.QUOTED_PROP);
131:       assertEquals(53, Node.INPUT_ID);
132:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
133:       assertEquals(4095, Node.COLUMN_MASK);
134:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
135:       assertEquals(2, Node.POST_FLAG);
136:       assertEquals(37, Node.OPT_ARG_NAME);
137:       assertEquals(56, Node.CHANGE_TIME);
138:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
139:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(39, Node.EMPTY_BLOCK);
142:       assertEquals(48, Node.DIRECTIVES);
143:       assertEquals(55, Node.INFERRED_FUNCTION);
144:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
147:       assertEquals(29, Node.JSDOC_INFO_PROP);
148:       assertEquals(52, Node.LENGTH);
149:       assertEquals(8, Node.FLAG_NO_THROWS);
150:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
151:       assertEquals(54, Node.SLASH_V);
152:       assertEquals(15, Node.NO_SIDE_EFFECTS);
153:       assertEquals(49, Node.DIRECT_EVAL);
154:       assertEquals(57, Node.LAST_PROP);
155:       assertEquals(1, Node.DECR_FLAG);
156:       assertEquals(12, Node.COLUMN_BITS);
157:       assertEquals(40, Node.ORIGINALNAME_PROP);
158:       assertEquals(30, Node.VAR_ARGS_NAME);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
162:       assertEquals(46, Node.IS_NAMESPACE);
163:       assertEquals(50, Node.FREE_CALL);
164:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
165:       assertFalse(node0.isIf());
166:       assertFalse(node0.isNE());
167:       assertFalse(node0.isFor());
168:       assertFalse(node0.isEmpty());
169:       assertFalse(node0.isDelProp());
170:       assertFalse(node0.isArrayLit());
171:       assertFalse(node0.isFunction());
172:       assertFalse(node0.isString());
173:       assertFalse(node0.isCase());
174:       assertFalse(node0.isSwitch());
175:       assertFalse(node0.isTry());
176:       assertFalse(node0.isDebugger());
177:       assertFalse(node0.isGetterDef());
178:       assertFalse(node0.isSetterDef());
179:       assertFalse(node0.isThis());
180:       assertFalse(node0.isThrow());
181:       assertFalse(node0.isHook());
182:       assertFalse(node0.isInstanceOf());
183:       assertFalse(node0.isCatch());
184:       assertFalse(node0.isBlock());
185:       assertFalse(node0.isFalse());
186:       assertFalse(node0.isWith());
187:       assertFalse(node0.isInc());
188:       assertFalse(node0.isIn());
189:       assertFalse(node0.isNumber());
190:       assertFalse(node0.hasChildren());
191:       assertFalse(node0.isDec());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isLabelName());
194:       assertFalse(node0.isAssignAdd());
195:       assertTrue(node0.isRegExp());
196:       assertFalse(node0.isCast());
197:       assertFalse(node0.isReturn());
198:       assertFalse(node0.isContinue());
199:       assertFalse(node0.isLabel());
200:       assertFalse(node0.hasMoreThanOneChild());
201:       assertFalse(node0.isAssign());
202:       assertFalse(node0.isTypeOf());
203:       assertFalse(node0.isWhile());
204:       assertFalse(node0.isScript());
205:       assertFalse(node0.isAnd());
206:       assertFalse(node0.hasOneChild());
207:       assertEquals(47, node0.getType());
208:       assertFalse(node0.isNot());
209:       assertFalse(node0.isObjectLit());
210:       assertFalse(node0.isBreak());
211:       assertFalse(node0.isNull());
212:       assertFalse(node0.isStringKey());
213:       assertFalse(node0.isGetProp());
214:       assertFalse(node0.isParamList());
215:       assertFalse(node0.isName());
216:       assertEquals(0, node0.getChildCount());
217:       assertFalse(node0.isVar());
218:       assertFalse(node0.isCall());
219:       assertEquals(47, node0.getCharno());
220:       assertFalse(node0.isComma());
221:       assertFalse(node0.isDefaultCase());
222:       assertFalse(node0.isExprResult());
223:       assertFalse(node0.isTrue());
224:       assertFalse(node0.isNew());
225:       assertEquals(192559, node0.getSourcePosition());
226:       assertEquals(47, node0.getLineno());
227:       assertFalse(node0.isDo());
228:       assertFalse(node0.isVoid());
229:       assertFalse(node0.isAdd());
230:       assertFalse(node0.isOr());
231:       assertNotNull(node_AncestorIterable0);
232:       
233:       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
234:       node0.setType(47);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(36, Node.QUOTED_PROP);
237:       assertEquals(53, Node.INPUT_ID);
238:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
239:       assertEquals(4095, Node.COLUMN_MASK);
240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
241:       assertEquals(2, Node.POST_FLAG);
242:       assertEquals(37, Node.OPT_ARG_NAME);
243:       assertEquals(56, Node.CHANGE_TIME);
244:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
245:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(48, Node.DIRECTIVES);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
251:       assertEquals(57, Node.REFLECTED_OBJECT);
252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
253:       assertEquals(29, Node.JSDOC_INFO_PROP);
254:       assertEquals(52, Node.LENGTH);
255:       assertEquals(8, Node.FLAG_NO_THROWS);
256:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
257:       assertEquals(54, Node.SLASH_V);
258:       assertEquals(15, Node.NO_SIDE_EFFECTS);
259:       assertEquals(49, Node.DIRECT_EVAL);
260:       assertEquals(57, Node.LAST_PROP);
261:       assertEquals(1, Node.DECR_FLAG);
262:       assertEquals(12, Node.COLUMN_BITS);
263:       assertEquals(40, Node.ORIGINALNAME_PROP);
264:       assertEquals(30, Node.VAR_ARGS_NAME);
265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
266:       assertEquals(32, Node.INCRDECR_PROP);
267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
268:       assertEquals(46, Node.IS_NAMESPACE);
269:       assertEquals(50, Node.FREE_CALL);
270:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
271:       assertFalse(node0.isIf());
272:       assertFalse(node0.isNE());
273:       assertFalse(node0.isFor());
274:       assertFalse(node0.isEmpty());
275:       assertFalse(node0.isDelProp());
276:       assertFalse(node0.isArrayLit());
277:       assertFalse(node0.isFunction());
278:       assertFalse(node0.isString());
279:       assertFalse(node0.isCase());
280:       assertFalse(node0.isSwitch());
281:       assertFalse(node0.isTry());
282:       assertFalse(node0.isDebugger());
283:       assertFalse(node0.isGetterDef());
284:       assertFalse(node0.isSetterDef());
285:       assertFalse(node0.isThis());
286:       assertFalse(node0.isThrow());
287:       assertFalse(node0.isHook());
288:       assertFalse(node0.isInstanceOf());
289:       assertFalse(node0.isCatch());
290:       assertFalse(node0.isBlock());
291:       assertFalse(node0.isFalse());
292:       assertFalse(node0.isWith());
293:       assertFalse(node0.isInc());
294:       assertFalse(node0.isIn());
295:       assertFalse(node0.isNumber());
296:       assertFalse(node0.hasChildren());
297:       assertFalse(node0.isDec());
298:       assertFalse(node0.isGetElem());
299:       assertFalse(node0.isLabelName());
300:       assertFalse(node0.isAssignAdd());
301:       assertTrue(node0.isRegExp());
302:       assertFalse(node0.isCast());
303:       assertFalse(node0.isReturn());
304:       assertFalse(node0.isContinue());
305:       assertFalse(node0.isLabel());
306:       assertFalse(node0.hasMoreThanOneChild());
307:       assertFalse(node0.isAssign());
308:       assertFalse(node0.isTypeOf());
309:       assertFalse(node0.isWhile());
310:       assertFalse(node0.isScript());
311:       assertFalse(node0.isAnd());
312:       assertFalse(node0.hasOneChild());
313:       assertEquals(47, node0.getType());
314:       assertFalse(node0.isNot());
315:       assertFalse(node0.isObjectLit());
316:       assertFalse(node0.isBreak());
317:       assertFalse(node0.isNull());
318:       assertFalse(node0.isStringKey());
319:       assertFalse(node0.isGetProp());
320:       assertFalse(node0.isParamList());
321:       assertFalse(node0.isName());
322:       assertEquals(0, node0.getChildCount());
323:       assertFalse(node0.isVar());
324:       assertFalse(node0.isCall());
325:       assertEquals(47, node0.getCharno());
326:       assertFalse(node0.isComma());
327:       assertFalse(node0.isDefaultCase());
328:       assertFalse(node0.isExprResult());
329:       assertFalse(node0.isTrue());
330:       assertFalse(node0.isNew());
331:       assertEquals(192559, node0.getSourcePosition());
332:       assertEquals(47, node0.getLineno());
333:       assertFalse(node0.isDo());
334:       assertFalse(node0.isVoid());
335:       assertFalse(node0.isAdd());
336:       assertFalse(node0.isOr());
337:       
338:       node_AncestorIterable0.forEach(consumer0);
339:       assertEquals(43, Node.IS_CONSTANT_NAME);
340:       assertEquals(36, Node.QUOTED_PROP);
341:       assertEquals(53, Node.INPUT_ID);
342:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
343:       assertEquals(4095, Node.COLUMN_MASK);
344:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
345:       assertEquals(2, Node.POST_FLAG);
346:       assertEquals(37, Node.OPT_ARG_NAME);
347:       assertEquals(56, Node.CHANGE_TIME);
348:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
349:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
350:       assertEquals(47, Node.IS_DISPATCHER);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(48, Node.DIRECTIVES);
353:       assertEquals(55, Node.INFERRED_FUNCTION);
354:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
355:       assertEquals(57, Node.REFLECTED_OBJECT);
356:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
357:       assertEquals(29, Node.JSDOC_INFO_PROP);
358:       assertEquals(52, Node.LENGTH);
359:       assertEquals(8, Node.FLAG_NO_THROWS);
360:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
361:       assertEquals(54, Node.SLASH_V);
362:       assertEquals(15, Node.NO_SIDE_EFFECTS);
363:       assertEquals(49, Node.DIRECT_EVAL);
364:       assertEquals(57, Node.LAST_PROP);
365:       assertEquals(1, Node.DECR_FLAG);
366:       assertEquals(12, Node.COLUMN_BITS);
367:       assertEquals(40, Node.ORIGINALNAME_PROP);
368:       assertEquals(30, Node.VAR_ARGS_NAME);
369:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
370:       assertEquals(32, Node.INCRDECR_PROP);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       assertEquals(46, Node.IS_NAMESPACE);
373:       assertEquals(50, Node.FREE_CALL);
374:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
375:       assertFalse(node0.isIf());
376:       assertFalse(node0.isNE());
377:       assertFalse(node0.isFor());
378:       assertFalse(node0.isEmpty());
379:       assertFalse(node0.isDelProp());
380:       assertFalse(node0.isArrayLit());
381:       assertFalse(node0.isFunction());
382:       assertFalse(node0.isString());
383:       assertFalse(node0.isCase());
384:       assertFalse(node0.isSwitch());
385:       assertFalse(node0.isTry());
386:       assertFalse(node0.isDebugger());
387:       assertFalse(node0.isGetterDef());
388:       assertFalse(node0.isSetterDef());
389:       assertFalse(node0.isThis());
390:       assertFalse(node0.isThrow());
391:       assertFalse(node0.isHook());
392:       assertFalse(node0.isInstanceOf());
393:       assertFalse(node0.isCatch());
394:       assertFalse(node0.isBlock());
395:       assertFalse(node0.isFalse());
396:       assertFalse(node0.isWith());
397:       assertFalse(node0.isInc());
398:       assertFalse(node0.isIn());
399:       assertFalse(node0.isNumber());
400:       assertFalse(node0.hasChildren());
401:       assertFalse(node0.isDec());
402:       assertFalse(node0.isGetElem());
403:       assertFalse(node0.isLabelName());
404:       assertFalse(node0.isAssignAdd());
405:       assertTrue(node0.isRegExp());
406:       assertFalse(node0.isCast());
407:       assertFalse(node0.isReturn());
408:       assertFalse(node0.isContinue());
409:       assertFalse(node0.isLabel());
410:       assertFalse(node0.hasMoreThanOneChild());
411:       assertFalse(node0.isAssign());
412:       assertFalse(node0.isTypeOf());
413:       assertFalse(node0.isWhile());
414:       assertFalse(node0.isScript());
415:       assertFalse(node0.isAnd());
416:       assertFalse(node0.hasOneChild());
417:       assertEquals(47, node0.getType());
418:       assertFalse(node0.isNot());
419:       assertFalse(node0.isObjectLit());
420:       assertFalse(node0.isBreak());
421:       assertFalse(node0.isNull());
422:       assertFalse(node0.isStringKey());
423:       assertFalse(node0.isGetProp());
424:       assertFalse(node0.isParamList());
425:       assertFalse(node0.isName());
426:       assertEquals(0, node0.getChildCount());
427:       assertFalse(node0.isVar());
428:       assertFalse(node0.isCall());
429:       assertEquals(47, node0.getCharno());
430:       assertFalse(node0.isComma());
431:       assertFalse(node0.isDefaultCase());
432:       assertFalse(node0.isExprResult());
433:       assertFalse(node0.isTrue());
434:       assertFalse(node0.isNew());
435:       assertEquals(192559, node0.getSourcePosition());
436:       assertEquals(47, node0.getLineno());
437:       assertFalse(node0.isDo());
438:       assertFalse(node0.isVoid());
439:       assertFalse(node0.isAdd());
440:       assertFalse(node0.isOr());
441:       
442:       Consumer<Node> consumer1 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
443:       Node node1 = new Node(46);
444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
445:       assertEquals(43, Node.IS_CONSTANT_NAME);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
448:       assertEquals(4095, Node.COLUMN_MASK);
449:       assertEquals(48, Node.DIRECTIVES);
450:       assertEquals(37, Node.OPT_ARG_NAME);
451:       assertEquals(8, Node.FLAG_NO_THROWS);
452:       assertEquals(2, Node.POST_FLAG);
453:       assertEquals(56, Node.CHANGE_TIME);
454:       assertEquals(47, Node.IS_DISPATCHER);
455:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
456:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
457:       assertEquals(15, Node.NO_SIDE_EFFECTS);
458:       assertEquals(55, Node.INFERRED_FUNCTION);
459:       assertEquals(39, Node.EMPTY_BLOCK);
460:       assertEquals(29, Node.JSDOC_INFO_PROP);
461:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
462:       assertEquals(53, Node.INPUT_ID);
463:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
464:       assertEquals(52, Node.LENGTH);
465:       assertEquals(57, Node.LAST_PROP);
466:       assertEquals(57, Node.REFLECTED_OBJECT);
467:       assertEquals(54, Node.SLASH_V);
468:       assertEquals(30, Node.VAR_ARGS_NAME);
469:       assertEquals(49, Node.DIRECT_EVAL);
470:       assertEquals(40, Node.ORIGINALNAME_PROP);
471:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
472:       assertEquals(32, Node.INCRDECR_PROP);
473:       assertEquals(51, Node.STATIC_SOURCE_FILE);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(46, Node.IS_NAMESPACE);
476:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertEquals(50, Node.FREE_CALL);
479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
480:       assertFalse(node1.isGetterDef());
481:       assertFalse(node1.isDelProp());
482:       assertFalse(node1.isIf());
483:       assertFalse(node1.isFor());
484:       assertFalse(node1.isNE());
485:       assertFalse(node1.isArrayLit());
486:       assertFalse(node1.isDebugger());
487:       assertFalse(node1.isSwitch());
488:       assertEquals((-1), node1.getCharno());
489:       assertFalse(node1.isRegExp());
490:       assertFalse(node1.isTry());
491:       assertFalse(node1.isHook());
492:       assertFalse(node1.isCase());
493:       assertFalse(node1.isString());
494:       assertFalse(node1.isSetterDef());
495:       assertFalse(node1.isThis());
496:       assertFalse(node1.isThrow());
497:       assertFalse(node1.isAnd());
498:       assertFalse(node1.isFalse());
499:       assertFalse(node1.isWith());
500:       assertFalse(node1.isInstanceOf());
501:       assertFalse(node1.isCatch());
502:       assertFalse(node1.isFunction());
503:       assertFalse(node1.isInc());
504:       assertFalse(node1.isIn());
505:       assertFalse(node1.isNumber());
506:       assertEquals((-1), node1.getSourcePosition());
507:       assertFalse(node1.isTypeOf());
508:       assertFalse(node1.isDec());
509:       assertFalse(node1.isOr());
510:       assertFalse(node1.isReturn());
511:       assertFalse(node1.isLabel());
512:       assertFalse(node1.hasChildren());
513:       assertFalse(node1.isAssignAdd());
514:       assertFalse(node1.isContinue());
515:       assertFalse(node1.hasMoreThanOneChild());
516:       assertFalse(node1.isLabelName());
517:       assertFalse(node1.isAssign());
518:       assertEquals((-1), node1.getLineno());
519:       assertFalse(node1.isGetElem());
520:       assertFalse(node1.isCast());
521:       assertFalse(node1.isWhile());
522:       assertFalse(node1.isBlock());
523:       assertFalse(node1.isObjectLit());
524:       assertFalse(node1.hasOneChild());
525:       assertFalse(node1.isNot());
526:       assertFalse(node1.isScript());
527:       assertFalse(node1.isParamList());
528:       assertFalse(node1.isComma());
529:       assertFalse(node1.isGetProp());
530:       assertFalse(node1.isStringKey());
531:       assertFalse(node1.isNull());
532:       assertFalse(node1.isCall());
533:       assertFalse(node1.isName());
534:       assertEquals(0, node1.getChildCount());
535:       assertFalse(node1.isBreak());
536:       assertFalse(node1.isExprResult());
537:       assertFalse(node1.isTrue());
538:       assertFalse(node1.isNew());
539:       assertFalse(node1.isVoid());
540:       assertFalse(node1.isDefaultCase());
541:       assertFalse(node1.isVar());
542:       assertFalse(node1.isDo());
543:       assertEquals(46, node1.getType());
544:       assertFalse(node1.isAdd());
545:       assertFalse(node1.isEmpty());
546:       assertFalse(node1.equals((Object)node0));
547:       assertNotNull(node1);
548:       
549:       Iterable<Node> iterable0 = node0.children();
550:       assertEquals(43, Node.IS_CONSTANT_NAME);
551:       assertEquals(36, Node.QUOTED_PROP);
552:       assertEquals(53, Node.INPUT_ID);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(4095, Node.COLUMN_MASK);
555:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
556:       assertEquals(2, Node.POST_FLAG);
557:       assertEquals(37, Node.OPT_ARG_NAME);
558:       assertEquals(56, Node.CHANGE_TIME);
559:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
560:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
561:       assertEquals(47, Node.IS_DISPATCHER);
562:       assertEquals(39, Node.EMPTY_BLOCK);
563:       assertEquals(48, Node.DIRECTIVES);
564:       assertEquals(55, Node.INFERRED_FUNCTION);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(57, Node.REFLECTED_OBJECT);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(29, Node.JSDOC_INFO_PROP);
569:       assertEquals(52, Node.LENGTH);
570:       assertEquals(8, Node.FLAG_NO_THROWS);
571:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
572:       assertEquals(54, Node.SLASH_V);
573:       assertEquals(15, Node.NO_SIDE_EFFECTS);
574:       assertEquals(49, Node.DIRECT_EVAL);
575:       assertEquals(57, Node.LAST_PROP);
576:       assertEquals(1, Node.DECR_FLAG);
577:       assertEquals(12, Node.COLUMN_BITS);
578:       assertEquals(40, Node.ORIGINALNAME_PROP);
579:       assertEquals(30, Node.VAR_ARGS_NAME);
580:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
581:       assertEquals(32, Node.INCRDECR_PROP);
582:       assertEquals(51, Node.STATIC_SOURCE_FILE);
583:       assertEquals(46, Node.IS_NAMESPACE);
584:       assertEquals(50, Node.FREE_CALL);
585:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
586:       assertFalse(node0.isIf());
587:       assertFalse(node0.isNE());
588:       assertFalse(node0.isFor());
589:       assertFalse(node0.isEmpty());
590:       assertFalse(node0.isDelProp());
591:       assertFalse(node0.isArrayLit());
592:       assertFalse(node0.isFunction());
593:       assertFalse(node0.isString());
594:       assertFalse(node0.isCase());
595:       assertFalse(node0.isSwitch());
596:       assertFalse(node0.isTry());
597:       assertFalse(node0.isDebugger());
598:       assertFalse(node0.isGetterDef());
599:       assertFalse(node0.isSetterDef());
600:       assertFalse(node0.isThis());
601:       assertFalse(node0.isThrow());
602:       assertFalse(node0.isHook());
603:       assertFalse(node0.isInstanceOf());
604:       assertFalse(node0.isCatch());
605:       assertFalse(node0.isBlock());
606:       assertFalse(node0.isFalse());
607:       assertFalse(node0.isWith());
608:       assertFalse(node0.isInc());
609:       assertFalse(node0.isIn());
610:       assertFalse(node0.isNumber());
611:       assertFalse(node0.hasChildren());
612:       assertFalse(node0.isDec());
613:       assertFalse(node0.isGetElem());
614:       assertFalse(node0.isLabelName());
615:       assertFalse(node0.isAssignAdd());
616:       assertTrue(node0.isRegExp());
617:       assertFalse(node0.isCast());
618:       assertFalse(node0.isReturn());
619:       assertFalse(node0.isContinue());
620:       assertFalse(node0.isLabel());
621:       assertFalse(node0.hasMoreThanOneChild());
622:       assertFalse(node0.isAssign());
623:       assertFalse(node0.isTypeOf());
624:       assertFalse(node0.isWhile());
625:       assertFalse(node0.isScript());
626:       assertFalse(node0.isAnd());
627:       assertFalse(node0.hasOneChild());
628:       assertEquals(47, node0.getType());
629:       assertFalse(node0.isNot());
630:       assertFalse(node0.isObjectLit());
631:       assertFalse(node0.isBreak());
632:       assertFalse(node0.isNull());
633:       assertFalse(node0.isStringKey());
634:       assertFalse(node0.isGetProp());
635:       assertFalse(node0.isParamList());
636:       assertFalse(node0.isName());
637:       assertEquals(0, node0.getChildCount());
638:       assertFalse(node0.isVar());
639:       assertFalse(node0.isCall());
640:       assertEquals(47, node0.getCharno());
641:       assertFalse(node0.isComma());
642:       assertFalse(node0.isDefaultCase());
643:       assertFalse(node0.isExprResult());
644:       assertFalse(node0.isTrue());
645:       assertFalse(node0.isNew());
646:       assertEquals(192559, node0.getSourcePosition());
647:       assertEquals(47, node0.getLineno());
648:       assertFalse(node0.isDo());
649:       assertFalse(node0.isVoid());
650:       assertFalse(node0.isAdd());
651:       assertFalse(node0.isOr());
652:       assertNotSame(node0, node1);
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(iterable0.contains(node0));
655:       assertNotNull(iterable0);
656:       
657:       boolean boolean0 = node0.isReturn();
658:       assertEquals(43, Node.IS_CONSTANT_NAME);
659:       assertEquals(36, Node.QUOTED_PROP);
660:       assertEquals(53, Node.INPUT_ID);
661:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
662:       assertEquals(4095, Node.COLUMN_MASK);
663:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
664:       assertEquals(2, Node.POST_FLAG);
665:       assertEquals(37, Node.OPT_ARG_NAME);
666:       assertEquals(56, Node.CHANGE_TIME);
667:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
668:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
669:       assertEquals(47, Node.IS_DISPATCHER);
670:       assertEquals(39, Node.EMPTY_BLOCK);
671:       assertEquals(48, Node.DIRECTIVES);
672:       assertEquals(55, Node.INFERRED_FUNCTION);
673:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
674:       assertEquals(57, Node.REFLECTED_OBJECT);
675:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
676:       assertEquals(29, Node.JSDOC_INFO_PROP);
677:       assertEquals(52, Node.LENGTH);
678:       assertEquals(8, Node.FLAG_NO_THROWS);
679:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
680:       assertEquals(54, Node.SLASH_V);
681:       assertEquals(15, Node.NO_SIDE_EFFECTS);
682:       assertEquals(49, Node.DIRECT_EVAL);
683:       assertEquals(57, Node.LAST_PROP);
684:       assertEquals(1, Node.DECR_FLAG);
685:       assertEquals(12, Node.COLUMN_BITS);
686:       assertEquals(40, Node.ORIGINALNAME_PROP);
687:       assertEquals(30, Node.VAR_ARGS_NAME);
688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
689:       assertEquals(32, Node.INCRDECR_PROP);
690:       assertEquals(51, Node.STATIC_SOURCE_FILE);
691:       assertEquals(46, Node.IS_NAMESPACE);
692:       assertEquals(50, Node.FREE_CALL);
693:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
694:       assertFalse(node0.isIf());
695:       assertFalse(node0.isNE());
696:       assertFalse(node0.isFor());
697:       assertFalse(node0.isEmpty());
698:       assertFalse(node0.isDelProp());
699:       assertFalse(node0.isArrayLit());
700:       assertFalse(node0.isFunction());
701:       assertFalse(node0.isString());
702:       assertFalse(node0.isCase());
703:       assertFalse(node0.isSwitch());
704:       assertFalse(node0.isTry());
705:       assertFalse(node0.isDebugger());
706:       assertFalse(node0.isGetterDef());
707:       assertFalse(node0.isSetterDef());
708:       assertFalse(node0.isThis());
709:       assertFalse(node0.isThrow());
710:       assertFalse(node0.isHook());
711:       assertFalse(node0.isInstanceOf());
712:       assertFalse(node0.isCatch());
713:       assertFalse(node0.isBlock());
714:       assertFalse(node0.isFalse());
715:       assertFalse(node0.isWith());
716:       assertFalse(node0.isInc());
717:       assertFalse(node0.isIn());
718:       assertFalse(node0.isNumber());
719:       assertFalse(node0.hasChildren());
720:       assertFalse(node0.isDec());
721:       assertFalse(node0.isGetElem());
722:       assertFalse(node0.isLabelName());
723:       assertFalse(node0.isAssignAdd());
724:       assertTrue(node0.isRegExp());
725:       assertFalse(node0.isCast());
726:       assertFalse(node0.isReturn());
727:       assertFalse(node0.isContinue());
728:       assertFalse(node0.isLabel());
729:       assertFalse(node0.hasMoreThanOneChild());
730:       assertFalse(node0.isAssign());
731:       assertFalse(node0.isTypeOf());
732:       assertFalse(node0.isWhile());
733:       assertFalse(node0.isScript());
734:       assertFalse(node0.isAnd());
735:       assertFalse(node0.hasOneChild());
736:       assertEquals(47, node0.getType());
737:       assertFalse(node0.isNot());
738:       assertFalse(node0.isObjectLit());
739:       assertFalse(node0.isBreak());
740:       assertFalse(node0.isNull());
741:       assertFalse(node0.isStringKey());
742:       assertFalse(node0.isGetProp());
743:       assertFalse(node0.isParamList());
744:       assertFalse(node0.isName());
745:       assertEquals(0, node0.getChildCount());
746:       assertFalse(node0.isVar());
747:       assertFalse(node0.isCall());
748:       assertEquals(47, node0.getCharno());
749:       assertFalse(node0.isComma());
750:       assertFalse(node0.isDefaultCase());
751:       assertFalse(node0.isExprResult());
752:       assertFalse(node0.isTrue());
753:       assertFalse(node0.isNew());
754:       assertEquals(192559, node0.getSourcePosition());
755:       assertEquals(47, node0.getLineno());
756:       assertFalse(node0.isDo());
757:       assertFalse(node0.isVoid());
758:       assertFalse(node0.isAdd());
759:       assertFalse(node0.isOr());
760:       assertNotSame(node0, node1);
761:       assertFalse(node0.equals((Object)node1));
762:       assertFalse(boolean0);
763:       
764:       boolean boolean1 = node0.isGetElem();
765:       assertEquals(43, Node.IS_CONSTANT_NAME);
766:       assertEquals(36, Node.QUOTED_PROP);
767:       assertEquals(53, Node.INPUT_ID);
768:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
769:       assertEquals(4095, Node.COLUMN_MASK);
770:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
771:       assertEquals(2, Node.POST_FLAG);
772:       assertEquals(37, Node.OPT_ARG_NAME);
773:       assertEquals(56, Node.CHANGE_TIME);
774:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
775:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(39, Node.EMPTY_BLOCK);
778:       assertEquals(48, Node.DIRECTIVES);
779:       assertEquals(55, Node.INFERRED_FUNCTION);
780:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
781:       assertEquals(57, Node.REFLECTED_OBJECT);
782:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
783:       assertEquals(29, Node.JSDOC_INFO_PROP);
784:       assertEquals(52, Node.LENGTH);
785:       assertEquals(8, Node.FLAG_NO_THROWS);
786:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
787:       assertEquals(54, Node.SLASH_V);
788:       assertEquals(15, Node.NO_SIDE_EFFECTS);
789:       assertEquals(49, Node.DIRECT_EVAL);
790:       assertEquals(57, Node.LAST_PROP);
791:       assertEquals(1, Node.DECR_FLAG);
792:       assertEquals(12, Node.COLUMN_BITS);
793:       assertEquals(40, Node.ORIGINALNAME_PROP);
794:       assertEquals(30, Node.VAR_ARGS_NAME);
795:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
796:       assertEquals(32, Node.INCRDECR_PROP);
797:       assertEquals(51, Node.STATIC_SOURCE_FILE);
798:       assertEquals(46, Node.IS_NAMESPACE);
799:       assertEquals(50, Node.FREE_CALL);
800:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
801:       assertFalse(node0.isIf());
802:       assertFalse(node0.isNE());
803:       assertFalse(node0.isFor());
804:       assertFalse(node0.isEmpty());
805:       assertFalse(node0.isDelProp());
806:       assertFalse(node0.isArrayLit());
807:       assertFalse(node0.isFunction());
808:       assertFalse(node0.isString());
809:       assertFalse(node0.isCase());
810:       assertFalse(node0.isSwitch());
811:       assertFalse(node0.isTry());
812:       assertFalse(node0.isDebugger());
813:       assertFalse(node0.isGetterDef());
814:       assertFalse(node0.isSetterDef());
815:       assertFalse(node0.isThis());
816:       assertFalse(node0.isThrow());
817:       assertFalse(node0.isHook());
818:       assertFalse(node0.isInstanceOf());
819:       assertFalse(node0.isCatch());
820:       assertFalse(node0.isBlock());
821:       assertFalse(node0.isFalse());
822:       assertFalse(node0.isWith());
823:       assertFalse(node0.isInc());
824:       assertFalse(node0.isIn());
825:       assertFalse(node0.isNumber());
826:       assertFalse(node0.hasChildren());
827:       assertFalse(node0.isDec());
828:       assertFalse(node0.isGetElem());
829:       assertFalse(node0.isLabelName());
830:       assertFalse(node0.isAssignAdd());
831:       assertTrue(node0.isRegExp());
832:       assertFalse(node0.isCast());
833:       assertFalse(node0.isReturn());
834:       assertFalse(node0.isContinue());
835:       assertFalse(node0.isLabel());
836:       assertFalse(node0.hasMoreThanOneChild());
837:       assertFalse(node0.isAssign());
838:       assertFalse(node0.isTypeOf());
839:       assertFalse(node0.isWhile());
840:       assertFalse(node0.isScript());
841:       assertFalse(node0.isAnd());
842:       assertFalse(node0.hasOneChild());
843:       assertEquals(47, node0.getType());
844:       assertFalse(node0.isNot());
845:       assertFalse(node0.isObjectLit());
846:       assertFalse(node0.isBreak());
847:       assertFalse(node0.isNull());
848:       assertFalse(node0.isStringKey());
849:       assertFalse(node0.isGetProp());
850:       assertFalse(node0.isParamList());
851:       assertFalse(node0.isName());
852:       assertEquals(0, node0.getChildCount());
853:       assertFalse(node0.isVar());
854:       assertFalse(node0.isCall());
855:       assertEquals(47, node0.getCharno());
856:       assertFalse(node0.isComma());
857:       assertFalse(node0.isDefaultCase());
858:       assertFalse(node0.isExprResult());
859:       assertFalse(node0.isTrue());
860:       assertFalse(node0.isNew());
861:       assertEquals(192559, node0.getSourcePosition());
862:       assertEquals(47, node0.getLineno());
863:       assertFalse(node0.isDo());
864:       assertFalse(node0.isVoid());
865:       assertFalse(node0.isAdd());
866:       assertFalse(node0.isOr());
867:       assertNotSame(node0, node1);
868:       assertFalse(node0.equals((Object)node1));
869:       assertTrue(boolean1 == boolean0);
870:       assertFalse(boolean1);
871:       
872:       boolean boolean2 = node0.isTrue();
873:       assertEquals(43, Node.IS_CONSTANT_NAME);
874:       assertEquals(36, Node.QUOTED_PROP);
875:       assertEquals(53, Node.INPUT_ID);
876:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
877:       assertEquals(4095, Node.COLUMN_MASK);
878:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
879:       assertEquals(2, Node.POST_FLAG);
880:       assertEquals(37, Node.OPT_ARG_NAME);
881:       assertEquals(56, Node.CHANGE_TIME);
882:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
883:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
884:       assertEquals(47, Node.IS_DISPATCHER);
885:       assertEquals(39, Node.EMPTY_BLOCK);
886:       assertEquals(48, Node.DIRECTIVES);
887:       assertEquals(55, Node.INFERRED_FUNCTION);
888:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
889:       assertEquals(57, Node.REFLECTED_OBJECT);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(29, Node.JSDOC_INFO_PROP);
892:       assertEquals(52, Node.LENGTH);
893:       assertEquals(8, Node.FLAG_NO_THROWS);
894:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
895:       assertEquals(54, Node.SLASH_V);
896:       assertEquals(15, Node.NO_SIDE_EFFECTS);
897:       assertEquals(49, Node.DIRECT_EVAL);
898:       assertEquals(57, Node.LAST_PROP);
899:       assertEquals(1, Node.DECR_FLAG);
900:       assertEquals(12, Node.COLUMN_BITS);
901:       assertEquals(40, Node.ORIGINALNAME_PROP);
902:       assertEquals(30, Node.VAR_ARGS_NAME);
903:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
904:       assertEquals(32, Node.INCRDECR_PROP);
905:       assertEquals(51, Node.STATIC_SOURCE_FILE);
906:       assertEquals(46, Node.IS_NAMESPACE);
907:       assertEquals(50, Node.FREE_CALL);
908:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
909:       assertFalse(node0.isIf());
910:       assertFalse(node0.isNE());
911:       assertFalse(node0.isFor());
912:       assertFalse(node0.isEmpty());
913:       assertFalse(node0.isDelProp());
914:       assertFalse(node0.isArrayLit());
915:       assertFalse(node0.isFunction());
916:       assertFalse(node0.isString());
917:       assertFalse(node0.isCase());
918:       assertFalse(node0.isSwitch());
919:       assertFalse(node0.isTry());
920:       assertFalse(node0.isDebugger());
921:       assertFalse(node0.isGetterDef());
922:       assertFalse(node0.isSetterDef());
923:       assertFalse(node0.isThis());
924:       assertFalse(node0.isThrow());
925:       assertFalse(node0.isHook());
926:       assertFalse(node0.isInstanceOf());
927:       assertFalse(node0.isCatch());
928:       assertFalse(node0.isBlock());
929:       assertFalse(node0.isFalse());
930:       assertFalse(node0.isWith());
931:       assertFalse(node0.isInc());
932:       assertFalse(node0.isIn());
933:       assertFalse(node0.isNumber());
934:       assertFalse(node0.hasChildren());
935:       assertFalse(node0.isDec());
936:       assertFalse(node0.isGetElem());
937:       assertFalse(node0.isLabelName());
938:       assertFalse(node0.isAssignAdd());
939:       assertTrue(node0.isRegExp());
940:       assertFalse(node0.isCast());
941:       assertFalse(node0.isReturn());
942:       assertFalse(node0.isContinue());
943:       assertFalse(node0.isLabel());
944:       assertFalse(node0.hasMoreThanOneChild());
945:       assertFalse(node0.isAssign());
946:       assertFalse(node0.isTypeOf());
947:       assertFalse(node0.isWhile());
948:       assertFalse(node0.isScript());
949:       assertFalse(node0.isAnd());
950:       assertFalse(node0.hasOneChild());
951:       assertEquals(47, node0.getType());
952:       assertFalse(node0.isNot());
953:       assertFalse(node0.isObjectLit());
954:       assertFalse(node0.isBreak());
955:       assertFalse(node0.isNull());
956:       assertFalse(node0.isStringKey());
957:       assertFalse(node0.isGetProp());
958:       assertFalse(node0.isParamList());
959:       assertFalse(node0.isName());
960:       assertEquals(0, node0.getChildCount());
961:       assertFalse(node0.isVar());
962:       assertFalse(node0.isCall());
963:       assertEquals(47, node0.getCharno());
964:       assertFalse(node0.isComma());
965:       assertFalse(node0.isDefaultCase());
966:       assertFalse(node0.isExprResult());
967:       assertFalse(node0.isTrue());
968:       assertFalse(node0.isNew());
969:       assertEquals(192559, node0.getSourcePosition());
970:       assertEquals(47, node0.getLineno());
971:       assertFalse(node0.isDo());
972:       assertFalse(node0.isVoid());
973:       assertFalse(node0.isAdd());
974:       assertFalse(node0.isOr());
975:       assertNotSame(node0, node1);
976:       assertFalse(node0.equals((Object)node1));
977:       assertTrue(boolean2 == boolean0);
978:       assertTrue(boolean2 == boolean1);
979:       assertFalse(boolean2);
980:   }
981: }
RegularFileObject[/tmp/EvoSuite_63_1628255801382/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Node_63_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "com.google.common.collect.ArrayListMultimap",
72:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
73:       "com.google.common.collect.ImmutableList$SubList",
74:       "com.google.javascript.rhino.jstype.NoType",
75:       "com.google.javascript.rhino.JSDocInfo$Visibility",
76:       "com.google.common.collect.ListMultimap",
77:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
78:       "com.google.javascript.rhino.jstype.ArrowType",
79:       "com.google.javascript.rhino.SimpleErrorReporter",
80:       "com.google.common.collect.Lists$RandomAccessPartition",
81:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
82:       "com.google.common.collect.Collections2",
83:       "com.google.javascript.rhino.jstype.NumberType",
84:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
85:       "com.google.common.collect.PeekingIterator",
86:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
87:       "com.google.common.collect.RegularImmutableList",
88:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.common.collect.Lists$TransformingRandomAccessList",
92:       "com.google.javascript.rhino.Node$PropListItem",
93:       "com.google.javascript.rhino.Node$IntPropListItem",
94:       "com.google.common.collect.Sets$2",
95:       "com.google.common.collect.Maps$KeySet",
96:       "com.google.common.collect.Sets$3",
97:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
98:       "com.google.common.collect.LinkedHashMultimap",
99:       "com.google.javascript.rhino.Node",
100:       "com.google.javascript.rhino.jstype.ObjectType",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$Marker",
104:       "com.google.common.collect.RegularImmutableMap",
105:       "com.google.common.collect.RegularImmutableBiMap",
106:       "com.google.javascript.rhino.Node$NodeMismatch",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.common.collect.SortedMapDifference",
109:       "com.google.javascript.rhino.jstype.ModificationVisitor",
110:       "com.google.javascript.rhino.jstype.PropertyMap$1",
111:       "com.google.common.collect.AbstractMapEntry",
112:       "com.google.javascript.rhino.Node$AncestorIterable$1",
113:       "com.google.common.collect.Iterators$12",
114:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
115:       "com.google.common.collect.Iterators$11",
116:       "com.google.javascript.rhino.jstype.JSType$1",
117:       "com.google.common.collect.EmptyImmutableBiMap",
118:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
119:       "com.google.common.base.Predicate",
120:       "com.google.common.collect.AbstractMapBasedMultimap$1",
121:       "com.google.common.collect.AbstractMapBasedMultimap$2",
122:       "com.google.javascript.rhino.jstype.VoidType",
123:       "com.google.common.base.Joiner",
124:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
125:       "com.google.common.collect.AbstractListMultimap",
126:       "com.google.javascript.rhino.jstype.JSType",
127:       "com.google.common.collect.ImmutableAsList",
128:       "com.google.javascript.rhino.Node$StringNode",
129:       "com.google.common.collect.AbstractMultimap$Values",
130:       "com.google.javascript.rhino.jstype.ProxyObjectType",
131:       "com.google.common.collect.Sets$SetView",
132:       "com.google.common.collect.RegularImmutableAsList",
133:       "com.google.javascript.rhino.jstype.TemplateType",
134:       "com.google.javascript.rhino.jstype.NamedType",
135:       "com.google.common.collect.Iterators$13",
136:       "com.google.javascript.rhino.InputId",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
176:       "com.google.common.base.Joiner$1",
177:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
178:       "com.google.common.base.Joiner$2",
179:       "com.google.common.collect.ImmutableCollection",
180:       "com.google.common.collect.ImmutableEnumMap",
181:       "com.google.javascript.rhino.jstype.TernaryValue",
182:       "com.google.javascript.rhino.Node$AncestorIterable",
183:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
184:       "com.google.common.collect.Lists$RandomAccessListWrapper",
185:       "com.google.common.collect.ImmutableEnumSet",
186:       "com.google.common.collect.AbstractMultimap$Entries",
187:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
188:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
189:       "com.google.javascript.rhino.jstype.EnumElementType",
190:       "com.google.javascript.rhino.jstype.UnionType",
191:       "com.google.common.base.Objects",
192:       "com.google.javascript.rhino.Node$NumberNode",
193:       "com.google.common.collect.SingletonImmutableList",
194:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
195:       "com.google.common.collect.ImmutableCollection$Builder",
196:       "com.google.javascript.rhino.jstype.StaticSlot",
197:       "com.google.common.collect.Iterators$6",
198:       "com.google.common.collect.BiMap",
199:       "com.google.common.collect.Iterators$7",
200:       "com.google.common.collect.AbstractSetMultimap",
201:       "com.google.common.base.Function",
202:       "com.google.common.collect.ImmutableSet",
203:       "com.google.common.collect.Lists$AbstractListWrapper",
204:       "com.google.common.collect.ImmutableMap",
205:       "com.google.common.collect.AbstractIndexedListIterator",
206:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
207:       "com.google.common.collect.Maps$1",
208:       "com.google.javascript.rhino.jstype.EnumType",
209:       "com.google.common.collect.Iterators$1",
210:       "com.google.common.collect.Iterators$2",
211:       "com.google.javascript.rhino.jstype.NamespaceType",
212:       "com.google.common.collect.Iterators$3",
213:       "com.google.common.collect.Sets",
214:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
215:       "com.google.javascript.rhino.Node$ObjectPropListItem",
216:       "com.google.common.collect.Lists$StringAsImmutableList",
217:       "com.google.common.collect.Lists$2",
218:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
219:       "com.google.common.collect.ImmutableList$Builder",
220:       "com.google.common.collect.Lists$1",
221:       "com.google.javascript.rhino.jstype.StaticReference",
222:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
223:       "com.google.common.collect.Multiset",
224:       "com.google.common.collect.Multimaps$Entries",
225:       "com.google.common.collect.AbstractMultimap",
226:       "com.google.common.collect.Multimap",
227:       "com.google.common.collect.Iterators",
228:       "com.google.common.collect.Maps$ImprovedAbstractMap",
229:       "com.google.common.collect.ImmutableBiMap",
230:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
231:       "com.google.common.collect.ImmutableList",
232:       "com.google.common.collect.SingletonImmutableBiMap",
233:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
234:       "com.google.javascript.rhino.jstype.StringType",
235:       "com.google.javascript.rhino.Node$AbstractPropListItem",
236:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
237:       "com.google.javascript.rhino.jstype.TemplatizedType",
238:       "com.google.javascript.rhino.jstype.Visitor",
239:       "com.google.javascript.rhino.jstype.NoResolvedType",
240:       "com.google.javascript.rhino.jstype.JSTypeNative",
241:       "com.google.javascript.rhino.jstype.AllType",
242:       "com.google.common.collect.Maps",
243:       "com.google.common.collect.SetMultimap",
244:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
245:       "com.google.common.collect.Maps$EntryTransformer",
246:       "com.google.javascript.rhino.JSTypeExpression",
247:       "com.google.common.collect.Iterators$MergingIterator"
248:     );
249:   } 
250:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
251:     mock(Class.forName("java.util.function.Consumer", false, Node_63_tmp__ESTest_scaffolding.class.getClassLoader()));
252:   }
253: 
254:   private static void resetClasses() {
255:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
256: 
257:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
258:       "com.google.javascript.rhino.Node",
259:       "com.google.javascript.rhino.Node$NumberNode",
260:       "com.google.javascript.rhino.Node$StringNode",
261:       "com.google.javascript.rhino.Node$AbstractPropListItem",
262:       "com.google.javascript.rhino.Node$ObjectPropListItem",
263:       "com.google.javascript.rhino.Node$IntPropListItem",
264:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
265:       "com.google.javascript.rhino.Node$AncestorIterable",
266:       "com.google.javascript.rhino.Node$NodeMismatch",
267:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
268:       "com.google.javascript.rhino.Node$SideEffectFlags",
269:       "com.google.javascript.rhino.Token",
270:       "com.google.javascript.rhino.SimpleErrorReporter",
271:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
272:       "com.google.common.base.Joiner",
273:       "com.google.common.base.Preconditions",
274:       "com.google.common.base.Joiner$1",
275:       "com.google.common.collect.Collections2",
276:       "com.google.common.base.Joiner$MapJoiner",
277:       "com.google.common.collect.Maps",
278:       "com.google.common.collect.AbstractMultimap",
279:       "com.google.common.collect.AbstractMapBasedMultimap",
280:       "com.google.common.collect.AbstractSetMultimap",
281:       "com.google.common.collect.LinkedHashMultimap",
282:       "com.google.common.collect.AbstractMapEntry",
283:       "com.google.common.collect.ImmutableEntry",
284:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
285:       "com.google.common.collect.AbstractListMultimap",
286:       "com.google.common.collect.ArrayListMultimap",
287:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
288:       "com.google.common.collect.ImmutableCollection",
289:       "com.google.common.collect.RegularImmutableList",
290:       "com.google.common.collect.ObjectArrays",
291:       "com.google.common.collect.ImmutableList",
292:       "com.google.javascript.rhino.jstype.ModificationVisitor",
293:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
294:       "com.google.common.collect.ImmutableCollection$Builder",
295:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
296:       "com.google.common.collect.ImmutableList$Builder",
297:       "com.google.common.collect.UnmodifiableIterator",
298:       "com.google.common.collect.UnmodifiableListIterator",
299:       "com.google.common.collect.Iterators$1",
300:       "com.google.common.collect.Iterators$2",
301:       "com.google.common.collect.Iterators",
302:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
303:       "com.google.javascript.rhino.jstype.JSType$1",
304:       "com.google.javascript.rhino.jstype.JSType",
305:       "com.google.javascript.rhino.jstype.ObjectType",
306:       "com.google.javascript.rhino.jstype.ProxyObjectType",
307:       "com.google.javascript.rhino.jstype.TemplateType",
308:       "com.google.javascript.rhino.jstype.ValueType",
309:       "com.google.javascript.rhino.jstype.BooleanType",
310:       "com.google.javascript.rhino.jstype.NullType",
311:       "com.google.javascript.rhino.jstype.NumberType",
312:       "com.google.javascript.rhino.jstype.StringType",
313:       "com.google.javascript.rhino.jstype.UnknownType",
314:       "com.google.javascript.rhino.jstype.VoidType",
315:       "com.google.javascript.rhino.jstype.AllType",
316:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
317:       "com.google.common.collect.ImmutableMap",
318:       "com.google.common.collect.ImmutableBiMap",
319:       "com.google.common.collect.EmptyImmutableBiMap",
320:       "com.google.javascript.rhino.jstype.PropertyMap$1",
321:       "com.google.javascript.rhino.jstype.PropertyMap",
322:       "com.google.javascript.rhino.jstype.FunctionType",
323:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
324:       "com.google.javascript.rhino.jstype.ArrowType",
325:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
326:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
327:       "com.google.javascript.rhino.jstype.InstanceObjectType",
328:       "com.google.javascript.rhino.jstype.Property",
329:       "com.google.common.collect.Lists",
330:       "com.google.javascript.rhino.jstype.NoObjectType",
331:       "com.google.javascript.rhino.jstype.NoType",
332:       "com.google.javascript.rhino.jstype.NoResolvedType",
333:       "com.google.common.collect.SingletonImmutableList",
334:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
335:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
336:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
337:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
338:       "com.google.javascript.rhino.jstype.UnionType",
339:       "com.google.javascript.rhino.jstype.FunctionBuilder",
340:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
341:       "com.google.common.collect.AbstractMultimap$Values",
342:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
343:       "com.google.common.collect.AbstractMapBasedMultimap$1",
344:       "com.google.common.collect.Multimaps$Entries",
345:       "com.google.common.collect.AbstractMultimap$Entries",
346:       "com.google.common.collect.AbstractMapBasedMultimap$2",
347:       "com.google.javascript.rhino.JSDocInfo",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
349:       "com.google.javascript.rhino.Node$AncestorIterable$1",
350:       "com.google.javascript.rhino.jstype.EnumType",
351:       "com.google.javascript.rhino.jstype.EnumElementType",
352:       "com.google.common.collect.Sets",
353:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
354:       "com.google.common.base.Objects",
355:       "com.google.javascript.rhino.jstype.NamedType",
356:       "com.google.javascript.rhino.jstype.TemplatizedType",
357:       "com.google.javascript.rhino.InputId",
358:       "com.google.common.collect.AbstractIndexedListIterator",
359:       "com.google.common.collect.Iterators$11",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.common.collect.ImmutableSet",
366:       "com.google.common.collect.EmptyImmutableSet",
367:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
368:       "com.google.common.collect.Iterables",
369:       "com.google.javascript.rhino.jstype.TernaryValue",
370:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
371:       "com.google.javascript.rhino.JSTypeExpression",
372:       "com.google.javascript.rhino.jstype.JSType$TypePair",
373:       "com.google.javascript.rhino.jstype.JSType$2",
374:       "com.google.common.collect.Iterators$12",
375:       "com.google.common.collect.Platform",
376:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
377:     );
378:   }
379: }

[MASTER] 13:16:41.546 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(47, 47, 47);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertEquals(47, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(192559, node0.getSourcePosition());
assertEquals(47, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNotNull(node0);

Node.AncestorIterable node_AncestorIterable0 = node0.getAncestors();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertEquals(47, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(192559, node0.getSourcePosition());
assertEquals(47, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNotNull(node_AncestorIterable0);

Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
node0.setType(47);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertEquals(47, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(192559, node0.getSourcePosition());
assertEquals(47, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

node_AncestorIterable0.forEach(consumer0);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertEquals(47, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(192559, node0.getSourcePosition());
assertEquals(47, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());

Consumer<Node> consumer1 = (Consumer<Node>) mock(Consumer.class, new ViolatedAssumptionAnswer());
Node node1 = new Node(46);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.isGetterDef());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isRegExp());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isSetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isAnd());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.isOr());
assertFalse(node1.isReturn());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isObjectLit());
assertFalse(node1.hasOneChild());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertEquals(46, node1.getType());
assertFalse(node1.isAdd());
assertFalse(node1.isEmpty());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);

Iterable<Node> iterable0 = node0.children();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertEquals(47, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(192559, node0.getSourcePosition());
assertEquals(47, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean0 = node0.isReturn();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertEquals(47, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(192559, node0.getSourcePosition());
assertEquals(47, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean0);

boolean boolean1 = node0.isGetElem();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertEquals(47, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(192559, node0.getSourcePosition());
assertEquals(47, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

boolean boolean2 = node0.isTrue();
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFunction());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isHook());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.isBlock());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertTrue(node0.isRegExp());
assertFalse(node0.isCast());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isWhile());
assertFalse(node0.isScript());
assertFalse(node0.isAnd());
assertFalse(node0.hasOneChild());
assertEquals(47, node0.getType());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isBreak());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isGetProp());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(47, node0.getCharno());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isTrue());
assertFalse(node0.isNew());
assertEquals(192559, node0.getSourcePosition());
assertEquals(47, node0.getLineno());
assertFalse(node0.isDo());
assertFalse(node0.isVoid());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(boolean2);


[MASTER] 13:16:41.715 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_65_1628255801686/com/google/javascript/rhino/Node_65_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_65_1628255801686/com/google/javascript/rhino/Node_65_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:41.715 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:41.715 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:41.716 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 231
[MASTER] 13:16:41.716 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_65_1628255801686/com/google/javascript/rhino/Node_65_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:41 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.ArrayList;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_65_tmp__ESTest extends Node_65_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = new Node(77);
22:       assertEquals(15, Node.NO_SIDE_EFFECTS);
23:       assertEquals(57, Node.LAST_PROP);
24:       assertEquals(30, Node.VAR_ARGS_NAME);
25:       assertEquals(49, Node.DIRECT_EVAL);
26:       assertEquals(52, Node.LENGTH);
27:       assertEquals(51, Node.STATIC_SOURCE_FILE);
28:       assertEquals(57, Node.REFLECTED_OBJECT);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(54, Node.SLASH_V);
31:       assertEquals(47, Node.IS_DISPATCHER);
32:       assertEquals(8, Node.FLAG_NO_THROWS);
33:       assertEquals(2, Node.POST_FLAG);
34:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
35:       assertEquals(40, Node.ORIGINALNAME_PROP);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(29, Node.JSDOC_INFO_PROP);
38:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
39:       assertEquals(43, Node.IS_CONSTANT_NAME);
40:       assertEquals(36, Node.QUOTED_PROP);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
43:       assertEquals(55, Node.INFERRED_FUNCTION);
44:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
45:       assertEquals(56, Node.CHANGE_TIME);
46:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
47:       assertEquals(37, Node.OPT_ARG_NAME);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(50, Node.FREE_CALL);
50:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
51:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
52:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
53:       assertEquals(12, Node.COLUMN_BITS);
54:       assertEquals(4095, Node.COLUMN_MASK);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertFalse(node0.isBreak());
59:       assertFalse(node0.isComma());
60:       assertFalse(node0.isFalse());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isAnd());
63:       assertEquals((-1), node0.getCharno());
64:       assertFalse(node0.isSwitch());
65:       assertFalse(node0.isString());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isCase());
68:       assertFalse(node0.isNot());
69:       assertFalse(node0.isObjectLit());
70:       assertFalse(node0.isExprResult());
71:       assertFalse(node0.isScript());
72:       assertFalse(node0.isInstanceOf());
73:       assertFalse(node0.isHook());
74:       assertFalse(node0.hasOneChild());
75:       assertTrue(node0.isTry());
76:       assertFalse(node0.isThis());
77:       assertFalse(node0.isGetterDef());
78:       assertFalse(node0.isDelProp());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isNumber());
81:       assertFalse(node0.isLabelName());
82:       assertFalse(node0.isAssign());
83:       assertFalse(node0.isTypeOf());
84:       assertFalse(node0.isDec());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isEmpty());
87:       assertFalse(node0.isArrayLit());
88:       assertFalse(node0.isOr());
89:       assertFalse(node0.isVoid());
90:       assertFalse(node0.isTrue());
91:       assertFalse(node0.isDefaultCase());
92:       assertFalse(node0.isDo());
93:       assertFalse(node0.isAdd());
94:       assertFalse(node0.isLabel());
95:       assertEquals(0, node0.getChildCount());
96:       assertFalse(node0.isNew());
97:       assertFalse(node0.isVar());
98:       assertFalse(node0.isAssignAdd());
99:       assertFalse(node0.isName());
100:       assertFalse(node0.isCall());
101:       assertFalse(node0.isSetterDef());
102:       assertFalse(node0.isNull());
103:       assertFalse(node0.isStringKey());
104:       assertFalse(node0.isParamList());
105:       assertFalse(node0.isWhile());
106:       assertFalse(node0.isRegExp());
107:       assertFalse(node0.hasMoreThanOneChild());
108:       assertFalse(node0.isCatch());
109:       assertFalse(node0.isReturn());
110:       assertFalse(node0.isBlock());
111:       assertFalse(node0.isFor());
112:       assertFalse(node0.isIf());
113:       assertEquals((-1), node0.getSourcePosition());
114:       assertFalse(node0.isCast());
115:       assertFalse(node0.isIn());
116:       assertEquals((-1), node0.getLineno());
117:       assertFalse(node0.isDebugger());
118:       assertFalse(node0.isNE());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isFunction());
121:       assertFalse(node0.isInc());
122:       assertEquals(77, node0.getType());
123:       assertFalse(node0.isThrow());
124:       assertNotNull(node0);
125:       
126:       node0.setLineno(77);
127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
128:       assertEquals(57, Node.LAST_PROP);
129:       assertEquals(30, Node.VAR_ARGS_NAME);
130:       assertEquals(49, Node.DIRECT_EVAL);
131:       assertEquals(52, Node.LENGTH);
132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(54, Node.SLASH_V);
136:       assertEquals(47, Node.IS_DISPATCHER);
137:       assertEquals(8, Node.FLAG_NO_THROWS);
138:       assertEquals(2, Node.POST_FLAG);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(39, Node.EMPTY_BLOCK);
142:       assertEquals(29, Node.JSDOC_INFO_PROP);
143:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
144:       assertEquals(43, Node.IS_CONSTANT_NAME);
145:       assertEquals(36, Node.QUOTED_PROP);
146:       assertEquals(53, Node.INPUT_ID);
147:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
148:       assertEquals(55, Node.INFERRED_FUNCTION);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(56, Node.CHANGE_TIME);
151:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
152:       assertEquals(37, Node.OPT_ARG_NAME);
153:       assertEquals(48, Node.DIRECTIVES);
154:       assertEquals(50, Node.FREE_CALL);
155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
158:       assertEquals(12, Node.COLUMN_BITS);
159:       assertEquals(4095, Node.COLUMN_MASK);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertFalse(node0.isBreak());
164:       assertFalse(node0.isComma());
165:       assertFalse(node0.isFalse());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isAnd());
168:       assertFalse(node0.isSwitch());
169:       assertFalse(node0.isString());
170:       assertFalse(node0.isWith());
171:       assertFalse(node0.isCase());
172:       assertFalse(node0.isNot());
173:       assertFalse(node0.isObjectLit());
174:       assertFalse(node0.isExprResult());
175:       assertFalse(node0.isScript());
176:       assertFalse(node0.isInstanceOf());
177:       assertFalse(node0.isHook());
178:       assertEquals(77, node0.getLineno());
179:       assertFalse(node0.hasOneChild());
180:       assertTrue(node0.isTry());
181:       assertFalse(node0.isThis());
182:       assertFalse(node0.isGetterDef());
183:       assertFalse(node0.isDelProp());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isNumber());
186:       assertFalse(node0.isLabelName());
187:       assertFalse(node0.isAssign());
188:       assertFalse(node0.isTypeOf());
189:       assertFalse(node0.isDec());
190:       assertFalse(node0.isGetElem());
191:       assertFalse(node0.isEmpty());
192:       assertFalse(node0.isArrayLit());
193:       assertFalse(node0.isOr());
194:       assertFalse(node0.isVoid());
195:       assertFalse(node0.isTrue());
196:       assertFalse(node0.isDefaultCase());
197:       assertFalse(node0.isDo());
198:       assertFalse(node0.isAdd());
199:       assertEquals(315392, node0.getSourcePosition());
200:       assertFalse(node0.isLabel());
201:       assertEquals(0, node0.getChildCount());
202:       assertFalse(node0.isNew());
203:       assertFalse(node0.isVar());
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.isName());
206:       assertFalse(node0.isCall());
207:       assertFalse(node0.isSetterDef());
208:       assertFalse(node0.isNull());
209:       assertFalse(node0.isStringKey());
210:       assertFalse(node0.isParamList());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.isRegExp());
213:       assertFalse(node0.hasMoreThanOneChild());
214:       assertFalse(node0.isCatch());
215:       assertFalse(node0.isReturn());
216:       assertFalse(node0.isBlock());
217:       assertFalse(node0.isFor());
218:       assertFalse(node0.isIf());
219:       assertFalse(node0.isCast());
220:       assertFalse(node0.isIn());
221:       assertFalse(node0.isDebugger());
222:       assertEquals(0, node0.getCharno());
223:       assertFalse(node0.isNE());
224:       assertFalse(node0.isContinue());
225:       assertFalse(node0.isFunction());
226:       assertFalse(node0.isInc());
227:       assertEquals(77, node0.getType());
228:       assertFalse(node0.isThrow());
229:       
230:       Iterable<Node> iterable0 = new ArrayList<Node>(54);
231:       assertFalse(iterable0.contains(node0));
232:       assertNotNull(iterable0);
233:       
234:       boolean boolean0 = node0.isFunction();
235:       assertEquals(15, Node.NO_SIDE_EFFECTS);
236:       assertEquals(57, Node.LAST_PROP);
237:       assertEquals(30, Node.VAR_ARGS_NAME);
238:       assertEquals(49, Node.DIRECT_EVAL);
239:       assertEquals(52, Node.LENGTH);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(57, Node.REFLECTED_OBJECT);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(47, Node.IS_DISPATCHER);
245:       assertEquals(8, Node.FLAG_NO_THROWS);
246:       assertEquals(2, Node.POST_FLAG);
247:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
248:       assertEquals(40, Node.ORIGINALNAME_PROP);
249:       assertEquals(39, Node.EMPTY_BLOCK);
250:       assertEquals(29, Node.JSDOC_INFO_PROP);
251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
252:       assertEquals(43, Node.IS_CONSTANT_NAME);
253:       assertEquals(36, Node.QUOTED_PROP);
254:       assertEquals(53, Node.INPUT_ID);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(55, Node.INFERRED_FUNCTION);
257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
260:       assertEquals(37, Node.OPT_ARG_NAME);
261:       assertEquals(48, Node.DIRECTIVES);
262:       assertEquals(50, Node.FREE_CALL);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(4095, Node.COLUMN_MASK);
268:       assertEquals(32, Node.INCRDECR_PROP);
269:       assertEquals(1, Node.DECR_FLAG);
270:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
271:       assertFalse(node0.isBreak());
272:       assertFalse(node0.isComma());
273:       assertFalse(node0.isFalse());
274:       assertFalse(node0.isGetProp());
275:       assertFalse(node0.isAnd());
276:       assertFalse(node0.isSwitch());
277:       assertFalse(node0.isString());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isCase());
280:       assertFalse(node0.isNot());
281:       assertFalse(node0.isObjectLit());
282:       assertFalse(node0.isExprResult());
283:       assertFalse(node0.isScript());
284:       assertFalse(node0.isInstanceOf());
285:       assertFalse(node0.isHook());
286:       assertEquals(77, node0.getLineno());
287:       assertFalse(node0.hasOneChild());
288:       assertTrue(node0.isTry());
289:       assertFalse(node0.isThis());
290:       assertFalse(node0.isGetterDef());
291:       assertFalse(node0.isDelProp());
292:       assertFalse(node0.hasChildren());
293:       assertFalse(node0.isNumber());
294:       assertFalse(node0.isLabelName());
295:       assertFalse(node0.isAssign());
296:       assertFalse(node0.isTypeOf());
297:       assertFalse(node0.isDec());
298:       assertFalse(node0.isGetElem());
299:       assertFalse(node0.isEmpty());
300:       assertFalse(node0.isArrayLit());
301:       assertFalse(node0.isOr());
302:       assertFalse(node0.isVoid());
303:       assertFalse(node0.isTrue());
304:       assertFalse(node0.isDefaultCase());
305:       assertFalse(node0.isDo());
306:       assertFalse(node0.isAdd());
307:       assertEquals(315392, node0.getSourcePosition());
308:       assertFalse(node0.isLabel());
309:       assertEquals(0, node0.getChildCount());
310:       assertFalse(node0.isNew());
311:       assertFalse(node0.isVar());
312:       assertFalse(node0.isAssignAdd());
313:       assertFalse(node0.isName());
314:       assertFalse(node0.isCall());
315:       assertFalse(node0.isSetterDef());
316:       assertFalse(node0.isNull());
317:       assertFalse(node0.isStringKey());
318:       assertFalse(node0.isParamList());
319:       assertFalse(node0.isWhile());
320:       assertFalse(node0.isRegExp());
321:       assertFalse(node0.hasMoreThanOneChild());
322:       assertFalse(node0.isCatch());
323:       assertFalse(node0.isReturn());
324:       assertFalse(node0.isBlock());
325:       assertFalse(node0.isFor());
326:       assertFalse(node0.isIf());
327:       assertFalse(node0.isCast());
328:       assertFalse(node0.isIn());
329:       assertFalse(node0.isDebugger());
330:       assertEquals(0, node0.getCharno());
331:       assertFalse(node0.isNE());
332:       assertFalse(node0.isContinue());
333:       assertFalse(node0.isFunction());
334:       assertFalse(node0.isInc());
335:       assertEquals(77, node0.getType());
336:       assertFalse(node0.isThrow());
337:       assertFalse(boolean0);
338:   }
339: }
RegularFileObject[/tmp/EvoSuite_65_1628255801686/com/google/javascript/rhino/Node_65_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:41 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_65_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_65_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_65_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.common.collect.AbstractMultimap$Values",
337:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
338:       "com.google.common.collect.AbstractMapBasedMultimap$1",
339:       "com.google.common.collect.Multimaps$Entries",
340:       "com.google.common.collect.AbstractMultimap$Entries",
341:       "com.google.common.collect.AbstractMapBasedMultimap$2",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.jstype.EnumType",
346:       "com.google.javascript.rhino.jstype.EnumElementType",
347:       "com.google.common.collect.Sets",
348:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
349:       "com.google.common.base.Objects",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
363:       "com.google.common.collect.Iterables",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
366:       "com.google.javascript.rhino.JSTypeExpression",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.javascript.rhino.jstype.JSType$2",
369:       "com.google.common.collect.Iterators$12",
370:       "com.google.common.collect.Platform",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 13:16:41.720 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(77);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertTrue(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isDebugger());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals(77, node0.getType());
assertFalse(node0.isThrow());
assertNotNull(node0);

node0.setLineno(77);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(77, node0.getLineno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(315392, node0.getSourcePosition());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals(77, node0.getType());
assertFalse(node0.isThrow());

Iterable<Node> iterable0 = new ArrayList<Node>(54);
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean0 = node0.isFunction();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isBreak());
assertFalse(node0.isComma());
assertFalse(node0.isFalse());
assertFalse(node0.isGetProp());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isString());
assertFalse(node0.isWith());
assertFalse(node0.isCase());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(77, node0.getLineno());
assertFalse(node0.hasOneChild());
assertTrue(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isGetElem());
assertFalse(node0.isEmpty());
assertFalse(node0.isArrayLit());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertEquals(315392, node0.getSourcePosition());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isName());
assertFalse(node0.isCall());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isWhile());
assertFalse(node0.isRegExp());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isIn());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertFalse(node0.isNE());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.isInc());
assertEquals(77, node0.getType());
assertFalse(node0.isThrow());
assertFalse(boolean0);


[MASTER] 13:16:46.082 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_98_1628255806054/com/google/javascript/rhino/Node_98_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_98_1628255806054/com/google/javascript/rhino/Node_98_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:46.082 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:46.082 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:46.083 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 233
[MASTER] 13:16:46.083 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_98_1628255806054/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:46 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import java.util.HashSet;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_98_tmp__ESTest extends Node_98_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber((-3534.7645668836735), (-316), (-316));
22:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
23:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
24:       assertEquals(53, Node.INPUT_ID);
25:       assertEquals(47, Node.IS_DISPATCHER);
26:       assertEquals(2, Node.POST_FLAG);
27:       assertEquals(32, Node.INCRDECR_PROP);
28:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
29:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
30:       assertEquals(50, Node.FREE_CALL);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(43, Node.IS_CONSTANT_NAME);
33:       assertEquals(51, Node.STATIC_SOURCE_FILE);
34:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
35:       assertEquals(54, Node.SLASH_V);
36:       assertEquals(52, Node.LENGTH);
37:       assertEquals(15, Node.NO_SIDE_EFFECTS);
38:       assertEquals(40, Node.ORIGINALNAME_PROP);
39:       assertEquals(1, Node.DECR_FLAG);
40:       assertEquals(30, Node.VAR_ARGS_NAME);
41:       assertEquals(57, Node.LAST_PROP);
42:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
43:       assertEquals(12, Node.COLUMN_BITS);
44:       assertEquals(48, Node.DIRECTIVES);
45:       assertEquals(37, Node.OPT_ARG_NAME);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
48:       assertEquals(4095, Node.COLUMN_MASK);
49:       assertEquals(55, Node.INFERRED_FUNCTION);
50:       assertEquals(29, Node.JSDOC_INFO_PROP);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
53:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
54:       assertEquals(49, Node.DIRECT_EVAL);
55:       assertEquals(56, Node.CHANGE_TIME);
56:       assertEquals(36, Node.QUOTED_PROP);
57:       assertEquals(57, Node.REFLECTED_OBJECT);
58:       assertFalse(node0.isGetterDef());
59:       assertFalse(node0.isDelProp());
60:       assertTrue(node0.isNumber());
61:       assertFalse(node0.isIn());
62:       assertFalse(node0.isEmpty());
63:       assertFalse(node0.isFor());
64:       assertFalse(node0.isInc());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isRegExp());
67:       assertFalse(node0.isVoid());
68:       assertFalse(node0.isIf());
69:       assertFalse(node0.isNE());
70:       assertFalse(node0.isTrue());
71:       assertFalse(node0.isParamList());
72:       assertFalse(node0.isThis());
73:       assertFalse(node0.isInstanceOf());
74:       assertFalse(node0.isCatch());
75:       assertEquals(0, node0.getChildCount());
76:       assertFalse(node0.isBlock());
77:       assertFalse(node0.isHook());
78:       assertFalse(node0.isVar());
79:       assertFalse(node0.isSwitch());
80:       assertEquals((-1), node0.getCharno());
81:       assertFalse(node0.isTry());
82:       assertFalse(node0.isCase());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isStringKey());
87:       assertEquals((-1), node0.getSourcePosition());
88:       assertFalse(node0.isDec());
89:       assertFalse(node0.isTypeOf());
90:       assertFalse(node0.isOr());
91:       assertEquals((-1), node0.getLineno());
92:       assertFalse(node0.isGetElem());
93:       assertFalse(node0.isCast());
94:       assertFalse(node0.hasMoreThanOneChild());
95:       assertFalse(node0.isContinue());
96:       assertFalse(node0.hasOneChild());
97:       assertFalse(node0.isAssign());
98:       assertFalse(node0.isDo());
99:       assertFalse(node0.isWhile());
100:       assertFalse(node0.isReturn());
101:       assertEquals(39, node0.getType());
102:       assertFalse(node0.isLabel());
103:       assertFalse(node0.hasChildren());
104:       assertFalse(node0.isAssignAdd());
105:       assertFalse(node0.isNew());
106:       assertFalse(node0.isWith());
107:       assertFalse(node0.isExprResult());
108:       assertFalse(node0.isAdd());
109:       assertFalse(node0.isName());
110:       assertFalse(node0.isNull());
111:       assertFalse(node0.isSetterDef());
112:       assertFalse(node0.isComma());
113:       assertFalse(node0.isBreak());
114:       assertFalse(node0.isGetProp());
115:       assertFalse(node0.isCall());
116:       assertFalse(node0.isFalse());
117:       assertFalse(node0.isThrow());
118:       assertFalse(node0.isFunction());
119:       assertFalse(node0.isDebugger());
120:       assertFalse(node0.isString());
121:       assertFalse(node0.isAnd());
122:       assertFalse(node0.isObjectLit());
123:       assertFalse(node0.isNot());
124:       assertNotNull(node0);
125:       
126:       Node node1 = new Node(2560);
127:       assertEquals(29, Node.JSDOC_INFO_PROP);
128:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
129:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(43, Node.IS_CONSTANT_NAME);
133:       assertEquals(51, Node.STATIC_SOURCE_FILE);
134:       assertEquals(36, Node.QUOTED_PROP);
135:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
136:       assertEquals(46, Node.IS_NAMESPACE);
137:       assertEquals(56, Node.CHANGE_TIME);
138:       assertEquals(49, Node.DIRECT_EVAL);
139:       assertEquals(1, Node.DECR_FLAG);
140:       assertEquals(4095, Node.COLUMN_MASK);
141:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
142:       assertEquals(32, Node.INCRDECR_PROP);
143:       assertEquals(12, Node.COLUMN_BITS);
144:       assertEquals(50, Node.FREE_CALL);
145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
146:       assertEquals(8, Node.FLAG_NO_THROWS);
147:       assertEquals(39, Node.EMPTY_BLOCK);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(52, Node.LENGTH);
151:       assertEquals(48, Node.DIRECTIVES);
152:       assertEquals(57, Node.REFLECTED_OBJECT);
153:       assertEquals(54, Node.SLASH_V);
154:       assertEquals(30, Node.VAR_ARGS_NAME);
155:       assertEquals(15, Node.NO_SIDE_EFFECTS);
156:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
157:       assertEquals(55, Node.INFERRED_FUNCTION);
158:       assertEquals(53, Node.INPUT_ID);
159:       assertEquals(2, Node.POST_FLAG);
160:       assertEquals(57, Node.LAST_PROP);
161:       assertEquals(47, Node.IS_DISPATCHER);
162:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
163:       assertFalse(node1.isContinue());
164:       assertFalse(node1.hasMoreThanOneChild());
165:       assertFalse(node1.isDo());
166:       assertFalse(node1.isOr());
167:       assertEquals((-1), node1.getSourcePosition());
168:       assertEquals((-1), node1.getLineno());
169:       assertFalse(node1.isLabelName());
170:       assertFalse(node1.isCast());
171:       assertFalse(node1.isAdd());
172:       assertFalse(node1.isSetterDef());
173:       assertFalse(node1.isLabel());
174:       assertFalse(node1.isNew());
175:       assertFalse(node1.isVar());
176:       assertFalse(node1.isAssignAdd());
177:       assertFalse(node1.isAnd());
178:       assertFalse(node1.isObjectLit());
179:       assertFalse(node1.isNot());
180:       assertFalse(node1.isDebugger());
181:       assertFalse(node1.isVoid());
182:       assertFalse(node1.isExprResult());
183:       assertFalse(node1.isTrue());
184:       assertFalse(node1.isNull());
185:       assertFalse(node1.isCall());
186:       assertFalse(node1.isName());
187:       assertFalse(node1.isGetElem());
188:       assertFalse(node1.isAssign());
189:       assertFalse(node1.isBreak());
190:       assertFalse(node1.isTypeOf());
191:       assertFalse(node1.isGetProp());
192:       assertFalse(node1.isComma());
193:       assertFalse(node1.isDec());
194:       assertFalse(node1.hasChildren());
195:       assertFalse(node1.isReturn());
196:       assertFalse(node1.isWhile());
197:       assertFalse(node1.isCase());
198:       assertFalse(node1.isIn());
199:       assertFalse(node1.isString());
200:       assertEquals(2560, node1.getType());
201:       assertEquals((-1), node1.getCharno());
202:       assertFalse(node1.isIf());
203:       assertFalse(node1.isDelProp());
204:       assertFalse(node1.isNE());
205:       assertFalse(node1.isSwitch());
206:       assertFalse(node1.isThrow());
207:       assertFalse(node1.isFalse());
208:       assertFalse(node1.isArrayLit());
209:       assertFalse(node1.isEmpty());
210:       assertFalse(node1.isFunction());
211:       assertFalse(node1.isInc());
212:       assertFalse(node1.isDefaultCase());
213:       assertEquals(0, node1.getChildCount());
214:       assertFalse(node1.isWith());
215:       assertFalse(node1.isScript());
216:       assertFalse(node1.isCatch());
217:       assertFalse(node1.isInstanceOf());
218:       assertFalse(node1.isStringKey());
219:       assertFalse(node1.isParamList());
220:       assertFalse(node1.hasOneChild());
221:       assertFalse(node1.isGetterDef());
222:       assertFalse(node1.isNumber());
223:       assertFalse(node1.isBlock());
224:       assertFalse(node1.isThis());
225:       assertFalse(node1.isTry());
226:       assertFalse(node1.isRegExp());
227:       assertFalse(node1.isHook());
228:       assertFalse(node1.isFor());
229:       assertFalse(node1.equals((Object)node0));
230:       assertNotNull(node1);
231:       
232:       Iterable<Node> iterable0 = new HashSet<Node>();
233:       assertFalse(iterable0.contains(node1));
234:       assertNotNull(iterable0);
235:       
236:       boolean boolean0 = node1.isReturn();
237:       assertEquals(29, Node.JSDOC_INFO_PROP);
238:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
239:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
240:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
241:       assertEquals(37, Node.OPT_ARG_NAME);
242:       assertEquals(43, Node.IS_CONSTANT_NAME);
243:       assertEquals(51, Node.STATIC_SOURCE_FILE);
244:       assertEquals(36, Node.QUOTED_PROP);
245:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
246:       assertEquals(46, Node.IS_NAMESPACE);
247:       assertEquals(56, Node.CHANGE_TIME);
248:       assertEquals(49, Node.DIRECT_EVAL);
249:       assertEquals(1, Node.DECR_FLAG);
250:       assertEquals(4095, Node.COLUMN_MASK);
251:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
252:       assertEquals(32, Node.INCRDECR_PROP);
253:       assertEquals(12, Node.COLUMN_BITS);
254:       assertEquals(50, Node.FREE_CALL);
255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
256:       assertEquals(8, Node.FLAG_NO_THROWS);
257:       assertEquals(39, Node.EMPTY_BLOCK);
258:       assertEquals(40, Node.ORIGINALNAME_PROP);
259:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
260:       assertEquals(52, Node.LENGTH);
261:       assertEquals(48, Node.DIRECTIVES);
262:       assertEquals(57, Node.REFLECTED_OBJECT);
263:       assertEquals(54, Node.SLASH_V);
264:       assertEquals(30, Node.VAR_ARGS_NAME);
265:       assertEquals(15, Node.NO_SIDE_EFFECTS);
266:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
267:       assertEquals(55, Node.INFERRED_FUNCTION);
268:       assertEquals(53, Node.INPUT_ID);
269:       assertEquals(2, Node.POST_FLAG);
270:       assertEquals(57, Node.LAST_PROP);
271:       assertEquals(47, Node.IS_DISPATCHER);
272:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
273:       assertFalse(node1.isContinue());
274:       assertFalse(node1.hasMoreThanOneChild());
275:       assertFalse(node1.isDo());
276:       assertFalse(node1.isOr());
277:       assertEquals((-1), node1.getSourcePosition());
278:       assertEquals((-1), node1.getLineno());
279:       assertFalse(node1.isLabelName());
280:       assertFalse(node1.isCast());
281:       assertFalse(node1.isAdd());
282:       assertFalse(node1.isSetterDef());
283:       assertFalse(node1.isLabel());
284:       assertFalse(node1.isNew());
285:       assertFalse(node1.isVar());
286:       assertFalse(node1.isAssignAdd());
287:       assertFalse(node1.isAnd());
288:       assertFalse(node1.isObjectLit());
289:       assertFalse(node1.isNot());
290:       assertFalse(node1.isDebugger());
291:       assertFalse(node1.isVoid());
292:       assertFalse(node1.isExprResult());
293:       assertFalse(node1.isTrue());
294:       assertFalse(node1.isNull());
295:       assertFalse(node1.isCall());
296:       assertFalse(node1.isName());
297:       assertFalse(node1.isGetElem());
298:       assertFalse(node1.isAssign());
299:       assertFalse(node1.isBreak());
300:       assertFalse(node1.isTypeOf());
301:       assertFalse(node1.isGetProp());
302:       assertFalse(node1.isComma());
303:       assertFalse(node1.isDec());
304:       assertFalse(node1.hasChildren());
305:       assertFalse(node1.isReturn());
306:       assertFalse(node1.isWhile());
307:       assertFalse(node1.isCase());
308:       assertFalse(node1.isIn());
309:       assertFalse(node1.isString());
310:       assertEquals(2560, node1.getType());
311:       assertEquals((-1), node1.getCharno());
312:       assertFalse(node1.isIf());
313:       assertFalse(node1.isDelProp());
314:       assertFalse(node1.isNE());
315:       assertFalse(node1.isSwitch());
316:       assertFalse(node1.isThrow());
317:       assertFalse(node1.isFalse());
318:       assertFalse(node1.isArrayLit());
319:       assertFalse(node1.isEmpty());
320:       assertFalse(node1.isFunction());
321:       assertFalse(node1.isInc());
322:       assertFalse(node1.isDefaultCase());
323:       assertEquals(0, node1.getChildCount());
324:       assertFalse(node1.isWith());
325:       assertFalse(node1.isScript());
326:       assertFalse(node1.isCatch());
327:       assertFalse(node1.isInstanceOf());
328:       assertFalse(node1.isStringKey());
329:       assertFalse(node1.isParamList());
330:       assertFalse(node1.hasOneChild());
331:       assertFalse(node1.isGetterDef());
332:       assertFalse(node1.isNumber());
333:       assertFalse(node1.isBlock());
334:       assertFalse(node1.isThis());
335:       assertFalse(node1.isTry());
336:       assertFalse(node1.isRegExp());
337:       assertFalse(node1.isHook());
338:       assertFalse(node1.isFor());
339:       assertFalse(node1.equals((Object)node0));
340:       assertFalse(boolean0);
341:       
342:       boolean boolean1 = node1.isDefaultCase();
343:       assertEquals(29, Node.JSDOC_INFO_PROP);
344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
345:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
346:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(43, Node.IS_CONSTANT_NAME);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(36, Node.QUOTED_PROP);
351:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
352:       assertEquals(46, Node.IS_NAMESPACE);
353:       assertEquals(56, Node.CHANGE_TIME);
354:       assertEquals(49, Node.DIRECT_EVAL);
355:       assertEquals(1, Node.DECR_FLAG);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
358:       assertEquals(32, Node.INCRDECR_PROP);
359:       assertEquals(12, Node.COLUMN_BITS);
360:       assertEquals(50, Node.FREE_CALL);
361:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
362:       assertEquals(8, Node.FLAG_NO_THROWS);
363:       assertEquals(39, Node.EMPTY_BLOCK);
364:       assertEquals(40, Node.ORIGINALNAME_PROP);
365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(48, Node.DIRECTIVES);
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(54, Node.SLASH_V);
370:       assertEquals(30, Node.VAR_ARGS_NAME);
371:       assertEquals(15, Node.NO_SIDE_EFFECTS);
372:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
373:       assertEquals(55, Node.INFERRED_FUNCTION);
374:       assertEquals(53, Node.INPUT_ID);
375:       assertEquals(2, Node.POST_FLAG);
376:       assertEquals(57, Node.LAST_PROP);
377:       assertEquals(47, Node.IS_DISPATCHER);
378:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
379:       assertFalse(node1.isContinue());
380:       assertFalse(node1.hasMoreThanOneChild());
381:       assertFalse(node1.isDo());
382:       assertFalse(node1.isOr());
383:       assertEquals((-1), node1.getSourcePosition());
384:       assertEquals((-1), node1.getLineno());
385:       assertFalse(node1.isLabelName());
386:       assertFalse(node1.isCast());
387:       assertFalse(node1.isAdd());
388:       assertFalse(node1.isSetterDef());
389:       assertFalse(node1.isLabel());
390:       assertFalse(node1.isNew());
391:       assertFalse(node1.isVar());
392:       assertFalse(node1.isAssignAdd());
393:       assertFalse(node1.isAnd());
394:       assertFalse(node1.isObjectLit());
395:       assertFalse(node1.isNot());
396:       assertFalse(node1.isDebugger());
397:       assertFalse(node1.isVoid());
398:       assertFalse(node1.isExprResult());
399:       assertFalse(node1.isTrue());
400:       assertFalse(node1.isNull());
401:       assertFalse(node1.isCall());
402:       assertFalse(node1.isName());
403:       assertFalse(node1.isGetElem());
404:       assertFalse(node1.isAssign());
405:       assertFalse(node1.isBreak());
406:       assertFalse(node1.isTypeOf());
407:       assertFalse(node1.isGetProp());
408:       assertFalse(node1.isComma());
409:       assertFalse(node1.isDec());
410:       assertFalse(node1.hasChildren());
411:       assertFalse(node1.isReturn());
412:       assertFalse(node1.isWhile());
413:       assertFalse(node1.isCase());
414:       assertFalse(node1.isIn());
415:       assertFalse(node1.isString());
416:       assertEquals(2560, node1.getType());
417:       assertEquals((-1), node1.getCharno());
418:       assertFalse(node1.isIf());
419:       assertFalse(node1.isDelProp());
420:       assertFalse(node1.isNE());
421:       assertFalse(node1.isSwitch());
422:       assertFalse(node1.isThrow());
423:       assertFalse(node1.isFalse());
424:       assertFalse(node1.isArrayLit());
425:       assertFalse(node1.isEmpty());
426:       assertFalse(node1.isFunction());
427:       assertFalse(node1.isInc());
428:       assertFalse(node1.isDefaultCase());
429:       assertEquals(0, node1.getChildCount());
430:       assertFalse(node1.isWith());
431:       assertFalse(node1.isScript());
432:       assertFalse(node1.isCatch());
433:       assertFalse(node1.isInstanceOf());
434:       assertFalse(node1.isStringKey());
435:       assertFalse(node1.isParamList());
436:       assertFalse(node1.hasOneChild());
437:       assertFalse(node1.isGetterDef());
438:       assertFalse(node1.isNumber());
439:       assertFalse(node1.isBlock());
440:       assertFalse(node1.isThis());
441:       assertFalse(node1.isTry());
442:       assertFalse(node1.isRegExp());
443:       assertFalse(node1.isHook());
444:       assertFalse(node1.isFor());
445:       assertFalse(node1.equals((Object)node0));
446:       assertTrue(boolean1 == boolean0);
447:       assertFalse(boolean1);
448:   }
449: }
RegularFileObject[/tmp/EvoSuite_98_1628255806054/com/google/javascript/rhino/Node_98_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:46 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_98_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_98_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_98_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.common.collect.AbstractMultimap$Values",
337:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
338:       "com.google.common.collect.AbstractMapBasedMultimap$1",
339:       "com.google.common.collect.Multimaps$Entries",
340:       "com.google.common.collect.AbstractMultimap$Entries",
341:       "com.google.common.collect.AbstractMapBasedMultimap$2",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.jstype.EnumType",
346:       "com.google.javascript.rhino.jstype.EnumElementType",
347:       "com.google.common.collect.Sets",
348:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
349:       "com.google.common.base.Objects",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
363:       "com.google.common.collect.Iterables",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
366:       "com.google.javascript.rhino.JSTypeExpression",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.javascript.rhino.jstype.JSType$2",
369:       "com.google.common.collect.Iterators$12",
370:       "com.google.common.collect.Platform",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 13:16:46.088 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber((-3534.7645668836735), (-316), (-316));
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isInc());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isThis());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isScript());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetElem());
assertFalse(node0.isCast());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.hasOneChild());
assertFalse(node0.isAssign());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isReturn());
assertEquals(39, node0.getType());
assertFalse(node0.isLabel());
assertFalse(node0.hasChildren());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isNew());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isCall());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertNotNull(node0);

Node node1 = new Node(2560);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertEquals(2560, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);

Iterable<Node> iterable0 = new HashSet<Node>();
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);

boolean boolean0 = node1.isReturn();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertEquals(2560, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);

boolean boolean1 = node1.isDefaultCase();
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node1.isContinue());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isOr());
assertEquals((-1), node1.getSourcePosition());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isLabelName());
assertFalse(node1.isCast());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertFalse(node1.isGetProp());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isString());
assertEquals(2560, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertFalse(node1.isSwitch());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isEmpty());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDefaultCase());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);


[MASTER] 13:16:47.025 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_106_1628255806956/com/google/javascript/rhino/Node_106_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_106_1628255806956/com/google/javascript/rhino/Node_106_tmp__ESTest_scaffolding.java]]
[MASTER] 13:16:47.026 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:47.026 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:16:47.027 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 654
[MASTER] 13:16:47.028 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_106_1628255806956/com/google/javascript/rhino/Node_106_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:16:46 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_106_tmp__ESTest extends Node_106_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString((-3604), "", 3620, 65536);
21:       assertEquals(57, Node.REFLECTED_OBJECT);
22:       assertEquals(40, Node.ORIGINALNAME_PROP);
23:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
24:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
25:       assertEquals(52, Node.LENGTH);
26:       assertEquals(50, Node.FREE_CALL);
27:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
28:       assertEquals(54, Node.SLASH_V);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(55, Node.INFERRED_FUNCTION);
32:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
33:       assertEquals(30, Node.VAR_ARGS_NAME);
34:       assertEquals(8, Node.FLAG_NO_THROWS);
35:       assertEquals(2, Node.POST_FLAG);
36:       assertEquals(15, Node.NO_SIDE_EFFECTS);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(57, Node.LAST_PROP);
39:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(29, Node.JSDOC_INFO_PROP);
42:       assertEquals(53, Node.INPUT_ID);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
45:       assertEquals(43, Node.IS_CONSTANT_NAME);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(36, Node.QUOTED_PROP);
48:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
49:       assertEquals(37, Node.OPT_ARG_NAME);
50:       assertEquals(51, Node.STATIC_SOURCE_FILE);
51:       assertEquals(4095, Node.COLUMN_MASK);
52:       assertEquals(12, Node.COLUMN_BITS);
53:       assertEquals(46, Node.IS_NAMESPACE);
54:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(32, Node.INCRDECR_PROP);
57:       assertFalse(node0.isInstanceOf());
58:       assertFalse(node0.isThis());
59:       assertFalse(node0.isObjectLit());
60:       assertFalse(node0.isComma());
61:       assertFalse(node0.isNot());
62:       assertFalse(node0.isWith());
63:       assertFalse(node0.isBreak());
64:       assertFalse(node0.isAnd());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isHook());
67:       assertEquals(4095, node0.getCharno());
68:       assertFalse(node0.isAssign());
69:       assertFalse(node0.isString());
70:       assertFalse(node0.isNumber());
71:       assertFalse(node0.hasChildren());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.isGetProp());
74:       assertFalse(node0.isCase());
75:       assertFalse(node0.hasOneChild());
76:       assertFalse(node0.isIn());
77:       assertFalse(node0.isContinue());
78:       assertFalse(node0.hasMoreThanOneChild());
79:       assertFalse(node0.isIf());
80:       assertFalse(node0.isNE());
81:       assertEquals(3620, node0.getLineno());
82:       assertFalse(node0.isCast());
83:       assertFalse(node0.isFunction());
84:       assertFalse(node0.isFalse());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isInc());
87:       assertFalse(node0.isSetterDef());
88:       assertEquals(14831615, node0.getSourcePosition());
89:       assertFalse(node0.isCatch());
90:       assertEquals(0, node0.getChildCount());
91:       assertFalse(node0.isNull());
92:       assertFalse(node0.isStringKey());
93:       assertFalse(node0.isCall());
94:       assertFalse(node0.isParamList());
95:       assertFalse(node0.isName());
96:       assertFalse(node0.isVoid());
97:       assertFalse(node0.isBlock());
98:       assertFalse(node0.isDebugger());
99:       assertFalse(node0.isRegExp());
100:       assertFalse(node0.isWhile());
101:       assertFalse(node0.isGetterDef());
102:       assertFalse(node0.isFor());
103:       assertFalse(node0.isTry());
104:       assertFalse(node0.isReturn());
105:       assertFalse(node0.isLabel());
106:       assertFalse(node0.isAssignAdd());
107:       assertFalse(node0.isTypeOf());
108:       assertFalse(node0.isDec());
109:       assertFalse(node0.isOr());
110:       assertFalse(node0.isDelProp());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isSwitch());
113:       assertFalse(node0.isArrayLit());
114:       assertFalse(node0.isLabelName());
115:       assertFalse(node0.isAdd());
116:       assertFalse(node0.isVar());
117:       assertFalse(node0.isTrue());
118:       assertFalse(node0.isDefaultCase());
119:       assertFalse(node0.isEmpty());
120:       assertEquals((-3604), node0.getType());
121:       assertFalse(node0.isNew());
122:       assertFalse(node0.isDo());
123:       assertNotNull(node0);
124:       
125:       Node node1 = new Node(2, node0, node0, (-31), 37);
126:       assertEquals(57, Node.REFLECTED_OBJECT);
127:       assertEquals(40, Node.ORIGINALNAME_PROP);
128:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
129:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
130:       assertEquals(52, Node.LENGTH);
131:       assertEquals(50, Node.FREE_CALL);
132:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
133:       assertEquals(54, Node.SLASH_V);
134:       assertEquals(48, Node.DIRECTIVES);
135:       assertEquals(49, Node.DIRECT_EVAL);
136:       assertEquals(55, Node.INFERRED_FUNCTION);
137:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
138:       assertEquals(30, Node.VAR_ARGS_NAME);
139:       assertEquals(8, Node.FLAG_NO_THROWS);
140:       assertEquals(2, Node.POST_FLAG);
141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
142:       assertEquals(47, Node.IS_DISPATCHER);
143:       assertEquals(57, Node.LAST_PROP);
144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
145:       assertEquals(39, Node.EMPTY_BLOCK);
146:       assertEquals(29, Node.JSDOC_INFO_PROP);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
149:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
150:       assertEquals(43, Node.IS_CONSTANT_NAME);
151:       assertEquals(56, Node.CHANGE_TIME);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(37, Node.OPT_ARG_NAME);
155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
156:       assertEquals(4095, Node.COLUMN_MASK);
157:       assertEquals(12, Node.COLUMN_BITS);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(1, Node.DECR_FLAG);
161:       assertEquals(32, Node.INCRDECR_PROP);
162:       assertEquals(15, Node.NO_SIDE_EFFECTS);
163:       assertEquals(57, Node.LAST_PROP);
164:       assertEquals(49, Node.DIRECT_EVAL);
165:       assertEquals(30, Node.VAR_ARGS_NAME);
166:       assertEquals(1, Node.DECR_FLAG);
167:       assertEquals(54, Node.SLASH_V);
168:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
169:       assertEquals(12, Node.COLUMN_BITS);
170:       assertEquals(40, Node.ORIGINALNAME_PROP);
171:       assertEquals(37, Node.OPT_ARG_NAME);
172:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
173:       assertEquals(50, Node.FREE_CALL);
174:       assertEquals(32, Node.INCRDECR_PROP);
175:       assertEquals(46, Node.IS_NAMESPACE);
176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
177:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
178:       assertEquals(36, Node.QUOTED_PROP);
179:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
180:       assertEquals(43, Node.IS_CONSTANT_NAME);
181:       assertEquals(48, Node.DIRECTIVES);
182:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
183:       assertEquals(4095, Node.COLUMN_MASK);
184:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
185:       assertEquals(47, Node.IS_DISPATCHER);
186:       assertEquals(2, Node.POST_FLAG);
187:       assertEquals(56, Node.CHANGE_TIME);
188:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
189:       assertEquals(52, Node.LENGTH);
190:       assertEquals(57, Node.REFLECTED_OBJECT);
191:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
192:       assertEquals(8, Node.FLAG_NO_THROWS);
193:       assertEquals(39, Node.EMPTY_BLOCK);
194:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
195:       assertEquals(29, Node.JSDOC_INFO_PROP);
196:       assertEquals(53, Node.INPUT_ID);
197:       assertEquals(55, Node.INFERRED_FUNCTION);
198:       assertFalse(node0.isInstanceOf());
199:       assertFalse(node0.isThis());
200:       assertFalse(node0.isObjectLit());
201:       assertFalse(node0.isComma());
202:       assertFalse(node0.isNot());
203:       assertFalse(node0.isWith());
204:       assertFalse(node0.isBreak());
205:       assertFalse(node0.isAnd());
206:       assertFalse(node0.isExprResult());
207:       assertFalse(node0.isHook());
208:       assertEquals(4095, node0.getCharno());
209:       assertFalse(node0.isAssign());
210:       assertFalse(node0.isString());
211:       assertFalse(node0.isNumber());
212:       assertFalse(node0.hasChildren());
213:       assertFalse(node0.isScript());
214:       assertFalse(node0.isGetProp());
215:       assertFalse(node0.isCase());
216:       assertFalse(node0.hasOneChild());
217:       assertFalse(node0.isIn());
218:       assertFalse(node0.isContinue());
219:       assertFalse(node0.hasMoreThanOneChild());
220:       assertFalse(node0.isIf());
221:       assertFalse(node0.isNE());
222:       assertEquals(3620, node0.getLineno());
223:       assertFalse(node0.isCast());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isFalse());
226:       assertFalse(node0.isThrow());
227:       assertFalse(node0.isInc());
228:       assertFalse(node0.isSetterDef());
229:       assertEquals(14831615, node0.getSourcePosition());
230:       assertFalse(node0.isCatch());
231:       assertEquals(0, node0.getChildCount());
232:       assertFalse(node0.isNull());
233:       assertFalse(node0.isStringKey());
234:       assertFalse(node0.isCall());
235:       assertFalse(node0.isParamList());
236:       assertFalse(node0.isName());
237:       assertFalse(node0.isVoid());
238:       assertFalse(node0.isBlock());
239:       assertFalse(node0.isDebugger());
240:       assertFalse(node0.isRegExp());
241:       assertFalse(node0.isWhile());
242:       assertFalse(node0.isGetterDef());
243:       assertFalse(node0.isFor());
244:       assertFalse(node0.isTry());
245:       assertFalse(node0.isReturn());
246:       assertFalse(node0.isLabel());
247:       assertFalse(node0.isAssignAdd());
248:       assertFalse(node0.isTypeOf());
249:       assertFalse(node0.isDec());
250:       assertFalse(node0.isOr());
251:       assertFalse(node0.isDelProp());
252:       assertFalse(node0.isGetElem());
253:       assertFalse(node0.isSwitch());
254:       assertFalse(node0.isArrayLit());
255:       assertFalse(node0.isLabelName());
256:       assertFalse(node0.isAdd());
257:       assertFalse(node0.isVar());
258:       assertFalse(node0.isTrue());
259:       assertFalse(node0.isDefaultCase());
260:       assertFalse(node0.isEmpty());
261:       assertEquals((-3604), node0.getType());
262:       assertFalse(node0.isNew());
263:       assertFalse(node0.isDo());
264:       assertFalse(node1.isFalse());
265:       assertFalse(node1.isBreak());
266:       assertFalse(node1.isHook());
267:       assertFalse(node1.isThis());
268:       assertFalse(node1.isThrow());
269:       assertFalse(node1.isComma());
270:       assertFalse(node1.isInstanceOf());
271:       assertFalse(node1.isInc());
272:       assertFalse(node1.isIn());
273:       assertFalse(node1.isFor());
274:       assertFalse(node1.isEmpty());
275:       assertFalse(node1.isLabelName());
276:       assertFalse(node1.isGetterDef());
277:       assertFalse(node1.isNE());
278:       assertFalse(node1.isIf());
279:       assertFalse(node1.isLabel());
280:       assertTrue(node1.hasChildren());
281:       assertEquals(1, node1.getChildCount());
282:       assertEquals((-1), node1.getLineno());
283:       assertFalse(node1.isArrayLit());
284:       assertFalse(node1.hasMoreThanOneChild());
285:       assertFalse(node1.isRegExp());
286:       assertFalse(node1.isWith());
287:       assertFalse(node1.isCase());
288:       assertFalse(node1.isSwitch());
289:       assertFalse(node1.isTry());
290:       assertEquals((-1), node1.getCharno());
291:       assertFalse(node1.isScript());
292:       assertFalse(node1.isNumber());
293:       assertFalse(node1.isName());
294:       assertFalse(node1.isVar());
295:       assertFalse(node1.isNull());
296:       assertFalse(node1.isStringKey());
297:       assertFalse(node1.isParamList());
298:       assertFalse(node1.isBlock());
299:       assertFalse(node1.isCatch());
300:       assertFalse(node1.isCall());
301:       assertEquals(2, node1.getType());
302:       assertFalse(node1.isDo());
303:       assertFalse(node1.isTrue());
304:       assertFalse(node1.isDefaultCase());
305:       assertFalse(node1.isAssignAdd());
306:       assertFalse(node1.isAdd());
307:       assertFalse(node1.isOr());
308:       assertFalse(node1.isNew());
309:       assertFalse(node1.isSetterDef());
310:       assertFalse(node1.isAssign());
311:       assertTrue(node1.hasOneChild());
312:       assertFalse(node1.isGetElem());
313:       assertFalse(node1.isDelProp());
314:       assertEquals((-1), node1.getSourcePosition());
315:       assertFalse(node1.isDec());
316:       assertFalse(node1.isReturn());
317:       assertFalse(node1.isVoid());
318:       assertFalse(node1.isCast());
319:       assertFalse(node1.isFunction());
320:       assertFalse(node1.isExprResult());
321:       assertFalse(node1.isTypeOf());
322:       assertFalse(node1.isContinue());
323:       assertFalse(node1.isNot());
324:       assertFalse(node1.isAnd());
325:       assertFalse(node1.isWhile());
326:       assertFalse(node1.isGetProp());
327:       assertFalse(node1.isDebugger());
328:       assertFalse(node1.isObjectLit());
329:       assertFalse(node1.isString());
330:       assertFalse(node1.equals((Object)node0));
331:       assertNotNull(node1);
332:       
333:       Node node2 = Node.newNumber((double) 8, (-1632), 0);
334:       assertEquals(55, Node.INFERRED_FUNCTION);
335:       assertEquals(4095, Node.COLUMN_MASK);
336:       assertEquals(43, Node.IS_CONSTANT_NAME);
337:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
338:       assertEquals(48, Node.DIRECTIVES);
339:       assertEquals(40, Node.ORIGINALNAME_PROP);
340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
341:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
342:       assertEquals(50, Node.FREE_CALL);
343:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
344:       assertEquals(54, Node.SLASH_V);
345:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
347:       assertEquals(51, Node.STATIC_SOURCE_FILE);
348:       assertEquals(1, Node.DECR_FLAG);
349:       assertEquals(49, Node.DIRECT_EVAL);
350:       assertEquals(32, Node.INCRDECR_PROP);
351:       assertEquals(30, Node.VAR_ARGS_NAME);
352:       assertEquals(57, Node.LAST_PROP);
353:       assertEquals(12, Node.COLUMN_BITS);
354:       assertEquals(46, Node.IS_NAMESPACE);
355:       assertEquals(37, Node.OPT_ARG_NAME);
356:       assertEquals(2, Node.POST_FLAG);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(47, Node.IS_DISPATCHER);
359:       assertEquals(57, Node.REFLECTED_OBJECT);
360:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
361:       assertEquals(8, Node.FLAG_NO_THROWS);
362:       assertEquals(39, Node.EMPTY_BLOCK);
363:       assertEquals(36, Node.QUOTED_PROP);
364:       assertEquals(52, Node.LENGTH);
365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
366:       assertEquals(15, Node.NO_SIDE_EFFECTS);
367:       assertEquals(53, Node.INPUT_ID);
368:       assertEquals(29, Node.JSDOC_INFO_PROP);
369:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
370:       assertFalse(node2.isArrayLit());
371:       assertFalse(node2.isTry());
372:       assertFalse(node2.isFor());
373:       assertFalse(node2.isTrue());
374:       assertFalse(node2.isRegExp());
375:       assertFalse(node2.isIf());
376:       assertFalse(node2.isFunction());
377:       assertFalse(node2.isDelProp());
378:       assertFalse(node2.isVoid());
379:       assertFalse(node2.isCatch());
380:       assertFalse(node2.isIn());
381:       assertEquals(0, node2.getChildCount());
382:       assertFalse(node2.isNE());
383:       assertFalse(node2.isNull());
384:       assertFalse(node2.isSetterDef());
385:       assertFalse(node2.isDefaultCase());
386:       assertFalse(node2.isInc());
387:       assertFalse(node2.isEmpty());
388:       assertFalse(node2.isName());
389:       assertFalse(node2.isThrow());
390:       assertFalse(node2.isBreak());
391:       assertFalse(node2.isComma());
392:       assertFalse(node2.isFalse());
393:       assertFalse(node2.isCall());
394:       assertFalse(node2.isContinue());
395:       assertFalse(node2.isObjectLit());
396:       assertTrue(node2.isNumber());
397:       assertFalse(node2.isWhile());
398:       assertFalse(node2.isAnd());
399:       assertFalse(node2.isReturn());
400:       assertEquals((-1), node2.getSourcePosition());
401:       assertFalse(node2.isDebugger());
402:       assertFalse(node2.isNot());
403:       assertFalse(node2.isGetProp());
404:       assertFalse(node2.isString());
405:       assertFalse(node2.hasOneChild());
406:       assertFalse(node2.isTypeOf());
407:       assertFalse(node2.hasChildren());
408:       assertFalse(node2.isLabelName());
409:       assertFalse(node2.isDec());
410:       assertFalse(node2.isAssign());
411:       assertFalse(node2.isGetElem());
412:       assertFalse(node2.isWith());
413:       assertFalse(node2.isExprResult());
414:       assertFalse(node2.isCast());
415:       assertEquals((-1), node2.getLineno());
416:       assertFalse(node2.isOr());
417:       assertFalse(node2.isLabel());
418:       assertFalse(node2.isAssignAdd());
419:       assertFalse(node2.isDo());
420:       assertFalse(node2.isNew());
421:       assertFalse(node2.isAdd());
422:       assertFalse(node2.isHook());
423:       assertFalse(node2.isBlock());
424:       assertEquals((-1), node2.getCharno());
425:       assertFalse(node2.isStringKey());
426:       assertFalse(node2.isVar());
427:       assertFalse(node2.isSwitch());
428:       assertFalse(node2.isInstanceOf());
429:       assertFalse(node2.hasMoreThanOneChild());
430:       assertEquals(39, node2.getType());
431:       assertFalse(node2.isParamList());
432:       assertFalse(node2.isThis());
433:       assertFalse(node2.isScript());
434:       assertFalse(node2.isGetterDef());
435:       assertFalse(node2.isCase());
436:       assertFalse(node2.equals((Object)node1));
437:       assertFalse(node2.equals((Object)node0));
438:       assertNotNull(node2);
439:       
440:       Node node3 = new Node((-1883));
441:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
442:       assertEquals(48, Node.DIRECTIVES);
443:       assertEquals(8, Node.FLAG_NO_THROWS);
444:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
445:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
446:       assertEquals(40, Node.ORIGINALNAME_PROP);
447:       assertEquals(39, Node.EMPTY_BLOCK);
448:       assertEquals(4095, Node.COLUMN_MASK);
449:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
450:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(57, Node.LAST_PROP);
453:       assertEquals(52, Node.LENGTH);
454:       assertEquals(49, Node.DIRECT_EVAL);
455:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
456:       assertEquals(15, Node.NO_SIDE_EFFECTS);
457:       assertEquals(53, Node.INPUT_ID);
458:       assertEquals(55, Node.INFERRED_FUNCTION);
459:       assertEquals(57, Node.REFLECTED_OBJECT);
460:       assertEquals(2, Node.POST_FLAG);
461:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
462:       assertEquals(37, Node.OPT_ARG_NAME);
463:       assertEquals(56, Node.CHANGE_TIME);
464:       assertEquals(29, Node.JSDOC_INFO_PROP);
465:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
466:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
467:       assertEquals(32, Node.INCRDECR_PROP);
468:       assertEquals(1, Node.DECR_FLAG);
469:       assertEquals(30, Node.VAR_ARGS_NAME);
470:       assertEquals(47, Node.IS_DISPATCHER);
471:       assertEquals(12, Node.COLUMN_BITS);
472:       assertEquals(43, Node.IS_CONSTANT_NAME);
473:       assertEquals(51, Node.STATIC_SOURCE_FILE);
474:       assertEquals(50, Node.FREE_CALL);
475:       assertEquals(46, Node.IS_NAMESPACE);
476:       assertEquals(54, Node.SLASH_V);
477:       assertFalse(node3.isWith());
478:       assertFalse(node3.isNot());
479:       assertFalse(node3.isScript());
480:       assertFalse(node3.isExprResult());
481:       assertFalse(node3.hasOneChild());
482:       assertFalse(node3.isInstanceOf());
483:       assertFalse(node3.isThis());
484:       assertFalse(node3.isNumber());
485:       assertEquals((-1), node3.getSourcePosition());
486:       assertFalse(node3.isLabelName());
487:       assertFalse(node3.isFalse());
488:       assertFalse(node3.isGetProp());
489:       assertFalse(node3.isCast());
490:       assertFalse(node3.isObjectLit());
491:       assertFalse(node3.isAnd());
492:       assertEquals((-1), node3.getCharno());
493:       assertFalse(node3.isContinue());
494:       assertFalse(node3.isCase());
495:       assertFalse(node3.isInc());
496:       assertFalse(node3.isHook());
497:       assertFalse(node3.hasMoreThanOneChild());
498:       assertFalse(node3.isThrow());
499:       assertFalse(node3.isBlock());
500:       assertFalse(node3.isIf());
501:       assertFalse(node3.isSetterDef());
502:       assertFalse(node3.isIn());
503:       assertEquals((-1), node3.getLineno());
504:       assertFalse(node3.isNE());
505:       assertFalse(node3.isDefaultCase());
506:       assertFalse(node3.isFunction());
507:       assertFalse(node3.isRegExp());
508:       assertFalse(node3.isVoid());
509:       assertFalse(node3.isCatch());
510:       assertEquals(0, node3.getChildCount());
511:       assertFalse(node3.isTry());
512:       assertFalse(node3.isFor());
513:       assertFalse(node3.isGetterDef());
514:       assertFalse(node3.isArrayLit());
515:       assertFalse(node3.isStringKey());
516:       assertFalse(node3.isDebugger());
517:       assertFalse(node3.isParamList());
518:       assertFalse(node3.isWhile());
519:       assertEquals((-1883), node3.getType());
520:       assertFalse(node3.isString());
521:       assertFalse(node3.isSwitch());
522:       assertFalse(node3.isDo());
523:       assertFalse(node3.isNew());
524:       assertFalse(node3.isAdd());
525:       assertFalse(node3.isAssignAdd());
526:       assertFalse(node3.isLabel());
527:       assertFalse(node3.isReturn());
528:       assertFalse(node3.isVar());
529:       assertFalse(node3.isDec());
530:       assertFalse(node3.isBreak());
531:       assertFalse(node3.hasChildren());
532:       assertFalse(node3.isComma());
533:       assertFalse(node3.isAssign());
534:       assertFalse(node3.isName());
535:       assertFalse(node3.isDelProp());
536:       assertFalse(node3.isTypeOf());
537:       assertFalse(node3.isGetElem());
538:       assertFalse(node3.isCall());
539:       assertFalse(node3.isEmpty());
540:       assertFalse(node3.isOr());
541:       assertFalse(node3.isNull());
542:       assertFalse(node3.isTrue());
543:       assertFalse(node3.equals((Object)node2));
544:       assertFalse(node3.equals((Object)node0));
545:       assertFalse(node3.equals((Object)node1));
546:       assertNotNull(node3);
547:       
548:       Iterable<Node> iterable0 = node0.children();
549:       assertEquals(57, Node.REFLECTED_OBJECT);
550:       assertEquals(40, Node.ORIGINALNAME_PROP);
551:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
553:       assertEquals(52, Node.LENGTH);
554:       assertEquals(50, Node.FREE_CALL);
555:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
556:       assertEquals(54, Node.SLASH_V);
557:       assertEquals(48, Node.DIRECTIVES);
558:       assertEquals(49, Node.DIRECT_EVAL);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(30, Node.VAR_ARGS_NAME);
562:       assertEquals(8, Node.FLAG_NO_THROWS);
563:       assertEquals(2, Node.POST_FLAG);
564:       assertEquals(15, Node.NO_SIDE_EFFECTS);
565:       assertEquals(47, Node.IS_DISPATCHER);
566:       assertEquals(57, Node.LAST_PROP);
567:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
568:       assertEquals(39, Node.EMPTY_BLOCK);
569:       assertEquals(29, Node.JSDOC_INFO_PROP);
570:       assertEquals(53, Node.INPUT_ID);
571:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
572:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
573:       assertEquals(43, Node.IS_CONSTANT_NAME);
574:       assertEquals(56, Node.CHANGE_TIME);
575:       assertEquals(36, Node.QUOTED_PROP);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(37, Node.OPT_ARG_NAME);
578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
579:       assertEquals(4095, Node.COLUMN_MASK);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertEquals(46, Node.IS_NAMESPACE);
582:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
583:       assertEquals(1, Node.DECR_FLAG);
584:       assertEquals(32, Node.INCRDECR_PROP);
585:       assertFalse(node0.isInstanceOf());
586:       assertFalse(node0.isThis());
587:       assertFalse(node0.isObjectLit());
588:       assertFalse(node0.isComma());
589:       assertFalse(node0.isNot());
590:       assertFalse(node0.isWith());
591:       assertFalse(node0.isBreak());
592:       assertFalse(node0.isAnd());
593:       assertFalse(node0.isExprResult());
594:       assertFalse(node0.isHook());
595:       assertEquals(4095, node0.getCharno());
596:       assertFalse(node0.isAssign());
597:       assertFalse(node0.isString());
598:       assertFalse(node0.isNumber());
599:       assertFalse(node0.hasChildren());
600:       assertFalse(node0.isScript());
601:       assertFalse(node0.isGetProp());
602:       assertFalse(node0.isCase());
603:       assertFalse(node0.hasOneChild());
604:       assertFalse(node0.isIn());
605:       assertFalse(node0.isContinue());
606:       assertFalse(node0.hasMoreThanOneChild());
607:       assertFalse(node0.isIf());
608:       assertFalse(node0.isNE());
609:       assertEquals(3620, node0.getLineno());
610:       assertFalse(node0.isCast());
611:       assertFalse(node0.isFunction());
612:       assertFalse(node0.isFalse());
613:       assertFalse(node0.isThrow());
614:       assertFalse(node0.isInc());
615:       assertFalse(node0.isSetterDef());
616:       assertEquals(14831615, node0.getSourcePosition());
617:       assertFalse(node0.isCatch());
618:       assertEquals(0, node0.getChildCount());
619:       assertFalse(node0.isNull());
620:       assertFalse(node0.isStringKey());
621:       assertFalse(node0.isCall());
622:       assertFalse(node0.isParamList());
623:       assertFalse(node0.isName());
624:       assertFalse(node0.isVoid());
625:       assertFalse(node0.isBlock());
626:       assertFalse(node0.isDebugger());
627:       assertFalse(node0.isRegExp());
628:       assertFalse(node0.isWhile());
629:       assertFalse(node0.isGetterDef());
630:       assertFalse(node0.isFor());
631:       assertFalse(node0.isTry());
632:       assertFalse(node0.isReturn());
633:       assertFalse(node0.isLabel());
634:       assertFalse(node0.isAssignAdd());
635:       assertFalse(node0.isTypeOf());
636:       assertFalse(node0.isDec());
637:       assertFalse(node0.isOr());
638:       assertFalse(node0.isDelProp());
639:       assertFalse(node0.isGetElem());
640:       assertFalse(node0.isSwitch());
641:       assertFalse(node0.isArrayLit());
642:       assertFalse(node0.isLabelName());
643:       assertFalse(node0.isAdd());
644:       assertFalse(node0.isVar());
645:       assertFalse(node0.isTrue());
646:       assertFalse(node0.isDefaultCase());
647:       assertFalse(node0.isEmpty());
648:       assertEquals((-3604), node0.getType());
649:       assertFalse(node0.isNew());
650:       assertFalse(node0.isDo());
651:       assertFalse(node0.equals((Object)node2));
652:       assertFalse(node0.equals((Object)node3));
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(iterable0.contains(node1));
655:       assertNotNull(iterable0);
656:       
657:       boolean boolean0 = node0.isReturn();
658:       assertEquals(57, Node.REFLECTED_OBJECT);
659:       assertEquals(40, Node.ORIGINALNAME_PROP);
660:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
661:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
662:       assertEquals(52, Node.LENGTH);
663:       assertEquals(50, Node.FREE_CALL);
664:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
665:       assertEquals(54, Node.SLASH_V);
666:       assertEquals(48, Node.DIRECTIVES);
667:       assertEquals(49, Node.DIRECT_EVAL);
668:       assertEquals(55, Node.INFERRED_FUNCTION);
669:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
670:       assertEquals(30, Node.VAR_ARGS_NAME);
671:       assertEquals(8, Node.FLAG_NO_THROWS);
672:       assertEquals(2, Node.POST_FLAG);
673:       assertEquals(15, Node.NO_SIDE_EFFECTS);
674:       assertEquals(47, Node.IS_DISPATCHER);
675:       assertEquals(57, Node.LAST_PROP);
676:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
677:       assertEquals(39, Node.EMPTY_BLOCK);
678:       assertEquals(29, Node.JSDOC_INFO_PROP);
679:       assertEquals(53, Node.INPUT_ID);
680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
681:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
682:       assertEquals(43, Node.IS_CONSTANT_NAME);
683:       assertEquals(56, Node.CHANGE_TIME);
684:       assertEquals(36, Node.QUOTED_PROP);
685:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
686:       assertEquals(37, Node.OPT_ARG_NAME);
687:       assertEquals(51, Node.STATIC_SOURCE_FILE);
688:       assertEquals(4095, Node.COLUMN_MASK);
689:       assertEquals(12, Node.COLUMN_BITS);
690:       assertEquals(46, Node.IS_NAMESPACE);
691:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
692:       assertEquals(1, Node.DECR_FLAG);
693:       assertEquals(32, Node.INCRDECR_PROP);
694:       assertFalse(node0.isInstanceOf());
695:       assertFalse(node0.isThis());
696:       assertFalse(node0.isObjectLit());
697:       assertFalse(node0.isComma());
698:       assertFalse(node0.isNot());
699:       assertFalse(node0.isWith());
700:       assertFalse(node0.isBreak());
701:       assertFalse(node0.isAnd());
702:       assertFalse(node0.isExprResult());
703:       assertFalse(node0.isHook());
704:       assertEquals(4095, node0.getCharno());
705:       assertFalse(node0.isAssign());
706:       assertFalse(node0.isString());
707:       assertFalse(node0.isNumber());
708:       assertFalse(node0.hasChildren());
709:       assertFalse(node0.isScript());
710:       assertFalse(node0.isGetProp());
711:       assertFalse(node0.isCase());
712:       assertFalse(node0.hasOneChild());
713:       assertFalse(node0.isIn());
714:       assertFalse(node0.isContinue());
715:       assertFalse(node0.hasMoreThanOneChild());
716:       assertFalse(node0.isIf());
717:       assertFalse(node0.isNE());
718:       assertEquals(3620, node0.getLineno());
719:       assertFalse(node0.isCast());
720:       assertFalse(node0.isFunction());
721:       assertFalse(node0.isFalse());
722:       assertFalse(node0.isThrow());
723:       assertFalse(node0.isInc());
724:       assertFalse(node0.isSetterDef());
725:       assertEquals(14831615, node0.getSourcePosition());
726:       assertFalse(node0.isCatch());
727:       assertEquals(0, node0.getChildCount());
728:       assertFalse(node0.isNull());
729:       assertFalse(node0.isStringKey());
730:       assertFalse(node0.isCall());
731:       assertFalse(node0.isParamList());
732:       assertFalse(node0.isName());
733:       assertFalse(node0.isVoid());
734:       assertFalse(node0.isBlock());
735:       assertFalse(node0.isDebugger());
736:       assertFalse(node0.isRegExp());
737:       assertFalse(node0.isWhile());
738:       assertFalse(node0.isGetterDef());
739:       assertFalse(node0.isFor());
740:       assertFalse(node0.isTry());
741:       assertFalse(node0.isReturn());
742:       assertFalse(node0.isLabel());
743:       assertFalse(node0.isAssignAdd());
744:       assertFalse(node0.isTypeOf());
745:       assertFalse(node0.isDec());
746:       assertFalse(node0.isOr());
747:       assertFalse(node0.isDelProp());
748:       assertFalse(node0.isGetElem());
749:       assertFalse(node0.isSwitch());
750:       assertFalse(node0.isArrayLit());
751:       assertFalse(node0.isLabelName());
752:       assertFalse(node0.isAdd());
753:       assertFalse(node0.isVar());
754:       assertFalse(node0.isTrue());
755:       assertFalse(node0.isDefaultCase());
756:       assertFalse(node0.isEmpty());
757:       assertEquals((-3604), node0.getType());
758:       assertFalse(node0.isNew());
759:       assertFalse(node0.isDo());
760:       assertFalse(node0.equals((Object)node2));
761:       assertFalse(node0.equals((Object)node3));
762:       assertFalse(node0.equals((Object)node1));
763:       assertFalse(boolean0);
764:       
765:       boolean boolean1 = node3.isGetElem();
766:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
767:       assertEquals(48, Node.DIRECTIVES);
768:       assertEquals(8, Node.FLAG_NO_THROWS);
769:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
770:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
771:       assertEquals(40, Node.ORIGINALNAME_PROP);
772:       assertEquals(39, Node.EMPTY_BLOCK);
773:       assertEquals(4095, Node.COLUMN_MASK);
774:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
775:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
776:       assertEquals(36, Node.QUOTED_PROP);
777:       assertEquals(57, Node.LAST_PROP);
778:       assertEquals(52, Node.LENGTH);
779:       assertEquals(49, Node.DIRECT_EVAL);
780:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
781:       assertEquals(15, Node.NO_SIDE_EFFECTS);
782:       assertEquals(53, Node.INPUT_ID);
783:       assertEquals(55, Node.INFERRED_FUNCTION);
784:       assertEquals(57, Node.REFLECTED_OBJECT);
785:       assertEquals(2, Node.POST_FLAG);
786:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
787:       assertEquals(37, Node.OPT_ARG_NAME);
788:       assertEquals(56, Node.CHANGE_TIME);
789:       assertEquals(29, Node.JSDOC_INFO_PROP);
790:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
791:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
792:       assertEquals(32, Node.INCRDECR_PROP);
793:       assertEquals(1, Node.DECR_FLAG);
794:       assertEquals(30, Node.VAR_ARGS_NAME);
795:       assertEquals(47, Node.IS_DISPATCHER);
796:       assertEquals(12, Node.COLUMN_BITS);
797:       assertEquals(43, Node.IS_CONSTANT_NAME);
798:       assertEquals(51, Node.STATIC_SOURCE_FILE);
799:       assertEquals(50, Node.FREE_CALL);
800:       assertEquals(46, Node.IS_NAMESPACE);
801:       assertEquals(54, Node.SLASH_V);
802:       assertFalse(node3.isWith());
803:       assertFalse(node3.isNot());
804:       assertFalse(node3.isScript());
805:       assertFalse(node3.isExprResult());
806:       assertFalse(node3.hasOneChild());
807:       assertFalse(node3.isInstanceOf());
808:       assertFalse(node3.isThis());
809:       assertFalse(node3.isNumber());
810:       assertEquals((-1), node3.getSourcePosition());
811:       assertFalse(node3.isLabelName());
812:       assertFalse(node3.isFalse());
813:       assertFalse(node3.isGetProp());
814:       assertFalse(node3.isCast());
815:       assertFalse(node3.isObjectLit());
816:       assertFalse(node3.isAnd());
817:       assertEquals((-1), node3.getCharno());
818:       assertFalse(node3.isContinue());
819:       assertFalse(node3.isCase());
820:       assertFalse(node3.isInc());
821:       assertFalse(node3.isHook());
822:       assertFalse(node3.hasMoreThanOneChild());
823:       assertFalse(node3.isThrow());
824:       assertFalse(node3.isBlock());
825:       assertFalse(node3.isIf());
826:       assertFalse(node3.isSetterDef());
827:       assertFalse(node3.isIn());
828:       assertEquals((-1), node3.getLineno());
829:       assertFalse(node3.isNE());
830:       assertFalse(node3.isDefaultCase());
831:       assertFalse(node3.isFunction());
832:       assertFalse(node3.isRegExp());
833:       assertFalse(node3.isVoid());
834:       assertFalse(node3.isCatch());
835:       assertEquals(0, node3.getChildCount());
836:       assertFalse(node3.isTry());
837:       assertFalse(node3.isFor());
838:       assertFalse(node3.isGetterDef());
839:       assertFalse(node3.isArrayLit());
840:       assertFalse(node3.isStringKey());
841:       assertFalse(node3.isDebugger());
842:       assertFalse(node3.isParamList());
843:       assertFalse(node3.isWhile());
844:       assertEquals((-1883), node3.getType());
845:       assertFalse(node3.isString());
846:       assertFalse(node3.isSwitch());
847:       assertFalse(node3.isDo());
848:       assertFalse(node3.isNew());
849:       assertFalse(node3.isAdd());
850:       assertFalse(node3.isAssignAdd());
851:       assertFalse(node3.isLabel());
852:       assertFalse(node3.isReturn());
853:       assertFalse(node3.isVar());
854:       assertFalse(node3.isDec());
855:       assertFalse(node3.isBreak());
856:       assertFalse(node3.hasChildren());
857:       assertFalse(node3.isComma());
858:       assertFalse(node3.isAssign());
859:       assertFalse(node3.isName());
860:       assertFalse(node3.isDelProp());
861:       assertFalse(node3.isTypeOf());
862:       assertFalse(node3.isGetElem());
863:       assertFalse(node3.isCall());
864:       assertFalse(node3.isEmpty());
865:       assertFalse(node3.isOr());
866:       assertFalse(node3.isNull());
867:       assertFalse(node3.isTrue());
868:       assertNotSame(node3, node1);
869:       assertFalse(node3.equals((Object)node2));
870:       assertFalse(node3.equals((Object)node0));
871:       assertFalse(node3.equals((Object)node1));
872:       assertTrue(boolean1 == boolean0);
873:       assertFalse(boolean1);
874:   }
875: }
RegularFileObject[/tmp/EvoSuite_106_1628255806956/com/google/javascript/rhino/Node_106_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:16:46 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_106_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_106_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.common.collect.AbstractMapBasedMultimap$1",
119:       "com.google.common.collect.AbstractMapBasedMultimap$2",
120:       "com.google.javascript.rhino.jstype.VoidType",
121:       "com.google.common.base.Joiner",
122:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
123:       "com.google.common.collect.AbstractListMultimap",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.common.collect.AbstractMultimap$Values",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.javascript.rhino.jstype.NamedType",
133:       "com.google.common.collect.Iterators$13",
134:       "com.google.javascript.rhino.InputId",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
174:       "com.google.common.base.Joiner$1",
175:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
176:       "com.google.common.base.Joiner$2",
177:       "com.google.common.collect.ImmutableCollection",
178:       "com.google.common.collect.ImmutableEnumMap",
179:       "com.google.javascript.rhino.jstype.TernaryValue",
180:       "com.google.javascript.rhino.Node$AncestorIterable",
181:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
182:       "com.google.common.collect.Lists$RandomAccessListWrapper",
183:       "com.google.common.collect.ImmutableEnumSet",
184:       "com.google.common.collect.AbstractMultimap$Entries",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.Multimaps$Entries",
223:       "com.google.common.collect.AbstractMultimap",
224:       "com.google.common.collect.Multimap",
225:       "com.google.common.collect.Iterators",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248: 
249:   private static void resetClasses() {
250:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_106_tmp__ESTest_scaffolding.class.getClassLoader()); 
251: 
252:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
253:       "com.google.javascript.rhino.Node",
254:       "com.google.javascript.rhino.Node$NumberNode",
255:       "com.google.javascript.rhino.Node$StringNode",
256:       "com.google.javascript.rhino.Node$AbstractPropListItem",
257:       "com.google.javascript.rhino.Node$ObjectPropListItem",
258:       "com.google.javascript.rhino.Node$IntPropListItem",
259:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
260:       "com.google.javascript.rhino.Node$AncestorIterable",
261:       "com.google.javascript.rhino.Node$NodeMismatch",
262:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
263:       "com.google.javascript.rhino.Node$SideEffectFlags",
264:       "com.google.javascript.rhino.Token",
265:       "com.google.javascript.rhino.SimpleErrorReporter",
266:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
267:       "com.google.common.base.Joiner",
268:       "com.google.common.base.Preconditions",
269:       "com.google.common.base.Joiner$1",
270:       "com.google.common.collect.Collections2",
271:       "com.google.common.base.Joiner$MapJoiner",
272:       "com.google.common.collect.Maps",
273:       "com.google.common.collect.AbstractMultimap",
274:       "com.google.common.collect.AbstractMapBasedMultimap",
275:       "com.google.common.collect.AbstractSetMultimap",
276:       "com.google.common.collect.LinkedHashMultimap",
277:       "com.google.common.collect.AbstractMapEntry",
278:       "com.google.common.collect.ImmutableEntry",
279:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
280:       "com.google.common.collect.AbstractListMultimap",
281:       "com.google.common.collect.ArrayListMultimap",
282:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
283:       "com.google.common.collect.ImmutableCollection",
284:       "com.google.common.collect.RegularImmutableList",
285:       "com.google.common.collect.ObjectArrays",
286:       "com.google.common.collect.ImmutableList",
287:       "com.google.javascript.rhino.jstype.ModificationVisitor",
288:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
289:       "com.google.common.collect.ImmutableCollection$Builder",
290:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
291:       "com.google.common.collect.ImmutableList$Builder",
292:       "com.google.common.collect.UnmodifiableIterator",
293:       "com.google.common.collect.UnmodifiableListIterator",
294:       "com.google.common.collect.Iterators$1",
295:       "com.google.common.collect.Iterators$2",
296:       "com.google.common.collect.Iterators",
297:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
298:       "com.google.javascript.rhino.jstype.JSType$1",
299:       "com.google.javascript.rhino.jstype.JSType",
300:       "com.google.javascript.rhino.jstype.ObjectType",
301:       "com.google.javascript.rhino.jstype.ProxyObjectType",
302:       "com.google.javascript.rhino.jstype.TemplateType",
303:       "com.google.javascript.rhino.jstype.ValueType",
304:       "com.google.javascript.rhino.jstype.BooleanType",
305:       "com.google.javascript.rhino.jstype.NullType",
306:       "com.google.javascript.rhino.jstype.NumberType",
307:       "com.google.javascript.rhino.jstype.StringType",
308:       "com.google.javascript.rhino.jstype.UnknownType",
309:       "com.google.javascript.rhino.jstype.VoidType",
310:       "com.google.javascript.rhino.jstype.AllType",
311:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
312:       "com.google.common.collect.ImmutableMap",
313:       "com.google.common.collect.ImmutableBiMap",
314:       "com.google.common.collect.EmptyImmutableBiMap",
315:       "com.google.javascript.rhino.jstype.PropertyMap$1",
316:       "com.google.javascript.rhino.jstype.PropertyMap",
317:       "com.google.javascript.rhino.jstype.FunctionType",
318:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
319:       "com.google.javascript.rhino.jstype.ArrowType",
320:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
321:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
322:       "com.google.javascript.rhino.jstype.InstanceObjectType",
323:       "com.google.javascript.rhino.jstype.Property",
324:       "com.google.common.collect.Lists",
325:       "com.google.javascript.rhino.jstype.NoObjectType",
326:       "com.google.javascript.rhino.jstype.NoType",
327:       "com.google.javascript.rhino.jstype.NoResolvedType",
328:       "com.google.common.collect.SingletonImmutableList",
329:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
330:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
331:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
332:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
333:       "com.google.javascript.rhino.jstype.UnionType",
334:       "com.google.javascript.rhino.jstype.FunctionBuilder",
335:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
336:       "com.google.common.collect.AbstractMultimap$Values",
337:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
338:       "com.google.common.collect.AbstractMapBasedMultimap$1",
339:       "com.google.common.collect.Multimaps$Entries",
340:       "com.google.common.collect.AbstractMultimap$Entries",
341:       "com.google.common.collect.AbstractMapBasedMultimap$2",
342:       "com.google.javascript.rhino.JSDocInfo",
343:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
344:       "com.google.javascript.rhino.Node$AncestorIterable$1",
345:       "com.google.javascript.rhino.jstype.EnumType",
346:       "com.google.javascript.rhino.jstype.EnumElementType",
347:       "com.google.common.collect.Sets",
348:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
349:       "com.google.common.base.Objects",
350:       "com.google.javascript.rhino.jstype.NamedType",
351:       "com.google.javascript.rhino.jstype.TemplatizedType",
352:       "com.google.javascript.rhino.InputId",
353:       "com.google.common.collect.AbstractIndexedListIterator",
354:       "com.google.common.collect.Iterators$11",
355:       "com.google.common.collect.Sets$ImprovedAbstractSet",
356:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
357:       "com.google.common.collect.Hashing",
358:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
359:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
360:       "com.google.common.collect.ImmutableSet",
361:       "com.google.common.collect.EmptyImmutableSet",
362:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
363:       "com.google.common.collect.Iterables",
364:       "com.google.javascript.rhino.jstype.TernaryValue",
365:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
366:       "com.google.javascript.rhino.JSTypeExpression",
367:       "com.google.javascript.rhino.jstype.JSType$TypePair",
368:       "com.google.javascript.rhino.jstype.JSType$2",
369:       "com.google.common.collect.Iterators$12",
370:       "com.google.common.collect.Platform",
371:       "com.google.javascript.rhino.jstype.BooleanLiteralSet"
372:     );
373:   }
374: }

[MASTER] 13:16:47.047 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-3604), "", 3620, 65536);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(3620, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(14831615, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertEquals((-3604), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertNotNull(node0);

Node node1 = new Node(2, node0, node0, (-31), 37);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(3620, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(14831615, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertEquals((-3604), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node1.isFalse());
assertFalse(node1.isBreak());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isLabelName());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isLabel());
assertTrue(node1.hasChildren());
assertEquals(1, node1.getChildCount());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isArrayLit());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isScript());
assertFalse(node1.isNumber());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertFalse(node1.isCall());
assertEquals(2, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isSetterDef());
assertFalse(node1.isAssign());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isDelProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isReturn());
assertFalse(node1.isVoid());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isExprResult());
assertFalse(node1.isTypeOf());
assertFalse(node1.isContinue());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isWhile());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.equals((Object)node0));
assertNotNull(node1);

Node node2 = Node.newNumber((double) 8, (-1632), 0);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertFalse(node2.isArrayLit());
assertFalse(node2.isTry());
assertFalse(node2.isFor());
assertFalse(node2.isTrue());
assertFalse(node2.isRegExp());
assertFalse(node2.isIf());
assertFalse(node2.isFunction());
assertFalse(node2.isDelProp());
assertFalse(node2.isVoid());
assertFalse(node2.isCatch());
assertFalse(node2.isIn());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNE());
assertFalse(node2.isNull());
assertFalse(node2.isSetterDef());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isInc());
assertFalse(node2.isEmpty());
assertFalse(node2.isName());
assertFalse(node2.isThrow());
assertFalse(node2.isBreak());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.isObjectLit());
assertTrue(node2.isNumber());
assertFalse(node2.isWhile());
assertFalse(node2.isAnd());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDebugger());
assertFalse(node2.isNot());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.hasOneChild());
assertFalse(node2.isTypeOf());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabelName());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isCast());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isOr());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isStringKey());
assertFalse(node2.isVar());
assertFalse(node2.isSwitch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertEquals(39, node2.getType());
assertFalse(node2.isParamList());
assertFalse(node2.isThis());
assertFalse(node2.isScript());
assertFalse(node2.isGetterDef());
assertFalse(node2.isCase());
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertNotNull(node2);

Node node3 = new Node((-1883));
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.hasOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isContinue());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThrow());
assertFalse(node3.isBlock());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNE());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isDebugger());
assertFalse(node3.isParamList());
assertFalse(node3.isWhile());
assertEquals((-1883), node3.getType());
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isVar());
assertFalse(node3.isDec());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertNotNull(node3);

Iterable<Node> iterable0 = node0.children();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(3620, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(14831615, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertEquals((-3604), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));
assertNotNull(iterable0);

boolean boolean0 = node0.isReturn();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(54, Node.SLASH_V);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isObjectLit());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isAnd());
assertFalse(node0.isExprResult());
assertFalse(node0.isHook());
assertEquals(4095, node0.getCharno());
assertFalse(node0.isAssign());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.hasChildren());
assertFalse(node0.isScript());
assertFalse(node0.isGetProp());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(3620, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertEquals(14831615, node0.getSourcePosition());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isCall());
assertFalse(node0.isParamList());
assertFalse(node0.isName());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isOr());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertEquals((-3604), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isDo());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(boolean0);

boolean boolean1 = node3.isGetElem();
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node3.isWith());
assertFalse(node3.isNot());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.hasOneChild());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isThis());
assertFalse(node3.isNumber());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isLabelName());
assertFalse(node3.isFalse());
assertFalse(node3.isGetProp());
assertFalse(node3.isCast());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isContinue());
assertFalse(node3.isCase());
assertFalse(node3.isInc());
assertFalse(node3.isHook());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isThrow());
assertFalse(node3.isBlock());
assertFalse(node3.isIf());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isNE());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isCatch());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isTry());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertFalse(node3.isDebugger());
assertFalse(node3.isParamList());
assertFalse(node3.isWhile());
assertEquals((-1883), node3.getType());
assertFalse(node3.isString());
assertFalse(node3.isSwitch());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isAdd());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabel());
assertFalse(node3.isReturn());
assertFalse(node3.isVar());
assertFalse(node3.isDec());
assertFalse(node3.isBreak());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isAssign());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isEmpty());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertNotSame(node3, node1);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);


* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/13
* Done!

* Computation finished
