* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 14625
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 4168906359
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:00:55.499 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:01:10.038 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:01:46.972 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 13:03:47.571 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Predicate<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 381,0,0| Number of FF evals: 563
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - true: 588,0,0| Number of FF evals: 951
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 588,0,0| Number of FF evals: 289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 4151,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 4151,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 19013,15903,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 4151,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 829,0,0| Number of FF evals: 958
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 4151,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 4151,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 301,0,0| Number of FF evals: 654
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 6843,5523,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 2083,0,0| Number of FF evals: 705
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 231,0,0| Number of FF evals: 642
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 53,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 1077,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 2187,1891,38| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 117,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 2396,2168,26| Number of FF evals: 18078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 21129,16950,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 117,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 4151,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 117,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 4151,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 13956,10941,0| Number of FF evals: 7341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 117,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 384,0,0| Number of FF evals: 1068
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 1077,0,0| Number of FF evals: 741
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 9746,7551,0| Number of FF evals: 17488
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 14095,13675,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 117,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 381,0,0| Number of FF evals: 1313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 117,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 478,0,0| Number of FF evals: 892
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 14958,12376,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 35,0,0| Number of FF evals: 786
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 956,0,0| Number of FF evals: 647
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 588,0,0| Number of FF evals: 612
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 2236,0,0| Number of FF evals: 736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 588,0,0| Number of FF evals: 368
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 2083,0,0| Number of FF evals: 1019
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 3430,3183,180| Number of FF evals: 18078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 117,0,0| Number of FF evals: 115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1117,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 2874,1198,80| Number of FF evals: 7372
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 588: 588,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 1077,0,0| Number of FF evals: 698
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 21,0,0| Number of FF evals: 401
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 8707,7567,18| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I3 Branch 101 IFNONNULL L798 - true: 24,0,0| Number of FF evals: 971
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 88,0,0| Number of FF evals: 619
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: Line 592: 588,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 285,0,0| Number of FF evals: 179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2678,2382,34| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 88,0,0| Number of FF evals: 664
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 969,367,27| Number of FF evals: 3186
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 3328,0,0| Number of FF evals: 2137
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 13486,9104,0| Number of FF evals: 16326
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 3777,3497,148| Number of FF evals: 17876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 956,0,0| Number of FF evals: 711
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: Line 223: 484,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 2777,0,0| Number of FF evals: 1175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 973,0,0| Number of FF evals: 770
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 2206,0,0| Number of FF evals: 920
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 2253,0,0| Number of FF evals: 1118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 22498,19371,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 2154,95,0| Number of FF evals: 2647
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2195: 484,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 39,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 1238,1093,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 39,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 9086,7083,109| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2197: 484,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 79,0,0| Number of FF evals: 703
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2196: 484,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 3406,0,0| Number of FF evals: 1741
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 2083,0,0| Number of FF evals: 812
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 4011,1533,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 1911,1596,494| Number of FF evals: 12282
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 2127,1902,9| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 39,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 39,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 679,130,0| Number of FF evals: 4032
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 6271,4948,0| Number of FF evals: 10385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 4533,4218,1087| Number of FF evals: 18078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 91,0,0| Number of FF evals: 560
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 20,0,0| Number of FF evals: 616
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 3413,0,0| Number of FF evals: 1741
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 2198: 484,0,0| Number of FF evals: 251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 3413,0,0| Number of FF evals: 1741
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 2685,2387,4| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 1945,86,0| Number of FF evals: 2552
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 202,0,0| Number of FF evals: 118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 202,0,0| Number of FF evals: 118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - false: 982,0,0| Number of FF evals: 999
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 1077,0,0| Number of FF evals: 427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 6318,5888,36| Number of FF evals: 16240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 1634,549,0| Number of FF evals: 2740
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 21129,16950,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 586,0,0| Number of FF evals: 738
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 117,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 22173,18961,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 13,0,0| Number of FF evals: 115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 13,0,0| Number of FF evals: 115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 13,0,0| Number of FF evals: 115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 39,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 343,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 2083,0,0| Number of FF evals: 1089
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 10567,10120,5026| Number of FF evals: 14362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 202,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 487,0,0| Number of FF evals: 449
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 2447,1068,0| Number of FF evals: 3741
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 343,0,0| Number of FF evals: 306
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 1766,0,0| Number of FF evals: 605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 2420,0,0| Number of FF evals: 795
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 7543,6735,145| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 16003,12413,159| Number of FF evals: 17876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 202,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 28515,24320,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 8095,6795,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 1337,0,0| Number of FF evals: 1453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 73667,64700,46712| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 19773,10806,0| Number of FF evals: 4651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 2252,0,0| Number of FF evals: 1818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 73667,64700,46615| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 1789,1493,30| Number of FF evals: 13905
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 11,0,0| Number of FF evals: 129
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 588,0,0| Number of FF evals: 564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 2204,1964,4| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 2267,232,0| Number of FF evals: 3407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 39,0,0| Number of FF evals: 1308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 138,0,0| Number of FF evals: 958
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2134,1838,88| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 106,0,0| Number of FF evals: 848
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 4838,1329,0| Number of FF evals: 3108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 11,0,0| Number of FF evals: 129
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 7558,5651,0| Number of FF evals: 6537
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 117,0,0| Number of FF evals: 427
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 2932,0,0| Number of FF evals: 888
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 120,0,0| Number of FF evals: 952
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 795,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 17165,14330,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 33237,30904,0| Number of FF evals: 18043
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 829,0,0| Number of FF evals: 354
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 704,0,0| Number of FF evals: 450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 43,0,0| Number of FF evals: 391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 4326,1148,0| Number of FF evals: 10646
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 829,0,0| Number of FF evals: 377
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 27,0,0| Number of FF evals: 698
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 8548,6396,0| Number of FF evals: 8546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 39,0,0| Number of FF evals: 42
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2220,1980,4| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 1205,0,0| Number of FF evals: 465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 4337,0,0| Number of FF evals: 1237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 20,0,0| Number of FF evals: 378
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2127,1902,9| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: root-Branch: 39,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 4706,0,0| Number of FF evals: 1301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 513,237,0| Number of FF evals: 3733
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 46,0,0| Number of FF evals: 260
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 4649,4278,1121| Number of FF evals: 18198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 25945,21311,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1687,1411,116| Number of FF evals: 11519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 381,0,0| Number of FF evals: 216
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 1766,0,0| Number of FF evals: 743
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 5611,3683,0| Number of FF evals: 6015
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 2178,0,0| Number of FF evals: 1123
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 7599,6916,587| Number of FF evals: 18044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 414,0,0| Number of FF evals: 750
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 1077,0,0| Number of FF evals: 417
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 73667,64700,0| Number of FF evals: 18189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 1205,0,0| Number of FF evals: 493
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 484,0,0| Number of FF evals: 224
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - false: 159,0,0| Number of FF evals: 559
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 550: 117,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 12,0,0| Number of FF evals: 552
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 39,0,0| Number of FF evals: 54
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 39,0,0| Number of FF evals: 54
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 202,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 4270,0,0| Number of FF evals: 1470
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 202,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 202,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 1205,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 202,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 29388,27284,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 2679,2377,17| Number of FF evals: 17209
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 202,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 487,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - true: 59,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 588,0,0| Number of FF evals: 465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 11401,7601,0| Number of FF evals: 7316
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 39,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 2083,0,0| Number of FF evals: 825
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: Line 1839: 1077,0,0| Number of FF evals: 417
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 579,0,0| Number of FF evals: 835
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 14047,12143,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 117,0,0| Number of FF evals: 108
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 117,0,0| Number of FF evals: 482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 137,0,0| Number of FF evals: 437
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 4024,3368,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 1039,0,0| Number of FF evals: 976
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 5953,4918,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 4144,0,0| Number of FF evals: 2030
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 343,0,0| Number of FF evals: 333
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 343,0,0| Number of FF evals: 499
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 381,0,0| Number of FF evals: 748
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 1766,0,0| Number of FF evals: 743
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 1477,0,0| Number of FF evals: 561
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 484,0,0| Number of FF evals: 615
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2026: 39,0,0| Number of FF evals: 42
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: root-Branch: 117,0,0| Number of FF evals: 123
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 25945,21311,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 3283,0,0| Number of FF evals: 1333
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 73667,64700,46742| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 1766,0,0| Number of FF evals: 743
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 2373,678,0| Number of FF evals: 3632
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 285,0,0| Number of FF evals: 176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 12693,11651,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - false: 6,0,0| Number of FF evals: 1375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 6007,0,0| Number of FF evals: 1621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 18504,14396,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 588,0,0| Number of FF evals: 278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 588,0,0| Number of FF evals: 278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1077,0,0| Number of FF evals: 1007
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 956,0,0| Number of FF evals: 508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 2373,678,0| Number of FF evals: 3632
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 2420,0,0| Number of FF evals: 1202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 72,0,0| Number of FF evals: 450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 39,0,0| Number of FF evals: 1266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1178,0,0| Number of FF evals: 1017
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 1704,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 2479,1828,0| Number of FF evals: 11875
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 704,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 704,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 2154,1929,9| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 37,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 1077,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 375,0,0| Number of FF evals: 935
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 39,0,0| Number of FF evals: 170
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 73667,64700,0| Number of FF evals: 18189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 271,0,0| Number of FF evals: 657
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - false: 588,0,0| Number of FF evals: 403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 1924,0,0| Number of FF evals: 676
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 8678,7549,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 2083,0,0| Number of FF evals: 691
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 3706,3410,0| Number of FF evals: 12518
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 165,0,0| Number of FF evals: 573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 6922,0,0| Number of FF evals: 1776
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 824,0,0| Number of FF evals: 1872
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 6922,0,0| Number of FF evals: 1776
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 39,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I13 Branch 102 IF_ICMPNE L800 - true: 25,0,0| Number of FF evals: 967
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 169,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 588,0,0| Number of FF evals: 385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 202,0,0| Number of FF evals: 391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 72,0,0| Number of FF evals: 398
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 23,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 2363,2138,7| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 39,0,0| Number of FF evals: 93
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 23,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 202,0,0| Number of FF evals: 118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 23,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 2089,1868,15| Number of FF evals: 17610
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 72,0,0| Number of FF evals: 438
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 1225,0,0| Number of FF evals: 1795
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 39,0,0| Number of FF evals: 61
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 538,0,0| Number of FF evals: 986
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 310,14,1| Number of FF evals: 2404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 2843,0,0| Number of FF evals: 1687
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 72,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 87,0,0| Number of FF evals: 495
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 32,0,0| Number of FF evals: 126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - false: 67,0,0| Number of FF evals: 1028
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 603,288,56| Number of FF evals: 5023
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 73667,64700,0| Number of FF evals: 18189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 1077,0,0| Number of FF evals: 564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 42,0,0| Number of FF evals: 294
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 460: 395,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 461: 395,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 462: 395,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 4379,3721,0| Number of FF evals: 18203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 12428,7728,0| Number of FF evals: 9718
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 3926,2719,0| Number of FF evals: 9152
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 11811,9648,0| Number of FF evals: 11125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 11,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 4379,3721,0| Number of FF evals: 18203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 73667,64700,0| Number of FF evals: 18189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 2869,2599,118| Number of FF evals: 18078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 72,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 381,0,0| Number of FF evals: 490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 285,0,0| Number of FF evals: 172
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 109,0,0| Number of FF evals: 341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 101,0,0| Number of FF evals: 571
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 190,0,0| Number of FF evals: 285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 588,0,0| Number of FF evals: 289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: root-Branch: 39,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 518,0,0| Number of FF evals: 727
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1687,1417,116| Number of FF evals: 11519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 72,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 1686,0,0| Number of FF evals: 1210
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 72,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 956,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 956,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 956,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 956,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 16161,7194,0| Number of FF evals: 3808
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 956,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 6413,1336,0| Number of FF evals: 3204
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 704,0,0| Number of FF evals: 372
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 956,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 3105,0,0| Number of FF evals: 1032
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 956,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 956,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 39,0,0| Number of FF evals: 472
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 797,501,3| Number of FF evals: 5138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: root-Branch: 39,0,0| Number of FF evals: 841
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 117,0,0| Number of FF evals: 337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 1337,0,0| Number of FF evals: 520
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 596: 956,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 5024,4779,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 2026,1202,0| Number of FF evals: 9122
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 956,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 2226,549,0| Number of FF evals: 3800
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 956,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 956,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 956,0,0| Number of FF evals: 392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 2226,549,0| Number of FF evals: 3800
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 829,0,0| Number of FF evals: 390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - true: 10,0,0| Number of FF evals: 1130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 2226,549,0| Number of FF evals: 3800
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 17564,16770,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 2226,549,0| Number of FF evals: 3800
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 3199,1987,0| Number of FF evals: 7181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 2129,1904,10| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 829,0,0| Number of FF evals: 1017
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 613,293,56| Number of FF evals: 5025
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2429,2197,15| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 7407,5818,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 354,0,0| Number of FF evals: 593
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 1077,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 10356,8043,0| Number of FF evals: 18016
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 1924,0,0| Number of FF evals: 676
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 10479,8188,0| Number of FF evals: 15110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 2005,38,0| Number of FF evals: 3403
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 2203,1139,0| Number of FF evals: 5293
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 39,0,0| Number of FF evals: 1082
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 1205,0,0| Number of FF evals: 455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 72,0,0| Number of FF evals: 176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1783: 39,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - true: 484,0,0| Number of FF evals: 419
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 39,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 589,0,0| Number of FF evals: 1852
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 714,493,8| Number of FF evals: 8498
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 2299,1398,0| Number of FF evals: 7757
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 415: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 1766,0,0| Number of FF evals: 605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 416: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 39,0,0| Number of FF evals: 786
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 1527,0,0| Number of FF evals: 1319
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 411: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 412: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 413: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 414: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 407: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 408: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 409: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: Line 925: 484,0,0| Number of FF evals: 247
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 4703,0,0| Number of FF evals: 1564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 410: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 9837,9006,0| Number of FF evals: 15822
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 403: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 404: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 405: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 406: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 4706,0,0| Number of FF evals: 1319
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 2988,1987,0| Number of FF evals: 8434
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 402: 7,0,0| Number of FF evals: 51
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 15698,12100,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 4706,0,0| Number of FF evals: 1319
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 716,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 265,0,0| Number of FF evals: 988
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 20,0,0| Number of FF evals: 617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - true: 39,0,0| Number of FF evals: 600
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 80,0,0| Number of FF evals: 948
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 1924,0,0| Number of FF evals: 1072
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 588,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 231,0,0| Number of FF evals: 393
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - false: 7,0,0| Number of FF evals: 1330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getStaticSourceFile()Lcom/google/javascript/rhino/jstype/StaticSourceFile;: Line 1109: 39,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - false: 7,0,0| Number of FF evals: 1331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 588,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 117,0,0| Number of FF evals: 93
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 2083,0,0| Number of FF evals: 719
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 13260,10156,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getStaticSourceFile()Lcom/google/javascript/rhino/jstype/StaticSourceFile;: root-Branch: 39,0,0| Number of FF evals: 842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 1153,0,0| Number of FF evals: 1479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 3105,0,0| Number of FF evals: 926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJSType()Lcom/google/javascript/rhino/jstype/JSType;: root-Branch: 1077,0,0| Number of FF evals: 983
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 2532,215,0| Number of FF evals: 3271
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 39,0,0| Number of FF evals: 1183
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 263,0,0| Number of FF evals: 1737
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 8939,6974,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 1337,0,0| Number of FF evals: 1135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - false: 39,0,0| Number of FF evals: 381
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 12265,11818,6145| Number of FF evals: 17843
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 820,0,0| Number of FF evals: 1684
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 1967,491,0| Number of FF evals: 3634
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 201,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 45,0,0| Number of FF evals: 463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 1223,0,0| Number of FF evals: 1374
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 16608,14478,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 259,0,0| Number of FF evals: 487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 1198,464,0| Number of FF evals: 5126
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - true: 704,0,0| Number of FF evals: 674
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 285,0,0| Number of FF evals: 176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 73667,64700,46620| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 202,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 6922,0,0| Number of FF evals: 1890
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 8840,7658,109| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 32,0,0| Number of FF evals: 652
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 795,0,0| Number of FF evals: 457
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 3395,3152,180| Number of FF evals: 17715
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 11179,11100,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 640,49,0| Number of FF evals: 2589
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 3395,3152,181| Number of FF evals: 17715
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 11593,10812,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 22,0,0| Number of FF evals: 901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 10567,10120,5026| Number of FF evals: 14362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 39,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 579,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 1924,0,0| Number of FF evals: 823
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 1337,0,0| Number of FF evals: 1542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 579,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 579,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 10199,8232,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 80,0,0| Number of FF evals: 692
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 579,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 24205,20609,0| Number of FF evals: 16666
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 4337,0,0| Number of FF evals: 1387
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 579,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 579,0,0| Number of FF evals: 731
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 4516,0,0| Number of FF evals: 1251
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 3,0,0| Number of FF evals: 213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 39,0,0| Number of FF evals: 43
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 225,0,0| Number of FF evals: 1149
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 3283,0,0| Number of FF evals: 977
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 5942,5125,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 5942,5125,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 35,0,0| Number of FF evals: 786
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1015: 39,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 202,0,0| Number of FF evals: 551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 113,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 13225,12054,24| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 43,0,0| Number of FF evals: 1225
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1016: 39,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 23,0,0| Number of FF evals: 83
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 567,0,0| Number of FF evals: 835
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 829,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 421,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 3428,1984,0| Number of FF evals: 6117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 73667,64700,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 39,0,0| Number of FF evals: 45
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 1131,899,1| Number of FF evals: 11088
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 39,0,0| Number of FF evals: 45
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 201,0,0| Number of FF evals: 1016
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 4706,0,0| Number of FF evals: 1348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 39,0,0| Number of FF evals: 1543
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 5170,0,0| Number of FF evals: 1470
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTree()Ljava/lang/String;: Line 1010: 39,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 80,0,0| Number of FF evals: 584
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 2355,2123,1| Number of FF evals: 18078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 39,0,0| Number of FF evals: 483
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 1300,0,0| Number of FF evals: 1436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 39,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1103: 39,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 39,0,0| Number of FF evals: 77
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 39,0,0| Number of FF evals: 45
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 45 IFNONNULL L421 - true: 233,0,0| Number of FF evals: 682
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 1742,0,0| Number of FF evals: 844
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: Line 1104: 39,0,0| Number of FF evals: 46
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 956,0,0| Number of FF evals: 415
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 381,0,0| Number of FF evals: 221
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 1620,0,0| Number of FF evals: 589
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 588,0,0| Number of FF evals: 443
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 2932,0,0| Number of FF evals: 1631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 3801,0,0| Number of FF evals: 1169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 4771,4006,177| Number of FF evals: 18203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 90,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 3968,0,0| Number of FF evals: 1193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 541,0,0| Number of FF evals: 1613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 12223,10371,12| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - false: 70,0,0| Number of FF evals: 342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 72,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 3672,2520,0| Number of FF evals: 8404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 72,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 285,0,0| Number of FF evals: 425
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 220,0,0| Number of FF evals: 422
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 140,0,0| Number of FF evals: 356
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 1337,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 4151,0,0| Number of FF evals: 1193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - false: 39,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 589,0,0| Number of FF evals: 1852
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 39,0,0| Number of FF evals: 117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - true: 72,0,0| Number of FF evals: 1186
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 8751,7604,55| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 151,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 16009,10367,0| Number of FF evals: 16849
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 369,0,0| Number of FF evals: 425
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 206,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 6007,0,0| Number of FF evals: 1583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 1620,0,0| Number of FF evals: 574
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 20,0,0| Number of FF evals: 540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 2543,2331,560| Number of FF evals: 13392
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 4379,3721,0| Number of FF evals: 18203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 117,0,0| Number of FF evals: 149
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 2872,2135,0| Number of FF evals: 3433
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 173,0,0| Number of FF evals: 226
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 2633,2337,147| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 3395,3152,181| Number of FF evals: 17715
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 10566,8599,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - true: 8,0,0| Number of FF evals: 1180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 381,0,0| Number of FF evals: 208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 8988,7016,42| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - false: 7,0,0| Number of FF evals: 1375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcref(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 39,0,0| Number of FF evals: 172
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 1131,899,1| Number of FF evals: 11088
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 1077,0,0| Number of FF evals: 971
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 17133,14852,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 21210,19580,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 1337,0,0| Number of FF evals: 1540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 518,0,0| Number of FF evals: 724
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 3801,0,0| Number of FF evals: 1112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 7986,6008,0| Number of FF evals: 12502
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 180,0,0| Number of FF evals: 950
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1762: 704,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1763: 704,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 201,0,0| Number of FF evals: 411
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 39,0,0| Number of FF evals: 76
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 525,0,0| Number of FF evals: 1607
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1768: 704,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 202,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 202,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 43,0,0| Number of FF evals: 213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 1026,0,0| Number of FF evals: 2019
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 54,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 338,42,1| Number of FF evals: 2617
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 1477,0,0| Number of FF evals: 675
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 620: 588,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 1485,1215,9| Number of FF evals: 12279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 848,267,0| Number of FF evals: 4679
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 3496,3216,113| Number of FF evals: 17876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 588,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 588,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 588,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 588,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 101,0,0| Number of FF evals: 567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 515,275,1| Number of FF evals: 5463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - true: 117,0,0| Number of FF evals: 587
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 493,213,0| Number of FF evals: 3531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 588,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 8,0,0| Number of FF evals: 129
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 35,0,0| Number of FF evals: 261
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 369,0,0| Number of FF evals: 446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 77,0,0| Number of FF evals: 397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 956,0,0| Number of FF evals: 385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 2580,2284,34| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 8141,7378,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 1931,79,1| Number of FF evals: 2318
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 4703,0,0| Number of FF evals: 1564
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 21497,17309,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 11,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 16450,15031,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 2083,0,0| Number of FF evals: 721
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 4151,0,0| Number of FF evals: 1193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 3413,0,0| Number of FF evals: 1627
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(I)V: I13 Branch 100 IF_ACMPEQ L786 - false: 489,0,0| Number of FF evals: 558
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 3413,0,0| Number of FF evals: 1627
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 6960,5781,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 6960,5781,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 19039,16501,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 1766,0,0| Number of FF evals: 605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 19261,16669,168| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setQuotedString()V: Line 2188: 117,0,0| Number of FF evals: 81
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 39,0,0| Number of FF evals: 480
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 36,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - false: 202,0,0| Number of FF evals: 375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 3107,0,0| Number of FF evals: 1482
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 25358,21389,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 39,0,0| Number of FF evals: 78
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 22833,22240,53| Number of FF evals: 18106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 39,0,0| Number of FF evals: 43
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 285,0,0| Number of FF evals: 150
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 1477,0,0| Number of FF evals: 1017
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 6033,4862,1221| Number of FF evals: 18198
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 19773,10806,0| Number of FF evals: 4651
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;)Z: Line 1492: 1077,0,0| Number of FF evals: 418
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 4706,0,0| Number of FF evals: 1881
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 1442,271,73| Number of FF evals: 2944
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: Line 889: 39,0,0| Number of FF evals: 73
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 14461,12790,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 26165,22335,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 117,0,0| Number of FF evals: 86
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 6684,870,0| Number of FF evals: 2969
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 2005,38,0| Number of FF evals: 3405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 704,0,0| Number of FF evals: 304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 4516,0,0| Number of FF evals: 1338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 704,0,0| Number of FF evals: 304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 6354,4677,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 174,0,0| Number of FF evals: 290
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 1337,0,0| Number of FF evals: 1455
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 15848,10497,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 588,0,0| Number of FF evals: 529
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 202,0,0| Number of FF evals: 138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 201,0,0| Number of FF evals: 661
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 171,0,0| Number of FF evals: 402
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 1477,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 158,0,0| Number of FF evals: 531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 1831,1063,0| Number of FF evals: 3632
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 2353,2125,0| Number of FF evals: 18078
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 588,0,0| Number of FF evals: 278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 753,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 77,0,0| Number of FF evals: 484
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 117,0,0| Number of FF evals: 257
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 95,0,0| Number of FF evals: 1171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 39,0,0| Number of FF evals: 807
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 1428,24,0| Number of FF evals: 2260
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 484,0,0| Number of FF evals: 1229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 20191,19116,0| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 202,0,0| Number of FF evals: 519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1149: 202,0,0| Number of FF evals: 140
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 21012,19404,0| Number of FF evals: 18134
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 2226,549,0| Number of FF evals: 3865
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 2590,0,0| Number of FF evals: 840
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 39,0,0| Number of FF evals: 73
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: Line 1148: 202,0,0| Number of FF evals: 140
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 2306,1042,0| Number of FF evals: 5135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 21012,19404,0| Number of FF evals: 18134
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 39,0,0| Number of FF evals: 114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 8356,4368,21| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 117,0,0| Number of FF evals: 87
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 117,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 412,0,0| Number of FF evals: 499
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 1442,271,74| Number of FF evals: 2944
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 381,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 9411,8295,0| Number of FF evals: 17320
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 113,0,0| Number of FF evals: 1141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 956,0,0| Number of FF evals: 598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 381,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 956,0,0| Number of FF evals: 597
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 3801,0,0| Number of FF evals: 1090
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 39,0,0| Number of FF evals: 283
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 22556,20106,0| Number of FF evals: 16152
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 16161,7194,0| Number of FF evals: 3809
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 3801,0,0| Number of FF evals: 1090
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 381,0,0| Number of FF evals: 189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 1086,0,0| Number of FF evals: 633
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1116: 39,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setInputId(Lcom/google/javascript/rhino/InputId;)V: Line 1117: 39,0,0| Number of FF evals: 52
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 3647,309,0| Number of FF evals: 2396
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 2590,0,0| Number of FF evals: 914
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 656,360,25| Number of FF evals: 4876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 73667,64700,0| Number of FF evals: 18189
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 2134,1838,88| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 25362,22912,0| Number of FF evals: 17681
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 252,0,0| Number of FF evals: 831
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 2173,503,0| Number of FF evals: 3864
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 73667,64700,46670| Number of FF evals: 18195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 21,0,0| Number of FF evals: 1194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 6727,6050,36| Number of FF evals: 17843
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - false: 10,0,0| Number of FF evals: 779
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 956,0,0| Number of FF evals: 470
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 36,0,0| Number of FF evals: 391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 3801,0,0| Number of FF evals: 1115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 1077,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.<init>(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: root-Branch: 484,0,0| Number of FF evals: 1516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - false: 484,0,0| Number of FF evals: 508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 285,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 2253,0,0| Number of FF evals: 732
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 385,0,0| Number of FF evals: 415
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 1474,0,0| Number of FF evals: 1977
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 499,0,0| Number of FF evals: 706
* Search finished after 604s and 426 generations, 197711 statements, best individual has fitness: 3001.0
* Minimizing test suite
[MASTER] 13:12:22.106 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 785
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 714
* Number of covered goals: 600
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 103
* Number of covered goals: 103
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 457
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 47%
* Total number of goals: 4536
* Number of covered goals: 2123
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 78%
* Total number of goals: 714
* Number of covered goals: 555
* Generated 682 tests with total length 9826
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:13:36.443 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7102166666666667% of time used, but only 28/682 tests minimized), falling back to using all assertions
[MASTER] 13:13:53.947 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 13:14:05.287 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 13:14:15.403 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_55_1628255654549/com/google/javascript/rhino/Node_55_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_55_1628255654549/com/google/javascript/rhino/Node_55_tmp__ESTest_scaffolding.java]]
[MASTER] 13:14:15.403 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:15.403 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:15.409 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 229
[MASTER] 13:14:15.415 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_55_1628255654549/com/google/javascript/rhino/Node_55_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:14:14 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_55_tmp__ESTest extends Node_55_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("GYoa", 147, 147);
21:       assertEquals(30, Node.VAR_ARGS_NAME);
22:       assertEquals(49, Node.DIRECT_EVAL);
23:       assertEquals(15, Node.NO_SIDE_EFFECTS);
24:       assertEquals(1, Node.DECR_FLAG);
25:       assertEquals(54, Node.SLASH_V);
26:       assertEquals(57, Node.LAST_PROP);
27:       assertEquals(32, Node.INCRDECR_PROP);
28:       assertEquals(46, Node.IS_NAMESPACE);
29:       assertEquals(51, Node.STATIC_SOURCE_FILE);
30:       assertEquals(57, Node.REFLECTED_OBJECT);
31:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
32:       assertEquals(52, Node.LENGTH);
33:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(37, Node.OPT_ARG_NAME);
36:       assertEquals(48, Node.DIRECTIVES);
37:       assertEquals(56, Node.CHANGE_TIME);
38:       assertEquals(12, Node.COLUMN_BITS);
39:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
40:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
41:       assertEquals(4095, Node.COLUMN_MASK);
42:       assertEquals(36, Node.QUOTED_PROP);
43:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
44:       assertEquals(43, Node.IS_CONSTANT_NAME);
45:       assertEquals(53, Node.INPUT_ID);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(39, Node.EMPTY_BLOCK);
48:       assertEquals(55, Node.INFERRED_FUNCTION);
49:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
50:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
51:       assertEquals(29, Node.JSDOC_INFO_PROP);
52:       assertEquals(50, Node.FREE_CALL);
53:       assertEquals(47, Node.IS_DISPATCHER);
54:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
55:       assertEquals(40, Node.ORIGINALNAME_PROP);
56:       assertEquals(2, Node.POST_FLAG);
57:       assertNotNull(node0);
58:       assertFalse(node0.isArrayLit());
59:       assertFalse(node0.isTry());
60:       assertFalse(node0.isEmpty());
61:       assertFalse(node0.isNE());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isIf());
64:       assertFalse(node0.isDelProp());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isDebugger());
67:       assertFalse(node0.isTrue());
68:       assertFalse(node0.isCatch());
69:       assertFalse(node0.isCase());
70:       assertFalse(node0.isRegExp());
71:       assertEquals(602259, node0.getSourcePosition());
72:       assertFalse(node0.isFor());
73:       assertFalse(node0.isHook());
74:       assertFalse(node0.isFalse());
75:       assertFalse(node0.isInc());
76:       assertFalse(node0.isIn());
77:       assertFalse(node0.isContinue());
78:       assertFalse(node0.isAnd());
79:       assertFalse(node0.isSetterDef());
80:       assertFalse(node0.isFunction());
81:       assertFalse(node0.isThrow());
82:       assertEquals(40, node0.getType());
83:       assertFalse(node0.isCast());
84:       assertFalse(node0.hasOneChild());
85:       assertFalse(node0.isLabelName());
86:       assertFalse(node0.isExprResult());
87:       assertFalse(node0.isGetElem());
88:       assertFalse(node0.isScript());
89:       assertEquals(147, node0.getLineno());
90:       assertFalse(node0.isNumber());
91:       assertFalse(node0.isOr());
92:       assertFalse(node0.isNot());
93:       assertFalse(node0.hasMoreThanOneChild());
94:       assertFalse(node0.isInstanceOf());
95:       assertFalse(node0.isObjectLit());
96:       assertFalse(node0.isGetProp());
97:       assertFalse(node0.isDec());
98:       assertFalse(node0.isComma());
99:       assertFalse(node0.isWith());
100:       assertFalse(node0.isTypeOf());
101:       assertTrue(node0.isString());
102:       assertFalse(node0.isAssign());
103:       assertFalse(node0.isWhile());
104:       assertFalse(node0.hasChildren());
105:       assertFalse(node0.isBlock());
106:       assertFalse(node0.isThis());
107:       assertFalse(node0.isReturn());
108:       assertFalse(node0.isVar());
109:       assertFalse(node0.isName());
110:       assertFalse(node0.isAdd());
111:       assertFalse(node0.isNew());
112:       assertFalse(node0.isBreak());
113:       assertFalse(node0.isCall());
114:       assertFalse(node0.isSwitch());
115:       assertFalse(node0.isParamList());
116:       assertFalse(node0.isStringKey());
117:       assertFalse(node0.isNull());
118:       assertEquals(0, node0.getChildCount());
119:       assertFalse(node0.isDo());
120:       assertFalse(node0.isDefaultCase());
121:       assertEquals(147, node0.getCharno());
122:       assertFalse(node0.isLabel());
123:       assertFalse(node0.isAssignAdd());
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertEquals(30, Node.VAR_ARGS_NAME);
127:       assertEquals(49, Node.DIRECT_EVAL);
128:       assertEquals(15, Node.NO_SIDE_EFFECTS);
129:       assertEquals(1, Node.DECR_FLAG);
130:       assertEquals(54, Node.SLASH_V);
131:       assertEquals(57, Node.LAST_PROP);
132:       assertEquals(32, Node.INCRDECR_PROP);
133:       assertEquals(46, Node.IS_NAMESPACE);
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(57, Node.REFLECTED_OBJECT);
136:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
137:       assertEquals(52, Node.LENGTH);
138:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
139:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
140:       assertEquals(37, Node.OPT_ARG_NAME);
141:       assertEquals(48, Node.DIRECTIVES);
142:       assertEquals(56, Node.CHANGE_TIME);
143:       assertEquals(12, Node.COLUMN_BITS);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
146:       assertEquals(4095, Node.COLUMN_MASK);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(43, Node.IS_CONSTANT_NAME);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(8, Node.FLAG_NO_THROWS);
152:       assertEquals(39, Node.EMPTY_BLOCK);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
156:       assertEquals(29, Node.JSDOC_INFO_PROP);
157:       assertEquals(50, Node.FREE_CALL);
158:       assertEquals(47, Node.IS_DISPATCHER);
159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
160:       assertEquals(40, Node.ORIGINALNAME_PROP);
161:       assertEquals(2, Node.POST_FLAG);
162:       assertNotNull(iterable0);
163:       assertFalse(node0.isArrayLit());
164:       assertFalse(node0.isTry());
165:       assertFalse(node0.isEmpty());
166:       assertFalse(node0.isNE());
167:       assertFalse(node0.isVoid());
168:       assertFalse(node0.isIf());
169:       assertFalse(node0.isDelProp());
170:       assertFalse(node0.isGetterDef());
171:       assertFalse(node0.isDebugger());
172:       assertFalse(node0.isTrue());
173:       assertFalse(node0.isCatch());
174:       assertFalse(node0.isCase());
175:       assertFalse(node0.isRegExp());
176:       assertEquals(602259, node0.getSourcePosition());
177:       assertFalse(node0.isFor());
178:       assertFalse(node0.isHook());
179:       assertFalse(node0.isFalse());
180:       assertFalse(node0.isInc());
181:       assertFalse(node0.isIn());
182:       assertFalse(node0.isContinue());
183:       assertFalse(node0.isAnd());
184:       assertFalse(node0.isSetterDef());
185:       assertFalse(node0.isFunction());
186:       assertFalse(node0.isThrow());
187:       assertEquals(40, node0.getType());
188:       assertFalse(node0.isCast());
189:       assertFalse(node0.hasOneChild());
190:       assertFalse(node0.isLabelName());
191:       assertFalse(node0.isExprResult());
192:       assertFalse(node0.isGetElem());
193:       assertFalse(node0.isScript());
194:       assertEquals(147, node0.getLineno());
195:       assertFalse(node0.isNumber());
196:       assertFalse(node0.isOr());
197:       assertFalse(node0.isNot());
198:       assertFalse(node0.hasMoreThanOneChild());
199:       assertFalse(node0.isInstanceOf());
200:       assertFalse(node0.isObjectLit());
201:       assertFalse(node0.isGetProp());
202:       assertFalse(node0.isDec());
203:       assertFalse(node0.isComma());
204:       assertFalse(node0.isWith());
205:       assertFalse(node0.isTypeOf());
206:       assertTrue(node0.isString());
207:       assertFalse(node0.isAssign());
208:       assertFalse(node0.isWhile());
209:       assertFalse(node0.hasChildren());
210:       assertFalse(node0.isBlock());
211:       assertFalse(node0.isThis());
212:       assertFalse(node0.isReturn());
213:       assertFalse(node0.isVar());
214:       assertFalse(node0.isName());
215:       assertFalse(node0.isAdd());
216:       assertFalse(node0.isNew());
217:       assertFalse(node0.isBreak());
218:       assertFalse(node0.isCall());
219:       assertFalse(node0.isSwitch());
220:       assertFalse(node0.isParamList());
221:       assertFalse(node0.isStringKey());
222:       assertFalse(node0.isNull());
223:       assertEquals(0, node0.getChildCount());
224:       assertFalse(node0.isDo());
225:       assertFalse(node0.isDefaultCase());
226:       assertEquals(147, node0.getCharno());
227:       assertFalse(node0.isLabel());
228:       assertFalse(node0.isAssignAdd());
229:       assertFalse(iterable0.contains(node0));
230:       
231:       node0.putIntProp(0, 0);
232:       assertEquals(30, Node.VAR_ARGS_NAME);
233:       assertEquals(49, Node.DIRECT_EVAL);
234:       assertEquals(15, Node.NO_SIDE_EFFECTS);
235:       assertEquals(1, Node.DECR_FLAG);
236:       assertEquals(54, Node.SLASH_V);
237:       assertEquals(57, Node.LAST_PROP);
238:       assertEquals(32, Node.INCRDECR_PROP);
239:       assertEquals(46, Node.IS_NAMESPACE);
240:       assertEquals(51, Node.STATIC_SOURCE_FILE);
241:       assertEquals(57, Node.REFLECTED_OBJECT);
242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
243:       assertEquals(52, Node.LENGTH);
244:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
246:       assertEquals(37, Node.OPT_ARG_NAME);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(56, Node.CHANGE_TIME);
249:       assertEquals(12, Node.COLUMN_BITS);
250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
251:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
252:       assertEquals(4095, Node.COLUMN_MASK);
253:       assertEquals(36, Node.QUOTED_PROP);
254:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
255:       assertEquals(43, Node.IS_CONSTANT_NAME);
256:       assertEquals(53, Node.INPUT_ID);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(39, Node.EMPTY_BLOCK);
259:       assertEquals(55, Node.INFERRED_FUNCTION);
260:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
261:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
262:       assertEquals(29, Node.JSDOC_INFO_PROP);
263:       assertEquals(50, Node.FREE_CALL);
264:       assertEquals(47, Node.IS_DISPATCHER);
265:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
266:       assertEquals(40, Node.ORIGINALNAME_PROP);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertFalse(node0.isArrayLit());
269:       assertFalse(node0.isTry());
270:       assertFalse(node0.isEmpty());
271:       assertFalse(node0.isNE());
272:       assertFalse(node0.isVoid());
273:       assertFalse(node0.isIf());
274:       assertFalse(node0.isDelProp());
275:       assertFalse(node0.isGetterDef());
276:       assertFalse(node0.isDebugger());
277:       assertFalse(node0.isTrue());
278:       assertFalse(node0.isCatch());
279:       assertFalse(node0.isCase());
280:       assertFalse(node0.isRegExp());
281:       assertEquals(602259, node0.getSourcePosition());
282:       assertFalse(node0.isFor());
283:       assertFalse(node0.isHook());
284:       assertFalse(node0.isFalse());
285:       assertFalse(node0.isInc());
286:       assertFalse(node0.isIn());
287:       assertFalse(node0.isContinue());
288:       assertFalse(node0.isAnd());
289:       assertFalse(node0.isSetterDef());
290:       assertFalse(node0.isFunction());
291:       assertFalse(node0.isThrow());
292:       assertEquals(40, node0.getType());
293:       assertFalse(node0.isCast());
294:       assertFalse(node0.hasOneChild());
295:       assertFalse(node0.isLabelName());
296:       assertFalse(node0.isExprResult());
297:       assertFalse(node0.isGetElem());
298:       assertFalse(node0.isScript());
299:       assertEquals(147, node0.getLineno());
300:       assertFalse(node0.isNumber());
301:       assertFalse(node0.isOr());
302:       assertFalse(node0.isNot());
303:       assertFalse(node0.hasMoreThanOneChild());
304:       assertFalse(node0.isInstanceOf());
305:       assertFalse(node0.isObjectLit());
306:       assertFalse(node0.isGetProp());
307:       assertFalse(node0.isDec());
308:       assertFalse(node0.isComma());
309:       assertFalse(node0.isWith());
310:       assertFalse(node0.isTypeOf());
311:       assertTrue(node0.isString());
312:       assertFalse(node0.isAssign());
313:       assertFalse(node0.isWhile());
314:       assertFalse(node0.hasChildren());
315:       assertFalse(node0.isBlock());
316:       assertFalse(node0.isThis());
317:       assertFalse(node0.isReturn());
318:       assertFalse(node0.isVar());
319:       assertFalse(node0.isName());
320:       assertFalse(node0.isAdd());
321:       assertFalse(node0.isNew());
322:       assertFalse(node0.isBreak());
323:       assertFalse(node0.isCall());
324:       assertFalse(node0.isSwitch());
325:       assertFalse(node0.isParamList());
326:       assertFalse(node0.isStringKey());
327:       assertFalse(node0.isNull());
328:       assertEquals(0, node0.getChildCount());
329:       assertFalse(node0.isDo());
330:       assertFalse(node0.isDefaultCase());
331:       assertEquals(147, node0.getCharno());
332:       assertFalse(node0.isLabel());
333:       assertFalse(node0.isAssignAdd());
334:       
335:       Node node1 = node0.cloneTree();
336:       assertEquals(30, Node.VAR_ARGS_NAME);
337:       assertEquals(49, Node.DIRECT_EVAL);
338:       assertEquals(15, Node.NO_SIDE_EFFECTS);
339:       assertEquals(1, Node.DECR_FLAG);
340:       assertEquals(54, Node.SLASH_V);
341:       assertEquals(57, Node.LAST_PROP);
342:       assertEquals(32, Node.INCRDECR_PROP);
343:       assertEquals(46, Node.IS_NAMESPACE);
344:       assertEquals(51, Node.STATIC_SOURCE_FILE);
345:       assertEquals(57, Node.REFLECTED_OBJECT);
346:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
347:       assertEquals(52, Node.LENGTH);
348:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
349:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
350:       assertEquals(37, Node.OPT_ARG_NAME);
351:       assertEquals(48, Node.DIRECTIVES);
352:       assertEquals(56, Node.CHANGE_TIME);
353:       assertEquals(12, Node.COLUMN_BITS);
354:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
355:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(36, Node.QUOTED_PROP);
358:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
359:       assertEquals(43, Node.IS_CONSTANT_NAME);
360:       assertEquals(53, Node.INPUT_ID);
361:       assertEquals(8, Node.FLAG_NO_THROWS);
362:       assertEquals(39, Node.EMPTY_BLOCK);
363:       assertEquals(55, Node.INFERRED_FUNCTION);
364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
365:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
366:       assertEquals(29, Node.JSDOC_INFO_PROP);
367:       assertEquals(50, Node.FREE_CALL);
368:       assertEquals(47, Node.IS_DISPATCHER);
369:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
370:       assertEquals(40, Node.ORIGINALNAME_PROP);
371:       assertEquals(2, Node.POST_FLAG);
372:       assertEquals(57, Node.REFLECTED_OBJECT);
373:       assertEquals(40, Node.ORIGINALNAME_PROP);
374:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
375:       assertEquals(50, Node.FREE_CALL);
376:       assertEquals(52, Node.LENGTH);
377:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
378:       assertEquals(15, Node.NO_SIDE_EFFECTS);
379:       assertEquals(8, Node.FLAG_NO_THROWS);
380:       assertEquals(39, Node.EMPTY_BLOCK);
381:       assertEquals(57, Node.LAST_PROP);
382:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
383:       assertEquals(1, Node.DECR_FLAG);
384:       assertEquals(12, Node.COLUMN_BITS);
385:       assertEquals(4095, Node.COLUMN_MASK);
386:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
387:       assertEquals(55, Node.INFERRED_FUNCTION);
388:       assertEquals(36, Node.QUOTED_PROP);
389:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
390:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
391:       assertEquals(56, Node.CHANGE_TIME);
392:       assertEquals(49, Node.DIRECT_EVAL);
393:       assertEquals(37, Node.OPT_ARG_NAME);
394:       assertEquals(48, Node.DIRECTIVES);
395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
396:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
397:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
398:       assertEquals(47, Node.IS_DISPATCHER);
399:       assertEquals(29, Node.JSDOC_INFO_PROP);
400:       assertEquals(53, Node.INPUT_ID);
401:       assertEquals(32, Node.INCRDECR_PROP);
402:       assertEquals(51, Node.STATIC_SOURCE_FILE);
403:       assertEquals(46, Node.IS_NAMESPACE);
404:       assertEquals(30, Node.VAR_ARGS_NAME);
405:       assertEquals(2, Node.POST_FLAG);
406:       assertEquals(54, Node.SLASH_V);
407:       assertEquals(43, Node.IS_CONSTANT_NAME);
408:       assertNotSame(node0, node1);
409:       assertNotSame(node1, node0);
410:       assertNotNull(node1);
411:       assertFalse(node0.isArrayLit());
412:       assertFalse(node0.isTry());
413:       assertFalse(node0.isEmpty());
414:       assertFalse(node0.isNE());
415:       assertFalse(node0.isVoid());
416:       assertFalse(node0.isIf());
417:       assertFalse(node0.isDelProp());
418:       assertFalse(node0.isGetterDef());
419:       assertFalse(node0.isDebugger());
420:       assertFalse(node0.isTrue());
421:       assertFalse(node0.isCatch());
422:       assertFalse(node0.isCase());
423:       assertFalse(node0.isRegExp());
424:       assertEquals(602259, node0.getSourcePosition());
425:       assertFalse(node0.isFor());
426:       assertFalse(node0.isHook());
427:       assertFalse(node0.isFalse());
428:       assertFalse(node0.isInc());
429:       assertFalse(node0.isIn());
430:       assertFalse(node0.isContinue());
431:       assertFalse(node0.isAnd());
432:       assertFalse(node0.isSetterDef());
433:       assertFalse(node0.isFunction());
434:       assertFalse(node0.isThrow());
435:       assertEquals(40, node0.getType());
436:       assertFalse(node0.isCast());
437:       assertFalse(node0.hasOneChild());
438:       assertFalse(node0.isLabelName());
439:       assertFalse(node0.isExprResult());
440:       assertFalse(node0.isGetElem());
441:       assertFalse(node0.isScript());
442:       assertEquals(147, node0.getLineno());
443:       assertFalse(node0.isNumber());
444:       assertFalse(node0.isOr());
445:       assertFalse(node0.isNot());
446:       assertFalse(node0.hasMoreThanOneChild());
447:       assertFalse(node0.isInstanceOf());
448:       assertFalse(node0.isObjectLit());
449:       assertFalse(node0.isGetProp());
450:       assertFalse(node0.isDec());
451:       assertFalse(node0.isComma());
452:       assertFalse(node0.isWith());
453:       assertFalse(node0.isTypeOf());
454:       assertTrue(node0.isString());
455:       assertFalse(node0.isAssign());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.hasChildren());
458:       assertFalse(node0.isBlock());
459:       assertFalse(node0.isThis());
460:       assertFalse(node0.isReturn());
461:       assertFalse(node0.isVar());
462:       assertFalse(node0.isName());
463:       assertFalse(node0.isAdd());
464:       assertFalse(node0.isNew());
465:       assertFalse(node0.isBreak());
466:       assertFalse(node0.isCall());
467:       assertFalse(node0.isSwitch());
468:       assertFalse(node0.isParamList());
469:       assertFalse(node0.isStringKey());
470:       assertFalse(node0.isNull());
471:       assertEquals(0, node0.getChildCount());
472:       assertFalse(node0.isDo());
473:       assertFalse(node0.isDefaultCase());
474:       assertEquals(147, node0.getCharno());
475:       assertFalse(node0.isLabel());
476:       assertFalse(node0.isAssignAdd());
477:       assertFalse(node1.isIf());
478:       assertFalse(node1.isDelProp());
479:       assertFalse(node1.isNE());
480:       assertEquals(147, node1.getCharno());
481:       assertFalse(node1.isCase());
482:       assertFalse(node1.isIn());
483:       assertFalse(node1.isGetterDef());
484:       assertFalse(node1.isEmpty());
485:       assertFalse(node1.isVoid());
486:       assertFalse(node1.isTrue());
487:       assertFalse(node1.isTry());
488:       assertFalse(node1.isHook());
489:       assertEquals(602259, node1.getSourcePosition());
490:       assertFalse(node1.isFor());
491:       assertFalse(node1.isBreak());
492:       assertFalse(node1.isRegExp());
493:       assertFalse(node1.isCatch());
494:       assertFalse(node1.isGetProp());
495:       assertFalse(node1.isSetterDef());
496:       assertFalse(node1.isComma());
497:       assertFalse(node1.isAnd());
498:       assertFalse(node1.isObjectLit());
499:       assertFalse(node1.isNot());
500:       assertFalse(node1.isFunction());
501:       assertFalse(node1.isInc());
502:       assertFalse(node1.isDebugger());
503:       assertFalse(node1.isFalse());
504:       assertFalse(node1.isThrow());
505:       assertEquals(40, node1.getType());
506:       assertFalse(node1.isCast());
507:       assertFalse(node1.isContinue());
508:       assertFalse(node1.isReturn());
509:       assertFalse(node1.isOr());
510:       assertFalse(node1.isLabel());
511:       assertFalse(node1.hasChildren());
512:       assertFalse(node1.isAssignAdd());
513:       assertFalse(node1.isDo());
514:       assertFalse(node1.isNumber());
515:       assertFalse(node1.isBlock());
516:       assertFalse(node1.isExprResult());
517:       assertTrue(node1.isString());
518:       assertFalse(node1.hasOneChild());
519:       assertFalse(node1.isWhile());
520:       assertFalse(node1.isName());
521:       assertFalse(node1.isGetElem());
522:       assertFalse(node1.isCall());
523:       assertFalse(node1.isAssign());
524:       assertFalse(node1.isDec());
525:       assertFalse(node1.isInstanceOf());
526:       assertFalse(node1.isTypeOf());
527:       assertFalse(node1.isWith());
528:       assertFalse(node1.hasMoreThanOneChild());
529:       assertFalse(node1.isThis());
530:       assertFalse(node1.isNull());
531:       assertFalse(node1.isParamList());
532:       assertFalse(node1.isStringKey());
533:       assertFalse(node1.isScript());
534:       assertEquals(147, node1.getLineno());
535:       assertFalse(node1.isAdd());
536:       assertFalse(node1.isNew());
537:       assertFalse(node1.isDefaultCase());
538:       assertFalse(node1.isVar());
539:       assertFalse(node1.isSwitch());
540:       assertFalse(node1.isLabelName());
541:       assertFalse(node1.isArrayLit());
542:       assertEquals(0, node1.getChildCount());
543:       assertFalse(node1.equals((Object)node0));
544:       
545:       String string0 = node0.toString(true, true, true);
546:       assertEquals(30, Node.VAR_ARGS_NAME);
547:       assertEquals(49, Node.DIRECT_EVAL);
548:       assertEquals(15, Node.NO_SIDE_EFFECTS);
549:       assertEquals(1, Node.DECR_FLAG);
550:       assertEquals(54, Node.SLASH_V);
551:       assertEquals(57, Node.LAST_PROP);
552:       assertEquals(32, Node.INCRDECR_PROP);
553:       assertEquals(46, Node.IS_NAMESPACE);
554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
555:       assertEquals(57, Node.REFLECTED_OBJECT);
556:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
557:       assertEquals(52, Node.LENGTH);
558:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
559:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
560:       assertEquals(37, Node.OPT_ARG_NAME);
561:       assertEquals(48, Node.DIRECTIVES);
562:       assertEquals(56, Node.CHANGE_TIME);
563:       assertEquals(12, Node.COLUMN_BITS);
564:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
565:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
566:       assertEquals(4095, Node.COLUMN_MASK);
567:       assertEquals(36, Node.QUOTED_PROP);
568:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
569:       assertEquals(43, Node.IS_CONSTANT_NAME);
570:       assertEquals(53, Node.INPUT_ID);
571:       assertEquals(8, Node.FLAG_NO_THROWS);
572:       assertEquals(39, Node.EMPTY_BLOCK);
573:       assertEquals(55, Node.INFERRED_FUNCTION);
574:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
575:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
576:       assertEquals(29, Node.JSDOC_INFO_PROP);
577:       assertEquals(50, Node.FREE_CALL);
578:       assertEquals(47, Node.IS_DISPATCHER);
579:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
580:       assertEquals(40, Node.ORIGINALNAME_PROP);
581:       assertEquals(2, Node.POST_FLAG);
582:       assertNotSame(node0, node1);
583:       assertNotNull(string0);
584:       assertFalse(node0.isArrayLit());
585:       assertFalse(node0.isTry());
586:       assertFalse(node0.isEmpty());
587:       assertFalse(node0.isNE());
588:       assertFalse(node0.isVoid());
589:       assertFalse(node0.isIf());
590:       assertFalse(node0.isDelProp());
591:       assertFalse(node0.isGetterDef());
592:       assertFalse(node0.isDebugger());
593:       assertFalse(node0.isTrue());
594:       assertFalse(node0.isCatch());
595:       assertFalse(node0.isCase());
596:       assertFalse(node0.isRegExp());
597:       assertEquals(602259, node0.getSourcePosition());
598:       assertFalse(node0.isFor());
599:       assertFalse(node0.isHook());
600:       assertFalse(node0.isFalse());
601:       assertFalse(node0.isInc());
602:       assertFalse(node0.isIn());
603:       assertFalse(node0.isContinue());
604:       assertFalse(node0.isAnd());
605:       assertFalse(node0.isSetterDef());
606:       assertFalse(node0.isFunction());
607:       assertFalse(node0.isThrow());
608:       assertEquals(40, node0.getType());
609:       assertFalse(node0.isCast());
610:       assertFalse(node0.hasOneChild());
611:       assertFalse(node0.isLabelName());
612:       assertFalse(node0.isExprResult());
613:       assertFalse(node0.isGetElem());
614:       assertFalse(node0.isScript());
615:       assertEquals(147, node0.getLineno());
616:       assertFalse(node0.isNumber());
617:       assertFalse(node0.isOr());
618:       assertFalse(node0.isNot());
619:       assertFalse(node0.hasMoreThanOneChild());
620:       assertFalse(node0.isInstanceOf());
621:       assertFalse(node0.isObjectLit());
622:       assertFalse(node0.isGetProp());
623:       assertFalse(node0.isDec());
624:       assertFalse(node0.isComma());
625:       assertFalse(node0.isWith());
626:       assertFalse(node0.isTypeOf());
627:       assertTrue(node0.isString());
628:       assertFalse(node0.isAssign());
629:       assertFalse(node0.isWhile());
630:       assertFalse(node0.hasChildren());
631:       assertFalse(node0.isBlock());
632:       assertFalse(node0.isThis());
633:       assertFalse(node0.isReturn());
634:       assertFalse(node0.isVar());
635:       assertFalse(node0.isName());
636:       assertFalse(node0.isAdd());
637:       assertFalse(node0.isNew());
638:       assertFalse(node0.isBreak());
639:       assertFalse(node0.isCall());
640:       assertFalse(node0.isSwitch());
641:       assertFalse(node0.isParamList());
642:       assertFalse(node0.isStringKey());
643:       assertFalse(node0.isNull());
644:       assertEquals(0, node0.getChildCount());
645:       assertFalse(node0.isDo());
646:       assertFalse(node0.isDefaultCase());
647:       assertEquals(147, node0.getCharno());
648:       assertFalse(node0.isLabel());
649:       assertFalse(node0.isAssignAdd());
650:       assertFalse(node0.equals((Object)node1));
651:       assertEquals("STRING GYoa 147", string0);
652:       
653:       node0.setChangeTime(0);
654:       assertEquals(30, Node.VAR_ARGS_NAME);
655:       assertEquals(49, Node.DIRECT_EVAL);
656:       assertEquals(15, Node.NO_SIDE_EFFECTS);
657:       assertEquals(1, Node.DECR_FLAG);
658:       assertEquals(54, Node.SLASH_V);
659:       assertEquals(57, Node.LAST_PROP);
660:       assertEquals(32, Node.INCRDECR_PROP);
661:       assertEquals(46, Node.IS_NAMESPACE);
662:       assertEquals(51, Node.STATIC_SOURCE_FILE);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
665:       assertEquals(52, Node.LENGTH);
666:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
667:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
668:       assertEquals(37, Node.OPT_ARG_NAME);
669:       assertEquals(48, Node.DIRECTIVES);
670:       assertEquals(56, Node.CHANGE_TIME);
671:       assertEquals(12, Node.COLUMN_BITS);
672:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
673:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
674:       assertEquals(4095, Node.COLUMN_MASK);
675:       assertEquals(36, Node.QUOTED_PROP);
676:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
677:       assertEquals(43, Node.IS_CONSTANT_NAME);
678:       assertEquals(53, Node.INPUT_ID);
679:       assertEquals(8, Node.FLAG_NO_THROWS);
680:       assertEquals(39, Node.EMPTY_BLOCK);
681:       assertEquals(55, Node.INFERRED_FUNCTION);
682:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
683:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
684:       assertEquals(29, Node.JSDOC_INFO_PROP);
685:       assertEquals(50, Node.FREE_CALL);
686:       assertEquals(47, Node.IS_DISPATCHER);
687:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
688:       assertEquals(40, Node.ORIGINALNAME_PROP);
689:       assertEquals(2, Node.POST_FLAG);
690:       assertNotSame(node0, node1);
691:       assertFalse(node0.isArrayLit());
692:       assertFalse(node0.isTry());
693:       assertFalse(node0.isEmpty());
694:       assertFalse(node0.isNE());
695:       assertFalse(node0.isVoid());
696:       assertFalse(node0.isIf());
697:       assertFalse(node0.isDelProp());
698:       assertFalse(node0.isGetterDef());
699:       assertFalse(node0.isDebugger());
700:       assertFalse(node0.isTrue());
701:       assertFalse(node0.isCatch());
702:       assertFalse(node0.isCase());
703:       assertFalse(node0.isRegExp());
704:       assertEquals(602259, node0.getSourcePosition());
705:       assertFalse(node0.isFor());
706:       assertFalse(node0.isHook());
707:       assertFalse(node0.isFalse());
708:       assertFalse(node0.isInc());
709:       assertFalse(node0.isIn());
710:       assertFalse(node0.isContinue());
711:       assertFalse(node0.isAnd());
712:       assertFalse(node0.isSetterDef());
713:       assertFalse(node0.isFunction());
714:       assertFalse(node0.isThrow());
715:       assertEquals(40, node0.getType());
716:       assertFalse(node0.isCast());
717:       assertFalse(node0.hasOneChild());
718:       assertFalse(node0.isLabelName());
719:       assertFalse(node0.isExprResult());
720:       assertFalse(node0.isGetElem());
721:       assertFalse(node0.isScript());
722:       assertEquals(147, node0.getLineno());
723:       assertFalse(node0.isNumber());
724:       assertFalse(node0.isOr());
725:       assertFalse(node0.isNot());
726:       assertFalse(node0.hasMoreThanOneChild());
727:       assertFalse(node0.isInstanceOf());
728:       assertFalse(node0.isObjectLit());
729:       assertFalse(node0.isGetProp());
730:       assertFalse(node0.isDec());
731:       assertFalse(node0.isComma());
732:       assertFalse(node0.isWith());
733:       assertFalse(node0.isTypeOf());
734:       assertTrue(node0.isString());
735:       assertFalse(node0.isAssign());
736:       assertFalse(node0.isWhile());
737:       assertFalse(node0.hasChildren());
738:       assertFalse(node0.isBlock());
739:       assertFalse(node0.isThis());
740:       assertFalse(node0.isReturn());
741:       assertFalse(node0.isVar());
742:       assertFalse(node0.isName());
743:       assertFalse(node0.isAdd());
744:       assertFalse(node0.isNew());
745:       assertFalse(node0.isBreak());
746:       assertFalse(node0.isCall());
747:       assertFalse(node0.isSwitch());
748:       assertFalse(node0.isParamList());
749:       assertFalse(node0.isStringKey());
750:       assertFalse(node0.isNull());
751:       assertEquals(0, node0.getChildCount());
752:       assertFalse(node0.isDo());
753:       assertFalse(node0.isDefaultCase());
754:       assertEquals(147, node0.getCharno());
755:       assertFalse(node0.isLabel());
756:       assertFalse(node0.isAssignAdd());
757:       assertFalse(node0.equals((Object)node1));
758:       
759:       String string1 = node0.getSourceFileName();
760:       assertEquals(30, Node.VAR_ARGS_NAME);
761:       assertEquals(49, Node.DIRECT_EVAL);
762:       assertEquals(15, Node.NO_SIDE_EFFECTS);
763:       assertEquals(1, Node.DECR_FLAG);
764:       assertEquals(54, Node.SLASH_V);
765:       assertEquals(57, Node.LAST_PROP);
766:       assertEquals(32, Node.INCRDECR_PROP);
767:       assertEquals(46, Node.IS_NAMESPACE);
768:       assertEquals(51, Node.STATIC_SOURCE_FILE);
769:       assertEquals(57, Node.REFLECTED_OBJECT);
770:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
771:       assertEquals(52, Node.LENGTH);
772:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
773:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
774:       assertEquals(37, Node.OPT_ARG_NAME);
775:       assertEquals(48, Node.DIRECTIVES);
776:       assertEquals(56, Node.CHANGE_TIME);
777:       assertEquals(12, Node.COLUMN_BITS);
778:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
779:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
780:       assertEquals(4095, Node.COLUMN_MASK);
781:       assertEquals(36, Node.QUOTED_PROP);
782:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
783:       assertEquals(43, Node.IS_CONSTANT_NAME);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(8, Node.FLAG_NO_THROWS);
786:       assertEquals(39, Node.EMPTY_BLOCK);
787:       assertEquals(55, Node.INFERRED_FUNCTION);
788:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
789:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
790:       assertEquals(29, Node.JSDOC_INFO_PROP);
791:       assertEquals(50, Node.FREE_CALL);
792:       assertEquals(47, Node.IS_DISPATCHER);
793:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
794:       assertEquals(40, Node.ORIGINALNAME_PROP);
795:       assertEquals(2, Node.POST_FLAG);
796:       assertNotSame(node0, node1);
797:       assertNull(string1);
798:       assertFalse(node0.isArrayLit());
799:       assertFalse(node0.isTry());
800:       assertFalse(node0.isEmpty());
801:       assertFalse(node0.isNE());
802:       assertFalse(node0.isVoid());
803:       assertFalse(node0.isIf());
804:       assertFalse(node0.isDelProp());
805:       assertFalse(node0.isGetterDef());
806:       assertFalse(node0.isDebugger());
807:       assertFalse(node0.isTrue());
808:       assertFalse(node0.isCatch());
809:       assertFalse(node0.isCase());
810:       assertFalse(node0.isRegExp());
811:       assertEquals(602259, node0.getSourcePosition());
812:       assertFalse(node0.isFor());
813:       assertFalse(node0.isHook());
814:       assertFalse(node0.isFalse());
815:       assertFalse(node0.isInc());
816:       assertFalse(node0.isIn());
817:       assertFalse(node0.isContinue());
818:       assertFalse(node0.isAnd());
819:       assertFalse(node0.isSetterDef());
820:       assertFalse(node0.isFunction());
821:       assertFalse(node0.isThrow());
822:       assertEquals(40, node0.getType());
823:       assertFalse(node0.isCast());
824:       assertFalse(node0.hasOneChild());
825:       assertFalse(node0.isLabelName());
826:       assertFalse(node0.isExprResult());
827:       assertFalse(node0.isGetElem());
828:       assertFalse(node0.isScript());
829:       assertEquals(147, node0.getLineno());
830:       assertFalse(node0.isNumber());
831:       assertFalse(node0.isOr());
832:       assertFalse(node0.isNot());
833:       assertFalse(node0.hasMoreThanOneChild());
834:       assertFalse(node0.isInstanceOf());
835:       assertFalse(node0.isObjectLit());
836:       assertFalse(node0.isGetProp());
837:       assertFalse(node0.isDec());
838:       assertFalse(node0.isComma());
839:       assertFalse(node0.isWith());
840:       assertFalse(node0.isTypeOf());
841:       assertTrue(node0.isString());
842:       assertFalse(node0.isAssign());
843:       assertFalse(node0.isWhile());
844:       assertFalse(node0.hasChildren());
845:       assertFalse(node0.isBlock());
846:       assertFalse(node0.isThis());
847:       assertFalse(node0.isReturn());
848:       assertFalse(node0.isVar());
849:       assertFalse(node0.isName());
850:       assertFalse(node0.isAdd());
851:       assertFalse(node0.isNew());
852:       assertFalse(node0.isBreak());
853:       assertFalse(node0.isCall());
854:       assertFalse(node0.isSwitch());
855:       assertFalse(node0.isParamList());
856:       assertFalse(node0.isStringKey());
857:       assertFalse(node0.isNull());
858:       assertEquals(0, node0.getChildCount());
859:       assertFalse(node0.isDo());
860:       assertFalse(node0.isDefaultCase());
861:       assertEquals(147, node0.getCharno());
862:       assertFalse(node0.isLabel());
863:       assertFalse(node0.isAssignAdd());
864:       assertFalse(node0.equals((Object)node1));
865:       
866:       boolean boolean0 = node0.isTypeOf();
867:       assertEquals(30, Node.VAR_ARGS_NAME);
868:       assertEquals(49, Node.DIRECT_EVAL);
869:       assertEquals(15, Node.NO_SIDE_EFFECTS);
870:       assertEquals(1, Node.DECR_FLAG);
871:       assertEquals(54, Node.SLASH_V);
872:       assertEquals(57, Node.LAST_PROP);
873:       assertEquals(32, Node.INCRDECR_PROP);
874:       assertEquals(46, Node.IS_NAMESPACE);
875:       assertEquals(51, Node.STATIC_SOURCE_FILE);
876:       assertEquals(57, Node.REFLECTED_OBJECT);
877:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
878:       assertEquals(52, Node.LENGTH);
879:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
880:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
881:       assertEquals(37, Node.OPT_ARG_NAME);
882:       assertEquals(48, Node.DIRECTIVES);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(12, Node.COLUMN_BITS);
885:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
886:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
887:       assertEquals(4095, Node.COLUMN_MASK);
888:       assertEquals(36, Node.QUOTED_PROP);
889:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
890:       assertEquals(43, Node.IS_CONSTANT_NAME);
891:       assertEquals(53, Node.INPUT_ID);
892:       assertEquals(8, Node.FLAG_NO_THROWS);
893:       assertEquals(39, Node.EMPTY_BLOCK);
894:       assertEquals(55, Node.INFERRED_FUNCTION);
895:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
896:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
897:       assertEquals(29, Node.JSDOC_INFO_PROP);
898:       assertEquals(50, Node.FREE_CALL);
899:       assertEquals(47, Node.IS_DISPATCHER);
900:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
901:       assertEquals(40, Node.ORIGINALNAME_PROP);
902:       assertEquals(2, Node.POST_FLAG);
903:       assertNotSame(node0, node1);
904:       assertFalse(node0.isArrayLit());
905:       assertFalse(node0.isTry());
906:       assertFalse(node0.isEmpty());
907:       assertFalse(node0.isNE());
908:       assertFalse(node0.isVoid());
909:       assertFalse(node0.isIf());
910:       assertFalse(node0.isDelProp());
911:       assertFalse(node0.isGetterDef());
912:       assertFalse(node0.isDebugger());
913:       assertFalse(node0.isTrue());
914:       assertFalse(node0.isCatch());
915:       assertFalse(node0.isCase());
916:       assertFalse(node0.isRegExp());
917:       assertEquals(602259, node0.getSourcePosition());
918:       assertFalse(node0.isFor());
919:       assertFalse(node0.isHook());
920:       assertFalse(node0.isFalse());
921:       assertFalse(node0.isInc());
922:       assertFalse(node0.isIn());
923:       assertFalse(node0.isContinue());
924:       assertFalse(node0.isAnd());
925:       assertFalse(node0.isSetterDef());
926:       assertFalse(node0.isFunction());
927:       assertFalse(node0.isThrow());
928:       assertEquals(40, node0.getType());
929:       assertFalse(node0.isCast());
930:       assertFalse(node0.hasOneChild());
931:       assertFalse(node0.isLabelName());
932:       assertFalse(node0.isExprResult());
933:       assertFalse(node0.isGetElem());
934:       assertFalse(node0.isScript());
935:       assertEquals(147, node0.getLineno());
936:       assertFalse(node0.isNumber());
937:       assertFalse(node0.isOr());
938:       assertFalse(node0.isNot());
939:       assertFalse(node0.hasMoreThanOneChild());
940:       assertFalse(node0.isInstanceOf());
941:       assertFalse(node0.isObjectLit());
942:       assertFalse(node0.isGetProp());
943:       assertFalse(node0.isDec());
944:       assertFalse(node0.isComma());
945:       assertFalse(node0.isWith());
946:       assertFalse(node0.isTypeOf());
947:       assertTrue(node0.isString());
948:       assertFalse(node0.isAssign());
949:       assertFalse(node0.isWhile());
950:       assertFalse(node0.hasChildren());
951:       assertFalse(node0.isBlock());
952:       assertFalse(node0.isThis());
953:       assertFalse(node0.isReturn());
954:       assertFalse(node0.isVar());
955:       assertFalse(node0.isName());
956:       assertFalse(node0.isAdd());
957:       assertFalse(node0.isNew());
958:       assertFalse(node0.isBreak());
959:       assertFalse(node0.isCall());
960:       assertFalse(node0.isSwitch());
961:       assertFalse(node0.isParamList());
962:       assertFalse(node0.isStringKey());
963:       assertFalse(node0.isNull());
964:       assertEquals(0, node0.getChildCount());
965:       assertFalse(node0.isDo());
966:       assertFalse(node0.isDefaultCase());
967:       assertEquals(147, node0.getCharno());
968:       assertFalse(node0.isLabel());
969:       assertFalse(node0.isAssignAdd());
970:       assertFalse(node0.equals((Object)node1));
971:       assertFalse(boolean0);
972:       
973:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1615);
974:       assertNotNull(node_SideEffectFlags0);
975:       assertEquals(1615, node_SideEffectFlags0.valueOf());
976:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
977:       
978:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
979:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
980:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
981:       assertNotNull(node_SideEffectFlags1);
982:       assertEquals(1607, node_SideEffectFlags0.valueOf());
983:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
984:       assertEquals(1607, node_SideEffectFlags1.valueOf());
985:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
986:       
987:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
988:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
989:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
990:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
991:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
992:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
993:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
994:       assertNotNull(node_SideEffectFlags2);
995:       assertEquals(1600, node_SideEffectFlags0.valueOf());
996:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
997:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
998:       assertEquals(1600, node_SideEffectFlags1.valueOf());
999:       assertEquals(1600, node_SideEffectFlags2.valueOf());
1000:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1001:       
1002:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
1003:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1004:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1005:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1006:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1007:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1008:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1009:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1010:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1011:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1012:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1013:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1014:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1015:       assertNotNull(node_SideEffectFlags3);
1016:       assertEquals(0, node_SideEffectFlags0.valueOf());
1017:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1018:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1019:       assertEquals(0, node_SideEffectFlags1.valueOf());
1020:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1021:       assertEquals(0, node_SideEffectFlags2.valueOf());
1022:       assertEquals(0, node_SideEffectFlags3.valueOf());
1023:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1024:       
1025:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
1026:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1027:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1028:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1029:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1030:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1031:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1032:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1033:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1034:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1035:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1036:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1037:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1038:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1039:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1040:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1041:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1042:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1043:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1044:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1045:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1046:       assertNotNull(node_SideEffectFlags4);
1047:       assertEquals(0, node_SideEffectFlags0.valueOf());
1048:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1049:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1050:       assertEquals(0, node_SideEffectFlags1.valueOf());
1051:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1052:       assertEquals(0, node_SideEffectFlags2.valueOf());
1053:       assertEquals(0, node_SideEffectFlags3.valueOf());
1054:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1055:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1056:       assertEquals(0, node_SideEffectFlags4.valueOf());
1057:       
1058:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setThrows();
1059:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1060:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1061:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1062:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1063:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1064:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1065:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1066:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1067:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1068:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1069:       assertNotNull(node_SideEffectFlags5);
1070:       assertEquals(0, node_SideEffectFlags0.valueOf());
1071:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1072:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1073:       assertEquals(0, node_SideEffectFlags5.valueOf());
1074:       
1075:       node0.detachChildren();
1076:       assertEquals(30, Node.VAR_ARGS_NAME);
1077:       assertEquals(49, Node.DIRECT_EVAL);
1078:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1079:       assertEquals(1, Node.DECR_FLAG);
1080:       assertEquals(54, Node.SLASH_V);
1081:       assertEquals(57, Node.LAST_PROP);
1082:       assertEquals(32, Node.INCRDECR_PROP);
1083:       assertEquals(46, Node.IS_NAMESPACE);
1084:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1085:       assertEquals(57, Node.REFLECTED_OBJECT);
1086:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1087:       assertEquals(52, Node.LENGTH);
1088:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1089:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1090:       assertEquals(37, Node.OPT_ARG_NAME);
1091:       assertEquals(48, Node.DIRECTIVES);
1092:       assertEquals(56, Node.CHANGE_TIME);
1093:       assertEquals(12, Node.COLUMN_BITS);
1094:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1095:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1096:       assertEquals(4095, Node.COLUMN_MASK);
1097:       assertEquals(36, Node.QUOTED_PROP);
1098:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1099:       assertEquals(43, Node.IS_CONSTANT_NAME);
1100:       assertEquals(53, Node.INPUT_ID);
1101:       assertEquals(8, Node.FLAG_NO_THROWS);
1102:       assertEquals(39, Node.EMPTY_BLOCK);
1103:       assertEquals(55, Node.INFERRED_FUNCTION);
1104:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1105:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1106:       assertEquals(29, Node.JSDOC_INFO_PROP);
1107:       assertEquals(50, Node.FREE_CALL);
1108:       assertEquals(47, Node.IS_DISPATCHER);
1109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1110:       assertEquals(40, Node.ORIGINALNAME_PROP);
1111:       assertEquals(2, Node.POST_FLAG);
1112:       assertNotSame(node0, node1);
1113:       assertFalse(node0.isArrayLit());
1114:       assertFalse(node0.isTry());
1115:       assertFalse(node0.isEmpty());
1116:       assertFalse(node0.isNE());
1117:       assertFalse(node0.isVoid());
1118:       assertFalse(node0.isIf());
1119:       assertFalse(node0.isDelProp());
1120:       assertFalse(node0.isGetterDef());
1121:       assertFalse(node0.isDebugger());
1122:       assertFalse(node0.isTrue());
1123:       assertFalse(node0.isCatch());
1124:       assertFalse(node0.isCase());
1125:       assertFalse(node0.isRegExp());
1126:       assertEquals(602259, node0.getSourcePosition());
1127:       assertFalse(node0.isFor());
1128:       assertFalse(node0.isHook());
1129:       assertFalse(node0.isFalse());
1130:       assertFalse(node0.isInc());
1131:       assertFalse(node0.isIn());
1132:       assertFalse(node0.isContinue());
1133:       assertFalse(node0.isAnd());
1134:       assertFalse(node0.isSetterDef());
1135:       assertFalse(node0.isFunction());
1136:       assertFalse(node0.isThrow());
1137:       assertEquals(40, node0.getType());
1138:       assertFalse(node0.isCast());
1139:       assertFalse(node0.hasOneChild());
1140:       assertFalse(node0.isLabelName());
1141:       assertFalse(node0.isExprResult());
1142:       assertFalse(node0.isGetElem());
1143:       assertFalse(node0.isScript());
1144:       assertEquals(147, node0.getLineno());
1145:       assertFalse(node0.isNumber());
1146:       assertFalse(node0.isOr());
1147:       assertFalse(node0.isNot());
1148:       assertFalse(node0.hasMoreThanOneChild());
1149:       assertFalse(node0.isInstanceOf());
1150:       assertFalse(node0.isObjectLit());
1151:       assertFalse(node0.isGetProp());
1152:       assertFalse(node0.isDec());
1153:       assertFalse(node0.isComma());
1154:       assertFalse(node0.isWith());
1155:       assertFalse(node0.isTypeOf());
1156:       assertTrue(node0.isString());
1157:       assertFalse(node0.isAssign());
1158:       assertFalse(node0.isWhile());
1159:       assertFalse(node0.hasChildren());
1160:       assertFalse(node0.isBlock());
1161:       assertFalse(node0.isThis());
1162:       assertFalse(node0.isReturn());
1163:       assertFalse(node0.isVar());
1164:       assertFalse(node0.isName());
1165:       assertFalse(node0.isAdd());
1166:       assertFalse(node0.isNew());
1167:       assertFalse(node0.isBreak());
1168:       assertFalse(node0.isCall());
1169:       assertFalse(node0.isSwitch());
1170:       assertFalse(node0.isParamList());
1171:       assertFalse(node0.isStringKey());
1172:       assertFalse(node0.isNull());
1173:       assertEquals(0, node0.getChildCount());
1174:       assertFalse(node0.isDo());
1175:       assertFalse(node0.isDefaultCase());
1176:       assertEquals(147, node0.getCharno());
1177:       assertFalse(node0.isLabel());
1178:       assertFalse(node0.isAssignAdd());
1179:       assertFalse(node0.equals((Object)node1));
1180:       
1181:       Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setMutatesArguments();
1182:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1183:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1184:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1185:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1186:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1187:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1188:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1189:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1190:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1191:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1192:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1193:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1194:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1195:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1196:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1197:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1198:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1199:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1200:       assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
1201:       assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
1202:       assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
1203:       assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
1204:       assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
1205:       assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
1206:       assertNotNull(node_SideEffectFlags6);
1207:       assertEquals(0, node_SideEffectFlags0.valueOf());
1208:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1209:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1210:       assertEquals(0, node_SideEffectFlags1.valueOf());
1211:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1212:       assertEquals(0, node_SideEffectFlags2.valueOf());
1213:       assertTrue(node_SideEffectFlags6.areAllFlagsSet());
1214:       assertEquals(0, node_SideEffectFlags6.valueOf());
1215:       
1216:       boolean boolean1 = node1.isHook();
1217:       assertEquals(30, Node.VAR_ARGS_NAME);
1218:       assertEquals(49, Node.DIRECT_EVAL);
1219:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1220:       assertEquals(1, Node.DECR_FLAG);
1221:       assertEquals(54, Node.SLASH_V);
1222:       assertEquals(57, Node.LAST_PROP);
1223:       assertEquals(32, Node.INCRDECR_PROP);
1224:       assertEquals(46, Node.IS_NAMESPACE);
1225:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1226:       assertEquals(57, Node.REFLECTED_OBJECT);
1227:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1228:       assertEquals(52, Node.LENGTH);
1229:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1230:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1231:       assertEquals(37, Node.OPT_ARG_NAME);
1232:       assertEquals(48, Node.DIRECTIVES);
1233:       assertEquals(56, Node.CHANGE_TIME);
1234:       assertEquals(12, Node.COLUMN_BITS);
1235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1236:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1237:       assertEquals(4095, Node.COLUMN_MASK);
1238:       assertEquals(36, Node.QUOTED_PROP);
1239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1240:       assertEquals(43, Node.IS_CONSTANT_NAME);
1241:       assertEquals(53, Node.INPUT_ID);
1242:       assertEquals(8, Node.FLAG_NO_THROWS);
1243:       assertEquals(39, Node.EMPTY_BLOCK);
1244:       assertEquals(55, Node.INFERRED_FUNCTION);
1245:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1246:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1247:       assertEquals(29, Node.JSDOC_INFO_PROP);
1248:       assertEquals(50, Node.FREE_CALL);
1249:       assertEquals(47, Node.IS_DISPATCHER);
1250:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1251:       assertEquals(40, Node.ORIGINALNAME_PROP);
1252:       assertEquals(2, Node.POST_FLAG);
1253:       assertEquals(57, Node.REFLECTED_OBJECT);
1254:       assertEquals(40, Node.ORIGINALNAME_PROP);
1255:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1256:       assertEquals(50, Node.FREE_CALL);
1257:       assertEquals(52, Node.LENGTH);
1258:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1259:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1260:       assertEquals(8, Node.FLAG_NO_THROWS);
1261:       assertEquals(39, Node.EMPTY_BLOCK);
1262:       assertEquals(57, Node.LAST_PROP);
1263:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1264:       assertEquals(1, Node.DECR_FLAG);
1265:       assertEquals(12, Node.COLUMN_BITS);
1266:       assertEquals(4095, Node.COLUMN_MASK);
1267:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1268:       assertEquals(55, Node.INFERRED_FUNCTION);
1269:       assertEquals(36, Node.QUOTED_PROP);
1270:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1271:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1272:       assertEquals(56, Node.CHANGE_TIME);
1273:       assertEquals(49, Node.DIRECT_EVAL);
1274:       assertEquals(37, Node.OPT_ARG_NAME);
1275:       assertEquals(48, Node.DIRECTIVES);
1276:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1277:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1278:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1279:       assertEquals(47, Node.IS_DISPATCHER);
1280:       assertEquals(29, Node.JSDOC_INFO_PROP);
1281:       assertEquals(53, Node.INPUT_ID);
1282:       assertEquals(32, Node.INCRDECR_PROP);
1283:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1284:       assertEquals(46, Node.IS_NAMESPACE);
1285:       assertEquals(30, Node.VAR_ARGS_NAME);
1286:       assertEquals(2, Node.POST_FLAG);
1287:       assertEquals(54, Node.SLASH_V);
1288:       assertEquals(43, Node.IS_CONSTANT_NAME);
1289:       assertNotSame(node0, node1);
1290:       assertNotSame(node1, node0);
1291:       assertFalse(node0.isArrayLit());
1292:       assertFalse(node0.isTry());
1293:       assertFalse(node0.isEmpty());
1294:       assertFalse(node0.isNE());
1295:       assertFalse(node0.isVoid());
1296:       assertFalse(node0.isIf());
1297:       assertFalse(node0.isDelProp());
1298:       assertFalse(node0.isGetterDef());
1299:       assertFalse(node0.isDebugger());
1300:       assertFalse(node0.isTrue());
1301:       assertFalse(node0.isCatch());
1302:       assertFalse(node0.isCase());
1303:       assertFalse(node0.isRegExp());
1304:       assertEquals(602259, node0.getSourcePosition());
1305:       assertFalse(node0.isFor());
1306:       assertFalse(node0.isHook());
1307:       assertFalse(node0.isFalse());
1308:       assertFalse(node0.isInc());
1309:       assertFalse(node0.isIn());
1310:       assertFalse(node0.isContinue());
1311:       assertFalse(node0.isAnd());
1312:       assertFalse(node0.isSetterDef());
1313:       assertFalse(node0.isFunction());
1314:       assertFalse(node0.isThrow());
1315:       assertEquals(40, node0.getType());
1316:       assertFalse(node0.isCast());
1317:       assertFalse(node0.hasOneChild());
1318:       assertFalse(node0.isLabelName());
1319:       assertFalse(node0.isExprResult());
1320:       assertFalse(node0.isGetElem());
1321:       assertFalse(node0.isScript());
1322:       assertEquals(147, node0.getLineno());
1323:       assertFalse(node0.isNumber());
1324:       assertFalse(node0.isOr());
1325:       assertFalse(node0.isNot());
1326:       assertFalse(node0.hasMoreThanOneChild());
1327:       assertFalse(node0.isInstanceOf());
1328:       assertFalse(node0.isObjectLit());
1329:       assertFalse(node0.isGetProp());
1330:       assertFalse(node0.isDec());
1331:       assertFalse(node0.isComma());
1332:       assertFalse(node0.isWith());
1333:       assertFalse(node0.isTypeOf());
1334:       assertTrue(node0.isString());
1335:       assertFalse(node0.isAssign());
1336:       assertFalse(node0.isWhile());
1337:       assertFalse(node0.hasChildren());
1338:       assertFalse(node0.isBlock());
1339:       assertFalse(node0.isThis());
1340:       assertFalse(node0.isReturn());
1341:       assertFalse(node0.isVar());
1342:       assertFalse(node0.isName());
1343:       assertFalse(node0.isAdd());
1344:       assertFalse(node0.isNew());
1345:       assertFalse(node0.isBreak());
1346:       assertFalse(node0.isCall());
1347:       assertFalse(node0.isSwitch());
1348:       assertFalse(node0.isParamList());
1349:       assertFalse(node0.isStringKey());
1350:       assertFalse(node0.isNull());
1351:       assertEquals(0, node0.getChildCount());
1352:       assertFalse(node0.isDo());
1353:       assertFalse(node0.isDefaultCase());
1354:       assertEquals(147, node0.getCharno());
1355:       assertFalse(node0.isLabel());
1356:       assertFalse(node0.isAssignAdd());
1357:       assertFalse(node1.isIf());
1358:       assertFalse(node1.isDelProp());
1359:       assertFalse(node1.isNE());
1360:       assertEquals(147, node1.getCharno());
1361:       assertFalse(node1.isCase());
1362:       assertFalse(node1.isIn());
1363:       assertFalse(node1.isGetterDef());
1364:       assertFalse(node1.isEmpty());
1365:       assertFalse(node1.isVoid());
1366:       assertFalse(node1.isTrue());
1367:       assertFalse(node1.isTry());
1368:       assertFalse(node1.isHook());
1369:       assertEquals(602259, node1.getSourcePosition());
1370:       assertFalse(node1.isFor());
1371:       assertFalse(node1.isBreak());
1372:       assertFalse(node1.isRegExp());
1373:       assertFalse(node1.isCatch());
1374:       assertFalse(node1.isGetProp());
1375:       assertFalse(node1.isSetterDef());
1376:       assertFalse(node1.isComma());
1377:       assertFalse(node1.isAnd());
1378:       assertFalse(node1.isObjectLit());
1379:       assertFalse(node1.isNot());
1380:       assertFalse(node1.isFunction());
1381:       assertFalse(node1.isInc());
1382:       assertFalse(node1.isDebugger());
1383:       assertFalse(node1.isFalse());
1384:       assertFalse(node1.isThrow());
1385:       assertEquals(40, node1.getType());
1386:       assertFalse(node1.isCast());
1387:       assertFalse(node1.isContinue());
1388:       assertFalse(node1.isReturn());
1389:       assertFalse(node1.isOr());
1390:       assertFalse(node1.isLabel());
1391:       assertFalse(node1.hasChildren());
1392:       assertFalse(node1.isAssignAdd());
1393:       assertFalse(node1.isDo());
1394:       assertFalse(node1.isNumber());
1395:       assertFalse(node1.isBlock());
1396:       assertFalse(node1.isExprResult());
1397:       assertTrue(node1.isString());
1398:       assertFalse(node1.hasOneChild());
1399:       assertFalse(node1.isWhile());
1400:       assertFalse(node1.isName());
1401:       assertFalse(node1.isGetElem());
1402:       assertFalse(node1.isCall());
1403:       assertFalse(node1.isAssign());
1404:       assertFalse(node1.isDec());
1405:       assertFalse(node1.isInstanceOf());
1406:       assertFalse(node1.isTypeOf());
1407:       assertFalse(node1.isWith());
1408:       assertFalse(node1.hasMoreThanOneChild());
1409:       assertFalse(node1.isThis());
1410:       assertFalse(node1.isNull());
1411:       assertFalse(node1.isParamList());
1412:       assertFalse(node1.isStringKey());
1413:       assertFalse(node1.isScript());
1414:       assertEquals(147, node1.getLineno());
1415:       assertFalse(node1.isAdd());
1416:       assertFalse(node1.isNew());
1417:       assertFalse(node1.isDefaultCase());
1418:       assertFalse(node1.isVar());
1419:       assertFalse(node1.isSwitch());
1420:       assertFalse(node1.isLabelName());
1421:       assertFalse(node1.isArrayLit());
1422:       assertEquals(0, node1.getChildCount());
1423:       assertTrue(boolean1 == boolean0);
1424:       assertFalse(node0.equals((Object)node1));
1425:       assertFalse(node1.equals((Object)node0));
1426:       assertFalse(boolean1);
1427:       
1428:       Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setReturnsTainted();
1429:       assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
1430:       assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
1431:       assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
1432:       assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
1433:       assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
1434:       assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
1435:       assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
1436:       assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
1437:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1438:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1439:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1440:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1441:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1442:       assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
1443:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1444:       assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
1445:       assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
1446:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1447:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1448:       assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
1449:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1450:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1451:       assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
1452:       assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
1453:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1454:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1455:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1456:       assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
1457:       assertNotNull(node_SideEffectFlags7);
1458:       assertEquals(0, node_SideEffectFlags7.valueOf());
1459:       assertTrue(node_SideEffectFlags7.areAllFlagsSet());
1460:       assertEquals(0, node_SideEffectFlags0.valueOf());
1461:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1462:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1463:       assertEquals(0, node_SideEffectFlags1.valueOf());
1464:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1465:       assertEquals(0, node_SideEffectFlags2.valueOf());
1466:       
1467:       Node node2 = Node.newNumber((double) 51, 3681, 15);
1468:       assertEquals(57, Node.REFLECTED_OBJECT);
1469:       assertEquals(52, Node.LENGTH);
1470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1471:       assertEquals(50, Node.FREE_CALL);
1472:       assertEquals(54, Node.SLASH_V);
1473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1474:       assertEquals(57, Node.LAST_PROP);
1475:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1476:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1477:       assertEquals(8, Node.FLAG_NO_THROWS);
1478:       assertEquals(1, Node.DECR_FLAG);
1479:       assertEquals(39, Node.EMPTY_BLOCK);
1480:       assertEquals(46, Node.IS_NAMESPACE);
1481:       assertEquals(2, Node.POST_FLAG);
1482:       assertEquals(30, Node.VAR_ARGS_NAME);
1483:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1484:       assertEquals(43, Node.IS_CONSTANT_NAME);
1485:       assertEquals(40, Node.ORIGINALNAME_PROP);
1486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1487:       assertEquals(36, Node.QUOTED_PROP);
1488:       assertEquals(47, Node.IS_DISPATCHER);
1489:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1490:       assertEquals(29, Node.JSDOC_INFO_PROP);
1491:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1492:       assertEquals(53, Node.INPUT_ID);
1493:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1494:       assertEquals(12, Node.COLUMN_BITS);
1495:       assertEquals(32, Node.INCRDECR_PROP);
1496:       assertEquals(55, Node.INFERRED_FUNCTION);
1497:       assertEquals(4095, Node.COLUMN_MASK);
1498:       assertEquals(56, Node.CHANGE_TIME);
1499:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1500:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1501:       assertEquals(48, Node.DIRECTIVES);
1502:       assertEquals(49, Node.DIRECT_EVAL);
1503:       assertEquals(37, Node.OPT_ARG_NAME);
1504:       assertNotNull(node2);
1505:       assertFalse(node2.hasChildren());
1506:       assertFalse(node2.isLabel());
1507:       assertFalse(node2.isReturn());
1508:       assertFalse(node2.isLabelName());
1509:       assertFalse(node2.isAssignAdd());
1510:       assertFalse(node2.hasOneChild());
1511:       assertFalse(node2.isOr());
1512:       assertFalse(node2.isNew());
1513:       assertFalse(node2.isAdd());
1514:       assertFalse(node2.isDo());
1515:       assertFalse(node2.isVar());
1516:       assertFalse(node2.isCast());
1517:       assertFalse(node2.isContinue());
1518:       assertFalse(node2.isThis());
1519:       assertEquals(3681, node2.getLineno());
1520:       assertFalse(node2.isParamList());
1521:       assertFalse(node2.isSetterDef());
1522:       assertFalse(node2.isStringKey());
1523:       assertFalse(node2.isBlock());
1524:       assertFalse(node2.isScript());
1525:       assertFalse(node2.isTry());
1526:       assertEquals(15077391, node2.getSourcePosition());
1527:       assertFalse(node2.isCatch());
1528:       assertFalse(node2.isFor());
1529:       assertFalse(node2.isHook());
1530:       assertEquals(39, node2.getType());
1531:       assertFalse(node2.isRegExp());
1532:       assertFalse(node2.isInstanceOf());
1533:       assertFalse(node2.isWith());
1534:       assertFalse(node2.hasMoreThanOneChild());
1535:       assertFalse(node2.isNE());
1536:       assertEquals(15, node2.getCharno());
1537:       assertFalse(node2.isDelProp());
1538:       assertTrue(node2.isNumber());
1539:       assertFalse(node2.isIf());
1540:       assertFalse(node2.isCase());
1541:       assertFalse(node2.isString());
1542:       assertFalse(node2.isEmpty());
1543:       assertFalse(node2.isGetterDef());
1544:       assertFalse(node2.isIn());
1545:       assertFalse(node2.isFunction());
1546:       assertFalse(node2.isInc());
1547:       assertFalse(node2.isDebugger());
1548:       assertFalse(node2.isDefaultCase());
1549:       assertFalse(node2.isSwitch());
1550:       assertFalse(node2.isThrow());
1551:       assertFalse(node2.isArrayLit());
1552:       assertEquals(0, node2.getChildCount());
1553:       assertFalse(node2.isFalse());
1554:       assertFalse(node2.isComma());
1555:       assertFalse(node2.isNull());
1556:       assertFalse(node2.isBreak());
1557:       assertFalse(node2.isGetProp());
1558:       assertFalse(node2.isName());
1559:       assertFalse(node2.isObjectLit());
1560:       assertFalse(node2.isAnd());
1561:       assertFalse(node2.isNot());
1562:       assertFalse(node2.isTrue());
1563:       assertFalse(node2.isExprResult());
1564:       assertFalse(node2.isVoid());
1565:       assertFalse(node2.isWhile());
1566:       assertFalse(node2.isCall());
1567:       assertFalse(node2.isGetElem());
1568:       assertFalse(node2.isDec());
1569:       assertFalse(node2.isAssign());
1570:       assertFalse(node2.isTypeOf());
1571:       assertFalse(node2.equals((Object)node0));
1572:       assertFalse(node2.equals((Object)node1));
1573:       
1574:       int int0 = node1.getIntProp(46);
1575:       assertEquals(30, Node.VAR_ARGS_NAME);
1576:       assertEquals(49, Node.DIRECT_EVAL);
1577:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1578:       assertEquals(1, Node.DECR_FLAG);
1579:       assertEquals(54, Node.SLASH_V);
1580:       assertEquals(57, Node.LAST_PROP);
1581:       assertEquals(32, Node.INCRDECR_PROP);
1582:       assertEquals(46, Node.IS_NAMESPACE);
1583:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1584:       assertEquals(57, Node.REFLECTED_OBJECT);
1585:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1586:       assertEquals(52, Node.LENGTH);
1587:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1588:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1589:       assertEquals(37, Node.OPT_ARG_NAME);
1590:       assertEquals(48, Node.DIRECTIVES);
1591:       assertEquals(56, Node.CHANGE_TIME);
1592:       assertEquals(12, Node.COLUMN_BITS);
1593:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1594:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1595:       assertEquals(4095, Node.COLUMN_MASK);
1596:       assertEquals(36, Node.QUOTED_PROP);
1597:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1598:       assertEquals(43, Node.IS_CONSTANT_NAME);
1599:       assertEquals(53, Node.INPUT_ID);
1600:       assertEquals(8, Node.FLAG_NO_THROWS);
1601:       assertEquals(39, Node.EMPTY_BLOCK);
1602:       assertEquals(55, Node.INFERRED_FUNCTION);
1603:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1604:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1605:       assertEquals(29, Node.JSDOC_INFO_PROP);
1606:       assertEquals(50, Node.FREE_CALL);
1607:       assertEquals(47, Node.IS_DISPATCHER);
1608:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1609:       assertEquals(40, Node.ORIGINALNAME_PROP);
1610:       assertEquals(2, Node.POST_FLAG);
1611:       assertEquals(57, Node.REFLECTED_OBJECT);
1612:       assertEquals(40, Node.ORIGINALNAME_PROP);
1613:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1614:       assertEquals(50, Node.FREE_CALL);
1615:       assertEquals(52, Node.LENGTH);
1616:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1617:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1618:       assertEquals(8, Node.FLAG_NO_THROWS);
1619:       assertEquals(39, Node.EMPTY_BLOCK);
1620:       assertEquals(57, Node.LAST_PROP);
1621:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1622:       assertEquals(1, Node.DECR_FLAG);
1623:       assertEquals(12, Node.COLUMN_BITS);
1624:       assertEquals(4095, Node.COLUMN_MASK);
1625:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1626:       assertEquals(55, Node.INFERRED_FUNCTION);
1627:       assertEquals(36, Node.QUOTED_PROP);
1628:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1629:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1630:       assertEquals(56, Node.CHANGE_TIME);
1631:       assertEquals(49, Node.DIRECT_EVAL);
1632:       assertEquals(37, Node.OPT_ARG_NAME);
1633:       assertEquals(48, Node.DIRECTIVES);
1634:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1635:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1636:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1637:       assertEquals(47, Node.IS_DISPATCHER);
1638:       assertEquals(29, Node.JSDOC_INFO_PROP);
1639:       assertEquals(53, Node.INPUT_ID);
1640:       assertEquals(32, Node.INCRDECR_PROP);
1641:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1642:       assertEquals(46, Node.IS_NAMESPACE);
1643:       assertEquals(30, Node.VAR_ARGS_NAME);
1644:       assertEquals(2, Node.POST_FLAG);
1645:       assertEquals(54, Node.SLASH_V);
1646:       assertEquals(43, Node.IS_CONSTANT_NAME);
1647:       assertNotSame(node0, node1);
1648:       assertNotSame(node1, node0);
1649:       assertFalse(node0.isArrayLit());
1650:       assertFalse(node0.isTry());
1651:       assertFalse(node0.isEmpty());
1652:       assertFalse(node0.isNE());
1653:       assertFalse(node0.isVoid());
1654:       assertFalse(node0.isIf());
1655:       assertFalse(node0.isDelProp());
1656:       assertFalse(node0.isGetterDef());
1657:       assertFalse(node0.isDebugger());
1658:       assertFalse(node0.isTrue());
1659:       assertFalse(node0.isCatch());
1660:       assertFalse(node0.isCase());
1661:       assertFalse(node0.isRegExp());
1662:       assertEquals(602259, node0.getSourcePosition());
1663:       assertFalse(node0.isFor());
1664:       assertFalse(node0.isHook());
1665:       assertFalse(node0.isFalse());
1666:       assertFalse(node0.isInc());
1667:       assertFalse(node0.isIn());
1668:       assertFalse(node0.isContinue());
1669:       assertFalse(node0.isAnd());
1670:       assertFalse(node0.isSetterDef());
1671:       assertFalse(node0.isFunction());
1672:       assertFalse(node0.isThrow());
1673:       assertEquals(40, node0.getType());
1674:       assertFalse(node0.isCast());
1675:       assertFalse(node0.hasOneChild());
1676:       assertFalse(node0.isLabelName());
1677:       assertFalse(node0.isExprResult());
1678:       assertFalse(node0.isGetElem());
1679:       assertFalse(node0.isScript());
1680:       assertEquals(147, node0.getLineno());
1681:       assertFalse(node0.isNumber());
1682:       assertFalse(node0.isOr());
1683:       assertFalse(node0.isNot());
1684:       assertFalse(node0.hasMoreThanOneChild());
1685:       assertFalse(node0.isInstanceOf());
1686:       assertFalse(node0.isObjectLit());
1687:       assertFalse(node0.isGetProp());
1688:       assertFalse(node0.isDec());
1689:       assertFalse(node0.isComma());
1690:       assertFalse(node0.isWith());
1691:       assertFalse(node0.isTypeOf());
1692:       assertTrue(node0.isString());
1693:       assertFalse(node0.isAssign());
1694:       assertFalse(node0.isWhile());
1695:       assertFalse(node0.hasChildren());
1696:       assertFalse(node0.isBlock());
1697:       assertFalse(node0.isThis());
1698:       assertFalse(node0.isReturn());
1699:       assertFalse(node0.isVar());
1700:       assertFalse(node0.isName());
1701:       assertFalse(node0.isAdd());
1702:       assertFalse(node0.isNew());
1703:       assertFalse(node0.isBreak());
1704:       assertFalse(node0.isCall());
1705:       assertFalse(node0.isSwitch());
1706:       assertFalse(node0.isParamList());
1707:       assertFalse(node0.isStringKey());
1708:       assertFalse(node0.isNull());
1709:       assertEquals(0, node0.getChildCount());
1710:       assertFalse(node0.isDo());
1711:       assertFalse(node0.isDefaultCase());
1712:       assertEquals(147, node0.getCharno());
1713:       assertFalse(node0.isLabel());
1714:       assertFalse(node0.isAssignAdd());
1715:       assertFalse(node1.isIf());
1716:       assertFalse(node1.isDelProp());
1717:       assertFalse(node1.isNE());
1718:       assertEquals(147, node1.getCharno());
1719:       assertFalse(node1.isCase());
1720:       assertFalse(node1.isIn());
1721:       assertFalse(node1.isGetterDef());
1722:       assertFalse(node1.isEmpty());
1723:       assertFalse(node1.isVoid());
1724:       assertFalse(node1.isTrue());
1725:       assertFalse(node1.isTry());
1726:       assertFalse(node1.isHook());
1727:       assertEquals(602259, node1.getSourcePosition());
1728:       assertFalse(node1.isFor());
1729:       assertFalse(node1.isBreak());
1730:       assertFalse(node1.isRegExp());
1731:       assertFalse(node1.isCatch());
1732:       assertFalse(node1.isGetProp());
1733:       assertFalse(node1.isSetterDef());
1734:       assertFalse(node1.isComma());
1735:       assertFalse(node1.isAnd());
1736:       assertFalse(node1.isObjectLit());
1737:       assertFalse(node1.isNot());
1738:       assertFalse(node1.isFunction());
1739:       assertFalse(node1.isInc());
1740:       assertFalse(node1.isDebugger());
1741:       assertFalse(node1.isFalse());
1742:       assertFalse(node1.isThrow());
1743:       assertEquals(40, node1.getType());
1744:       assertFalse(node1.isCast());
1745:       assertFalse(node1.isContinue());
1746:       assertFalse(node1.isReturn());
1747:       assertFalse(node1.isOr());
1748:       assertFalse(node1.isLabel());
1749:       assertFalse(node1.hasChildren());
1750:       assertFalse(node1.isAssignAdd());
1751:       assertFalse(node1.isDo());
1752:       assertFalse(node1.isNumber());
1753:       assertFalse(node1.isBlock());
1754:       assertFalse(node1.isExprResult());
1755:       assertTrue(node1.isString());
1756:       assertFalse(node1.hasOneChild());
1757:       assertFalse(node1.isWhile());
1758:       assertFalse(node1.isName());
1759:       assertFalse(node1.isGetElem());
1760:       assertFalse(node1.isCall());
1761:       assertFalse(node1.isAssign());
1762:       assertFalse(node1.isDec());
1763:       assertFalse(node1.isInstanceOf());
1764:       assertFalse(node1.isTypeOf());
1765:       assertFalse(node1.isWith());
1766:       assertFalse(node1.hasMoreThanOneChild());
1767:       assertFalse(node1.isThis());
1768:       assertFalse(node1.isNull());
1769:       assertFalse(node1.isParamList());
1770:       assertFalse(node1.isStringKey());
1771:       assertFalse(node1.isScript());
1772:       assertEquals(147, node1.getLineno());
1773:       assertFalse(node1.isAdd());
1774:       assertFalse(node1.isNew());
1775:       assertFalse(node1.isDefaultCase());
1776:       assertFalse(node1.isVar());
1777:       assertFalse(node1.isSwitch());
1778:       assertFalse(node1.isLabelName());
1779:       assertFalse(node1.isArrayLit());
1780:       assertEquals(0, node1.getChildCount());
1781:       assertFalse(node0.equals((Object)node2));
1782:       assertFalse(node0.equals((Object)node1));
1783:       assertFalse(node1.equals((Object)node0));
1784:       assertFalse(node1.equals((Object)node2));
1785:       assertEquals(0, int0);
1786:       
1787:       int int1 = node1.getType();
1788:       assertEquals(30, Node.VAR_ARGS_NAME);
1789:       assertEquals(49, Node.DIRECT_EVAL);
1790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1791:       assertEquals(1, Node.DECR_FLAG);
1792:       assertEquals(54, Node.SLASH_V);
1793:       assertEquals(57, Node.LAST_PROP);
1794:       assertEquals(32, Node.INCRDECR_PROP);
1795:       assertEquals(46, Node.IS_NAMESPACE);
1796:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1797:       assertEquals(57, Node.REFLECTED_OBJECT);
1798:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1799:       assertEquals(52, Node.LENGTH);
1800:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1801:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1802:       assertEquals(37, Node.OPT_ARG_NAME);
1803:       assertEquals(48, Node.DIRECTIVES);
1804:       assertEquals(56, Node.CHANGE_TIME);
1805:       assertEquals(12, Node.COLUMN_BITS);
1806:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1807:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1808:       assertEquals(4095, Node.COLUMN_MASK);
1809:       assertEquals(36, Node.QUOTED_PROP);
1810:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1811:       assertEquals(43, Node.IS_CONSTANT_NAME);
1812:       assertEquals(53, Node.INPUT_ID);
1813:       assertEquals(8, Node.FLAG_NO_THROWS);
1814:       assertEquals(39, Node.EMPTY_BLOCK);
1815:       assertEquals(55, Node.INFERRED_FUNCTION);
1816:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1817:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1818:       assertEquals(29, Node.JSDOC_INFO_PROP);
1819:       assertEquals(50, Node.FREE_CALL);
1820:       assertEquals(47, Node.IS_DISPATCHER);
1821:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1822:       assertEquals(40, Node.ORIGINALNAME_PROP);
1823:       assertEquals(2, Node.POST_FLAG);
1824:       assertEquals(57, Node.REFLECTED_OBJECT);
1825:       assertEquals(40, Node.ORIGINALNAME_PROP);
1826:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1827:       assertEquals(50, Node.FREE_CALL);
1828:       assertEquals(52, Node.LENGTH);
1829:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1830:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1831:       assertEquals(8, Node.FLAG_NO_THROWS);
1832:       assertEquals(39, Node.EMPTY_BLOCK);
1833:       assertEquals(57, Node.LAST_PROP);
1834:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1835:       assertEquals(1, Node.DECR_FLAG);
1836:       assertEquals(12, Node.COLUMN_BITS);
1837:       assertEquals(4095, Node.COLUMN_MASK);
1838:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1839:       assertEquals(55, Node.INFERRED_FUNCTION);
1840:       assertEquals(36, Node.QUOTED_PROP);
1841:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1842:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1843:       assertEquals(56, Node.CHANGE_TIME);
1844:       assertEquals(49, Node.DIRECT_EVAL);
1845:       assertEquals(37, Node.OPT_ARG_NAME);
1846:       assertEquals(48, Node.DIRECTIVES);
1847:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1848:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1849:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1850:       assertEquals(47, Node.IS_DISPATCHER);
1851:       assertEquals(29, Node.JSDOC_INFO_PROP);
1852:       assertEquals(53, Node.INPUT_ID);
1853:       assertEquals(32, Node.INCRDECR_PROP);
1854:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1855:       assertEquals(46, Node.IS_NAMESPACE);
1856:       assertEquals(30, Node.VAR_ARGS_NAME);
1857:       assertEquals(2, Node.POST_FLAG);
1858:       assertEquals(54, Node.SLASH_V);
1859:       assertEquals(43, Node.IS_CONSTANT_NAME);
1860:       assertNotSame(node0, node1);
1861:       assertNotSame(node1, node0);
1862:       assertFalse(node0.isArrayLit());
1863:       assertFalse(node0.isTry());
1864:       assertFalse(node0.isEmpty());
1865:       assertFalse(node0.isNE());
1866:       assertFalse(node0.isVoid());
1867:       assertFalse(node0.isIf());
1868:       assertFalse(node0.isDelProp());
1869:       assertFalse(node0.isGetterDef());
1870:       assertFalse(node0.isDebugger());
1871:       assertFalse(node0.isTrue());
1872:       assertFalse(node0.isCatch());
1873:       assertFalse(node0.isCase());
1874:       assertFalse(node0.isRegExp());
1875:       assertEquals(602259, node0.getSourcePosition());
1876:       assertFalse(node0.isFor());
1877:       assertFalse(node0.isHook());
1878:       assertFalse(node0.isFalse());
1879:       assertFalse(node0.isInc());
1880:       assertFalse(node0.isIn());
1881:       assertFalse(node0.isContinue());
1882:       assertFalse(node0.isAnd());
1883:       assertFalse(node0.isSetterDef());
1884:       assertFalse(node0.isFunction());
1885:       assertFalse(node0.isThrow());
1886:       assertEquals(40, node0.getType());
1887:       assertFalse(node0.isCast());
1888:       assertFalse(node0.hasOneChild());
1889:       assertFalse(node0.isLabelName());
1890:       assertFalse(node0.isExprResult());
1891:       assertFalse(node0.isGetElem());
1892:       assertFalse(node0.isScript());
1893:       assertEquals(147, node0.getLineno());
1894:       assertFalse(node0.isNumber());
1895:       assertFalse(node0.isOr());
1896:       assertFalse(node0.isNot());
1897:       assertFalse(node0.hasMoreThanOneChild());
1898:       assertFalse(node0.isInstanceOf());
1899:       assertFalse(node0.isObjectLit());
1900:       assertFalse(node0.isGetProp());
1901:       assertFalse(node0.isDec());
1902:       assertFalse(node0.isComma());
1903:       assertFalse(node0.isWith());
1904:       assertFalse(node0.isTypeOf());
1905:       assertTrue(node0.isString());
1906:       assertFalse(node0.isAssign());
1907:       assertFalse(node0.isWhile());
1908:       assertFalse(node0.hasChildren());
1909:       assertFalse(node0.isBlock());
1910:       assertFalse(node0.isThis());
1911:       assertFalse(node0.isReturn());
1912:       assertFalse(node0.isVar());
1913:       assertFalse(node0.isName());
1914:       assertFalse(node0.isAdd());
1915:       assertFalse(node0.isNew());
1916:       assertFalse(node0.isBreak());
1917:       assertFalse(node0.isCall());
1918:       assertFalse(node0.isSwitch());
1919:       assertFalse(node0.isParamList());
1920:       assertFalse(node0.isStringKey());
1921:       assertFalse(node0.isNull());
1922:       assertEquals(0, node0.getChildCount());
1923:       assertFalse(node0.isDo());
1924:       assertFalse(node0.isDefaultCase());
1925:       assertEquals(147, node0.getCharno());
1926:       assertFalse(node0.isLabel());
1927:       assertFalse(node0.isAssignAdd());
1928:       assertFalse(node1.isIf());
1929:       assertFalse(node1.isDelProp());
1930:       assertFalse(node1.isNE());
1931:       assertEquals(147, node1.getCharno());
1932:       assertFalse(node1.isCase());
1933:       assertFalse(node1.isIn());
1934:       assertFalse(node1.isGetterDef());
1935:       assertFalse(node1.isEmpty());
1936:       assertFalse(node1.isVoid());
1937:       assertFalse(node1.isTrue());
1938:       assertFalse(node1.isTry());
1939:       assertFalse(node1.isHook());
1940:       assertEquals(602259, node1.getSourcePosition());
1941:       assertFalse(node1.isFor());
1942:       assertFalse(node1.isBreak());
1943:       assertFalse(node1.isRegExp());
1944:       assertFalse(node1.isCatch());
1945:       assertFalse(node1.isGetProp());
1946:       assertFalse(node1.isSetterDef());
1947:       assertFalse(node1.isComma());
1948:       assertFalse(node1.isAnd());
1949:       assertFalse(node1.isObjectLit());
1950:       assertFalse(node1.isNot());
1951:       assertFalse(node1.isFunction());
1952:       assertFalse(node1.isInc());
1953:       assertFalse(node1.isDebugger());
1954:       assertFalse(node1.isFalse());
1955:       assertFalse(node1.isThrow());
1956:       assertEquals(40, node1.getType());
1957:       assertFalse(node1.isCast());
1958:       assertFalse(node1.isContinue());
1959:       assertFalse(node1.isReturn());
1960:       assertFalse(node1.isOr());
1961:       assertFalse(node1.isLabel());
1962:       assertFalse(node1.hasChildren());
1963:       assertFalse(node1.isAssignAdd());
1964:       assertFalse(node1.isDo());
1965:       assertFalse(node1.isNumber());
1966:       assertFalse(node1.isBlock());
1967:       assertFalse(node1.isExprResult());
1968:       assertTrue(node1.isString());
1969:       assertFalse(node1.hasOneChild());
1970:       assertFalse(node1.isWhile());
1971:       assertFalse(node1.isName());
1972:       assertFalse(node1.isGetElem());
1973:       assertFalse(node1.isCall());
1974:       assertFalse(node1.isAssign());
1975:       assertFalse(node1.isDec());
1976:       assertFalse(node1.isInstanceOf());
1977:       assertFalse(node1.isTypeOf());
1978:       assertFalse(node1.isWith());
1979:       assertFalse(node1.hasMoreThanOneChild());
1980:       assertFalse(node1.isThis());
1981:       assertFalse(node1.isNull());
1982:       assertFalse(node1.isParamList());
1983:       assertFalse(node1.isStringKey());
1984:       assertFalse(node1.isScript());
1985:       assertEquals(147, node1.getLineno());
1986:       assertFalse(node1.isAdd());
1987:       assertFalse(node1.isNew());
1988:       assertFalse(node1.isDefaultCase());
1989:       assertFalse(node1.isVar());
1990:       assertFalse(node1.isSwitch());
1991:       assertFalse(node1.isLabelName());
1992:       assertFalse(node1.isArrayLit());
1993:       assertEquals(0, node1.getChildCount());
1994:       assertFalse(node0.equals((Object)node2));
1995:       assertFalse(node0.equals((Object)node1));
1996:       assertFalse(node1.equals((Object)node0));
1997:       assertFalse(node1.equals((Object)node2));
1998:       assertFalse(int1 == int0);
1999:       assertEquals(40, int1);
2000:       
2001:       boolean boolean2 = node0.isCall();
2002:       assertEquals(30, Node.VAR_ARGS_NAME);
2003:       assertEquals(49, Node.DIRECT_EVAL);
2004:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2005:       assertEquals(1, Node.DECR_FLAG);
2006:       assertEquals(54, Node.SLASH_V);
2007:       assertEquals(57, Node.LAST_PROP);
2008:       assertEquals(32, Node.INCRDECR_PROP);
2009:       assertEquals(46, Node.IS_NAMESPACE);
2010:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2011:       assertEquals(57, Node.REFLECTED_OBJECT);
2012:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2013:       assertEquals(52, Node.LENGTH);
2014:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2015:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2016:       assertEquals(37, Node.OPT_ARG_NAME);
2017:       assertEquals(48, Node.DIRECTIVES);
2018:       assertEquals(56, Node.CHANGE_TIME);
2019:       assertEquals(12, Node.COLUMN_BITS);
2020:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2021:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2022:       assertEquals(4095, Node.COLUMN_MASK);
2023:       assertEquals(36, Node.QUOTED_PROP);
2024:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2025:       assertEquals(43, Node.IS_CONSTANT_NAME);
2026:       assertEquals(53, Node.INPUT_ID);
2027:       assertEquals(8, Node.FLAG_NO_THROWS);
2028:       assertEquals(39, Node.EMPTY_BLOCK);
2029:       assertEquals(55, Node.INFERRED_FUNCTION);
2030:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2031:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2032:       assertEquals(29, Node.JSDOC_INFO_PROP);
2033:       assertEquals(50, Node.FREE_CALL);
2034:       assertEquals(47, Node.IS_DISPATCHER);
2035:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2036:       assertEquals(40, Node.ORIGINALNAME_PROP);
2037:       assertEquals(2, Node.POST_FLAG);
2038:       assertNotSame(node0, node1);
2039:       assertFalse(node0.isArrayLit());
2040:       assertFalse(node0.isTry());
2041:       assertFalse(node0.isEmpty());
2042:       assertFalse(node0.isNE());
2043:       assertFalse(node0.isVoid());
2044:       assertFalse(node0.isIf());
2045:       assertFalse(node0.isDelProp());
2046:       assertFalse(node0.isGetterDef());
2047:       assertFalse(node0.isDebugger());
2048:       assertFalse(node0.isTrue());
2049:       assertFalse(node0.isCatch());
2050:       assertFalse(node0.isCase());
2051:       assertFalse(node0.isRegExp());
2052:       assertEquals(602259, node0.getSourcePosition());
2053:       assertFalse(node0.isFor());
2054:       assertFalse(node0.isHook());
2055:       assertFalse(node0.isFalse());
2056:       assertFalse(node0.isInc());
2057:       assertFalse(node0.isIn());
2058:       assertFalse(node0.isContinue());
2059:       assertFalse(node0.isAnd());
2060:       assertFalse(node0.isSetterDef());
2061:       assertFalse(node0.isFunction());
2062:       assertFalse(node0.isThrow());
2063:       assertEquals(40, node0.getType());
2064:       assertFalse(node0.isCast());
2065:       assertFalse(node0.hasOneChild());
2066:       assertFalse(node0.isLabelName());
2067:       assertFalse(node0.isExprResult());
2068:       assertFalse(node0.isGetElem());
2069:       assertFalse(node0.isScript());
2070:       assertEquals(147, node0.getLineno());
2071:       assertFalse(node0.isNumber());
2072:       assertFalse(node0.isOr());
2073:       assertFalse(node0.isNot());
2074:       assertFalse(node0.hasMoreThanOneChild());
2075:       assertFalse(node0.isInstanceOf());
2076:       assertFalse(node0.isObjectLit());
2077:       assertFalse(node0.isGetProp());
2078:       assertFalse(node0.isDec());
2079:       assertFalse(node0.isComma());
2080:       assertFalse(node0.isWith());
2081:       assertFalse(node0.isTypeOf());
2082:       assertTrue(node0.isString());
2083:       assertFalse(node0.isAssign());
2084:       assertFalse(node0.isWhile());
2085:       assertFalse(node0.hasChildren());
2086:       assertFalse(node0.isBlock());
2087:       assertFalse(node0.isThis());
2088:       assertFalse(node0.isReturn());
2089:       assertFalse(node0.isVar());
2090:       assertFalse(node0.isName());
2091:       assertFalse(node0.isAdd());
2092:       assertFalse(node0.isNew());
2093:       assertFalse(node0.isBreak());
2094:       assertFalse(node0.isCall());
2095:       assertFalse(node0.isSwitch());
2096:       assertFalse(node0.isParamList());
2097:       assertFalse(node0.isStringKey());
2098:       assertFalse(node0.isNull());
2099:       assertEquals(0, node0.getChildCount());
2100:       assertFalse(node0.isDo());
2101:       assertFalse(node0.isDefaultCase());
2102:       assertEquals(147, node0.getCharno());
2103:       assertFalse(node0.isLabel());
2104:       assertFalse(node0.isAssignAdd());
2105:       assertFalse(node0.equals((Object)node2));
2106:       assertFalse(node0.equals((Object)node1));
2107:       assertTrue(boolean2 == boolean1);
2108:       assertTrue(boolean2 == boolean0);
2109:       assertFalse(boolean2);
2110:       
2111:       boolean boolean3 = node1.isWith();
2112:       assertEquals(30, Node.VAR_ARGS_NAME);
2113:       assertEquals(49, Node.DIRECT_EVAL);
2114:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2115:       assertEquals(1, Node.DECR_FLAG);
2116:       assertEquals(54, Node.SLASH_V);
2117:       assertEquals(57, Node.LAST_PROP);
2118:       assertEquals(32, Node.INCRDECR_PROP);
2119:       assertEquals(46, Node.IS_NAMESPACE);
2120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2121:       assertEquals(57, Node.REFLECTED_OBJECT);
2122:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2123:       assertEquals(52, Node.LENGTH);
2124:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2125:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2126:       assertEquals(37, Node.OPT_ARG_NAME);
2127:       assertEquals(48, Node.DIRECTIVES);
2128:       assertEquals(56, Node.CHANGE_TIME);
2129:       assertEquals(12, Node.COLUMN_BITS);
2130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2131:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2132:       assertEquals(4095, Node.COLUMN_MASK);
2133:       assertEquals(36, Node.QUOTED_PROP);
2134:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2135:       assertEquals(43, Node.IS_CONSTANT_NAME);
2136:       assertEquals(53, Node.INPUT_ID);
2137:       assertEquals(8, Node.FLAG_NO_THROWS);
2138:       assertEquals(39, Node.EMPTY_BLOCK);
2139:       assertEquals(55, Node.INFERRED_FUNCTION);
2140:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2141:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2142:       assertEquals(29, Node.JSDOC_INFO_PROP);
2143:       assertEquals(50, Node.FREE_CALL);
2144:       assertEquals(47, Node.IS_DISPATCHER);
2145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2146:       assertEquals(40, Node.ORIGINALNAME_PROP);
2147:       assertEquals(2, Node.POST_FLAG);
2148:       assertEquals(57, Node.REFLECTED_OBJECT);
2149:       assertEquals(40, Node.ORIGINALNAME_PROP);
2150:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2151:       assertEquals(50, Node.FREE_CALL);
2152:       assertEquals(52, Node.LENGTH);
2153:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2154:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2155:       assertEquals(8, Node.FLAG_NO_THROWS);
2156:       assertEquals(39, Node.EMPTY_BLOCK);
2157:       assertEquals(57, Node.LAST_PROP);
2158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2159:       assertEquals(1, Node.DECR_FLAG);
2160:       assertEquals(12, Node.COLUMN_BITS);
2161:       assertEquals(4095, Node.COLUMN_MASK);
2162:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2163:       assertEquals(55, Node.INFERRED_FUNCTION);
2164:       assertEquals(36, Node.QUOTED_PROP);
2165:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2167:       assertEquals(56, Node.CHANGE_TIME);
2168:       assertEquals(49, Node.DIRECT_EVAL);
2169:       assertEquals(37, Node.OPT_ARG_NAME);
2170:       assertEquals(48, Node.DIRECTIVES);
2171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2172:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2173:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2174:       assertEquals(47, Node.IS_DISPATCHER);
2175:       assertEquals(29, Node.JSDOC_INFO_PROP);
2176:       assertEquals(53, Node.INPUT_ID);
2177:       assertEquals(32, Node.INCRDECR_PROP);
2178:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2179:       assertEquals(46, Node.IS_NAMESPACE);
2180:       assertEquals(30, Node.VAR_ARGS_NAME);
2181:       assertEquals(2, Node.POST_FLAG);
2182:       assertEquals(54, Node.SLASH_V);
2183:       assertEquals(43, Node.IS_CONSTANT_NAME);
2184:       assertNotSame(node0, node1);
2185:       assertNotSame(node1, node0);
2186:       assertFalse(node0.isArrayLit());
2187:       assertFalse(node0.isTry());
2188:       assertFalse(node0.isEmpty());
2189:       assertFalse(node0.isNE());
2190:       assertFalse(node0.isVoid());
2191:       assertFalse(node0.isIf());
2192:       assertFalse(node0.isDelProp());
2193:       assertFalse(node0.isGetterDef());
2194:       assertFalse(node0.isDebugger());
2195:       assertFalse(node0.isTrue());
2196:       assertFalse(node0.isCatch());
2197:       assertFalse(node0.isCase());
2198:       assertFalse(node0.isRegExp());
2199:       assertEquals(602259, node0.getSourcePosition());
2200:       assertFalse(node0.isFor());
2201:       assertFalse(node0.isHook());
2202:       assertFalse(node0.isFalse());
2203:       assertFalse(node0.isInc());
2204:       assertFalse(node0.isIn());
2205:       assertFalse(node0.isContinue());
2206:       assertFalse(node0.isAnd());
2207:       assertFalse(node0.isSetterDef());
2208:       assertFalse(node0.isFunction());
2209:       assertFalse(node0.isThrow());
2210:       assertEquals(40, node0.getType());
2211:       assertFalse(node0.isCast());
2212:       assertFalse(node0.hasOneChild());
2213:       assertFalse(node0.isLabelName());
2214:       assertFalse(node0.isExprResult());
2215:       assertFalse(node0.isGetElem());
2216:       assertFalse(node0.isScript());
2217:       assertEquals(147, node0.getLineno());
2218:       assertFalse(node0.isNumber());
2219:       assertFalse(node0.isOr());
2220:       assertFalse(node0.isNot());
2221:       assertFalse(node0.hasMoreThanOneChild());
2222:       assertFalse(node0.isInstanceOf());
2223:       assertFalse(node0.isObjectLit());
2224:       assertFalse(node0.isGetProp());
2225:       assertFalse(node0.isDec());
2226:       assertFalse(node0.isComma());
2227:       assertFalse(node0.isWith());
2228:       assertFalse(node0.isTypeOf());
2229:       assertTrue(node0.isString());
2230:       assertFalse(node0.isAssign());
2231:       assertFalse(node0.isWhile());
2232:       assertFalse(node0.hasChildren());
2233:       assertFalse(node0.isBlock());
2234:       assertFalse(node0.isThis());
2235:       assertFalse(node0.isReturn());
2236:       assertFalse(node0.isVar());
2237:       assertFalse(node0.isName());
2238:       assertFalse(node0.isAdd());
2239:       assertFalse(node0.isNew());
2240:       assertFalse(node0.isBreak());
2241:       assertFalse(node0.isCall());
2242:       assertFalse(node0.isSwitch());
2243:       assertFalse(node0.isParamList());
2244:       assertFalse(node0.isStringKey());
2245:       assertFalse(node0.isNull());
2246:       assertEquals(0, node0.getChildCount());
2247:       assertFalse(node0.isDo());
2248:       assertFalse(node0.isDefaultCase());
2249:       assertEquals(147, node0.getCharno());
2250:       assertFalse(node0.isLabel());
2251:       assertFalse(node0.isAssignAdd());
2252:       assertFalse(node1.isIf());
2253:       assertFalse(node1.isDelProp());
2254:       assertFalse(node1.isNE());
2255:       assertEquals(147, node1.getCharno());
2256:       assertFalse(node1.isCase());
2257:       assertFalse(node1.isIn());
2258:       assertFalse(node1.isGetterDef());
2259:       assertFalse(node1.isEmpty());
2260:       assertFalse(node1.isVoid());
2261:       assertFalse(node1.isTrue());
2262:       assertFalse(node1.isTry());
2263:       assertFalse(node1.isHook());
2264:       assertEquals(602259, node1.getSourcePosition());
2265:       assertFalse(node1.isFor());
2266:       assertFalse(node1.isBreak());
2267:       assertFalse(node1.isRegExp());
2268:       assertFalse(node1.isCatch());
2269:       assertFalse(node1.isGetProp());
2270:       assertFalse(node1.isSetterDef());
2271:       assertFalse(node1.isComma());
2272:       assertFalse(node1.isAnd());
2273:       assertFalse(node1.isObjectLit());
2274:       assertFalse(node1.isNot());
2275:       assertFalse(node1.isFunction());
2276:       assertFalse(node1.isInc());
2277:       assertFalse(node1.isDebugger());
2278:       assertFalse(node1.isFalse());
2279:       assertFalse(node1.isThrow());
2280:       assertEquals(40, node1.getType());
2281:       assertFalse(node1.isCast());
2282:       assertFalse(node1.isContinue());
2283:       assertFalse(node1.isReturn());
2284:       assertFalse(node1.isOr());
2285:       assertFalse(node1.isLabel());
2286:       assertFalse(node1.hasChildren());
2287:       assertFalse(node1.isAssignAdd());
2288:       assertFalse(node1.isDo());
2289:       assertFalse(node1.isNumber());
2290:       assertFalse(node1.isBlock());
2291:       assertFalse(node1.isExprResult());
2292:       assertTrue(node1.isString());
2293:       assertFalse(node1.hasOneChild());
2294:       assertFalse(node1.isWhile());
2295:       assertFalse(node1.isName());
2296:       assertFalse(node1.isGetElem());
2297:       assertFalse(node1.isCall());
2298:       assertFalse(node1.isAssign());
2299:       assertFalse(node1.isDec());
2300:       assertFalse(node1.isInstanceOf());
2301:       assertFalse(node1.isTypeOf());
2302:       assertFalse(node1.isWith());
2303:       assertFalse(node1.hasMoreThanOneChild());
2304:       assertFalse(node1.isThis());
2305:       assertFalse(node1.isNull());
2306:       assertFalse(node1.isParamList());
2307:       assertFalse(node1.isStringKey());
2308:       assertFalse(node1.isScript());
2309:       assertEquals(147, node1.getLineno());
2310:       assertFalse(node1.isAdd());
2311:       assertFalse(node1.isNew());
2312:       assertFalse(node1.isDefaultCase());
2313:       assertFalse(node1.isVar());
2314:       assertFalse(node1.isSwitch());
2315:       assertFalse(node1.isLabelName());
2316:       assertFalse(node1.isArrayLit());
2317:       assertEquals(0, node1.getChildCount());
2318:       assertFalse(node0.equals((Object)node2));
2319:       assertFalse(node0.equals((Object)node1));
2320:       assertFalse(node1.equals((Object)node0));
2321:       assertFalse(node1.equals((Object)node2));
2322:       assertTrue(boolean3 == boolean2);
2323:       assertTrue(boolean3 == boolean1);
2324:       assertTrue(boolean3 == boolean0);
2325:       assertFalse(boolean3);
2326:       
2327:       boolean boolean4 = node1.isObjectLit();
2328:       assertEquals(30, Node.VAR_ARGS_NAME);
2329:       assertEquals(49, Node.DIRECT_EVAL);
2330:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2331:       assertEquals(1, Node.DECR_FLAG);
2332:       assertEquals(54, Node.SLASH_V);
2333:       assertEquals(57, Node.LAST_PROP);
2334:       assertEquals(32, Node.INCRDECR_PROP);
2335:       assertEquals(46, Node.IS_NAMESPACE);
2336:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2337:       assertEquals(57, Node.REFLECTED_OBJECT);
2338:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2339:       assertEquals(52, Node.LENGTH);
2340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2341:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2342:       assertEquals(37, Node.OPT_ARG_NAME);
2343:       assertEquals(48, Node.DIRECTIVES);
2344:       assertEquals(56, Node.CHANGE_TIME);
2345:       assertEquals(12, Node.COLUMN_BITS);
2346:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2347:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2348:       assertEquals(4095, Node.COLUMN_MASK);
2349:       assertEquals(36, Node.QUOTED_PROP);
2350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2351:       assertEquals(43, Node.IS_CONSTANT_NAME);
2352:       assertEquals(53, Node.INPUT_ID);
2353:       assertEquals(8, Node.FLAG_NO_THROWS);
2354:       assertEquals(39, Node.EMPTY_BLOCK);
2355:       assertEquals(55, Node.INFERRED_FUNCTION);
2356:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2357:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2358:       assertEquals(29, Node.JSDOC_INFO_PROP);
2359:       assertEquals(50, Node.FREE_CALL);
2360:       assertEquals(47, Node.IS_DISPATCHER);
2361:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2362:       assertEquals(40, Node.ORIGINALNAME_PROP);
2363:       assertEquals(2, Node.POST_FLAG);
2364:       assertEquals(57, Node.REFLECTED_OBJECT);
2365:       assertEquals(40, Node.ORIGINALNAME_PROP);
2366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2367:       assertEquals(50, Node.FREE_CALL);
2368:       assertEquals(52, Node.LENGTH);
2369:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2370:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2371:       assertEquals(8, Node.FLAG_NO_THROWS);
2372:       assertEquals(39, Node.EMPTY_BLOCK);
2373:       assertEquals(57, Node.LAST_PROP);
2374:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2375:       assertEquals(1, Node.DECR_FLAG);
2376:       assertEquals(12, Node.COLUMN_BITS);
2377:       assertEquals(4095, Node.COLUMN_MASK);
2378:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2379:       assertEquals(55, Node.INFERRED_FUNCTION);
2380:       assertEquals(36, Node.QUOTED_PROP);
2381:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2382:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2383:       assertEquals(56, Node.CHANGE_TIME);
2384:       assertEquals(49, Node.DIRECT_EVAL);
2385:       assertEquals(37, Node.OPT_ARG_NAME);
2386:       assertEquals(48, Node.DIRECTIVES);
2387:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2388:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2389:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2390:       assertEquals(47, Node.IS_DISPATCHER);
2391:       assertEquals(29, Node.JSDOC_INFO_PROP);
2392:       assertEquals(53, Node.INPUT_ID);
2393:       assertEquals(32, Node.INCRDECR_PROP);
2394:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2395:       assertEquals(46, Node.IS_NAMESPACE);
2396:       assertEquals(30, Node.VAR_ARGS_NAME);
2397:       assertEquals(2, Node.POST_FLAG);
2398:       assertEquals(54, Node.SLASH_V);
2399:       assertEquals(43, Node.IS_CONSTANT_NAME);
2400:       assertNotSame(node0, node1);
2401:       assertNotSame(node1, node0);
2402:       assertFalse(node0.isArrayLit());
2403:       assertFalse(node0.isTry());
2404:       assertFalse(node0.isEmpty());
2405:       assertFalse(node0.isNE());
2406:       assertFalse(node0.isVoid());
2407:       assertFalse(node0.isIf());
2408:       assertFalse(node0.isDelProp());
2409:       assertFalse(node0.isGetterDef());
2410:       assertFalse(node0.isDebugger());
2411:       assertFalse(node0.isTrue());
2412:       assertFalse(node0.isCatch());
2413:       assertFalse(node0.isCase());
2414:       assertFalse(node0.isRegExp());
2415:       assertEquals(602259, node0.getSourcePosition());
2416:       assertFalse(node0.isFor());
2417:       assertFalse(node0.isHook());
2418:       assertFalse(node0.isFalse());
2419:       assertFalse(node0.isInc());
2420:       assertFalse(node0.isIn());
2421:       assertFalse(node0.isContinue());
2422:       assertFalse(node0.isAnd());
2423:       assertFalse(node0.isSetterDef());
2424:       assertFalse(node0.isFunction());
2425:       assertFalse(node0.isThrow());
2426:       assertEquals(40, node0.getType());
2427:       assertFalse(node0.isCast());
2428:       assertFalse(node0.hasOneChild());
2429:       assertFalse(node0.isLabelName());
2430:       assertFalse(node0.isExprResult());
2431:       assertFalse(node0.isGetElem());
2432:       assertFalse(node0.isScript());
2433:       assertEquals(147, node0.getLineno());
2434:       assertFalse(node0.isNumber());
2435:       assertFalse(node0.isOr());
2436:       assertFalse(node0.isNot());
2437:       assertFalse(node0.hasMoreThanOneChild());
2438:       assertFalse(node0.isInstanceOf());
2439:       assertFalse(node0.isObjectLit());
2440:       assertFalse(node0.isGetProp());
2441:       assertFalse(node0.isDec());
2442:       assertFalse(node0.isComma());
2443:       assertFalse(node0.isWith());
2444:       assertFalse(node0.isTypeOf());
2445:       assertTrue(node0.isString());
2446:       assertFalse(node0.isAssign());
2447:       assertFalse(node0.isWhile());
2448:       assertFalse(node0.hasChildren());
2449:       assertFalse(node0.isBlock());
2450:       assertFalse(node0.isThis());
2451:       assertFalse(node0.isReturn());
2452:       assertFalse(node0.isVar());
2453:       assertFalse(node0.isName());
2454:       assertFalse(node0.isAdd());
2455:       assertFalse(node0.isNew());
2456:       assertFalse(node0.isBreak());
2457:       assertFalse(node0.isCall());
2458:       assertFalse(node0.isSwitch());
2459:       assertFalse(node0.isParamList());
2460:       assertFalse(node0.isStringKey());
2461:       assertFalse(node0.isNull());
2462:       assertEquals(0, node0.getChildCount());
2463:       assertFalse(node0.isDo());
2464:       assertFalse(node0.isDefaultCase());
2465:       assertEquals(147, node0.getCharno());
2466:       assertFalse(node0.isLabel());
2467:       assertFalse(node0.isAssignAdd());
2468:       assertFalse(node1.isIf());
2469:       assertFalse(node1.isDelProp());
2470:       assertFalse(node1.isNE());
2471:       assertEquals(147, node1.getCharno());
2472:       assertFalse(node1.isCase());
2473:       assertFalse(node1.isIn());
2474:       assertFalse(node1.isGetterDef());
2475:       assertFalse(node1.isEmpty());
2476:       assertFalse(node1.isVoid());
2477:       assertFalse(node1.isTrue());
2478:       assertFalse(node1.isTry());
2479:       assertFalse(node1.isHook());
2480:       assertEquals(602259, node1.getSourcePosition());
2481:       assertFalse(node1.isFor());
2482:       assertFalse(node1.isBreak());
2483:       assertFalse(node1.isRegExp());
2484:       assertFalse(node1.isCatch());
2485:       assertFalse(node1.isGetProp());
2486:       assertFalse(node1.isSetterDef());
2487:       assertFalse(node1.isComma());
2488:       assertFalse(node1.isAnd());
2489:       assertFalse(node1.isObjectLit());
2490:       assertFalse(node1.isNot());
2491:       assertFalse(node1.isFunction());
2492:       assertFalse(node1.isInc());
2493:       assertFalse(node1.isDebugger());
2494:       assertFalse(node1.isFalse());
2495:       assertFalse(node1.isThrow());
2496:       assertEquals(40, node1.getType());
2497:       assertFalse(node1.isCast());
2498:       assertFalse(node1.isContinue());
2499:       assertFalse(node1.isReturn());
2500:       assertFalse(node1.isOr());
2501:       assertFalse(node1.isLabel());
2502:       assertFalse(node1.hasChildren());
2503:       assertFalse(node1.isAssignAdd());
2504:       assertFalse(node1.isDo());
2505:       assertFalse(node1.isNumber());
2506:       assertFalse(node1.isBlock());
2507:       assertFalse(node1.isExprResult());
2508:       assertTrue(node1.isString());
2509:       assertFalse(node1.hasOneChild());
2510:       assertFalse(node1.isWhile());
2511:       assertFalse(node1.isName());
2512:       assertFalse(node1.isGetElem());
2513:       assertFalse(node1.isCall());
2514:       assertFalse(node1.isAssign());
2515:       assertFalse(node1.isDec());
2516:       assertFalse(node1.isInstanceOf());
2517:       assertFalse(node1.isTypeOf());
2518:       assertFalse(node1.isWith());
2519:       assertFalse(node1.hasMoreThanOneChild());
2520:       assertFalse(node1.isThis());
2521:       assertFalse(node1.isNull());
2522:       assertFalse(node1.isParamList());
2523:       assertFalse(node1.isStringKey());
2524:       assertFalse(node1.isScript());
2525:       assertEquals(147, node1.getLineno());
2526:       assertFalse(node1.isAdd());
2527:       assertFalse(node1.isNew());
2528:       assertFalse(node1.isDefaultCase());
2529:       assertFalse(node1.isVar());
2530:       assertFalse(node1.isSwitch());
2531:       assertFalse(node1.isLabelName());
2532:       assertFalse(node1.isArrayLit());
2533:       assertEquals(0, node1.getChildCount());
2534:       assertFalse(node0.equals((Object)node2));
2535:       assertFalse(node0.equals((Object)node1));
2536:       assertFalse(node1.equals((Object)node0));
2537:       assertFalse(node1.equals((Object)node2));
2538:       assertTrue(boolean4 == boolean2);
2539:       assertTrue(boolean4 == boolean1);
2540:       assertTrue(boolean4 == boolean0);
2541:       assertTrue(boolean4 == boolean3);
2542:       assertFalse(boolean4);
2543:   }
2544: }
RegularFileObject[/tmp/EvoSuite_55_1628255654549/com/google/javascript/rhino/Node_55_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:14:15 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_55_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_55_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_55_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.common.collect.Platform",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.JSDocInfo$Marker",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.Iterators$12",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.JSTypeNative"
371:     );
372:   }
373: }

[MASTER] 13:14:15.775 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("GYoa", 147, 147);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotNull(node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());

Iterable<Node> iterable0 = node0.children();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotNull(iterable0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(iterable0.contains(node0));

node0.putIntProp(0, 0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());

Node node1 = node0.cloneTree();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertEquals(147, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.equals((Object)node0));

String string0 = node0.toString(true, true, true);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertNotNull(string0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.equals((Object)node1));
assertEquals("STRING GYoa 147", string0);

node0.setChangeTime(0);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.equals((Object)node1));

String string1 = node0.getSourceFileName();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertNull(string1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.equals((Object)node1));

boolean boolean0 = node0.isTypeOf();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.equals((Object)node1));
assertFalse(boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1615);
assertNotNull(node_SideEffectFlags0);
assertEquals(1615, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertEquals(1607, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(1607, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertEquals(1600, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(1600, node_SideEffectFlags1.valueOf());
assertEquals(1600, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags3);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags4);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertNotNull(node_SideEffectFlags5);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags5.valueOf());

node0.detachChildren();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.equals((Object)node1));

Node.SideEffectFlags node_SideEffectFlags6 = node_SideEffectFlags2.setMutatesArguments();
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertSame(node_SideEffectFlags6, node_SideEffectFlags1);
assertSame(node_SideEffectFlags6, node_SideEffectFlags5);
assertSame(node_SideEffectFlags6, node_SideEffectFlags2);
assertSame(node_SideEffectFlags6, node_SideEffectFlags0);
assertSame(node_SideEffectFlags6, node_SideEffectFlags3);
assertSame(node_SideEffectFlags6, node_SideEffectFlags4);
assertNotNull(node_SideEffectFlags6);
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags6.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags6.valueOf());

boolean boolean1 = node1.isHook();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertEquals(147, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertTrue(boolean1 == boolean0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1);

Node.SideEffectFlags node_SideEffectFlags7 = node_SideEffectFlags2.setReturnsTainted();
assertSame(node_SideEffectFlags7, node_SideEffectFlags3);
assertSame(node_SideEffectFlags7, node_SideEffectFlags2);
assertSame(node_SideEffectFlags7, node_SideEffectFlags5);
assertSame(node_SideEffectFlags7, node_SideEffectFlags4);
assertSame(node_SideEffectFlags7, node_SideEffectFlags1);
assertSame(node_SideEffectFlags7, node_SideEffectFlags0);
assertSame(node_SideEffectFlags7, node_SideEffectFlags6);
assertSame(node_SideEffectFlags0, node_SideEffectFlags7);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags6);
assertSame(node_SideEffectFlags1, node_SideEffectFlags5);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags1, node_SideEffectFlags7);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags2, node_SideEffectFlags7);
assertSame(node_SideEffectFlags2, node_SideEffectFlags5);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags6);
assertNotNull(node_SideEffectFlags7);
assertEquals(0, node_SideEffectFlags7.valueOf());
assertTrue(node_SideEffectFlags7.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());

Node node2 = Node.newNumber((double) 51, 3681, 15);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertNotNull(node2);
assertFalse(node2.hasChildren());
assertFalse(node2.isLabel());
assertFalse(node2.isReturn());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasOneChild());
assertFalse(node2.isOr());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isVar());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isThis());
assertEquals(3681, node2.getLineno());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertFalse(node2.isStringKey());
assertFalse(node2.isBlock());
assertFalse(node2.isScript());
assertFalse(node2.isTry());
assertEquals(15077391, node2.getSourcePosition());
assertFalse(node2.isCatch());
assertFalse(node2.isFor());
assertFalse(node2.isHook());
assertEquals(39, node2.getType());
assertFalse(node2.isRegExp());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isNE());
assertEquals(15, node2.getCharno());
assertFalse(node2.isDelProp());
assertTrue(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isCase());
assertFalse(node2.isString());
assertFalse(node2.isEmpty());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isFunction());
assertFalse(node2.isInc());
assertFalse(node2.isDebugger());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isName());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isNot());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isDec());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

int int0 = node1.getIntProp(46);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertEquals(147, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(0, int0);

int int1 = node1.getType();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertEquals(147, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(int1 == int0);
assertEquals(40, int1);

boolean boolean2 = node0.isCall();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertNotSame(node0, node1);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertFalse(boolean2);

boolean boolean3 = node1.isWith();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertEquals(147, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertTrue(boolean3 == boolean0);
assertFalse(boolean3);

boolean boolean4 = node1.isObjectLit();
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isVoid());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDebugger());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertEquals(40, node0.getType());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isTypeOf());
assertTrue(node0.isString());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isBlock());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNull());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals(147, node0.getCharno());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isNE());
assertEquals(147, node1.getCharno());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isTry());
assertFalse(node1.isHook());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isFor());
assertFalse(node1.isBreak());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isComma());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isDebugger());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isCast());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isNumber());
assertFalse(node1.isBlock());
assertFalse(node1.isExprResult());
assertTrue(node1.isString());
assertFalse(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isNull());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.isLabelName());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean4 == boolean2);
assertTrue(boolean4 == boolean1);
assertTrue(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertFalse(boolean4);


[MASTER] 13:14:20.871 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_76_1628255660629/com/google/javascript/rhino/Node_76_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_76_1628255660629/com/google/javascript/rhino/Node_76_tmp__ESTest_scaffolding.java]]
[MASTER] 13:14:20.871 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:20.871 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:20.872 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 231
[MASTER] 13:14:20.873 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_76_1628255660629/com/google/javascript/rhino/Node_76_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:14:20 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.InputId;
12: import com.google.javascript.rhino.Node;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.junit.runner.RunWith;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
18: public class Node_76_tmp__ESTest extends Node_76_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       Node node0 = Node.newString("GYoa", 147, 147);
23:       assertEquals(52, Node.LENGTH);
24:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
25:       assertEquals(15, Node.NO_SIDE_EFFECTS);
26:       assertEquals(40, Node.ORIGINALNAME_PROP);
27:       assertEquals(30, Node.VAR_ARGS_NAME);
28:       assertEquals(1, Node.DECR_FLAG);
29:       assertEquals(12, Node.COLUMN_BITS);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
32:       assertEquals(37, Node.OPT_ARG_NAME);
33:       assertEquals(48, Node.DIRECTIVES);
34:       assertEquals(4095, Node.COLUMN_MASK);
35:       assertEquals(8, Node.FLAG_NO_THROWS);
36:       assertEquals(39, Node.EMPTY_BLOCK);
37:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
38:       assertEquals(55, Node.INFERRED_FUNCTION);
39:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
40:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
41:       assertEquals(49, Node.DIRECT_EVAL);
42:       assertEquals(36, Node.QUOTED_PROP);
43:       assertEquals(57, Node.REFLECTED_OBJECT);
44:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
45:       assertEquals(56, Node.CHANGE_TIME);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
48:       assertEquals(29, Node.JSDOC_INFO_PROP);
49:       assertEquals(47, Node.IS_DISPATCHER);
50:       assertEquals(32, Node.INCRDECR_PROP);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(50, Node.FREE_CALL);
55:       assertEquals(43, Node.IS_CONSTANT_NAME);
56:       assertEquals(51, Node.STATIC_SOURCE_FILE);
57:       assertEquals(46, Node.IS_NAMESPACE);
58:       assertEquals(54, Node.SLASH_V);
59:       assertNotNull(node0);
60:       assertFalse(node0.isDec());
61:       assertFalse(node0.hasChildren());
62:       assertFalse(node0.isNumber());
63:       assertFalse(node0.isTypeOf());
64:       assertFalse(node0.isAssign());
65:       assertFalse(node0.isLabel());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isAssignAdd());
69:       assertFalse(node0.isDo());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.isWith());
72:       assertFalse(node0.isWhile());
73:       assertFalse(node0.isBlock());
74:       assertFalse(node0.hasMoreThanOneChild());
75:       assertFalse(node0.isInstanceOf());
76:       assertFalse(node0.isName());
77:       assertFalse(node0.isExprResult());
78:       assertFalse(node0.isGetElem());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isNull());
81:       assertFalse(node0.isParamList());
82:       assertFalse(node0.isStringKey());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isHook());
85:       assertFalse(node0.isVar());
86:       assertFalse(node0.isAdd());
87:       assertTrue(node0.isString());
88:       assertFalse(node0.isNew());
89:       assertFalse(node0.isDefaultCase());
90:       assertFalse(node0.isSwitch());
91:       assertFalse(node0.isScript());
92:       assertEquals(147, node0.getLineno());
93:       assertEquals(0, node0.getChildCount());
94:       assertFalse(node0.isLabelName());
95:       assertFalse(node0.isArrayLit());
96:       assertEquals(147, node0.getCharno());
97:       assertFalse(node0.isIf());
98:       assertFalse(node0.isGetterDef());
99:       assertFalse(node0.isDelProp());
100:       assertFalse(node0.isEmpty());
101:       assertFalse(node0.isFor());
102:       assertFalse(node0.isNE());
103:       assertFalse(node0.isIn());
104:       assertFalse(node0.isTry());
105:       assertFalse(node0.isCase());
106:       assertEquals(602259, node0.getSourcePosition());
107:       assertFalse(node0.isRegExp());
108:       assertFalse(node0.isTrue());
109:       assertFalse(node0.isCatch());
110:       assertFalse(node0.isVoid());
111:       assertFalse(node0.isBreak());
112:       assertFalse(node0.isThrow());
113:       assertFalse(node0.isFalse());
114:       assertFalse(node0.isComma());
115:       assertFalse(node0.isGetProp());
116:       assertFalse(node0.isSetterDef());
117:       assertFalse(node0.isInc());
118:       assertFalse(node0.isContinue());
119:       assertFalse(node0.isFunction());
120:       assertEquals(40, node0.getType());
121:       assertFalse(node0.isObjectLit());
122:       assertFalse(node0.isNot());
123:       assertFalse(node0.isDebugger());
124:       assertFalse(node0.isCast());
125:       assertFalse(node0.isAnd());
126:       
127:       Iterable<Node> iterable0 = node0.children();
128:       assertEquals(52, Node.LENGTH);
129:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
130:       assertEquals(15, Node.NO_SIDE_EFFECTS);
131:       assertEquals(40, Node.ORIGINALNAME_PROP);
132:       assertEquals(30, Node.VAR_ARGS_NAME);
133:       assertEquals(1, Node.DECR_FLAG);
134:       assertEquals(12, Node.COLUMN_BITS);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
137:       assertEquals(37, Node.OPT_ARG_NAME);
138:       assertEquals(48, Node.DIRECTIVES);
139:       assertEquals(4095, Node.COLUMN_MASK);
140:       assertEquals(8, Node.FLAG_NO_THROWS);
141:       assertEquals(39, Node.EMPTY_BLOCK);
142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
143:       assertEquals(55, Node.INFERRED_FUNCTION);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
146:       assertEquals(49, Node.DIRECT_EVAL);
147:       assertEquals(36, Node.QUOTED_PROP);
148:       assertEquals(57, Node.REFLECTED_OBJECT);
149:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
150:       assertEquals(56, Node.CHANGE_TIME);
151:       assertEquals(53, Node.INPUT_ID);
152:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(47, Node.IS_DISPATCHER);
155:       assertEquals(32, Node.INCRDECR_PROP);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(51, Node.STATIC_SOURCE_FILE);
162:       assertEquals(46, Node.IS_NAMESPACE);
163:       assertEquals(54, Node.SLASH_V);
164:       assertNotNull(iterable0);
165:       assertFalse(node0.isDec());
166:       assertFalse(node0.hasChildren());
167:       assertFalse(node0.isNumber());
168:       assertFalse(node0.isTypeOf());
169:       assertFalse(node0.isAssign());
170:       assertFalse(node0.isLabel());
171:       assertFalse(node0.isOr());
172:       assertFalse(node0.isReturn());
173:       assertFalse(node0.isAssignAdd());
174:       assertFalse(node0.isDo());
175:       assertFalse(node0.hasOneChild());
176:       assertFalse(node0.isWith());
177:       assertFalse(node0.isWhile());
178:       assertFalse(node0.isBlock());
179:       assertFalse(node0.hasMoreThanOneChild());
180:       assertFalse(node0.isInstanceOf());
181:       assertFalse(node0.isName());
182:       assertFalse(node0.isExprResult());
183:       assertFalse(node0.isGetElem());
184:       assertFalse(node0.isCall());
185:       assertFalse(node0.isNull());
186:       assertFalse(node0.isParamList());
187:       assertFalse(node0.isStringKey());
188:       assertFalse(node0.isThis());
189:       assertFalse(node0.isHook());
190:       assertFalse(node0.isVar());
191:       assertFalse(node0.isAdd());
192:       assertTrue(node0.isString());
193:       assertFalse(node0.isNew());
194:       assertFalse(node0.isDefaultCase());
195:       assertFalse(node0.isSwitch());
196:       assertFalse(node0.isScript());
197:       assertEquals(147, node0.getLineno());
198:       assertEquals(0, node0.getChildCount());
199:       assertFalse(node0.isLabelName());
200:       assertFalse(node0.isArrayLit());
201:       assertEquals(147, node0.getCharno());
202:       assertFalse(node0.isIf());
203:       assertFalse(node0.isGetterDef());
204:       assertFalse(node0.isDelProp());
205:       assertFalse(node0.isEmpty());
206:       assertFalse(node0.isFor());
207:       assertFalse(node0.isNE());
208:       assertFalse(node0.isIn());
209:       assertFalse(node0.isTry());
210:       assertFalse(node0.isCase());
211:       assertEquals(602259, node0.getSourcePosition());
212:       assertFalse(node0.isRegExp());
213:       assertFalse(node0.isTrue());
214:       assertFalse(node0.isCatch());
215:       assertFalse(node0.isVoid());
216:       assertFalse(node0.isBreak());
217:       assertFalse(node0.isThrow());
218:       assertFalse(node0.isFalse());
219:       assertFalse(node0.isComma());
220:       assertFalse(node0.isGetProp());
221:       assertFalse(node0.isSetterDef());
222:       assertFalse(node0.isInc());
223:       assertFalse(node0.isContinue());
224:       assertFalse(node0.isFunction());
225:       assertEquals(40, node0.getType());
226:       assertFalse(node0.isObjectLit());
227:       assertFalse(node0.isNot());
228:       assertFalse(node0.isDebugger());
229:       assertFalse(node0.isCast());
230:       assertFalse(node0.isAnd());
231:       assertFalse(iterable0.contains(node0));
232:       
233:       node0.putIntProp(0, 0);
234:       assertEquals(52, Node.LENGTH);
235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
236:       assertEquals(15, Node.NO_SIDE_EFFECTS);
237:       assertEquals(40, Node.ORIGINALNAME_PROP);
238:       assertEquals(30, Node.VAR_ARGS_NAME);
239:       assertEquals(1, Node.DECR_FLAG);
240:       assertEquals(12, Node.COLUMN_BITS);
241:       assertEquals(57, Node.LAST_PROP);
242:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
243:       assertEquals(37, Node.OPT_ARG_NAME);
244:       assertEquals(48, Node.DIRECTIVES);
245:       assertEquals(4095, Node.COLUMN_MASK);
246:       assertEquals(8, Node.FLAG_NO_THROWS);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
251:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
252:       assertEquals(49, Node.DIRECT_EVAL);
253:       assertEquals(36, Node.QUOTED_PROP);
254:       assertEquals(57, Node.REFLECTED_OBJECT);
255:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
256:       assertEquals(56, Node.CHANGE_TIME);
257:       assertEquals(53, Node.INPUT_ID);
258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
259:       assertEquals(29, Node.JSDOC_INFO_PROP);
260:       assertEquals(47, Node.IS_DISPATCHER);
261:       assertEquals(32, Node.INCRDECR_PROP);
262:       assertEquals(2, Node.POST_FLAG);
263:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
265:       assertEquals(50, Node.FREE_CALL);
266:       assertEquals(43, Node.IS_CONSTANT_NAME);
267:       assertEquals(51, Node.STATIC_SOURCE_FILE);
268:       assertEquals(46, Node.IS_NAMESPACE);
269:       assertEquals(54, Node.SLASH_V);
270:       assertFalse(node0.isDec());
271:       assertFalse(node0.hasChildren());
272:       assertFalse(node0.isNumber());
273:       assertFalse(node0.isTypeOf());
274:       assertFalse(node0.isAssign());
275:       assertFalse(node0.isLabel());
276:       assertFalse(node0.isOr());
277:       assertFalse(node0.isReturn());
278:       assertFalse(node0.isAssignAdd());
279:       assertFalse(node0.isDo());
280:       assertFalse(node0.hasOneChild());
281:       assertFalse(node0.isWith());
282:       assertFalse(node0.isWhile());
283:       assertFalse(node0.isBlock());
284:       assertFalse(node0.hasMoreThanOneChild());
285:       assertFalse(node0.isInstanceOf());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isExprResult());
288:       assertFalse(node0.isGetElem());
289:       assertFalse(node0.isCall());
290:       assertFalse(node0.isNull());
291:       assertFalse(node0.isParamList());
292:       assertFalse(node0.isStringKey());
293:       assertFalse(node0.isThis());
294:       assertFalse(node0.isHook());
295:       assertFalse(node0.isVar());
296:       assertFalse(node0.isAdd());
297:       assertTrue(node0.isString());
298:       assertFalse(node0.isNew());
299:       assertFalse(node0.isDefaultCase());
300:       assertFalse(node0.isSwitch());
301:       assertFalse(node0.isScript());
302:       assertEquals(147, node0.getLineno());
303:       assertEquals(0, node0.getChildCount());
304:       assertFalse(node0.isLabelName());
305:       assertFalse(node0.isArrayLit());
306:       assertEquals(147, node0.getCharno());
307:       assertFalse(node0.isIf());
308:       assertFalse(node0.isGetterDef());
309:       assertFalse(node0.isDelProp());
310:       assertFalse(node0.isEmpty());
311:       assertFalse(node0.isFor());
312:       assertFalse(node0.isNE());
313:       assertFalse(node0.isIn());
314:       assertFalse(node0.isTry());
315:       assertFalse(node0.isCase());
316:       assertEquals(602259, node0.getSourcePosition());
317:       assertFalse(node0.isRegExp());
318:       assertFalse(node0.isTrue());
319:       assertFalse(node0.isCatch());
320:       assertFalse(node0.isVoid());
321:       assertFalse(node0.isBreak());
322:       assertFalse(node0.isThrow());
323:       assertFalse(node0.isFalse());
324:       assertFalse(node0.isComma());
325:       assertFalse(node0.isGetProp());
326:       assertFalse(node0.isSetterDef());
327:       assertFalse(node0.isInc());
328:       assertFalse(node0.isContinue());
329:       assertFalse(node0.isFunction());
330:       assertEquals(40, node0.getType());
331:       assertFalse(node0.isObjectLit());
332:       assertFalse(node0.isNot());
333:       assertFalse(node0.isDebugger());
334:       assertFalse(node0.isCast());
335:       assertFalse(node0.isAnd());
336:       
337:       Node node1 = node0.cloneTree();
338:       assertEquals(52, Node.LENGTH);
339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
340:       assertEquals(15, Node.NO_SIDE_EFFECTS);
341:       assertEquals(40, Node.ORIGINALNAME_PROP);
342:       assertEquals(30, Node.VAR_ARGS_NAME);
343:       assertEquals(1, Node.DECR_FLAG);
344:       assertEquals(12, Node.COLUMN_BITS);
345:       assertEquals(57, Node.LAST_PROP);
346:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(48, Node.DIRECTIVES);
349:       assertEquals(4095, Node.COLUMN_MASK);
350:       assertEquals(8, Node.FLAG_NO_THROWS);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
353:       assertEquals(55, Node.INFERRED_FUNCTION);
354:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
355:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
356:       assertEquals(49, Node.DIRECT_EVAL);
357:       assertEquals(36, Node.QUOTED_PROP);
358:       assertEquals(57, Node.REFLECTED_OBJECT);
359:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
360:       assertEquals(56, Node.CHANGE_TIME);
361:       assertEquals(53, Node.INPUT_ID);
362:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
363:       assertEquals(29, Node.JSDOC_INFO_PROP);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(32, Node.INCRDECR_PROP);
366:       assertEquals(2, Node.POST_FLAG);
367:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
368:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
369:       assertEquals(50, Node.FREE_CALL);
370:       assertEquals(43, Node.IS_CONSTANT_NAME);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       assertEquals(46, Node.IS_NAMESPACE);
373:       assertEquals(54, Node.SLASH_V);
374:       assertEquals(52, Node.LENGTH);
375:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
376:       assertEquals(54, Node.SLASH_V);
377:       assertEquals(57, Node.REFLECTED_OBJECT);
378:       assertEquals(30, Node.VAR_ARGS_NAME);
379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
380:       assertEquals(15, Node.NO_SIDE_EFFECTS);
381:       assertEquals(57, Node.LAST_PROP);
382:       assertEquals(32, Node.INCRDECR_PROP);
383:       assertEquals(1, Node.DECR_FLAG);
384:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
385:       assertEquals(46, Node.IS_NAMESPACE);
386:       assertEquals(51, Node.STATIC_SOURCE_FILE);
387:       assertEquals(47, Node.IS_DISPATCHER);
388:       assertEquals(2, Node.POST_FLAG);
389:       assertEquals(50, Node.FREE_CALL);
390:       assertEquals(40, Node.ORIGINALNAME_PROP);
391:       assertEquals(43, Node.IS_CONSTANT_NAME);
392:       assertEquals(53, Node.INPUT_ID);
393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
394:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
395:       assertEquals(36, Node.QUOTED_PROP);
396:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
397:       assertEquals(55, Node.INFERRED_FUNCTION);
398:       assertEquals(29, Node.JSDOC_INFO_PROP);
399:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
401:       assertEquals(39, Node.EMPTY_BLOCK);
402:       assertEquals(12, Node.COLUMN_BITS);
403:       assertEquals(4095, Node.COLUMN_MASK);
404:       assertEquals(8, Node.FLAG_NO_THROWS);
405:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
406:       assertEquals(56, Node.CHANGE_TIME);
407:       assertEquals(37, Node.OPT_ARG_NAME);
408:       assertEquals(48, Node.DIRECTIVES);
409:       assertEquals(49, Node.DIRECT_EVAL);
410:       assertNotSame(node0, node1);
411:       assertNotSame(node1, node0);
412:       assertNotNull(node1);
413:       assertFalse(node0.isDec());
414:       assertFalse(node0.hasChildren());
415:       assertFalse(node0.isNumber());
416:       assertFalse(node0.isTypeOf());
417:       assertFalse(node0.isAssign());
418:       assertFalse(node0.isLabel());
419:       assertFalse(node0.isOr());
420:       assertFalse(node0.isReturn());
421:       assertFalse(node0.isAssignAdd());
422:       assertFalse(node0.isDo());
423:       assertFalse(node0.hasOneChild());
424:       assertFalse(node0.isWith());
425:       assertFalse(node0.isWhile());
426:       assertFalse(node0.isBlock());
427:       assertFalse(node0.hasMoreThanOneChild());
428:       assertFalse(node0.isInstanceOf());
429:       assertFalse(node0.isName());
430:       assertFalse(node0.isExprResult());
431:       assertFalse(node0.isGetElem());
432:       assertFalse(node0.isCall());
433:       assertFalse(node0.isNull());
434:       assertFalse(node0.isParamList());
435:       assertFalse(node0.isStringKey());
436:       assertFalse(node0.isThis());
437:       assertFalse(node0.isHook());
438:       assertFalse(node0.isVar());
439:       assertFalse(node0.isAdd());
440:       assertTrue(node0.isString());
441:       assertFalse(node0.isNew());
442:       assertFalse(node0.isDefaultCase());
443:       assertFalse(node0.isSwitch());
444:       assertFalse(node0.isScript());
445:       assertEquals(147, node0.getLineno());
446:       assertEquals(0, node0.getChildCount());
447:       assertFalse(node0.isLabelName());
448:       assertFalse(node0.isArrayLit());
449:       assertEquals(147, node0.getCharno());
450:       assertFalse(node0.isIf());
451:       assertFalse(node0.isGetterDef());
452:       assertFalse(node0.isDelProp());
453:       assertFalse(node0.isEmpty());
454:       assertFalse(node0.isFor());
455:       assertFalse(node0.isNE());
456:       assertFalse(node0.isIn());
457:       assertFalse(node0.isTry());
458:       assertFalse(node0.isCase());
459:       assertEquals(602259, node0.getSourcePosition());
460:       assertFalse(node0.isRegExp());
461:       assertFalse(node0.isTrue());
462:       assertFalse(node0.isCatch());
463:       assertFalse(node0.isVoid());
464:       assertFalse(node0.isBreak());
465:       assertFalse(node0.isThrow());
466:       assertFalse(node0.isFalse());
467:       assertFalse(node0.isComma());
468:       assertFalse(node0.isGetProp());
469:       assertFalse(node0.isSetterDef());
470:       assertFalse(node0.isInc());
471:       assertFalse(node0.isContinue());
472:       assertFalse(node0.isFunction());
473:       assertEquals(40, node0.getType());
474:       assertFalse(node0.isObjectLit());
475:       assertFalse(node0.isNot());
476:       assertFalse(node0.isDebugger());
477:       assertFalse(node0.isCast());
478:       assertFalse(node0.isAnd());
479:       assertFalse(node1.hasChildren());
480:       assertFalse(node1.isNumber());
481:       assertFalse(node1.isTypeOf());
482:       assertFalse(node1.isLabelName());
483:       assertFalse(node1.isAssign());
484:       assertFalse(node1.isDec());
485:       assertFalse(node1.isAssignAdd());
486:       assertFalse(node1.isOr());
487:       assertFalse(node1.hasOneChild());
488:       assertFalse(node1.isScript());
489:       assertEquals(147, node1.getLineno());
490:       assertFalse(node1.isDo());
491:       assertFalse(node1.isNot());
492:       assertFalse(node1.isAnd());
493:       assertFalse(node1.isLabel());
494:       assertFalse(node1.isContinue());
495:       assertFalse(node1.isCast());
496:       assertFalse(node1.isBreak());
497:       assertFalse(node1.isNull());
498:       assertFalse(node1.isComma());
499:       assertFalse(node1.isName());
500:       assertFalse(node1.isVar());
501:       assertFalse(node1.isNew());
502:       assertFalse(node1.isObjectLit());
503:       assertFalse(node1.isGetProp());
504:       assertFalse(node1.isAdd());
505:       assertEquals(602259, node1.getSourcePosition());
506:       assertFalse(node1.isVoid());
507:       assertFalse(node1.isTrue());
508:       assertFalse(node1.isWhile());
509:       assertFalse(node1.isReturn());
510:       assertFalse(node1.isExprResult());
511:       assertFalse(node1.isGetElem());
512:       assertFalse(node1.isCall());
513:       assertEquals(147, node1.getCharno());
514:       assertFalse(node1.isIf());
515:       assertFalse(node1.isDelProp());
516:       assertFalse(node1.isGetterDef());
517:       assertFalse(node1.isFor());
518:       assertFalse(node1.isNE());
519:       assertFalse(node1.isIn());
520:       assertFalse(node1.isTry());
521:       assertFalse(node1.isEmpty());
522:       assertFalse(node1.isDefaultCase());
523:       assertFalse(node1.isDebugger());
524:       assertEquals(40, node1.getType());
525:       assertFalse(node1.isSwitch());
526:       assertEquals(0, node1.getChildCount());
527:       assertFalse(node1.isArrayLit());
528:       assertFalse(node1.isFunction());
529:       assertFalse(node1.isFalse());
530:       assertFalse(node1.isThrow());
531:       assertFalse(node1.isThis());
532:       assertFalse(node1.isParamList());
533:       assertFalse(node1.isStringKey());
534:       assertFalse(node1.isSetterDef());
535:       assertFalse(node1.isInc());
536:       assertFalse(node1.isWith());
537:       assertFalse(node1.isRegExp());
538:       assertFalse(node1.isCase());
539:       assertFalse(node1.isBlock());
540:       assertTrue(node1.isString());
541:       assertFalse(node1.isHook());
542:       assertFalse(node1.hasMoreThanOneChild());
543:       assertFalse(node1.isCatch());
544:       assertFalse(node1.isInstanceOf());
545:       assertFalse(node1.equals((Object)node0));
546:       
547:       String string0 = node0.toString(true, true, true);
548:       assertEquals(52, Node.LENGTH);
549:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
550:       assertEquals(15, Node.NO_SIDE_EFFECTS);
551:       assertEquals(40, Node.ORIGINALNAME_PROP);
552:       assertEquals(30, Node.VAR_ARGS_NAME);
553:       assertEquals(1, Node.DECR_FLAG);
554:       assertEquals(12, Node.COLUMN_BITS);
555:       assertEquals(57, Node.LAST_PROP);
556:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
557:       assertEquals(37, Node.OPT_ARG_NAME);
558:       assertEquals(48, Node.DIRECTIVES);
559:       assertEquals(4095, Node.COLUMN_MASK);
560:       assertEquals(8, Node.FLAG_NO_THROWS);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
563:       assertEquals(55, Node.INFERRED_FUNCTION);
564:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
565:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
566:       assertEquals(49, Node.DIRECT_EVAL);
567:       assertEquals(36, Node.QUOTED_PROP);
568:       assertEquals(57, Node.REFLECTED_OBJECT);
569:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
570:       assertEquals(56, Node.CHANGE_TIME);
571:       assertEquals(53, Node.INPUT_ID);
572:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
573:       assertEquals(29, Node.JSDOC_INFO_PROP);
574:       assertEquals(47, Node.IS_DISPATCHER);
575:       assertEquals(32, Node.INCRDECR_PROP);
576:       assertEquals(2, Node.POST_FLAG);
577:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
578:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
579:       assertEquals(50, Node.FREE_CALL);
580:       assertEquals(43, Node.IS_CONSTANT_NAME);
581:       assertEquals(51, Node.STATIC_SOURCE_FILE);
582:       assertEquals(46, Node.IS_NAMESPACE);
583:       assertEquals(54, Node.SLASH_V);
584:       assertNotSame(node0, node1);
585:       assertNotNull(string0);
586:       assertFalse(node0.isDec());
587:       assertFalse(node0.hasChildren());
588:       assertFalse(node0.isNumber());
589:       assertFalse(node0.isTypeOf());
590:       assertFalse(node0.isAssign());
591:       assertFalse(node0.isLabel());
592:       assertFalse(node0.isOr());
593:       assertFalse(node0.isReturn());
594:       assertFalse(node0.isAssignAdd());
595:       assertFalse(node0.isDo());
596:       assertFalse(node0.hasOneChild());
597:       assertFalse(node0.isWith());
598:       assertFalse(node0.isWhile());
599:       assertFalse(node0.isBlock());
600:       assertFalse(node0.hasMoreThanOneChild());
601:       assertFalse(node0.isInstanceOf());
602:       assertFalse(node0.isName());
603:       assertFalse(node0.isExprResult());
604:       assertFalse(node0.isGetElem());
605:       assertFalse(node0.isCall());
606:       assertFalse(node0.isNull());
607:       assertFalse(node0.isParamList());
608:       assertFalse(node0.isStringKey());
609:       assertFalse(node0.isThis());
610:       assertFalse(node0.isHook());
611:       assertFalse(node0.isVar());
612:       assertFalse(node0.isAdd());
613:       assertTrue(node0.isString());
614:       assertFalse(node0.isNew());
615:       assertFalse(node0.isDefaultCase());
616:       assertFalse(node0.isSwitch());
617:       assertFalse(node0.isScript());
618:       assertEquals(147, node0.getLineno());
619:       assertEquals(0, node0.getChildCount());
620:       assertFalse(node0.isLabelName());
621:       assertFalse(node0.isArrayLit());
622:       assertEquals(147, node0.getCharno());
623:       assertFalse(node0.isIf());
624:       assertFalse(node0.isGetterDef());
625:       assertFalse(node0.isDelProp());
626:       assertFalse(node0.isEmpty());
627:       assertFalse(node0.isFor());
628:       assertFalse(node0.isNE());
629:       assertFalse(node0.isIn());
630:       assertFalse(node0.isTry());
631:       assertFalse(node0.isCase());
632:       assertEquals(602259, node0.getSourcePosition());
633:       assertFalse(node0.isRegExp());
634:       assertFalse(node0.isTrue());
635:       assertFalse(node0.isCatch());
636:       assertFalse(node0.isVoid());
637:       assertFalse(node0.isBreak());
638:       assertFalse(node0.isThrow());
639:       assertFalse(node0.isFalse());
640:       assertFalse(node0.isComma());
641:       assertFalse(node0.isGetProp());
642:       assertFalse(node0.isSetterDef());
643:       assertFalse(node0.isInc());
644:       assertFalse(node0.isContinue());
645:       assertFalse(node0.isFunction());
646:       assertEquals(40, node0.getType());
647:       assertFalse(node0.isObjectLit());
648:       assertFalse(node0.isNot());
649:       assertFalse(node0.isDebugger());
650:       assertFalse(node0.isCast());
651:       assertFalse(node0.isAnd());
652:       assertFalse(node0.equals((Object)node1));
653:       assertEquals("STRING GYoa 147", string0);
654:       
655:       node0.setChangeTime(0);
656:       assertEquals(52, Node.LENGTH);
657:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
658:       assertEquals(15, Node.NO_SIDE_EFFECTS);
659:       assertEquals(40, Node.ORIGINALNAME_PROP);
660:       assertEquals(30, Node.VAR_ARGS_NAME);
661:       assertEquals(1, Node.DECR_FLAG);
662:       assertEquals(12, Node.COLUMN_BITS);
663:       assertEquals(57, Node.LAST_PROP);
664:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
665:       assertEquals(37, Node.OPT_ARG_NAME);
666:       assertEquals(48, Node.DIRECTIVES);
667:       assertEquals(4095, Node.COLUMN_MASK);
668:       assertEquals(8, Node.FLAG_NO_THROWS);
669:       assertEquals(39, Node.EMPTY_BLOCK);
670:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
671:       assertEquals(55, Node.INFERRED_FUNCTION);
672:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
673:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
674:       assertEquals(49, Node.DIRECT_EVAL);
675:       assertEquals(36, Node.QUOTED_PROP);
676:       assertEquals(57, Node.REFLECTED_OBJECT);
677:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
678:       assertEquals(56, Node.CHANGE_TIME);
679:       assertEquals(53, Node.INPUT_ID);
680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
681:       assertEquals(29, Node.JSDOC_INFO_PROP);
682:       assertEquals(47, Node.IS_DISPATCHER);
683:       assertEquals(32, Node.INCRDECR_PROP);
684:       assertEquals(2, Node.POST_FLAG);
685:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
686:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
687:       assertEquals(50, Node.FREE_CALL);
688:       assertEquals(43, Node.IS_CONSTANT_NAME);
689:       assertEquals(51, Node.STATIC_SOURCE_FILE);
690:       assertEquals(46, Node.IS_NAMESPACE);
691:       assertEquals(54, Node.SLASH_V);
692:       assertNotSame(node0, node1);
693:       assertFalse(node0.isDec());
694:       assertFalse(node0.hasChildren());
695:       assertFalse(node0.isNumber());
696:       assertFalse(node0.isTypeOf());
697:       assertFalse(node0.isAssign());
698:       assertFalse(node0.isLabel());
699:       assertFalse(node0.isOr());
700:       assertFalse(node0.isReturn());
701:       assertFalse(node0.isAssignAdd());
702:       assertFalse(node0.isDo());
703:       assertFalse(node0.hasOneChild());
704:       assertFalse(node0.isWith());
705:       assertFalse(node0.isWhile());
706:       assertFalse(node0.isBlock());
707:       assertFalse(node0.hasMoreThanOneChild());
708:       assertFalse(node0.isInstanceOf());
709:       assertFalse(node0.isName());
710:       assertFalse(node0.isExprResult());
711:       assertFalse(node0.isGetElem());
712:       assertFalse(node0.isCall());
713:       assertFalse(node0.isNull());
714:       assertFalse(node0.isParamList());
715:       assertFalse(node0.isStringKey());
716:       assertFalse(node0.isThis());
717:       assertFalse(node0.isHook());
718:       assertFalse(node0.isVar());
719:       assertFalse(node0.isAdd());
720:       assertTrue(node0.isString());
721:       assertFalse(node0.isNew());
722:       assertFalse(node0.isDefaultCase());
723:       assertFalse(node0.isSwitch());
724:       assertFalse(node0.isScript());
725:       assertEquals(147, node0.getLineno());
726:       assertEquals(0, node0.getChildCount());
727:       assertFalse(node0.isLabelName());
728:       assertFalse(node0.isArrayLit());
729:       assertEquals(147, node0.getCharno());
730:       assertFalse(node0.isIf());
731:       assertFalse(node0.isGetterDef());
732:       assertFalse(node0.isDelProp());
733:       assertFalse(node0.isEmpty());
734:       assertFalse(node0.isFor());
735:       assertFalse(node0.isNE());
736:       assertFalse(node0.isIn());
737:       assertFalse(node0.isTry());
738:       assertFalse(node0.isCase());
739:       assertEquals(602259, node0.getSourcePosition());
740:       assertFalse(node0.isRegExp());
741:       assertFalse(node0.isTrue());
742:       assertFalse(node0.isCatch());
743:       assertFalse(node0.isVoid());
744:       assertFalse(node0.isBreak());
745:       assertFalse(node0.isThrow());
746:       assertFalse(node0.isFalse());
747:       assertFalse(node0.isComma());
748:       assertFalse(node0.isGetProp());
749:       assertFalse(node0.isSetterDef());
750:       assertFalse(node0.isInc());
751:       assertFalse(node0.isContinue());
752:       assertFalse(node0.isFunction());
753:       assertEquals(40, node0.getType());
754:       assertFalse(node0.isObjectLit());
755:       assertFalse(node0.isNot());
756:       assertFalse(node0.isDebugger());
757:       assertFalse(node0.isCast());
758:       assertFalse(node0.isAnd());
759:       assertFalse(node0.equals((Object)node1));
760:       
761:       String string1 = node0.getSourceFileName();
762:       assertEquals(52, Node.LENGTH);
763:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
764:       assertEquals(15, Node.NO_SIDE_EFFECTS);
765:       assertEquals(40, Node.ORIGINALNAME_PROP);
766:       assertEquals(30, Node.VAR_ARGS_NAME);
767:       assertEquals(1, Node.DECR_FLAG);
768:       assertEquals(12, Node.COLUMN_BITS);
769:       assertEquals(57, Node.LAST_PROP);
770:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
771:       assertEquals(37, Node.OPT_ARG_NAME);
772:       assertEquals(48, Node.DIRECTIVES);
773:       assertEquals(4095, Node.COLUMN_MASK);
774:       assertEquals(8, Node.FLAG_NO_THROWS);
775:       assertEquals(39, Node.EMPTY_BLOCK);
776:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
777:       assertEquals(55, Node.INFERRED_FUNCTION);
778:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
779:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
780:       assertEquals(49, Node.DIRECT_EVAL);
781:       assertEquals(36, Node.QUOTED_PROP);
782:       assertEquals(57, Node.REFLECTED_OBJECT);
783:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
784:       assertEquals(56, Node.CHANGE_TIME);
785:       assertEquals(53, Node.INPUT_ID);
786:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
787:       assertEquals(29, Node.JSDOC_INFO_PROP);
788:       assertEquals(47, Node.IS_DISPATCHER);
789:       assertEquals(32, Node.INCRDECR_PROP);
790:       assertEquals(2, Node.POST_FLAG);
791:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
792:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
793:       assertEquals(50, Node.FREE_CALL);
794:       assertEquals(43, Node.IS_CONSTANT_NAME);
795:       assertEquals(51, Node.STATIC_SOURCE_FILE);
796:       assertEquals(46, Node.IS_NAMESPACE);
797:       assertEquals(54, Node.SLASH_V);
798:       assertNotSame(node0, node1);
799:       assertNull(string1);
800:       assertFalse(node0.isDec());
801:       assertFalse(node0.hasChildren());
802:       assertFalse(node0.isNumber());
803:       assertFalse(node0.isTypeOf());
804:       assertFalse(node0.isAssign());
805:       assertFalse(node0.isLabel());
806:       assertFalse(node0.isOr());
807:       assertFalse(node0.isReturn());
808:       assertFalse(node0.isAssignAdd());
809:       assertFalse(node0.isDo());
810:       assertFalse(node0.hasOneChild());
811:       assertFalse(node0.isWith());
812:       assertFalse(node0.isWhile());
813:       assertFalse(node0.isBlock());
814:       assertFalse(node0.hasMoreThanOneChild());
815:       assertFalse(node0.isInstanceOf());
816:       assertFalse(node0.isName());
817:       assertFalse(node0.isExprResult());
818:       assertFalse(node0.isGetElem());
819:       assertFalse(node0.isCall());
820:       assertFalse(node0.isNull());
821:       assertFalse(node0.isParamList());
822:       assertFalse(node0.isStringKey());
823:       assertFalse(node0.isThis());
824:       assertFalse(node0.isHook());
825:       assertFalse(node0.isVar());
826:       assertFalse(node0.isAdd());
827:       assertTrue(node0.isString());
828:       assertFalse(node0.isNew());
829:       assertFalse(node0.isDefaultCase());
830:       assertFalse(node0.isSwitch());
831:       assertFalse(node0.isScript());
832:       assertEquals(147, node0.getLineno());
833:       assertEquals(0, node0.getChildCount());
834:       assertFalse(node0.isLabelName());
835:       assertFalse(node0.isArrayLit());
836:       assertEquals(147, node0.getCharno());
837:       assertFalse(node0.isIf());
838:       assertFalse(node0.isGetterDef());
839:       assertFalse(node0.isDelProp());
840:       assertFalse(node0.isEmpty());
841:       assertFalse(node0.isFor());
842:       assertFalse(node0.isNE());
843:       assertFalse(node0.isIn());
844:       assertFalse(node0.isTry());
845:       assertFalse(node0.isCase());
846:       assertEquals(602259, node0.getSourcePosition());
847:       assertFalse(node0.isRegExp());
848:       assertFalse(node0.isTrue());
849:       assertFalse(node0.isCatch());
850:       assertFalse(node0.isVoid());
851:       assertFalse(node0.isBreak());
852:       assertFalse(node0.isThrow());
853:       assertFalse(node0.isFalse());
854:       assertFalse(node0.isComma());
855:       assertFalse(node0.isGetProp());
856:       assertFalse(node0.isSetterDef());
857:       assertFalse(node0.isInc());
858:       assertFalse(node0.isContinue());
859:       assertFalse(node0.isFunction());
860:       assertEquals(40, node0.getType());
861:       assertFalse(node0.isObjectLit());
862:       assertFalse(node0.isNot());
863:       assertFalse(node0.isDebugger());
864:       assertFalse(node0.isCast());
865:       assertFalse(node0.isAnd());
866:       assertFalse(node0.equals((Object)node1));
867:       
868:       boolean boolean0 = node0.isTypeOf();
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
871:       assertEquals(15, Node.NO_SIDE_EFFECTS);
872:       assertEquals(40, Node.ORIGINALNAME_PROP);
873:       assertEquals(30, Node.VAR_ARGS_NAME);
874:       assertEquals(1, Node.DECR_FLAG);
875:       assertEquals(12, Node.COLUMN_BITS);
876:       assertEquals(57, Node.LAST_PROP);
877:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
878:       assertEquals(37, Node.OPT_ARG_NAME);
879:       assertEquals(48, Node.DIRECTIVES);
880:       assertEquals(4095, Node.COLUMN_MASK);
881:       assertEquals(8, Node.FLAG_NO_THROWS);
882:       assertEquals(39, Node.EMPTY_BLOCK);
883:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
884:       assertEquals(55, Node.INFERRED_FUNCTION);
885:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
886:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
887:       assertEquals(49, Node.DIRECT_EVAL);
888:       assertEquals(36, Node.QUOTED_PROP);
889:       assertEquals(57, Node.REFLECTED_OBJECT);
890:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
891:       assertEquals(56, Node.CHANGE_TIME);
892:       assertEquals(53, Node.INPUT_ID);
893:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
894:       assertEquals(29, Node.JSDOC_INFO_PROP);
895:       assertEquals(47, Node.IS_DISPATCHER);
896:       assertEquals(32, Node.INCRDECR_PROP);
897:       assertEquals(2, Node.POST_FLAG);
898:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
900:       assertEquals(50, Node.FREE_CALL);
901:       assertEquals(43, Node.IS_CONSTANT_NAME);
902:       assertEquals(51, Node.STATIC_SOURCE_FILE);
903:       assertEquals(46, Node.IS_NAMESPACE);
904:       assertEquals(54, Node.SLASH_V);
905:       assertNotSame(node0, node1);
906:       assertFalse(node0.isDec());
907:       assertFalse(node0.hasChildren());
908:       assertFalse(node0.isNumber());
909:       assertFalse(node0.isTypeOf());
910:       assertFalse(node0.isAssign());
911:       assertFalse(node0.isLabel());
912:       assertFalse(node0.isOr());
913:       assertFalse(node0.isReturn());
914:       assertFalse(node0.isAssignAdd());
915:       assertFalse(node0.isDo());
916:       assertFalse(node0.hasOneChild());
917:       assertFalse(node0.isWith());
918:       assertFalse(node0.isWhile());
919:       assertFalse(node0.isBlock());
920:       assertFalse(node0.hasMoreThanOneChild());
921:       assertFalse(node0.isInstanceOf());
922:       assertFalse(node0.isName());
923:       assertFalse(node0.isExprResult());
924:       assertFalse(node0.isGetElem());
925:       assertFalse(node0.isCall());
926:       assertFalse(node0.isNull());
927:       assertFalse(node0.isParamList());
928:       assertFalse(node0.isStringKey());
929:       assertFalse(node0.isThis());
930:       assertFalse(node0.isHook());
931:       assertFalse(node0.isVar());
932:       assertFalse(node0.isAdd());
933:       assertTrue(node0.isString());
934:       assertFalse(node0.isNew());
935:       assertFalse(node0.isDefaultCase());
936:       assertFalse(node0.isSwitch());
937:       assertFalse(node0.isScript());
938:       assertEquals(147, node0.getLineno());
939:       assertEquals(0, node0.getChildCount());
940:       assertFalse(node0.isLabelName());
941:       assertFalse(node0.isArrayLit());
942:       assertEquals(147, node0.getCharno());
943:       assertFalse(node0.isIf());
944:       assertFalse(node0.isGetterDef());
945:       assertFalse(node0.isDelProp());
946:       assertFalse(node0.isEmpty());
947:       assertFalse(node0.isFor());
948:       assertFalse(node0.isNE());
949:       assertFalse(node0.isIn());
950:       assertFalse(node0.isTry());
951:       assertFalse(node0.isCase());
952:       assertEquals(602259, node0.getSourcePosition());
953:       assertFalse(node0.isRegExp());
954:       assertFalse(node0.isTrue());
955:       assertFalse(node0.isCatch());
956:       assertFalse(node0.isVoid());
957:       assertFalse(node0.isBreak());
958:       assertFalse(node0.isThrow());
959:       assertFalse(node0.isFalse());
960:       assertFalse(node0.isComma());
961:       assertFalse(node0.isGetProp());
962:       assertFalse(node0.isSetterDef());
963:       assertFalse(node0.isInc());
964:       assertFalse(node0.isContinue());
965:       assertFalse(node0.isFunction());
966:       assertEquals(40, node0.getType());
967:       assertFalse(node0.isObjectLit());
968:       assertFalse(node0.isNot());
969:       assertFalse(node0.isDebugger());
970:       assertFalse(node0.isCast());
971:       assertFalse(node0.isAnd());
972:       assertFalse(node0.equals((Object)node1));
973:       assertFalse(boolean0);
974:       
975:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1615);
976:       assertNotNull(node_SideEffectFlags0);
977:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
978:       assertEquals(1615, node_SideEffectFlags0.valueOf());
979:       
980:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
981:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
982:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
983:       assertNotNull(node_SideEffectFlags1);
984:       assertEquals(1607, node_SideEffectFlags0.valueOf());
985:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
986:       assertEquals(1607, node_SideEffectFlags1.valueOf());
987:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
988:       
989:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
990:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
991:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
992:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
993:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
994:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
995:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
996:       assertNotNull(node_SideEffectFlags2);
997:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
998:       assertEquals(1600, node_SideEffectFlags0.valueOf());
999:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
1000:       assertEquals(1600, node_SideEffectFlags1.valueOf());
1001:       assertEquals(1600, node_SideEffectFlags2.valueOf());
1002:       assertFalse(node_SideEffectFlags2.areAllFlagsSet());
1003:       
1004:       Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
1005:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1006:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1007:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1008:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1009:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1010:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1011:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1012:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1013:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1014:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1015:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1016:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1017:       assertNotNull(node_SideEffectFlags3);
1018:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1019:       assertEquals(0, node_SideEffectFlags0.valueOf());
1020:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1021:       assertEquals(0, node_SideEffectFlags1.valueOf());
1022:       assertEquals(0, node_SideEffectFlags2.valueOf());
1023:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1024:       assertEquals(0, node_SideEffectFlags3.valueOf());
1025:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1026:       
1027:       Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
1028:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1029:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1030:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1031:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1032:       assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
1033:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
1034:       assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
1035:       assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
1036:       assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
1037:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
1038:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
1039:       assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
1040:       assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
1041:       assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
1042:       assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
1043:       assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
1044:       assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
1045:       assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
1046:       assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
1047:       assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
1048:       assertNotNull(node_SideEffectFlags4);
1049:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1050:       assertEquals(0, node_SideEffectFlags0.valueOf());
1051:       assertTrue(node_SideEffectFlags1.areAllFlagsSet());
1052:       assertEquals(0, node_SideEffectFlags1.valueOf());
1053:       assertEquals(0, node_SideEffectFlags2.valueOf());
1054:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
1055:       assertEquals(0, node_SideEffectFlags3.valueOf());
1056:       assertTrue(node_SideEffectFlags3.areAllFlagsSet());
1057:       assertTrue(node_SideEffectFlags4.areAllFlagsSet());
1058:       assertEquals(0, node_SideEffectFlags4.valueOf());
1059:       
1060:       Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setThrows();
1061:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
1062:       assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
1063:       assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
1064:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
1065:       assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
1066:       assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
1067:       assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
1068:       assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
1069:       assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
1070:       assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
1071:       assertNotNull(node_SideEffectFlags5);
1072:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
1073:       assertEquals(0, node_SideEffectFlags0.valueOf());
1074:       assertEquals(0, node_SideEffectFlags5.valueOf());
1075:       assertTrue(node_SideEffectFlags5.areAllFlagsSet());
1076:       
1077:       node0.detachChildren();
1078:       assertEquals(52, Node.LENGTH);
1079:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1080:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1081:       assertEquals(40, Node.ORIGINALNAME_PROP);
1082:       assertEquals(30, Node.VAR_ARGS_NAME);
1083:       assertEquals(1, Node.DECR_FLAG);
1084:       assertEquals(12, Node.COLUMN_BITS);
1085:       assertEquals(57, Node.LAST_PROP);
1086:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1087:       assertEquals(37, Node.OPT_ARG_NAME);
1088:       assertEquals(48, Node.DIRECTIVES);
1089:       assertEquals(4095, Node.COLUMN_MASK);
1090:       assertEquals(8, Node.FLAG_NO_THROWS);
1091:       assertEquals(39, Node.EMPTY_BLOCK);
1092:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1093:       assertEquals(55, Node.INFERRED_FUNCTION);
1094:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1095:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1096:       assertEquals(49, Node.DIRECT_EVAL);
1097:       assertEquals(36, Node.QUOTED_PROP);
1098:       assertEquals(57, Node.REFLECTED_OBJECT);
1099:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1100:       assertEquals(56, Node.CHANGE_TIME);
1101:       assertEquals(53, Node.INPUT_ID);
1102:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1103:       assertEquals(29, Node.JSDOC_INFO_PROP);
1104:       assertEquals(47, Node.IS_DISPATCHER);
1105:       assertEquals(32, Node.INCRDECR_PROP);
1106:       assertEquals(2, Node.POST_FLAG);
1107:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1108:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1109:       assertEquals(50, Node.FREE_CALL);
1110:       assertEquals(43, Node.IS_CONSTANT_NAME);
1111:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1112:       assertEquals(46, Node.IS_NAMESPACE);
1113:       assertEquals(54, Node.SLASH_V);
1114:       assertNotSame(node0, node1);
1115:       assertFalse(node0.isDec());
1116:       assertFalse(node0.hasChildren());
1117:       assertFalse(node0.isNumber());
1118:       assertFalse(node0.isTypeOf());
1119:       assertFalse(node0.isAssign());
1120:       assertFalse(node0.isLabel());
1121:       assertFalse(node0.isOr());
1122:       assertFalse(node0.isReturn());
1123:       assertFalse(node0.isAssignAdd());
1124:       assertFalse(node0.isDo());
1125:       assertFalse(node0.hasOneChild());
1126:       assertFalse(node0.isWith());
1127:       assertFalse(node0.isWhile());
1128:       assertFalse(node0.isBlock());
1129:       assertFalse(node0.hasMoreThanOneChild());
1130:       assertFalse(node0.isInstanceOf());
1131:       assertFalse(node0.isName());
1132:       assertFalse(node0.isExprResult());
1133:       assertFalse(node0.isGetElem());
1134:       assertFalse(node0.isCall());
1135:       assertFalse(node0.isNull());
1136:       assertFalse(node0.isParamList());
1137:       assertFalse(node0.isStringKey());
1138:       assertFalse(node0.isThis());
1139:       assertFalse(node0.isHook());
1140:       assertFalse(node0.isVar());
1141:       assertFalse(node0.isAdd());
1142:       assertTrue(node0.isString());
1143:       assertFalse(node0.isNew());
1144:       assertFalse(node0.isDefaultCase());
1145:       assertFalse(node0.isSwitch());
1146:       assertFalse(node0.isScript());
1147:       assertEquals(147, node0.getLineno());
1148:       assertEquals(0, node0.getChildCount());
1149:       assertFalse(node0.isLabelName());
1150:       assertFalse(node0.isArrayLit());
1151:       assertEquals(147, node0.getCharno());
1152:       assertFalse(node0.isIf());
1153:       assertFalse(node0.isGetterDef());
1154:       assertFalse(node0.isDelProp());
1155:       assertFalse(node0.isEmpty());
1156:       assertFalse(node0.isFor());
1157:       assertFalse(node0.isNE());
1158:       assertFalse(node0.isIn());
1159:       assertFalse(node0.isTry());
1160:       assertFalse(node0.isCase());
1161:       assertEquals(602259, node0.getSourcePosition());
1162:       assertFalse(node0.isRegExp());
1163:       assertFalse(node0.isTrue());
1164:       assertFalse(node0.isCatch());
1165:       assertFalse(node0.isVoid());
1166:       assertFalse(node0.isBreak());
1167:       assertFalse(node0.isThrow());
1168:       assertFalse(node0.isFalse());
1169:       assertFalse(node0.isComma());
1170:       assertFalse(node0.isGetProp());
1171:       assertFalse(node0.isSetterDef());
1172:       assertFalse(node0.isInc());
1173:       assertFalse(node0.isContinue());
1174:       assertFalse(node0.isFunction());
1175:       assertEquals(40, node0.getType());
1176:       assertFalse(node0.isObjectLit());
1177:       assertFalse(node0.isNot());
1178:       assertFalse(node0.isDebugger());
1179:       assertFalse(node0.isCast());
1180:       assertFalse(node0.isAnd());
1181:       assertFalse(node0.equals((Object)node1));
1182:       
1183:       boolean boolean1 = node1.isDefaultCase();
1184:       assertEquals(52, Node.LENGTH);
1185:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1186:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1187:       assertEquals(40, Node.ORIGINALNAME_PROP);
1188:       assertEquals(30, Node.VAR_ARGS_NAME);
1189:       assertEquals(1, Node.DECR_FLAG);
1190:       assertEquals(12, Node.COLUMN_BITS);
1191:       assertEquals(57, Node.LAST_PROP);
1192:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1193:       assertEquals(37, Node.OPT_ARG_NAME);
1194:       assertEquals(48, Node.DIRECTIVES);
1195:       assertEquals(4095, Node.COLUMN_MASK);
1196:       assertEquals(8, Node.FLAG_NO_THROWS);
1197:       assertEquals(39, Node.EMPTY_BLOCK);
1198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1199:       assertEquals(55, Node.INFERRED_FUNCTION);
1200:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1201:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1202:       assertEquals(49, Node.DIRECT_EVAL);
1203:       assertEquals(36, Node.QUOTED_PROP);
1204:       assertEquals(57, Node.REFLECTED_OBJECT);
1205:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1206:       assertEquals(56, Node.CHANGE_TIME);
1207:       assertEquals(53, Node.INPUT_ID);
1208:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1209:       assertEquals(29, Node.JSDOC_INFO_PROP);
1210:       assertEquals(47, Node.IS_DISPATCHER);
1211:       assertEquals(32, Node.INCRDECR_PROP);
1212:       assertEquals(2, Node.POST_FLAG);
1213:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1214:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1215:       assertEquals(50, Node.FREE_CALL);
1216:       assertEquals(43, Node.IS_CONSTANT_NAME);
1217:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1218:       assertEquals(46, Node.IS_NAMESPACE);
1219:       assertEquals(54, Node.SLASH_V);
1220:       assertEquals(52, Node.LENGTH);
1221:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1222:       assertEquals(54, Node.SLASH_V);
1223:       assertEquals(57, Node.REFLECTED_OBJECT);
1224:       assertEquals(30, Node.VAR_ARGS_NAME);
1225:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1226:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1227:       assertEquals(57, Node.LAST_PROP);
1228:       assertEquals(32, Node.INCRDECR_PROP);
1229:       assertEquals(1, Node.DECR_FLAG);
1230:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1231:       assertEquals(46, Node.IS_NAMESPACE);
1232:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1233:       assertEquals(47, Node.IS_DISPATCHER);
1234:       assertEquals(2, Node.POST_FLAG);
1235:       assertEquals(50, Node.FREE_CALL);
1236:       assertEquals(40, Node.ORIGINALNAME_PROP);
1237:       assertEquals(43, Node.IS_CONSTANT_NAME);
1238:       assertEquals(53, Node.INPUT_ID);
1239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1240:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1241:       assertEquals(36, Node.QUOTED_PROP);
1242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1243:       assertEquals(55, Node.INFERRED_FUNCTION);
1244:       assertEquals(29, Node.JSDOC_INFO_PROP);
1245:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1246:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1247:       assertEquals(39, Node.EMPTY_BLOCK);
1248:       assertEquals(12, Node.COLUMN_BITS);
1249:       assertEquals(4095, Node.COLUMN_MASK);
1250:       assertEquals(8, Node.FLAG_NO_THROWS);
1251:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1252:       assertEquals(56, Node.CHANGE_TIME);
1253:       assertEquals(37, Node.OPT_ARG_NAME);
1254:       assertEquals(48, Node.DIRECTIVES);
1255:       assertEquals(49, Node.DIRECT_EVAL);
1256:       assertNotSame(node0, node1);
1257:       assertNotSame(node1, node0);
1258:       assertFalse(node0.isDec());
1259:       assertFalse(node0.hasChildren());
1260:       assertFalse(node0.isNumber());
1261:       assertFalse(node0.isTypeOf());
1262:       assertFalse(node0.isAssign());
1263:       assertFalse(node0.isLabel());
1264:       assertFalse(node0.isOr());
1265:       assertFalse(node0.isReturn());
1266:       assertFalse(node0.isAssignAdd());
1267:       assertFalse(node0.isDo());
1268:       assertFalse(node0.hasOneChild());
1269:       assertFalse(node0.isWith());
1270:       assertFalse(node0.isWhile());
1271:       assertFalse(node0.isBlock());
1272:       assertFalse(node0.hasMoreThanOneChild());
1273:       assertFalse(node0.isInstanceOf());
1274:       assertFalse(node0.isName());
1275:       assertFalse(node0.isExprResult());
1276:       assertFalse(node0.isGetElem());
1277:       assertFalse(node0.isCall());
1278:       assertFalse(node0.isNull());
1279:       assertFalse(node0.isParamList());
1280:       assertFalse(node0.isStringKey());
1281:       assertFalse(node0.isThis());
1282:       assertFalse(node0.isHook());
1283:       assertFalse(node0.isVar());
1284:       assertFalse(node0.isAdd());
1285:       assertTrue(node0.isString());
1286:       assertFalse(node0.isNew());
1287:       assertFalse(node0.isDefaultCase());
1288:       assertFalse(node0.isSwitch());
1289:       assertFalse(node0.isScript());
1290:       assertEquals(147, node0.getLineno());
1291:       assertEquals(0, node0.getChildCount());
1292:       assertFalse(node0.isLabelName());
1293:       assertFalse(node0.isArrayLit());
1294:       assertEquals(147, node0.getCharno());
1295:       assertFalse(node0.isIf());
1296:       assertFalse(node0.isGetterDef());
1297:       assertFalse(node0.isDelProp());
1298:       assertFalse(node0.isEmpty());
1299:       assertFalse(node0.isFor());
1300:       assertFalse(node0.isNE());
1301:       assertFalse(node0.isIn());
1302:       assertFalse(node0.isTry());
1303:       assertFalse(node0.isCase());
1304:       assertEquals(602259, node0.getSourcePosition());
1305:       assertFalse(node0.isRegExp());
1306:       assertFalse(node0.isTrue());
1307:       assertFalse(node0.isCatch());
1308:       assertFalse(node0.isVoid());
1309:       assertFalse(node0.isBreak());
1310:       assertFalse(node0.isThrow());
1311:       assertFalse(node0.isFalse());
1312:       assertFalse(node0.isComma());
1313:       assertFalse(node0.isGetProp());
1314:       assertFalse(node0.isSetterDef());
1315:       assertFalse(node0.isInc());
1316:       assertFalse(node0.isContinue());
1317:       assertFalse(node0.isFunction());
1318:       assertEquals(40, node0.getType());
1319:       assertFalse(node0.isObjectLit());
1320:       assertFalse(node0.isNot());
1321:       assertFalse(node0.isDebugger());
1322:       assertFalse(node0.isCast());
1323:       assertFalse(node0.isAnd());
1324:       assertFalse(node1.hasChildren());
1325:       assertFalse(node1.isNumber());
1326:       assertFalse(node1.isTypeOf());
1327:       assertFalse(node1.isLabelName());
1328:       assertFalse(node1.isAssign());
1329:       assertFalse(node1.isDec());
1330:       assertFalse(node1.isAssignAdd());
1331:       assertFalse(node1.isOr());
1332:       assertFalse(node1.hasOneChild());
1333:       assertFalse(node1.isScript());
1334:       assertEquals(147, node1.getLineno());
1335:       assertFalse(node1.isDo());
1336:       assertFalse(node1.isNot());
1337:       assertFalse(node1.isAnd());
1338:       assertFalse(node1.isLabel());
1339:       assertFalse(node1.isContinue());
1340:       assertFalse(node1.isCast());
1341:       assertFalse(node1.isBreak());
1342:       assertFalse(node1.isNull());
1343:       assertFalse(node1.isComma());
1344:       assertFalse(node1.isName());
1345:       assertFalse(node1.isVar());
1346:       assertFalse(node1.isNew());
1347:       assertFalse(node1.isObjectLit());
1348:       assertFalse(node1.isGetProp());
1349:       assertFalse(node1.isAdd());
1350:       assertEquals(602259, node1.getSourcePosition());
1351:       assertFalse(node1.isVoid());
1352:       assertFalse(node1.isTrue());
1353:       assertFalse(node1.isWhile());
1354:       assertFalse(node1.isReturn());
1355:       assertFalse(node1.isExprResult());
1356:       assertFalse(node1.isGetElem());
1357:       assertFalse(node1.isCall());
1358:       assertEquals(147, node1.getCharno());
1359:       assertFalse(node1.isIf());
1360:       assertFalse(node1.isDelProp());
1361:       assertFalse(node1.isGetterDef());
1362:       assertFalse(node1.isFor());
1363:       assertFalse(node1.isNE());
1364:       assertFalse(node1.isIn());
1365:       assertFalse(node1.isTry());
1366:       assertFalse(node1.isEmpty());
1367:       assertFalse(node1.isDefaultCase());
1368:       assertFalse(node1.isDebugger());
1369:       assertEquals(40, node1.getType());
1370:       assertFalse(node1.isSwitch());
1371:       assertEquals(0, node1.getChildCount());
1372:       assertFalse(node1.isArrayLit());
1373:       assertFalse(node1.isFunction());
1374:       assertFalse(node1.isFalse());
1375:       assertFalse(node1.isThrow());
1376:       assertFalse(node1.isThis());
1377:       assertFalse(node1.isParamList());
1378:       assertFalse(node1.isStringKey());
1379:       assertFalse(node1.isSetterDef());
1380:       assertFalse(node1.isInc());
1381:       assertFalse(node1.isWith());
1382:       assertFalse(node1.isRegExp());
1383:       assertFalse(node1.isCase());
1384:       assertFalse(node1.isBlock());
1385:       assertTrue(node1.isString());
1386:       assertFalse(node1.isHook());
1387:       assertFalse(node1.hasMoreThanOneChild());
1388:       assertFalse(node1.isCatch());
1389:       assertFalse(node1.isInstanceOf());
1390:       assertFalse(node0.equals((Object)node1));
1391:       assertFalse(node1.equals((Object)node0));
1392:       assertTrue(boolean1 == boolean0);
1393:       assertFalse(boolean1);
1394:       
1395:       node0.addSuppression("w2@yny9I.})_,}c<");
1396:       assertEquals(52, Node.LENGTH);
1397:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1398:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1399:       assertEquals(40, Node.ORIGINALNAME_PROP);
1400:       assertEquals(30, Node.VAR_ARGS_NAME);
1401:       assertEquals(1, Node.DECR_FLAG);
1402:       assertEquals(12, Node.COLUMN_BITS);
1403:       assertEquals(57, Node.LAST_PROP);
1404:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1405:       assertEquals(37, Node.OPT_ARG_NAME);
1406:       assertEquals(48, Node.DIRECTIVES);
1407:       assertEquals(4095, Node.COLUMN_MASK);
1408:       assertEquals(8, Node.FLAG_NO_THROWS);
1409:       assertEquals(39, Node.EMPTY_BLOCK);
1410:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1411:       assertEquals(55, Node.INFERRED_FUNCTION);
1412:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1413:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1414:       assertEquals(49, Node.DIRECT_EVAL);
1415:       assertEquals(36, Node.QUOTED_PROP);
1416:       assertEquals(57, Node.REFLECTED_OBJECT);
1417:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1418:       assertEquals(56, Node.CHANGE_TIME);
1419:       assertEquals(53, Node.INPUT_ID);
1420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1421:       assertEquals(29, Node.JSDOC_INFO_PROP);
1422:       assertEquals(47, Node.IS_DISPATCHER);
1423:       assertEquals(32, Node.INCRDECR_PROP);
1424:       assertEquals(2, Node.POST_FLAG);
1425:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1426:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1427:       assertEquals(50, Node.FREE_CALL);
1428:       assertEquals(43, Node.IS_CONSTANT_NAME);
1429:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1430:       assertEquals(46, Node.IS_NAMESPACE);
1431:       assertEquals(54, Node.SLASH_V);
1432:       assertNotSame(node0, node1);
1433:       assertFalse(node0.isDec());
1434:       assertFalse(node0.hasChildren());
1435:       assertFalse(node0.isNumber());
1436:       assertFalse(node0.isTypeOf());
1437:       assertFalse(node0.isAssign());
1438:       assertFalse(node0.isLabel());
1439:       assertFalse(node0.isOr());
1440:       assertFalse(node0.isReturn());
1441:       assertFalse(node0.isAssignAdd());
1442:       assertFalse(node0.isDo());
1443:       assertFalse(node0.hasOneChild());
1444:       assertFalse(node0.isWith());
1445:       assertFalse(node0.isWhile());
1446:       assertFalse(node0.isBlock());
1447:       assertFalse(node0.hasMoreThanOneChild());
1448:       assertFalse(node0.isInstanceOf());
1449:       assertFalse(node0.isName());
1450:       assertFalse(node0.isExprResult());
1451:       assertFalse(node0.isGetElem());
1452:       assertFalse(node0.isCall());
1453:       assertFalse(node0.isNull());
1454:       assertFalse(node0.isParamList());
1455:       assertFalse(node0.isStringKey());
1456:       assertFalse(node0.isThis());
1457:       assertFalse(node0.isHook());
1458:       assertFalse(node0.isVar());
1459:       assertFalse(node0.isAdd());
1460:       assertTrue(node0.isString());
1461:       assertFalse(node0.isNew());
1462:       assertFalse(node0.isDefaultCase());
1463:       assertFalse(node0.isSwitch());
1464:       assertFalse(node0.isScript());
1465:       assertEquals(147, node0.getLineno());
1466:       assertEquals(0, node0.getChildCount());
1467:       assertFalse(node0.isLabelName());
1468:       assertFalse(node0.isArrayLit());
1469:       assertEquals(147, node0.getCharno());
1470:       assertFalse(node0.isIf());
1471:       assertFalse(node0.isGetterDef());
1472:       assertFalse(node0.isDelProp());
1473:       assertFalse(node0.isEmpty());
1474:       assertFalse(node0.isFor());
1475:       assertFalse(node0.isNE());
1476:       assertFalse(node0.isIn());
1477:       assertFalse(node0.isTry());
1478:       assertFalse(node0.isCase());
1479:       assertEquals(602259, node0.getSourcePosition());
1480:       assertFalse(node0.isRegExp());
1481:       assertFalse(node0.isTrue());
1482:       assertFalse(node0.isCatch());
1483:       assertFalse(node0.isVoid());
1484:       assertFalse(node0.isBreak());
1485:       assertFalse(node0.isThrow());
1486:       assertFalse(node0.isFalse());
1487:       assertFalse(node0.isComma());
1488:       assertFalse(node0.isGetProp());
1489:       assertFalse(node0.isSetterDef());
1490:       assertFalse(node0.isInc());
1491:       assertFalse(node0.isContinue());
1492:       assertFalse(node0.isFunction());
1493:       assertEquals(40, node0.getType());
1494:       assertFalse(node0.isObjectLit());
1495:       assertFalse(node0.isNot());
1496:       assertFalse(node0.isDebugger());
1497:       assertFalse(node0.isCast());
1498:       assertFalse(node0.isAnd());
1499:       assertFalse(node0.equals((Object)node1));
1500:       
1501:       String string2 = node1.toString(false, false, true);
1502:       assertEquals(52, Node.LENGTH);
1503:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1504:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1505:       assertEquals(40, Node.ORIGINALNAME_PROP);
1506:       assertEquals(30, Node.VAR_ARGS_NAME);
1507:       assertEquals(1, Node.DECR_FLAG);
1508:       assertEquals(12, Node.COLUMN_BITS);
1509:       assertEquals(57, Node.LAST_PROP);
1510:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1511:       assertEquals(37, Node.OPT_ARG_NAME);
1512:       assertEquals(48, Node.DIRECTIVES);
1513:       assertEquals(4095, Node.COLUMN_MASK);
1514:       assertEquals(8, Node.FLAG_NO_THROWS);
1515:       assertEquals(39, Node.EMPTY_BLOCK);
1516:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1517:       assertEquals(55, Node.INFERRED_FUNCTION);
1518:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1519:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1520:       assertEquals(49, Node.DIRECT_EVAL);
1521:       assertEquals(36, Node.QUOTED_PROP);
1522:       assertEquals(57, Node.REFLECTED_OBJECT);
1523:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1524:       assertEquals(56, Node.CHANGE_TIME);
1525:       assertEquals(53, Node.INPUT_ID);
1526:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1527:       assertEquals(29, Node.JSDOC_INFO_PROP);
1528:       assertEquals(47, Node.IS_DISPATCHER);
1529:       assertEquals(32, Node.INCRDECR_PROP);
1530:       assertEquals(2, Node.POST_FLAG);
1531:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1533:       assertEquals(50, Node.FREE_CALL);
1534:       assertEquals(43, Node.IS_CONSTANT_NAME);
1535:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1536:       assertEquals(46, Node.IS_NAMESPACE);
1537:       assertEquals(54, Node.SLASH_V);
1538:       assertEquals(52, Node.LENGTH);
1539:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1540:       assertEquals(54, Node.SLASH_V);
1541:       assertEquals(57, Node.REFLECTED_OBJECT);
1542:       assertEquals(30, Node.VAR_ARGS_NAME);
1543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1544:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1545:       assertEquals(57, Node.LAST_PROP);
1546:       assertEquals(32, Node.INCRDECR_PROP);
1547:       assertEquals(1, Node.DECR_FLAG);
1548:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1549:       assertEquals(46, Node.IS_NAMESPACE);
1550:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1551:       assertEquals(47, Node.IS_DISPATCHER);
1552:       assertEquals(2, Node.POST_FLAG);
1553:       assertEquals(50, Node.FREE_CALL);
1554:       assertEquals(40, Node.ORIGINALNAME_PROP);
1555:       assertEquals(43, Node.IS_CONSTANT_NAME);
1556:       assertEquals(53, Node.INPUT_ID);
1557:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1558:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1559:       assertEquals(36, Node.QUOTED_PROP);
1560:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1561:       assertEquals(55, Node.INFERRED_FUNCTION);
1562:       assertEquals(29, Node.JSDOC_INFO_PROP);
1563:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1564:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1565:       assertEquals(39, Node.EMPTY_BLOCK);
1566:       assertEquals(12, Node.COLUMN_BITS);
1567:       assertEquals(4095, Node.COLUMN_MASK);
1568:       assertEquals(8, Node.FLAG_NO_THROWS);
1569:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1570:       assertEquals(56, Node.CHANGE_TIME);
1571:       assertEquals(37, Node.OPT_ARG_NAME);
1572:       assertEquals(48, Node.DIRECTIVES);
1573:       assertEquals(49, Node.DIRECT_EVAL);
1574:       assertNotSame(node0, node1);
1575:       assertNotSame(node1, node0);
1576:       assertNotNull(string2);
1577:       assertFalse(node0.isDec());
1578:       assertFalse(node0.hasChildren());
1579:       assertFalse(node0.isNumber());
1580:       assertFalse(node0.isTypeOf());
1581:       assertFalse(node0.isAssign());
1582:       assertFalse(node0.isLabel());
1583:       assertFalse(node0.isOr());
1584:       assertFalse(node0.isReturn());
1585:       assertFalse(node0.isAssignAdd());
1586:       assertFalse(node0.isDo());
1587:       assertFalse(node0.hasOneChild());
1588:       assertFalse(node0.isWith());
1589:       assertFalse(node0.isWhile());
1590:       assertFalse(node0.isBlock());
1591:       assertFalse(node0.hasMoreThanOneChild());
1592:       assertFalse(node0.isInstanceOf());
1593:       assertFalse(node0.isName());
1594:       assertFalse(node0.isExprResult());
1595:       assertFalse(node0.isGetElem());
1596:       assertFalse(node0.isCall());
1597:       assertFalse(node0.isNull());
1598:       assertFalse(node0.isParamList());
1599:       assertFalse(node0.isStringKey());
1600:       assertFalse(node0.isThis());
1601:       assertFalse(node0.isHook());
1602:       assertFalse(node0.isVar());
1603:       assertFalse(node0.isAdd());
1604:       assertTrue(node0.isString());
1605:       assertFalse(node0.isNew());
1606:       assertFalse(node0.isDefaultCase());
1607:       assertFalse(node0.isSwitch());
1608:       assertFalse(node0.isScript());
1609:       assertEquals(147, node0.getLineno());
1610:       assertEquals(0, node0.getChildCount());
1611:       assertFalse(node0.isLabelName());
1612:       assertFalse(node0.isArrayLit());
1613:       assertEquals(147, node0.getCharno());
1614:       assertFalse(node0.isIf());
1615:       assertFalse(node0.isGetterDef());
1616:       assertFalse(node0.isDelProp());
1617:       assertFalse(node0.isEmpty());
1618:       assertFalse(node0.isFor());
1619:       assertFalse(node0.isNE());
1620:       assertFalse(node0.isIn());
1621:       assertFalse(node0.isTry());
1622:       assertFalse(node0.isCase());
1623:       assertEquals(602259, node0.getSourcePosition());
1624:       assertFalse(node0.isRegExp());
1625:       assertFalse(node0.isTrue());
1626:       assertFalse(node0.isCatch());
1627:       assertFalse(node0.isVoid());
1628:       assertFalse(node0.isBreak());
1629:       assertFalse(node0.isThrow());
1630:       assertFalse(node0.isFalse());
1631:       assertFalse(node0.isComma());
1632:       assertFalse(node0.isGetProp());
1633:       assertFalse(node0.isSetterDef());
1634:       assertFalse(node0.isInc());
1635:       assertFalse(node0.isContinue());
1636:       assertFalse(node0.isFunction());
1637:       assertEquals(40, node0.getType());
1638:       assertFalse(node0.isObjectLit());
1639:       assertFalse(node0.isNot());
1640:       assertFalse(node0.isDebugger());
1641:       assertFalse(node0.isCast());
1642:       assertFalse(node0.isAnd());
1643:       assertFalse(node1.hasChildren());
1644:       assertFalse(node1.isNumber());
1645:       assertFalse(node1.isTypeOf());
1646:       assertFalse(node1.isLabelName());
1647:       assertFalse(node1.isAssign());
1648:       assertFalse(node1.isDec());
1649:       assertFalse(node1.isAssignAdd());
1650:       assertFalse(node1.isOr());
1651:       assertFalse(node1.hasOneChild());
1652:       assertFalse(node1.isScript());
1653:       assertEquals(147, node1.getLineno());
1654:       assertFalse(node1.isDo());
1655:       assertFalse(node1.isNot());
1656:       assertFalse(node1.isAnd());
1657:       assertFalse(node1.isLabel());
1658:       assertFalse(node1.isContinue());
1659:       assertFalse(node1.isCast());
1660:       assertFalse(node1.isBreak());
1661:       assertFalse(node1.isNull());
1662:       assertFalse(node1.isComma());
1663:       assertFalse(node1.isName());
1664:       assertFalse(node1.isVar());
1665:       assertFalse(node1.isNew());
1666:       assertFalse(node1.isObjectLit());
1667:       assertFalse(node1.isGetProp());
1668:       assertFalse(node1.isAdd());
1669:       assertEquals(602259, node1.getSourcePosition());
1670:       assertFalse(node1.isVoid());
1671:       assertFalse(node1.isTrue());
1672:       assertFalse(node1.isWhile());
1673:       assertFalse(node1.isReturn());
1674:       assertFalse(node1.isExprResult());
1675:       assertFalse(node1.isGetElem());
1676:       assertFalse(node1.isCall());
1677:       assertEquals(147, node1.getCharno());
1678:       assertFalse(node1.isIf());
1679:       assertFalse(node1.isDelProp());
1680:       assertFalse(node1.isGetterDef());
1681:       assertFalse(node1.isFor());
1682:       assertFalse(node1.isNE());
1683:       assertFalse(node1.isIn());
1684:       assertFalse(node1.isTry());
1685:       assertFalse(node1.isEmpty());
1686:       assertFalse(node1.isDefaultCase());
1687:       assertFalse(node1.isDebugger());
1688:       assertEquals(40, node1.getType());
1689:       assertFalse(node1.isSwitch());
1690:       assertEquals(0, node1.getChildCount());
1691:       assertFalse(node1.isArrayLit());
1692:       assertFalse(node1.isFunction());
1693:       assertFalse(node1.isFalse());
1694:       assertFalse(node1.isThrow());
1695:       assertFalse(node1.isThis());
1696:       assertFalse(node1.isParamList());
1697:       assertFalse(node1.isStringKey());
1698:       assertFalse(node1.isSetterDef());
1699:       assertFalse(node1.isInc());
1700:       assertFalse(node1.isWith());
1701:       assertFalse(node1.isRegExp());
1702:       assertFalse(node1.isCase());
1703:       assertFalse(node1.isBlock());
1704:       assertTrue(node1.isString());
1705:       assertFalse(node1.isHook());
1706:       assertFalse(node1.hasMoreThanOneChild());
1707:       assertFalse(node1.isCatch());
1708:       assertFalse(node1.isInstanceOf());
1709:       assertFalse(node0.equals((Object)node1));
1710:       assertFalse(string2.equals((Object)string0));
1711:       assertFalse(node1.equals((Object)node0));
1712:       assertEquals("STRING GYoa", string2);
1713:       
1714:       // Undeclared exception!
1715:       try { 
1716:         node1.detachFromParent();
1717:         fail("Expecting exception: IllegalStateException");
1718:       
1719:       } catch(IllegalStateException e) {
1720:          //
1721:          // no message in exception (getMessage() returned null)
1722:          //
1723:          verifyException("com.google.common.base.Preconditions", e);
1724:       }
1725:   }
1726: }
RegularFileObject[/tmp/EvoSuite_76_1628255660629/com/google/javascript/rhino/Node_76_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:14:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_76_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_76_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_76_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.common.collect.Platform",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.JSDocInfo$Marker",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.Iterators$12",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.JSTypeNative"
371:     );
372:   }
373: }

[MASTER] 13:14:21.064 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("GYoa", 147, 147);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(node0);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

Iterable<Node> iterable0 = node0.children();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotNull(iterable0);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(iterable0.contains(node0));

node0.putIntProp(0, 0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());

Node node1 = node0.cloneTree();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(node1);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertEquals(147, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertEquals(40, node1.getType());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.equals((Object)node0));

String string0 = node0.toString(true, true, true);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node0, node1);
assertNotNull(string0);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.equals((Object)node1));
assertEquals("STRING GYoa 147", string0);

node0.setChangeTime(0);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node0, node1);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.equals((Object)node1));

String string1 = node0.getSourceFileName();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node0, node1);
assertNull(string1);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.equals((Object)node1));

boolean boolean0 = node0.isTypeOf();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node0, node1);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.equals((Object)node1));
assertFalse(boolean0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags(1615);
assertNotNull(node_SideEffectFlags0);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(1615, node_SideEffectFlags0.valueOf());

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertNotNull(node_SideEffectFlags1);
assertEquals(1607, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(1607, node_SideEffectFlags1.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags1.setMutatesGlobalState();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags2);
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(1600, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(1600, node_SideEffectFlags1.valueOf());
assertEquals(1600, node_SideEffectFlags2.valueOf());
assertFalse(node_SideEffectFlags2.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags3 = node_SideEffectFlags2.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags3);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());

Node.SideEffectFlags node_SideEffectFlags4 = node_SideEffectFlags3.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags3);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertSame(node_SideEffectFlags1, node_SideEffectFlags4);
assertSame(node_SideEffectFlags1, node_SideEffectFlags2);
assertSame(node_SideEffectFlags2, node_SideEffectFlags4);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags3);
assertSame(node_SideEffectFlags3, node_SideEffectFlags0);
assertSame(node_SideEffectFlags3, node_SideEffectFlags2);
assertSame(node_SideEffectFlags3, node_SideEffectFlags4);
assertSame(node_SideEffectFlags3, node_SideEffectFlags1);
assertSame(node_SideEffectFlags4, node_SideEffectFlags0);
assertSame(node_SideEffectFlags4, node_SideEffectFlags3);
assertSame(node_SideEffectFlags4, node_SideEffectFlags2);
assertSame(node_SideEffectFlags4, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags4);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags1.valueOf());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags3.valueOf());
assertTrue(node_SideEffectFlags3.areAllFlagsSet());
assertTrue(node_SideEffectFlags4.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags4.valueOf());

Node.SideEffectFlags node_SideEffectFlags5 = node_SideEffectFlags0.setThrows();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags3);
assertSame(node_SideEffectFlags0, node_SideEffectFlags4);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags0, node_SideEffectFlags5);
assertSame(node_SideEffectFlags5, node_SideEffectFlags4);
assertSame(node_SideEffectFlags5, node_SideEffectFlags2);
assertSame(node_SideEffectFlags5, node_SideEffectFlags0);
assertSame(node_SideEffectFlags5, node_SideEffectFlags3);
assertSame(node_SideEffectFlags5, node_SideEffectFlags1);
assertNotNull(node_SideEffectFlags5);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertEquals(0, node_SideEffectFlags5.valueOf());
assertTrue(node_SideEffectFlags5.areAllFlagsSet());

node0.detachChildren();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node0, node1);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.equals((Object)node1));

boolean boolean1 = node1.isDefaultCase();
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertEquals(147, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertEquals(40, node1.getType());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

node0.addSuppression("w2@yny9I.})_,}c<");
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertNotSame(node0, node1);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node0.equals((Object)node1));

String string2 = node1.toString(false, false, true);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotNull(string2);
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.hasOneChild());
assertFalse(node0.isWith());
assertFalse(node0.isWhile());
assertFalse(node0.isBlock());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isAdd());
assertTrue(node0.isString());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isScript());
assertEquals(147, node0.getLineno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertEquals(147, node0.getCharno());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isDelProp());
assertFalse(node0.isEmpty());
assertFalse(node0.isFor());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertEquals(602259, node0.getSourcePosition());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertFalse(node0.isBreak());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertEquals(40, node0.getType());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isDebugger());
assertFalse(node0.isCast());
assertFalse(node0.isAnd());
assertFalse(node1.hasChildren());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isOr());
assertFalse(node1.hasOneChild());
assertFalse(node1.isScript());
assertEquals(147, node1.getLineno());
assertFalse(node1.isDo());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isLabel());
assertFalse(node1.isContinue());
assertFalse(node1.isCast());
assertFalse(node1.isBreak());
assertFalse(node1.isNull());
assertFalse(node1.isComma());
assertFalse(node1.isName());
assertFalse(node1.isVar());
assertFalse(node1.isNew());
assertFalse(node1.isObjectLit());
assertFalse(node1.isGetProp());
assertFalse(node1.isAdd());
assertEquals(602259, node1.getSourcePosition());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertFalse(node1.isWhile());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertEquals(147, node1.getCharno());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertFalse(node1.isFor());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isTry());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isDebugger());
assertEquals(40, node1.getType());
assertFalse(node1.isSwitch());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isWith());
assertFalse(node1.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isBlock());
assertTrue(node1.isString());
assertFalse(node1.isHook());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node0.equals((Object)node1));
assertFalse(string2.equals((Object)string0));
assertFalse(node1.equals((Object)node0));
assertEquals("STRING GYoa", string2);

node1.detachFromParent();

[MASTER] 13:14:23.111 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_81_1628255662823/com/google/javascript/rhino/Node_81_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_81_1628255662823/com/google/javascript/rhino/Node_81_tmp__ESTest_scaffolding.java]]
[MASTER] 13:14:23.111 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:23.111 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:23.112 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 439
[MASTER] 13:14:23.114 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_81_1628255662823/com/google/javascript/rhino/Node_81_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:14:22 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_81_tmp__ESTest extends Node_81_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString((-2740), "8MDO8S5lvaWo9)", 41, 304);
22:       assertEquals(51, Node.STATIC_SOURCE_FILE);
23:       assertEquals(12, Node.COLUMN_BITS);
24:       assertEquals(46, Node.IS_NAMESPACE);
25:       assertEquals(1, Node.DECR_FLAG);
26:       assertEquals(37, Node.OPT_ARG_NAME);
27:       assertEquals(49, Node.DIRECT_EVAL);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(56, Node.CHANGE_TIME);
30:       assertEquals(15, Node.NO_SIDE_EFFECTS);
31:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
32:       assertEquals(29, Node.JSDOC_INFO_PROP);
33:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
34:       assertEquals(52, Node.LENGTH);
35:       assertEquals(40, Node.ORIGINALNAME_PROP);
36:       assertEquals(53, Node.INPUT_ID);
37:       assertEquals(54, Node.SLASH_V);
38:       assertEquals(57, Node.LAST_PROP);
39:       assertEquals(47, Node.IS_DISPATCHER);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(2, Node.POST_FLAG);
42:       assertEquals(30, Node.VAR_ARGS_NAME);
43:       assertEquals(4095, Node.COLUMN_MASK);
44:       assertEquals(55, Node.INFERRED_FUNCTION);
45:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
46:       assertEquals(48, Node.DIRECTIVES);
47:       assertEquals(43, Node.IS_CONSTANT_NAME);
48:       assertEquals(36, Node.QUOTED_PROP);
49:       assertEquals(39, Node.EMPTY_BLOCK);
50:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
51:       assertEquals(8, Node.FLAG_NO_THROWS);
52:       assertEquals(50, Node.FREE_CALL);
53:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
54:       assertEquals(57, Node.REFLECTED_OBJECT);
55:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
56:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
57:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
58:       assertNotNull(node0);
59:       assertFalse(node0.isFunction());
60:       assertFalse(node0.isTrue());
61:       assertFalse(node0.isDebugger());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isTry());
64:       assertFalse(node0.isVoid());
65:       assertFalse(node0.isArrayLit());
66:       assertFalse(node0.isDelProp());
67:       assertFalse(node0.isIf());
68:       assertFalse(node0.isNE());
69:       assertEquals(304, node0.getCharno());
70:       assertFalse(node0.isSetterDef());
71:       assertFalse(node0.isParamList());
72:       assertFalse(node0.isIn());
73:       assertFalse(node0.isEmpty());
74:       assertEquals(0, node0.getChildCount());
75:       assertFalse(node0.isDefaultCase());
76:       assertEquals(41, node0.getLineno());
77:       assertFalse(node0.isVar());
78:       assertFalse(node0.isInc());
79:       assertFalse(node0.isSwitch());
80:       assertEquals(168240, node0.getSourcePosition());
81:       assertFalse(node0.isStringKey());
82:       assertFalse(node0.isThis());
83:       assertFalse(node0.isNumber());
84:       assertFalse(node0.isGetterDef());
85:       assertFalse(node0.isInstanceOf());
86:       assertFalse(node0.isCatch());
87:       assertFalse(node0.hasMoreThanOneChild());
88:       assertFalse(node0.isCase());
89:       assertFalse(node0.hasOneChild());
90:       assertEquals((-2740), node0.getType());
91:       assertFalse(node0.isBlock());
92:       assertFalse(node0.isHook());
93:       assertFalse(node0.isFor());
94:       assertFalse(node0.isExprResult());
95:       assertFalse(node0.isWith());
96:       assertFalse(node0.isCast());
97:       assertFalse(node0.isScript());
98:       assertFalse(node0.isObjectLit());
99:       assertFalse(node0.isAnd());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isNot());
102:       assertFalse(node0.isOr());
103:       assertFalse(node0.isContinue());
104:       assertFalse(node0.isFalse());
105:       assertFalse(node0.isDo());
106:       assertFalse(node0.isLabel());
107:       assertFalse(node0.isAssignAdd());
108:       assertFalse(node0.isThrow());
109:       assertFalse(node0.isNew());
110:       assertFalse(node0.isString());
111:       assertFalse(node0.isAdd());
112:       assertFalse(node0.isCall());
113:       assertFalse(node0.isName());
114:       assertFalse(node0.isNull());
115:       assertFalse(node0.isComma());
116:       assertFalse(node0.isGetProp());
117:       assertFalse(node0.isDec());
118:       assertFalse(node0.isTypeOf());
119:       assertFalse(node0.isBreak());
120:       assertFalse(node0.isGetElem());
121:       assertFalse(node0.isAssign());
122:       assertFalse(node0.isReturn());
123:       assertFalse(node0.isWhile());
124:       assertFalse(node0.hasChildren());
125:       
126:       Node node1 = new Node(103, node0, node0);
127:       assertEquals(51, Node.STATIC_SOURCE_FILE);
128:       assertEquals(12, Node.COLUMN_BITS);
129:       assertEquals(46, Node.IS_NAMESPACE);
130:       assertEquals(1, Node.DECR_FLAG);
131:       assertEquals(37, Node.OPT_ARG_NAME);
132:       assertEquals(49, Node.DIRECT_EVAL);
133:       assertEquals(32, Node.INCRDECR_PROP);
134:       assertEquals(56, Node.CHANGE_TIME);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
137:       assertEquals(29, Node.JSDOC_INFO_PROP);
138:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
139:       assertEquals(52, Node.LENGTH);
140:       assertEquals(40, Node.ORIGINALNAME_PROP);
141:       assertEquals(53, Node.INPUT_ID);
142:       assertEquals(54, Node.SLASH_V);
143:       assertEquals(57, Node.LAST_PROP);
144:       assertEquals(47, Node.IS_DISPATCHER);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(4095, Node.COLUMN_MASK);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
151:       assertEquals(48, Node.DIRECTIVES);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(36, Node.QUOTED_PROP);
154:       assertEquals(39, Node.EMPTY_BLOCK);
155:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
156:       assertEquals(8, Node.FLAG_NO_THROWS);
157:       assertEquals(50, Node.FREE_CALL);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(57, Node.REFLECTED_OBJECT);
160:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
161:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertEquals(49, Node.DIRECT_EVAL);
164:       assertEquals(51, Node.STATIC_SOURCE_FILE);
165:       assertEquals(12, Node.COLUMN_BITS);
166:       assertEquals(30, Node.VAR_ARGS_NAME);
167:       assertEquals(46, Node.IS_NAMESPACE);
168:       assertEquals(54, Node.SLASH_V);
169:       assertEquals(37, Node.OPT_ARG_NAME);
170:       assertEquals(29, Node.JSDOC_INFO_PROP);
171:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
172:       assertEquals(40, Node.ORIGINALNAME_PROP);
173:       assertEquals(56, Node.CHANGE_TIME);
174:       assertEquals(8, Node.FLAG_NO_THROWS);
175:       assertEquals(47, Node.IS_DISPATCHER);
176:       assertEquals(57, Node.REFLECTED_OBJECT);
177:       assertEquals(2, Node.POST_FLAG);
178:       assertEquals(53, Node.INPUT_ID);
179:       assertEquals(52, Node.LENGTH);
180:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
181:       assertEquals(15, Node.NO_SIDE_EFFECTS);
182:       assertEquals(39, Node.EMPTY_BLOCK);
183:       assertEquals(57, Node.LAST_PROP);
184:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
185:       assertEquals(55, Node.INFERRED_FUNCTION);
186:       assertEquals(36, Node.QUOTED_PROP);
187:       assertEquals(4095, Node.COLUMN_MASK);
188:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
189:       assertEquals(43, Node.IS_CONSTANT_NAME);
190:       assertEquals(48, Node.DIRECTIVES);
191:       assertEquals(50, Node.FREE_CALL);
192:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
193:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
194:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
195:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
196:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(1, Node.DECR_FLAG);
199:       assertNotNull(node1);
200:       assertFalse(node0.isFunction());
201:       assertFalse(node0.isTrue());
202:       assertFalse(node0.isDebugger());
203:       assertFalse(node0.isRegExp());
204:       assertFalse(node0.isTry());
205:       assertFalse(node0.isVoid());
206:       assertFalse(node0.isArrayLit());
207:       assertFalse(node0.isDelProp());
208:       assertFalse(node0.isIf());
209:       assertFalse(node0.isNE());
210:       assertEquals(304, node0.getCharno());
211:       assertFalse(node0.isSetterDef());
212:       assertFalse(node0.isParamList());
213:       assertFalse(node0.isIn());
214:       assertFalse(node0.isEmpty());
215:       assertEquals(0, node0.getChildCount());
216:       assertFalse(node0.isDefaultCase());
217:       assertEquals(41, node0.getLineno());
218:       assertFalse(node0.isVar());
219:       assertFalse(node0.isInc());
220:       assertFalse(node0.isSwitch());
221:       assertEquals(168240, node0.getSourcePosition());
222:       assertFalse(node0.isStringKey());
223:       assertFalse(node0.isThis());
224:       assertFalse(node0.isNumber());
225:       assertFalse(node0.isGetterDef());
226:       assertFalse(node0.isInstanceOf());
227:       assertFalse(node0.isCatch());
228:       assertFalse(node0.hasMoreThanOneChild());
229:       assertFalse(node0.isCase());
230:       assertFalse(node0.hasOneChild());
231:       assertEquals((-2740), node0.getType());
232:       assertFalse(node0.isBlock());
233:       assertFalse(node0.isHook());
234:       assertFalse(node0.isFor());
235:       assertFalse(node0.isExprResult());
236:       assertFalse(node0.isWith());
237:       assertFalse(node0.isCast());
238:       assertFalse(node0.isScript());
239:       assertFalse(node0.isObjectLit());
240:       assertFalse(node0.isAnd());
241:       assertFalse(node0.isLabelName());
242:       assertFalse(node0.isNot());
243:       assertFalse(node0.isOr());
244:       assertFalse(node0.isContinue());
245:       assertFalse(node0.isFalse());
246:       assertFalse(node0.isDo());
247:       assertFalse(node0.isLabel());
248:       assertFalse(node0.isAssignAdd());
249:       assertFalse(node0.isThrow());
250:       assertFalse(node0.isNew());
251:       assertFalse(node0.isString());
252:       assertFalse(node0.isAdd());
253:       assertFalse(node0.isCall());
254:       assertFalse(node0.isName());
255:       assertFalse(node0.isNull());
256:       assertFalse(node0.isComma());
257:       assertFalse(node0.isGetProp());
258:       assertFalse(node0.isDec());
259:       assertFalse(node0.isTypeOf());
260:       assertFalse(node0.isBreak());
261:       assertFalse(node0.isGetElem());
262:       assertFalse(node0.isAssign());
263:       assertFalse(node0.isReturn());
264:       assertFalse(node0.isWhile());
265:       assertFalse(node0.hasChildren());
266:       assertFalse(node1.isTry());
267:       assertFalse(node1.isArrayLit());
268:       assertFalse(node1.isVoid());
269:       assertFalse(node1.isFor());
270:       assertFalse(node1.isTrue());
271:       assertFalse(node1.isIf());
272:       assertFalse(node1.isRegExp());
273:       assertFalse(node1.isDelProp());
274:       assertTrue(node1.hasOneChild());
275:       assertFalse(node1.isFunction());
276:       assertFalse(node1.isCatch());
277:       assertTrue(node1.hasChildren());
278:       assertFalse(node1.isIn());
279:       assertTrue(node1.isDec());
280:       assertFalse(node1.isNE());
281:       assertFalse(node1.isDefaultCase());
282:       assertFalse(node1.isNull());
283:       assertFalse(node1.isSetterDef());
284:       assertFalse(node1.isInc());
285:       assertFalse(node1.isEmpty());
286:       assertFalse(node1.isHook());
287:       assertFalse(node1.isNew());
288:       assertEquals((-1), node1.getCharno());
289:       assertFalse(node1.isStringKey());
290:       assertFalse(node1.isBlock());
291:       assertFalse(node1.isVar());
292:       assertFalse(node1.isSwitch());
293:       assertFalse(node1.hasMoreThanOneChild());
294:       assertEquals(1, node1.getChildCount());
295:       assertFalse(node1.isThis());
296:       assertFalse(node1.isParamList());
297:       assertFalse(node1.isNumber());
298:       assertFalse(node1.isGetterDef());
299:       assertFalse(node1.isScript());
300:       assertFalse(node1.isCase());
301:       assertFalse(node1.isTypeOf());
302:       assertFalse(node1.isLabelName());
303:       assertFalse(node1.isAssign());
304:       assertFalse(node1.isExprResult());
305:       assertFalse(node1.isGetElem());
306:       assertFalse(node1.isCast());
307:       assertFalse(node1.isWith());
308:       assertFalse(node1.isInstanceOf());
309:       assertFalse(node1.isLabel());
310:       assertFalse(node1.isOr());
311:       assertEquals((-1), node1.getLineno());
312:       assertFalse(node1.isAssignAdd());
313:       assertFalse(node1.isDo());
314:       assertFalse(node1.isAdd());
315:       assertFalse(node1.isThrow());
316:       assertFalse(node1.isName());
317:       assertFalse(node1.isBreak());
318:       assertEquals(103, node1.getType());
319:       assertFalse(node1.isComma());
320:       assertFalse(node1.isFalse());
321:       assertFalse(node1.isCall());
322:       assertFalse(node1.isContinue());
323:       assertFalse(node1.isReturn());
324:       assertFalse(node1.isWhile());
325:       assertFalse(node1.isAnd());
326:       assertFalse(node1.isNot());
327:       assertEquals((-1), node1.getSourcePosition());
328:       assertFalse(node1.isDebugger());
329:       assertFalse(node1.isGetProp());
330:       assertFalse(node1.isObjectLit());
331:       assertFalse(node1.isString());
332:       assertFalse(node1.equals((Object)node0));
333:       
334:       Iterable<Node> iterable0 = node0.children();
335:       assertEquals(51, Node.STATIC_SOURCE_FILE);
336:       assertEquals(12, Node.COLUMN_BITS);
337:       assertEquals(46, Node.IS_NAMESPACE);
338:       assertEquals(1, Node.DECR_FLAG);
339:       assertEquals(37, Node.OPT_ARG_NAME);
340:       assertEquals(49, Node.DIRECT_EVAL);
341:       assertEquals(32, Node.INCRDECR_PROP);
342:       assertEquals(56, Node.CHANGE_TIME);
343:       assertEquals(15, Node.NO_SIDE_EFFECTS);
344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
345:       assertEquals(29, Node.JSDOC_INFO_PROP);
346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
347:       assertEquals(52, Node.LENGTH);
348:       assertEquals(40, Node.ORIGINALNAME_PROP);
349:       assertEquals(53, Node.INPUT_ID);
350:       assertEquals(54, Node.SLASH_V);
351:       assertEquals(57, Node.LAST_PROP);
352:       assertEquals(47, Node.IS_DISPATCHER);
353:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
354:       assertEquals(2, Node.POST_FLAG);
355:       assertEquals(30, Node.VAR_ARGS_NAME);
356:       assertEquals(4095, Node.COLUMN_MASK);
357:       assertEquals(55, Node.INFERRED_FUNCTION);
358:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
359:       assertEquals(48, Node.DIRECTIVES);
360:       assertEquals(43, Node.IS_CONSTANT_NAME);
361:       assertEquals(36, Node.QUOTED_PROP);
362:       assertEquals(39, Node.EMPTY_BLOCK);
363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
364:       assertEquals(8, Node.FLAG_NO_THROWS);
365:       assertEquals(50, Node.FREE_CALL);
366:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
367:       assertEquals(57, Node.REFLECTED_OBJECT);
368:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
369:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
370:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
371:       assertNotNull(iterable0);
372:       assertFalse(node0.isFunction());
373:       assertFalse(node0.isTrue());
374:       assertFalse(node0.isDebugger());
375:       assertFalse(node0.isRegExp());
376:       assertFalse(node0.isTry());
377:       assertFalse(node0.isVoid());
378:       assertFalse(node0.isArrayLit());
379:       assertFalse(node0.isDelProp());
380:       assertFalse(node0.isIf());
381:       assertFalse(node0.isNE());
382:       assertEquals(304, node0.getCharno());
383:       assertFalse(node0.isSetterDef());
384:       assertFalse(node0.isParamList());
385:       assertFalse(node0.isIn());
386:       assertFalse(node0.isEmpty());
387:       assertEquals(0, node0.getChildCount());
388:       assertFalse(node0.isDefaultCase());
389:       assertEquals(41, node0.getLineno());
390:       assertFalse(node0.isVar());
391:       assertFalse(node0.isInc());
392:       assertFalse(node0.isSwitch());
393:       assertEquals(168240, node0.getSourcePosition());
394:       assertFalse(node0.isStringKey());
395:       assertFalse(node0.isThis());
396:       assertFalse(node0.isNumber());
397:       assertFalse(node0.isGetterDef());
398:       assertFalse(node0.isInstanceOf());
399:       assertFalse(node0.isCatch());
400:       assertFalse(node0.hasMoreThanOneChild());
401:       assertFalse(node0.isCase());
402:       assertFalse(node0.hasOneChild());
403:       assertEquals((-2740), node0.getType());
404:       assertFalse(node0.isBlock());
405:       assertFalse(node0.isHook());
406:       assertFalse(node0.isFor());
407:       assertFalse(node0.isExprResult());
408:       assertFalse(node0.isWith());
409:       assertFalse(node0.isCast());
410:       assertFalse(node0.isScript());
411:       assertFalse(node0.isObjectLit());
412:       assertFalse(node0.isAnd());
413:       assertFalse(node0.isLabelName());
414:       assertFalse(node0.isNot());
415:       assertFalse(node0.isOr());
416:       assertFalse(node0.isContinue());
417:       assertFalse(node0.isFalse());
418:       assertFalse(node0.isDo());
419:       assertFalse(node0.isLabel());
420:       assertFalse(node0.isAssignAdd());
421:       assertFalse(node0.isThrow());
422:       assertFalse(node0.isNew());
423:       assertFalse(node0.isString());
424:       assertFalse(node0.isAdd());
425:       assertFalse(node0.isCall());
426:       assertFalse(node0.isName());
427:       assertFalse(node0.isNull());
428:       assertFalse(node0.isComma());
429:       assertFalse(node0.isGetProp());
430:       assertFalse(node0.isDec());
431:       assertFalse(node0.isTypeOf());
432:       assertFalse(node0.isBreak());
433:       assertFalse(node0.isGetElem());
434:       assertFalse(node0.isAssign());
435:       assertFalse(node0.isReturn());
436:       assertFalse(node0.isWhile());
437:       assertFalse(node0.hasChildren());
438:       assertFalse(node0.equals((Object)node1));
439:       assertFalse(iterable0.contains(node1));
440:       
441:       boolean boolean0 = node1.isNoSideEffectsCall();
442:       assertEquals(51, Node.STATIC_SOURCE_FILE);
443:       assertEquals(12, Node.COLUMN_BITS);
444:       assertEquals(46, Node.IS_NAMESPACE);
445:       assertEquals(1, Node.DECR_FLAG);
446:       assertEquals(37, Node.OPT_ARG_NAME);
447:       assertEquals(49, Node.DIRECT_EVAL);
448:       assertEquals(32, Node.INCRDECR_PROP);
449:       assertEquals(56, Node.CHANGE_TIME);
450:       assertEquals(15, Node.NO_SIDE_EFFECTS);
451:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
452:       assertEquals(29, Node.JSDOC_INFO_PROP);
453:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
454:       assertEquals(52, Node.LENGTH);
455:       assertEquals(40, Node.ORIGINALNAME_PROP);
456:       assertEquals(53, Node.INPUT_ID);
457:       assertEquals(54, Node.SLASH_V);
458:       assertEquals(57, Node.LAST_PROP);
459:       assertEquals(47, Node.IS_DISPATCHER);
460:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
461:       assertEquals(2, Node.POST_FLAG);
462:       assertEquals(30, Node.VAR_ARGS_NAME);
463:       assertEquals(4095, Node.COLUMN_MASK);
464:       assertEquals(55, Node.INFERRED_FUNCTION);
465:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
466:       assertEquals(48, Node.DIRECTIVES);
467:       assertEquals(43, Node.IS_CONSTANT_NAME);
468:       assertEquals(36, Node.QUOTED_PROP);
469:       assertEquals(39, Node.EMPTY_BLOCK);
470:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
471:       assertEquals(8, Node.FLAG_NO_THROWS);
472:       assertEquals(50, Node.FREE_CALL);
473:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
474:       assertEquals(57, Node.REFLECTED_OBJECT);
475:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
476:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
477:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
478:       assertEquals(49, Node.DIRECT_EVAL);
479:       assertEquals(51, Node.STATIC_SOURCE_FILE);
480:       assertEquals(12, Node.COLUMN_BITS);
481:       assertEquals(30, Node.VAR_ARGS_NAME);
482:       assertEquals(46, Node.IS_NAMESPACE);
483:       assertEquals(54, Node.SLASH_V);
484:       assertEquals(37, Node.OPT_ARG_NAME);
485:       assertEquals(29, Node.JSDOC_INFO_PROP);
486:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
487:       assertEquals(40, Node.ORIGINALNAME_PROP);
488:       assertEquals(56, Node.CHANGE_TIME);
489:       assertEquals(8, Node.FLAG_NO_THROWS);
490:       assertEquals(47, Node.IS_DISPATCHER);
491:       assertEquals(57, Node.REFLECTED_OBJECT);
492:       assertEquals(2, Node.POST_FLAG);
493:       assertEquals(53, Node.INPUT_ID);
494:       assertEquals(52, Node.LENGTH);
495:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
496:       assertEquals(15, Node.NO_SIDE_EFFECTS);
497:       assertEquals(39, Node.EMPTY_BLOCK);
498:       assertEquals(57, Node.LAST_PROP);
499:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
500:       assertEquals(55, Node.INFERRED_FUNCTION);
501:       assertEquals(36, Node.QUOTED_PROP);
502:       assertEquals(4095, Node.COLUMN_MASK);
503:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
504:       assertEquals(43, Node.IS_CONSTANT_NAME);
505:       assertEquals(48, Node.DIRECTIVES);
506:       assertEquals(50, Node.FREE_CALL);
507:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
508:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
509:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
510:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
511:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
512:       assertEquals(32, Node.INCRDECR_PROP);
513:       assertEquals(1, Node.DECR_FLAG);
514:       assertFalse(node0.isFunction());
515:       assertFalse(node0.isTrue());
516:       assertFalse(node0.isDebugger());
517:       assertFalse(node0.isRegExp());
518:       assertFalse(node0.isTry());
519:       assertFalse(node0.isVoid());
520:       assertFalse(node0.isArrayLit());
521:       assertFalse(node0.isDelProp());
522:       assertFalse(node0.isIf());
523:       assertFalse(node0.isNE());
524:       assertEquals(304, node0.getCharno());
525:       assertFalse(node0.isSetterDef());
526:       assertFalse(node0.isParamList());
527:       assertFalse(node0.isIn());
528:       assertFalse(node0.isEmpty());
529:       assertEquals(0, node0.getChildCount());
530:       assertFalse(node0.isDefaultCase());
531:       assertEquals(41, node0.getLineno());
532:       assertFalse(node0.isVar());
533:       assertFalse(node0.isInc());
534:       assertFalse(node0.isSwitch());
535:       assertEquals(168240, node0.getSourcePosition());
536:       assertFalse(node0.isStringKey());
537:       assertFalse(node0.isThis());
538:       assertFalse(node0.isNumber());
539:       assertFalse(node0.isGetterDef());
540:       assertFalse(node0.isInstanceOf());
541:       assertFalse(node0.isCatch());
542:       assertFalse(node0.hasMoreThanOneChild());
543:       assertFalse(node0.isCase());
544:       assertFalse(node0.hasOneChild());
545:       assertEquals((-2740), node0.getType());
546:       assertFalse(node0.isBlock());
547:       assertFalse(node0.isHook());
548:       assertFalse(node0.isFor());
549:       assertFalse(node0.isExprResult());
550:       assertFalse(node0.isWith());
551:       assertFalse(node0.isCast());
552:       assertFalse(node0.isScript());
553:       assertFalse(node0.isObjectLit());
554:       assertFalse(node0.isAnd());
555:       assertFalse(node0.isLabelName());
556:       assertFalse(node0.isNot());
557:       assertFalse(node0.isOr());
558:       assertFalse(node0.isContinue());
559:       assertFalse(node0.isFalse());
560:       assertFalse(node0.isDo());
561:       assertFalse(node0.isLabel());
562:       assertFalse(node0.isAssignAdd());
563:       assertFalse(node0.isThrow());
564:       assertFalse(node0.isNew());
565:       assertFalse(node0.isString());
566:       assertFalse(node0.isAdd());
567:       assertFalse(node0.isCall());
568:       assertFalse(node0.isName());
569:       assertFalse(node0.isNull());
570:       assertFalse(node0.isComma());
571:       assertFalse(node0.isGetProp());
572:       assertFalse(node0.isDec());
573:       assertFalse(node0.isTypeOf());
574:       assertFalse(node0.isBreak());
575:       assertFalse(node0.isGetElem());
576:       assertFalse(node0.isAssign());
577:       assertFalse(node0.isReturn());
578:       assertFalse(node0.isWhile());
579:       assertFalse(node0.hasChildren());
580:       assertFalse(node1.isTry());
581:       assertFalse(node1.isArrayLit());
582:       assertFalse(node1.isVoid());
583:       assertFalse(node1.isFor());
584:       assertFalse(node1.isTrue());
585:       assertFalse(node1.isIf());
586:       assertFalse(node1.isRegExp());
587:       assertFalse(node1.isDelProp());
588:       assertTrue(node1.hasOneChild());
589:       assertFalse(node1.isFunction());
590:       assertFalse(node1.isCatch());
591:       assertTrue(node1.hasChildren());
592:       assertFalse(node1.isIn());
593:       assertTrue(node1.isDec());
594:       assertFalse(node1.isNE());
595:       assertFalse(node1.isDefaultCase());
596:       assertFalse(node1.isNull());
597:       assertFalse(node1.isSetterDef());
598:       assertFalse(node1.isInc());
599:       assertFalse(node1.isEmpty());
600:       assertFalse(node1.isHook());
601:       assertFalse(node1.isNew());
602:       assertEquals((-1), node1.getCharno());
603:       assertFalse(node1.isStringKey());
604:       assertFalse(node1.isBlock());
605:       assertFalse(node1.isVar());
606:       assertFalse(node1.isSwitch());
607:       assertFalse(node1.hasMoreThanOneChild());
608:       assertEquals(1, node1.getChildCount());
609:       assertFalse(node1.isThis());
610:       assertFalse(node1.isParamList());
611:       assertFalse(node1.isNumber());
612:       assertFalse(node1.isGetterDef());
613:       assertFalse(node1.isScript());
614:       assertFalse(node1.isCase());
615:       assertFalse(node1.isTypeOf());
616:       assertFalse(node1.isLabelName());
617:       assertFalse(node1.isAssign());
618:       assertFalse(node1.isExprResult());
619:       assertFalse(node1.isGetElem());
620:       assertFalse(node1.isCast());
621:       assertFalse(node1.isWith());
622:       assertFalse(node1.isInstanceOf());
623:       assertFalse(node1.isLabel());
624:       assertFalse(node1.isOr());
625:       assertEquals((-1), node1.getLineno());
626:       assertFalse(node1.isAssignAdd());
627:       assertFalse(node1.isDo());
628:       assertFalse(node1.isAdd());
629:       assertFalse(node1.isThrow());
630:       assertFalse(node1.isName());
631:       assertFalse(node1.isBreak());
632:       assertEquals(103, node1.getType());
633:       assertFalse(node1.isComma());
634:       assertFalse(node1.isFalse());
635:       assertFalse(node1.isCall());
636:       assertFalse(node1.isContinue());
637:       assertFalse(node1.isReturn());
638:       assertFalse(node1.isWhile());
639:       assertFalse(node1.isAnd());
640:       assertFalse(node1.isNot());
641:       assertEquals((-1), node1.getSourcePosition());
642:       assertFalse(node1.isDebugger());
643:       assertFalse(node1.isGetProp());
644:       assertFalse(node1.isObjectLit());
645:       assertFalse(node1.isString());
646:       assertFalse(node0.equals((Object)node1));
647:       assertFalse(node1.equals((Object)node0));
648:       assertFalse(boolean0);
649:       
650:       boolean boolean1 = node1.isLocalResultCall();
651:       assertEquals(51, Node.STATIC_SOURCE_FILE);
652:       assertEquals(12, Node.COLUMN_BITS);
653:       assertEquals(46, Node.IS_NAMESPACE);
654:       assertEquals(1, Node.DECR_FLAG);
655:       assertEquals(37, Node.OPT_ARG_NAME);
656:       assertEquals(49, Node.DIRECT_EVAL);
657:       assertEquals(32, Node.INCRDECR_PROP);
658:       assertEquals(56, Node.CHANGE_TIME);
659:       assertEquals(15, Node.NO_SIDE_EFFECTS);
660:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
661:       assertEquals(29, Node.JSDOC_INFO_PROP);
662:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
663:       assertEquals(52, Node.LENGTH);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(53, Node.INPUT_ID);
666:       assertEquals(54, Node.SLASH_V);
667:       assertEquals(57, Node.LAST_PROP);
668:       assertEquals(47, Node.IS_DISPATCHER);
669:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
670:       assertEquals(2, Node.POST_FLAG);
671:       assertEquals(30, Node.VAR_ARGS_NAME);
672:       assertEquals(4095, Node.COLUMN_MASK);
673:       assertEquals(55, Node.INFERRED_FUNCTION);
674:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
675:       assertEquals(48, Node.DIRECTIVES);
676:       assertEquals(43, Node.IS_CONSTANT_NAME);
677:       assertEquals(36, Node.QUOTED_PROP);
678:       assertEquals(39, Node.EMPTY_BLOCK);
679:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
680:       assertEquals(8, Node.FLAG_NO_THROWS);
681:       assertEquals(50, Node.FREE_CALL);
682:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
683:       assertEquals(57, Node.REFLECTED_OBJECT);
684:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
685:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
686:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
687:       assertEquals(49, Node.DIRECT_EVAL);
688:       assertEquals(51, Node.STATIC_SOURCE_FILE);
689:       assertEquals(12, Node.COLUMN_BITS);
690:       assertEquals(30, Node.VAR_ARGS_NAME);
691:       assertEquals(46, Node.IS_NAMESPACE);
692:       assertEquals(54, Node.SLASH_V);
693:       assertEquals(37, Node.OPT_ARG_NAME);
694:       assertEquals(29, Node.JSDOC_INFO_PROP);
695:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
696:       assertEquals(40, Node.ORIGINALNAME_PROP);
697:       assertEquals(56, Node.CHANGE_TIME);
698:       assertEquals(8, Node.FLAG_NO_THROWS);
699:       assertEquals(47, Node.IS_DISPATCHER);
700:       assertEquals(57, Node.REFLECTED_OBJECT);
701:       assertEquals(2, Node.POST_FLAG);
702:       assertEquals(53, Node.INPUT_ID);
703:       assertEquals(52, Node.LENGTH);
704:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
705:       assertEquals(15, Node.NO_SIDE_EFFECTS);
706:       assertEquals(39, Node.EMPTY_BLOCK);
707:       assertEquals(57, Node.LAST_PROP);
708:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
709:       assertEquals(55, Node.INFERRED_FUNCTION);
710:       assertEquals(36, Node.QUOTED_PROP);
711:       assertEquals(4095, Node.COLUMN_MASK);
712:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
713:       assertEquals(43, Node.IS_CONSTANT_NAME);
714:       assertEquals(48, Node.DIRECTIVES);
715:       assertEquals(50, Node.FREE_CALL);
716:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
717:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
718:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
720:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
721:       assertEquals(32, Node.INCRDECR_PROP);
722:       assertEquals(1, Node.DECR_FLAG);
723:       assertFalse(node0.isFunction());
724:       assertFalse(node0.isTrue());
725:       assertFalse(node0.isDebugger());
726:       assertFalse(node0.isRegExp());
727:       assertFalse(node0.isTry());
728:       assertFalse(node0.isVoid());
729:       assertFalse(node0.isArrayLit());
730:       assertFalse(node0.isDelProp());
731:       assertFalse(node0.isIf());
732:       assertFalse(node0.isNE());
733:       assertEquals(304, node0.getCharno());
734:       assertFalse(node0.isSetterDef());
735:       assertFalse(node0.isParamList());
736:       assertFalse(node0.isIn());
737:       assertFalse(node0.isEmpty());
738:       assertEquals(0, node0.getChildCount());
739:       assertFalse(node0.isDefaultCase());
740:       assertEquals(41, node0.getLineno());
741:       assertFalse(node0.isVar());
742:       assertFalse(node0.isInc());
743:       assertFalse(node0.isSwitch());
744:       assertEquals(168240, node0.getSourcePosition());
745:       assertFalse(node0.isStringKey());
746:       assertFalse(node0.isThis());
747:       assertFalse(node0.isNumber());
748:       assertFalse(node0.isGetterDef());
749:       assertFalse(node0.isInstanceOf());
750:       assertFalse(node0.isCatch());
751:       assertFalse(node0.hasMoreThanOneChild());
752:       assertFalse(node0.isCase());
753:       assertFalse(node0.hasOneChild());
754:       assertEquals((-2740), node0.getType());
755:       assertFalse(node0.isBlock());
756:       assertFalse(node0.isHook());
757:       assertFalse(node0.isFor());
758:       assertFalse(node0.isExprResult());
759:       assertFalse(node0.isWith());
760:       assertFalse(node0.isCast());
761:       assertFalse(node0.isScript());
762:       assertFalse(node0.isObjectLit());
763:       assertFalse(node0.isAnd());
764:       assertFalse(node0.isLabelName());
765:       assertFalse(node0.isNot());
766:       assertFalse(node0.isOr());
767:       assertFalse(node0.isContinue());
768:       assertFalse(node0.isFalse());
769:       assertFalse(node0.isDo());
770:       assertFalse(node0.isLabel());
771:       assertFalse(node0.isAssignAdd());
772:       assertFalse(node0.isThrow());
773:       assertFalse(node0.isNew());
774:       assertFalse(node0.isString());
775:       assertFalse(node0.isAdd());
776:       assertFalse(node0.isCall());
777:       assertFalse(node0.isName());
778:       assertFalse(node0.isNull());
779:       assertFalse(node0.isComma());
780:       assertFalse(node0.isGetProp());
781:       assertFalse(node0.isDec());
782:       assertFalse(node0.isTypeOf());
783:       assertFalse(node0.isBreak());
784:       assertFalse(node0.isGetElem());
785:       assertFalse(node0.isAssign());
786:       assertFalse(node0.isReturn());
787:       assertFalse(node0.isWhile());
788:       assertFalse(node0.hasChildren());
789:       assertFalse(node1.isTry());
790:       assertFalse(node1.isArrayLit());
791:       assertFalse(node1.isVoid());
792:       assertFalse(node1.isFor());
793:       assertFalse(node1.isTrue());
794:       assertFalse(node1.isIf());
795:       assertFalse(node1.isRegExp());
796:       assertFalse(node1.isDelProp());
797:       assertTrue(node1.hasOneChild());
798:       assertFalse(node1.isFunction());
799:       assertFalse(node1.isCatch());
800:       assertTrue(node1.hasChildren());
801:       assertFalse(node1.isIn());
802:       assertTrue(node1.isDec());
803:       assertFalse(node1.isNE());
804:       assertFalse(node1.isDefaultCase());
805:       assertFalse(node1.isNull());
806:       assertFalse(node1.isSetterDef());
807:       assertFalse(node1.isInc());
808:       assertFalse(node1.isEmpty());
809:       assertFalse(node1.isHook());
810:       assertFalse(node1.isNew());
811:       assertEquals((-1), node1.getCharno());
812:       assertFalse(node1.isStringKey());
813:       assertFalse(node1.isBlock());
814:       assertFalse(node1.isVar());
815:       assertFalse(node1.isSwitch());
816:       assertFalse(node1.hasMoreThanOneChild());
817:       assertEquals(1, node1.getChildCount());
818:       assertFalse(node1.isThis());
819:       assertFalse(node1.isParamList());
820:       assertFalse(node1.isNumber());
821:       assertFalse(node1.isGetterDef());
822:       assertFalse(node1.isScript());
823:       assertFalse(node1.isCase());
824:       assertFalse(node1.isTypeOf());
825:       assertFalse(node1.isLabelName());
826:       assertFalse(node1.isAssign());
827:       assertFalse(node1.isExprResult());
828:       assertFalse(node1.isGetElem());
829:       assertFalse(node1.isCast());
830:       assertFalse(node1.isWith());
831:       assertFalse(node1.isInstanceOf());
832:       assertFalse(node1.isLabel());
833:       assertFalse(node1.isOr());
834:       assertEquals((-1), node1.getLineno());
835:       assertFalse(node1.isAssignAdd());
836:       assertFalse(node1.isDo());
837:       assertFalse(node1.isAdd());
838:       assertFalse(node1.isThrow());
839:       assertFalse(node1.isName());
840:       assertFalse(node1.isBreak());
841:       assertEquals(103, node1.getType());
842:       assertFalse(node1.isComma());
843:       assertFalse(node1.isFalse());
844:       assertFalse(node1.isCall());
845:       assertFalse(node1.isContinue());
846:       assertFalse(node1.isReturn());
847:       assertFalse(node1.isWhile());
848:       assertFalse(node1.isAnd());
849:       assertFalse(node1.isNot());
850:       assertEquals((-1), node1.getSourcePosition());
851:       assertFalse(node1.isDebugger());
852:       assertFalse(node1.isGetProp());
853:       assertFalse(node1.isObjectLit());
854:       assertFalse(node1.isString());
855:       assertFalse(node0.equals((Object)node1));
856:       assertFalse(node1.equals((Object)node0));
857:       assertTrue(boolean1 == boolean0);
858:       assertFalse(boolean1);
859:       
860:       Node node2 = node1.cloneTree();
861:       assertEquals(51, Node.STATIC_SOURCE_FILE);
862:       assertEquals(12, Node.COLUMN_BITS);
863:       assertEquals(46, Node.IS_NAMESPACE);
864:       assertEquals(1, Node.DECR_FLAG);
865:       assertEquals(37, Node.OPT_ARG_NAME);
866:       assertEquals(49, Node.DIRECT_EVAL);
867:       assertEquals(32, Node.INCRDECR_PROP);
868:       assertEquals(56, Node.CHANGE_TIME);
869:       assertEquals(15, Node.NO_SIDE_EFFECTS);
870:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
871:       assertEquals(29, Node.JSDOC_INFO_PROP);
872:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
873:       assertEquals(52, Node.LENGTH);
874:       assertEquals(40, Node.ORIGINALNAME_PROP);
875:       assertEquals(53, Node.INPUT_ID);
876:       assertEquals(54, Node.SLASH_V);
877:       assertEquals(57, Node.LAST_PROP);
878:       assertEquals(47, Node.IS_DISPATCHER);
879:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
880:       assertEquals(2, Node.POST_FLAG);
881:       assertEquals(30, Node.VAR_ARGS_NAME);
882:       assertEquals(4095, Node.COLUMN_MASK);
883:       assertEquals(55, Node.INFERRED_FUNCTION);
884:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
885:       assertEquals(48, Node.DIRECTIVES);
886:       assertEquals(43, Node.IS_CONSTANT_NAME);
887:       assertEquals(36, Node.QUOTED_PROP);
888:       assertEquals(39, Node.EMPTY_BLOCK);
889:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
890:       assertEquals(8, Node.FLAG_NO_THROWS);
891:       assertEquals(50, Node.FREE_CALL);
892:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
896:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
897:       assertEquals(49, Node.DIRECT_EVAL);
898:       assertEquals(51, Node.STATIC_SOURCE_FILE);
899:       assertEquals(12, Node.COLUMN_BITS);
900:       assertEquals(30, Node.VAR_ARGS_NAME);
901:       assertEquals(46, Node.IS_NAMESPACE);
902:       assertEquals(54, Node.SLASH_V);
903:       assertEquals(37, Node.OPT_ARG_NAME);
904:       assertEquals(29, Node.JSDOC_INFO_PROP);
905:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
906:       assertEquals(40, Node.ORIGINALNAME_PROP);
907:       assertEquals(56, Node.CHANGE_TIME);
908:       assertEquals(8, Node.FLAG_NO_THROWS);
909:       assertEquals(47, Node.IS_DISPATCHER);
910:       assertEquals(57, Node.REFLECTED_OBJECT);
911:       assertEquals(2, Node.POST_FLAG);
912:       assertEquals(53, Node.INPUT_ID);
913:       assertEquals(52, Node.LENGTH);
914:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
915:       assertEquals(15, Node.NO_SIDE_EFFECTS);
916:       assertEquals(39, Node.EMPTY_BLOCK);
917:       assertEquals(57, Node.LAST_PROP);
918:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
919:       assertEquals(55, Node.INFERRED_FUNCTION);
920:       assertEquals(36, Node.QUOTED_PROP);
921:       assertEquals(4095, Node.COLUMN_MASK);
922:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
923:       assertEquals(43, Node.IS_CONSTANT_NAME);
924:       assertEquals(48, Node.DIRECTIVES);
925:       assertEquals(50, Node.FREE_CALL);
926:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
927:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
928:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
929:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
930:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
931:       assertEquals(32, Node.INCRDECR_PROP);
932:       assertEquals(1, Node.DECR_FLAG);
933:       assertEquals(55, Node.INFERRED_FUNCTION);
934:       assertEquals(4095, Node.COLUMN_MASK);
935:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
936:       assertEquals(48, Node.DIRECTIVES);
937:       assertEquals(39, Node.EMPTY_BLOCK);
938:       assertEquals(43, Node.IS_CONSTANT_NAME);
939:       assertEquals(36, Node.QUOTED_PROP);
940:       assertEquals(8, Node.FLAG_NO_THROWS);
941:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
942:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
943:       assertEquals(50, Node.FREE_CALL);
944:       assertEquals(57, Node.REFLECTED_OBJECT);
945:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
949:       assertEquals(51, Node.STATIC_SOURCE_FILE);
950:       assertEquals(12, Node.COLUMN_BITS);
951:       assertEquals(32, Node.INCRDECR_PROP);
952:       assertEquals(46, Node.IS_NAMESPACE);
953:       assertEquals(1, Node.DECR_FLAG);
954:       assertEquals(49, Node.DIRECT_EVAL);
955:       assertEquals(37, Node.OPT_ARG_NAME);
956:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
957:       assertEquals(56, Node.CHANGE_TIME);
958:       assertEquals(15, Node.NO_SIDE_EFFECTS);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(52, Node.LENGTH);
961:       assertEquals(53, Node.INPUT_ID);
962:       assertEquals(29, Node.JSDOC_INFO_PROP);
963:       assertEquals(40, Node.ORIGINALNAME_PROP);
964:       assertEquals(2, Node.POST_FLAG);
965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
966:       assertEquals(57, Node.LAST_PROP);
967:       assertEquals(30, Node.VAR_ARGS_NAME);
968:       assertEquals(47, Node.IS_DISPATCHER);
969:       assertNotSame(node1, node2);
970:       assertNotSame(node2, node1);
971:       assertNotNull(node2);
972:       assertFalse(node0.isFunction());
973:       assertFalse(node0.isTrue());
974:       assertFalse(node0.isDebugger());
975:       assertFalse(node0.isRegExp());
976:       assertFalse(node0.isTry());
977:       assertFalse(node0.isVoid());
978:       assertFalse(node0.isArrayLit());
979:       assertFalse(node0.isDelProp());
980:       assertFalse(node0.isIf());
981:       assertFalse(node0.isNE());
982:       assertEquals(304, node0.getCharno());
983:       assertFalse(node0.isSetterDef());
984:       assertFalse(node0.isParamList());
985:       assertFalse(node0.isIn());
986:       assertFalse(node0.isEmpty());
987:       assertEquals(0, node0.getChildCount());
988:       assertFalse(node0.isDefaultCase());
989:       assertEquals(41, node0.getLineno());
990:       assertFalse(node0.isVar());
991:       assertFalse(node0.isInc());
992:       assertFalse(node0.isSwitch());
993:       assertEquals(168240, node0.getSourcePosition());
994:       assertFalse(node0.isStringKey());
995:       assertFalse(node0.isThis());
996:       assertFalse(node0.isNumber());
997:       assertFalse(node0.isGetterDef());
998:       assertFalse(node0.isInstanceOf());
999:       assertFalse(node0.isCatch());
1000:       assertFalse(node0.hasMoreThanOneChild());
1001:       assertFalse(node0.isCase());
1002:       assertFalse(node0.hasOneChild());
1003:       assertEquals((-2740), node0.getType());
1004:       assertFalse(node0.isBlock());
1005:       assertFalse(node0.isHook());
1006:       assertFalse(node0.isFor());
1007:       assertFalse(node0.isExprResult());
1008:       assertFalse(node0.isWith());
1009:       assertFalse(node0.isCast());
1010:       assertFalse(node0.isScript());
1011:       assertFalse(node0.isObjectLit());
1012:       assertFalse(node0.isAnd());
1013:       assertFalse(node0.isLabelName());
1014:       assertFalse(node0.isNot());
1015:       assertFalse(node0.isOr());
1016:       assertFalse(node0.isContinue());
1017:       assertFalse(node0.isFalse());
1018:       assertFalse(node0.isDo());
1019:       assertFalse(node0.isLabel());
1020:       assertFalse(node0.isAssignAdd());
1021:       assertFalse(node0.isThrow());
1022:       assertFalse(node0.isNew());
1023:       assertFalse(node0.isString());
1024:       assertFalse(node0.isAdd());
1025:       assertFalse(node0.isCall());
1026:       assertFalse(node0.isName());
1027:       assertFalse(node0.isNull());
1028:       assertFalse(node0.isComma());
1029:       assertFalse(node0.isGetProp());
1030:       assertFalse(node0.isDec());
1031:       assertFalse(node0.isTypeOf());
1032:       assertFalse(node0.isBreak());
1033:       assertFalse(node0.isGetElem());
1034:       assertFalse(node0.isAssign());
1035:       assertFalse(node0.isReturn());
1036:       assertFalse(node0.isWhile());
1037:       assertFalse(node0.hasChildren());
1038:       assertFalse(node1.isTry());
1039:       assertFalse(node1.isArrayLit());
1040:       assertFalse(node1.isVoid());
1041:       assertFalse(node1.isFor());
1042:       assertFalse(node1.isTrue());
1043:       assertFalse(node1.isIf());
1044:       assertFalse(node1.isRegExp());
1045:       assertFalse(node1.isDelProp());
1046:       assertTrue(node1.hasOneChild());
1047:       assertFalse(node1.isFunction());
1048:       assertFalse(node1.isCatch());
1049:       assertTrue(node1.hasChildren());
1050:       assertFalse(node1.isIn());
1051:       assertTrue(node1.isDec());
1052:       assertFalse(node1.isNE());
1053:       assertFalse(node1.isDefaultCase());
1054:       assertFalse(node1.isNull());
1055:       assertFalse(node1.isSetterDef());
1056:       assertFalse(node1.isInc());
1057:       assertFalse(node1.isEmpty());
1058:       assertFalse(node1.isHook());
1059:       assertFalse(node1.isNew());
1060:       assertEquals((-1), node1.getCharno());
1061:       assertFalse(node1.isStringKey());
1062:       assertFalse(node1.isBlock());
1063:       assertFalse(node1.isVar());
1064:       assertFalse(node1.isSwitch());
1065:       assertFalse(node1.hasMoreThanOneChild());
1066:       assertEquals(1, node1.getChildCount());
1067:       assertFalse(node1.isThis());
1068:       assertFalse(node1.isParamList());
1069:       assertFalse(node1.isNumber());
1070:       assertFalse(node1.isGetterDef());
1071:       assertFalse(node1.isScript());
1072:       assertFalse(node1.isCase());
1073:       assertFalse(node1.isTypeOf());
1074:       assertFalse(node1.isLabelName());
1075:       assertFalse(node1.isAssign());
1076:       assertFalse(node1.isExprResult());
1077:       assertFalse(node1.isGetElem());
1078:       assertFalse(node1.isCast());
1079:       assertFalse(node1.isWith());
1080:       assertFalse(node1.isInstanceOf());
1081:       assertFalse(node1.isLabel());
1082:       assertFalse(node1.isOr());
1083:       assertEquals((-1), node1.getLineno());
1084:       assertFalse(node1.isAssignAdd());
1085:       assertFalse(node1.isDo());
1086:       assertFalse(node1.isAdd());
1087:       assertFalse(node1.isThrow());
1088:       assertFalse(node1.isName());
1089:       assertFalse(node1.isBreak());
1090:       assertEquals(103, node1.getType());
1091:       assertFalse(node1.isComma());
1092:       assertFalse(node1.isFalse());
1093:       assertFalse(node1.isCall());
1094:       assertFalse(node1.isContinue());
1095:       assertFalse(node1.isReturn());
1096:       assertFalse(node1.isWhile());
1097:       assertFalse(node1.isAnd());
1098:       assertFalse(node1.isNot());
1099:       assertEquals((-1), node1.getSourcePosition());
1100:       assertFalse(node1.isDebugger());
1101:       assertFalse(node1.isGetProp());
1102:       assertFalse(node1.isObjectLit());
1103:       assertFalse(node1.isString());
1104:       assertFalse(node2.isNew());
1105:       assertFalse(node2.isAdd());
1106:       assertFalse(node2.isBlock());
1107:       assertFalse(node2.isCall());
1108:       assertFalse(node2.isContinue());
1109:       assertFalse(node2.isStringKey());
1110:       assertEquals((-1), node2.getLineno());
1111:       assertFalse(node2.isName());
1112:       assertFalse(node2.isParamList());
1113:       assertFalse(node2.isReturn());
1114:       assertEquals((-1), node2.getSourcePosition());
1115:       assertFalse(node2.isAssign());
1116:       assertFalse(node2.isTypeOf());
1117:       assertFalse(node2.isNumber());
1118:       assertFalse(node2.hasMoreThanOneChild());
1119:       assertFalse(node2.isWhile());
1120:       assertFalse(node2.isVoid());
1121:       assertFalse(node2.isTrue());
1122:       assertFalse(node2.isExprResult());
1123:       assertFalse(node2.isScript());
1124:       assertFalse(node2.isArrayLit());
1125:       assertFalse(node2.isGetElem());
1126:       assertFalse(node2.isDelProp());
1127:       assertFalse(node2.isLabelName());
1128:       assertFalse(node2.isNull());
1129:       assertFalse(node2.isLabel());
1130:       assertFalse(node2.isOr());
1131:       assertFalse(node2.isEmpty());
1132:       assertFalse(node2.isVar());
1133:       assertFalse(node2.isDo());
1134:       assertFalse(node2.isAssignAdd());
1135:       assertFalse(node2.isDefaultCase());
1136:       assertEquals((-1), node2.getCharno());
1137:       assertFalse(node2.isInc());
1138:       assertFalse(node2.isString());
1139:       assertFalse(node2.isBreak());
1140:       assertFalse(node2.isSwitch());
1141:       assertFalse(node2.isComma());
1142:       assertTrue(node2.hasChildren());
1143:       assertFalse(node2.isThis());
1144:       assertTrue(node2.isDec());
1145:       assertFalse(node2.isGetProp());
1146:       assertFalse(node2.isGetterDef());
1147:       assertEquals(1, node2.getChildCount());
1148:       assertFalse(node2.isInstanceOf());
1149:       assertFalse(node2.isFor());
1150:       assertEquals(103, node2.getType());
1151:       assertFalse(node2.isCase());
1152:       assertFalse(node2.isHook());
1153:       assertTrue(node2.hasOneChild());
1154:       assertFalse(node2.isTry());
1155:       assertFalse(node2.isDebugger());
1156:       assertFalse(node2.isRegExp());
1157:       assertFalse(node2.isNot());
1158:       assertFalse(node2.isFunction());
1159:       assertFalse(node2.isWith());
1160:       assertFalse(node2.isObjectLit());
1161:       assertFalse(node2.isAnd());
1162:       assertFalse(node2.isCatch());
1163:       assertFalse(node2.isCast());
1164:       assertFalse(node2.isIf());
1165:       assertFalse(node2.isNE());
1166:       assertFalse(node2.isSetterDef());
1167:       assertFalse(node2.isIn());
1168:       assertFalse(node2.isFalse());
1169:       assertFalse(node2.isThrow());
1170:       assertFalse(node0.equals((Object)node1));
1171:       assertFalse(node1.equals((Object)node0));
1172:       assertFalse(node2.equals((Object)node0));
1173:       assertFalse(node2.equals((Object)node1));
1174:       
1175:       Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
1176:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1177:       assertEquals(12, Node.COLUMN_BITS);
1178:       assertEquals(46, Node.IS_NAMESPACE);
1179:       assertEquals(1, Node.DECR_FLAG);
1180:       assertEquals(37, Node.OPT_ARG_NAME);
1181:       assertEquals(49, Node.DIRECT_EVAL);
1182:       assertEquals(32, Node.INCRDECR_PROP);
1183:       assertEquals(56, Node.CHANGE_TIME);
1184:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1185:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1186:       assertEquals(29, Node.JSDOC_INFO_PROP);
1187:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1188:       assertEquals(52, Node.LENGTH);
1189:       assertEquals(40, Node.ORIGINALNAME_PROP);
1190:       assertEquals(53, Node.INPUT_ID);
1191:       assertEquals(54, Node.SLASH_V);
1192:       assertEquals(57, Node.LAST_PROP);
1193:       assertEquals(47, Node.IS_DISPATCHER);
1194:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1195:       assertEquals(2, Node.POST_FLAG);
1196:       assertEquals(30, Node.VAR_ARGS_NAME);
1197:       assertEquals(4095, Node.COLUMN_MASK);
1198:       assertEquals(55, Node.INFERRED_FUNCTION);
1199:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1200:       assertEquals(48, Node.DIRECTIVES);
1201:       assertEquals(43, Node.IS_CONSTANT_NAME);
1202:       assertEquals(36, Node.QUOTED_PROP);
1203:       assertEquals(39, Node.EMPTY_BLOCK);
1204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1205:       assertEquals(8, Node.FLAG_NO_THROWS);
1206:       assertEquals(50, Node.FREE_CALL);
1207:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1208:       assertEquals(57, Node.REFLECTED_OBJECT);
1209:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1210:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1211:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1212:       assertEquals(49, Node.DIRECT_EVAL);
1213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1214:       assertEquals(12, Node.COLUMN_BITS);
1215:       assertEquals(30, Node.VAR_ARGS_NAME);
1216:       assertEquals(46, Node.IS_NAMESPACE);
1217:       assertEquals(54, Node.SLASH_V);
1218:       assertEquals(37, Node.OPT_ARG_NAME);
1219:       assertEquals(29, Node.JSDOC_INFO_PROP);
1220:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1221:       assertEquals(40, Node.ORIGINALNAME_PROP);
1222:       assertEquals(56, Node.CHANGE_TIME);
1223:       assertEquals(8, Node.FLAG_NO_THROWS);
1224:       assertEquals(47, Node.IS_DISPATCHER);
1225:       assertEquals(57, Node.REFLECTED_OBJECT);
1226:       assertEquals(2, Node.POST_FLAG);
1227:       assertEquals(53, Node.INPUT_ID);
1228:       assertEquals(52, Node.LENGTH);
1229:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1230:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1231:       assertEquals(39, Node.EMPTY_BLOCK);
1232:       assertEquals(57, Node.LAST_PROP);
1233:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1234:       assertEquals(55, Node.INFERRED_FUNCTION);
1235:       assertEquals(36, Node.QUOTED_PROP);
1236:       assertEquals(4095, Node.COLUMN_MASK);
1237:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1238:       assertEquals(43, Node.IS_CONSTANT_NAME);
1239:       assertEquals(48, Node.DIRECTIVES);
1240:       assertEquals(50, Node.FREE_CALL);
1241:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1242:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1243:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1244:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1246:       assertEquals(32, Node.INCRDECR_PROP);
1247:       assertEquals(1, Node.DECR_FLAG);
1248:       assertNotSame(node1, node2);
1249:       assertNotNull(node_FileLevelJsDocBuilder0);
1250:       assertFalse(node0.isFunction());
1251:       assertFalse(node0.isTrue());
1252:       assertFalse(node0.isDebugger());
1253:       assertFalse(node0.isRegExp());
1254:       assertFalse(node0.isTry());
1255:       assertFalse(node0.isVoid());
1256:       assertFalse(node0.isArrayLit());
1257:       assertFalse(node0.isDelProp());
1258:       assertFalse(node0.isIf());
1259:       assertFalse(node0.isNE());
1260:       assertEquals(304, node0.getCharno());
1261:       assertFalse(node0.isSetterDef());
1262:       assertFalse(node0.isParamList());
1263:       assertFalse(node0.isIn());
1264:       assertFalse(node0.isEmpty());
1265:       assertEquals(0, node0.getChildCount());
1266:       assertFalse(node0.isDefaultCase());
1267:       assertEquals(41, node0.getLineno());
1268:       assertFalse(node0.isVar());
1269:       assertFalse(node0.isInc());
1270:       assertFalse(node0.isSwitch());
1271:       assertEquals(168240, node0.getSourcePosition());
1272:       assertFalse(node0.isStringKey());
1273:       assertFalse(node0.isThis());
1274:       assertFalse(node0.isNumber());
1275:       assertFalse(node0.isGetterDef());
1276:       assertFalse(node0.isInstanceOf());
1277:       assertFalse(node0.isCatch());
1278:       assertFalse(node0.hasMoreThanOneChild());
1279:       assertFalse(node0.isCase());
1280:       assertFalse(node0.hasOneChild());
1281:       assertEquals((-2740), node0.getType());
1282:       assertFalse(node0.isBlock());
1283:       assertFalse(node0.isHook());
1284:       assertFalse(node0.isFor());
1285:       assertFalse(node0.isExprResult());
1286:       assertFalse(node0.isWith());
1287:       assertFalse(node0.isCast());
1288:       assertFalse(node0.isScript());
1289:       assertFalse(node0.isObjectLit());
1290:       assertFalse(node0.isAnd());
1291:       assertFalse(node0.isLabelName());
1292:       assertFalse(node0.isNot());
1293:       assertFalse(node0.isOr());
1294:       assertFalse(node0.isContinue());
1295:       assertFalse(node0.isFalse());
1296:       assertFalse(node0.isDo());
1297:       assertFalse(node0.isLabel());
1298:       assertFalse(node0.isAssignAdd());
1299:       assertFalse(node0.isThrow());
1300:       assertFalse(node0.isNew());
1301:       assertFalse(node0.isString());
1302:       assertFalse(node0.isAdd());
1303:       assertFalse(node0.isCall());
1304:       assertFalse(node0.isName());
1305:       assertFalse(node0.isNull());
1306:       assertFalse(node0.isComma());
1307:       assertFalse(node0.isGetProp());
1308:       assertFalse(node0.isDec());
1309:       assertFalse(node0.isTypeOf());
1310:       assertFalse(node0.isBreak());
1311:       assertFalse(node0.isGetElem());
1312:       assertFalse(node0.isAssign());
1313:       assertFalse(node0.isReturn());
1314:       assertFalse(node0.isWhile());
1315:       assertFalse(node0.hasChildren());
1316:       assertFalse(node1.isTry());
1317:       assertFalse(node1.isArrayLit());
1318:       assertFalse(node1.isVoid());
1319:       assertFalse(node1.isFor());
1320:       assertFalse(node1.isTrue());
1321:       assertFalse(node1.isIf());
1322:       assertFalse(node1.isRegExp());
1323:       assertFalse(node1.isDelProp());
1324:       assertTrue(node1.hasOneChild());
1325:       assertFalse(node1.isFunction());
1326:       assertFalse(node1.isCatch());
1327:       assertTrue(node1.hasChildren());
1328:       assertFalse(node1.isIn());
1329:       assertTrue(node1.isDec());
1330:       assertFalse(node1.isNE());
1331:       assertFalse(node1.isDefaultCase());
1332:       assertFalse(node1.isNull());
1333:       assertFalse(node1.isSetterDef());
1334:       assertFalse(node1.isInc());
1335:       assertFalse(node1.isEmpty());
1336:       assertFalse(node1.isHook());
1337:       assertFalse(node1.isNew());
1338:       assertEquals((-1), node1.getCharno());
1339:       assertFalse(node1.isStringKey());
1340:       assertFalse(node1.isBlock());
1341:       assertFalse(node1.isVar());
1342:       assertFalse(node1.isSwitch());
1343:       assertFalse(node1.hasMoreThanOneChild());
1344:       assertEquals(1, node1.getChildCount());
1345:       assertFalse(node1.isThis());
1346:       assertFalse(node1.isParamList());
1347:       assertFalse(node1.isNumber());
1348:       assertFalse(node1.isGetterDef());
1349:       assertFalse(node1.isScript());
1350:       assertFalse(node1.isCase());
1351:       assertFalse(node1.isTypeOf());
1352:       assertFalse(node1.isLabelName());
1353:       assertFalse(node1.isAssign());
1354:       assertFalse(node1.isExprResult());
1355:       assertFalse(node1.isGetElem());
1356:       assertFalse(node1.isCast());
1357:       assertFalse(node1.isWith());
1358:       assertFalse(node1.isInstanceOf());
1359:       assertFalse(node1.isLabel());
1360:       assertFalse(node1.isOr());
1361:       assertEquals((-1), node1.getLineno());
1362:       assertFalse(node1.isAssignAdd());
1363:       assertFalse(node1.isDo());
1364:       assertFalse(node1.isAdd());
1365:       assertFalse(node1.isThrow());
1366:       assertFalse(node1.isName());
1367:       assertFalse(node1.isBreak());
1368:       assertEquals(103, node1.getType());
1369:       assertFalse(node1.isComma());
1370:       assertFalse(node1.isFalse());
1371:       assertFalse(node1.isCall());
1372:       assertFalse(node1.isContinue());
1373:       assertFalse(node1.isReturn());
1374:       assertFalse(node1.isWhile());
1375:       assertFalse(node1.isAnd());
1376:       assertFalse(node1.isNot());
1377:       assertEquals((-1), node1.getSourcePosition());
1378:       assertFalse(node1.isDebugger());
1379:       assertFalse(node1.isGetProp());
1380:       assertFalse(node1.isObjectLit());
1381:       assertFalse(node1.isString());
1382:       assertFalse(node0.equals((Object)node2));
1383:       assertFalse(node0.equals((Object)node1));
1384:       assertFalse(node1.equals((Object)node2));
1385:       assertFalse(node1.equals((Object)node0));
1386:       
1387:       node2.type = 1332;
1388:       assertFalse(node0.isFunction());
1389:       assertFalse(node0.isTrue());
1390:       assertFalse(node0.isDebugger());
1391:       assertFalse(node0.isRegExp());
1392:       assertFalse(node0.isTry());
1393:       assertFalse(node0.isVoid());
1394:       assertFalse(node0.isArrayLit());
1395:       assertFalse(node0.isDelProp());
1396:       assertFalse(node0.isIf());
1397:       assertFalse(node0.isNE());
1398:       assertEquals(304, node0.getCharno());
1399:       assertFalse(node0.isSetterDef());
1400:       assertFalse(node0.isParamList());
1401:       assertFalse(node0.isIn());
1402:       assertFalse(node0.isEmpty());
1403:       assertEquals(0, node0.getChildCount());
1404:       assertFalse(node0.isDefaultCase());
1405:       assertEquals(41, node0.getLineno());
1406:       assertFalse(node0.isVar());
1407:       assertFalse(node0.isInc());
1408:       assertFalse(node0.isSwitch());
1409:       assertEquals(168240, node0.getSourcePosition());
1410:       assertFalse(node0.isStringKey());
1411:       assertFalse(node0.isThis());
1412:       assertFalse(node0.isNumber());
1413:       assertFalse(node0.isGetterDef());
1414:       assertFalse(node0.isInstanceOf());
1415:       assertFalse(node0.isCatch());
1416:       assertFalse(node0.hasMoreThanOneChild());
1417:       assertFalse(node0.isCase());
1418:       assertFalse(node0.hasOneChild());
1419:       assertEquals((-2740), node0.getType());
1420:       assertFalse(node0.isBlock());
1421:       assertFalse(node0.isHook());
1422:       assertFalse(node0.isFor());
1423:       assertFalse(node0.isExprResult());
1424:       assertFalse(node0.isWith());
1425:       assertFalse(node0.isCast());
1426:       assertFalse(node0.isScript());
1427:       assertFalse(node0.isObjectLit());
1428:       assertFalse(node0.isAnd());
1429:       assertFalse(node0.isLabelName());
1430:       assertFalse(node0.isNot());
1431:       assertFalse(node0.isOr());
1432:       assertFalse(node0.isContinue());
1433:       assertFalse(node0.isFalse());
1434:       assertFalse(node0.isDo());
1435:       assertFalse(node0.isLabel());
1436:       assertFalse(node0.isAssignAdd());
1437:       assertFalse(node0.isThrow());
1438:       assertFalse(node0.isNew());
1439:       assertFalse(node0.isString());
1440:       assertFalse(node0.isAdd());
1441:       assertFalse(node0.isCall());
1442:       assertFalse(node0.isName());
1443:       assertFalse(node0.isNull());
1444:       assertFalse(node0.isComma());
1445:       assertFalse(node0.isGetProp());
1446:       assertFalse(node0.isDec());
1447:       assertFalse(node0.isTypeOf());
1448:       assertFalse(node0.isBreak());
1449:       assertFalse(node0.isGetElem());
1450:       assertFalse(node0.isAssign());
1451:       assertFalse(node0.isReturn());
1452:       assertFalse(node0.isWhile());
1453:       assertFalse(node0.hasChildren());
1454:       assertFalse(node1.isTry());
1455:       assertFalse(node1.isArrayLit());
1456:       assertFalse(node1.isVoid());
1457:       assertFalse(node1.isFor());
1458:       assertFalse(node1.isTrue());
1459:       assertFalse(node1.isIf());
1460:       assertFalse(node1.isRegExp());
1461:       assertFalse(node1.isDelProp());
1462:       assertTrue(node1.hasOneChild());
1463:       assertFalse(node1.isFunction());
1464:       assertFalse(node1.isCatch());
1465:       assertTrue(node1.hasChildren());
1466:       assertFalse(node1.isIn());
1467:       assertTrue(node1.isDec());
1468:       assertFalse(node1.isNE());
1469:       assertFalse(node1.isDefaultCase());
1470:       assertFalse(node1.isNull());
1471:       assertFalse(node1.isSetterDef());
1472:       assertFalse(node1.isInc());
1473:       assertFalse(node1.isEmpty());
1474:       assertFalse(node1.isHook());
1475:       assertFalse(node1.isNew());
1476:       assertEquals((-1), node1.getCharno());
1477:       assertFalse(node1.isStringKey());
1478:       assertFalse(node1.isBlock());
1479:       assertFalse(node1.isVar());
1480:       assertFalse(node1.isSwitch());
1481:       assertFalse(node1.hasMoreThanOneChild());
1482:       assertEquals(1, node1.getChildCount());
1483:       assertFalse(node1.isThis());
1484:       assertFalse(node1.isParamList());
1485:       assertFalse(node1.isNumber());
1486:       assertFalse(node1.isGetterDef());
1487:       assertFalse(node1.isScript());
1488:       assertFalse(node1.isCase());
1489:       assertFalse(node1.isTypeOf());
1490:       assertFalse(node1.isLabelName());
1491:       assertFalse(node1.isAssign());
1492:       assertFalse(node1.isExprResult());
1493:       assertFalse(node1.isGetElem());
1494:       assertFalse(node1.isCast());
1495:       assertFalse(node1.isWith());
1496:       assertFalse(node1.isInstanceOf());
1497:       assertFalse(node1.isLabel());
1498:       assertFalse(node1.isOr());
1499:       assertEquals((-1), node1.getLineno());
1500:       assertFalse(node1.isAssignAdd());
1501:       assertFalse(node1.isDo());
1502:       assertFalse(node1.isAdd());
1503:       assertFalse(node1.isThrow());
1504:       assertFalse(node1.isName());
1505:       assertFalse(node1.isBreak());
1506:       assertEquals(103, node1.getType());
1507:       assertFalse(node1.isComma());
1508:       assertFalse(node1.isFalse());
1509:       assertFalse(node1.isCall());
1510:       assertFalse(node1.isContinue());
1511:       assertFalse(node1.isReturn());
1512:       assertFalse(node1.isWhile());
1513:       assertFalse(node1.isAnd());
1514:       assertFalse(node1.isNot());
1515:       assertEquals((-1), node1.getSourcePosition());
1516:       assertFalse(node1.isDebugger());
1517:       assertFalse(node1.isGetProp());
1518:       assertFalse(node1.isObjectLit());
1519:       assertFalse(node1.isString());
1520:       assertFalse(node2.isNew());
1521:       assertFalse(node2.isAdd());
1522:       assertFalse(node2.isBlock());
1523:       assertFalse(node2.isCall());
1524:       assertFalse(node2.isContinue());
1525:       assertFalse(node2.isStringKey());
1526:       assertEquals((-1), node2.getLineno());
1527:       assertFalse(node2.isName());
1528:       assertFalse(node2.isParamList());
1529:       assertFalse(node2.isReturn());
1530:       assertFalse(node2.isDec());
1531:       assertEquals((-1), node2.getSourcePosition());
1532:       assertFalse(node2.isAssign());
1533:       assertFalse(node2.isTypeOf());
1534:       assertFalse(node2.isNumber());
1535:       assertFalse(node2.hasMoreThanOneChild());
1536:       assertFalse(node2.isWhile());
1537:       assertFalse(node2.isVoid());
1538:       assertFalse(node2.isTrue());
1539:       assertFalse(node2.isExprResult());
1540:       assertFalse(node2.isScript());
1541:       assertFalse(node2.isArrayLit());
1542:       assertFalse(node2.isGetElem());
1543:       assertFalse(node2.isDelProp());
1544:       assertFalse(node2.isLabelName());
1545:       assertFalse(node2.isNull());
1546:       assertFalse(node2.isLabel());
1547:       assertFalse(node2.isOr());
1548:       assertFalse(node2.isEmpty());
1549:       assertFalse(node2.isVar());
1550:       assertFalse(node2.isDo());
1551:       assertFalse(node2.isAssignAdd());
1552:       assertFalse(node2.isDefaultCase());
1553:       assertEquals((-1), node2.getCharno());
1554:       assertFalse(node2.isInc());
1555:       assertFalse(node2.isString());
1556:       assertFalse(node2.isBreak());
1557:       assertFalse(node2.isSwitch());
1558:       assertFalse(node2.isComma());
1559:       assertTrue(node2.hasChildren());
1560:       assertFalse(node2.isThis());
1561:       assertFalse(node2.isGetProp());
1562:       assertFalse(node2.isGetterDef());
1563:       assertEquals(1, node2.getChildCount());
1564:       assertFalse(node2.isInstanceOf());
1565:       assertFalse(node2.isFor());
1566:       assertFalse(node2.isCase());
1567:       assertFalse(node2.isHook());
1568:       assertTrue(node2.hasOneChild());
1569:       assertFalse(node2.isTry());
1570:       assertFalse(node2.isDebugger());
1571:       assertFalse(node2.isRegExp());
1572:       assertFalse(node2.isNot());
1573:       assertFalse(node2.isFunction());
1574:       assertFalse(node2.isWith());
1575:       assertFalse(node2.isObjectLit());
1576:       assertFalse(node2.isAnd());
1577:       assertFalse(node2.isCatch());
1578:       assertFalse(node2.isCast());
1579:       assertFalse(node2.isIf());
1580:       assertFalse(node2.isNE());
1581:       assertFalse(node2.isSetterDef());
1582:       assertFalse(node2.isIn());
1583:       assertEquals(1332, node2.getType());
1584:       assertFalse(node2.isFalse());
1585:       assertFalse(node2.isThrow());
1586:       
1587:       // Undeclared exception!
1588:       try { 
1589:         node1.addChildBefore((Node) null, node2);
1590:         fail("Expecting exception: IllegalArgumentException");
1591:       
1592:       } catch(IllegalArgumentException e) {
1593:          //
1594:          // The existing child node of the parent should not be null.
1595:          //
1596:          verifyException("com.google.common.base.Preconditions", e);
1597:       }
1598:   }
1599: }
RegularFileObject[/tmp/EvoSuite_81_1628255662823/com/google/javascript/rhino/Node_81_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:14:23 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_81_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_81_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_81_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.common.collect.Platform",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.JSDocInfo$Marker",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.Iterators$12",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.JSTypeNative"
371:     );
372:   }
373: }

[MASTER] 13:14:23.253 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-2740), "8MDO8S5lvaWo9)", 41, 304);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(node0);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(41, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals((-2740), node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());

Node node1 = new Node(103, node0, node0);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotNull(node1);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(41, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals((-2740), node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertTrue(node1.isDec());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertEquals(103, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node0.children();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertNotNull(iterable0);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(41, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals((-2740), node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));

boolean boolean0 = node1.isNoSideEffectsCall();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(41, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals((-2740), node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertTrue(node1.isDec());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertEquals(103, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);

boolean boolean1 = node1.isLocalResultCall();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(41, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals((-2740), node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertTrue(node1.isDec());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertEquals(103, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

Node node2 = node1.cloneTree();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(41, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals((-2740), node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertTrue(node1.isDec());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertEquals(103, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isReturn());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isComma());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertTrue(node2.isDec());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFor());
assertEquals(103, node2.getType());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertTrue(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));

Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertNotSame(node1, node2);
assertNotNull(node_FileLevelJsDocBuilder0);
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(41, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals((-2740), node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertTrue(node1.isDec());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertEquals(103, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));

node2.type = 1332;
assertFalse(node0.isFunction());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isRegExp());
assertFalse(node0.isTry());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertFalse(node0.isIn());
assertFalse(node0.isEmpty());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDefaultCase());
assertEquals(41, node0.getLineno());
assertFalse(node0.isVar());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isStringKey());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCase());
assertFalse(node0.hasOneChild());
assertEquals((-2740), node0.getType());
assertFalse(node0.isBlock());
assertFalse(node0.isHook());
assertFalse(node0.isFor());
assertFalse(node0.isExprResult());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertFalse(node0.isScript());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isNot());
assertFalse(node0.isOr());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isDo());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isThrow());
assertFalse(node0.isNew());
assertFalse(node0.isString());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isComma());
assertFalse(node0.isGetProp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBreak());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isVoid());
assertFalse(node1.isFor());
assertFalse(node1.isTrue());
assertFalse(node1.isIf());
assertFalse(node1.isRegExp());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isFunction());
assertFalse(node1.isCatch());
assertTrue(node1.hasChildren());
assertFalse(node1.isIn());
assertTrue(node1.isDec());
assertFalse(node1.isNE());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isInc());
assertFalse(node1.isEmpty());
assertFalse(node1.isHook());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isStringKey());
assertFalse(node1.isBlock());
assertFalse(node1.isVar());
assertFalse(node1.isSwitch());
assertFalse(node1.hasMoreThanOneChild());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isParamList());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isScript());
assertFalse(node1.isCase());
assertFalse(node1.isTypeOf());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isExprResult());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isWith());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isLabel());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isThrow());
assertFalse(node1.isName());
assertFalse(node1.isBreak());
assertEquals(103, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isCall());
assertFalse(node1.isContinue());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertFalse(node1.isObjectLit());
assertFalse(node1.isString());
assertFalse(node2.isNew());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isCall());
assertFalse(node2.isContinue());
assertFalse(node2.isStringKey());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isName());
assertFalse(node2.isParamList());
assertFalse(node2.isReturn());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isAssign());
assertFalse(node2.isTypeOf());
assertFalse(node2.isNumber());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWhile());
assertFalse(node2.isVoid());
assertFalse(node2.isTrue());
assertFalse(node2.isExprResult());
assertFalse(node2.isScript());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertFalse(node2.isLabelName());
assertFalse(node2.isNull());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertFalse(node2.isEmpty());
assertFalse(node2.isVar());
assertFalse(node2.isDo());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDefaultCase());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isString());
assertFalse(node2.isBreak());
assertFalse(node2.isSwitch());
assertFalse(node2.isComma());
assertTrue(node2.hasChildren());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isGetterDef());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isFor());
assertFalse(node2.isCase());
assertFalse(node2.isHook());
assertTrue(node2.hasOneChild());
assertFalse(node2.isTry());
assertFalse(node2.isDebugger());
assertFalse(node2.isRegExp());
assertFalse(node2.isNot());
assertFalse(node2.isFunction());
assertFalse(node2.isWith());
assertFalse(node2.isObjectLit());
assertFalse(node2.isAnd());
assertFalse(node2.isCatch());
assertFalse(node2.isCast());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertFalse(node2.isIn());
assertEquals(1332, node2.getType());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());

node1.addChildBefore((Node) null, node2);

[MASTER] 13:14:30.715 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_107_1628255670671/com/google/javascript/rhino/Node_107_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_107_1628255670671/com/google/javascript/rhino/Node_107_tmp__ESTest_scaffolding.java]]
[MASTER] 13:14:30.715 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:30.715 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:30.716 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 439
[MASTER] 13:14:30.717 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_107_1628255670671/com/google/javascript/rhino/Node_107_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:14:30 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_107_tmp__ESTest extends Node_107_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString((-2740), "8MDO8S5lvaWo9)", 41, 304);
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(36, Node.QUOTED_PROP);
25:       assertEquals(43, Node.IS_CONSTANT_NAME);
26:       assertEquals(56, Node.CHANGE_TIME);
27:       assertEquals(37, Node.OPT_ARG_NAME);
28:       assertEquals(32, Node.INCRDECR_PROP);
29:       assertEquals(46, Node.IS_NAMESPACE);
30:       assertEquals(4095, Node.COLUMN_MASK);
31:       assertEquals(12, Node.COLUMN_BITS);
32:       assertEquals(51, Node.STATIC_SOURCE_FILE);
33:       assertEquals(50, Node.FREE_CALL);
34:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
35:       assertEquals(1, Node.DECR_FLAG);
36:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(54, Node.SLASH_V);
39:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
40:       assertEquals(57, Node.REFLECTED_OBJECT);
41:       assertEquals(30, Node.VAR_ARGS_NAME);
42:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
43:       assertEquals(49, Node.DIRECT_EVAL);
44:       assertEquals(40, Node.ORIGINALNAME_PROP);
45:       assertEquals(48, Node.DIRECTIVES);
46:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
47:       assertEquals(8, Node.FLAG_NO_THROWS);
48:       assertEquals(2, Node.POST_FLAG);
49:       assertEquals(47, Node.IS_DISPATCHER);
50:       assertEquals(29, Node.JSDOC_INFO_PROP);
51:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
52:       assertEquals(57, Node.LAST_PROP);
53:       assertEquals(55, Node.INFERRED_FUNCTION);
54:       assertEquals(39, Node.EMPTY_BLOCK);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(15, Node.NO_SIDE_EFFECTS);
57:       assertEquals(53, Node.INPUT_ID);
58:       assertNotNull(node0);
59:       assertFalse(node0.isComma());
60:       assertFalse(node0.isBreak());
61:       assertFalse(node0.isThis());
62:       assertFalse(node0.isGetProp());
63:       assertFalse(node0.isThrow());
64:       assertFalse(node0.isInstanceOf());
65:       assertFalse(node0.isHook());
66:       assertFalse(node0.isWith());
67:       assertFalse(node0.isFalse());
68:       assertFalse(node0.isScript());
69:       assertFalse(node0.isCase());
70:       assertFalse(node0.isAnd());
71:       assertFalse(node0.isSwitch());
72:       assertFalse(node0.hasOneChild());
73:       assertFalse(node0.isNot());
74:       assertFalse(node0.isObjectLit());
75:       assertFalse(node0.isString());
76:       assertFalse(node0.isNumber());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isDec());
79:       assertFalse(node0.hasChildren());
80:       assertEquals(304, node0.getCharno());
81:       assertFalse(node0.isLabelName());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isDelProp());
84:       assertFalse(node0.isArrayLit());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isReturn());
87:       assertFalse(node0.isAssign());
88:       assertFalse(node0.isLabel());
89:       assertFalse(node0.isTrue());
90:       assertFalse(node0.isExprResult());
91:       assertFalse(node0.isDo());
92:       assertFalse(node0.isNew());
93:       assertFalse(node0.isVoid());
94:       assertFalse(node0.isDefaultCase());
95:       assertFalse(node0.isEmpty());
96:       assertFalse(node0.isAdd());
97:       assertFalse(node0.isOr());
98:       assertFalse(node0.isNull());
99:       assertFalse(node0.isParamList());
100:       assertFalse(node0.isSetterDef());
101:       assertEquals(168240, node0.getSourcePosition());
102:       assertFalse(node0.isName());
103:       assertFalse(node0.isStringKey());
104:       assertFalse(node0.isVar());
105:       assertFalse(node0.isCatch());
106:       assertEquals(0, node0.getChildCount());
107:       assertFalse(node0.isCall());
108:       assertEquals(41, node0.getLineno());
109:       assertFalse(node0.isRegExp());
110:       assertFalse(node0.isDebugger());
111:       assertFalse(node0.isBlock());
112:       assertFalse(node0.isTry());
113:       assertFalse(node0.isWhile());
114:       assertEquals((-2740), node0.getType());
115:       assertFalse(node0.isGetterDef());
116:       assertFalse(node0.isNE());
117:       assertFalse(node0.isFor());
118:       assertFalse(node0.isIf());
119:       assertFalse(node0.isCast());
120:       assertFalse(node0.isContinue());
121:       assertFalse(node0.isFunction());
122:       assertFalse(node0.hasMoreThanOneChild());
123:       assertFalse(node0.isInc());
124:       assertFalse(node0.isIn());
125:       
126:       Node node1 = new Node(103, node0, node0);
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(36, Node.QUOTED_PROP);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(56, Node.CHANGE_TIME);
132:       assertEquals(37, Node.OPT_ARG_NAME);
133:       assertEquals(32, Node.INCRDECR_PROP);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(4095, Node.COLUMN_MASK);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(51, Node.STATIC_SOURCE_FILE);
138:       assertEquals(50, Node.FREE_CALL);
139:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
140:       assertEquals(1, Node.DECR_FLAG);
141:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(54, Node.SLASH_V);
144:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(30, Node.VAR_ARGS_NAME);
147:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
148:       assertEquals(49, Node.DIRECT_EVAL);
149:       assertEquals(40, Node.ORIGINALNAME_PROP);
150:       assertEquals(48, Node.DIRECTIVES);
151:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
152:       assertEquals(8, Node.FLAG_NO_THROWS);
153:       assertEquals(2, Node.POST_FLAG);
154:       assertEquals(47, Node.IS_DISPATCHER);
155:       assertEquals(29, Node.JSDOC_INFO_PROP);
156:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
157:       assertEquals(57, Node.LAST_PROP);
158:       assertEquals(55, Node.INFERRED_FUNCTION);
159:       assertEquals(39, Node.EMPTY_BLOCK);
160:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
162:       assertEquals(53, Node.INPUT_ID);
163:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
164:       assertEquals(43, Node.IS_CONSTANT_NAME);
165:       assertEquals(36, Node.QUOTED_PROP);
166:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
167:       assertEquals(4095, Node.COLUMN_MASK);
168:       assertEquals(48, Node.DIRECTIVES);
169:       assertEquals(37, Node.OPT_ARG_NAME);
170:       assertEquals(2, Node.POST_FLAG);
171:       assertEquals(8, Node.FLAG_NO_THROWS);
172:       assertEquals(56, Node.CHANGE_TIME);
173:       assertEquals(47, Node.IS_DISPATCHER);
174:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
175:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
176:       assertEquals(15, Node.NO_SIDE_EFFECTS);
177:       assertEquals(55, Node.INFERRED_FUNCTION);
178:       assertEquals(39, Node.EMPTY_BLOCK);
179:       assertEquals(29, Node.JSDOC_INFO_PROP);
180:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
181:       assertEquals(53, Node.INPUT_ID);
182:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
183:       assertEquals(52, Node.LENGTH);
184:       assertEquals(57, Node.LAST_PROP);
185:       assertEquals(54, Node.SLASH_V);
186:       assertEquals(57, Node.REFLECTED_OBJECT);
187:       assertEquals(30, Node.VAR_ARGS_NAME);
188:       assertEquals(49, Node.DIRECT_EVAL);
189:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
190:       assertEquals(40, Node.ORIGINALNAME_PROP);
191:       assertEquals(32, Node.INCRDECR_PROP);
192:       assertEquals(51, Node.STATIC_SOURCE_FILE);
193:       assertEquals(12, Node.COLUMN_BITS);
194:       assertEquals(46, Node.IS_NAMESPACE);
195:       assertEquals(1, Node.DECR_FLAG);
196:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
197:       assertEquals(50, Node.FREE_CALL);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertNotNull(node1);
200:       assertFalse(node0.isComma());
201:       assertFalse(node0.isBreak());
202:       assertFalse(node0.isThis());
203:       assertFalse(node0.isGetProp());
204:       assertFalse(node0.isThrow());
205:       assertFalse(node0.isInstanceOf());
206:       assertFalse(node0.isHook());
207:       assertFalse(node0.isWith());
208:       assertFalse(node0.isFalse());
209:       assertFalse(node0.isScript());
210:       assertFalse(node0.isCase());
211:       assertFalse(node0.isAnd());
212:       assertFalse(node0.isSwitch());
213:       assertFalse(node0.hasOneChild());
214:       assertFalse(node0.isNot());
215:       assertFalse(node0.isObjectLit());
216:       assertFalse(node0.isString());
217:       assertFalse(node0.isNumber());
218:       assertFalse(node0.isTypeOf());
219:       assertFalse(node0.isDec());
220:       assertFalse(node0.hasChildren());
221:       assertEquals(304, node0.getCharno());
222:       assertFalse(node0.isLabelName());
223:       assertFalse(node0.isAssignAdd());
224:       assertFalse(node0.isDelProp());
225:       assertFalse(node0.isArrayLit());
226:       assertFalse(node0.isGetElem());
227:       assertFalse(node0.isReturn());
228:       assertFalse(node0.isAssign());
229:       assertFalse(node0.isLabel());
230:       assertFalse(node0.isTrue());
231:       assertFalse(node0.isExprResult());
232:       assertFalse(node0.isDo());
233:       assertFalse(node0.isNew());
234:       assertFalse(node0.isVoid());
235:       assertFalse(node0.isDefaultCase());
236:       assertFalse(node0.isEmpty());
237:       assertFalse(node0.isAdd());
238:       assertFalse(node0.isOr());
239:       assertFalse(node0.isNull());
240:       assertFalse(node0.isParamList());
241:       assertFalse(node0.isSetterDef());
242:       assertEquals(168240, node0.getSourcePosition());
243:       assertFalse(node0.isName());
244:       assertFalse(node0.isStringKey());
245:       assertFalse(node0.isVar());
246:       assertFalse(node0.isCatch());
247:       assertEquals(0, node0.getChildCount());
248:       assertFalse(node0.isCall());
249:       assertEquals(41, node0.getLineno());
250:       assertFalse(node0.isRegExp());
251:       assertFalse(node0.isDebugger());
252:       assertFalse(node0.isBlock());
253:       assertFalse(node0.isTry());
254:       assertFalse(node0.isWhile());
255:       assertEquals((-2740), node0.getType());
256:       assertFalse(node0.isGetterDef());
257:       assertFalse(node0.isNE());
258:       assertFalse(node0.isFor());
259:       assertFalse(node0.isIf());
260:       assertFalse(node0.isCast());
261:       assertFalse(node0.isContinue());
262:       assertFalse(node0.isFunction());
263:       assertFalse(node0.hasMoreThanOneChild());
264:       assertFalse(node0.isInc());
265:       assertFalse(node0.isIn());
266:       assertFalse(node1.isBreak());
267:       assertFalse(node1.isThrow());
268:       assertFalse(node1.isGetProp());
269:       assertFalse(node1.isHook());
270:       assertFalse(node1.isInstanceOf());
271:       assertFalse(node1.isThis());
272:       assertFalse(node1.isComma());
273:       assertFalse(node1.isFalse());
274:       assertFalse(node1.isWith());
275:       assertFalse(node1.isExprResult());
276:       assertFalse(node1.isInc());
277:       assertFalse(node1.isIn());
278:       assertFalse(node1.isDelProp());
279:       assertTrue(node1.hasOneChild());
280:       assertFalse(node1.isGetElem());
281:       assertFalse(node1.isReturn());
282:       assertFalse(node1.isCast());
283:       assertFalse(node1.isFunction());
284:       assertFalse(node1.isContinue());
285:       assertFalse(node1.isTypeOf());
286:       assertFalse(node1.isAssign());
287:       assertFalse(node1.isWhile());
288:       assertFalse(node1.isString());
289:       assertEquals(103, node1.getType());
290:       assertFalse(node1.isAnd());
291:       assertFalse(node1.isObjectLit());
292:       assertFalse(node1.isDebugger());
293:       assertEquals((-1), node1.getSourcePosition());
294:       assertFalse(node1.isNot());
295:       assertFalse(node1.isNull());
296:       assertFalse(node1.isStringKey());
297:       assertFalse(node1.isParamList());
298:       assertFalse(node1.isCall());
299:       assertFalse(node1.isSetterDef());
300:       assertFalse(node1.isName());
301:       assertFalse(node1.isBlock());
302:       assertFalse(node1.isCatch());
303:       assertFalse(node1.isVar());
304:       assertFalse(node1.isDefaultCase());
305:       assertFalse(node1.isNew());
306:       assertFalse(node1.isVoid());
307:       assertFalse(node1.isDo());
308:       assertFalse(node1.isAdd());
309:       assertFalse(node1.isTrue());
310:       assertFalse(node1.isOr());
311:       assertFalse(node1.isIf());
312:       assertFalse(node1.isFor());
313:       assertFalse(node1.isEmpty());
314:       assertFalse(node1.isNE());
315:       assertFalse(node1.isArrayLit());
316:       assertFalse(node1.isLabelName());
317:       assertEquals((-1), node1.getLineno());
318:       assertEquals(1, node1.getChildCount());
319:       assertTrue(node1.isDec());
320:       assertFalse(node1.isLabel());
321:       assertFalse(node1.isAssignAdd());
322:       assertTrue(node1.hasChildren());
323:       assertFalse(node1.hasMoreThanOneChild());
324:       assertFalse(node1.isRegExp());
325:       assertFalse(node1.isScript());
326:       assertFalse(node1.isSwitch());
327:       assertFalse(node1.isCase());
328:       assertFalse(node1.isTry());
329:       assertEquals((-1), node1.getCharno());
330:       assertFalse(node1.isNumber());
331:       assertFalse(node1.isGetterDef());
332:       assertFalse(node1.equals((Object)node0));
333:       
334:       Iterable<Node> iterable0 = node0.children();
335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
336:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
337:       assertEquals(36, Node.QUOTED_PROP);
338:       assertEquals(43, Node.IS_CONSTANT_NAME);
339:       assertEquals(56, Node.CHANGE_TIME);
340:       assertEquals(37, Node.OPT_ARG_NAME);
341:       assertEquals(32, Node.INCRDECR_PROP);
342:       assertEquals(46, Node.IS_NAMESPACE);
343:       assertEquals(4095, Node.COLUMN_MASK);
344:       assertEquals(12, Node.COLUMN_BITS);
345:       assertEquals(51, Node.STATIC_SOURCE_FILE);
346:       assertEquals(50, Node.FREE_CALL);
347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
348:       assertEquals(1, Node.DECR_FLAG);
349:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
350:       assertEquals(52, Node.LENGTH);
351:       assertEquals(54, Node.SLASH_V);
352:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
353:       assertEquals(57, Node.REFLECTED_OBJECT);
354:       assertEquals(30, Node.VAR_ARGS_NAME);
355:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
356:       assertEquals(49, Node.DIRECT_EVAL);
357:       assertEquals(40, Node.ORIGINALNAME_PROP);
358:       assertEquals(48, Node.DIRECTIVES);
359:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
360:       assertEquals(8, Node.FLAG_NO_THROWS);
361:       assertEquals(2, Node.POST_FLAG);
362:       assertEquals(47, Node.IS_DISPATCHER);
363:       assertEquals(29, Node.JSDOC_INFO_PROP);
364:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
365:       assertEquals(57, Node.LAST_PROP);
366:       assertEquals(55, Node.INFERRED_FUNCTION);
367:       assertEquals(39, Node.EMPTY_BLOCK);
368:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
369:       assertEquals(15, Node.NO_SIDE_EFFECTS);
370:       assertEquals(53, Node.INPUT_ID);
371:       assertNotNull(iterable0);
372:       assertFalse(node0.isComma());
373:       assertFalse(node0.isBreak());
374:       assertFalse(node0.isThis());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.isThrow());
377:       assertFalse(node0.isInstanceOf());
378:       assertFalse(node0.isHook());
379:       assertFalse(node0.isWith());
380:       assertFalse(node0.isFalse());
381:       assertFalse(node0.isScript());
382:       assertFalse(node0.isCase());
383:       assertFalse(node0.isAnd());
384:       assertFalse(node0.isSwitch());
385:       assertFalse(node0.hasOneChild());
386:       assertFalse(node0.isNot());
387:       assertFalse(node0.isObjectLit());
388:       assertFalse(node0.isString());
389:       assertFalse(node0.isNumber());
390:       assertFalse(node0.isTypeOf());
391:       assertFalse(node0.isDec());
392:       assertFalse(node0.hasChildren());
393:       assertEquals(304, node0.getCharno());
394:       assertFalse(node0.isLabelName());
395:       assertFalse(node0.isAssignAdd());
396:       assertFalse(node0.isDelProp());
397:       assertFalse(node0.isArrayLit());
398:       assertFalse(node0.isGetElem());
399:       assertFalse(node0.isReturn());
400:       assertFalse(node0.isAssign());
401:       assertFalse(node0.isLabel());
402:       assertFalse(node0.isTrue());
403:       assertFalse(node0.isExprResult());
404:       assertFalse(node0.isDo());
405:       assertFalse(node0.isNew());
406:       assertFalse(node0.isVoid());
407:       assertFalse(node0.isDefaultCase());
408:       assertFalse(node0.isEmpty());
409:       assertFalse(node0.isAdd());
410:       assertFalse(node0.isOr());
411:       assertFalse(node0.isNull());
412:       assertFalse(node0.isParamList());
413:       assertFalse(node0.isSetterDef());
414:       assertEquals(168240, node0.getSourcePosition());
415:       assertFalse(node0.isName());
416:       assertFalse(node0.isStringKey());
417:       assertFalse(node0.isVar());
418:       assertFalse(node0.isCatch());
419:       assertEquals(0, node0.getChildCount());
420:       assertFalse(node0.isCall());
421:       assertEquals(41, node0.getLineno());
422:       assertFalse(node0.isRegExp());
423:       assertFalse(node0.isDebugger());
424:       assertFalse(node0.isBlock());
425:       assertFalse(node0.isTry());
426:       assertFalse(node0.isWhile());
427:       assertEquals((-2740), node0.getType());
428:       assertFalse(node0.isGetterDef());
429:       assertFalse(node0.isNE());
430:       assertFalse(node0.isFor());
431:       assertFalse(node0.isIf());
432:       assertFalse(node0.isCast());
433:       assertFalse(node0.isContinue());
434:       assertFalse(node0.isFunction());
435:       assertFalse(node0.hasMoreThanOneChild());
436:       assertFalse(node0.isInc());
437:       assertFalse(node0.isIn());
438:       assertFalse(node0.equals((Object)node1));
439:       assertFalse(iterable0.contains(node0));
440:       
441:       // Undeclared exception!
442:       try { 
443:         node0.getDouble();
444:         fail("Expecting exception: IllegalStateException");
445:       
446:       } catch(IllegalStateException e) {
447:          //
448:          // -2740
449:          //
450:          verifyException("com.google.javascript.rhino.Token", e);
451:       }
452:   }
453: }
RegularFileObject[/tmp/EvoSuite_107_1628255670671/com/google/javascript/rhino/Node_107_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:14:30 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_107_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_107_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_107_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.common.collect.Platform",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.JSDocInfo$Marker",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.Iterators$12",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.JSTypeNative"
371:     );
372:   }
373: }

[MASTER] 13:14:30.723 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-2740), "8MDO8S5lvaWo9)", 41, 304);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertNotNull(node0);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(304, node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertEquals(41, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertEquals((-2740), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());

Node node1 = new Node(103, node0, node0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertNotNull(node1);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(304, node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertEquals(41, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertEquals((-2740), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node1.isBreak());
assertFalse(node1.isThrow());
assertFalse(node1.isGetProp());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isFalse());
assertFalse(node1.isWith());
assertFalse(node1.isExprResult());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isDelProp());
assertTrue(node1.hasOneChild());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isTypeOf());
assertFalse(node1.isAssign());
assertFalse(node1.isWhile());
assertFalse(node1.isString());
assertEquals(103, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isObjectLit());
assertFalse(node1.isDebugger());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNot());
assertFalse(node1.isNull());
assertFalse(node1.isStringKey());
assertFalse(node1.isParamList());
assertFalse(node1.isCall());
assertFalse(node1.isSetterDef());
assertFalse(node1.isName());
assertFalse(node1.isBlock());
assertFalse(node1.isCatch());
assertFalse(node1.isVar());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isNew());
assertFalse(node1.isVoid());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isIf());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isNE());
assertFalse(node1.isArrayLit());
assertFalse(node1.isLabelName());
assertEquals((-1), node1.getLineno());
assertEquals(1, node1.getChildCount());
assertTrue(node1.isDec());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertTrue(node1.hasChildren());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isRegExp());
assertFalse(node1.isScript());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isTry());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node0.children();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.LAST_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(53, Node.INPUT_ID);
assertNotNull(iterable0);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isScript());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isString());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertEquals(304, node0.getCharno());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isGetElem());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isLabel());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isParamList());
assertFalse(node0.isSetterDef());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertEquals(41, node0.getLineno());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertEquals((-2740), node0.getType());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFunction());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node0));

node0.getDouble();

[MASTER] 13:14:35.175 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_123_1628255674922/com/google/javascript/rhino/Node_123_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_123_1628255674922/com/google/javascript/rhino/Node_123_tmp__ESTest_scaffolding.java]]
[MASTER] 13:14:35.175 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:35.175 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:14:35.175 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 443
[MASTER] 13:14:35.177 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_123_1628255674922/com/google/javascript/rhino/Node_123_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:14:34 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.ErrorReporter;
12: import com.google.javascript.rhino.Node;
13: import com.google.javascript.rhino.jstype.JSType;
14: import com.google.javascript.rhino.jstype.JSTypeRegistry;
15: import java.util.List;
16: import org.evosuite.runtime.EvoRunner;
17: import org.evosuite.runtime.EvoRunnerParameters;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_123_tmp__ESTest extends Node_123_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = Node.newString((-2740), "8MDO8S5lvaWo9)", 41, 304);
26:       assertEquals(50, Node.FREE_CALL);
27:       assertEquals(40, Node.ORIGINALNAME_PROP);
28:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
29:       assertEquals(8, Node.FLAG_NO_THROWS);
30:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
31:       assertEquals(52, Node.LENGTH);
32:       assertEquals(39, Node.EMPTY_BLOCK);
33:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
34:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
35:       assertEquals(57, Node.LAST_PROP);
36:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
37:       assertEquals(49, Node.DIRECT_EVAL);
38:       assertEquals(15, Node.NO_SIDE_EFFECTS);
39:       assertEquals(36, Node.QUOTED_PROP);
40:       assertEquals(55, Node.INFERRED_FUNCTION);
41:       assertEquals(4095, Node.COLUMN_MASK);
42:       assertEquals(48, Node.DIRECTIVES);
43:       assertEquals(37, Node.OPT_ARG_NAME);
44:       assertEquals(56, Node.CHANGE_TIME);
45:       assertEquals(57, Node.REFLECTED_OBJECT);
46:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(29, Node.JSDOC_INFO_PROP);
49:       assertEquals(47, Node.IS_DISPATCHER);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(53, Node.INPUT_ID);
53:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
54:       assertEquals(12, Node.COLUMN_BITS);
55:       assertEquals(32, Node.INCRDECR_PROP);
56:       assertEquals(30, Node.VAR_ARGS_NAME);
57:       assertEquals(1, Node.DECR_FLAG);
58:       assertEquals(51, Node.STATIC_SOURCE_FILE);
59:       assertEquals(54, Node.SLASH_V);
60:       assertEquals(43, Node.IS_CONSTANT_NAME);
61:       assertEquals(46, Node.IS_NAMESPACE);
62:       assertNotNull(node0);
63:       assertFalse(node0.isAssignAdd());
64:       assertFalse(node0.isOr());
65:       assertFalse(node0.hasMoreThanOneChild());
66:       assertFalse(node0.isLabel());
67:       assertFalse(node0.isReturn());
68:       assertFalse(node0.isWhile());
69:       assertFalse(node0.isDo());
70:       assertFalse(node0.isNumber());
71:       assertEquals((-2740), node0.getType());
72:       assertFalse(node0.isNew());
73:       assertFalse(node0.isAdd());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isBlock());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isTypeOf());
80:       assertFalse(node0.isName());
81:       assertFalse(node0.isWith());
82:       assertFalse(node0.isExprResult());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isCall());
85:       assertEquals(0, node0.getChildCount());
86:       assertFalse(node0.isInstanceOf());
87:       assertFalse(node0.isParamList());
88:       assertFalse(node0.isNull());
89:       assertFalse(node0.isThis());
90:       assertEquals(168240, node0.getSourcePosition());
91:       assertFalse(node0.isDefaultCase());
92:       assertFalse(node0.isScript());
93:       assertFalse(node0.isStringKey());
94:       assertFalse(node0.isVar());
95:       assertFalse(node0.isLabelName());
96:       assertFalse(node0.isSwitch());
97:       assertFalse(node0.isArrayLit());
98:       assertFalse(node0.isIn());
99:       assertFalse(node0.isNE());
100:       assertEquals(304, node0.getCharno());
101:       assertFalse(node0.isGetterDef());
102:       assertFalse(node0.isString());
103:       assertFalse(node0.isCase());
104:       assertFalse(node0.isEmpty());
105:       assertFalse(node0.isInc());
106:       assertFalse(node0.isTry());
107:       assertFalse(node0.isFor());
108:       assertFalse(node0.isTrue());
109:       assertFalse(node0.isHook());
110:       assertFalse(node0.isIf());
111:       assertFalse(node0.isDelProp());
112:       assertFalse(node0.isBreak());
113:       assertFalse(node0.isRegExp());
114:       assertFalse(node0.isVoid());
115:       assertFalse(node0.isCatch());
116:       assertFalse(node0.isObjectLit());
117:       assertFalse(node0.isAnd());
118:       assertFalse(node0.isComma());
119:       assertFalse(node0.isNot());
120:       assertFalse(node0.isGetProp());
121:       assertFalse(node0.isSetterDef());
122:       assertFalse(node0.isThrow());
123:       assertFalse(node0.isDebugger());
124:       assertEquals(41, node0.getLineno());
125:       assertFalse(node0.isFunction());
126:       assertFalse(node0.isFalse());
127:       assertFalse(node0.isContinue());
128:       assertFalse(node0.isCast());
129:       
130:       Node node1 = new Node(103, node0, node0);
131:       assertEquals(50, Node.FREE_CALL);
132:       assertEquals(40, Node.ORIGINALNAME_PROP);
133:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
134:       assertEquals(8, Node.FLAG_NO_THROWS);
135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(39, Node.EMPTY_BLOCK);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
140:       assertEquals(57, Node.LAST_PROP);
141:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
144:       assertEquals(36, Node.QUOTED_PROP);
145:       assertEquals(55, Node.INFERRED_FUNCTION);
146:       assertEquals(4095, Node.COLUMN_MASK);
147:       assertEquals(48, Node.DIRECTIVES);
148:       assertEquals(37, Node.OPT_ARG_NAME);
149:       assertEquals(56, Node.CHANGE_TIME);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
152:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
153:       assertEquals(29, Node.JSDOC_INFO_PROP);
154:       assertEquals(47, Node.IS_DISPATCHER);
155:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
156:       assertEquals(2, Node.POST_FLAG);
157:       assertEquals(53, Node.INPUT_ID);
158:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
159:       assertEquals(12, Node.COLUMN_BITS);
160:       assertEquals(32, Node.INCRDECR_PROP);
161:       assertEquals(30, Node.VAR_ARGS_NAME);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
164:       assertEquals(54, Node.SLASH_V);
165:       assertEquals(43, Node.IS_CONSTANT_NAME);
166:       assertEquals(46, Node.IS_NAMESPACE);
167:       assertEquals(36, Node.QUOTED_PROP);
168:       assertEquals(53, Node.INPUT_ID);
169:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
170:       assertEquals(55, Node.INFERRED_FUNCTION);
171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
172:       assertEquals(4095, Node.COLUMN_MASK);
173:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
174:       assertEquals(8, Node.FLAG_NO_THROWS);
175:       assertEquals(39, Node.EMPTY_BLOCK);
176:       assertEquals(37, Node.OPT_ARG_NAME);
177:       assertEquals(48, Node.DIRECTIVES);
178:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
179:       assertEquals(29, Node.JSDOC_INFO_PROP);
180:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
181:       assertEquals(57, Node.REFLECTED_OBJECT);
182:       assertEquals(49, Node.DIRECT_EVAL);
183:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
184:       assertEquals(56, Node.CHANGE_TIME);
185:       assertEquals(15, Node.NO_SIDE_EFFECTS);
186:       assertEquals(57, Node.LAST_PROP);
187:       assertEquals(30, Node.VAR_ARGS_NAME);
188:       assertEquals(52, Node.LENGTH);
189:       assertEquals(12, Node.COLUMN_BITS);
190:       assertEquals(32, Node.INCRDECR_PROP);
191:       assertEquals(1, Node.DECR_FLAG);
192:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
193:       assertEquals(2, Node.POST_FLAG);
194:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
195:       assertEquals(47, Node.IS_DISPATCHER);
196:       assertEquals(50, Node.FREE_CALL);
197:       assertEquals(40, Node.ORIGINALNAME_PROP);
198:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
200:       assertEquals(46, Node.IS_NAMESPACE);
201:       assertEquals(54, Node.SLASH_V);
202:       assertEquals(43, Node.IS_CONSTANT_NAME);
203:       assertNotNull(node1);
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.isOr());
206:       assertFalse(node0.hasMoreThanOneChild());
207:       assertFalse(node0.isLabel());
208:       assertFalse(node0.isReturn());
209:       assertFalse(node0.isWhile());
210:       assertFalse(node0.isDo());
211:       assertFalse(node0.isNumber());
212:       assertEquals((-2740), node0.getType());
213:       assertFalse(node0.isNew());
214:       assertFalse(node0.isAdd());
215:       assertFalse(node0.hasOneChild());
216:       assertFalse(node0.isBlock());
217:       assertFalse(node0.hasChildren());
218:       assertFalse(node0.isDec());
219:       assertFalse(node0.isAssign());
220:       assertFalse(node0.isTypeOf());
221:       assertFalse(node0.isName());
222:       assertFalse(node0.isWith());
223:       assertFalse(node0.isExprResult());
224:       assertFalse(node0.isGetElem());
225:       assertFalse(node0.isCall());
226:       assertEquals(0, node0.getChildCount());
227:       assertFalse(node0.isInstanceOf());
228:       assertFalse(node0.isParamList());
229:       assertFalse(node0.isNull());
230:       assertFalse(node0.isThis());
231:       assertEquals(168240, node0.getSourcePosition());
232:       assertFalse(node0.isDefaultCase());
233:       assertFalse(node0.isScript());
234:       assertFalse(node0.isStringKey());
235:       assertFalse(node0.isVar());
236:       assertFalse(node0.isLabelName());
237:       assertFalse(node0.isSwitch());
238:       assertFalse(node0.isArrayLit());
239:       assertFalse(node0.isIn());
240:       assertFalse(node0.isNE());
241:       assertEquals(304, node0.getCharno());
242:       assertFalse(node0.isGetterDef());
243:       assertFalse(node0.isString());
244:       assertFalse(node0.isCase());
245:       assertFalse(node0.isEmpty());
246:       assertFalse(node0.isInc());
247:       assertFalse(node0.isTry());
248:       assertFalse(node0.isFor());
249:       assertFalse(node0.isTrue());
250:       assertFalse(node0.isHook());
251:       assertFalse(node0.isIf());
252:       assertFalse(node0.isDelProp());
253:       assertFalse(node0.isBreak());
254:       assertFalse(node0.isRegExp());
255:       assertFalse(node0.isVoid());
256:       assertFalse(node0.isCatch());
257:       assertFalse(node0.isObjectLit());
258:       assertFalse(node0.isAnd());
259:       assertFalse(node0.isComma());
260:       assertFalse(node0.isNot());
261:       assertFalse(node0.isGetProp());
262:       assertFalse(node0.isSetterDef());
263:       assertFalse(node0.isThrow());
264:       assertFalse(node0.isDebugger());
265:       assertEquals(41, node0.getLineno());
266:       assertFalse(node0.isFunction());
267:       assertFalse(node0.isFalse());
268:       assertFalse(node0.isContinue());
269:       assertFalse(node0.isCast());
270:       assertFalse(node1.isFalse());
271:       assertFalse(node1.isThrow());
272:       assertFalse(node1.isHook());
273:       assertFalse(node1.isThis());
274:       assertFalse(node1.isComma());
275:       assertFalse(node1.isGetProp());
276:       assertFalse(node1.isInc());
277:       assertFalse(node1.isCase());
278:       assertFalse(node1.isWith());
279:       assertFalse(node1.isIn());
280:       assertEquals(103, node1.getType());
281:       assertEquals(1, node1.getChildCount());
282:       assertFalse(node1.isExprResult());
283:       assertTrue(node1.hasChildren());
284:       assertFalse(node1.isNE());
285:       assertFalse(node1.isIf());
286:       assertFalse(node1.isInstanceOf());
287:       assertFalse(node1.isDelProp());
288:       assertTrue(node1.isDec());
289:       assertFalse(node1.isBreak());
290:       assertFalse(node1.isEmpty());
291:       assertFalse(node1.isFor());
292:       assertFalse(node1.isLabelName());
293:       assertFalse(node1.isNumber());
294:       assertFalse(node1.isGetterDef());
295:       assertFalse(node1.isTry());
296:       assertFalse(node1.isAssignAdd());
297:       assertFalse(node1.isDefaultCase());
298:       assertFalse(node1.isScript());
299:       assertEquals((-1), node1.getCharno());
300:       assertFalse(node1.isLabel());
301:       assertFalse(node1.isSwitch());
302:       assertFalse(node1.isParamList());
303:       assertFalse(node1.isArrayLit());
304:       assertFalse(node1.isStringKey());
305:       assertFalse(node1.isName());
306:       assertFalse(node1.isCall());
307:       assertFalse(node1.isNull());
308:       assertFalse(node1.isVar());
309:       assertFalse(node1.isAdd());
310:       assertFalse(node1.isBlock());
311:       assertFalse(node1.isSetterDef());
312:       assertFalse(node1.isDo());
313:       assertFalse(node1.isNew());
314:       assertFalse(node1.isCatch());
315:       assertFalse(node1.hasMoreThanOneChild());
316:       assertFalse(node1.isWhile());
317:       assertFalse(node1.isRegExp());
318:       assertFalse(node1.isReturn());
319:       assertFalse(node1.isOr());
320:       assertFalse(node1.isVoid());
321:       assertFalse(node1.isTrue());
322:       assertEquals((-1), node1.getLineno());
323:       assertFalse(node1.isGetElem());
324:       assertFalse(node1.isCast());
325:       assertFalse(node1.isTypeOf());
326:       assertTrue(node1.hasOneChild());
327:       assertFalse(node1.isAssign());
328:       assertEquals((-1), node1.getSourcePosition());
329:       assertFalse(node1.isObjectLit());
330:       assertFalse(node1.isContinue());
331:       assertFalse(node1.isString());
332:       assertFalse(node1.isAnd());
333:       assertFalse(node1.isNot());
334:       assertFalse(node1.isDebugger());
335:       assertFalse(node1.isFunction());
336:       assertFalse(node1.equals((Object)node0));
337:       
338:       Iterable<Node> iterable0 = node0.children();
339:       assertEquals(50, Node.FREE_CALL);
340:       assertEquals(40, Node.ORIGINALNAME_PROP);
341:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
342:       assertEquals(8, Node.FLAG_NO_THROWS);
343:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
344:       assertEquals(52, Node.LENGTH);
345:       assertEquals(39, Node.EMPTY_BLOCK);
346:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
347:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
348:       assertEquals(57, Node.LAST_PROP);
349:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
350:       assertEquals(49, Node.DIRECT_EVAL);
351:       assertEquals(15, Node.NO_SIDE_EFFECTS);
352:       assertEquals(36, Node.QUOTED_PROP);
353:       assertEquals(55, Node.INFERRED_FUNCTION);
354:       assertEquals(4095, Node.COLUMN_MASK);
355:       assertEquals(48, Node.DIRECTIVES);
356:       assertEquals(37, Node.OPT_ARG_NAME);
357:       assertEquals(56, Node.CHANGE_TIME);
358:       assertEquals(57, Node.REFLECTED_OBJECT);
359:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:       assertEquals(29, Node.JSDOC_INFO_PROP);
362:       assertEquals(47, Node.IS_DISPATCHER);
363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
364:       assertEquals(2, Node.POST_FLAG);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
367:       assertEquals(12, Node.COLUMN_BITS);
368:       assertEquals(32, Node.INCRDECR_PROP);
369:       assertEquals(30, Node.VAR_ARGS_NAME);
370:       assertEquals(1, Node.DECR_FLAG);
371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
372:       assertEquals(54, Node.SLASH_V);
373:       assertEquals(43, Node.IS_CONSTANT_NAME);
374:       assertEquals(46, Node.IS_NAMESPACE);
375:       assertNotNull(iterable0);
376:       assertFalse(node0.isAssignAdd());
377:       assertFalse(node0.isOr());
378:       assertFalse(node0.hasMoreThanOneChild());
379:       assertFalse(node0.isLabel());
380:       assertFalse(node0.isReturn());
381:       assertFalse(node0.isWhile());
382:       assertFalse(node0.isDo());
383:       assertFalse(node0.isNumber());
384:       assertEquals((-2740), node0.getType());
385:       assertFalse(node0.isNew());
386:       assertFalse(node0.isAdd());
387:       assertFalse(node0.hasOneChild());
388:       assertFalse(node0.isBlock());
389:       assertFalse(node0.hasChildren());
390:       assertFalse(node0.isDec());
391:       assertFalse(node0.isAssign());
392:       assertFalse(node0.isTypeOf());
393:       assertFalse(node0.isName());
394:       assertFalse(node0.isWith());
395:       assertFalse(node0.isExprResult());
396:       assertFalse(node0.isGetElem());
397:       assertFalse(node0.isCall());
398:       assertEquals(0, node0.getChildCount());
399:       assertFalse(node0.isInstanceOf());
400:       assertFalse(node0.isParamList());
401:       assertFalse(node0.isNull());
402:       assertFalse(node0.isThis());
403:       assertEquals(168240, node0.getSourcePosition());
404:       assertFalse(node0.isDefaultCase());
405:       assertFalse(node0.isScript());
406:       assertFalse(node0.isStringKey());
407:       assertFalse(node0.isVar());
408:       assertFalse(node0.isLabelName());
409:       assertFalse(node0.isSwitch());
410:       assertFalse(node0.isArrayLit());
411:       assertFalse(node0.isIn());
412:       assertFalse(node0.isNE());
413:       assertEquals(304, node0.getCharno());
414:       assertFalse(node0.isGetterDef());
415:       assertFalse(node0.isString());
416:       assertFalse(node0.isCase());
417:       assertFalse(node0.isEmpty());
418:       assertFalse(node0.isInc());
419:       assertFalse(node0.isTry());
420:       assertFalse(node0.isFor());
421:       assertFalse(node0.isTrue());
422:       assertFalse(node0.isHook());
423:       assertFalse(node0.isIf());
424:       assertFalse(node0.isDelProp());
425:       assertFalse(node0.isBreak());
426:       assertFalse(node0.isRegExp());
427:       assertFalse(node0.isVoid());
428:       assertFalse(node0.isCatch());
429:       assertFalse(node0.isObjectLit());
430:       assertFalse(node0.isAnd());
431:       assertFalse(node0.isComma());
432:       assertFalse(node0.isNot());
433:       assertFalse(node0.isGetProp());
434:       assertFalse(node0.isSetterDef());
435:       assertFalse(node0.isThrow());
436:       assertFalse(node0.isDebugger());
437:       assertEquals(41, node0.getLineno());
438:       assertFalse(node0.isFunction());
439:       assertFalse(node0.isFalse());
440:       assertFalse(node0.isContinue());
441:       assertFalse(node0.isCast());
442:       assertFalse(node0.equals((Object)node1));
443:       assertFalse(iterable0.contains(node1));
444:       
445:       boolean boolean0 = node1.isNoSideEffectsCall();
446:       assertEquals(50, Node.FREE_CALL);
447:       assertEquals(40, Node.ORIGINALNAME_PROP);
448:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
451:       assertEquals(52, Node.LENGTH);
452:       assertEquals(39, Node.EMPTY_BLOCK);
453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
454:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
455:       assertEquals(57, Node.LAST_PROP);
456:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
457:       assertEquals(49, Node.DIRECT_EVAL);
458:       assertEquals(15, Node.NO_SIDE_EFFECTS);
459:       assertEquals(36, Node.QUOTED_PROP);
460:       assertEquals(55, Node.INFERRED_FUNCTION);
461:       assertEquals(4095, Node.COLUMN_MASK);
462:       assertEquals(48, Node.DIRECTIVES);
463:       assertEquals(37, Node.OPT_ARG_NAME);
464:       assertEquals(56, Node.CHANGE_TIME);
465:       assertEquals(57, Node.REFLECTED_OBJECT);
466:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
467:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
468:       assertEquals(29, Node.JSDOC_INFO_PROP);
469:       assertEquals(47, Node.IS_DISPATCHER);
470:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
471:       assertEquals(2, Node.POST_FLAG);
472:       assertEquals(53, Node.INPUT_ID);
473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
474:       assertEquals(12, Node.COLUMN_BITS);
475:       assertEquals(32, Node.INCRDECR_PROP);
476:       assertEquals(30, Node.VAR_ARGS_NAME);
477:       assertEquals(1, Node.DECR_FLAG);
478:       assertEquals(51, Node.STATIC_SOURCE_FILE);
479:       assertEquals(54, Node.SLASH_V);
480:       assertEquals(43, Node.IS_CONSTANT_NAME);
481:       assertEquals(46, Node.IS_NAMESPACE);
482:       assertEquals(36, Node.QUOTED_PROP);
483:       assertEquals(53, Node.INPUT_ID);
484:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
485:       assertEquals(55, Node.INFERRED_FUNCTION);
486:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
487:       assertEquals(4095, Node.COLUMN_MASK);
488:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
489:       assertEquals(8, Node.FLAG_NO_THROWS);
490:       assertEquals(39, Node.EMPTY_BLOCK);
491:       assertEquals(37, Node.OPT_ARG_NAME);
492:       assertEquals(48, Node.DIRECTIVES);
493:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
494:       assertEquals(29, Node.JSDOC_INFO_PROP);
495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
496:       assertEquals(57, Node.REFLECTED_OBJECT);
497:       assertEquals(49, Node.DIRECT_EVAL);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(56, Node.CHANGE_TIME);
500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
501:       assertEquals(57, Node.LAST_PROP);
502:       assertEquals(30, Node.VAR_ARGS_NAME);
503:       assertEquals(52, Node.LENGTH);
504:       assertEquals(12, Node.COLUMN_BITS);
505:       assertEquals(32, Node.INCRDECR_PROP);
506:       assertEquals(1, Node.DECR_FLAG);
507:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
508:       assertEquals(2, Node.POST_FLAG);
509:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
510:       assertEquals(47, Node.IS_DISPATCHER);
511:       assertEquals(50, Node.FREE_CALL);
512:       assertEquals(40, Node.ORIGINALNAME_PROP);
513:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
514:       assertEquals(51, Node.STATIC_SOURCE_FILE);
515:       assertEquals(46, Node.IS_NAMESPACE);
516:       assertEquals(54, Node.SLASH_V);
517:       assertEquals(43, Node.IS_CONSTANT_NAME);
518:       assertFalse(node0.isAssignAdd());
519:       assertFalse(node0.isOr());
520:       assertFalse(node0.hasMoreThanOneChild());
521:       assertFalse(node0.isLabel());
522:       assertFalse(node0.isReturn());
523:       assertFalse(node0.isWhile());
524:       assertFalse(node0.isDo());
525:       assertFalse(node0.isNumber());
526:       assertEquals((-2740), node0.getType());
527:       assertFalse(node0.isNew());
528:       assertFalse(node0.isAdd());
529:       assertFalse(node0.hasOneChild());
530:       assertFalse(node0.isBlock());
531:       assertFalse(node0.hasChildren());
532:       assertFalse(node0.isDec());
533:       assertFalse(node0.isAssign());
534:       assertFalse(node0.isTypeOf());
535:       assertFalse(node0.isName());
536:       assertFalse(node0.isWith());
537:       assertFalse(node0.isExprResult());
538:       assertFalse(node0.isGetElem());
539:       assertFalse(node0.isCall());
540:       assertEquals(0, node0.getChildCount());
541:       assertFalse(node0.isInstanceOf());
542:       assertFalse(node0.isParamList());
543:       assertFalse(node0.isNull());
544:       assertFalse(node0.isThis());
545:       assertEquals(168240, node0.getSourcePosition());
546:       assertFalse(node0.isDefaultCase());
547:       assertFalse(node0.isScript());
548:       assertFalse(node0.isStringKey());
549:       assertFalse(node0.isVar());
550:       assertFalse(node0.isLabelName());
551:       assertFalse(node0.isSwitch());
552:       assertFalse(node0.isArrayLit());
553:       assertFalse(node0.isIn());
554:       assertFalse(node0.isNE());
555:       assertEquals(304, node0.getCharno());
556:       assertFalse(node0.isGetterDef());
557:       assertFalse(node0.isString());
558:       assertFalse(node0.isCase());
559:       assertFalse(node0.isEmpty());
560:       assertFalse(node0.isInc());
561:       assertFalse(node0.isTry());
562:       assertFalse(node0.isFor());
563:       assertFalse(node0.isTrue());
564:       assertFalse(node0.isHook());
565:       assertFalse(node0.isIf());
566:       assertFalse(node0.isDelProp());
567:       assertFalse(node0.isBreak());
568:       assertFalse(node0.isRegExp());
569:       assertFalse(node0.isVoid());
570:       assertFalse(node0.isCatch());
571:       assertFalse(node0.isObjectLit());
572:       assertFalse(node0.isAnd());
573:       assertFalse(node0.isComma());
574:       assertFalse(node0.isNot());
575:       assertFalse(node0.isGetProp());
576:       assertFalse(node0.isSetterDef());
577:       assertFalse(node0.isThrow());
578:       assertFalse(node0.isDebugger());
579:       assertEquals(41, node0.getLineno());
580:       assertFalse(node0.isFunction());
581:       assertFalse(node0.isFalse());
582:       assertFalse(node0.isContinue());
583:       assertFalse(node0.isCast());
584:       assertFalse(node1.isFalse());
585:       assertFalse(node1.isThrow());
586:       assertFalse(node1.isHook());
587:       assertFalse(node1.isThis());
588:       assertFalse(node1.isComma());
589:       assertFalse(node1.isGetProp());
590:       assertFalse(node1.isInc());
591:       assertFalse(node1.isCase());
592:       assertFalse(node1.isWith());
593:       assertFalse(node1.isIn());
594:       assertEquals(103, node1.getType());
595:       assertEquals(1, node1.getChildCount());
596:       assertFalse(node1.isExprResult());
597:       assertTrue(node1.hasChildren());
598:       assertFalse(node1.isNE());
599:       assertFalse(node1.isIf());
600:       assertFalse(node1.isInstanceOf());
601:       assertFalse(node1.isDelProp());
602:       assertTrue(node1.isDec());
603:       assertFalse(node1.isBreak());
604:       assertFalse(node1.isEmpty());
605:       assertFalse(node1.isFor());
606:       assertFalse(node1.isLabelName());
607:       assertFalse(node1.isNumber());
608:       assertFalse(node1.isGetterDef());
609:       assertFalse(node1.isTry());
610:       assertFalse(node1.isAssignAdd());
611:       assertFalse(node1.isDefaultCase());
612:       assertFalse(node1.isScript());
613:       assertEquals((-1), node1.getCharno());
614:       assertFalse(node1.isLabel());
615:       assertFalse(node1.isSwitch());
616:       assertFalse(node1.isParamList());
617:       assertFalse(node1.isArrayLit());
618:       assertFalse(node1.isStringKey());
619:       assertFalse(node1.isName());
620:       assertFalse(node1.isCall());
621:       assertFalse(node1.isNull());
622:       assertFalse(node1.isVar());
623:       assertFalse(node1.isAdd());
624:       assertFalse(node1.isBlock());
625:       assertFalse(node1.isSetterDef());
626:       assertFalse(node1.isDo());
627:       assertFalse(node1.isNew());
628:       assertFalse(node1.isCatch());
629:       assertFalse(node1.hasMoreThanOneChild());
630:       assertFalse(node1.isWhile());
631:       assertFalse(node1.isRegExp());
632:       assertFalse(node1.isReturn());
633:       assertFalse(node1.isOr());
634:       assertFalse(node1.isVoid());
635:       assertFalse(node1.isTrue());
636:       assertEquals((-1), node1.getLineno());
637:       assertFalse(node1.isGetElem());
638:       assertFalse(node1.isCast());
639:       assertFalse(node1.isTypeOf());
640:       assertTrue(node1.hasOneChild());
641:       assertFalse(node1.isAssign());
642:       assertEquals((-1), node1.getSourcePosition());
643:       assertFalse(node1.isObjectLit());
644:       assertFalse(node1.isContinue());
645:       assertFalse(node1.isString());
646:       assertFalse(node1.isAnd());
647:       assertFalse(node1.isNot());
648:       assertFalse(node1.isDebugger());
649:       assertFalse(node1.isFunction());
650:       assertFalse(node0.equals((Object)node1));
651:       assertFalse(node1.equals((Object)node0));
652:       assertFalse(boolean0);
653:       
654:       boolean boolean1 = node1.isLocalResultCall();
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(40, Node.ORIGINALNAME_PROP);
657:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
660:       assertEquals(52, Node.LENGTH);
661:       assertEquals(39, Node.EMPTY_BLOCK);
662:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
663:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
664:       assertEquals(57, Node.LAST_PROP);
665:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
666:       assertEquals(49, Node.DIRECT_EVAL);
667:       assertEquals(15, Node.NO_SIDE_EFFECTS);
668:       assertEquals(36, Node.QUOTED_PROP);
669:       assertEquals(55, Node.INFERRED_FUNCTION);
670:       assertEquals(4095, Node.COLUMN_MASK);
671:       assertEquals(48, Node.DIRECTIVES);
672:       assertEquals(37, Node.OPT_ARG_NAME);
673:       assertEquals(56, Node.CHANGE_TIME);
674:       assertEquals(57, Node.REFLECTED_OBJECT);
675:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
676:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(47, Node.IS_DISPATCHER);
679:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
680:       assertEquals(2, Node.POST_FLAG);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
683:       assertEquals(12, Node.COLUMN_BITS);
684:       assertEquals(32, Node.INCRDECR_PROP);
685:       assertEquals(30, Node.VAR_ARGS_NAME);
686:       assertEquals(1, Node.DECR_FLAG);
687:       assertEquals(51, Node.STATIC_SOURCE_FILE);
688:       assertEquals(54, Node.SLASH_V);
689:       assertEquals(43, Node.IS_CONSTANT_NAME);
690:       assertEquals(46, Node.IS_NAMESPACE);
691:       assertEquals(36, Node.QUOTED_PROP);
692:       assertEquals(53, Node.INPUT_ID);
693:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
694:       assertEquals(55, Node.INFERRED_FUNCTION);
695:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
696:       assertEquals(4095, Node.COLUMN_MASK);
697:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
698:       assertEquals(8, Node.FLAG_NO_THROWS);
699:       assertEquals(39, Node.EMPTY_BLOCK);
700:       assertEquals(37, Node.OPT_ARG_NAME);
701:       assertEquals(48, Node.DIRECTIVES);
702:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
703:       assertEquals(29, Node.JSDOC_INFO_PROP);
704:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
705:       assertEquals(57, Node.REFLECTED_OBJECT);
706:       assertEquals(49, Node.DIRECT_EVAL);
707:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
708:       assertEquals(56, Node.CHANGE_TIME);
709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
710:       assertEquals(57, Node.LAST_PROP);
711:       assertEquals(30, Node.VAR_ARGS_NAME);
712:       assertEquals(52, Node.LENGTH);
713:       assertEquals(12, Node.COLUMN_BITS);
714:       assertEquals(32, Node.INCRDECR_PROP);
715:       assertEquals(1, Node.DECR_FLAG);
716:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
717:       assertEquals(2, Node.POST_FLAG);
718:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
719:       assertEquals(47, Node.IS_DISPATCHER);
720:       assertEquals(50, Node.FREE_CALL);
721:       assertEquals(40, Node.ORIGINALNAME_PROP);
722:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
723:       assertEquals(51, Node.STATIC_SOURCE_FILE);
724:       assertEquals(46, Node.IS_NAMESPACE);
725:       assertEquals(54, Node.SLASH_V);
726:       assertEquals(43, Node.IS_CONSTANT_NAME);
727:       assertFalse(node0.isAssignAdd());
728:       assertFalse(node0.isOr());
729:       assertFalse(node0.hasMoreThanOneChild());
730:       assertFalse(node0.isLabel());
731:       assertFalse(node0.isReturn());
732:       assertFalse(node0.isWhile());
733:       assertFalse(node0.isDo());
734:       assertFalse(node0.isNumber());
735:       assertEquals((-2740), node0.getType());
736:       assertFalse(node0.isNew());
737:       assertFalse(node0.isAdd());
738:       assertFalse(node0.hasOneChild());
739:       assertFalse(node0.isBlock());
740:       assertFalse(node0.hasChildren());
741:       assertFalse(node0.isDec());
742:       assertFalse(node0.isAssign());
743:       assertFalse(node0.isTypeOf());
744:       assertFalse(node0.isName());
745:       assertFalse(node0.isWith());
746:       assertFalse(node0.isExprResult());
747:       assertFalse(node0.isGetElem());
748:       assertFalse(node0.isCall());
749:       assertEquals(0, node0.getChildCount());
750:       assertFalse(node0.isInstanceOf());
751:       assertFalse(node0.isParamList());
752:       assertFalse(node0.isNull());
753:       assertFalse(node0.isThis());
754:       assertEquals(168240, node0.getSourcePosition());
755:       assertFalse(node0.isDefaultCase());
756:       assertFalse(node0.isScript());
757:       assertFalse(node0.isStringKey());
758:       assertFalse(node0.isVar());
759:       assertFalse(node0.isLabelName());
760:       assertFalse(node0.isSwitch());
761:       assertFalse(node0.isArrayLit());
762:       assertFalse(node0.isIn());
763:       assertFalse(node0.isNE());
764:       assertEquals(304, node0.getCharno());
765:       assertFalse(node0.isGetterDef());
766:       assertFalse(node0.isString());
767:       assertFalse(node0.isCase());
768:       assertFalse(node0.isEmpty());
769:       assertFalse(node0.isInc());
770:       assertFalse(node0.isTry());
771:       assertFalse(node0.isFor());
772:       assertFalse(node0.isTrue());
773:       assertFalse(node0.isHook());
774:       assertFalse(node0.isIf());
775:       assertFalse(node0.isDelProp());
776:       assertFalse(node0.isBreak());
777:       assertFalse(node0.isRegExp());
778:       assertFalse(node0.isVoid());
779:       assertFalse(node0.isCatch());
780:       assertFalse(node0.isObjectLit());
781:       assertFalse(node0.isAnd());
782:       assertFalse(node0.isComma());
783:       assertFalse(node0.isNot());
784:       assertFalse(node0.isGetProp());
785:       assertFalse(node0.isSetterDef());
786:       assertFalse(node0.isThrow());
787:       assertFalse(node0.isDebugger());
788:       assertEquals(41, node0.getLineno());
789:       assertFalse(node0.isFunction());
790:       assertFalse(node0.isFalse());
791:       assertFalse(node0.isContinue());
792:       assertFalse(node0.isCast());
793:       assertFalse(node1.isFalse());
794:       assertFalse(node1.isThrow());
795:       assertFalse(node1.isHook());
796:       assertFalse(node1.isThis());
797:       assertFalse(node1.isComma());
798:       assertFalse(node1.isGetProp());
799:       assertFalse(node1.isInc());
800:       assertFalse(node1.isCase());
801:       assertFalse(node1.isWith());
802:       assertFalse(node1.isIn());
803:       assertEquals(103, node1.getType());
804:       assertEquals(1, node1.getChildCount());
805:       assertFalse(node1.isExprResult());
806:       assertTrue(node1.hasChildren());
807:       assertFalse(node1.isNE());
808:       assertFalse(node1.isIf());
809:       assertFalse(node1.isInstanceOf());
810:       assertFalse(node1.isDelProp());
811:       assertTrue(node1.isDec());
812:       assertFalse(node1.isBreak());
813:       assertFalse(node1.isEmpty());
814:       assertFalse(node1.isFor());
815:       assertFalse(node1.isLabelName());
816:       assertFalse(node1.isNumber());
817:       assertFalse(node1.isGetterDef());
818:       assertFalse(node1.isTry());
819:       assertFalse(node1.isAssignAdd());
820:       assertFalse(node1.isDefaultCase());
821:       assertFalse(node1.isScript());
822:       assertEquals((-1), node1.getCharno());
823:       assertFalse(node1.isLabel());
824:       assertFalse(node1.isSwitch());
825:       assertFalse(node1.isParamList());
826:       assertFalse(node1.isArrayLit());
827:       assertFalse(node1.isStringKey());
828:       assertFalse(node1.isName());
829:       assertFalse(node1.isCall());
830:       assertFalse(node1.isNull());
831:       assertFalse(node1.isVar());
832:       assertFalse(node1.isAdd());
833:       assertFalse(node1.isBlock());
834:       assertFalse(node1.isSetterDef());
835:       assertFalse(node1.isDo());
836:       assertFalse(node1.isNew());
837:       assertFalse(node1.isCatch());
838:       assertFalse(node1.hasMoreThanOneChild());
839:       assertFalse(node1.isWhile());
840:       assertFalse(node1.isRegExp());
841:       assertFalse(node1.isReturn());
842:       assertFalse(node1.isOr());
843:       assertFalse(node1.isVoid());
844:       assertFalse(node1.isTrue());
845:       assertEquals((-1), node1.getLineno());
846:       assertFalse(node1.isGetElem());
847:       assertFalse(node1.isCast());
848:       assertFalse(node1.isTypeOf());
849:       assertTrue(node1.hasOneChild());
850:       assertFalse(node1.isAssign());
851:       assertEquals((-1), node1.getSourcePosition());
852:       assertFalse(node1.isObjectLit());
853:       assertFalse(node1.isContinue());
854:       assertFalse(node1.isString());
855:       assertFalse(node1.isAnd());
856:       assertFalse(node1.isNot());
857:       assertFalse(node1.isDebugger());
858:       assertFalse(node1.isFunction());
859:       assertFalse(node0.equals((Object)node1));
860:       assertFalse(node1.equals((Object)node0));
861:       assertTrue(boolean1 == boolean0);
862:       assertFalse(boolean1);
863:       
864:       Node node2 = node1.cloneTree();
865:       assertEquals(50, Node.FREE_CALL);
866:       assertEquals(40, Node.ORIGINALNAME_PROP);
867:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
868:       assertEquals(8, Node.FLAG_NO_THROWS);
869:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
870:       assertEquals(52, Node.LENGTH);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
873:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
874:       assertEquals(57, Node.LAST_PROP);
875:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
876:       assertEquals(49, Node.DIRECT_EVAL);
877:       assertEquals(15, Node.NO_SIDE_EFFECTS);
878:       assertEquals(36, Node.QUOTED_PROP);
879:       assertEquals(55, Node.INFERRED_FUNCTION);
880:       assertEquals(4095, Node.COLUMN_MASK);
881:       assertEquals(48, Node.DIRECTIVES);
882:       assertEquals(37, Node.OPT_ARG_NAME);
883:       assertEquals(56, Node.CHANGE_TIME);
884:       assertEquals(57, Node.REFLECTED_OBJECT);
885:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
886:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
887:       assertEquals(29, Node.JSDOC_INFO_PROP);
888:       assertEquals(47, Node.IS_DISPATCHER);
889:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
890:       assertEquals(2, Node.POST_FLAG);
891:       assertEquals(53, Node.INPUT_ID);
892:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
893:       assertEquals(12, Node.COLUMN_BITS);
894:       assertEquals(32, Node.INCRDECR_PROP);
895:       assertEquals(30, Node.VAR_ARGS_NAME);
896:       assertEquals(1, Node.DECR_FLAG);
897:       assertEquals(51, Node.STATIC_SOURCE_FILE);
898:       assertEquals(54, Node.SLASH_V);
899:       assertEquals(43, Node.IS_CONSTANT_NAME);
900:       assertEquals(46, Node.IS_NAMESPACE);
901:       assertEquals(36, Node.QUOTED_PROP);
902:       assertEquals(53, Node.INPUT_ID);
903:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
904:       assertEquals(55, Node.INFERRED_FUNCTION);
905:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
906:       assertEquals(4095, Node.COLUMN_MASK);
907:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
908:       assertEquals(8, Node.FLAG_NO_THROWS);
909:       assertEquals(39, Node.EMPTY_BLOCK);
910:       assertEquals(37, Node.OPT_ARG_NAME);
911:       assertEquals(48, Node.DIRECTIVES);
912:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
913:       assertEquals(29, Node.JSDOC_INFO_PROP);
914:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
915:       assertEquals(57, Node.REFLECTED_OBJECT);
916:       assertEquals(49, Node.DIRECT_EVAL);
917:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
918:       assertEquals(56, Node.CHANGE_TIME);
919:       assertEquals(15, Node.NO_SIDE_EFFECTS);
920:       assertEquals(57, Node.LAST_PROP);
921:       assertEquals(30, Node.VAR_ARGS_NAME);
922:       assertEquals(52, Node.LENGTH);
923:       assertEquals(12, Node.COLUMN_BITS);
924:       assertEquals(32, Node.INCRDECR_PROP);
925:       assertEquals(1, Node.DECR_FLAG);
926:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
927:       assertEquals(2, Node.POST_FLAG);
928:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
929:       assertEquals(47, Node.IS_DISPATCHER);
930:       assertEquals(50, Node.FREE_CALL);
931:       assertEquals(40, Node.ORIGINALNAME_PROP);
932:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
933:       assertEquals(51, Node.STATIC_SOURCE_FILE);
934:       assertEquals(46, Node.IS_NAMESPACE);
935:       assertEquals(54, Node.SLASH_V);
936:       assertEquals(43, Node.IS_CONSTANT_NAME);
937:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
938:       assertEquals(43, Node.IS_CONSTANT_NAME);
939:       assertEquals(53, Node.INPUT_ID);
940:       assertEquals(4095, Node.COLUMN_MASK);
941:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
942:       assertEquals(47, Node.IS_DISPATCHER);
943:       assertEquals(2, Node.POST_FLAG);
944:       assertEquals(37, Node.OPT_ARG_NAME);
945:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
946:       assertEquals(8, Node.FLAG_NO_THROWS);
947:       assertEquals(39, Node.EMPTY_BLOCK);
948:       assertEquals(56, Node.CHANGE_TIME);
949:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
950:       assertEquals(48, Node.DIRECTIVES);
951:       assertEquals(57, Node.REFLECTED_OBJECT);
952:       assertEquals(55, Node.INFERRED_FUNCTION);
953:       assertEquals(29, Node.JSDOC_INFO_PROP);
954:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
955:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
956:       assertEquals(52, Node.LENGTH);
957:       assertEquals(36, Node.QUOTED_PROP);
958:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
959:       assertEquals(54, Node.SLASH_V);
960:       assertEquals(15, Node.NO_SIDE_EFFECTS);
961:       assertEquals(57, Node.LAST_PROP);
962:       assertEquals(49, Node.DIRECT_EVAL);
963:       assertEquals(1, Node.DECR_FLAG);
964:       assertEquals(40, Node.ORIGINALNAME_PROP);
965:       assertEquals(12, Node.COLUMN_BITS);
966:       assertEquals(30, Node.VAR_ARGS_NAME);
967:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
968:       assertEquals(32, Node.INCRDECR_PROP);
969:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
970:       assertEquals(46, Node.IS_NAMESPACE);
971:       assertEquals(51, Node.STATIC_SOURCE_FILE);
972:       assertEquals(50, Node.FREE_CALL);
973:       assertNotSame(node1, node2);
974:       assertNotSame(node2, node1);
975:       assertNotNull(node2);
976:       assertFalse(node0.isAssignAdd());
977:       assertFalse(node0.isOr());
978:       assertFalse(node0.hasMoreThanOneChild());
979:       assertFalse(node0.isLabel());
980:       assertFalse(node0.isReturn());
981:       assertFalse(node0.isWhile());
982:       assertFalse(node0.isDo());
983:       assertFalse(node0.isNumber());
984:       assertEquals((-2740), node0.getType());
985:       assertFalse(node0.isNew());
986:       assertFalse(node0.isAdd());
987:       assertFalse(node0.hasOneChild());
988:       assertFalse(node0.isBlock());
989:       assertFalse(node0.hasChildren());
990:       assertFalse(node0.isDec());
991:       assertFalse(node0.isAssign());
992:       assertFalse(node0.isTypeOf());
993:       assertFalse(node0.isName());
994:       assertFalse(node0.isWith());
995:       assertFalse(node0.isExprResult());
996:       assertFalse(node0.isGetElem());
997:       assertFalse(node0.isCall());
998:       assertEquals(0, node0.getChildCount());
999:       assertFalse(node0.isInstanceOf());
1000:       assertFalse(node0.isParamList());
1001:       assertFalse(node0.isNull());
1002:       assertFalse(node0.isThis());
1003:       assertEquals(168240, node0.getSourcePosition());
1004:       assertFalse(node0.isDefaultCase());
1005:       assertFalse(node0.isScript());
1006:       assertFalse(node0.isStringKey());
1007:       assertFalse(node0.isVar());
1008:       assertFalse(node0.isLabelName());
1009:       assertFalse(node0.isSwitch());
1010:       assertFalse(node0.isArrayLit());
1011:       assertFalse(node0.isIn());
1012:       assertFalse(node0.isNE());
1013:       assertEquals(304, node0.getCharno());
1014:       assertFalse(node0.isGetterDef());
1015:       assertFalse(node0.isString());
1016:       assertFalse(node0.isCase());
1017:       assertFalse(node0.isEmpty());
1018:       assertFalse(node0.isInc());
1019:       assertFalse(node0.isTry());
1020:       assertFalse(node0.isFor());
1021:       assertFalse(node0.isTrue());
1022:       assertFalse(node0.isHook());
1023:       assertFalse(node0.isIf());
1024:       assertFalse(node0.isDelProp());
1025:       assertFalse(node0.isBreak());
1026:       assertFalse(node0.isRegExp());
1027:       assertFalse(node0.isVoid());
1028:       assertFalse(node0.isCatch());
1029:       assertFalse(node0.isObjectLit());
1030:       assertFalse(node0.isAnd());
1031:       assertFalse(node0.isComma());
1032:       assertFalse(node0.isNot());
1033:       assertFalse(node0.isGetProp());
1034:       assertFalse(node0.isSetterDef());
1035:       assertFalse(node0.isThrow());
1036:       assertFalse(node0.isDebugger());
1037:       assertEquals(41, node0.getLineno());
1038:       assertFalse(node0.isFunction());
1039:       assertFalse(node0.isFalse());
1040:       assertFalse(node0.isContinue());
1041:       assertFalse(node0.isCast());
1042:       assertFalse(node1.isFalse());
1043:       assertFalse(node1.isThrow());
1044:       assertFalse(node1.isHook());
1045:       assertFalse(node1.isThis());
1046:       assertFalse(node1.isComma());
1047:       assertFalse(node1.isGetProp());
1048:       assertFalse(node1.isInc());
1049:       assertFalse(node1.isCase());
1050:       assertFalse(node1.isWith());
1051:       assertFalse(node1.isIn());
1052:       assertEquals(103, node1.getType());
1053:       assertEquals(1, node1.getChildCount());
1054:       assertFalse(node1.isExprResult());
1055:       assertTrue(node1.hasChildren());
1056:       assertFalse(node1.isNE());
1057:       assertFalse(node1.isIf());
1058:       assertFalse(node1.isInstanceOf());
1059:       assertFalse(node1.isDelProp());
1060:       assertTrue(node1.isDec());
1061:       assertFalse(node1.isBreak());
1062:       assertFalse(node1.isEmpty());
1063:       assertFalse(node1.isFor());
1064:       assertFalse(node1.isLabelName());
1065:       assertFalse(node1.isNumber());
1066:       assertFalse(node1.isGetterDef());
1067:       assertFalse(node1.isTry());
1068:       assertFalse(node1.isAssignAdd());
1069:       assertFalse(node1.isDefaultCase());
1070:       assertFalse(node1.isScript());
1071:       assertEquals((-1), node1.getCharno());
1072:       assertFalse(node1.isLabel());
1073:       assertFalse(node1.isSwitch());
1074:       assertFalse(node1.isParamList());
1075:       assertFalse(node1.isArrayLit());
1076:       assertFalse(node1.isStringKey());
1077:       assertFalse(node1.isName());
1078:       assertFalse(node1.isCall());
1079:       assertFalse(node1.isNull());
1080:       assertFalse(node1.isVar());
1081:       assertFalse(node1.isAdd());
1082:       assertFalse(node1.isBlock());
1083:       assertFalse(node1.isSetterDef());
1084:       assertFalse(node1.isDo());
1085:       assertFalse(node1.isNew());
1086:       assertFalse(node1.isCatch());
1087:       assertFalse(node1.hasMoreThanOneChild());
1088:       assertFalse(node1.isWhile());
1089:       assertFalse(node1.isRegExp());
1090:       assertFalse(node1.isReturn());
1091:       assertFalse(node1.isOr());
1092:       assertFalse(node1.isVoid());
1093:       assertFalse(node1.isTrue());
1094:       assertEquals((-1), node1.getLineno());
1095:       assertFalse(node1.isGetElem());
1096:       assertFalse(node1.isCast());
1097:       assertFalse(node1.isTypeOf());
1098:       assertTrue(node1.hasOneChild());
1099:       assertFalse(node1.isAssign());
1100:       assertEquals((-1), node1.getSourcePosition());
1101:       assertFalse(node1.isObjectLit());
1102:       assertFalse(node1.isContinue());
1103:       assertFalse(node1.isString());
1104:       assertFalse(node1.isAnd());
1105:       assertFalse(node1.isNot());
1106:       assertFalse(node1.isDebugger());
1107:       assertFalse(node1.isFunction());
1108:       assertFalse(node2.isName());
1109:       assertFalse(node2.isSetterDef());
1110:       assertFalse(node2.isCall());
1111:       assertFalse(node2.isAdd());
1112:       assertFalse(node2.isBlock());
1113:       assertFalse(node2.isNew());
1114:       assertFalse(node2.isVar());
1115:       assertFalse(node2.isWhile());
1116:       assertFalse(node2.isDo());
1117:       assertFalse(node2.isRegExp());
1118:       assertFalse(node2.hasMoreThanOneChild());
1119:       assertFalse(node2.isCatch());
1120:       assertFalse(node2.isOr());
1121:       assertFalse(node2.isVoid());
1122:       assertEquals((-1), node2.getLineno());
1123:       assertFalse(node2.isTrue());
1124:       assertFalse(node2.isNull());
1125:       assertFalse(node2.isAssign());
1126:       assertTrue(node2.hasOneChild());
1127:       assertFalse(node2.isGetElem());
1128:       assertFalse(node2.isDelProp());
1129:       assertEquals((-1), node2.getSourcePosition());
1130:       assertFalse(node2.isCast());
1131:       assertFalse(node2.isTypeOf());
1132:       assertFalse(node2.isReturn());
1133:       assertFalse(node2.isNot());
1134:       assertFalse(node2.isObjectLit());
1135:       assertFalse(node2.isFunction());
1136:       assertFalse(node2.isContinue());
1137:       assertFalse(node2.isString());
1138:       assertFalse(node2.isDebugger());
1139:       assertFalse(node2.isAnd());
1140:       assertFalse(node2.isFalse());
1141:       assertFalse(node2.isBreak());
1142:       assertFalse(node2.isGetProp());
1143:       assertFalse(node2.isComma());
1144:       assertFalse(node2.isHook());
1145:       assertFalse(node2.isThis());
1146:       assertFalse(node2.isThrow());
1147:       assertEquals(103, node2.getType());
1148:       assertFalse(node2.isWith());
1149:       assertFalse(node2.isExprResult());
1150:       assertFalse(node2.isInc());
1151:       assertFalse(node2.isIn());
1152:       assertFalse(node2.isInstanceOf());
1153:       assertTrue(node2.hasChildren());
1154:       assertTrue(node2.isDec());
1155:       assertFalse(node2.isNE());
1156:       assertFalse(node2.isIf());
1157:       assertFalse(node2.isEmpty());
1158:       assertFalse(node2.isFor());
1159:       assertFalse(node2.isLabelName());
1160:       assertFalse(node2.isGetterDef());
1161:       assertFalse(node2.isArrayLit());
1162:       assertFalse(node2.isNumber());
1163:       assertFalse(node2.isTry());
1164:       assertFalse(node2.isLabel());
1165:       assertFalse(node2.isAssignAdd());
1166:       assertEquals(1, node2.getChildCount());
1167:       assertFalse(node2.isDefaultCase());
1168:       assertFalse(node2.isCase());
1169:       assertFalse(node2.isScript());
1170:       assertEquals((-1), node2.getCharno());
1171:       assertFalse(node2.isSwitch());
1172:       assertFalse(node2.isParamList());
1173:       assertFalse(node2.isStringKey());
1174:       assertFalse(node0.equals((Object)node1));
1175:       assertFalse(node1.equals((Object)node0));
1176:       assertFalse(node2.equals((Object)node1));
1177:       assertFalse(node2.equals((Object)node0));
1178:       
1179:       Node node3 = Node.newNumber((double) 55, 56, 37);
1180:       assertEquals(57, Node.REFLECTED_OBJECT);
1181:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1182:       assertEquals(54, Node.SLASH_V);
1183:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1184:       assertEquals(57, Node.LAST_PROP);
1185:       assertEquals(8, Node.FLAG_NO_THROWS);
1186:       assertEquals(50, Node.FREE_CALL);
1187:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1188:       assertEquals(52, Node.LENGTH);
1189:       assertEquals(39, Node.EMPTY_BLOCK);
1190:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1191:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1192:       assertEquals(46, Node.IS_NAMESPACE);
1193:       assertEquals(43, Node.IS_CONSTANT_NAME);
1194:       assertEquals(47, Node.IS_DISPATCHER);
1195:       assertEquals(2, Node.POST_FLAG);
1196:       assertEquals(30, Node.VAR_ARGS_NAME);
1197:       assertEquals(40, Node.ORIGINALNAME_PROP);
1198:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1199:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1200:       assertEquals(36, Node.QUOTED_PROP);
1201:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1202:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1203:       assertEquals(53, Node.INPUT_ID);
1204:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1205:       assertEquals(55, Node.INFERRED_FUNCTION);
1206:       assertEquals(29, Node.JSDOC_INFO_PROP);
1207:       assertEquals(12, Node.COLUMN_BITS);
1208:       assertEquals(4095, Node.COLUMN_MASK);
1209:       assertEquals(32, Node.INCRDECR_PROP);
1210:       assertEquals(1, Node.DECR_FLAG);
1211:       assertEquals(56, Node.CHANGE_TIME);
1212:       assertEquals(37, Node.OPT_ARG_NAME);
1213:       assertEquals(48, Node.DIRECTIVES);
1214:       assertEquals(49, Node.DIRECT_EVAL);
1215:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1216:       assertNotNull(node3);
1217:       assertFalse(node3.isNE());
1218:       assertFalse(node3.isIf());
1219:       assertFalse(node3.isDelProp());
1220:       assertTrue(node3.isNumber());
1221:       assertFalse(node3.isEmpty());
1222:       assertFalse(node3.isString());
1223:       assertFalse(node3.isIn());
1224:       assertFalse(node3.isGetterDef());
1225:       assertFalse(node3.isDebugger());
1226:       assertFalse(node3.isFunction());
1227:       assertFalse(node3.isInc());
1228:       assertFalse(node3.isSwitch());
1229:       assertFalse(node3.isDefaultCase());
1230:       assertFalse(node3.isArrayLit());
1231:       assertFalse(node3.isThrow());
1232:       assertFalse(node3.isFalse());
1233:       assertEquals(0, node3.getChildCount());
1234:       assertFalse(node3.isSetterDef());
1235:       assertFalse(node3.isThis());
1236:       assertFalse(node3.isParamList());
1237:       assertFalse(node3.isStringKey());
1238:       assertEquals(56, node3.getLineno());
1239:       assertFalse(node3.isBlock());
1240:       assertFalse(node3.isScript());
1241:       assertFalse(node3.isTry());
1242:       assertEquals(37, node3.getCharno());
1243:       assertFalse(node3.isCase());
1244:       assertFalse(node3.hasOneChild());
1245:       assertFalse(node3.isFor());
1246:       assertFalse(node3.hasMoreThanOneChild());
1247:       assertFalse(node3.isCatch());
1248:       assertFalse(node3.isInstanceOf());
1249:       assertFalse(node3.isHook());
1250:       assertFalse(node3.isWith());
1251:       assertFalse(node3.isRegExp());
1252:       assertEquals(39, node3.getType());
1253:       assertFalse(node3.isAssignAdd());
1254:       assertFalse(node3.isLabelName());
1255:       assertFalse(node3.isOr());
1256:       assertFalse(node3.isAdd());
1257:       assertFalse(node3.isDo());
1258:       assertFalse(node3.isNew());
1259:       assertFalse(node3.isContinue());
1260:       assertFalse(node3.isVar());
1261:       assertFalse(node3.isCast());
1262:       assertFalse(node3.isLabel());
1263:       assertFalse(node3.isGetProp());
1264:       assertFalse(node3.isBreak());
1265:       assertFalse(node3.isObjectLit());
1266:       assertFalse(node3.isAnd());
1267:       assertFalse(node3.isName());
1268:       assertFalse(node3.isNull());
1269:       assertFalse(node3.isNot());
1270:       assertFalse(node3.isVoid());
1271:       assertFalse(node3.isTrue());
1272:       assertFalse(node3.isExprResult());
1273:       assertEquals(229413, node3.getSourcePosition());
1274:       assertFalse(node3.isGetElem());
1275:       assertFalse(node3.isCall());
1276:       assertFalse(node3.isWhile());
1277:       assertFalse(node3.hasChildren());
1278:       assertFalse(node3.isTypeOf());
1279:       assertFalse(node3.isReturn());
1280:       assertFalse(node3.isAssign());
1281:       assertFalse(node3.isDec());
1282:       assertFalse(node3.isComma());
1283:       assertFalse(node3.equals((Object)node0));
1284:       assertFalse(node3.equals((Object)node1));
1285:       assertFalse(node3.equals((Object)node2));
1286:       
1287:       try { 
1288:         node3.setString("com.google.common.collect.Iterators$1");
1289:         fail("Expecting exception: UnsupportedOperationException");
1290:       
1291:       } catch(UnsupportedOperationException e) {
1292:          //
1293:          // NUMBER 55.0 56 is not a string node
1294:          //
1295:          verifyException("com.google.javascript.rhino.Node", e);
1296:       }
1297:   }
1298: }
RegularFileObject[/tmp/EvoSuite_123_1628255674922/com/google/javascript/rhino/Node_123_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:14:35 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_123_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_123_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.javascript.rhino.jstype.NamedType",
131:       "com.google.common.collect.Iterators$13",
132:       "com.google.javascript.rhino.InputId",
133:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
134:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
135:       "com.google.common.collect.AbstractMapBasedMultimap",
136:       "com.google.common.collect.Lists$Partition",
137:       "com.google.common.collect.Lists",
138:       "com.google.javascript.rhino.Node$SideEffectFlags",
139:       "com.google.common.collect.UnmodifiableListIterator",
140:       "com.google.javascript.rhino.jstype.NullType",
141:       "com.google.common.collect.Lists$TransformingSequentialList",
142:       "com.google.javascript.rhino.ErrorReporter",
143:       "com.google.javascript.rhino.jstype.UnknownType",
144:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
145:       "com.google.javascript.rhino.jstype.ValueType",
146:       "com.google.javascript.rhino.jstype.PropertyMap",
147:       "com.google.javascript.rhino.Token",
148:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
149:       "com.google.common.collect.ObjectArrays",
150:       "com.google.javascript.rhino.jstype.StaticSourceFile",
151:       "com.google.javascript.rhino.jstype.BooleanType",
152:       "com.google.javascript.rhino.jstype.NoObjectType",
153:       "com.google.common.collect.AbstractIterator",
154:       "com.google.javascript.rhino.jstype.FunctionBuilder",
155:       "com.google.javascript.rhino.jstype.JSType$TypePair",
156:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.common.collect.ImmutableList$1",
159:       "com.google.common.collect.MapDifference",
160:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
161:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
162:       "com.google.common.collect.Sets$ImprovedAbstractSet",
163:       "com.google.javascript.rhino.jstype.FunctionType",
164:       "com.google.common.base.Preconditions",
165:       "com.google.common.collect.UnmodifiableIterator",
166:       "com.google.javascript.rhino.JSDocInfo",
167:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
168:       "com.google.javascript.rhino.jstype.Property",
169:       "com.google.common.collect.ImmutableMapValues",
170:       "com.google.common.collect.ImmutableEntry",
171:       "com.google.common.base.Joiner$1",
172:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
173:       "com.google.common.base.Joiner$2",
174:       "com.google.common.collect.ImmutableCollection",
175:       "com.google.common.collect.ImmutableEnumMap",
176:       "com.google.javascript.rhino.jstype.TernaryValue",
177:       "com.google.javascript.rhino.Node$AncestorIterable",
178:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
179:       "com.google.common.collect.Lists$RandomAccessListWrapper",
180:       "com.google.common.collect.ImmutableEnumSet",
181:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
182:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
183:       "com.google.javascript.rhino.jstype.EnumElementType",
184:       "com.google.javascript.rhino.jstype.UnionType",
185:       "com.google.common.base.Objects",
186:       "com.google.javascript.rhino.Node$NumberNode",
187:       "com.google.common.collect.SingletonImmutableList",
188:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
189:       "com.google.common.collect.ImmutableCollection$Builder",
190:       "com.google.javascript.rhino.jstype.StaticSlot",
191:       "com.google.common.collect.Iterators$6",
192:       "com.google.common.collect.BiMap",
193:       "com.google.common.collect.Iterators$7",
194:       "com.google.common.collect.AbstractSetMultimap",
195:       "com.google.common.base.Function",
196:       "com.google.common.collect.ImmutableSet",
197:       "com.google.common.collect.Lists$AbstractListWrapper",
198:       "com.google.common.collect.ImmutableMap",
199:       "com.google.common.collect.AbstractIndexedListIterator",
200:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
201:       "com.google.common.collect.Maps$1",
202:       "com.google.javascript.rhino.jstype.EnumType",
203:       "com.google.common.collect.Iterators$1",
204:       "com.google.common.collect.Iterators$2",
205:       "com.google.javascript.rhino.jstype.NamespaceType",
206:       "com.google.common.collect.Iterators$3",
207:       "com.google.common.collect.Sets",
208:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
209:       "com.google.javascript.rhino.Node$ObjectPropListItem",
210:       "com.google.common.collect.Lists$StringAsImmutableList",
211:       "com.google.common.collect.Lists$2",
212:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
213:       "com.google.common.collect.ImmutableList$Builder",
214:       "com.google.common.collect.Lists$1",
215:       "com.google.javascript.rhino.jstype.StaticReference",
216:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
217:       "com.google.common.collect.Multiset",
218:       "com.google.common.collect.AbstractMultimap",
219:       "com.google.common.collect.Multimap",
220:       "com.google.common.collect.Iterators",
221:       "com.google.common.collect.Maps$ImprovedAbstractMap",
222:       "com.google.common.collect.ImmutableBiMap",
223:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
224:       "com.google.common.collect.ImmutableList",
225:       "com.google.common.collect.SingletonImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
227:       "com.google.javascript.rhino.jstype.StringType",
228:       "com.google.javascript.rhino.Node$AbstractPropListItem",
229:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
230:       "com.google.javascript.rhino.jstype.TemplatizedType",
231:       "com.google.javascript.rhino.jstype.Visitor",
232:       "com.google.javascript.rhino.jstype.NoResolvedType",
233:       "com.google.javascript.rhino.jstype.JSTypeNative",
234:       "com.google.javascript.rhino.jstype.AllType",
235:       "com.google.common.collect.Maps",
236:       "com.google.common.collect.SetMultimap",
237:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
238:       "com.google.common.collect.Maps$EntryTransformer",
239:       "com.google.javascript.rhino.JSTypeExpression",
240:       "com.google.common.collect.Iterators$MergingIterator"
241:     );
242:   } 
243: 
244:   private static void resetClasses() {
245:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_123_tmp__ESTest_scaffolding.class.getClassLoader()); 
246: 
247:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
248:       "com.google.javascript.rhino.Node",
249:       "com.google.javascript.rhino.Node$NumberNode",
250:       "com.google.javascript.rhino.Node$StringNode",
251:       "com.google.javascript.rhino.Node$AbstractPropListItem",
252:       "com.google.javascript.rhino.Node$ObjectPropListItem",
253:       "com.google.javascript.rhino.Node$IntPropListItem",
254:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
255:       "com.google.javascript.rhino.Node$AncestorIterable",
256:       "com.google.javascript.rhino.Node$NodeMismatch",
257:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
258:       "com.google.javascript.rhino.Node$SideEffectFlags",
259:       "com.google.javascript.rhino.Token",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.jstype.ArrowType",
315:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
316:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
317:       "com.google.javascript.rhino.jstype.InstanceObjectType",
318:       "com.google.javascript.rhino.jstype.Property",
319:       "com.google.common.collect.Lists",
320:       "com.google.javascript.rhino.jstype.NoObjectType",
321:       "com.google.javascript.rhino.jstype.NoType",
322:       "com.google.javascript.rhino.jstype.NoResolvedType",
323:       "com.google.common.collect.SingletonImmutableList",
324:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
325:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
326:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
327:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
328:       "com.google.javascript.rhino.jstype.UnionType",
329:       "com.google.javascript.rhino.jstype.FunctionBuilder",
330:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
331:       "com.google.javascript.rhino.jstype.TemplatizedType",
332:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
333:       "com.google.javascript.rhino.jstype.EnumType",
334:       "com.google.javascript.rhino.jstype.EnumElementType",
335:       "com.google.javascript.rhino.JSDocInfo",
336:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
337:       "com.google.common.collect.Sets",
338:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
339:       "com.google.javascript.rhino.InputId",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.base.Objects",
342:       "com.google.common.collect.Iterables",
343:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
344:       "com.google.javascript.rhino.jstype.NamedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
348:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
349:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
350:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection$WrappedIterator",
351:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
352:       "com.google.common.collect.AbstractIndexedListIterator",
353:       "com.google.common.collect.Iterators$11",
354:       "com.google.common.collect.Platform",
355:       "com.google.javascript.rhino.JSTypeExpression",
356:       "com.google.common.collect.AbstractMultimap$Values",
357:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
358:       "com.google.common.collect.AbstractMapBasedMultimap$1",
359:       "com.google.common.collect.Multimaps$Entries",
360:       "com.google.common.collect.AbstractMultimap$Entries",
361:       "com.google.common.collect.AbstractMapBasedMultimap$2",
362:       "com.google.javascript.rhino.JSDocInfo$Marker",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.Iterators$12",
365:       "com.google.javascript.rhino.jstype.TernaryValue",
366:       "com.google.common.collect.Sets$ImprovedAbstractSet",
367:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
368:       "com.google.common.collect.Hashing",
369:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
370:       "com.google.javascript.rhino.jstype.JSTypeNative"
371:     );
372:   }
373: }

[MASTER] 13:14:35.221 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString((-2740), "8MDO8S5lvaWo9)", 41, 304);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertNotNull(node0);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals((-2740), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertEquals(41, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());

Node node1 = new Node(103, node0, node0);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertNotNull(node1);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals((-2740), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertEquals(41, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertEquals(103, node1.getType());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isExprResult());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertTrue(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isRegExp());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.equals((Object)node0));

Iterable<Node> iterable0 = node0.children();
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertNotNull(iterable0);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals((-2740), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertEquals(41, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node1));

boolean boolean0 = node1.isNoSideEffectsCall();
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals((-2740), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertEquals(41, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertEquals(103, node1.getType());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isExprResult());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertTrue(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isRegExp());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(boolean0);

boolean boolean1 = node1.isLocalResultCall();
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals((-2740), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertEquals(41, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertEquals(103, node1.getType());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isExprResult());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertTrue(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isRegExp());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertFalse(boolean1);

Node node2 = node1.cloneTree();
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertNotNull(node2);
assertFalse(node0.isAssignAdd());
assertFalse(node0.isOr());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isNumber());
assertEquals((-2740), node0.getType());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.hasOneChild());
assertFalse(node0.isBlock());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isName());
assertFalse(node0.isWith());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isParamList());
assertFalse(node0.isNull());
assertFalse(node0.isThis());
assertEquals(168240, node0.getSourcePosition());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isScript());
assertFalse(node0.isStringKey());
assertFalse(node0.isVar());
assertFalse(node0.isLabelName());
assertFalse(node0.isSwitch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertEquals(304, node0.getCharno());
assertFalse(node0.isGetterDef());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isEmpty());
assertFalse(node0.isInc());
assertFalse(node0.isTry());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isHook());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isCatch());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isComma());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThrow());
assertFalse(node0.isDebugger());
assertEquals(41, node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isCast());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isHook());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isWith());
assertFalse(node1.isIn());
assertEquals(103, node1.getType());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isExprResult());
assertTrue(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIf());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isDelProp());
assertTrue(node1.isDec());
assertFalse(node1.isBreak());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isTry());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isScript());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isLabel());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isArrayLit());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isAdd());
assertFalse(node1.isBlock());
assertFalse(node1.isSetterDef());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isCatch());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isRegExp());
assertFalse(node1.isReturn());
assertFalse(node1.isOr());
assertFalse(node1.isVoid());
assertFalse(node1.isTrue());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isGetElem());
assertFalse(node1.isCast());
assertFalse(node1.isTypeOf());
assertTrue(node1.hasOneChild());
assertFalse(node1.isAssign());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isContinue());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node2.isName());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCall());
assertFalse(node2.isAdd());
assertFalse(node2.isBlock());
assertFalse(node2.isNew());
assertFalse(node2.isVar());
assertFalse(node2.isWhile());
assertFalse(node2.isDo());
assertFalse(node2.isRegExp());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isCatch());
assertFalse(node2.isOr());
assertFalse(node2.isVoid());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isTrue());
assertFalse(node2.isNull());
assertFalse(node2.isAssign());
assertTrue(node2.hasOneChild());
assertFalse(node2.isGetElem());
assertFalse(node2.isDelProp());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isNot());
assertFalse(node2.isObjectLit());
assertFalse(node2.isFunction());
assertFalse(node2.isContinue());
assertFalse(node2.isString());
assertFalse(node2.isDebugger());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isBreak());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isHook());
assertFalse(node2.isThis());
assertFalse(node2.isThrow());
assertEquals(103, node2.getType());
assertFalse(node2.isWith());
assertFalse(node2.isExprResult());
assertFalse(node2.isInc());
assertFalse(node2.isIn());
assertFalse(node2.isInstanceOf());
assertTrue(node2.hasChildren());
assertTrue(node2.isDec());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isEmpty());
assertFalse(node2.isFor());
assertFalse(node2.isLabelName());
assertFalse(node2.isGetterDef());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNumber());
assertFalse(node2.isTry());
assertFalse(node2.isLabel());
assertFalse(node2.isAssignAdd());
assertEquals(1, node2.getChildCount());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isCase());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSwitch());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));

Node node3 = Node.newNumber((double) 55, 56, 37);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertNotNull(node3);
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertTrue(node3.isNumber());
assertFalse(node3.isEmpty());
assertFalse(node3.isString());
assertFalse(node3.isIn());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isInc());
assertFalse(node3.isSwitch());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isArrayLit());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isSetterDef());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertEquals(56, node3.getLineno());
assertFalse(node3.isBlock());
assertFalse(node3.isScript());
assertFalse(node3.isTry());
assertEquals(37, node3.getCharno());
assertFalse(node3.isCase());
assertFalse(node3.hasOneChild());
assertFalse(node3.isFor());
assertFalse(node3.hasMoreThanOneChild());
assertFalse(node3.isCatch());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isHook());
assertFalse(node3.isWith());
assertFalse(node3.isRegExp());
assertEquals(39, node3.getType());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isLabelName());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertFalse(node3.isContinue());
assertFalse(node3.isVar());
assertFalse(node3.isCast());
assertFalse(node3.isLabel());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isName());
assertFalse(node3.isNull());
assertFalse(node3.isNot());
assertFalse(node3.isVoid());
assertFalse(node3.isTrue());
assertFalse(node3.isExprResult());
assertEquals(229413, node3.getSourcePosition());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isWhile());
assertFalse(node3.hasChildren());
assertFalse(node3.isTypeOf());
assertFalse(node3.isReturn());
assertFalse(node3.isAssign());
assertFalse(node3.isDec());
assertFalse(node3.isComma());
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));

node3.setString("com.google.common.collect.Iterators$1");

[MASTER] 13:14:56.075 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:56.467 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:56.860 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:57.144 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:57.453 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:58.546 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:58.766 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:58.962 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:59.172 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:59.432 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:59.691 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:14:59.971 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:00.198 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:00.533 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:00.753 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:00.975 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:01.209 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:01.402 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:01.617 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:01.845 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:02.068 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:02.272 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:15:02.297 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/10
* Done!

* Computation finished
