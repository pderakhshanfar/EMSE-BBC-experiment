* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 13757
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 3607355799
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 12:59:51.284 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:00:04.734 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 13:00:10.545 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 13:09:21.641 [logback-2] ERROR TestCluster - Failed to check cache for java.util.function.Function<T, R> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - true: 2005,0,0| Number of FF evals: 864
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 382,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - false: 569,0,0| Number of FF evals: 1034
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 12462,6811,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 3646,0,0| Number of FF evals: 1936
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 124,0,0| Number of FF evals: 394
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 4120,1190,0| Number of FF evals: 4764
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 2005,0,0| Number of FF evals: 725
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 209,0,0| Number of FF evals: 342
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I195 Branch 128 IFEQ L997 - true: 160,0,0| Number of FF evals: 644
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 2648,0,0| Number of FF evals: 936
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 479,0,0| Number of FF evals: 293
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I127 Branch 126 IF_ICMPGE L980 - false: 65,0,0| Number of FF evals: 621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 173,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1894,1646,1| Number of FF evals: 14205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 13436,11710,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 173,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 173,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 2310,0,0| Number of FF evals: 802
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 173,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 210 IFNONNULL L1747 - true: 3336,2515,0| Number of FF evals: 14153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - true: 44,0,0| Number of FF evals: 553
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 5867,4976,0| Number of FF evals: 10378
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 9796,6506,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 173,0,0| Number of FF evals: 169
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - true: 44,0,0| Number of FF evals: 1209
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 698: 44,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: I11 Branch 152 IFNULL L1408 - false: 44,0,0| Number of FF evals: 424
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - true: 806,0,0| Number of FF evals: 740
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 11361,10257,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 193,0,0| Number of FF evals: 1669
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - false: 382,0,0| Number of FF evals: 375
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 933,0,0| Number of FF evals: 523
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 454: 27,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 5998,2646,0| Number of FF evals: 5421
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - false: 190,0,0| Number of FF evals: 308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 456: 27,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 2005,0,0| Number of FF evals: 1025
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;II)V: Line 455: 27,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2226,1923,236| Number of FF evals: 14205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 2005,0,0| Number of FF evals: 689
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 226,0,0| Number of FF evals: 507
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 1349,256,0| Number of FF evals: 2965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 2528,1435,162| Number of FF evals: 6358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 44,0,0| Number of FF evals: 423
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 89,0,0| Number of FF evals: 337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 9045,8015,18| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 2210,1468,109| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 3828,3109,1190| Number of FF evals: 7971
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 1090,0,0| Number of FF evals: 1920
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 2137,1551,73| Number of FF evals: 12601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 1588,0,0| Number of FF evals: 847
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 2252,2000,89| Number of FF evals: 12601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - false: 382,0,0| Number of FF evals: 425
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 728,0,0| Number of FF evals: 529
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 5129,1499,0| Number of FF evals: 3266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 338,0,0| Number of FF evals: 302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - true: 1063,0,0| Number of FF evals: 700
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 17791,13678,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 131,0,0| Number of FF evals: 178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 11182,9424,159| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 772,636,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 72,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 44,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - true: 1191,0,0| Number of FF evals: 895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 432,0,0| Number of FF evals: 1006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 2156,818,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 833,521,84| Number of FF evals: 6795
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1912,1172,1| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 1063,0,0| Number of FF evals: 457
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 1752,547,0| Number of FF evals: 3844
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 22409,18419,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 2692,2316,208| Number of FF evals: 14205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 41,0,0| Number of FF evals: 457
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 6554,0,0| Number of FF evals: 1737
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 139,0,0| Number of FF evals: 1231
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 44,0,0| Number of FF evals: 186
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1180: 933,0,0| Number of FF evals: 397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 1323,0,0| Number of FF evals: 714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1182: 933,0,0| Number of FF evals: 397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 44,0,0| Number of FF evals: 181
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 2052,1337,137| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - true: 479,0,0| Number of FF evals: 655
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: Line 1186: 933,0,0| Number of FF evals: 397
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 430,0,0| Number of FF evals: 393
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 479,0,0| Number of FF evals: 274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 479,0,0| Number of FF evals: 274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 2005,0,0| Number of FF evals: 790
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 6493,5763,0| Number of FF evals: 12900
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 8563,4228,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 1390,0,0| Number of FF evals: 1761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 2005,0,0| Number of FF evals: 723
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 382,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 382,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 1301,697,0| Number of FF evals: 6770
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 382,0,0| Number of FF evals: 230
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 472: 1076,0,0| Number of FF evals: 842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 473: 1076,0,0| Number of FF evals: 842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: Line 471: 1076,0,0| Number of FF evals: 842
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.getDouble()D: Line 162: 124,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 156,0,0| Number of FF evals: 176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 4527,0,0| Number of FF evals: 1385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - true: 690,0,0| Number of FF evals: 573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 2489,1530,274| Number of FF evals: 9279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 640: 44,0,0| Number of FF evals: 72
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 10198,9441,0| Number of FF evals: 7826
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 4542,2581,0| Number of FF evals: 6508
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 156,0,0| Number of FF evals: 176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 1063,0,0| Number of FF evals: 464
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 806,0,0| Number of FF evals: 383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 3370,2544,9| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 3453,2051,344| Number of FF evals: 14241
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 382,0,0| Number of FF evals: 491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 27364,21989,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 124,0,0| Number of FF evals: 264
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 7394,6754,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - true: 584,0,0| Number of FF evals: 590
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 58945,49903,38482| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 6731,0,0| Number of FF evals: 1755
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 1052,0,0| Number of FF evals: 1926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 58945,49903,38635| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 2239,1440,109| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 1588,0,0| Number of FF evals: 858
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1783,1068,136| Number of FF evals: 12520
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 1774,623,0| Number of FF evals: 4421
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 66,0,0| Number of FF evals: 504
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 2127,1402,2| Number of FF evals: 13908
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 17716,14086,0| Number of FF evals: 14102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 10683,6735,0| Number of FF evals: 10193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 933,0,0| Number of FF evals: 643
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 139,0,0| Number of FF evals: 595
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 53,0,0| Number of FF evals: 201
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 14882,11393,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 14452,13053,0| Number of FF evals: 14236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 64,0,0| Number of FF evals: 326
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 25461,20446,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 3646,0,0| Number of FF evals: 1113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - true: 33,0,0| Number of FF evals: 547
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 2784,0,0| Number of FF evals: 926
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 8833,5872,0| Number of FF evals: 7464
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2035: 210,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 2045,1330,137| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: Line 2283: 2784,0,0| Number of FF evals: 924
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: Line 1258: 933,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 284,0,0| Number of FF evals: 1784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 2158,1418,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 1725,0,0| Number of FF evals: 620
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 407,36,0| Number of FF evals: 2635
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - true: 249,0,0| Number of FF evals: 489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - true: 65,0,0| Number of FF evals: 602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 4032,3599,1101| Number of FF evals: 14239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 20584,16553,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 1568,1189,344| Number of FF evals: 8236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: Line 2161: 124,0,0| Number of FF evals: 102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 226,0,0| Number of FF evals: 507
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 1063,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 1573,70,0| Number of FF evals: 2452
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 1323,0,0| Number of FF evals: 537
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: root-Branch: 210,0,0| Number of FF evals: 286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 5511,1843,0| Number of FF evals: 3399
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 7377,6418,152| Number of FF evals: 14238
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 933,0,0| Number of FF evals: 448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 382,0,0| Number of FF evals: 337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 6731,0,0| Number of FF evals: 1762
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 78,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - true: 933,0,0| Number of FF evals: 435
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 210,0,0| Number of FF evals: 124
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1271: 933,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 461,0,0| Number of FF evals: 352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1270: 933,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1273: 933,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - true: 2784,0,0| Number of FF evals: 1418
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1272: 933,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 25713,24956,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 2310,0,0| Number of FF evals: 796
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 2024,1281,85| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1274: 933,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 10198,9441,0| Number of FF evals: 7848
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 7578,2790,0| Number of FF evals: 6652
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 124,0,0| Number of FF evals: 234
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 3724,1717,0| Number of FF evals: 4213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 10656,8649,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 479,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: Line 2239: 9042,0,0| Number of FF evals: 2220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 2005,0,0| Number of FF evals: 953
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 118,0,0| Number of FF evals: 277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 4879,2538,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 25659,24916,14| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 3899,3134,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 1063,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 156,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 156,0,0| Number of FF evals: 269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - false: 124,0,0| Number of FF evals: 292
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 1063,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 584,0,0| Number of FF evals: 301
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 10130,9387,0| Number of FF evals: 7848
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 1588,0,0| Number of FF evals: 817
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 20584,16553,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: root-Branch: 690,0,0| Number of FF evals: 666
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1323,0,0| Number of FF evals: 818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 58945,49903,38549| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 1063,0,0| Number of FF evals: 544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 318,0,0| Number of FF evals: 537
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 15288,11971,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 806,0,0| Number of FF evals: 449
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 16169,12913,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1177: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: Line 1176: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 2784,0,0| Number of FF evals: 1062
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 318,0,0| Number of FF evals: 537
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 806,0,0| Number of FF evals: 793
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I6 Branch 165 IF_ICMPNE L1517 - false: 16,0,0| Number of FF evals: 1188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 1292,598,0| Number of FF evals: 4111
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 4048,804,0| Number of FF evals: 7728
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 382,0,0| Number of FF evals: 331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1970,1230,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 28712,24168,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I113 Branch 125 IFEQ L978 - true: 160,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 1323,0,0| Number of FF evals: 515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 155,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 2463,0,0| Number of FF evals: 1120
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 6554,0,0| Number of FF evals: 1739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 81,0,0| Number of FF evals: 285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: Line 2427: 210,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 9024,7997,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1862,0,0| Number of FF evals: 660
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 124,0,0| Number of FF evals: 110
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 894,0,0| Number of FF evals: 1289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 3056,1086,0| Number of FF evals: 3867
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 806,0,0| Number of FF evals: 391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 15907,10165,0| Number of FF evals: 9730
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 806,0,0| Number of FF evals: 391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.getDouble()D: root-Branch: 124,0,0| Number of FF evals: 809
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 102,0,0| Number of FF evals: 535
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I6 Branch 71 IFNULL L620 - true: 131,0,0| Number of FF evals: 247
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 124,0,0| Number of FF evals: 796
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 115,0,0| Number of FF evals: 577
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1039: 30,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 4527,0,0| Number of FF evals: 1359
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 2015,1275,68| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: root-Branch: 210,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1033: 30,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 479,0,0| Number of FF evals: 274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 326,0,0| Number of FF evals: 906
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1034: 30,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 2073,1333,59| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 2156,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 38,0,0| Number of FF evals: 400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 4769,0,0| Number of FF evals: 1446
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 1868,1143,6| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 560,0,0| Number of FF evals: 1924
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 1403,36,0| Number of FF evals: 2277
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1720,1408,222| Number of FF evals: 13717
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: Line 2399: 1191,0,0| Number of FF evals: 487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 2342,2144,0| Number of FF evals: 14136
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 2575,1124,0| Number of FF evals: 3459
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 594,0,0| Number of FF evals: 2194
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 23676,18193,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - true: 227,0,0| Number of FF evals: 518
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 2342,2144,0| Number of FF evals: 14136
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 2544,2165,348| Number of FF evals: 14205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 2619,0,0| Number of FF evals: 1139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 518,0,0| Number of FF evals: 1364
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 2268,972,0| Number of FF evals: 5792
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 10420,8366,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 933,0,0| Number of FF evals: 417
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 1588,0,0| Number of FF evals: 612
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 4527,0,0| Number of FF evals: 1291
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 408,0,0| Number of FF evals: 1039
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 1568,1189,345| Number of FF evals: 8236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 3125,0,0| Number of FF evals: 1003
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 715: 382,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 1137,335,0| Number of FF evals: 3177
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 717: 382,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 721: 382,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 1900,445,0| Number of FF evals: 3514
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 3441,0,0| Number of FF evals: 1208
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 723: 382,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 479,0,0| Number of FF evals: 666
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 724: 382,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 725: 382,0,0| Number of FF evals: 203
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 210,0,0| Number of FF evals: 308
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 2045,1303,68| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - true: 9042,0,0| Number of FF evals: 2439
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 124,0,0| Number of FF evals: 88
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3450,3052,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3282,2496,0| Number of FF evals: 14102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - false: 479,0,0| Number of FF evals: 590
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 4387,3294,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 382,0,0| Number of FF evals: 213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 4387,3294,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 47731,38689,0| Number of FF evals: 11371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 4387,3294,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 11062,8330,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 4387,3294,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 18243,9201,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 958,218,0| Number of FF evals: 3927
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 833,516,84| Number of FF evals: 6799
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - true: 382,0,0| Number of FF evals: 509
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 2318,1547,60| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 3596,2680,0| Number of FF evals: 13339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I12 Branch 118 IFEQ L953 - false: 16,0,0| Number of FF evals: 653
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 2310,0,0| Number of FF evals: 799
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: Line 2156: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 10048,8954,0| Number of FF evals: 14236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 5436,0,0| Number of FF evals: 1510
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 17554,12395,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 7336,6259,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 2799,1413,0| Number of FF evals: 4584
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 382,0,0| Number of FF evals: 207
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 1588,0,0| Number of FF evals: 1016
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 2179,0,0| Number of FF evals: 1592
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 4527,0,0| Number of FF evals: 1289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 543,0,0| Number of FF evals: 1440
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 2073,1333,59| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 968,766,0| Number of FF evals: 8739
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 1063,0,0| Number of FF evals: 464
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 933,0,0| Number of FF evals: 755
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 8282,4858,3924| Number of FF evals: 3821
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 1063,0,0| Number of FF evals: 1012
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: root-Branch: 124,0,0| Number of FF evals: 182
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 8272,4122,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 210,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 939,0,0| Number of FF evals: 1915
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 387,0,0| Number of FF evals: 332
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 210,0,0| Number of FF evals: 125
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I33 Branch 112 IFNULL L878 - false: 119,0,0| Number of FF evals: 618
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 568: 2443,0,0| Number of FF evals: 1884
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 57,0,0| Number of FF evals: 231
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 139,0,0| Number of FF evals: 1232
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 2104,1969,0| Number of FF evals: 10313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - false: 479,0,0| Number of FF evals: 606
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1577: 295,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - true: 210,0,0| Number of FF evals: 463
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 124,0,0| Number of FF evals: 115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 1725,0,0| Number of FF evals: 642
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 124,0,0| Number of FF evals: 115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: Line 2355: 690,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 4911,4394,0| Number of FF evals: 10141
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 9490,8586,0| Number of FF evals: 14236
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 38,0,0| Number of FF evals: 401
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 479,0,0| Number of FF evals: 237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 573,0,0| Number of FF evals: 761
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 11000,9265,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 124,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 3407,2448,276| Number of FF evals: 14205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - false: 44,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 13004,11523,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 6731,0,0| Number of FF evals: 2227
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 1996,508,0| Number of FF evals: 2606
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 71,0,0| Number of FF evals: 217
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 560,0,0| Number of FF evals: 1924
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 184,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 13005,10601,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 295,0,0| Number of FF evals: 867
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - false: 44,0,0| Number of FF evals: 253
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 6671,4749,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 58945,49903,38529| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 11934,11177,67| Number of FF evals: 8525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 86,0,0| Number of FF evals: 322
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 806,0,0| Number of FF evals: 426
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 9161,8082,85| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 68,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 99,0,0| Number of FF evals: 607
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2033,1752,236| Number of FF evals: 12783
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 9266,1890,0| Number of FF evals: 6102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 720,0,0| Number of FF evals: 2359
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2033,1752,236| Number of FF evals: 12783
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: Line 2295: 806,0,0| Number of FF evals: 391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 5955,4669,0| Number of FF evals: 6712
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 4,0,0| Number of FF evals: 585
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 2489,1530,274| Number of FF evals: 9279
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - false: 479,0,0| Number of FF evals: 596
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 3724,1717,0| Number of FF evals: 4151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 479,0,0| Number of FF evals: 585
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 5436,0,0| Number of FF evals: 1655
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - false: 584,0,0| Number of FF evals: 640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 3724,1717,0| Number of FF evals: 4151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 216,0,0| Number of FF evals: 501
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 3724,1717,0| Number of FF evals: 4151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 1594,517,0| Number of FF evals: 4371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - true: 641,0,0| Number of FF evals: 1491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 3724,1717,0| Number of FF evals: 4151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 23388,16445,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.siblings()Ljava/lang/Iterable;: root-Branch: 933,0,0| Number of FF evals: 611
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 3724,1717,0| Number of FF evals: 4151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 3724,1717,0| Number of FF evals: 4151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 295,0,0| Number of FF evals: 178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: Line 2275: 479,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSortedPropTypes()[I: I11 Branch 111 IFNULL L873 - false: 111,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - true: 32,0,0| Number of FF evals: 384
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 2463,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - true: 17,0,0| Number of FF evals: 163
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 6333,5448,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 6333,5448,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 193,0,0| Number of FF evals: 1669
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 933,0,0| Number of FF evals: 724
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1323,0,0| Number of FF evals: 530
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1017: 30,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 10523,8465,99| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 34,0,0| Number of FF evals: 1145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.appendStringTree(Ljava/lang/Appendable;)V: Line 1025: 30,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 3640,1696,0| Number of FF evals: 4213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 47731,38689,0| Number of FF evals: 11371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 476,0,0| Number of FF evals: 491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: Line 114: 479,0,0| Number of FF evals: 242
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 284,0,0| Number of FF evals: 571
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;II)V: root-Branch: 210,0,0| Number of FF evals: 237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - false: 479,0,0| Number of FF evals: 557
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 479,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 813,565,1| Number of FF evals: 6805
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 479,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 210,0,0| Number of FF evals: 410
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 210,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 355,0,0| Number of FF evals: 311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 1163,423,0| Number of FF evals: 6188
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1751,1503,1| Number of FF evals: 14205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 18097,15924,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 210,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 210,0,0| Number of FF evals: 142
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 2005,0,0| Number of FF evals: 705
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 479,0,0| Number of FF evals: 262
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 3125,0,0| Number of FF evals: 1076
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 1063,0,0| Number of FF evals: 570
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: Line 902: 2005,0,0| Number of FF evals: 716
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 3930,459,0| Number of FF evals: 3093
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPosition(I)V: root-Branch: 44,0,0| Number of FF evals: 310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 44,0,0| Number of FF evals: 296
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 1207,153,30| Number of FF evals: 2621
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 2528,2326,0| Number of FF evals: 14136
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 120,0,0| Number of FF evals: 281
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 8221,5848,6| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 2528,2326,0| Number of FF evals: 14136
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 2179,0,0| Number of FF evals: 1580
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 8800,7135,0| Number of FF evals: 13863
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 2179,0,0| Number of FF evals: 1580
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 872,0,0| Number of FF evals: 813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 8145,4260,1128| Number of FF evals: 4540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: Line 1598: 584,0,0| Number of FF evals: 297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 543,0,0| Number of FF evals: 1440
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 479,0,0| Number of FF evals: 349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I70 Branch 122 IF_ICMPNE L966 - false: 36,0,0| Number of FF evals: 565
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 9082,8045,48| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 189,0,0| Number of FF evals: 442
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 7208,6122,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 173,0,0| Number of FF evals: 335
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 1076,0,0| Number of FF evals: 1069
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 806,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 3125,0,0| Number of FF evals: 979
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 1588,0,0| Number of FF evals: 609
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 284,0,0| Number of FF evals: 1838
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 968,852,92| Number of FF evals: 7682
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 238,40,0| Number of FF evals: 3998
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 887,771,92| Number of FF evals: 7160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 6052,3977,17| Number of FF evals: 4596
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 4109,0,0| Number of FF evals: 1515
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - false: 139,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 13386,11187,0| Number of FF evals: 9484
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1862,0,0| Number of FF evals: 743
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 14322,12429,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 14322,12429,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1977,1235,107| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2033,1752,236| Number of FF evals: 12783
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 7336,6259,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNoSideEffectsCall()Z: Line 2147: 690,0,0| Number of FF evals: 343
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 2619,0,0| Number of FF evals: 883
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 11033,9285,20| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 813,565,1| Number of FF evals: 6805
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 1323,0,0| Number of FF evals: 1095
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 6888,2768,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 2223,1510,0| Number of FF evals: 5677
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - false: 584,0,0| Number of FF evals: 638
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - true: 295,0,0| Number of FF evals: 740
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 295,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 3125,0,0| Number of FF evals: 1032
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 3103,2026,0| Number of FF evals: 8831
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 149,0,0| Number of FF evals: 603
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 251,0,0| Number of FF evals: 570
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 2821,2332,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 382,0,0| Number of FF evals: 213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 382,0,0| Number of FF evals: 213
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 64,0,0| Number of FF evals: 191
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - false: 479,0,0| Number of FF evals: 605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 683,30,0| Number of FF evals: 2178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 64,0,0| Number of FF evals: 269
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 936,211,1| Number of FF evals: 4162
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 584,0,0| Number of FF evals: 827
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 569,0,0| Number of FF evals: 686
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 8014,6718,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 622: 139,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 210,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 2148,1917,89| Number of FF evals: 12601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 210,0,0| Number of FF evals: 139
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 624: 131,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 625: 131,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 626: 131,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 627: 131,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 8014,6718,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 596,0,0| Number of FF evals: 1046
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 123,0,0| Number of FF evals: 1031
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: Line 630: 131,0,0| Number of FF evals: 171
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - false: 479,0,0| Number of FF evals: 602
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I87 Branch 123 IFEQ L970 - true: 160,0,0| Number of FF evals: 657
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 116,0,0| Number of FF evals: 302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 81,0,0| Number of FF evals: 344
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 14322,12429,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 77,0,0| Number of FF evals: 274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 1063,0,0| Number of FF evals: 464
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 2136,1394,109| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 14322,12429,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: Line 2391: 382,0,0| Number of FF evals: 207
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 14322,12429,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 14322,12429,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 8646,5393,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 1032,0,0| Number of FF evals: 1220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 1492,0,0| Number of FF evals: 1758
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 14322,12429,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 14322,12429,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 2156,0,0| Number of FF evals: 1053
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 1492,0,0| Number of FF evals: 1758
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 1492,0,0| Number of FF evals: 1758
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - false: 479,0,0| Number of FF evals: 614
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 16131,15205,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 1588,0,0| Number of FF evals: 585
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 9800,8200,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 9800,8200,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 7089,5415,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 1063,0,0| Number of FF evals: 464
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 7185,5495,80| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSyntheticBlock()Z: root-Branch: 124,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 24842,20658,2| Number of FF evals: 8611
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 3262,0,0| Number of FF evals: 1936
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSyntheticBlock()Z: Line 1951: 124,0,0| Number of FF evals: 118
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 15012,13735,109| Number of FF evals: 14168
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.valueOf()I: Line 2060: 210,0,0| Number of FF evals: 135
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 2463,0,0| Number of FF evals: 815
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: Line 534: 210,0,0| Number of FF evals: 130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - true: 2463,0,0| Number of FF evals: 894
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 5653,4501,946| Number of FF evals: 14239
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 322: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 1725,0,0| Number of FF evals: 889
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 1310,158,62| Number of FF evals: 2678
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 9835,8115,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 10806,7892,0| Number of FF evals: 12349
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 933,0,0| Number of FF evals: 404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 1566,479,0| Number of FF evals: 3685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 382,0,0| Number of FF evals: 387
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 1779,702,0| Number of FF evals: 5304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 3125,0,0| Number of FF evals: 994
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 295,0,0| Number of FF evals: 526
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 3125,0,0| Number of FF evals: 994
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 4387,3294,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 524,0,0| Number of FF evals: 362
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - false: 584,0,0| Number of FF evals: 594
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 11835,9689,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 382,0,0| Number of FF evals: 642
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 124,0,0| Number of FF evals: 106
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 2310,0,0| Number of FF evals: 1405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeProp(Lcom/google/javascript/rhino/Node$PropListItem;I)Lcom/google/javascript/rhino/Node$PropListItem;: I32 Branch 103 IF_ACMPEQ L804 - false: 3207,2096,453| Number of FF evals: 11371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: Line 2327: 2463,0,0| Number of FF evals: 818
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 500,0,0| Number of FF evals: 699
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 6860,2070,0| Number of FF evals: 4414
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1904,1647,2| Number of FF evals: 14205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 1588,0,0| Number of FF evals: 598
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 4852,2778,0| Number of FF evals: 3898
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 33 IFNONNULL L379 - true: 53,0,0| Number of FF evals: 289
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToShallow(Lcom/google/javascript/rhino/Node;)Z: Line 1497: 124,0,0| Number of FF evals: 115
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 173,0,0| Number of FF evals: 326
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 11114,6967,0| Number of FF evals: 13887
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 2463,0,0| Number of FF evals: 965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 479,0,0| Number of FF evals: 347
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 17406,9387,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 6731,0,0| Number of FF evals: 2055
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 1752,0,0| Number of FF evals: 1021
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLocalResultCall()Z: root-Branch: 44,0,0| Number of FF evals: 328
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 479,0,0| Number of FF evals: 489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 2223,1494,0| Number of FF evals: 5672
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 4387,3294,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 933,0,0| Number of FF evals: 417
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 2507,0,0| Number of FF evals: 1113
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 3000,2271,0| Number of FF evals: 10478
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 13275,12581,5| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 1725,0,0| Number of FF evals: 748
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 479,0,0| Number of FF evals: 310
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 1310,158,61| Number of FF evals: 2678
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1408: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 8645,5464,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - false: 479,0,0| Number of FF evals: 548
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1223,483,0| Number of FF evals: 7329
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1411: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 837: 44,0,0| Number of FF evals: 48
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 608,0,0| Number of FF evals: 1182
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: Line 838: 44,0,0| Number of FF evals: 48
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 3125,0,0| Number of FF evals: 1008
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 18009,14635,0| Number of FF evals: 12901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 3125,0,0| Number of FF evals: 1008
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildCount()I: Line 1407: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 210,0,0| Number of FF evals: 175
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - true: 17,0,0| Number of FF evals: 1148
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 2005,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - false: 479,0,0| Number of FF evals: 595
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 2005,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 30,0,0| Number of FF evals: 199
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 2005,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 2005,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 2005,0,0| Number of FF evals: 709
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 15939,13912,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 959,217,16| Number of FF evals: 3945
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - false: 479,0,0| Number of FF evals: 601
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 58945,49903,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 998,273,1| Number of FF evals: 4612
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - false: 479,0,0| Number of FF evals: 613
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 2005,0,0| Number of FF evals: 1046
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 18009,14635,0| Number of FF evals: 12901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 43 IFNONNULL L419 - true: 131,0,0| Number of FF evals: 591
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 3664,2572,0| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 58945,49903,38536| Number of FF evals: 14235
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 7037,6098,1| Number of FF evals: 14102
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - true: 382,0,0| Number of FF evals: 204
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 42,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 44,0,0| Number of FF evals: 54
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I97 Branch 124 IF_ICMPEQ L972 - true: 36,0,0| Number of FF evals: 1197
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: Line 2415: 44,0,0| Number of FF evals: 80
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: Line 1173: 124,0,0| Number of FF evals: 117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setCharno(I)V: Line 1172: 124,0,0| Number of FF evals: 117
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - true: 210,0,0| Number of FF evals: 303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: Line 2299: 1063,0,0| Number of FF evals: 465
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 353,0,0| Number of FF evals: 573
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4833,3459,0| Number of FF evals: 9487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 527,0,0| Number of FF evals: 1023
* Search finished after 605s and 336 generations, 171137 statements, best individual has fitness: 3088.0
* Minimizing test suite
[MASTER] 13:11:11.958 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 92%
* Total number of goals: 853
* Number of covered goals: 789
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 714
* Number of covered goals: 590
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 102
* Number of covered goals: 102
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 454
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 4536
* Number of covered goals: 2049
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 211
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 77%
* Total number of goals: 714
* Number of covered goals: 552
* Generated 654 tests with total length 9737
* Resulting test suite's coverage: 75% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:12:23.708 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6783666666666667% of time used, but only 23/654 tests minimized), falling back to using all assertions
[MASTER] 13:12:43.127 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 13:12:54.364 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 11 seconds more than allowed.
[MASTER] 13:12:58.284 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_28_1628255577345/com/google/javascript/rhino/Node_28_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_28_1628255577345/com/google/javascript/rhino/Node_28_tmp__ESTest_scaffolding.java]]
[MASTER] 13:12:58.284 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:12:58.284 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:12:58.290 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 338
[MASTER] 13:12:58.290 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_28_1628255577345/com/google/javascript/rhino/Node_28_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 13:12:58.290 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 13:12:58.294 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_28_1628255577345/com/google/javascript/rhino/Node_28_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:12:57 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import com.google.javascript.rhino.Node;
13: import java.util.Iterator;
14: import java.util.function.Consumer;
15: import org.evosuite.runtime.EvoRunner;
16: import org.evosuite.runtime.EvoRunnerParameters;
17: import org.evosuite.runtime.ViolatedAssumptionAnswer;
18: import org.junit.runner.RunWith;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
21: public class Node_28_tmp__ESTest extends Node_28_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       Node node0 = new Node(307);
26:       assertEquals(57, Node.REFLECTED_OBJECT);
27:       assertEquals(52, Node.LENGTH);
28:       assertEquals(40, Node.ORIGINALNAME_PROP);
29:       assertEquals(15, Node.NO_SIDE_EFFECTS);
30:       assertEquals(8, Node.FLAG_NO_THROWS);
31:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
32:       assertEquals(50, Node.FREE_CALL);
33:       assertEquals(54, Node.SLASH_V);
34:       assertEquals(46, Node.IS_NAMESPACE);
35:       assertEquals(55, Node.INFERRED_FUNCTION);
36:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
37:       assertEquals(39, Node.EMPTY_BLOCK);
38:       assertEquals(57, Node.LAST_PROP);
39:       assertEquals(47, Node.IS_DISPATCHER);
40:       assertEquals(2, Node.POST_FLAG);
41:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
42:       assertEquals(30, Node.VAR_ARGS_NAME);
43:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
44:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
45:       assertEquals(29, Node.JSDOC_INFO_PROP);
46:       assertEquals(53, Node.INPUT_ID);
47:       assertEquals(43, Node.IS_CONSTANT_NAME);
48:       assertEquals(56, Node.CHANGE_TIME);
49:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
50:       assertEquals(36, Node.QUOTED_PROP);
51:       assertEquals(51, Node.STATIC_SOURCE_FILE);
52:       assertEquals(12, Node.COLUMN_BITS);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(4095, Node.COLUMN_MASK);
55:       assertEquals(48, Node.DIRECTIVES);
56:       assertEquals(1, Node.DECR_FLAG);
57:       assertEquals(49, Node.DIRECT_EVAL);
58:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
59:       assertEquals(37, Node.OPT_ARG_NAME);
60:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
61:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
62:       assertFalse(node0.isAdd());
63:       assertFalse(node0.isBlock());
64:       assertFalse(node0.isVar());
65:       assertFalse(node0.isDo());
66:       assertFalse(node0.isWhile());
67:       assertFalse(node0.isSetterDef());
68:       assertFalse(node0.isNew());
69:       assertFalse(node0.isOr());
70:       assertFalse(node0.isReturn());
71:       assertFalse(node0.isNull());
72:       assertFalse(node0.isTypeOf());
73:       assertFalse(node0.hasMoreThanOneChild());
74:       assertFalse(node0.hasChildren());
75:       assertFalse(node0.isDec());
76:       assertFalse(node0.isName());
77:       assertFalse(node0.isAssign());
78:       assertFalse(node0.isGetElem());
79:       assertFalse(node0.isCall());
80:       assertFalse(node0.isCatch());
81:       assertFalse(node0.isVoid());
82:       assertEquals((-1), node0.getLineno());
83:       assertFalse(node0.isTry());
84:       assertFalse(node0.isTrue());
85:       assertFalse(node0.isRegExp());
86:       assertFalse(node0.isFor());
87:       assertFalse(node0.isEmpty());
88:       assertFalse(node0.isScript());
89:       assertFalse(node0.isDefaultCase());
90:       assertFalse(node0.hasOneChild());
91:       assertFalse(node0.isLabel());
92:       assertFalse(node0.isAssignAdd());
93:       assertFalse(node0.isParamList());
94:       assertEquals(307, node0.getType());
95:       assertFalse(node0.isNumber());
96:       assertFalse(node0.isGetterDef());
97:       assertEquals(0, node0.getChildCount());
98:       assertFalse(node0.isLabelName());
99:       assertFalse(node0.isStringKey());
100:       assertFalse(node0.isArrayLit());
101:       assertFalse(node0.isSwitch());
102:       assertFalse(node0.isHook());
103:       assertEquals((-1), node0.getCharno());
104:       assertFalse(node0.isCase());
105:       assertFalse(node0.isString());
106:       assertFalse(node0.isThrow());
107:       assertFalse(node0.isInc());
108:       assertFalse(node0.isIn());
109:       assertFalse(node0.isInstanceOf());
110:       assertFalse(node0.isNE());
111:       assertFalse(node0.isThis());
112:       assertFalse(node0.isComma());
113:       assertFalse(node0.isWith());
114:       assertFalse(node0.isIf());
115:       assertFalse(node0.isDelProp());
116:       assertFalse(node0.isBreak());
117:       assertFalse(node0.isExprResult());
118:       assertFalse(node0.isFunction());
119:       assertFalse(node0.isDebugger());
120:       assertFalse(node0.isNot());
121:       assertFalse(node0.isGetProp());
122:       assertFalse(node0.isObjectLit());
123:       assertEquals((-1), node0.getSourcePosition());
124:       assertFalse(node0.isFalse());
125:       assertFalse(node0.isContinue());
126:       assertFalse(node0.isAnd());
127:       assertFalse(node0.isCast());
128:       assertNotNull(node0);
129:       
130:       int int0 = node0.getLength();
131:       assertEquals(0, int0);
132:       assertEquals(57, Node.REFLECTED_OBJECT);
133:       assertEquals(52, Node.LENGTH);
134:       assertEquals(40, Node.ORIGINALNAME_PROP);
135:       assertEquals(15, Node.NO_SIDE_EFFECTS);
136:       assertEquals(8, Node.FLAG_NO_THROWS);
137:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
138:       assertEquals(50, Node.FREE_CALL);
139:       assertEquals(54, Node.SLASH_V);
140:       assertEquals(46, Node.IS_NAMESPACE);
141:       assertEquals(55, Node.INFERRED_FUNCTION);
142:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
143:       assertEquals(39, Node.EMPTY_BLOCK);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(47, Node.IS_DISPATCHER);
146:       assertEquals(2, Node.POST_FLAG);
147:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
148:       assertEquals(30, Node.VAR_ARGS_NAME);
149:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
150:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
151:       assertEquals(29, Node.JSDOC_INFO_PROP);
152:       assertEquals(53, Node.INPUT_ID);
153:       assertEquals(43, Node.IS_CONSTANT_NAME);
154:       assertEquals(56, Node.CHANGE_TIME);
155:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
156:       assertEquals(36, Node.QUOTED_PROP);
157:       assertEquals(51, Node.STATIC_SOURCE_FILE);
158:       assertEquals(12, Node.COLUMN_BITS);
159:       assertEquals(32, Node.INCRDECR_PROP);
160:       assertEquals(4095, Node.COLUMN_MASK);
161:       assertEquals(48, Node.DIRECTIVES);
162:       assertEquals(1, Node.DECR_FLAG);
163:       assertEquals(49, Node.DIRECT_EVAL);
164:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
165:       assertEquals(37, Node.OPT_ARG_NAME);
166:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
167:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
168:       assertFalse(node0.isAdd());
169:       assertFalse(node0.isBlock());
170:       assertFalse(node0.isVar());
171:       assertFalse(node0.isDo());
172:       assertFalse(node0.isWhile());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isNew());
175:       assertFalse(node0.isOr());
176:       assertFalse(node0.isReturn());
177:       assertFalse(node0.isNull());
178:       assertFalse(node0.isTypeOf());
179:       assertFalse(node0.hasMoreThanOneChild());
180:       assertFalse(node0.hasChildren());
181:       assertFalse(node0.isDec());
182:       assertFalse(node0.isName());
183:       assertFalse(node0.isAssign());
184:       assertFalse(node0.isGetElem());
185:       assertFalse(node0.isCall());
186:       assertFalse(node0.isCatch());
187:       assertFalse(node0.isVoid());
188:       assertEquals((-1), node0.getLineno());
189:       assertFalse(node0.isTry());
190:       assertFalse(node0.isTrue());
191:       assertFalse(node0.isRegExp());
192:       assertFalse(node0.isFor());
193:       assertFalse(node0.isEmpty());
194:       assertFalse(node0.isScript());
195:       assertFalse(node0.isDefaultCase());
196:       assertFalse(node0.hasOneChild());
197:       assertFalse(node0.isLabel());
198:       assertFalse(node0.isAssignAdd());
199:       assertFalse(node0.isParamList());
200:       assertEquals(307, node0.getType());
201:       assertFalse(node0.isNumber());
202:       assertFalse(node0.isGetterDef());
203:       assertEquals(0, node0.getChildCount());
204:       assertFalse(node0.isLabelName());
205:       assertFalse(node0.isStringKey());
206:       assertFalse(node0.isArrayLit());
207:       assertFalse(node0.isSwitch());
208:       assertFalse(node0.isHook());
209:       assertEquals((-1), node0.getCharno());
210:       assertFalse(node0.isCase());
211:       assertFalse(node0.isString());
212:       assertFalse(node0.isThrow());
213:       assertFalse(node0.isInc());
214:       assertFalse(node0.isIn());
215:       assertFalse(node0.isInstanceOf());
216:       assertFalse(node0.isNE());
217:       assertFalse(node0.isThis());
218:       assertFalse(node0.isComma());
219:       assertFalse(node0.isWith());
220:       assertFalse(node0.isIf());
221:       assertFalse(node0.isDelProp());
222:       assertFalse(node0.isBreak());
223:       assertFalse(node0.isExprResult());
224:       assertFalse(node0.isFunction());
225:       assertFalse(node0.isDebugger());
226:       assertFalse(node0.isNot());
227:       assertFalse(node0.isGetProp());
228:       assertFalse(node0.isObjectLit());
229:       assertEquals((-1), node0.getSourcePosition());
230:       assertFalse(node0.isFalse());
231:       assertFalse(node0.isContinue());
232:       assertFalse(node0.isAnd());
233:       assertFalse(node0.isCast());
234:       
235:       Iterable<Node> iterable0 = node0.children();
236:       assertEquals(57, Node.REFLECTED_OBJECT);
237:       assertEquals(52, Node.LENGTH);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(15, Node.NO_SIDE_EFFECTS);
240:       assertEquals(8, Node.FLAG_NO_THROWS);
241:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(54, Node.SLASH_V);
244:       assertEquals(46, Node.IS_NAMESPACE);
245:       assertEquals(55, Node.INFERRED_FUNCTION);
246:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
247:       assertEquals(39, Node.EMPTY_BLOCK);
248:       assertEquals(57, Node.LAST_PROP);
249:       assertEquals(47, Node.IS_DISPATCHER);
250:       assertEquals(2, Node.POST_FLAG);
251:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
252:       assertEquals(30, Node.VAR_ARGS_NAME);
253:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
254:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
255:       assertEquals(29, Node.JSDOC_INFO_PROP);
256:       assertEquals(53, Node.INPUT_ID);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
260:       assertEquals(36, Node.QUOTED_PROP);
261:       assertEquals(51, Node.STATIC_SOURCE_FILE);
262:       assertEquals(12, Node.COLUMN_BITS);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(4095, Node.COLUMN_MASK);
265:       assertEquals(48, Node.DIRECTIVES);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(49, Node.DIRECT_EVAL);
268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
269:       assertEquals(37, Node.OPT_ARG_NAME);
270:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
271:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
272:       assertFalse(node0.isAdd());
273:       assertFalse(node0.isBlock());
274:       assertFalse(node0.isVar());
275:       assertFalse(node0.isDo());
276:       assertFalse(node0.isWhile());
277:       assertFalse(node0.isSetterDef());
278:       assertFalse(node0.isNew());
279:       assertFalse(node0.isOr());
280:       assertFalse(node0.isReturn());
281:       assertFalse(node0.isNull());
282:       assertFalse(node0.isTypeOf());
283:       assertFalse(node0.hasMoreThanOneChild());
284:       assertFalse(node0.hasChildren());
285:       assertFalse(node0.isDec());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isAssign());
288:       assertFalse(node0.isGetElem());
289:       assertFalse(node0.isCall());
290:       assertFalse(node0.isCatch());
291:       assertFalse(node0.isVoid());
292:       assertEquals((-1), node0.getLineno());
293:       assertFalse(node0.isTry());
294:       assertFalse(node0.isTrue());
295:       assertFalse(node0.isRegExp());
296:       assertFalse(node0.isFor());
297:       assertFalse(node0.isEmpty());
298:       assertFalse(node0.isScript());
299:       assertFalse(node0.isDefaultCase());
300:       assertFalse(node0.hasOneChild());
301:       assertFalse(node0.isLabel());
302:       assertFalse(node0.isAssignAdd());
303:       assertFalse(node0.isParamList());
304:       assertEquals(307, node0.getType());
305:       assertFalse(node0.isNumber());
306:       assertFalse(node0.isGetterDef());
307:       assertEquals(0, node0.getChildCount());
308:       assertFalse(node0.isLabelName());
309:       assertFalse(node0.isStringKey());
310:       assertFalse(node0.isArrayLit());
311:       assertFalse(node0.isSwitch());
312:       assertFalse(node0.isHook());
313:       assertEquals((-1), node0.getCharno());
314:       assertFalse(node0.isCase());
315:       assertFalse(node0.isString());
316:       assertFalse(node0.isThrow());
317:       assertFalse(node0.isInc());
318:       assertFalse(node0.isIn());
319:       assertFalse(node0.isInstanceOf());
320:       assertFalse(node0.isNE());
321:       assertFalse(node0.isThis());
322:       assertFalse(node0.isComma());
323:       assertFalse(node0.isWith());
324:       assertFalse(node0.isIf());
325:       assertFalse(node0.isDelProp());
326:       assertFalse(node0.isBreak());
327:       assertFalse(node0.isExprResult());
328:       assertFalse(node0.isFunction());
329:       assertFalse(node0.isDebugger());
330:       assertFalse(node0.isNot());
331:       assertFalse(node0.isGetProp());
332:       assertFalse(node0.isObjectLit());
333:       assertEquals((-1), node0.getSourcePosition());
334:       assertFalse(node0.isFalse());
335:       assertFalse(node0.isContinue());
336:       assertFalse(node0.isAnd());
337:       assertFalse(node0.isCast());
338:       assertFalse(iterable0.contains(node0));
339:       assertNotNull(iterable0);
340:       
341:       Node node1 = new Node(512, node0);
342:       assertEquals(57, Node.REFLECTED_OBJECT);
343:       assertEquals(52, Node.LENGTH);
344:       assertEquals(40, Node.ORIGINALNAME_PROP);
345:       assertEquals(15, Node.NO_SIDE_EFFECTS);
346:       assertEquals(8, Node.FLAG_NO_THROWS);
347:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(54, Node.SLASH_V);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(55, Node.INFERRED_FUNCTION);
352:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
353:       assertEquals(39, Node.EMPTY_BLOCK);
354:       assertEquals(57, Node.LAST_PROP);
355:       assertEquals(47, Node.IS_DISPATCHER);
356:       assertEquals(2, Node.POST_FLAG);
357:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
358:       assertEquals(30, Node.VAR_ARGS_NAME);
359:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
360:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
361:       assertEquals(29, Node.JSDOC_INFO_PROP);
362:       assertEquals(53, Node.INPUT_ID);
363:       assertEquals(43, Node.IS_CONSTANT_NAME);
364:       assertEquals(56, Node.CHANGE_TIME);
365:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
366:       assertEquals(36, Node.QUOTED_PROP);
367:       assertEquals(51, Node.STATIC_SOURCE_FILE);
368:       assertEquals(12, Node.COLUMN_BITS);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(4095, Node.COLUMN_MASK);
371:       assertEquals(48, Node.DIRECTIVES);
372:       assertEquals(1, Node.DECR_FLAG);
373:       assertEquals(49, Node.DIRECT_EVAL);
374:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
375:       assertEquals(37, Node.OPT_ARG_NAME);
376:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
377:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
378:       assertEquals(52, Node.LENGTH);
379:       assertEquals(57, Node.REFLECTED_OBJECT);
380:       assertEquals(54, Node.SLASH_V);
381:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
382:       assertEquals(50, Node.FREE_CALL);
383:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
384:       assertEquals(40, Node.ORIGINALNAME_PROP);
385:       assertEquals(49, Node.DIRECT_EVAL);
386:       assertEquals(48, Node.DIRECTIVES);
387:       assertEquals(32, Node.INCRDECR_PROP);
388:       assertEquals(46, Node.IS_NAMESPACE);
389:       assertEquals(12, Node.COLUMN_BITS);
390:       assertEquals(4095, Node.COLUMN_MASK);
391:       assertEquals(51, Node.STATIC_SOURCE_FILE);
392:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
393:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
394:       assertEquals(1, Node.DECR_FLAG);
395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
396:       assertEquals(53, Node.INPUT_ID);
397:       assertEquals(36, Node.QUOTED_PROP);
398:       assertEquals(43, Node.IS_CONSTANT_NAME);
399:       assertEquals(56, Node.CHANGE_TIME);
400:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
401:       assertEquals(37, Node.OPT_ARG_NAME);
402:       assertEquals(55, Node.INFERRED_FUNCTION);
403:       assertEquals(8, Node.FLAG_NO_THROWS);
404:       assertEquals(2, Node.POST_FLAG);
405:       assertEquals(30, Node.VAR_ARGS_NAME);
406:       assertEquals(15, Node.NO_SIDE_EFFECTS);
407:       assertEquals(57, Node.LAST_PROP);
408:       assertEquals(47, Node.IS_DISPATCHER);
409:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
410:       assertEquals(29, Node.JSDOC_INFO_PROP);
411:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
412:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
413:       assertEquals(39, Node.EMPTY_BLOCK);
414:       assertFalse(node1.equals((Object)node0));
415:       assertFalse(node0.isAdd());
416:       assertFalse(node0.isBlock());
417:       assertFalse(node0.isVar());
418:       assertFalse(node0.isDo());
419:       assertFalse(node0.isWhile());
420:       assertFalse(node0.isSetterDef());
421:       assertFalse(node0.isNew());
422:       assertFalse(node0.isOr());
423:       assertFalse(node0.isReturn());
424:       assertFalse(node0.isNull());
425:       assertFalse(node0.isTypeOf());
426:       assertFalse(node0.hasMoreThanOneChild());
427:       assertFalse(node0.hasChildren());
428:       assertFalse(node0.isDec());
429:       assertFalse(node0.isName());
430:       assertFalse(node0.isAssign());
431:       assertFalse(node0.isGetElem());
432:       assertFalse(node0.isCall());
433:       assertFalse(node0.isCatch());
434:       assertFalse(node0.isVoid());
435:       assertEquals((-1), node0.getLineno());
436:       assertFalse(node0.isTry());
437:       assertFalse(node0.isTrue());
438:       assertFalse(node0.isRegExp());
439:       assertFalse(node0.isFor());
440:       assertFalse(node0.isEmpty());
441:       assertFalse(node0.isScript());
442:       assertFalse(node0.isDefaultCase());
443:       assertFalse(node0.hasOneChild());
444:       assertFalse(node0.isLabel());
445:       assertFalse(node0.isAssignAdd());
446:       assertFalse(node0.isParamList());
447:       assertEquals(307, node0.getType());
448:       assertFalse(node0.isNumber());
449:       assertFalse(node0.isGetterDef());
450:       assertEquals(0, node0.getChildCount());
451:       assertFalse(node0.isLabelName());
452:       assertFalse(node0.isStringKey());
453:       assertFalse(node0.isArrayLit());
454:       assertFalse(node0.isSwitch());
455:       assertFalse(node0.isHook());
456:       assertEquals((-1), node0.getCharno());
457:       assertFalse(node0.isCase());
458:       assertFalse(node0.isString());
459:       assertFalse(node0.isThrow());
460:       assertFalse(node0.isInc());
461:       assertFalse(node0.isIn());
462:       assertFalse(node0.isInstanceOf());
463:       assertFalse(node0.isNE());
464:       assertFalse(node0.isThis());
465:       assertFalse(node0.isComma());
466:       assertFalse(node0.isWith());
467:       assertFalse(node0.isIf());
468:       assertFalse(node0.isDelProp());
469:       assertFalse(node0.isBreak());
470:       assertFalse(node0.isExprResult());
471:       assertFalse(node0.isFunction());
472:       assertFalse(node0.isDebugger());
473:       assertFalse(node0.isNot());
474:       assertFalse(node0.isGetProp());
475:       assertFalse(node0.isObjectLit());
476:       assertEquals((-1), node0.getSourcePosition());
477:       assertFalse(node0.isFalse());
478:       assertFalse(node0.isContinue());
479:       assertFalse(node0.isAnd());
480:       assertFalse(node0.isCast());
481:       assertFalse(node1.isNew());
482:       assertFalse(node1.isBlock());
483:       assertFalse(node1.isAdd());
484:       assertFalse(node1.isDo());
485:       assertFalse(node1.isName());
486:       assertFalse(node1.isStringKey());
487:       assertFalse(node1.isOr());
488:       assertFalse(node1.isLabel());
489:       assertFalse(node1.isAssignAdd());
490:       assertFalse(node1.isParamList());
491:       assertFalse(node1.isSetterDef());
492:       assertFalse(node1.isLabelName());
493:       assertFalse(node1.isContinue());
494:       assertFalse(node1.isVar());
495:       assertFalse(node1.isCast());
496:       assertFalse(node1.isFunction());
497:       assertFalse(node1.isDebugger());
498:       assertFalse(node1.isTrue());
499:       assertFalse(node1.isExprResult());
500:       assertFalse(node1.isDefaultCase());
501:       assertFalse(node1.isVoid());
502:       assertFalse(node1.isAnd());
503:       assertFalse(node1.isEmpty());
504:       assertEquals((-1), node1.getSourcePosition());
505:       assertFalse(node1.isObjectLit());
506:       assertFalse(node1.isNot());
507:       assertFalse(node1.isGetProp());
508:       assertFalse(node1.isReturn());
509:       assertFalse(node1.isNull());
510:       assertFalse(node1.isBreak());
511:       assertFalse(node1.isDelProp());
512:       assertFalse(node1.isGetElem());
513:       assertFalse(node1.isCall());
514:       assertTrue(node1.hasOneChild());
515:       assertFalse(node1.isWhile());
516:       assertFalse(node1.isDec());
517:       assertFalse(node1.isComma());
518:       assertFalse(node1.isAssign());
519:       assertFalse(node1.isTypeOf());
520:       assertEquals(512, node1.getType());
521:       assertEquals((-1), node1.getCharno());
522:       assertFalse(node1.isInc());
523:       assertFalse(node1.isSwitch());
524:       assertFalse(node1.isCase());
525:       assertFalse(node1.isString());
526:       assertFalse(node1.isIn());
527:       assertFalse(node1.isFalse());
528:       assertFalse(node1.isThrow());
529:       assertFalse(node1.isScript());
530:       assertFalse(node1.isArrayLit());
531:       assertFalse(node1.isTry());
532:       assertFalse(node1.isNumber());
533:       assertFalse(node1.isGetterDef());
534:       assertFalse(node1.isThis());
535:       assertFalse(node1.isNE());
536:       assertTrue(node1.hasChildren());
537:       assertFalse(node1.isIf());
538:       assertEquals((-1), node1.getLineno());
539:       assertFalse(node1.isCatch());
540:       assertFalse(node1.isFor());
541:       assertFalse(node1.isHook());
542:       assertFalse(node1.isInstanceOf());
543:       assertFalse(node1.hasMoreThanOneChild());
544:       assertFalse(node1.isWith());
545:       assertEquals(1, node1.getChildCount());
546:       assertFalse(node1.isRegExp());
547:       assertNotNull(node1);
548:       
549:       Node node2 = node0.srcrefTree(node1);
550:       assertEquals(57, Node.REFLECTED_OBJECT);
551:       assertEquals(52, Node.LENGTH);
552:       assertEquals(40, Node.ORIGINALNAME_PROP);
553:       assertEquals(15, Node.NO_SIDE_EFFECTS);
554:       assertEquals(8, Node.FLAG_NO_THROWS);
555:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
556:       assertEquals(50, Node.FREE_CALL);
557:       assertEquals(54, Node.SLASH_V);
558:       assertEquals(46, Node.IS_NAMESPACE);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(57, Node.LAST_PROP);
563:       assertEquals(47, Node.IS_DISPATCHER);
564:       assertEquals(2, Node.POST_FLAG);
565:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
566:       assertEquals(30, Node.VAR_ARGS_NAME);
567:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
568:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
569:       assertEquals(29, Node.JSDOC_INFO_PROP);
570:       assertEquals(53, Node.INPUT_ID);
571:       assertEquals(43, Node.IS_CONSTANT_NAME);
572:       assertEquals(56, Node.CHANGE_TIME);
573:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
574:       assertEquals(36, Node.QUOTED_PROP);
575:       assertEquals(51, Node.STATIC_SOURCE_FILE);
576:       assertEquals(12, Node.COLUMN_BITS);
577:       assertEquals(32, Node.INCRDECR_PROP);
578:       assertEquals(4095, Node.COLUMN_MASK);
579:       assertEquals(48, Node.DIRECTIVES);
580:       assertEquals(1, Node.DECR_FLAG);
581:       assertEquals(49, Node.DIRECT_EVAL);
582:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
583:       assertEquals(37, Node.OPT_ARG_NAME);
584:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
585:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
586:       assertEquals(52, Node.LENGTH);
587:       assertEquals(57, Node.REFLECTED_OBJECT);
588:       assertEquals(54, Node.SLASH_V);
589:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
590:       assertEquals(50, Node.FREE_CALL);
591:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
592:       assertEquals(40, Node.ORIGINALNAME_PROP);
593:       assertEquals(49, Node.DIRECT_EVAL);
594:       assertEquals(48, Node.DIRECTIVES);
595:       assertEquals(32, Node.INCRDECR_PROP);
596:       assertEquals(46, Node.IS_NAMESPACE);
597:       assertEquals(12, Node.COLUMN_BITS);
598:       assertEquals(4095, Node.COLUMN_MASK);
599:       assertEquals(51, Node.STATIC_SOURCE_FILE);
600:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
601:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
602:       assertEquals(1, Node.DECR_FLAG);
603:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
604:       assertEquals(53, Node.INPUT_ID);
605:       assertEquals(36, Node.QUOTED_PROP);
606:       assertEquals(43, Node.IS_CONSTANT_NAME);
607:       assertEquals(56, Node.CHANGE_TIME);
608:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
609:       assertEquals(37, Node.OPT_ARG_NAME);
610:       assertEquals(55, Node.INFERRED_FUNCTION);
611:       assertEquals(8, Node.FLAG_NO_THROWS);
612:       assertEquals(2, Node.POST_FLAG);
613:       assertEquals(30, Node.VAR_ARGS_NAME);
614:       assertEquals(15, Node.NO_SIDE_EFFECTS);
615:       assertEquals(57, Node.LAST_PROP);
616:       assertEquals(47, Node.IS_DISPATCHER);
617:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
618:       assertEquals(29, Node.JSDOC_INFO_PROP);
619:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
620:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
621:       assertEquals(39, Node.EMPTY_BLOCK);
622:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
623:       assertEquals(54, Node.SLASH_V);
624:       assertEquals(57, Node.REFLECTED_OBJECT);
625:       assertEquals(30, Node.VAR_ARGS_NAME);
626:       assertEquals(52, Node.LENGTH);
627:       assertEquals(1, Node.DECR_FLAG);
628:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
629:       assertEquals(12, Node.COLUMN_BITS);
630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
631:       assertEquals(57, Node.LAST_PROP);
632:       assertEquals(32, Node.INCRDECR_PROP);
633:       assertEquals(48, Node.DIRECTIVES);
634:       assertEquals(37, Node.OPT_ARG_NAME);
635:       assertEquals(39, Node.EMPTY_BLOCK);
636:       assertEquals(4095, Node.COLUMN_MASK);
637:       assertEquals(8, Node.FLAG_NO_THROWS);
638:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
639:       assertEquals(56, Node.CHANGE_TIME);
640:       assertEquals(49, Node.DIRECT_EVAL);
641:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
642:       assertEquals(53, Node.INPUT_ID);
643:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
644:       assertEquals(36, Node.QUOTED_PROP);
645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
646:       assertEquals(55, Node.INFERRED_FUNCTION);
647:       assertEquals(29, Node.JSDOC_INFO_PROP);
648:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
649:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
650:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
651:       assertEquals(46, Node.IS_NAMESPACE);
652:       assertEquals(51, Node.STATIC_SOURCE_FILE);
653:       assertEquals(47, Node.IS_DISPATCHER);
654:       assertEquals(2, Node.POST_FLAG);
655:       assertEquals(50, Node.FREE_CALL);
656:       assertEquals(40, Node.ORIGINALNAME_PROP);
657:       assertEquals(43, Node.IS_CONSTANT_NAME);
658:       assertFalse(node0.equals((Object)node1));
659:       assertFalse(node1.equals((Object)node0));
660:       assertFalse(node2.equals((Object)node1));
661:       assertFalse(node0.isAdd());
662:       assertFalse(node0.isBlock());
663:       assertFalse(node0.isVar());
664:       assertFalse(node0.isDo());
665:       assertFalse(node0.isWhile());
666:       assertFalse(node0.isSetterDef());
667:       assertFalse(node0.isNew());
668:       assertFalse(node0.isOr());
669:       assertFalse(node0.isReturn());
670:       assertFalse(node0.isNull());
671:       assertFalse(node0.isTypeOf());
672:       assertFalse(node0.hasMoreThanOneChild());
673:       assertFalse(node0.hasChildren());
674:       assertFalse(node0.isDec());
675:       assertFalse(node0.isName());
676:       assertFalse(node0.isAssign());
677:       assertFalse(node0.isGetElem());
678:       assertFalse(node0.isCall());
679:       assertFalse(node0.isCatch());
680:       assertFalse(node0.isVoid());
681:       assertEquals((-1), node0.getLineno());
682:       assertFalse(node0.isTry());
683:       assertFalse(node0.isTrue());
684:       assertFalse(node0.isRegExp());
685:       assertFalse(node0.isFor());
686:       assertFalse(node0.isEmpty());
687:       assertFalse(node0.isScript());
688:       assertFalse(node0.isDefaultCase());
689:       assertFalse(node0.hasOneChild());
690:       assertFalse(node0.isLabel());
691:       assertFalse(node0.isAssignAdd());
692:       assertFalse(node0.isParamList());
693:       assertEquals(307, node0.getType());
694:       assertFalse(node0.isNumber());
695:       assertFalse(node0.isGetterDef());
696:       assertEquals(0, node0.getChildCount());
697:       assertFalse(node0.isLabelName());
698:       assertFalse(node0.isStringKey());
699:       assertFalse(node0.isArrayLit());
700:       assertFalse(node0.isSwitch());
701:       assertFalse(node0.isHook());
702:       assertEquals((-1), node0.getCharno());
703:       assertFalse(node0.isCase());
704:       assertFalse(node0.isString());
705:       assertFalse(node0.isThrow());
706:       assertFalse(node0.isInc());
707:       assertFalse(node0.isIn());
708:       assertFalse(node0.isInstanceOf());
709:       assertFalse(node0.isNE());
710:       assertFalse(node0.isThis());
711:       assertFalse(node0.isComma());
712:       assertFalse(node0.isWith());
713:       assertFalse(node0.isIf());
714:       assertFalse(node0.isDelProp());
715:       assertFalse(node0.isBreak());
716:       assertFalse(node0.isExprResult());
717:       assertFalse(node0.isFunction());
718:       assertFalse(node0.isDebugger());
719:       assertFalse(node0.isNot());
720:       assertFalse(node0.isGetProp());
721:       assertFalse(node0.isObjectLit());
722:       assertEquals((-1), node0.getSourcePosition());
723:       assertFalse(node0.isFalse());
724:       assertFalse(node0.isContinue());
725:       assertFalse(node0.isAnd());
726:       assertFalse(node0.isCast());
727:       assertFalse(node1.isNew());
728:       assertFalse(node1.isBlock());
729:       assertFalse(node1.isAdd());
730:       assertFalse(node1.isDo());
731:       assertFalse(node1.isName());
732:       assertFalse(node1.isStringKey());
733:       assertFalse(node1.isOr());
734:       assertFalse(node1.isLabel());
735:       assertFalse(node1.isAssignAdd());
736:       assertFalse(node1.isParamList());
737:       assertFalse(node1.isSetterDef());
738:       assertFalse(node1.isLabelName());
739:       assertFalse(node1.isContinue());
740:       assertFalse(node1.isVar());
741:       assertFalse(node1.isCast());
742:       assertFalse(node1.isFunction());
743:       assertFalse(node1.isDebugger());
744:       assertFalse(node1.isTrue());
745:       assertFalse(node1.isExprResult());
746:       assertFalse(node1.isDefaultCase());
747:       assertFalse(node1.isVoid());
748:       assertFalse(node1.isAnd());
749:       assertFalse(node1.isEmpty());
750:       assertEquals((-1), node1.getSourcePosition());
751:       assertFalse(node1.isObjectLit());
752:       assertFalse(node1.isNot());
753:       assertFalse(node1.isGetProp());
754:       assertFalse(node1.isReturn());
755:       assertFalse(node1.isNull());
756:       assertFalse(node1.isBreak());
757:       assertFalse(node1.isDelProp());
758:       assertFalse(node1.isGetElem());
759:       assertFalse(node1.isCall());
760:       assertTrue(node1.hasOneChild());
761:       assertFalse(node1.isWhile());
762:       assertFalse(node1.isDec());
763:       assertFalse(node1.isComma());
764:       assertFalse(node1.isAssign());
765:       assertFalse(node1.isTypeOf());
766:       assertEquals(512, node1.getType());
767:       assertEquals((-1), node1.getCharno());
768:       assertFalse(node1.isInc());
769:       assertFalse(node1.isSwitch());
770:       assertFalse(node1.isCase());
771:       assertFalse(node1.isString());
772:       assertFalse(node1.isIn());
773:       assertFalse(node1.isFalse());
774:       assertFalse(node1.isThrow());
775:       assertFalse(node1.isScript());
776:       assertFalse(node1.isArrayLit());
777:       assertFalse(node1.isTry());
778:       assertFalse(node1.isNumber());
779:       assertFalse(node1.isGetterDef());
780:       assertFalse(node1.isThis());
781:       assertFalse(node1.isNE());
782:       assertTrue(node1.hasChildren());
783:       assertFalse(node1.isIf());
784:       assertEquals((-1), node1.getLineno());
785:       assertFalse(node1.isCatch());
786:       assertFalse(node1.isFor());
787:       assertFalse(node1.isHook());
788:       assertFalse(node1.isInstanceOf());
789:       assertFalse(node1.hasMoreThanOneChild());
790:       assertFalse(node1.isWith());
791:       assertEquals(1, node1.getChildCount());
792:       assertFalse(node1.isRegExp());
793:       assertEquals((-1), node2.getCharno());
794:       assertFalse(node2.isInc());
795:       assertFalse(node2.isCase());
796:       assertFalse(node2.isSwitch());
797:       assertFalse(node2.isThrow());
798:       assertFalse(node2.isHook());
799:       assertFalse(node2.isFalse());
800:       assertFalse(node2.isComma());
801:       assertFalse(node2.isGetProp());
802:       assertFalse(node2.isThis());
803:       assertFalse(node2.isFor());
804:       assertFalse(node2.isNot());
805:       assertFalse(node2.isString());
806:       assertFalse(node2.isGetterDef());
807:       assertFalse(node2.isObjectLit());
808:       assertFalse(node2.isExprResult());
809:       assertFalse(node2.isTrue());
810:       assertFalse(node2.isVoid());
811:       assertFalse(node2.isDefaultCase());
812:       assertFalse(node2.isArrayLit());
813:       assertFalse(node2.isGetElem());
814:       assertFalse(node2.isAssign());
815:       assertEquals(0, node2.getChildCount());
816:       assertFalse(node2.isNull());
817:       assertFalse(node2.isBreak());
818:       assertFalse(node2.isAssignAdd());
819:       assertFalse(node2.isDelProp());
820:       assertFalse(node2.isName());
821:       assertFalse(node2.isAdd());
822:       assertFalse(node2.isEmpty());
823:       assertFalse(node2.isOr());
824:       assertFalse(node2.isBlock());
825:       assertFalse(node2.isDo());
826:       assertFalse(node2.isNew());
827:       assertFalse(node2.isWhile());
828:       assertFalse(node2.isVar());
829:       assertFalse(node2.isCall());
830:       assertFalse(node2.isReturn());
831:       assertFalse(node2.isLabel());
832:       assertFalse(node2.isContinue());
833:       assertFalse(node2.hasMoreThanOneChild());
834:       assertFalse(node2.isTypeOf());
835:       assertEquals(307, node2.getType());
836:       assertFalse(node2.isParamList());
837:       assertFalse(node2.isDec());
838:       assertEquals((-1), node2.getSourcePosition());
839:       assertFalse(node2.hasChildren());
840:       assertFalse(node2.isLabelName());
841:       assertFalse(node2.isStringKey());
842:       assertFalse(node2.hasOneChild());
843:       assertFalse(node2.isNumber());
844:       assertFalse(node2.isRegExp());
845:       assertFalse(node2.isScript());
846:       assertFalse(node2.isDebugger());
847:       assertFalse(node2.isTry());
848:       assertFalse(node2.isAnd());
849:       assertFalse(node2.isCast());
850:       assertFalse(node2.isCatch());
851:       assertFalse(node2.isInstanceOf());
852:       assertFalse(node2.isWith());
853:       assertFalse(node2.isFunction());
854:       assertFalse(node2.isNE());
855:       assertFalse(node2.isSetterDef());
856:       assertEquals((-1), node2.getLineno());
857:       assertFalse(node2.isIf());
858:       assertFalse(node2.isIn());
859:       assertSame(node0, node2);
860:       assertNotSame(node0, node1);
861:       assertNotSame(node1, node0);
862:       assertNotSame(node1, node2);
863:       assertNotSame(node2, node1);
864:       assertSame(node2, node0);
865:       assertNotNull(node2);
866:       
867:       node0.addSuppression("VyuMrE[%b~N\"");
868:       assertEquals(57, Node.REFLECTED_OBJECT);
869:       assertEquals(52, Node.LENGTH);
870:       assertEquals(40, Node.ORIGINALNAME_PROP);
871:       assertEquals(15, Node.NO_SIDE_EFFECTS);
872:       assertEquals(8, Node.FLAG_NO_THROWS);
873:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
874:       assertEquals(50, Node.FREE_CALL);
875:       assertEquals(54, Node.SLASH_V);
876:       assertEquals(46, Node.IS_NAMESPACE);
877:       assertEquals(55, Node.INFERRED_FUNCTION);
878:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
879:       assertEquals(39, Node.EMPTY_BLOCK);
880:       assertEquals(57, Node.LAST_PROP);
881:       assertEquals(47, Node.IS_DISPATCHER);
882:       assertEquals(2, Node.POST_FLAG);
883:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
886:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
887:       assertEquals(29, Node.JSDOC_INFO_PROP);
888:       assertEquals(53, Node.INPUT_ID);
889:       assertEquals(43, Node.IS_CONSTANT_NAME);
890:       assertEquals(56, Node.CHANGE_TIME);
891:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
892:       assertEquals(36, Node.QUOTED_PROP);
893:       assertEquals(51, Node.STATIC_SOURCE_FILE);
894:       assertEquals(12, Node.COLUMN_BITS);
895:       assertEquals(32, Node.INCRDECR_PROP);
896:       assertEquals(4095, Node.COLUMN_MASK);
897:       assertEquals(48, Node.DIRECTIVES);
898:       assertEquals(1, Node.DECR_FLAG);
899:       assertEquals(49, Node.DIRECT_EVAL);
900:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
901:       assertEquals(37, Node.OPT_ARG_NAME);
902:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
903:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
904:       assertFalse(node0.equals((Object)node1));
905:       assertFalse(node0.isAdd());
906:       assertFalse(node0.isBlock());
907:       assertFalse(node0.isVar());
908:       assertFalse(node0.isDo());
909:       assertFalse(node0.isWhile());
910:       assertFalse(node0.isSetterDef());
911:       assertFalse(node0.isNew());
912:       assertFalse(node0.isOr());
913:       assertFalse(node0.isReturn());
914:       assertFalse(node0.isNull());
915:       assertFalse(node0.isTypeOf());
916:       assertFalse(node0.hasMoreThanOneChild());
917:       assertFalse(node0.hasChildren());
918:       assertFalse(node0.isDec());
919:       assertFalse(node0.isName());
920:       assertFalse(node0.isAssign());
921:       assertFalse(node0.isGetElem());
922:       assertFalse(node0.isCall());
923:       assertFalse(node0.isCatch());
924:       assertFalse(node0.isVoid());
925:       assertEquals((-1), node0.getLineno());
926:       assertFalse(node0.isTry());
927:       assertFalse(node0.isTrue());
928:       assertFalse(node0.isRegExp());
929:       assertFalse(node0.isFor());
930:       assertFalse(node0.isEmpty());
931:       assertFalse(node0.isScript());
932:       assertFalse(node0.isDefaultCase());
933:       assertFalse(node0.hasOneChild());
934:       assertFalse(node0.isLabel());
935:       assertFalse(node0.isAssignAdd());
936:       assertFalse(node0.isParamList());
937:       assertEquals(307, node0.getType());
938:       assertFalse(node0.isNumber());
939:       assertFalse(node0.isGetterDef());
940:       assertEquals(0, node0.getChildCount());
941:       assertFalse(node0.isLabelName());
942:       assertFalse(node0.isStringKey());
943:       assertFalse(node0.isArrayLit());
944:       assertFalse(node0.isSwitch());
945:       assertFalse(node0.isHook());
946:       assertEquals((-1), node0.getCharno());
947:       assertFalse(node0.isCase());
948:       assertFalse(node0.isString());
949:       assertFalse(node0.isThrow());
950:       assertFalse(node0.isInc());
951:       assertFalse(node0.isIn());
952:       assertFalse(node0.isInstanceOf());
953:       assertFalse(node0.isNE());
954:       assertFalse(node0.isThis());
955:       assertFalse(node0.isComma());
956:       assertFalse(node0.isWith());
957:       assertFalse(node0.isIf());
958:       assertFalse(node0.isDelProp());
959:       assertFalse(node0.isBreak());
960:       assertFalse(node0.isExprResult());
961:       assertFalse(node0.isFunction());
962:       assertFalse(node0.isDebugger());
963:       assertFalse(node0.isNot());
964:       assertFalse(node0.isGetProp());
965:       assertFalse(node0.isObjectLit());
966:       assertEquals((-1), node0.getSourcePosition());
967:       assertFalse(node0.isFalse());
968:       assertFalse(node0.isContinue());
969:       assertFalse(node0.isAnd());
970:       assertFalse(node0.isCast());
971:       assertSame(node0, node2);
972:       assertNotSame(node0, node1);
973:       
974:       Node node3 = new Node(227);
975:       assertEquals(43, Node.IS_CONSTANT_NAME);
976:       assertEquals(36, Node.QUOTED_PROP);
977:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
978:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
979:       assertEquals(4095, Node.COLUMN_MASK);
980:       assertEquals(48, Node.DIRECTIVES);
981:       assertEquals(56, Node.CHANGE_TIME);
982:       assertEquals(2, Node.POST_FLAG);
983:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
984:       assertEquals(8, Node.FLAG_NO_THROWS);
985:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
986:       assertEquals(47, Node.IS_DISPATCHER);
987:       assertEquals(55, Node.INFERRED_FUNCTION);
988:       assertEquals(52, Node.LENGTH);
989:       assertEquals(53, Node.INPUT_ID);
990:       assertEquals(29, Node.JSDOC_INFO_PROP);
991:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
992:       assertEquals(39, Node.EMPTY_BLOCK);
993:       assertEquals(15, Node.NO_SIDE_EFFECTS);
994:       assertEquals(57, Node.LAST_PROP);
995:       assertEquals(30, Node.VAR_ARGS_NAME);
996:       assertEquals(54, Node.SLASH_V);
997:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
998:       assertEquals(57, Node.REFLECTED_OBJECT);
999:       assertEquals(46, Node.IS_NAMESPACE);
1000:       assertEquals(49, Node.DIRECT_EVAL);
1001:       assertEquals(40, Node.ORIGINALNAME_PROP);
1002:       assertEquals(37, Node.OPT_ARG_NAME);
1003:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1004:       assertEquals(50, Node.FREE_CALL);
1005:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1006:       assertEquals(12, Node.COLUMN_BITS);
1007:       assertEquals(32, Node.INCRDECR_PROP);
1008:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1009:       assertEquals(1, Node.DECR_FLAG);
1010:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1011:       assertFalse(node3.equals((Object)node2));
1012:       assertFalse(node3.equals((Object)node0));
1013:       assertFalse(node3.equals((Object)node1));
1014:       assertFalse(node3.isDefaultCase());
1015:       assertFalse(node3.isCatch());
1016:       assertFalse(node3.isVoid());
1017:       assertFalse(node3.isParamList());
1018:       assertFalse(node3.isNull());
1019:       assertFalse(node3.isTrue());
1020:       assertFalse(node3.isDebugger());
1021:       assertFalse(node3.isFor());
1022:       assertFalse(node3.isDelProp());
1023:       assertFalse(node3.isName());
1024:       assertFalse(node3.isIf());
1025:       assertFalse(node3.isCall());
1026:       assertFalse(node3.isTry());
1027:       assertFalse(node3.isBlock());
1028:       assertFalse(node3.isRegExp());
1029:       assertFalse(node3.isContinue());
1030:       assertFalse(node3.isString());
1031:       assertFalse(node3.isWhile());
1032:       assertFalse(node3.isInc());
1033:       assertEquals((-1), node3.getLineno());
1034:       assertFalse(node3.isIn());
1035:       assertFalse(node3.isNE());
1036:       assertEquals((-1), node3.getSourcePosition());
1037:       assertFalse(node3.isFalse());
1038:       assertFalse(node3.isThrow());
1039:       assertFalse(node3.isCast());
1040:       assertFalse(node3.isSetterDef());
1041:       assertFalse(node3.isFunction());
1042:       assertFalse(node3.isNot());
1043:       assertFalse(node3.isWith());
1044:       assertFalse(node3.isAnd());
1045:       assertFalse(node3.isScript());
1046:       assertFalse(node3.isExprResult());
1047:       assertFalse(node3.isObjectLit());
1048:       assertFalse(node3.isAssign());
1049:       assertFalse(node3.isGetElem());
1050:       assertFalse(node3.isGetProp());
1051:       assertFalse(node3.isBreak());
1052:       assertFalse(node3.hasOneChild());
1053:       assertFalse(node3.isReturn());
1054:       assertFalse(node3.isInstanceOf());
1055:       assertFalse(node3.hasMoreThanOneChild());
1056:       assertEquals(227, node3.getType());
1057:       assertFalse(node3.isHook());
1058:       assertFalse(node3.isThis());
1059:       assertFalse(node3.isTypeOf());
1060:       assertFalse(node3.isDec());
1061:       assertFalse(node3.hasChildren());
1062:       assertFalse(node3.isComma());
1063:       assertFalse(node3.isDo());
1064:       assertFalse(node3.isSwitch());
1065:       assertFalse(node3.isCase());
1066:       assertFalse(node3.isNew());
1067:       assertFalse(node3.isOr());
1068:       assertFalse(node3.isAdd());
1069:       assertFalse(node3.isNumber());
1070:       assertFalse(node3.isGetterDef());
1071:       assertEquals((-1), node3.getCharno());
1072:       assertFalse(node3.isEmpty());
1073:       assertFalse(node3.isLabelName());
1074:       assertFalse(node3.isStringKey());
1075:       assertFalse(node3.isArrayLit());
1076:       assertFalse(node3.isLabel());
1077:       assertFalse(node3.isAssignAdd());
1078:       assertFalse(node3.isVar());
1079:       assertEquals(0, node3.getChildCount());
1080:       assertNotNull(node3);
1081:       
1082:       boolean boolean0 = node0.isEquivalentToTyped(node3);
1083:       assertFalse(boolean0);
1084:       assertEquals(57, Node.REFLECTED_OBJECT);
1085:       assertEquals(52, Node.LENGTH);
1086:       assertEquals(40, Node.ORIGINALNAME_PROP);
1087:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1088:       assertEquals(8, Node.FLAG_NO_THROWS);
1089:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1090:       assertEquals(50, Node.FREE_CALL);
1091:       assertEquals(54, Node.SLASH_V);
1092:       assertEquals(46, Node.IS_NAMESPACE);
1093:       assertEquals(55, Node.INFERRED_FUNCTION);
1094:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1095:       assertEquals(39, Node.EMPTY_BLOCK);
1096:       assertEquals(57, Node.LAST_PROP);
1097:       assertEquals(47, Node.IS_DISPATCHER);
1098:       assertEquals(2, Node.POST_FLAG);
1099:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1100:       assertEquals(30, Node.VAR_ARGS_NAME);
1101:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1102:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1103:       assertEquals(29, Node.JSDOC_INFO_PROP);
1104:       assertEquals(53, Node.INPUT_ID);
1105:       assertEquals(43, Node.IS_CONSTANT_NAME);
1106:       assertEquals(56, Node.CHANGE_TIME);
1107:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1108:       assertEquals(36, Node.QUOTED_PROP);
1109:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1110:       assertEquals(12, Node.COLUMN_BITS);
1111:       assertEquals(32, Node.INCRDECR_PROP);
1112:       assertEquals(4095, Node.COLUMN_MASK);
1113:       assertEquals(48, Node.DIRECTIVES);
1114:       assertEquals(1, Node.DECR_FLAG);
1115:       assertEquals(49, Node.DIRECT_EVAL);
1116:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1117:       assertEquals(37, Node.OPT_ARG_NAME);
1118:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1119:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1120:       assertEquals(43, Node.IS_CONSTANT_NAME);
1121:       assertEquals(36, Node.QUOTED_PROP);
1122:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1123:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1124:       assertEquals(4095, Node.COLUMN_MASK);
1125:       assertEquals(48, Node.DIRECTIVES);
1126:       assertEquals(56, Node.CHANGE_TIME);
1127:       assertEquals(2, Node.POST_FLAG);
1128:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1129:       assertEquals(8, Node.FLAG_NO_THROWS);
1130:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1131:       assertEquals(47, Node.IS_DISPATCHER);
1132:       assertEquals(55, Node.INFERRED_FUNCTION);
1133:       assertEquals(52, Node.LENGTH);
1134:       assertEquals(53, Node.INPUT_ID);
1135:       assertEquals(29, Node.JSDOC_INFO_PROP);
1136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1137:       assertEquals(39, Node.EMPTY_BLOCK);
1138:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1139:       assertEquals(57, Node.LAST_PROP);
1140:       assertEquals(30, Node.VAR_ARGS_NAME);
1141:       assertEquals(54, Node.SLASH_V);
1142:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1143:       assertEquals(57, Node.REFLECTED_OBJECT);
1144:       assertEquals(46, Node.IS_NAMESPACE);
1145:       assertEquals(49, Node.DIRECT_EVAL);
1146:       assertEquals(40, Node.ORIGINALNAME_PROP);
1147:       assertEquals(37, Node.OPT_ARG_NAME);
1148:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1149:       assertEquals(50, Node.FREE_CALL);
1150:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1151:       assertEquals(12, Node.COLUMN_BITS);
1152:       assertEquals(32, Node.INCRDECR_PROP);
1153:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1154:       assertEquals(1, Node.DECR_FLAG);
1155:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1156:       assertFalse(node0.equals((Object)node3));
1157:       assertFalse(node0.equals((Object)node1));
1158:       assertFalse(node3.equals((Object)node2));
1159:       assertFalse(node3.equals((Object)node0));
1160:       assertFalse(node3.equals((Object)node1));
1161:       assertFalse(node0.isAdd());
1162:       assertFalse(node0.isBlock());
1163:       assertFalse(node0.isVar());
1164:       assertFalse(node0.isDo());
1165:       assertFalse(node0.isWhile());
1166:       assertFalse(node0.isSetterDef());
1167:       assertFalse(node0.isNew());
1168:       assertFalse(node0.isOr());
1169:       assertFalse(node0.isReturn());
1170:       assertFalse(node0.isNull());
1171:       assertFalse(node0.isTypeOf());
1172:       assertFalse(node0.hasMoreThanOneChild());
1173:       assertFalse(node0.hasChildren());
1174:       assertFalse(node0.isDec());
1175:       assertFalse(node0.isName());
1176:       assertFalse(node0.isAssign());
1177:       assertFalse(node0.isGetElem());
1178:       assertFalse(node0.isCall());
1179:       assertFalse(node0.isCatch());
1180:       assertFalse(node0.isVoid());
1181:       assertEquals((-1), node0.getLineno());
1182:       assertFalse(node0.isTry());
1183:       assertFalse(node0.isTrue());
1184:       assertFalse(node0.isRegExp());
1185:       assertFalse(node0.isFor());
1186:       assertFalse(node0.isEmpty());
1187:       assertFalse(node0.isScript());
1188:       assertFalse(node0.isDefaultCase());
1189:       assertFalse(node0.hasOneChild());
1190:       assertFalse(node0.isLabel());
1191:       assertFalse(node0.isAssignAdd());
1192:       assertFalse(node0.isParamList());
1193:       assertEquals(307, node0.getType());
1194:       assertFalse(node0.isNumber());
1195:       assertFalse(node0.isGetterDef());
1196:       assertEquals(0, node0.getChildCount());
1197:       assertFalse(node0.isLabelName());
1198:       assertFalse(node0.isStringKey());
1199:       assertFalse(node0.isArrayLit());
1200:       assertFalse(node0.isSwitch());
1201:       assertFalse(node0.isHook());
1202:       assertEquals((-1), node0.getCharno());
1203:       assertFalse(node0.isCase());
1204:       assertFalse(node0.isString());
1205:       assertFalse(node0.isThrow());
1206:       assertFalse(node0.isInc());
1207:       assertFalse(node0.isIn());
1208:       assertFalse(node0.isInstanceOf());
1209:       assertFalse(node0.isNE());
1210:       assertFalse(node0.isThis());
1211:       assertFalse(node0.isComma());
1212:       assertFalse(node0.isWith());
1213:       assertFalse(node0.isIf());
1214:       assertFalse(node0.isDelProp());
1215:       assertFalse(node0.isBreak());
1216:       assertFalse(node0.isExprResult());
1217:       assertFalse(node0.isFunction());
1218:       assertFalse(node0.isDebugger());
1219:       assertFalse(node0.isNot());
1220:       assertFalse(node0.isGetProp());
1221:       assertFalse(node0.isObjectLit());
1222:       assertEquals((-1), node0.getSourcePosition());
1223:       assertFalse(node0.isFalse());
1224:       assertFalse(node0.isContinue());
1225:       assertFalse(node0.isAnd());
1226:       assertFalse(node0.isCast());
1227:       assertFalse(node3.isDefaultCase());
1228:       assertFalse(node3.isCatch());
1229:       assertFalse(node3.isVoid());
1230:       assertFalse(node3.isParamList());
1231:       assertFalse(node3.isNull());
1232:       assertFalse(node3.isTrue());
1233:       assertFalse(node3.isDebugger());
1234:       assertFalse(node3.isFor());
1235:       assertFalse(node3.isDelProp());
1236:       assertFalse(node3.isName());
1237:       assertFalse(node3.isIf());
1238:       assertFalse(node3.isCall());
1239:       assertFalse(node3.isTry());
1240:       assertFalse(node3.isBlock());
1241:       assertFalse(node3.isRegExp());
1242:       assertFalse(node3.isContinue());
1243:       assertFalse(node3.isString());
1244:       assertFalse(node3.isWhile());
1245:       assertFalse(node3.isInc());
1246:       assertEquals((-1), node3.getLineno());
1247:       assertFalse(node3.isIn());
1248:       assertFalse(node3.isNE());
1249:       assertEquals((-1), node3.getSourcePosition());
1250:       assertFalse(node3.isFalse());
1251:       assertFalse(node3.isThrow());
1252:       assertFalse(node3.isCast());
1253:       assertFalse(node3.isSetterDef());
1254:       assertFalse(node3.isFunction());
1255:       assertFalse(node3.isNot());
1256:       assertFalse(node3.isWith());
1257:       assertFalse(node3.isAnd());
1258:       assertFalse(node3.isScript());
1259:       assertFalse(node3.isExprResult());
1260:       assertFalse(node3.isObjectLit());
1261:       assertFalse(node3.isAssign());
1262:       assertFalse(node3.isGetElem());
1263:       assertFalse(node3.isGetProp());
1264:       assertFalse(node3.isBreak());
1265:       assertFalse(node3.hasOneChild());
1266:       assertFalse(node3.isReturn());
1267:       assertFalse(node3.isInstanceOf());
1268:       assertFalse(node3.hasMoreThanOneChild());
1269:       assertEquals(227, node3.getType());
1270:       assertFalse(node3.isHook());
1271:       assertFalse(node3.isThis());
1272:       assertFalse(node3.isTypeOf());
1273:       assertFalse(node3.isDec());
1274:       assertFalse(node3.hasChildren());
1275:       assertFalse(node3.isComma());
1276:       assertFalse(node3.isDo());
1277:       assertFalse(node3.isSwitch());
1278:       assertFalse(node3.isCase());
1279:       assertFalse(node3.isNew());
1280:       assertFalse(node3.isOr());
1281:       assertFalse(node3.isAdd());
1282:       assertFalse(node3.isNumber());
1283:       assertFalse(node3.isGetterDef());
1284:       assertEquals((-1), node3.getCharno());
1285:       assertFalse(node3.isEmpty());
1286:       assertFalse(node3.isLabelName());
1287:       assertFalse(node3.isStringKey());
1288:       assertFalse(node3.isArrayLit());
1289:       assertFalse(node3.isLabel());
1290:       assertFalse(node3.isAssignAdd());
1291:       assertFalse(node3.isVar());
1292:       assertEquals(0, node3.getChildCount());
1293:       assertSame(node0, node2);
1294:       assertNotSame(node0, node3);
1295:       assertNotSame(node0, node1);
1296:       assertNotSame(node3, node2);
1297:       assertNotSame(node3, node0);
1298:       assertNotSame(node3, node1);
1299:       
1300:       Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
1301:       assertEquals(57, Node.REFLECTED_OBJECT);
1302:       assertEquals(52, Node.LENGTH);
1303:       assertEquals(40, Node.ORIGINALNAME_PROP);
1304:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1305:       assertEquals(8, Node.FLAG_NO_THROWS);
1306:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1307:       assertEquals(50, Node.FREE_CALL);
1308:       assertEquals(54, Node.SLASH_V);
1309:       assertEquals(46, Node.IS_NAMESPACE);
1310:       assertEquals(55, Node.INFERRED_FUNCTION);
1311:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1312:       assertEquals(39, Node.EMPTY_BLOCK);
1313:       assertEquals(57, Node.LAST_PROP);
1314:       assertEquals(47, Node.IS_DISPATCHER);
1315:       assertEquals(2, Node.POST_FLAG);
1316:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1317:       assertEquals(30, Node.VAR_ARGS_NAME);
1318:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1319:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1320:       assertEquals(29, Node.JSDOC_INFO_PROP);
1321:       assertEquals(53, Node.INPUT_ID);
1322:       assertEquals(43, Node.IS_CONSTANT_NAME);
1323:       assertEquals(56, Node.CHANGE_TIME);
1324:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1325:       assertEquals(36, Node.QUOTED_PROP);
1326:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1327:       assertEquals(12, Node.COLUMN_BITS);
1328:       assertEquals(32, Node.INCRDECR_PROP);
1329:       assertEquals(4095, Node.COLUMN_MASK);
1330:       assertEquals(48, Node.DIRECTIVES);
1331:       assertEquals(1, Node.DECR_FLAG);
1332:       assertEquals(49, Node.DIRECT_EVAL);
1333:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1334:       assertEquals(37, Node.OPT_ARG_NAME);
1335:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1336:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1337:       assertFalse(node0.equals((Object)node3));
1338:       assertFalse(node0.equals((Object)node1));
1339:       assertFalse(node0.isAdd());
1340:       assertFalse(node0.isBlock());
1341:       assertFalse(node0.isVar());
1342:       assertFalse(node0.isDo());
1343:       assertFalse(node0.isWhile());
1344:       assertFalse(node0.isSetterDef());
1345:       assertFalse(node0.isNew());
1346:       assertFalse(node0.isOr());
1347:       assertFalse(node0.isReturn());
1348:       assertFalse(node0.isNull());
1349:       assertFalse(node0.isTypeOf());
1350:       assertFalse(node0.hasMoreThanOneChild());
1351:       assertFalse(node0.hasChildren());
1352:       assertFalse(node0.isDec());
1353:       assertFalse(node0.isName());
1354:       assertFalse(node0.isAssign());
1355:       assertFalse(node0.isGetElem());
1356:       assertFalse(node0.isCall());
1357:       assertFalse(node0.isCatch());
1358:       assertFalse(node0.isVoid());
1359:       assertEquals((-1), node0.getLineno());
1360:       assertFalse(node0.isTry());
1361:       assertFalse(node0.isTrue());
1362:       assertFalse(node0.isRegExp());
1363:       assertFalse(node0.isFor());
1364:       assertFalse(node0.isEmpty());
1365:       assertFalse(node0.isScript());
1366:       assertFalse(node0.isDefaultCase());
1367:       assertFalse(node0.hasOneChild());
1368:       assertFalse(node0.isLabel());
1369:       assertFalse(node0.isAssignAdd());
1370:       assertFalse(node0.isParamList());
1371:       assertEquals(307, node0.getType());
1372:       assertFalse(node0.isNumber());
1373:       assertFalse(node0.isGetterDef());
1374:       assertEquals(0, node0.getChildCount());
1375:       assertFalse(node0.isLabelName());
1376:       assertFalse(node0.isStringKey());
1377:       assertFalse(node0.isArrayLit());
1378:       assertFalse(node0.isSwitch());
1379:       assertFalse(node0.isHook());
1380:       assertEquals((-1), node0.getCharno());
1381:       assertFalse(node0.isCase());
1382:       assertFalse(node0.isString());
1383:       assertFalse(node0.isThrow());
1384:       assertFalse(node0.isInc());
1385:       assertFalse(node0.isIn());
1386:       assertFalse(node0.isInstanceOf());
1387:       assertFalse(node0.isNE());
1388:       assertFalse(node0.isThis());
1389:       assertFalse(node0.isComma());
1390:       assertFalse(node0.isWith());
1391:       assertFalse(node0.isIf());
1392:       assertFalse(node0.isDelProp());
1393:       assertFalse(node0.isBreak());
1394:       assertFalse(node0.isExprResult());
1395:       assertFalse(node0.isFunction());
1396:       assertFalse(node0.isDebugger());
1397:       assertFalse(node0.isNot());
1398:       assertFalse(node0.isGetProp());
1399:       assertFalse(node0.isObjectLit());
1400:       assertEquals((-1), node0.getSourcePosition());
1401:       assertFalse(node0.isFalse());
1402:       assertFalse(node0.isContinue());
1403:       assertFalse(node0.isAnd());
1404:       assertFalse(node0.isCast());
1405:       assertNotNull(node_AncestorIterable0);
1406:       
1407:       boolean boolean1 = node1.isEquivalentTo(node0, false, false, false);
1408:       assertFalse(boolean1);
1409:       assertEquals(57, Node.REFLECTED_OBJECT);
1410:       assertEquals(52, Node.LENGTH);
1411:       assertEquals(40, Node.ORIGINALNAME_PROP);
1412:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1413:       assertEquals(8, Node.FLAG_NO_THROWS);
1414:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1415:       assertEquals(50, Node.FREE_CALL);
1416:       assertEquals(54, Node.SLASH_V);
1417:       assertEquals(46, Node.IS_NAMESPACE);
1418:       assertEquals(55, Node.INFERRED_FUNCTION);
1419:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1420:       assertEquals(39, Node.EMPTY_BLOCK);
1421:       assertEquals(57, Node.LAST_PROP);
1422:       assertEquals(47, Node.IS_DISPATCHER);
1423:       assertEquals(2, Node.POST_FLAG);
1424:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1425:       assertEquals(30, Node.VAR_ARGS_NAME);
1426:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1427:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1428:       assertEquals(29, Node.JSDOC_INFO_PROP);
1429:       assertEquals(53, Node.INPUT_ID);
1430:       assertEquals(43, Node.IS_CONSTANT_NAME);
1431:       assertEquals(56, Node.CHANGE_TIME);
1432:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1433:       assertEquals(36, Node.QUOTED_PROP);
1434:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1435:       assertEquals(12, Node.COLUMN_BITS);
1436:       assertEquals(32, Node.INCRDECR_PROP);
1437:       assertEquals(4095, Node.COLUMN_MASK);
1438:       assertEquals(48, Node.DIRECTIVES);
1439:       assertEquals(1, Node.DECR_FLAG);
1440:       assertEquals(49, Node.DIRECT_EVAL);
1441:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1442:       assertEquals(37, Node.OPT_ARG_NAME);
1443:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1444:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1445:       assertEquals(52, Node.LENGTH);
1446:       assertEquals(57, Node.REFLECTED_OBJECT);
1447:       assertEquals(54, Node.SLASH_V);
1448:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1449:       assertEquals(50, Node.FREE_CALL);
1450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1451:       assertEquals(40, Node.ORIGINALNAME_PROP);
1452:       assertEquals(49, Node.DIRECT_EVAL);
1453:       assertEquals(48, Node.DIRECTIVES);
1454:       assertEquals(32, Node.INCRDECR_PROP);
1455:       assertEquals(46, Node.IS_NAMESPACE);
1456:       assertEquals(12, Node.COLUMN_BITS);
1457:       assertEquals(4095, Node.COLUMN_MASK);
1458:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1461:       assertEquals(1, Node.DECR_FLAG);
1462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1463:       assertEquals(53, Node.INPUT_ID);
1464:       assertEquals(36, Node.QUOTED_PROP);
1465:       assertEquals(43, Node.IS_CONSTANT_NAME);
1466:       assertEquals(56, Node.CHANGE_TIME);
1467:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1468:       assertEquals(37, Node.OPT_ARG_NAME);
1469:       assertEquals(55, Node.INFERRED_FUNCTION);
1470:       assertEquals(8, Node.FLAG_NO_THROWS);
1471:       assertEquals(2, Node.POST_FLAG);
1472:       assertEquals(30, Node.VAR_ARGS_NAME);
1473:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1474:       assertEquals(57, Node.LAST_PROP);
1475:       assertEquals(47, Node.IS_DISPATCHER);
1476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1477:       assertEquals(29, Node.JSDOC_INFO_PROP);
1478:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1479:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1480:       assertEquals(39, Node.EMPTY_BLOCK);
1481:       assertFalse(node0.equals((Object)node3));
1482:       assertFalse(node0.equals((Object)node1));
1483:       assertFalse(node1.equals((Object)node0));
1484:       assertFalse(node1.equals((Object)node3));
1485:       assertFalse(node1.equals((Object)node2));
1486:       assertTrue(boolean1 == boolean0);
1487:       assertFalse(node0.isAdd());
1488:       assertFalse(node0.isBlock());
1489:       assertFalse(node0.isVar());
1490:       assertFalse(node0.isDo());
1491:       assertFalse(node0.isWhile());
1492:       assertFalse(node0.isSetterDef());
1493:       assertFalse(node0.isNew());
1494:       assertFalse(node0.isOr());
1495:       assertFalse(node0.isReturn());
1496:       assertFalse(node0.isNull());
1497:       assertFalse(node0.isTypeOf());
1498:       assertFalse(node0.hasMoreThanOneChild());
1499:       assertFalse(node0.hasChildren());
1500:       assertFalse(node0.isDec());
1501:       assertFalse(node0.isName());
1502:       assertFalse(node0.isAssign());
1503:       assertFalse(node0.isGetElem());
1504:       assertFalse(node0.isCall());
1505:       assertFalse(node0.isCatch());
1506:       assertFalse(node0.isVoid());
1507:       assertEquals((-1), node0.getLineno());
1508:       assertFalse(node0.isTry());
1509:       assertFalse(node0.isTrue());
1510:       assertFalse(node0.isRegExp());
1511:       assertFalse(node0.isFor());
1512:       assertFalse(node0.isEmpty());
1513:       assertFalse(node0.isScript());
1514:       assertFalse(node0.isDefaultCase());
1515:       assertFalse(node0.hasOneChild());
1516:       assertFalse(node0.isLabel());
1517:       assertFalse(node0.isAssignAdd());
1518:       assertFalse(node0.isParamList());
1519:       assertEquals(307, node0.getType());
1520:       assertFalse(node0.isNumber());
1521:       assertFalse(node0.isGetterDef());
1522:       assertEquals(0, node0.getChildCount());
1523:       assertFalse(node0.isLabelName());
1524:       assertFalse(node0.isStringKey());
1525:       assertFalse(node0.isArrayLit());
1526:       assertFalse(node0.isSwitch());
1527:       assertFalse(node0.isHook());
1528:       assertEquals((-1), node0.getCharno());
1529:       assertFalse(node0.isCase());
1530:       assertFalse(node0.isString());
1531:       assertFalse(node0.isThrow());
1532:       assertFalse(node0.isInc());
1533:       assertFalse(node0.isIn());
1534:       assertFalse(node0.isInstanceOf());
1535:       assertFalse(node0.isNE());
1536:       assertFalse(node0.isThis());
1537:       assertFalse(node0.isComma());
1538:       assertFalse(node0.isWith());
1539:       assertFalse(node0.isIf());
1540:       assertFalse(node0.isDelProp());
1541:       assertFalse(node0.isBreak());
1542:       assertFalse(node0.isExprResult());
1543:       assertFalse(node0.isFunction());
1544:       assertFalse(node0.isDebugger());
1545:       assertFalse(node0.isNot());
1546:       assertFalse(node0.isGetProp());
1547:       assertFalse(node0.isObjectLit());
1548:       assertEquals((-1), node0.getSourcePosition());
1549:       assertFalse(node0.isFalse());
1550:       assertFalse(node0.isContinue());
1551:       assertFalse(node0.isAnd());
1552:       assertFalse(node0.isCast());
1553:       assertFalse(node1.isNew());
1554:       assertFalse(node1.isBlock());
1555:       assertFalse(node1.isAdd());
1556:       assertFalse(node1.isDo());
1557:       assertFalse(node1.isName());
1558:       assertFalse(node1.isStringKey());
1559:       assertFalse(node1.isOr());
1560:       assertFalse(node1.isLabel());
1561:       assertFalse(node1.isAssignAdd());
1562:       assertFalse(node1.isParamList());
1563:       assertFalse(node1.isSetterDef());
1564:       assertFalse(node1.isLabelName());
1565:       assertFalse(node1.isContinue());
1566:       assertFalse(node1.isVar());
1567:       assertFalse(node1.isCast());
1568:       assertFalse(node1.isFunction());
1569:       assertFalse(node1.isDebugger());
1570:       assertFalse(node1.isTrue());
1571:       assertFalse(node1.isExprResult());
1572:       assertFalse(node1.isDefaultCase());
1573:       assertFalse(node1.isVoid());
1574:       assertFalse(node1.isAnd());
1575:       assertFalse(node1.isEmpty());
1576:       assertEquals((-1), node1.getSourcePosition());
1577:       assertFalse(node1.isObjectLit());
1578:       assertFalse(node1.isNot());
1579:       assertFalse(node1.isGetProp());
1580:       assertFalse(node1.isReturn());
1581:       assertFalse(node1.isNull());
1582:       assertFalse(node1.isBreak());
1583:       assertFalse(node1.isDelProp());
1584:       assertFalse(node1.isGetElem());
1585:       assertFalse(node1.isCall());
1586:       assertTrue(node1.hasOneChild());
1587:       assertFalse(node1.isWhile());
1588:       assertFalse(node1.isDec());
1589:       assertFalse(node1.isComma());
1590:       assertFalse(node1.isAssign());
1591:       assertFalse(node1.isTypeOf());
1592:       assertEquals(512, node1.getType());
1593:       assertEquals((-1), node1.getCharno());
1594:       assertFalse(node1.isInc());
1595:       assertFalse(node1.isSwitch());
1596:       assertFalse(node1.isCase());
1597:       assertFalse(node1.isString());
1598:       assertFalse(node1.isIn());
1599:       assertFalse(node1.isFalse());
1600:       assertFalse(node1.isThrow());
1601:       assertFalse(node1.isScript());
1602:       assertFalse(node1.isArrayLit());
1603:       assertFalse(node1.isTry());
1604:       assertFalse(node1.isNumber());
1605:       assertFalse(node1.isGetterDef());
1606:       assertFalse(node1.isThis());
1607:       assertFalse(node1.isNE());
1608:       assertTrue(node1.hasChildren());
1609:       assertFalse(node1.isIf());
1610:       assertEquals((-1), node1.getLineno());
1611:       assertFalse(node1.isCatch());
1612:       assertFalse(node1.isFor());
1613:       assertFalse(node1.isHook());
1614:       assertFalse(node1.isInstanceOf());
1615:       assertFalse(node1.hasMoreThanOneChild());
1616:       assertFalse(node1.isWith());
1617:       assertEquals(1, node1.getChildCount());
1618:       assertFalse(node1.isRegExp());
1619:       assertSame(node0, node2);
1620:       assertNotSame(node0, node3);
1621:       assertNotSame(node0, node1);
1622:       assertNotSame(node1, node0);
1623:       assertNotSame(node1, node3);
1624:       assertNotSame(node1, node2);
1625:       
1626:       node1.setIsSyntheticBlock(false);
1627:       assertEquals(57, Node.REFLECTED_OBJECT);
1628:       assertEquals(52, Node.LENGTH);
1629:       assertEquals(40, Node.ORIGINALNAME_PROP);
1630:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1631:       assertEquals(8, Node.FLAG_NO_THROWS);
1632:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1633:       assertEquals(50, Node.FREE_CALL);
1634:       assertEquals(54, Node.SLASH_V);
1635:       assertEquals(46, Node.IS_NAMESPACE);
1636:       assertEquals(55, Node.INFERRED_FUNCTION);
1637:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1638:       assertEquals(39, Node.EMPTY_BLOCK);
1639:       assertEquals(57, Node.LAST_PROP);
1640:       assertEquals(47, Node.IS_DISPATCHER);
1641:       assertEquals(2, Node.POST_FLAG);
1642:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1643:       assertEquals(30, Node.VAR_ARGS_NAME);
1644:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1645:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1646:       assertEquals(29, Node.JSDOC_INFO_PROP);
1647:       assertEquals(53, Node.INPUT_ID);
1648:       assertEquals(43, Node.IS_CONSTANT_NAME);
1649:       assertEquals(56, Node.CHANGE_TIME);
1650:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1651:       assertEquals(36, Node.QUOTED_PROP);
1652:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1653:       assertEquals(12, Node.COLUMN_BITS);
1654:       assertEquals(32, Node.INCRDECR_PROP);
1655:       assertEquals(4095, Node.COLUMN_MASK);
1656:       assertEquals(48, Node.DIRECTIVES);
1657:       assertEquals(1, Node.DECR_FLAG);
1658:       assertEquals(49, Node.DIRECT_EVAL);
1659:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1660:       assertEquals(37, Node.OPT_ARG_NAME);
1661:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1662:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1663:       assertEquals(52, Node.LENGTH);
1664:       assertEquals(57, Node.REFLECTED_OBJECT);
1665:       assertEquals(54, Node.SLASH_V);
1666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1667:       assertEquals(50, Node.FREE_CALL);
1668:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1669:       assertEquals(40, Node.ORIGINALNAME_PROP);
1670:       assertEquals(49, Node.DIRECT_EVAL);
1671:       assertEquals(48, Node.DIRECTIVES);
1672:       assertEquals(32, Node.INCRDECR_PROP);
1673:       assertEquals(46, Node.IS_NAMESPACE);
1674:       assertEquals(12, Node.COLUMN_BITS);
1675:       assertEquals(4095, Node.COLUMN_MASK);
1676:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1677:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1678:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1679:       assertEquals(1, Node.DECR_FLAG);
1680:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1681:       assertEquals(53, Node.INPUT_ID);
1682:       assertEquals(36, Node.QUOTED_PROP);
1683:       assertEquals(43, Node.IS_CONSTANT_NAME);
1684:       assertEquals(56, Node.CHANGE_TIME);
1685:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1686:       assertEquals(37, Node.OPT_ARG_NAME);
1687:       assertEquals(55, Node.INFERRED_FUNCTION);
1688:       assertEquals(8, Node.FLAG_NO_THROWS);
1689:       assertEquals(2, Node.POST_FLAG);
1690:       assertEquals(30, Node.VAR_ARGS_NAME);
1691:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1692:       assertEquals(57, Node.LAST_PROP);
1693:       assertEquals(47, Node.IS_DISPATCHER);
1694:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1695:       assertEquals(29, Node.JSDOC_INFO_PROP);
1696:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1697:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1698:       assertEquals(39, Node.EMPTY_BLOCK);
1699:       assertFalse(node0.equals((Object)node3));
1700:       assertFalse(node0.equals((Object)node1));
1701:       assertFalse(node1.equals((Object)node0));
1702:       assertFalse(node1.equals((Object)node3));
1703:       assertFalse(node1.equals((Object)node2));
1704:       assertFalse(node0.isAdd());
1705:       assertFalse(node0.isBlock());
1706:       assertFalse(node0.isVar());
1707:       assertFalse(node0.isDo());
1708:       assertFalse(node0.isWhile());
1709:       assertFalse(node0.isSetterDef());
1710:       assertFalse(node0.isNew());
1711:       assertFalse(node0.isOr());
1712:       assertFalse(node0.isReturn());
1713:       assertFalse(node0.isNull());
1714:       assertFalse(node0.isTypeOf());
1715:       assertFalse(node0.hasMoreThanOneChild());
1716:       assertFalse(node0.hasChildren());
1717:       assertFalse(node0.isDec());
1718:       assertFalse(node0.isName());
1719:       assertFalse(node0.isAssign());
1720:       assertFalse(node0.isGetElem());
1721:       assertFalse(node0.isCall());
1722:       assertFalse(node0.isCatch());
1723:       assertFalse(node0.isVoid());
1724:       assertEquals((-1), node0.getLineno());
1725:       assertFalse(node0.isTry());
1726:       assertFalse(node0.isTrue());
1727:       assertFalse(node0.isRegExp());
1728:       assertFalse(node0.isFor());
1729:       assertFalse(node0.isEmpty());
1730:       assertFalse(node0.isScript());
1731:       assertFalse(node0.isDefaultCase());
1732:       assertFalse(node0.hasOneChild());
1733:       assertFalse(node0.isLabel());
1734:       assertFalse(node0.isAssignAdd());
1735:       assertFalse(node0.isParamList());
1736:       assertEquals(307, node0.getType());
1737:       assertFalse(node0.isNumber());
1738:       assertFalse(node0.isGetterDef());
1739:       assertEquals(0, node0.getChildCount());
1740:       assertFalse(node0.isLabelName());
1741:       assertFalse(node0.isStringKey());
1742:       assertFalse(node0.isArrayLit());
1743:       assertFalse(node0.isSwitch());
1744:       assertFalse(node0.isHook());
1745:       assertEquals((-1), node0.getCharno());
1746:       assertFalse(node0.isCase());
1747:       assertFalse(node0.isString());
1748:       assertFalse(node0.isThrow());
1749:       assertFalse(node0.isInc());
1750:       assertFalse(node0.isIn());
1751:       assertFalse(node0.isInstanceOf());
1752:       assertFalse(node0.isNE());
1753:       assertFalse(node0.isThis());
1754:       assertFalse(node0.isComma());
1755:       assertFalse(node0.isWith());
1756:       assertFalse(node0.isIf());
1757:       assertFalse(node0.isDelProp());
1758:       assertFalse(node0.isBreak());
1759:       assertFalse(node0.isExprResult());
1760:       assertFalse(node0.isFunction());
1761:       assertFalse(node0.isDebugger());
1762:       assertFalse(node0.isNot());
1763:       assertFalse(node0.isGetProp());
1764:       assertFalse(node0.isObjectLit());
1765:       assertEquals((-1), node0.getSourcePosition());
1766:       assertFalse(node0.isFalse());
1767:       assertFalse(node0.isContinue());
1768:       assertFalse(node0.isAnd());
1769:       assertFalse(node0.isCast());
1770:       assertFalse(node1.isNew());
1771:       assertFalse(node1.isBlock());
1772:       assertFalse(node1.isAdd());
1773:       assertFalse(node1.isDo());
1774:       assertFalse(node1.isName());
1775:       assertFalse(node1.isStringKey());
1776:       assertFalse(node1.isOr());
1777:       assertFalse(node1.isLabel());
1778:       assertFalse(node1.isAssignAdd());
1779:       assertFalse(node1.isParamList());
1780:       assertFalse(node1.isSetterDef());
1781:       assertFalse(node1.isLabelName());
1782:       assertFalse(node1.isContinue());
1783:       assertFalse(node1.isVar());
1784:       assertFalse(node1.isCast());
1785:       assertFalse(node1.isFunction());
1786:       assertFalse(node1.isDebugger());
1787:       assertFalse(node1.isTrue());
1788:       assertFalse(node1.isExprResult());
1789:       assertFalse(node1.isDefaultCase());
1790:       assertFalse(node1.isVoid());
1791:       assertFalse(node1.isAnd());
1792:       assertFalse(node1.isEmpty());
1793:       assertEquals((-1), node1.getSourcePosition());
1794:       assertFalse(node1.isObjectLit());
1795:       assertFalse(node1.isNot());
1796:       assertFalse(node1.isGetProp());
1797:       assertFalse(node1.isReturn());
1798:       assertFalse(node1.isNull());
1799:       assertFalse(node1.isBreak());
1800:       assertFalse(node1.isDelProp());
1801:       assertFalse(node1.isGetElem());
1802:       assertFalse(node1.isCall());
1803:       assertTrue(node1.hasOneChild());
1804:       assertFalse(node1.isWhile());
1805:       assertFalse(node1.isDec());
1806:       assertFalse(node1.isComma());
1807:       assertFalse(node1.isAssign());
1808:       assertFalse(node1.isTypeOf());
1809:       assertEquals(512, node1.getType());
1810:       assertEquals((-1), node1.getCharno());
1811:       assertFalse(node1.isInc());
1812:       assertFalse(node1.isSwitch());
1813:       assertFalse(node1.isCase());
1814:       assertFalse(node1.isString());
1815:       assertFalse(node1.isIn());
1816:       assertFalse(node1.isFalse());
1817:       assertFalse(node1.isThrow());
1818:       assertFalse(node1.isScript());
1819:       assertFalse(node1.isArrayLit());
1820:       assertFalse(node1.isTry());
1821:       assertFalse(node1.isNumber());
1822:       assertFalse(node1.isGetterDef());
1823:       assertFalse(node1.isThis());
1824:       assertFalse(node1.isNE());
1825:       assertTrue(node1.hasChildren());
1826:       assertFalse(node1.isIf());
1827:       assertEquals((-1), node1.getLineno());
1828:       assertFalse(node1.isCatch());
1829:       assertFalse(node1.isFor());
1830:       assertFalse(node1.isHook());
1831:       assertFalse(node1.isInstanceOf());
1832:       assertFalse(node1.hasMoreThanOneChild());
1833:       assertFalse(node1.isWith());
1834:       assertEquals(1, node1.getChildCount());
1835:       assertFalse(node1.isRegExp());
1836:       assertSame(node0, node2);
1837:       assertNotSame(node0, node3);
1838:       assertNotSame(node0, node1);
1839:       assertNotSame(node1, node0);
1840:       assertNotSame(node1, node3);
1841:       assertNotSame(node1, node2);
1842:       
1843:       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
1844:       node_AncestorIterable0.forEach(consumer0);
1845:       assertEquals(57, Node.REFLECTED_OBJECT);
1846:       assertEquals(52, Node.LENGTH);
1847:       assertEquals(40, Node.ORIGINALNAME_PROP);
1848:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1849:       assertEquals(8, Node.FLAG_NO_THROWS);
1850:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1851:       assertEquals(50, Node.FREE_CALL);
1852:       assertEquals(54, Node.SLASH_V);
1853:       assertEquals(46, Node.IS_NAMESPACE);
1854:       assertEquals(55, Node.INFERRED_FUNCTION);
1855:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1856:       assertEquals(39, Node.EMPTY_BLOCK);
1857:       assertEquals(57, Node.LAST_PROP);
1858:       assertEquals(47, Node.IS_DISPATCHER);
1859:       assertEquals(2, Node.POST_FLAG);
1860:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1861:       assertEquals(30, Node.VAR_ARGS_NAME);
1862:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1863:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1864:       assertEquals(29, Node.JSDOC_INFO_PROP);
1865:       assertEquals(53, Node.INPUT_ID);
1866:       assertEquals(43, Node.IS_CONSTANT_NAME);
1867:       assertEquals(56, Node.CHANGE_TIME);
1868:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1869:       assertEquals(36, Node.QUOTED_PROP);
1870:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1871:       assertEquals(12, Node.COLUMN_BITS);
1872:       assertEquals(32, Node.INCRDECR_PROP);
1873:       assertEquals(4095, Node.COLUMN_MASK);
1874:       assertEquals(48, Node.DIRECTIVES);
1875:       assertEquals(1, Node.DECR_FLAG);
1876:       assertEquals(49, Node.DIRECT_EVAL);
1877:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1878:       assertEquals(37, Node.OPT_ARG_NAME);
1879:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1880:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1881:       assertFalse(node0.equals((Object)node3));
1882:       assertFalse(node0.equals((Object)node1));
1883:       assertFalse(node0.isAdd());
1884:       assertFalse(node0.isBlock());
1885:       assertFalse(node0.isVar());
1886:       assertFalse(node0.isDo());
1887:       assertFalse(node0.isWhile());
1888:       assertFalse(node0.isSetterDef());
1889:       assertFalse(node0.isNew());
1890:       assertFalse(node0.isOr());
1891:       assertFalse(node0.isReturn());
1892:       assertFalse(node0.isNull());
1893:       assertFalse(node0.isTypeOf());
1894:       assertFalse(node0.hasMoreThanOneChild());
1895:       assertFalse(node0.hasChildren());
1896:       assertFalse(node0.isDec());
1897:       assertFalse(node0.isName());
1898:       assertFalse(node0.isAssign());
1899:       assertFalse(node0.isGetElem());
1900:       assertFalse(node0.isCall());
1901:       assertFalse(node0.isCatch());
1902:       assertFalse(node0.isVoid());
1903:       assertEquals((-1), node0.getLineno());
1904:       assertFalse(node0.isTry());
1905:       assertFalse(node0.isTrue());
1906:       assertFalse(node0.isRegExp());
1907:       assertFalse(node0.isFor());
1908:       assertFalse(node0.isEmpty());
1909:       assertFalse(node0.isScript());
1910:       assertFalse(node0.isDefaultCase());
1911:       assertFalse(node0.hasOneChild());
1912:       assertFalse(node0.isLabel());
1913:       assertFalse(node0.isAssignAdd());
1914:       assertFalse(node0.isParamList());
1915:       assertEquals(307, node0.getType());
1916:       assertFalse(node0.isNumber());
1917:       assertFalse(node0.isGetterDef());
1918:       assertEquals(0, node0.getChildCount());
1919:       assertFalse(node0.isLabelName());
1920:       assertFalse(node0.isStringKey());
1921:       assertFalse(node0.isArrayLit());
1922:       assertFalse(node0.isSwitch());
1923:       assertFalse(node0.isHook());
1924:       assertEquals((-1), node0.getCharno());
1925:       assertFalse(node0.isCase());
1926:       assertFalse(node0.isString());
1927:       assertFalse(node0.isThrow());
1928:       assertFalse(node0.isInc());
1929:       assertFalse(node0.isIn());
1930:       assertFalse(node0.isInstanceOf());
1931:       assertFalse(node0.isNE());
1932:       assertFalse(node0.isThis());
1933:       assertFalse(node0.isComma());
1934:       assertFalse(node0.isWith());
1935:       assertFalse(node0.isIf());
1936:       assertFalse(node0.isDelProp());
1937:       assertFalse(node0.isBreak());
1938:       assertFalse(node0.isExprResult());
1939:       assertFalse(node0.isFunction());
1940:       assertFalse(node0.isDebugger());
1941:       assertFalse(node0.isNot());
1942:       assertFalse(node0.isGetProp());
1943:       assertFalse(node0.isObjectLit());
1944:       assertEquals((-1), node0.getSourcePosition());
1945:       assertFalse(node0.isFalse());
1946:       assertFalse(node0.isContinue());
1947:       assertFalse(node0.isAnd());
1948:       assertFalse(node0.isCast());
1949:       assertSame(node0, node2);
1950:       assertNotSame(node0, node3);
1951:       assertNotSame(node0, node1);
1952:       
1953:       Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
1954:       assertEquals(57, Node.REFLECTED_OBJECT);
1955:       assertEquals(52, Node.LENGTH);
1956:       assertEquals(40, Node.ORIGINALNAME_PROP);
1957:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1958:       assertEquals(8, Node.FLAG_NO_THROWS);
1959:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1960:       assertEquals(50, Node.FREE_CALL);
1961:       assertEquals(54, Node.SLASH_V);
1962:       assertEquals(46, Node.IS_NAMESPACE);
1963:       assertEquals(55, Node.INFERRED_FUNCTION);
1964:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1965:       assertEquals(39, Node.EMPTY_BLOCK);
1966:       assertEquals(57, Node.LAST_PROP);
1967:       assertEquals(47, Node.IS_DISPATCHER);
1968:       assertEquals(2, Node.POST_FLAG);
1969:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1970:       assertEquals(30, Node.VAR_ARGS_NAME);
1971:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1972:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1973:       assertEquals(29, Node.JSDOC_INFO_PROP);
1974:       assertEquals(53, Node.INPUT_ID);
1975:       assertEquals(43, Node.IS_CONSTANT_NAME);
1976:       assertEquals(56, Node.CHANGE_TIME);
1977:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1978:       assertEquals(36, Node.QUOTED_PROP);
1979:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1980:       assertEquals(12, Node.COLUMN_BITS);
1981:       assertEquals(32, Node.INCRDECR_PROP);
1982:       assertEquals(4095, Node.COLUMN_MASK);
1983:       assertEquals(48, Node.DIRECTIVES);
1984:       assertEquals(1, Node.DECR_FLAG);
1985:       assertEquals(49, Node.DIRECT_EVAL);
1986:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1987:       assertEquals(37, Node.OPT_ARG_NAME);
1988:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1989:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1990:       assertFalse(node0.equals((Object)node3));
1991:       assertFalse(node0.equals((Object)node1));
1992:       assertFalse(node0.isAdd());
1993:       assertFalse(node0.isBlock());
1994:       assertFalse(node0.isVar());
1995:       assertFalse(node0.isDo());
1996:       assertFalse(node0.isWhile());
1997:       assertFalse(node0.isSetterDef());
1998:       assertFalse(node0.isNew());
1999:       assertFalse(node0.isOr());
2000:       assertFalse(node0.isReturn());
2001:       assertFalse(node0.isNull());
2002:       assertFalse(node0.isTypeOf());
2003:       assertFalse(node0.hasMoreThanOneChild());
2004:       assertFalse(node0.hasChildren());
2005:       assertFalse(node0.isDec());
2006:       assertFalse(node0.isName());
2007:       assertFalse(node0.isAssign());
2008:       assertFalse(node0.isGetElem());
2009:       assertFalse(node0.isCall());
2010:       assertFalse(node0.isCatch());
2011:       assertFalse(node0.isVoid());
2012:       assertEquals((-1), node0.getLineno());
2013:       assertFalse(node0.isTry());
2014:       assertFalse(node0.isTrue());
2015:       assertFalse(node0.isRegExp());
2016:       assertFalse(node0.isFor());
2017:       assertFalse(node0.isEmpty());
2018:       assertFalse(node0.isScript());
2019:       assertFalse(node0.isDefaultCase());
2020:       assertFalse(node0.hasOneChild());
2021:       assertFalse(node0.isLabel());
2022:       assertFalse(node0.isAssignAdd());
2023:       assertFalse(node0.isParamList());
2024:       assertEquals(307, node0.getType());
2025:       assertFalse(node0.isNumber());
2026:       assertFalse(node0.isGetterDef());
2027:       assertEquals(0, node0.getChildCount());
2028:       assertFalse(node0.isLabelName());
2029:       assertFalse(node0.isStringKey());
2030:       assertFalse(node0.isArrayLit());
2031:       assertFalse(node0.isSwitch());
2032:       assertFalse(node0.isHook());
2033:       assertEquals((-1), node0.getCharno());
2034:       assertFalse(node0.isCase());
2035:       assertFalse(node0.isString());
2036:       assertFalse(node0.isThrow());
2037:       assertFalse(node0.isInc());
2038:       assertFalse(node0.isIn());
2039:       assertFalse(node0.isInstanceOf());
2040:       assertFalse(node0.isNE());
2041:       assertFalse(node0.isThis());
2042:       assertFalse(node0.isComma());
2043:       assertFalse(node0.isWith());
2044:       assertFalse(node0.isIf());
2045:       assertFalse(node0.isDelProp());
2046:       assertFalse(node0.isBreak());
2047:       assertFalse(node0.isExprResult());
2048:       assertFalse(node0.isFunction());
2049:       assertFalse(node0.isDebugger());
2050:       assertFalse(node0.isNot());
2051:       assertFalse(node0.isGetProp());
2052:       assertFalse(node0.isObjectLit());
2053:       assertEquals((-1), node0.getSourcePosition());
2054:       assertFalse(node0.isFalse());
2055:       assertFalse(node0.isContinue());
2056:       assertFalse(node0.isAnd());
2057:       assertFalse(node0.isCast());
2058:       assertSame(node0, node2);
2059:       assertNotSame(node0, node3);
2060:       assertNotSame(node0, node1);
2061:       assertNotNull(iterator0);
2062:       
2063:       node3.putBooleanProp(31, false);
2064:       assertEquals(43, Node.IS_CONSTANT_NAME);
2065:       assertEquals(36, Node.QUOTED_PROP);
2066:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2067:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2068:       assertEquals(4095, Node.COLUMN_MASK);
2069:       assertEquals(48, Node.DIRECTIVES);
2070:       assertEquals(56, Node.CHANGE_TIME);
2071:       assertEquals(2, Node.POST_FLAG);
2072:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2073:       assertEquals(8, Node.FLAG_NO_THROWS);
2074:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2075:       assertEquals(47, Node.IS_DISPATCHER);
2076:       assertEquals(55, Node.INFERRED_FUNCTION);
2077:       assertEquals(52, Node.LENGTH);
2078:       assertEquals(53, Node.INPUT_ID);
2079:       assertEquals(29, Node.JSDOC_INFO_PROP);
2080:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2081:       assertEquals(39, Node.EMPTY_BLOCK);
2082:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2083:       assertEquals(57, Node.LAST_PROP);
2084:       assertEquals(30, Node.VAR_ARGS_NAME);
2085:       assertEquals(54, Node.SLASH_V);
2086:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2087:       assertEquals(57, Node.REFLECTED_OBJECT);
2088:       assertEquals(46, Node.IS_NAMESPACE);
2089:       assertEquals(49, Node.DIRECT_EVAL);
2090:       assertEquals(40, Node.ORIGINALNAME_PROP);
2091:       assertEquals(37, Node.OPT_ARG_NAME);
2092:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2093:       assertEquals(50, Node.FREE_CALL);
2094:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2095:       assertEquals(12, Node.COLUMN_BITS);
2096:       assertEquals(32, Node.INCRDECR_PROP);
2097:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2098:       assertEquals(1, Node.DECR_FLAG);
2099:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2100:       assertFalse(node3.equals((Object)node2));
2101:       assertFalse(node3.equals((Object)node0));
2102:       assertFalse(node3.equals((Object)node1));
2103:       assertFalse(node3.isDefaultCase());
2104:       assertFalse(node3.isCatch());
2105:       assertFalse(node3.isVoid());
2106:       assertFalse(node3.isParamList());
2107:       assertFalse(node3.isNull());
2108:       assertFalse(node3.isTrue());
2109:       assertFalse(node3.isDebugger());
2110:       assertFalse(node3.isFor());
2111:       assertFalse(node3.isDelProp());
2112:       assertFalse(node3.isName());
2113:       assertFalse(node3.isIf());
2114:       assertFalse(node3.isCall());
2115:       assertFalse(node3.isTry());
2116:       assertFalse(node3.isBlock());
2117:       assertFalse(node3.isRegExp());
2118:       assertFalse(node3.isContinue());
2119:       assertFalse(node3.isString());
2120:       assertFalse(node3.isWhile());
2121:       assertFalse(node3.isInc());
2122:       assertEquals((-1), node3.getLineno());
2123:       assertFalse(node3.isIn());
2124:       assertFalse(node3.isNE());
2125:       assertEquals((-1), node3.getSourcePosition());
2126:       assertFalse(node3.isFalse());
2127:       assertFalse(node3.isThrow());
2128:       assertFalse(node3.isCast());
2129:       assertFalse(node3.isSetterDef());
2130:       assertFalse(node3.isFunction());
2131:       assertFalse(node3.isNot());
2132:       assertFalse(node3.isWith());
2133:       assertFalse(node3.isAnd());
2134:       assertFalse(node3.isScript());
2135:       assertFalse(node3.isExprResult());
2136:       assertFalse(node3.isObjectLit());
2137:       assertFalse(node3.isAssign());
2138:       assertFalse(node3.isGetElem());
2139:       assertFalse(node3.isGetProp());
2140:       assertFalse(node3.isBreak());
2141:       assertFalse(node3.hasOneChild());
2142:       assertFalse(node3.isReturn());
2143:       assertFalse(node3.isInstanceOf());
2144:       assertFalse(node3.hasMoreThanOneChild());
2145:       assertEquals(227, node3.getType());
2146:       assertFalse(node3.isHook());
2147:       assertFalse(node3.isThis());
2148:       assertFalse(node3.isTypeOf());
2149:       assertFalse(node3.isDec());
2150:       assertFalse(node3.hasChildren());
2151:       assertFalse(node3.isComma());
2152:       assertFalse(node3.isDo());
2153:       assertFalse(node3.isSwitch());
2154:       assertFalse(node3.isCase());
2155:       assertFalse(node3.isNew());
2156:       assertFalse(node3.isOr());
2157:       assertFalse(node3.isAdd());
2158:       assertFalse(node3.isNumber());
2159:       assertFalse(node3.isGetterDef());
2160:       assertEquals((-1), node3.getCharno());
2161:       assertFalse(node3.isEmpty());
2162:       assertFalse(node3.isLabelName());
2163:       assertFalse(node3.isStringKey());
2164:       assertFalse(node3.isArrayLit());
2165:       assertFalse(node3.isLabel());
2166:       assertFalse(node3.isAssignAdd());
2167:       assertFalse(node3.isVar());
2168:       assertEquals(0, node3.getChildCount());
2169:       assertNotSame(node3, node2);
2170:       assertNotSame(node3, node0);
2171:       assertNotSame(node3, node1);
2172:       
2173:       Iterator<Node> iterator1 = node_AncestorIterable0.iterator();
2174:       assertEquals(57, Node.REFLECTED_OBJECT);
2175:       assertEquals(52, Node.LENGTH);
2176:       assertEquals(40, Node.ORIGINALNAME_PROP);
2177:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2178:       assertEquals(8, Node.FLAG_NO_THROWS);
2179:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2180:       assertEquals(50, Node.FREE_CALL);
2181:       assertEquals(54, Node.SLASH_V);
2182:       assertEquals(46, Node.IS_NAMESPACE);
2183:       assertEquals(55, Node.INFERRED_FUNCTION);
2184:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2185:       assertEquals(39, Node.EMPTY_BLOCK);
2186:       assertEquals(57, Node.LAST_PROP);
2187:       assertEquals(47, Node.IS_DISPATCHER);
2188:       assertEquals(2, Node.POST_FLAG);
2189:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2190:       assertEquals(30, Node.VAR_ARGS_NAME);
2191:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2192:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2193:       assertEquals(29, Node.JSDOC_INFO_PROP);
2194:       assertEquals(53, Node.INPUT_ID);
2195:       assertEquals(43, Node.IS_CONSTANT_NAME);
2196:       assertEquals(56, Node.CHANGE_TIME);
2197:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2198:       assertEquals(36, Node.QUOTED_PROP);
2199:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2200:       assertEquals(12, Node.COLUMN_BITS);
2201:       assertEquals(32, Node.INCRDECR_PROP);
2202:       assertEquals(4095, Node.COLUMN_MASK);
2203:       assertEquals(48, Node.DIRECTIVES);
2204:       assertEquals(1, Node.DECR_FLAG);
2205:       assertEquals(49, Node.DIRECT_EVAL);
2206:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2207:       assertEquals(37, Node.OPT_ARG_NAME);
2208:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2209:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2210:       assertFalse(node0.equals((Object)node3));
2211:       assertFalse(node0.equals((Object)node1));
2212:       assertFalse(iterator1.equals((Object)iterator0));
2213:       assertFalse(node0.isAdd());
2214:       assertFalse(node0.isBlock());
2215:       assertFalse(node0.isVar());
2216:       assertFalse(node0.isDo());
2217:       assertFalse(node0.isWhile());
2218:       assertFalse(node0.isSetterDef());
2219:       assertFalse(node0.isNew());
2220:       assertFalse(node0.isOr());
2221:       assertFalse(node0.isReturn());
2222:       assertFalse(node0.isNull());
2223:       assertFalse(node0.isTypeOf());
2224:       assertFalse(node0.hasMoreThanOneChild());
2225:       assertFalse(node0.hasChildren());
2226:       assertFalse(node0.isDec());
2227:       assertFalse(node0.isName());
2228:       assertFalse(node0.isAssign());
2229:       assertFalse(node0.isGetElem());
2230:       assertFalse(node0.isCall());
2231:       assertFalse(node0.isCatch());
2232:       assertFalse(node0.isVoid());
2233:       assertEquals((-1), node0.getLineno());
2234:       assertFalse(node0.isTry());
2235:       assertFalse(node0.isTrue());
2236:       assertFalse(node0.isRegExp());
2237:       assertFalse(node0.isFor());
2238:       assertFalse(node0.isEmpty());
2239:       assertFalse(node0.isScript());
2240:       assertFalse(node0.isDefaultCase());
2241:       assertFalse(node0.hasOneChild());
2242:       assertFalse(node0.isLabel());
2243:       assertFalse(node0.isAssignAdd());
2244:       assertFalse(node0.isParamList());
2245:       assertEquals(307, node0.getType());
2246:       assertFalse(node0.isNumber());
2247:       assertFalse(node0.isGetterDef());
2248:       assertEquals(0, node0.getChildCount());
2249:       assertFalse(node0.isLabelName());
2250:       assertFalse(node0.isStringKey());
2251:       assertFalse(node0.isArrayLit());
2252:       assertFalse(node0.isSwitch());
2253:       assertFalse(node0.isHook());
2254:       assertEquals((-1), node0.getCharno());
2255:       assertFalse(node0.isCase());
2256:       assertFalse(node0.isString());
2257:       assertFalse(node0.isThrow());
2258:       assertFalse(node0.isInc());
2259:       assertFalse(node0.isIn());
2260:       assertFalse(node0.isInstanceOf());
2261:       assertFalse(node0.isNE());
2262:       assertFalse(node0.isThis());
2263:       assertFalse(node0.isComma());
2264:       assertFalse(node0.isWith());
2265:       assertFalse(node0.isIf());
2266:       assertFalse(node0.isDelProp());
2267:       assertFalse(node0.isBreak());
2268:       assertFalse(node0.isExprResult());
2269:       assertFalse(node0.isFunction());
2270:       assertFalse(node0.isDebugger());
2271:       assertFalse(node0.isNot());
2272:       assertFalse(node0.isGetProp());
2273:       assertFalse(node0.isObjectLit());
2274:       assertEquals((-1), node0.getSourcePosition());
2275:       assertFalse(node0.isFalse());
2276:       assertFalse(node0.isContinue());
2277:       assertFalse(node0.isAnd());
2278:       assertFalse(node0.isCast());
2279:       assertSame(node0, node2);
2280:       assertNotSame(node0, node3);
2281:       assertNotSame(node0, node1);
2282:       assertNotSame(iterator1, iterator0);
2283:       assertNotNull(iterator1);
2284:       
2285:       boolean boolean2 = node0.isIn();
2286:       assertFalse(boolean2);
2287:       assertEquals(57, Node.REFLECTED_OBJECT);
2288:       assertEquals(52, Node.LENGTH);
2289:       assertEquals(40, Node.ORIGINALNAME_PROP);
2290:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2291:       assertEquals(8, Node.FLAG_NO_THROWS);
2292:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2293:       assertEquals(50, Node.FREE_CALL);
2294:       assertEquals(54, Node.SLASH_V);
2295:       assertEquals(46, Node.IS_NAMESPACE);
2296:       assertEquals(55, Node.INFERRED_FUNCTION);
2297:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2298:       assertEquals(39, Node.EMPTY_BLOCK);
2299:       assertEquals(57, Node.LAST_PROP);
2300:       assertEquals(47, Node.IS_DISPATCHER);
2301:       assertEquals(2, Node.POST_FLAG);
2302:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2303:       assertEquals(30, Node.VAR_ARGS_NAME);
2304:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2305:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2306:       assertEquals(29, Node.JSDOC_INFO_PROP);
2307:       assertEquals(53, Node.INPUT_ID);
2308:       assertEquals(43, Node.IS_CONSTANT_NAME);
2309:       assertEquals(56, Node.CHANGE_TIME);
2310:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2311:       assertEquals(36, Node.QUOTED_PROP);
2312:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2313:       assertEquals(12, Node.COLUMN_BITS);
2314:       assertEquals(32, Node.INCRDECR_PROP);
2315:       assertEquals(4095, Node.COLUMN_MASK);
2316:       assertEquals(48, Node.DIRECTIVES);
2317:       assertEquals(1, Node.DECR_FLAG);
2318:       assertEquals(49, Node.DIRECT_EVAL);
2319:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2320:       assertEquals(37, Node.OPT_ARG_NAME);
2321:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2322:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2323:       assertTrue(boolean2 == boolean0);
2324:       assertTrue(boolean2 == boolean1);
2325:       assertFalse(node0.equals((Object)node3));
2326:       assertFalse(node0.equals((Object)node1));
2327:       assertFalse(node0.isAdd());
2328:       assertFalse(node0.isBlock());
2329:       assertFalse(node0.isVar());
2330:       assertFalse(node0.isDo());
2331:       assertFalse(node0.isWhile());
2332:       assertFalse(node0.isSetterDef());
2333:       assertFalse(node0.isNew());
2334:       assertFalse(node0.isOr());
2335:       assertFalse(node0.isReturn());
2336:       assertFalse(node0.isNull());
2337:       assertFalse(node0.isTypeOf());
2338:       assertFalse(node0.hasMoreThanOneChild());
2339:       assertFalse(node0.hasChildren());
2340:       assertFalse(node0.isDec());
2341:       assertFalse(node0.isName());
2342:       assertFalse(node0.isAssign());
2343:       assertFalse(node0.isGetElem());
2344:       assertFalse(node0.isCall());
2345:       assertFalse(node0.isCatch());
2346:       assertFalse(node0.isVoid());
2347:       assertEquals((-1), node0.getLineno());
2348:       assertFalse(node0.isTry());
2349:       assertFalse(node0.isTrue());
2350:       assertFalse(node0.isRegExp());
2351:       assertFalse(node0.isFor());
2352:       assertFalse(node0.isEmpty());
2353:       assertFalse(node0.isScript());
2354:       assertFalse(node0.isDefaultCase());
2355:       assertFalse(node0.hasOneChild());
2356:       assertFalse(node0.isLabel());
2357:       assertFalse(node0.isAssignAdd());
2358:       assertFalse(node0.isParamList());
2359:       assertEquals(307, node0.getType());
2360:       assertFalse(node0.isNumber());
2361:       assertFalse(node0.isGetterDef());
2362:       assertEquals(0, node0.getChildCount());
2363:       assertFalse(node0.isLabelName());
2364:       assertFalse(node0.isStringKey());
2365:       assertFalse(node0.isArrayLit());
2366:       assertFalse(node0.isSwitch());
2367:       assertFalse(node0.isHook());
2368:       assertEquals((-1), node0.getCharno());
2369:       assertFalse(node0.isCase());
2370:       assertFalse(node0.isString());
2371:       assertFalse(node0.isThrow());
2372:       assertFalse(node0.isInc());
2373:       assertFalse(node0.isIn());
2374:       assertFalse(node0.isInstanceOf());
2375:       assertFalse(node0.isNE());
2376:       assertFalse(node0.isThis());
2377:       assertFalse(node0.isComma());
2378:       assertFalse(node0.isWith());
2379:       assertFalse(node0.isIf());
2380:       assertFalse(node0.isDelProp());
2381:       assertFalse(node0.isBreak());
2382:       assertFalse(node0.isExprResult());
2383:       assertFalse(node0.isFunction());
2384:       assertFalse(node0.isDebugger());
2385:       assertFalse(node0.isNot());
2386:       assertFalse(node0.isGetProp());
2387:       assertFalse(node0.isObjectLit());
2388:       assertEquals((-1), node0.getSourcePosition());
2389:       assertFalse(node0.isFalse());
2390:       assertFalse(node0.isContinue());
2391:       assertFalse(node0.isAnd());
2392:       assertFalse(node0.isCast());
2393:       assertSame(node0, node2);
2394:       assertNotSame(node0, node3);
2395:       assertNotSame(node0, node1);
2396:       
2397:       // Undeclared exception!
2398:       try { 
2399:         node3.getChildBefore(node0);
2400:         fail("Expecting exception: NullPointerException");
2401:       
2402:       } catch(NullPointerException e) {
2403:          //
2404:          // no message in exception (getMessage() returned null)
2405:          //
2406:          verifyException("com.google.javascript.rhino.Node", e);
2407:       }
2408:   }
2409: }
RegularFileObject[/tmp/EvoSuite_28_1628255577345/com/google/javascript/rhino/Node_28_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:12:58 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: import static org.evosuite.shaded.org.mockito.Mockito.*;
17: @EvoSuiteClassExclude
18: public class Node_28_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
24: 
25: 
26:   @BeforeClass 
27:   public static void initEvoSuiteFramework() { 
28:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
29:     org.evosuite.runtime.GuiSupport.initialize(); 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
31:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
32:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
33:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
34:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
35:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
36:     setSystemProperties();
37:     initializeClasses();
38:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
39:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
40:   } 
41: 
42:   @Before 
43:   public void initTestCase(){ 
44:     threadStopper.storeCurrentThreads();
45:     threadStopper.startRecordingTime();
46:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
47:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
48:     org.evosuite.runtime.GuiSupport.setHeadless(); 
49:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
50:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
51:   } 
52: 
53:   @After 
54:   public void doneWithTestCase(){ 
55:     threadStopper.killAndJoinClientThreads();
56:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
57:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
58:     resetClasses(); 
59:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
61:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
62:   } 
63: 
64:   public static void setSystemProperties() {
65:  
66:     /*No java.lang.System property to set*/
67:   }
68: 
69:   private static void initializeClasses() {
70:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_28_tmp__ESTest_scaffolding.class.getClassLoader() ,
71:       "com.google.common.collect.ArrayListMultimap",
72:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
73:       "com.google.common.collect.ImmutableList$SubList",
74:       "com.google.javascript.rhino.jstype.NoType",
75:       "com.google.javascript.rhino.JSDocInfo$Visibility",
76:       "com.google.common.collect.ListMultimap",
77:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
78:       "com.google.javascript.rhino.jstype.ArrowType",
79:       "com.google.javascript.rhino.SimpleErrorReporter",
80:       "com.google.common.collect.Lists$RandomAccessPartition",
81:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
82:       "com.google.common.collect.Collections2",
83:       "com.google.javascript.rhino.jstype.NumberType",
84:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
85:       "com.google.common.collect.PeekingIterator",
86:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
87:       "com.google.common.collect.RegularImmutableList",
88:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
89:       "com.google.javascript.rhino.jstype.StaticScope",
90:       "com.google.javascript.rhino.jstype.InstanceObjectType",
91:       "com.google.common.collect.Lists$TransformingRandomAccessList",
92:       "com.google.javascript.rhino.Node$PropListItem",
93:       "com.google.javascript.rhino.Node$IntPropListItem",
94:       "com.google.common.collect.Sets$2",
95:       "com.google.common.collect.Maps$KeySet",
96:       "com.google.common.collect.Sets$3",
97:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
98:       "com.google.common.collect.LinkedHashMultimap",
99:       "com.google.javascript.rhino.Node",
100:       "com.google.javascript.rhino.jstype.ObjectType",
101:       "com.google.common.collect.Sets$1",
102:       "com.google.common.collect.ImmutableMapKeySet",
103:       "com.google.javascript.rhino.JSDocInfo$Marker",
104:       "com.google.common.collect.RegularImmutableMap",
105:       "com.google.common.collect.RegularImmutableBiMap",
106:       "com.google.javascript.rhino.Node$NodeMismatch",
107:       "com.google.javascript.rhino.jstype.RecordType",
108:       "com.google.common.collect.SortedMapDifference",
109:       "com.google.common.collect.RegularImmutableSet",
110:       "com.google.javascript.rhino.jstype.ModificationVisitor",
111:       "com.google.javascript.rhino.jstype.PropertyMap$1",
112:       "com.google.common.collect.AbstractMapEntry",
113:       "com.google.javascript.rhino.Node$AncestorIterable$1",
114:       "com.google.common.collect.Iterators$12",
115:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
116:       "com.google.common.collect.Iterators$11",
117:       "com.google.javascript.rhino.jstype.JSType$1",
118:       "com.google.common.collect.EmptyImmutableBiMap",
119:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
120:       "com.google.common.base.Predicate",
121:       "com.google.javascript.rhino.jstype.VoidType",
122:       "com.google.common.base.Joiner",
123:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
124:       "com.google.common.collect.AbstractListMultimap",
125:       "com.google.javascript.rhino.jstype.JSType",
126:       "com.google.common.collect.ImmutableAsList",
127:       "com.google.javascript.rhino.Node$StringNode",
128:       "com.google.javascript.rhino.jstype.ProxyObjectType",
129:       "com.google.common.collect.Sets$SetView",
130:       "com.google.common.collect.RegularImmutableAsList",
131:       "com.google.javascript.rhino.jstype.TemplateType",
132:       "com.google.common.collect.SingletonImmutableSet",
133:       "com.google.javascript.rhino.jstype.NamedType",
134:       "com.google.common.collect.Iterators$13",
135:       "com.google.javascript.rhino.InputId",
136:       "com.google.common.collect.ImmutableList$SerializedForm",
137:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
138:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
139:       "com.google.common.collect.AbstractMapBasedMultimap",
140:       "com.google.common.collect.Lists$Partition",
141:       "com.google.common.collect.Lists",
142:       "com.google.javascript.rhino.Node$SideEffectFlags",
143:       "com.google.common.collect.UnmodifiableListIterator",
144:       "com.google.javascript.rhino.jstype.NullType",
145:       "com.google.common.collect.Lists$TransformingSequentialList",
146:       "com.google.javascript.rhino.ErrorReporter",
147:       "com.google.javascript.rhino.jstype.UnknownType",
148:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
149:       "com.google.javascript.rhino.jstype.ValueType",
150:       "com.google.javascript.rhino.jstype.PropertyMap",
151:       "com.google.javascript.rhino.Token",
152:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
153:       "com.google.common.collect.ObjectArrays",
154:       "com.google.javascript.rhino.jstype.StaticSourceFile",
155:       "com.google.javascript.rhino.jstype.BooleanType",
156:       "com.google.javascript.rhino.jstype.NoObjectType",
157:       "com.google.common.collect.AbstractIterator",
158:       "com.google.javascript.rhino.jstype.FunctionBuilder",
159:       "com.google.javascript.rhino.jstype.JSType$TypePair",
160:       "com.google.common.base.Joiner$MapJoiner",
161:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
162:       "com.google.common.collect.ImmutableList$1",
163:       "com.google.common.collect.MapDifference",
164:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
165:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
166:       "com.google.common.collect.Sets$ImprovedAbstractSet",
167:       "com.google.javascript.rhino.jstype.FunctionType",
168:       "com.google.common.base.Preconditions",
169:       "com.google.common.collect.UnmodifiableIterator",
170:       "com.google.javascript.rhino.JSDocInfo",
171:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
172:       "com.google.javascript.rhino.jstype.Property",
173:       "com.google.common.collect.ImmutableMapValues",
174:       "com.google.common.collect.ImmutableEntry",
175:       "com.google.common.base.Joiner$1",
176:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
177:       "com.google.common.base.Joiner$2",
178:       "com.google.common.collect.ImmutableCollection",
179:       "com.google.common.collect.ImmutableEnumMap",
180:       "com.google.javascript.rhino.jstype.TernaryValue",
181:       "com.google.javascript.rhino.Node$AncestorIterable",
182:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
183:       "com.google.common.collect.Lists$RandomAccessListWrapper",
184:       "com.google.common.collect.ImmutableEnumSet",
185:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
186:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
187:       "com.google.javascript.rhino.jstype.EnumElementType",
188:       "com.google.javascript.rhino.jstype.UnionType",
189:       "com.google.common.base.Objects",
190:       "com.google.javascript.rhino.Node$NumberNode",
191:       "com.google.common.collect.SingletonImmutableList",
192:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
193:       "com.google.common.collect.ImmutableCollection$Builder",
194:       "com.google.javascript.rhino.jstype.StaticSlot",
195:       "com.google.common.collect.Iterators$6",
196:       "com.google.common.collect.BiMap",
197:       "com.google.common.collect.Iterators$7",
198:       "com.google.common.collect.AbstractSetMultimap",
199:       "com.google.common.base.Function",
200:       "com.google.common.collect.ImmutableSet",
201:       "com.google.common.collect.Lists$AbstractListWrapper",
202:       "com.google.common.collect.ImmutableMap",
203:       "com.google.common.collect.AbstractIndexedListIterator",
204:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
205:       "com.google.common.collect.Maps$1",
206:       "com.google.javascript.rhino.jstype.EnumType",
207:       "com.google.common.collect.Iterators$1",
208:       "com.google.common.collect.Iterators$2",
209:       "com.google.javascript.rhino.jstype.NamespaceType",
210:       "com.google.common.collect.Iterators$3",
211:       "com.google.common.collect.Sets",
212:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
213:       "com.google.javascript.rhino.Node$ObjectPropListItem",
214:       "com.google.common.collect.Lists$StringAsImmutableList",
215:       "com.google.common.collect.Lists$2",
216:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
217:       "com.google.common.collect.ImmutableList$Builder",
218:       "com.google.common.collect.Lists$1",
219:       "com.google.javascript.rhino.jstype.StaticReference",
220:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
221:       "com.google.common.collect.Multiset",
222:       "com.google.common.collect.AbstractMultimap",
223:       "com.google.common.collect.Multimap",
224:       "com.google.common.collect.Iterators",
225:       "com.google.common.collect.EmptyImmutableSet",
226:       "com.google.common.collect.Maps$ImprovedAbstractMap",
227:       "com.google.common.collect.ImmutableBiMap",
228:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
229:       "com.google.common.collect.ImmutableList",
230:       "com.google.common.collect.SingletonImmutableBiMap",
231:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
232:       "com.google.javascript.rhino.jstype.StringType",
233:       "com.google.javascript.rhino.Node$AbstractPropListItem",
234:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
235:       "com.google.javascript.rhino.jstype.TemplatizedType",
236:       "com.google.javascript.rhino.jstype.Visitor",
237:       "com.google.javascript.rhino.jstype.NoResolvedType",
238:       "com.google.javascript.rhino.jstype.JSTypeNative",
239:       "com.google.javascript.rhino.jstype.AllType",
240:       "com.google.common.collect.Maps",
241:       "com.google.common.collect.SetMultimap",
242:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
243:       "com.google.common.collect.Maps$EntryTransformer",
244:       "com.google.javascript.rhino.JSTypeExpression",
245:       "com.google.common.collect.Iterators$MergingIterator"
246:     );
247:   } 
248:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
249:     mock(Class.forName("java.util.function.Consumer", false, Node_28_tmp__ESTest_scaffolding.class.getClassLoader()));
250:   }
251: 
252:   private static void resetClasses() {
253:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_28_tmp__ESTest_scaffolding.class.getClassLoader()); 
254: 
255:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
256:       "com.google.javascript.rhino.Node",
257:       "com.google.javascript.rhino.Node$NumberNode",
258:       "com.google.javascript.rhino.Node$StringNode",
259:       "com.google.javascript.rhino.Node$AbstractPropListItem",
260:       "com.google.javascript.rhino.Node$ObjectPropListItem",
261:       "com.google.javascript.rhino.Node$IntPropListItem",
262:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
263:       "com.google.javascript.rhino.Node$AncestorIterable",
264:       "com.google.javascript.rhino.Node$NodeMismatch",
265:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
266:       "com.google.javascript.rhino.Node$SideEffectFlags",
267:       "com.google.javascript.rhino.SimpleErrorReporter",
268:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
269:       "com.google.common.base.Joiner",
270:       "com.google.common.base.Preconditions",
271:       "com.google.common.base.Joiner$1",
272:       "com.google.common.collect.Collections2",
273:       "com.google.common.base.Joiner$MapJoiner",
274:       "com.google.common.collect.Maps",
275:       "com.google.common.collect.AbstractMultimap",
276:       "com.google.common.collect.AbstractMapBasedMultimap",
277:       "com.google.common.collect.AbstractSetMultimap",
278:       "com.google.common.collect.LinkedHashMultimap",
279:       "com.google.common.collect.AbstractMapEntry",
280:       "com.google.common.collect.ImmutableEntry",
281:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
282:       "com.google.common.collect.AbstractListMultimap",
283:       "com.google.common.collect.ArrayListMultimap",
284:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
285:       "com.google.common.collect.ImmutableCollection",
286:       "com.google.common.collect.RegularImmutableList",
287:       "com.google.common.collect.ObjectArrays",
288:       "com.google.common.collect.ImmutableList",
289:       "com.google.javascript.rhino.jstype.ModificationVisitor",
290:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
291:       "com.google.common.collect.ImmutableCollection$Builder",
292:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
293:       "com.google.common.collect.ImmutableList$Builder",
294:       "com.google.common.collect.UnmodifiableIterator",
295:       "com.google.common.collect.UnmodifiableListIterator",
296:       "com.google.common.collect.Iterators$1",
297:       "com.google.common.collect.Iterators$2",
298:       "com.google.common.collect.Iterators",
299:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
300:       "com.google.javascript.rhino.jstype.JSType$1",
301:       "com.google.javascript.rhino.jstype.JSType",
302:       "com.google.javascript.rhino.jstype.ObjectType",
303:       "com.google.javascript.rhino.jstype.ProxyObjectType",
304:       "com.google.javascript.rhino.jstype.TemplateType",
305:       "com.google.javascript.rhino.jstype.ValueType",
306:       "com.google.javascript.rhino.jstype.BooleanType",
307:       "com.google.javascript.rhino.jstype.NullType",
308:       "com.google.javascript.rhino.jstype.NumberType",
309:       "com.google.javascript.rhino.jstype.StringType",
310:       "com.google.javascript.rhino.jstype.UnknownType",
311:       "com.google.javascript.rhino.jstype.VoidType",
312:       "com.google.javascript.rhino.jstype.AllType",
313:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
314:       "com.google.common.collect.ImmutableMap",
315:       "com.google.common.collect.ImmutableBiMap",
316:       "com.google.common.collect.EmptyImmutableBiMap",
317:       "com.google.javascript.rhino.jstype.PropertyMap$1",
318:       "com.google.javascript.rhino.jstype.PropertyMap",
319:       "com.google.javascript.rhino.jstype.FunctionType",
320:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
321:       "com.google.javascript.rhino.Token",
322:       "com.google.javascript.rhino.jstype.ArrowType",
323:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
324:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
325:       "com.google.javascript.rhino.jstype.InstanceObjectType",
326:       "com.google.javascript.rhino.jstype.Property",
327:       "com.google.common.collect.Lists",
328:       "com.google.javascript.rhino.jstype.NoObjectType",
329:       "com.google.javascript.rhino.jstype.NoType",
330:       "com.google.javascript.rhino.jstype.NoResolvedType",
331:       "com.google.common.collect.SingletonImmutableList",
332:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
333:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
334:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
335:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
336:       "com.google.javascript.rhino.jstype.UnionType",
337:       "com.google.javascript.rhino.jstype.FunctionBuilder",
338:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
339:       "com.google.javascript.rhino.jstype.EnumType",
340:       "com.google.javascript.rhino.jstype.EnumElementType",
341:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
342:       "com.google.common.collect.ImmutableSet",
343:       "com.google.common.collect.EmptyImmutableSet",
344:       "com.google.javascript.rhino.JSDocInfo",
345:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
346:       "com.google.common.collect.Sets",
347:       "com.google.javascript.rhino.Node$AncestorIterable$1",
348:       "com.google.common.base.Objects",
349:       "com.google.javascript.rhino.InputId",
350:       "com.google.javascript.rhino.JSTypeExpression",
351:       "com.google.common.collect.Iterables",
352:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
353:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
354:       "com.google.javascript.rhino.jstype.TemplatizedType",
355:       "com.google.common.collect.AbstractMultimap$Values",
356:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
357:       "com.google.common.collect.AbstractMapBasedMultimap$1",
358:       "com.google.common.collect.Multimaps$Entries",
359:       "com.google.common.collect.AbstractMultimap$Entries",
360:       "com.google.common.collect.AbstractMapBasedMultimap$2",
361:       "com.google.javascript.rhino.jstype.NamedType",
362:       "com.google.common.collect.AbstractIndexedListIterator",
363:       "com.google.common.collect.Iterators$11",
364:       "com.google.common.collect.Platform",
365:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
366:       "com.google.javascript.rhino.jstype.TernaryValue",
367:       "com.google.javascript.rhino.jstype.JSType$2",
368:       "com.google.javascript.rhino.jstype.JSType$TypePair",
369:       "com.google.common.collect.ImmutableList$1"
370:     );
371:   }
372: }

[MASTER] 13:12:58.630 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = new Node(307);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertNotNull(node0);

int int0 = node0.getLength();
assertEquals(0, int0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());

Iterable<Node> iterable0 = node0.children();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

Node node1 = new Node(512, node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node1.equals((Object)node0));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(512, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertNotNull(node1);

Node node2 = node0.srcrefTree(node1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(512, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isThrow());
assertFalse(node2.isHook());
assertFalse(node2.isFalse());
assertFalse(node2.isComma());
assertFalse(node2.isGetProp());
assertFalse(node2.isThis());
assertFalse(node2.isFor());
assertFalse(node2.isNot());
assertFalse(node2.isString());
assertFalse(node2.isGetterDef());
assertFalse(node2.isObjectLit());
assertFalse(node2.isExprResult());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isArrayLit());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isBreak());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDelProp());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isEmpty());
assertFalse(node2.isOr());
assertFalse(node2.isBlock());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isWhile());
assertFalse(node2.isVar());
assertFalse(node2.isCall());
assertFalse(node2.isReturn());
assertFalse(node2.isLabel());
assertFalse(node2.isContinue());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isTypeOf());
assertEquals(307, node2.getType());
assertFalse(node2.isParamList());
assertFalse(node2.isDec());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.hasChildren());
assertFalse(node2.isLabelName());
assertFalse(node2.isStringKey());
assertFalse(node2.hasOneChild());
assertFalse(node2.isNumber());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertFalse(node2.isDebugger());
assertFalse(node2.isTry());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isWith());
assertFalse(node2.isFunction());
assertFalse(node2.isNE());
assertFalse(node2.isSetterDef());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isIn());
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertNotSame(node2, node1);
assertSame(node2, node0);
assertNotNull(node2);

node0.addSuppression("VyuMrE[%b~N\"");
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertSame(node0, node2);
assertNotSame(node0, node1);

Node node3 = new Node(227);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isCall());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isContinue());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.hasOneChild());
assertFalse(node3.isReturn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(227, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isDo());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertNotNull(node3);

boolean boolean0 = node0.isEquivalentToTyped(node3);
assertFalse(boolean0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isCall());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isContinue());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.hasOneChild());
assertFalse(node3.isReturn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(227, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isDo());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node3, node2);
assertNotSame(node3, node0);
assertNotSame(node3, node1);

Node.AncestorIterable node_AncestorIterable0 = new Node.AncestorIterable(node0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertNotNull(node_AncestorIterable0);

boolean boolean1 = node1.isEquivalentTo(node0, false, false, false);
assertFalse(boolean1);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean1 == boolean0);
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(512, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);

node1.setIsSyntheticBlock(false);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertFalse(node1.isNew());
assertFalse(node1.isBlock());
assertFalse(node1.isAdd());
assertFalse(node1.isDo());
assertFalse(node1.isName());
assertFalse(node1.isStringKey());
assertFalse(node1.isOr());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isContinue());
assertFalse(node1.isVar());
assertFalse(node1.isCast());
assertFalse(node1.isFunction());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isExprResult());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isAnd());
assertFalse(node1.isEmpty());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isGetProp());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertTrue(node1.hasOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isComma());
assertFalse(node1.isAssign());
assertFalse(node1.isTypeOf());
assertEquals(512, node1.getType());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isString());
assertFalse(node1.isIn());
assertFalse(node1.isFalse());
assertFalse(node1.isThrow());
assertFalse(node1.isScript());
assertFalse(node1.isArrayLit());
assertFalse(node1.isTry());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isThis());
assertFalse(node1.isNE());
assertTrue(node1.hasChildren());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertEquals(1, node1.getChildCount());
assertFalse(node1.isRegExp());
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);

Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
node_AncestorIterable0.forEach(consumer0);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node0, node1);

Iterator<Node> iterator0 = node_AncestorIterable0.iterator();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotNull(iterator0);

node3.putBooleanProp(31, false);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(54, Node.SLASH_V);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.isDefaultCase());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isParamList());
assertFalse(node3.isNull());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFor());
assertFalse(node3.isDelProp());
assertFalse(node3.isName());
assertFalse(node3.isIf());
assertFalse(node3.isCall());
assertFalse(node3.isTry());
assertFalse(node3.isBlock());
assertFalse(node3.isRegExp());
assertFalse(node3.isContinue());
assertFalse(node3.isString());
assertFalse(node3.isWhile());
assertFalse(node3.isInc());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isCast());
assertFalse(node3.isSetterDef());
assertFalse(node3.isFunction());
assertFalse(node3.isNot());
assertFalse(node3.isWith());
assertFalse(node3.isAnd());
assertFalse(node3.isScript());
assertFalse(node3.isExprResult());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAssign());
assertFalse(node3.isGetElem());
assertFalse(node3.isGetProp());
assertFalse(node3.isBreak());
assertFalse(node3.hasOneChild());
assertFalse(node3.isReturn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(227, node3.getType());
assertFalse(node3.isHook());
assertFalse(node3.isThis());
assertFalse(node3.isTypeOf());
assertFalse(node3.isDec());
assertFalse(node3.hasChildren());
assertFalse(node3.isComma());
assertFalse(node3.isDo());
assertFalse(node3.isSwitch());
assertFalse(node3.isCase());
assertFalse(node3.isNew());
assertFalse(node3.isOr());
assertFalse(node3.isAdd());
assertFalse(node3.isNumber());
assertFalse(node3.isGetterDef());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isEmpty());
assertFalse(node3.isLabelName());
assertFalse(node3.isStringKey());
assertFalse(node3.isArrayLit());
assertFalse(node3.isLabel());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isVar());
assertEquals(0, node3.getChildCount());
assertNotSame(node3, node2);
assertNotSame(node3, node0);
assertNotSame(node3, node1);

Iterator<Node> iterator1 = node_AncestorIterable0.iterator();
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(iterator1.equals((Object)iterator0));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(iterator1, iterator0);
assertNotNull(iterator1);

boolean boolean2 = node0.isIn();
assertFalse(boolean2);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertTrue(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isWhile());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isReturn());
assertFalse(node0.isNull());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isName());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isCatch());
assertFalse(node0.isVoid());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isScript());
assertFalse(node0.isDefaultCase());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertEquals(307, node0.getType());
assertFalse(node0.isNumber());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabelName());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isString());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isNE());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.isExprResult());
assertFalse(node0.isFunction());
assertFalse(node0.isDebugger());
assertFalse(node0.isNot());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isFalse());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isCast());
assertSame(node0, node2);
assertNotSame(node0, node3);
assertNotSame(node0, node1);

node3.getChildBefore(node0);

[MASTER] 13:13:00.548 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_37_1628255580308/com/google/javascript/rhino/Node_37_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_37_1628255580308/com/google/javascript/rhino/Node_37_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:00.548 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:00.548 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:00.549 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 269
[MASTER] 13:13:00.551 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_37_1628255580308/com/google/javascript/rhino/Node_37_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ImmutableList;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import com.google.javascript.rhino.SimpleErrorReporter;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import java.util.Iterator;
18: import java.util.LinkedHashSet;
19: import java.util.List;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.evosuite.runtime.testdata.FileSystemHandling;
23: import org.junit.runner.RunWith;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
26: public class Node_37_tmp__ESTest extends Node_37_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
31:       assertNotNull(simpleErrorReporter0);
32:       
33:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
34:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
35:       assertNotNull(jSTypeRegistry0);
36:       
37:       LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
38:       assertEquals(0, linkedHashSet0.size());
39:       assertTrue(linkedHashSet0.isEmpty());
40:       assertNotNull(linkedHashSet0);
41:       
42:       Iterator<JSType> iterator0 = linkedHashSet0.iterator();
43:       assertEquals(0, linkedHashSet0.size());
44:       assertTrue(linkedHashSet0.isEmpty());
45:       assertNotNull(iterator0);
46:       
47:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
48:       assertEquals(0, linkedHashSet0.size());
49:       assertTrue(linkedHashSet0.isEmpty());
50:       assertEquals(0, immutableList0.size());
51:       assertNotNull(immutableList0);
52:       
53:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
54:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
55:       assertEquals(56, Node.CHANGE_TIME);
56:       assertEquals(47, Node.IS_DISPATCHER);
57:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
58:       assertEquals(37, Node.OPT_ARG_NAME);
59:       assertEquals(2, Node.POST_FLAG);
60:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
61:       assertEquals(30, Node.VAR_ARGS_NAME);
62:       assertEquals(49, Node.DIRECT_EVAL);
63:       assertEquals(57, Node.LAST_PROP);
64:       assertEquals(36, Node.QUOTED_PROP);
65:       assertEquals(52, Node.LENGTH);
66:       assertEquals(8, Node.FLAG_NO_THROWS);
67:       assertEquals(15, Node.NO_SIDE_EFFECTS);
68:       assertEquals(55, Node.INFERRED_FUNCTION);
69:       assertEquals(39, Node.EMPTY_BLOCK);
70:       assertEquals(29, Node.JSDOC_INFO_PROP);
71:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
72:       assertEquals(53, Node.INPUT_ID);
73:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
74:       assertEquals(50, Node.FREE_CALL);
75:       assertEquals(57, Node.REFLECTED_OBJECT);
76:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
77:       assertEquals(48, Node.DIRECTIVES);
78:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
79:       assertEquals(4095, Node.COLUMN_MASK);
80:       assertEquals(40, Node.ORIGINALNAME_PROP);
81:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
82:       assertEquals(1, Node.DECR_FLAG);
83:       assertEquals(43, Node.IS_CONSTANT_NAME);
84:       assertEquals(51, Node.STATIC_SOURCE_FILE);
85:       assertEquals(12, Node.COLUMN_BITS);
86:       assertEquals(46, Node.IS_NAMESPACE);
87:       assertEquals(54, Node.SLASH_V);
88:       assertEquals(32, Node.INCRDECR_PROP);
89:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
90:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
91:       assertEquals(0, linkedHashSet0.size());
92:       assertTrue(linkedHashSet0.isEmpty());
93:       assertEquals(0, immutableList0.size());
94:       assertFalse(node0.hasOneChild());
95:       assertFalse(node0.isCast());
96:       assertFalse(node0.isLabelName());
97:       assertFalse(node0.isExprResult());
98:       assertFalse(node0.isGetElem());
99:       assertFalse(node0.isScript());
100:       assertEquals((-1), node0.getSourcePosition());
101:       assertFalse(node0.isNumber());
102:       assertFalse(node0.isOr());
103:       assertFalse(node0.isNot());
104:       assertFalse(node0.isInstanceOf());
105:       assertFalse(node0.isObjectLit());
106:       assertTrue(node0.isParamList());
107:       assertFalse(node0.hasMoreThanOneChild());
108:       assertEquals((-1), node0.getLineno());
109:       assertFalse(node0.isGetProp());
110:       assertFalse(node0.isTypeOf());
111:       assertFalse(node0.isComma());
112:       assertFalse(node0.isDec());
113:       assertFalse(node0.isWith());
114:       assertFalse(node0.isAssign());
115:       assertFalse(node0.isWhile());
116:       assertFalse(node0.hasChildren());
117:       assertFalse(node0.isThis());
118:       assertFalse(node0.isReturn());
119:       assertFalse(node0.isBlock());
120:       assertFalse(node0.isVar());
121:       assertFalse(node0.isName());
122:       assertFalse(node0.isAdd());
123:       assertFalse(node0.isNew());
124:       assertFalse(node0.isBreak());
125:       assertFalse(node0.isCall());
126:       assertFalse(node0.isNull());
127:       assertEquals(83, node0.getType());
128:       assertFalse(node0.isSwitch());
129:       assertFalse(node0.isStringKey());
130:       assertEquals((-1), node0.getCharno());
131:       assertEquals(0, node0.getChildCount());
132:       assertFalse(node0.isDo());
133:       assertFalse(node0.isDefaultCase());
134:       assertFalse(node0.isLabel());
135:       assertFalse(node0.isAssignAdd());
136:       assertFalse(node0.isArrayLit());
137:       assertFalse(node0.isTry());
138:       assertFalse(node0.isEmpty());
139:       assertFalse(node0.isNE());
140:       assertFalse(node0.isDelProp());
141:       assertFalse(node0.isIf());
142:       assertFalse(node0.isGetterDef());
143:       assertFalse(node0.isVoid());
144:       assertFalse(node0.isTrue());
145:       assertFalse(node0.isDebugger());
146:       assertFalse(node0.isCatch());
147:       assertFalse(node0.isCase());
148:       assertFalse(node0.isRegExp());
149:       assertFalse(node0.isFor());
150:       assertFalse(node0.isHook());
151:       assertFalse(node0.isFalse());
152:       assertFalse(node0.isInc());
153:       assertFalse(node0.isString());
154:       assertFalse(node0.isIn());
155:       assertFalse(node0.isContinue());
156:       assertFalse(node0.isAnd());
157:       assertFalse(node0.isSetterDef());
158:       assertFalse(node0.isFunction());
159:       assertFalse(node0.isThrow());
160:       assertNotNull(node0);
161:       
162:       Iterable<Node> iterable0 = node0.children();
163:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
164:       assertEquals(56, Node.CHANGE_TIME);
165:       assertEquals(47, Node.IS_DISPATCHER);
166:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
167:       assertEquals(37, Node.OPT_ARG_NAME);
168:       assertEquals(2, Node.POST_FLAG);
169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
170:       assertEquals(30, Node.VAR_ARGS_NAME);
171:       assertEquals(49, Node.DIRECT_EVAL);
172:       assertEquals(57, Node.LAST_PROP);
173:       assertEquals(36, Node.QUOTED_PROP);
174:       assertEquals(52, Node.LENGTH);
175:       assertEquals(8, Node.FLAG_NO_THROWS);
176:       assertEquals(15, Node.NO_SIDE_EFFECTS);
177:       assertEquals(55, Node.INFERRED_FUNCTION);
178:       assertEquals(39, Node.EMPTY_BLOCK);
179:       assertEquals(29, Node.JSDOC_INFO_PROP);
180:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
181:       assertEquals(53, Node.INPUT_ID);
182:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
183:       assertEquals(50, Node.FREE_CALL);
184:       assertEquals(57, Node.REFLECTED_OBJECT);
185:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
186:       assertEquals(48, Node.DIRECTIVES);
187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
188:       assertEquals(4095, Node.COLUMN_MASK);
189:       assertEquals(40, Node.ORIGINALNAME_PROP);
190:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
191:       assertEquals(1, Node.DECR_FLAG);
192:       assertEquals(43, Node.IS_CONSTANT_NAME);
193:       assertEquals(51, Node.STATIC_SOURCE_FILE);
194:       assertEquals(12, Node.COLUMN_BITS);
195:       assertEquals(46, Node.IS_NAMESPACE);
196:       assertEquals(54, Node.SLASH_V);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
199:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
200:       assertEquals(0, linkedHashSet0.size());
201:       assertTrue(linkedHashSet0.isEmpty());
202:       assertEquals(0, immutableList0.size());
203:       assertFalse(node0.hasOneChild());
204:       assertFalse(node0.isCast());
205:       assertFalse(node0.isLabelName());
206:       assertFalse(node0.isExprResult());
207:       assertFalse(node0.isGetElem());
208:       assertFalse(node0.isScript());
209:       assertEquals((-1), node0.getSourcePosition());
210:       assertFalse(node0.isNumber());
211:       assertFalse(node0.isOr());
212:       assertFalse(node0.isNot());
213:       assertFalse(node0.isInstanceOf());
214:       assertFalse(node0.isObjectLit());
215:       assertTrue(node0.isParamList());
216:       assertFalse(node0.hasMoreThanOneChild());
217:       assertEquals((-1), node0.getLineno());
218:       assertFalse(node0.isGetProp());
219:       assertFalse(node0.isTypeOf());
220:       assertFalse(node0.isComma());
221:       assertFalse(node0.isDec());
222:       assertFalse(node0.isWith());
223:       assertFalse(node0.isAssign());
224:       assertFalse(node0.isWhile());
225:       assertFalse(node0.hasChildren());
226:       assertFalse(node0.isThis());
227:       assertFalse(node0.isReturn());
228:       assertFalse(node0.isBlock());
229:       assertFalse(node0.isVar());
230:       assertFalse(node0.isName());
231:       assertFalse(node0.isAdd());
232:       assertFalse(node0.isNew());
233:       assertFalse(node0.isBreak());
234:       assertFalse(node0.isCall());
235:       assertFalse(node0.isNull());
236:       assertEquals(83, node0.getType());
237:       assertFalse(node0.isSwitch());
238:       assertFalse(node0.isStringKey());
239:       assertEquals((-1), node0.getCharno());
240:       assertEquals(0, node0.getChildCount());
241:       assertFalse(node0.isDo());
242:       assertFalse(node0.isDefaultCase());
243:       assertFalse(node0.isLabel());
244:       assertFalse(node0.isAssignAdd());
245:       assertFalse(node0.isArrayLit());
246:       assertFalse(node0.isTry());
247:       assertFalse(node0.isEmpty());
248:       assertFalse(node0.isNE());
249:       assertFalse(node0.isDelProp());
250:       assertFalse(node0.isIf());
251:       assertFalse(node0.isGetterDef());
252:       assertFalse(node0.isVoid());
253:       assertFalse(node0.isTrue());
254:       assertFalse(node0.isDebugger());
255:       assertFalse(node0.isCatch());
256:       assertFalse(node0.isCase());
257:       assertFalse(node0.isRegExp());
258:       assertFalse(node0.isFor());
259:       assertFalse(node0.isHook());
260:       assertFalse(node0.isFalse());
261:       assertFalse(node0.isInc());
262:       assertFalse(node0.isString());
263:       assertFalse(node0.isIn());
264:       assertFalse(node0.isContinue());
265:       assertFalse(node0.isAnd());
266:       assertFalse(node0.isSetterDef());
267:       assertFalse(node0.isFunction());
268:       assertFalse(node0.isThrow());
269:       assertFalse(iterable0.contains(node0));
270:       assertNotNull(iterable0);
271:       
272:       boolean boolean0 = node0.isQualifiedName();
273:       assertFalse(boolean0);
274:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
275:       assertEquals(56, Node.CHANGE_TIME);
276:       assertEquals(47, Node.IS_DISPATCHER);
277:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
278:       assertEquals(37, Node.OPT_ARG_NAME);
279:       assertEquals(2, Node.POST_FLAG);
280:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
281:       assertEquals(30, Node.VAR_ARGS_NAME);
282:       assertEquals(49, Node.DIRECT_EVAL);
283:       assertEquals(57, Node.LAST_PROP);
284:       assertEquals(36, Node.QUOTED_PROP);
285:       assertEquals(52, Node.LENGTH);
286:       assertEquals(8, Node.FLAG_NO_THROWS);
287:       assertEquals(15, Node.NO_SIDE_EFFECTS);
288:       assertEquals(55, Node.INFERRED_FUNCTION);
289:       assertEquals(39, Node.EMPTY_BLOCK);
290:       assertEquals(29, Node.JSDOC_INFO_PROP);
291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
292:       assertEquals(53, Node.INPUT_ID);
293:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
294:       assertEquals(50, Node.FREE_CALL);
295:       assertEquals(57, Node.REFLECTED_OBJECT);
296:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
297:       assertEquals(48, Node.DIRECTIVES);
298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
299:       assertEquals(4095, Node.COLUMN_MASK);
300:       assertEquals(40, Node.ORIGINALNAME_PROP);
301:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
302:       assertEquals(1, Node.DECR_FLAG);
303:       assertEquals(43, Node.IS_CONSTANT_NAME);
304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
305:       assertEquals(12, Node.COLUMN_BITS);
306:       assertEquals(46, Node.IS_NAMESPACE);
307:       assertEquals(54, Node.SLASH_V);
308:       assertEquals(32, Node.INCRDECR_PROP);
309:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
310:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
311:       assertEquals(0, linkedHashSet0.size());
312:       assertTrue(linkedHashSet0.isEmpty());
313:       assertEquals(0, immutableList0.size());
314:       assertFalse(node0.hasOneChild());
315:       assertFalse(node0.isCast());
316:       assertFalse(node0.isLabelName());
317:       assertFalse(node0.isExprResult());
318:       assertFalse(node0.isGetElem());
319:       assertFalse(node0.isScript());
320:       assertEquals((-1), node0.getSourcePosition());
321:       assertFalse(node0.isNumber());
322:       assertFalse(node0.isOr());
323:       assertFalse(node0.isNot());
324:       assertFalse(node0.isInstanceOf());
325:       assertFalse(node0.isObjectLit());
326:       assertTrue(node0.isParamList());
327:       assertFalse(node0.hasMoreThanOneChild());
328:       assertEquals((-1), node0.getLineno());
329:       assertFalse(node0.isGetProp());
330:       assertFalse(node0.isTypeOf());
331:       assertFalse(node0.isComma());
332:       assertFalse(node0.isDec());
333:       assertFalse(node0.isWith());
334:       assertFalse(node0.isAssign());
335:       assertFalse(node0.isWhile());
336:       assertFalse(node0.hasChildren());
337:       assertFalse(node0.isThis());
338:       assertFalse(node0.isReturn());
339:       assertFalse(node0.isBlock());
340:       assertFalse(node0.isVar());
341:       assertFalse(node0.isName());
342:       assertFalse(node0.isAdd());
343:       assertFalse(node0.isNew());
344:       assertFalse(node0.isBreak());
345:       assertFalse(node0.isCall());
346:       assertFalse(node0.isNull());
347:       assertEquals(83, node0.getType());
348:       assertFalse(node0.isSwitch());
349:       assertFalse(node0.isStringKey());
350:       assertEquals((-1), node0.getCharno());
351:       assertEquals(0, node0.getChildCount());
352:       assertFalse(node0.isDo());
353:       assertFalse(node0.isDefaultCase());
354:       assertFalse(node0.isLabel());
355:       assertFalse(node0.isAssignAdd());
356:       assertFalse(node0.isArrayLit());
357:       assertFalse(node0.isTry());
358:       assertFalse(node0.isEmpty());
359:       assertFalse(node0.isNE());
360:       assertFalse(node0.isDelProp());
361:       assertFalse(node0.isIf());
362:       assertFalse(node0.isGetterDef());
363:       assertFalse(node0.isVoid());
364:       assertFalse(node0.isTrue());
365:       assertFalse(node0.isDebugger());
366:       assertFalse(node0.isCatch());
367:       assertFalse(node0.isCase());
368:       assertFalse(node0.isRegExp());
369:       assertFalse(node0.isFor());
370:       assertFalse(node0.isHook());
371:       assertFalse(node0.isFalse());
372:       assertFalse(node0.isInc());
373:       assertFalse(node0.isString());
374:       assertFalse(node0.isIn());
375:       assertFalse(node0.isContinue());
376:       assertFalse(node0.isAnd());
377:       assertFalse(node0.isSetterDef());
378:       assertFalse(node0.isFunction());
379:       assertFalse(node0.isThrow());
380:       
381:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
382:       assertNotNull(fileSystemHandling0);
383:       
384:       simpleErrorReporter0.error("wV`=Nkp+4XKZ", "Object#Key", 34, 38);
385:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
386:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
387:       assertEquals(56, Node.CHANGE_TIME);
388:       assertEquals(47, Node.IS_DISPATCHER);
389:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
390:       assertEquals(37, Node.OPT_ARG_NAME);
391:       assertEquals(2, Node.POST_FLAG);
392:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
393:       assertEquals(30, Node.VAR_ARGS_NAME);
394:       assertEquals(49, Node.DIRECT_EVAL);
395:       assertEquals(57, Node.LAST_PROP);
396:       assertEquals(36, Node.QUOTED_PROP);
397:       assertEquals(52, Node.LENGTH);
398:       assertEquals(8, Node.FLAG_NO_THROWS);
399:       assertEquals(15, Node.NO_SIDE_EFFECTS);
400:       assertEquals(55, Node.INFERRED_FUNCTION);
401:       assertEquals(39, Node.EMPTY_BLOCK);
402:       assertEquals(29, Node.JSDOC_INFO_PROP);
403:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
404:       assertEquals(53, Node.INPUT_ID);
405:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
406:       assertEquals(50, Node.FREE_CALL);
407:       assertEquals(57, Node.REFLECTED_OBJECT);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(48, Node.DIRECTIVES);
410:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
411:       assertEquals(4095, Node.COLUMN_MASK);
412:       assertEquals(40, Node.ORIGINALNAME_PROP);
413:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
414:       assertEquals(1, Node.DECR_FLAG);
415:       assertEquals(43, Node.IS_CONSTANT_NAME);
416:       assertEquals(51, Node.STATIC_SOURCE_FILE);
417:       assertEquals(12, Node.COLUMN_BITS);
418:       assertEquals(46, Node.IS_NAMESPACE);
419:       assertEquals(54, Node.SLASH_V);
420:       assertEquals(32, Node.INCRDECR_PROP);
421:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
422:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
423:       assertEquals(0, linkedHashSet0.size());
424:       assertTrue(linkedHashSet0.isEmpty());
425:       assertEquals(0, immutableList0.size());
426:       assertFalse(node0.hasOneChild());
427:       assertFalse(node0.isCast());
428:       assertFalse(node0.isLabelName());
429:       assertFalse(node0.isExprResult());
430:       assertFalse(node0.isGetElem());
431:       assertFalse(node0.isScript());
432:       assertEquals((-1), node0.getSourcePosition());
433:       assertFalse(node0.isNumber());
434:       assertFalse(node0.isOr());
435:       assertFalse(node0.isNot());
436:       assertFalse(node0.isInstanceOf());
437:       assertFalse(node0.isObjectLit());
438:       assertTrue(node0.isParamList());
439:       assertFalse(node0.hasMoreThanOneChild());
440:       assertEquals((-1), node0.getLineno());
441:       assertFalse(node0.isGetProp());
442:       assertFalse(node0.isTypeOf());
443:       assertFalse(node0.isComma());
444:       assertFalse(node0.isDec());
445:       assertFalse(node0.isWith());
446:       assertFalse(node0.isAssign());
447:       assertFalse(node0.isWhile());
448:       assertFalse(node0.hasChildren());
449:       assertFalse(node0.isThis());
450:       assertFalse(node0.isReturn());
451:       assertFalse(node0.isBlock());
452:       assertFalse(node0.isVar());
453:       assertFalse(node0.isName());
454:       assertFalse(node0.isAdd());
455:       assertFalse(node0.isNew());
456:       assertFalse(node0.isBreak());
457:       assertFalse(node0.isCall());
458:       assertFalse(node0.isNull());
459:       assertEquals(83, node0.getType());
460:       assertFalse(node0.isSwitch());
461:       assertFalse(node0.isStringKey());
462:       assertEquals((-1), node0.getCharno());
463:       assertEquals(0, node0.getChildCount());
464:       assertFalse(node0.isDo());
465:       assertFalse(node0.isDefaultCase());
466:       assertFalse(node0.isLabel());
467:       assertFalse(node0.isAssignAdd());
468:       assertFalse(node0.isArrayLit());
469:       assertFalse(node0.isTry());
470:       assertFalse(node0.isEmpty());
471:       assertFalse(node0.isNE());
472:       assertFalse(node0.isDelProp());
473:       assertFalse(node0.isIf());
474:       assertFalse(node0.isGetterDef());
475:       assertFalse(node0.isVoid());
476:       assertFalse(node0.isTrue());
477:       assertFalse(node0.isDebugger());
478:       assertFalse(node0.isCatch());
479:       assertFalse(node0.isCase());
480:       assertFalse(node0.isRegExp());
481:       assertFalse(node0.isFor());
482:       assertFalse(node0.isHook());
483:       assertFalse(node0.isFalse());
484:       assertFalse(node0.isInc());
485:       assertFalse(node0.isString());
486:       assertFalse(node0.isIn());
487:       assertFalse(node0.isContinue());
488:       assertFalse(node0.isAnd());
489:       assertFalse(node0.isSetterDef());
490:       assertFalse(node0.isFunction());
491:       assertFalse(node0.isThrow());
492:       assertNull(jSDocInfo0);
493:       
494:       Node node1 = node0.setJSDocInfo((JSDocInfo) null);
495:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
496:       assertEquals(56, Node.CHANGE_TIME);
497:       assertEquals(47, Node.IS_DISPATCHER);
498:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
499:       assertEquals(37, Node.OPT_ARG_NAME);
500:       assertEquals(2, Node.POST_FLAG);
501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
502:       assertEquals(30, Node.VAR_ARGS_NAME);
503:       assertEquals(49, Node.DIRECT_EVAL);
504:       assertEquals(57, Node.LAST_PROP);
505:       assertEquals(36, Node.QUOTED_PROP);
506:       assertEquals(52, Node.LENGTH);
507:       assertEquals(8, Node.FLAG_NO_THROWS);
508:       assertEquals(15, Node.NO_SIDE_EFFECTS);
509:       assertEquals(55, Node.INFERRED_FUNCTION);
510:       assertEquals(39, Node.EMPTY_BLOCK);
511:       assertEquals(29, Node.JSDOC_INFO_PROP);
512:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
513:       assertEquals(53, Node.INPUT_ID);
514:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
515:       assertEquals(50, Node.FREE_CALL);
516:       assertEquals(57, Node.REFLECTED_OBJECT);
517:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
518:       assertEquals(48, Node.DIRECTIVES);
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(4095, Node.COLUMN_MASK);
521:       assertEquals(40, Node.ORIGINALNAME_PROP);
522:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
523:       assertEquals(1, Node.DECR_FLAG);
524:       assertEquals(43, Node.IS_CONSTANT_NAME);
525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
526:       assertEquals(12, Node.COLUMN_BITS);
527:       assertEquals(46, Node.IS_NAMESPACE);
528:       assertEquals(54, Node.SLASH_V);
529:       assertEquals(32, Node.INCRDECR_PROP);
530:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
531:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
532:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
533:       assertEquals(53, Node.INPUT_ID);
534:       assertEquals(29, Node.JSDOC_INFO_PROP);
535:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
536:       assertEquals(43, Node.IS_CONSTANT_NAME);
537:       assertEquals(56, Node.CHANGE_TIME);
538:       assertEquals(36, Node.QUOTED_PROP);
539:       assertEquals(32, Node.INCRDECR_PROP);
540:       assertEquals(12, Node.COLUMN_BITS);
541:       assertEquals(4095, Node.COLUMN_MASK);
542:       assertEquals(37, Node.OPT_ARG_NAME);
543:       assertEquals(48, Node.DIRECTIVES);
544:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
545:       assertEquals(49, Node.DIRECT_EVAL);
546:       assertEquals(1, Node.DECR_FLAG);
547:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
548:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
549:       assertEquals(52, Node.LENGTH);
550:       assertEquals(57, Node.REFLECTED_OBJECT);
551:       assertEquals(40, Node.ORIGINALNAME_PROP);
552:       assertEquals(15, Node.NO_SIDE_EFFECTS);
553:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
554:       assertEquals(54, Node.SLASH_V);
555:       assertEquals(8, Node.FLAG_NO_THROWS);
556:       assertEquals(50, Node.FREE_CALL);
557:       assertEquals(51, Node.STATIC_SOURCE_FILE);
558:       assertEquals(46, Node.IS_NAMESPACE);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(39, Node.EMPTY_BLOCK);
562:       assertEquals(57, Node.LAST_PROP);
563:       assertEquals(47, Node.IS_DISPATCHER);
564:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
565:       assertEquals(2, Node.POST_FLAG);
566:       assertEquals(30, Node.VAR_ARGS_NAME);
567:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
568:       assertEquals(0, linkedHashSet0.size());
569:       assertTrue(linkedHashSet0.isEmpty());
570:       assertEquals(0, immutableList0.size());
571:       assertFalse(node0.hasOneChild());
572:       assertFalse(node0.isCast());
573:       assertFalse(node0.isLabelName());
574:       assertFalse(node0.isExprResult());
575:       assertFalse(node0.isGetElem());
576:       assertFalse(node0.isScript());
577:       assertEquals((-1), node0.getSourcePosition());
578:       assertFalse(node0.isNumber());
579:       assertFalse(node0.isOr());
580:       assertFalse(node0.isNot());
581:       assertFalse(node0.isInstanceOf());
582:       assertFalse(node0.isObjectLit());
583:       assertTrue(node0.isParamList());
584:       assertFalse(node0.hasMoreThanOneChild());
585:       assertEquals((-1), node0.getLineno());
586:       assertFalse(node0.isGetProp());
587:       assertFalse(node0.isTypeOf());
588:       assertFalse(node0.isComma());
589:       assertFalse(node0.isDec());
590:       assertFalse(node0.isWith());
591:       assertFalse(node0.isAssign());
592:       assertFalse(node0.isWhile());
593:       assertFalse(node0.hasChildren());
594:       assertFalse(node0.isThis());
595:       assertFalse(node0.isReturn());
596:       assertFalse(node0.isBlock());
597:       assertFalse(node0.isVar());
598:       assertFalse(node0.isName());
599:       assertFalse(node0.isAdd());
600:       assertFalse(node0.isNew());
601:       assertFalse(node0.isBreak());
602:       assertFalse(node0.isCall());
603:       assertFalse(node0.isNull());
604:       assertEquals(83, node0.getType());
605:       assertFalse(node0.isSwitch());
606:       assertFalse(node0.isStringKey());
607:       assertEquals((-1), node0.getCharno());
608:       assertEquals(0, node0.getChildCount());
609:       assertFalse(node0.isDo());
610:       assertFalse(node0.isDefaultCase());
611:       assertFalse(node0.isLabel());
612:       assertFalse(node0.isAssignAdd());
613:       assertFalse(node0.isArrayLit());
614:       assertFalse(node0.isTry());
615:       assertFalse(node0.isEmpty());
616:       assertFalse(node0.isNE());
617:       assertFalse(node0.isDelProp());
618:       assertFalse(node0.isIf());
619:       assertFalse(node0.isGetterDef());
620:       assertFalse(node0.isVoid());
621:       assertFalse(node0.isTrue());
622:       assertFalse(node0.isDebugger());
623:       assertFalse(node0.isCatch());
624:       assertFalse(node0.isCase());
625:       assertFalse(node0.isRegExp());
626:       assertFalse(node0.isFor());
627:       assertFalse(node0.isHook());
628:       assertFalse(node0.isFalse());
629:       assertFalse(node0.isInc());
630:       assertFalse(node0.isString());
631:       assertFalse(node0.isIn());
632:       assertFalse(node0.isContinue());
633:       assertFalse(node0.isAnd());
634:       assertFalse(node0.isSetterDef());
635:       assertFalse(node0.isFunction());
636:       assertFalse(node0.isThrow());
637:       assertFalse(node1.isExprResult());
638:       assertFalse(node1.isScript());
639:       assertFalse(node1.isWith());
640:       assertFalse(node1.isNot());
641:       assertFalse(node1.hasOneChild());
642:       assertFalse(node1.isGetProp());
643:       assertFalse(node1.isLabel());
644:       assertFalse(node1.isAssignAdd());
645:       assertTrue(node1.isParamList());
646:       assertFalse(node1.isNumber());
647:       assertEquals((-1), node1.getSourcePosition());
648:       assertFalse(node1.isObjectLit());
649:       assertFalse(node1.isFalse());
650:       assertFalse(node1.isContinue());
651:       assertFalse(node1.isAnd());
652:       assertFalse(node1.isCast());
653:       assertFalse(node1.isLabelName());
654:       assertFalse(node1.isNew());
655:       assertFalse(node1.isAdd());
656:       assertFalse(node1.isString());
657:       assertFalse(node1.isWhile());
658:       assertFalse(node1.isVar());
659:       assertFalse(node1.isDo());
660:       assertFalse(node1.isReturn());
661:       assertFalse(node1.isNull());
662:       assertFalse(node1.isTypeOf());
663:       assertFalse(node1.isDec());
664:       assertFalse(node1.hasChildren());
665:       assertEquals(83, node1.getType());
666:       assertFalse(node1.isComma());
667:       assertFalse(node1.isOr());
668:       assertFalse(node1.isAssign());
669:       assertFalse(node1.isName());
670:       assertFalse(node1.isGetElem());
671:       assertFalse(node1.isCall());
672:       assertFalse(node1.isBreak());
673:       assertFalse(node1.isDelProp());
674:       assertFalse(node1.isVoid());
675:       assertFalse(node1.isDebugger());
676:       assertFalse(node1.isTrue());
677:       assertFalse(node1.isFunction());
678:       assertFalse(node1.isRegExp());
679:       assertFalse(node1.isFor());
680:       assertFalse(node1.isEmpty());
681:       assertFalse(node1.isDefaultCase());
682:       assertFalse(node1.isTry());
683:       assertFalse(node1.isGetterDef());
684:       assertEquals(0, node1.getChildCount());
685:       assertFalse(node1.isStringKey());
686:       assertFalse(node1.isSwitch());
687:       assertFalse(node1.isArrayLit());
688:       assertFalse(node1.isBlock());
689:       assertEquals((-1), node1.getCharno());
690:       assertFalse(node1.isInc());
691:       assertFalse(node1.isHook());
692:       assertFalse(node1.isCase());
693:       assertFalse(node1.isThrow());
694:       assertFalse(node1.isThis());
695:       assertFalse(node1.isSetterDef());
696:       assertFalse(node1.isNE());
697:       assertFalse(node1.isInstanceOf());
698:       assertFalse(node1.isIn());
699:       assertFalse(node1.hasMoreThanOneChild());
700:       assertFalse(node1.isCatch());
701:       assertFalse(node1.isIf());
702:       assertEquals((-1), node1.getLineno());
703:       assertSame(node0, node1);
704:       assertSame(node1, node0);
705:       assertNotNull(node1);
706:       
707:       node1.putBooleanProp(105, true);
708:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
709:       assertEquals(56, Node.CHANGE_TIME);
710:       assertEquals(47, Node.IS_DISPATCHER);
711:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
712:       assertEquals(37, Node.OPT_ARG_NAME);
713:       assertEquals(2, Node.POST_FLAG);
714:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
715:       assertEquals(30, Node.VAR_ARGS_NAME);
716:       assertEquals(49, Node.DIRECT_EVAL);
717:       assertEquals(57, Node.LAST_PROP);
718:       assertEquals(36, Node.QUOTED_PROP);
719:       assertEquals(52, Node.LENGTH);
720:       assertEquals(8, Node.FLAG_NO_THROWS);
721:       assertEquals(15, Node.NO_SIDE_EFFECTS);
722:       assertEquals(55, Node.INFERRED_FUNCTION);
723:       assertEquals(39, Node.EMPTY_BLOCK);
724:       assertEquals(29, Node.JSDOC_INFO_PROP);
725:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
726:       assertEquals(53, Node.INPUT_ID);
727:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
728:       assertEquals(50, Node.FREE_CALL);
729:       assertEquals(57, Node.REFLECTED_OBJECT);
730:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
731:       assertEquals(48, Node.DIRECTIVES);
732:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
733:       assertEquals(4095, Node.COLUMN_MASK);
734:       assertEquals(40, Node.ORIGINALNAME_PROP);
735:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
736:       assertEquals(1, Node.DECR_FLAG);
737:       assertEquals(43, Node.IS_CONSTANT_NAME);
738:       assertEquals(51, Node.STATIC_SOURCE_FILE);
739:       assertEquals(12, Node.COLUMN_BITS);
740:       assertEquals(46, Node.IS_NAMESPACE);
741:       assertEquals(54, Node.SLASH_V);
742:       assertEquals(32, Node.INCRDECR_PROP);
743:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
744:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
745:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
746:       assertEquals(53, Node.INPUT_ID);
747:       assertEquals(29, Node.JSDOC_INFO_PROP);
748:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
749:       assertEquals(43, Node.IS_CONSTANT_NAME);
750:       assertEquals(56, Node.CHANGE_TIME);
751:       assertEquals(36, Node.QUOTED_PROP);
752:       assertEquals(32, Node.INCRDECR_PROP);
753:       assertEquals(12, Node.COLUMN_BITS);
754:       assertEquals(4095, Node.COLUMN_MASK);
755:       assertEquals(37, Node.OPT_ARG_NAME);
756:       assertEquals(48, Node.DIRECTIVES);
757:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
758:       assertEquals(49, Node.DIRECT_EVAL);
759:       assertEquals(1, Node.DECR_FLAG);
760:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
761:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
762:       assertEquals(52, Node.LENGTH);
763:       assertEquals(57, Node.REFLECTED_OBJECT);
764:       assertEquals(40, Node.ORIGINALNAME_PROP);
765:       assertEquals(15, Node.NO_SIDE_EFFECTS);
766:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
767:       assertEquals(54, Node.SLASH_V);
768:       assertEquals(8, Node.FLAG_NO_THROWS);
769:       assertEquals(50, Node.FREE_CALL);
770:       assertEquals(51, Node.STATIC_SOURCE_FILE);
771:       assertEquals(46, Node.IS_NAMESPACE);
772:       assertEquals(55, Node.INFERRED_FUNCTION);
773:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
774:       assertEquals(39, Node.EMPTY_BLOCK);
775:       assertEquals(57, Node.LAST_PROP);
776:       assertEquals(47, Node.IS_DISPATCHER);
777:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
778:       assertEquals(2, Node.POST_FLAG);
779:       assertEquals(30, Node.VAR_ARGS_NAME);
780:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
781:       assertEquals(0, linkedHashSet0.size());
782:       assertTrue(linkedHashSet0.isEmpty());
783:       assertEquals(0, immutableList0.size());
784:       assertFalse(node0.hasOneChild());
785:       assertFalse(node0.isCast());
786:       assertFalse(node0.isLabelName());
787:       assertFalse(node0.isExprResult());
788:       assertFalse(node0.isGetElem());
789:       assertFalse(node0.isScript());
790:       assertEquals((-1), node0.getSourcePosition());
791:       assertFalse(node0.isNumber());
792:       assertFalse(node0.isOr());
793:       assertFalse(node0.isNot());
794:       assertFalse(node0.isInstanceOf());
795:       assertFalse(node0.isObjectLit());
796:       assertTrue(node0.isParamList());
797:       assertFalse(node0.hasMoreThanOneChild());
798:       assertEquals((-1), node0.getLineno());
799:       assertFalse(node0.isGetProp());
800:       assertFalse(node0.isTypeOf());
801:       assertFalse(node0.isComma());
802:       assertFalse(node0.isDec());
803:       assertFalse(node0.isWith());
804:       assertFalse(node0.isAssign());
805:       assertFalse(node0.isWhile());
806:       assertFalse(node0.hasChildren());
807:       assertFalse(node0.isThis());
808:       assertFalse(node0.isReturn());
809:       assertFalse(node0.isBlock());
810:       assertFalse(node0.isVar());
811:       assertFalse(node0.isName());
812:       assertFalse(node0.isAdd());
813:       assertFalse(node0.isNew());
814:       assertFalse(node0.isBreak());
815:       assertFalse(node0.isCall());
816:       assertFalse(node0.isNull());
817:       assertEquals(83, node0.getType());
818:       assertFalse(node0.isSwitch());
819:       assertFalse(node0.isStringKey());
820:       assertEquals((-1), node0.getCharno());
821:       assertEquals(0, node0.getChildCount());
822:       assertFalse(node0.isDo());
823:       assertFalse(node0.isDefaultCase());
824:       assertFalse(node0.isLabel());
825:       assertFalse(node0.isAssignAdd());
826:       assertFalse(node0.isArrayLit());
827:       assertFalse(node0.isTry());
828:       assertFalse(node0.isEmpty());
829:       assertFalse(node0.isNE());
830:       assertFalse(node0.isDelProp());
831:       assertFalse(node0.isIf());
832:       assertFalse(node0.isGetterDef());
833:       assertFalse(node0.isVoid());
834:       assertFalse(node0.isTrue());
835:       assertFalse(node0.isDebugger());
836:       assertFalse(node0.isCatch());
837:       assertFalse(node0.isCase());
838:       assertFalse(node0.isRegExp());
839:       assertFalse(node0.isFor());
840:       assertFalse(node0.isHook());
841:       assertFalse(node0.isFalse());
842:       assertFalse(node0.isInc());
843:       assertFalse(node0.isString());
844:       assertFalse(node0.isIn());
845:       assertFalse(node0.isContinue());
846:       assertFalse(node0.isAnd());
847:       assertFalse(node0.isSetterDef());
848:       assertFalse(node0.isFunction());
849:       assertFalse(node0.isThrow());
850:       assertFalse(node1.isExprResult());
851:       assertFalse(node1.isScript());
852:       assertFalse(node1.isWith());
853:       assertFalse(node1.isNot());
854:       assertFalse(node1.hasOneChild());
855:       assertFalse(node1.isGetProp());
856:       assertFalse(node1.isLabel());
857:       assertFalse(node1.isAssignAdd());
858:       assertTrue(node1.isParamList());
859:       assertFalse(node1.isNumber());
860:       assertEquals((-1), node1.getSourcePosition());
861:       assertFalse(node1.isObjectLit());
862:       assertFalse(node1.isFalse());
863:       assertFalse(node1.isContinue());
864:       assertFalse(node1.isAnd());
865:       assertFalse(node1.isCast());
866:       assertFalse(node1.isLabelName());
867:       assertFalse(node1.isNew());
868:       assertFalse(node1.isAdd());
869:       assertFalse(node1.isString());
870:       assertFalse(node1.isWhile());
871:       assertFalse(node1.isVar());
872:       assertFalse(node1.isDo());
873:       assertFalse(node1.isReturn());
874:       assertFalse(node1.isNull());
875:       assertFalse(node1.isTypeOf());
876:       assertFalse(node1.isDec());
877:       assertFalse(node1.hasChildren());
878:       assertEquals(83, node1.getType());
879:       assertFalse(node1.isComma());
880:       assertFalse(node1.isOr());
881:       assertFalse(node1.isAssign());
882:       assertFalse(node1.isName());
883:       assertFalse(node1.isGetElem());
884:       assertFalse(node1.isCall());
885:       assertFalse(node1.isBreak());
886:       assertFalse(node1.isDelProp());
887:       assertFalse(node1.isVoid());
888:       assertFalse(node1.isDebugger());
889:       assertFalse(node1.isTrue());
890:       assertFalse(node1.isFunction());
891:       assertFalse(node1.isRegExp());
892:       assertFalse(node1.isFor());
893:       assertFalse(node1.isEmpty());
894:       assertFalse(node1.isDefaultCase());
895:       assertFalse(node1.isTry());
896:       assertFalse(node1.isGetterDef());
897:       assertEquals(0, node1.getChildCount());
898:       assertFalse(node1.isStringKey());
899:       assertFalse(node1.isSwitch());
900:       assertFalse(node1.isArrayLit());
901:       assertFalse(node1.isBlock());
902:       assertEquals((-1), node1.getCharno());
903:       assertFalse(node1.isInc());
904:       assertFalse(node1.isHook());
905:       assertFalse(node1.isCase());
906:       assertFalse(node1.isThrow());
907:       assertFalse(node1.isThis());
908:       assertFalse(node1.isSetterDef());
909:       assertFalse(node1.isNE());
910:       assertFalse(node1.isInstanceOf());
911:       assertFalse(node1.isIn());
912:       assertFalse(node1.hasMoreThanOneChild());
913:       assertFalse(node1.isCatch());
914:       assertFalse(node1.isIf());
915:       assertEquals((-1), node1.getLineno());
916:       assertSame(node0, node1);
917:       assertSame(node1, node0);
918:       
919:       Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
920:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
921:       assertEquals(56, Node.CHANGE_TIME);
922:       assertEquals(47, Node.IS_DISPATCHER);
923:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
924:       assertEquals(37, Node.OPT_ARG_NAME);
925:       assertEquals(2, Node.POST_FLAG);
926:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
927:       assertEquals(30, Node.VAR_ARGS_NAME);
928:       assertEquals(49, Node.DIRECT_EVAL);
929:       assertEquals(57, Node.LAST_PROP);
930:       assertEquals(36, Node.QUOTED_PROP);
931:       assertEquals(52, Node.LENGTH);
932:       assertEquals(8, Node.FLAG_NO_THROWS);
933:       assertEquals(15, Node.NO_SIDE_EFFECTS);
934:       assertEquals(55, Node.INFERRED_FUNCTION);
935:       assertEquals(39, Node.EMPTY_BLOCK);
936:       assertEquals(29, Node.JSDOC_INFO_PROP);
937:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
938:       assertEquals(53, Node.INPUT_ID);
939:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
940:       assertEquals(50, Node.FREE_CALL);
941:       assertEquals(57, Node.REFLECTED_OBJECT);
942:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
943:       assertEquals(48, Node.DIRECTIVES);
944:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
945:       assertEquals(4095, Node.COLUMN_MASK);
946:       assertEquals(40, Node.ORIGINALNAME_PROP);
947:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
948:       assertEquals(1, Node.DECR_FLAG);
949:       assertEquals(43, Node.IS_CONSTANT_NAME);
950:       assertEquals(51, Node.STATIC_SOURCE_FILE);
951:       assertEquals(12, Node.COLUMN_BITS);
952:       assertEquals(46, Node.IS_NAMESPACE);
953:       assertEquals(54, Node.SLASH_V);
954:       assertEquals(32, Node.INCRDECR_PROP);
955:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
956:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
957:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
958:       assertEquals(53, Node.INPUT_ID);
959:       assertEquals(29, Node.JSDOC_INFO_PROP);
960:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
961:       assertEquals(43, Node.IS_CONSTANT_NAME);
962:       assertEquals(56, Node.CHANGE_TIME);
963:       assertEquals(36, Node.QUOTED_PROP);
964:       assertEquals(32, Node.INCRDECR_PROP);
965:       assertEquals(12, Node.COLUMN_BITS);
966:       assertEquals(4095, Node.COLUMN_MASK);
967:       assertEquals(37, Node.OPT_ARG_NAME);
968:       assertEquals(48, Node.DIRECTIVES);
969:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
970:       assertEquals(49, Node.DIRECT_EVAL);
971:       assertEquals(1, Node.DECR_FLAG);
972:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
973:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
974:       assertEquals(52, Node.LENGTH);
975:       assertEquals(57, Node.REFLECTED_OBJECT);
976:       assertEquals(40, Node.ORIGINALNAME_PROP);
977:       assertEquals(15, Node.NO_SIDE_EFFECTS);
978:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
979:       assertEquals(54, Node.SLASH_V);
980:       assertEquals(8, Node.FLAG_NO_THROWS);
981:       assertEquals(50, Node.FREE_CALL);
982:       assertEquals(51, Node.STATIC_SOURCE_FILE);
983:       assertEquals(46, Node.IS_NAMESPACE);
984:       assertEquals(55, Node.INFERRED_FUNCTION);
985:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
986:       assertEquals(39, Node.EMPTY_BLOCK);
987:       assertEquals(57, Node.LAST_PROP);
988:       assertEquals(47, Node.IS_DISPATCHER);
989:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
990:       assertEquals(2, Node.POST_FLAG);
991:       assertEquals(30, Node.VAR_ARGS_NAME);
992:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
993:       assertEquals(0, linkedHashSet0.size());
994:       assertTrue(linkedHashSet0.isEmpty());
995:       assertEquals(0, immutableList0.size());
996:       assertFalse(node0.hasOneChild());
997:       assertFalse(node0.isCast());
998:       assertFalse(node0.isLabelName());
999:       assertFalse(node0.isExprResult());
1000:       assertFalse(node0.isGetElem());
1001:       assertFalse(node0.isScript());
1002:       assertEquals((-1), node0.getSourcePosition());
1003:       assertFalse(node0.isNumber());
1004:       assertFalse(node0.isOr());
1005:       assertFalse(node0.isNot());
1006:       assertFalse(node0.isInstanceOf());
1007:       assertFalse(node0.isObjectLit());
1008:       assertTrue(node0.isParamList());
1009:       assertFalse(node0.hasMoreThanOneChild());
1010:       assertEquals((-1), node0.getLineno());
1011:       assertFalse(node0.isGetProp());
1012:       assertFalse(node0.isTypeOf());
1013:       assertFalse(node0.isComma());
1014:       assertFalse(node0.isDec());
1015:       assertFalse(node0.isWith());
1016:       assertFalse(node0.isAssign());
1017:       assertFalse(node0.isWhile());
1018:       assertFalse(node0.hasChildren());
1019:       assertFalse(node0.isThis());
1020:       assertFalse(node0.isReturn());
1021:       assertFalse(node0.isBlock());
1022:       assertFalse(node0.isVar());
1023:       assertFalse(node0.isName());
1024:       assertFalse(node0.isAdd());
1025:       assertFalse(node0.isNew());
1026:       assertFalse(node0.isBreak());
1027:       assertFalse(node0.isCall());
1028:       assertFalse(node0.isNull());
1029:       assertEquals(83, node0.getType());
1030:       assertFalse(node0.isSwitch());
1031:       assertFalse(node0.isStringKey());
1032:       assertEquals((-1), node0.getCharno());
1033:       assertEquals(0, node0.getChildCount());
1034:       assertFalse(node0.isDo());
1035:       assertFalse(node0.isDefaultCase());
1036:       assertFalse(node0.isLabel());
1037:       assertFalse(node0.isAssignAdd());
1038:       assertFalse(node0.isArrayLit());
1039:       assertFalse(node0.isTry());
1040:       assertFalse(node0.isEmpty());
1041:       assertFalse(node0.isNE());
1042:       assertFalse(node0.isDelProp());
1043:       assertFalse(node0.isIf());
1044:       assertFalse(node0.isGetterDef());
1045:       assertFalse(node0.isVoid());
1046:       assertFalse(node0.isTrue());
1047:       assertFalse(node0.isDebugger());
1048:       assertFalse(node0.isCatch());
1049:       assertFalse(node0.isCase());
1050:       assertFalse(node0.isRegExp());
1051:       assertFalse(node0.isFor());
1052:       assertFalse(node0.isHook());
1053:       assertFalse(node0.isFalse());
1054:       assertFalse(node0.isInc());
1055:       assertFalse(node0.isString());
1056:       assertFalse(node0.isIn());
1057:       assertFalse(node0.isContinue());
1058:       assertFalse(node0.isAnd());
1059:       assertFalse(node0.isSetterDef());
1060:       assertFalse(node0.isFunction());
1061:       assertFalse(node0.isThrow());
1062:       assertFalse(node1.isExprResult());
1063:       assertFalse(node1.isScript());
1064:       assertFalse(node1.isWith());
1065:       assertFalse(node1.isNot());
1066:       assertFalse(node1.hasOneChild());
1067:       assertFalse(node1.isGetProp());
1068:       assertFalse(node1.isLabel());
1069:       assertFalse(node1.isAssignAdd());
1070:       assertTrue(node1.isParamList());
1071:       assertFalse(node1.isNumber());
1072:       assertEquals((-1), node1.getSourcePosition());
1073:       assertFalse(node1.isObjectLit());
1074:       assertFalse(node1.isFalse());
1075:       assertFalse(node1.isContinue());
1076:       assertFalse(node1.isAnd());
1077:       assertFalse(node1.isCast());
1078:       assertFalse(node1.isLabelName());
1079:       assertFalse(node1.isNew());
1080:       assertFalse(node1.isAdd());
1081:       assertFalse(node1.isString());
1082:       assertFalse(node1.isWhile());
1083:       assertFalse(node1.isVar());
1084:       assertFalse(node1.isDo());
1085:       assertFalse(node1.isReturn());
1086:       assertFalse(node1.isNull());
1087:       assertFalse(node1.isTypeOf());
1088:       assertFalse(node1.isDec());
1089:       assertFalse(node1.hasChildren());
1090:       assertEquals(83, node1.getType());
1091:       assertFalse(node1.isComma());
1092:       assertFalse(node1.isOr());
1093:       assertFalse(node1.isAssign());
1094:       assertFalse(node1.isName());
1095:       assertFalse(node1.isGetElem());
1096:       assertFalse(node1.isCall());
1097:       assertFalse(node1.isBreak());
1098:       assertFalse(node1.isDelProp());
1099:       assertFalse(node1.isVoid());
1100:       assertFalse(node1.isDebugger());
1101:       assertFalse(node1.isTrue());
1102:       assertFalse(node1.isFunction());
1103:       assertFalse(node1.isRegExp());
1104:       assertFalse(node1.isFor());
1105:       assertFalse(node1.isEmpty());
1106:       assertFalse(node1.isDefaultCase());
1107:       assertFalse(node1.isTry());
1108:       assertFalse(node1.isGetterDef());
1109:       assertEquals(0, node1.getChildCount());
1110:       assertFalse(node1.isStringKey());
1111:       assertFalse(node1.isSwitch());
1112:       assertFalse(node1.isArrayLit());
1113:       assertFalse(node1.isBlock());
1114:       assertEquals((-1), node1.getCharno());
1115:       assertFalse(node1.isInc());
1116:       assertFalse(node1.isHook());
1117:       assertFalse(node1.isCase());
1118:       assertFalse(node1.isThrow());
1119:       assertFalse(node1.isThis());
1120:       assertFalse(node1.isSetterDef());
1121:       assertFalse(node1.isNE());
1122:       assertFalse(node1.isInstanceOf());
1123:       assertFalse(node1.isIn());
1124:       assertFalse(node1.hasMoreThanOneChild());
1125:       assertFalse(node1.isCatch());
1126:       assertFalse(node1.isIf());
1127:       assertEquals((-1), node1.getLineno());
1128:       assertSame(node0, node1);
1129:       assertSame(node1, node0);
1130:       assertNotNull(node_AncestorIterable0);
1131:       
1132:       Iterator<Node> iterator1 = node_AncestorIterable0.iterator();
1133:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1134:       assertEquals(56, Node.CHANGE_TIME);
1135:       assertEquals(47, Node.IS_DISPATCHER);
1136:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1137:       assertEquals(37, Node.OPT_ARG_NAME);
1138:       assertEquals(2, Node.POST_FLAG);
1139:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1140:       assertEquals(30, Node.VAR_ARGS_NAME);
1141:       assertEquals(49, Node.DIRECT_EVAL);
1142:       assertEquals(57, Node.LAST_PROP);
1143:       assertEquals(36, Node.QUOTED_PROP);
1144:       assertEquals(52, Node.LENGTH);
1145:       assertEquals(8, Node.FLAG_NO_THROWS);
1146:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1147:       assertEquals(55, Node.INFERRED_FUNCTION);
1148:       assertEquals(39, Node.EMPTY_BLOCK);
1149:       assertEquals(29, Node.JSDOC_INFO_PROP);
1150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1151:       assertEquals(53, Node.INPUT_ID);
1152:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1153:       assertEquals(50, Node.FREE_CALL);
1154:       assertEquals(57, Node.REFLECTED_OBJECT);
1155:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1156:       assertEquals(48, Node.DIRECTIVES);
1157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1158:       assertEquals(4095, Node.COLUMN_MASK);
1159:       assertEquals(40, Node.ORIGINALNAME_PROP);
1160:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1161:       assertEquals(1, Node.DECR_FLAG);
1162:       assertEquals(43, Node.IS_CONSTANT_NAME);
1163:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1164:       assertEquals(12, Node.COLUMN_BITS);
1165:       assertEquals(46, Node.IS_NAMESPACE);
1166:       assertEquals(54, Node.SLASH_V);
1167:       assertEquals(32, Node.INCRDECR_PROP);
1168:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1169:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1170:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1171:       assertEquals(53, Node.INPUT_ID);
1172:       assertEquals(29, Node.JSDOC_INFO_PROP);
1173:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1174:       assertEquals(43, Node.IS_CONSTANT_NAME);
1175:       assertEquals(56, Node.CHANGE_TIME);
1176:       assertEquals(36, Node.QUOTED_PROP);
1177:       assertEquals(32, Node.INCRDECR_PROP);
1178:       assertEquals(12, Node.COLUMN_BITS);
1179:       assertEquals(4095, Node.COLUMN_MASK);
1180:       assertEquals(37, Node.OPT_ARG_NAME);
1181:       assertEquals(48, Node.DIRECTIVES);
1182:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1183:       assertEquals(49, Node.DIRECT_EVAL);
1184:       assertEquals(1, Node.DECR_FLAG);
1185:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1186:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1187:       assertEquals(52, Node.LENGTH);
1188:       assertEquals(57, Node.REFLECTED_OBJECT);
1189:       assertEquals(40, Node.ORIGINALNAME_PROP);
1190:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1191:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1192:       assertEquals(54, Node.SLASH_V);
1193:       assertEquals(8, Node.FLAG_NO_THROWS);
1194:       assertEquals(50, Node.FREE_CALL);
1195:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1196:       assertEquals(46, Node.IS_NAMESPACE);
1197:       assertEquals(55, Node.INFERRED_FUNCTION);
1198:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1199:       assertEquals(39, Node.EMPTY_BLOCK);
1200:       assertEquals(57, Node.LAST_PROP);
1201:       assertEquals(47, Node.IS_DISPATCHER);
1202:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1203:       assertEquals(2, Node.POST_FLAG);
1204:       assertEquals(30, Node.VAR_ARGS_NAME);
1205:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1206:       assertEquals(0, linkedHashSet0.size());
1207:       assertTrue(linkedHashSet0.isEmpty());
1208:       assertEquals(0, immutableList0.size());
1209:       assertFalse(node0.hasOneChild());
1210:       assertFalse(node0.isCast());
1211:       assertFalse(node0.isLabelName());
1212:       assertFalse(node0.isExprResult());
1213:       assertFalse(node0.isGetElem());
1214:       assertFalse(node0.isScript());
1215:       assertEquals((-1), node0.getSourcePosition());
1216:       assertFalse(node0.isNumber());
1217:       assertFalse(node0.isOr());
1218:       assertFalse(node0.isNot());
1219:       assertFalse(node0.isInstanceOf());
1220:       assertFalse(node0.isObjectLit());
1221:       assertTrue(node0.isParamList());
1222:       assertFalse(node0.hasMoreThanOneChild());
1223:       assertEquals((-1), node0.getLineno());
1224:       assertFalse(node0.isGetProp());
1225:       assertFalse(node0.isTypeOf());
1226:       assertFalse(node0.isComma());
1227:       assertFalse(node0.isDec());
1228:       assertFalse(node0.isWith());
1229:       assertFalse(node0.isAssign());
1230:       assertFalse(node0.isWhile());
1231:       assertFalse(node0.hasChildren());
1232:       assertFalse(node0.isThis());
1233:       assertFalse(node0.isReturn());
1234:       assertFalse(node0.isBlock());
1235:       assertFalse(node0.isVar());
1236:       assertFalse(node0.isName());
1237:       assertFalse(node0.isAdd());
1238:       assertFalse(node0.isNew());
1239:       assertFalse(node0.isBreak());
1240:       assertFalse(node0.isCall());
1241:       assertFalse(node0.isNull());
1242:       assertEquals(83, node0.getType());
1243:       assertFalse(node0.isSwitch());
1244:       assertFalse(node0.isStringKey());
1245:       assertEquals((-1), node0.getCharno());
1246:       assertEquals(0, node0.getChildCount());
1247:       assertFalse(node0.isDo());
1248:       assertFalse(node0.isDefaultCase());
1249:       assertFalse(node0.isLabel());
1250:       assertFalse(node0.isAssignAdd());
1251:       assertFalse(node0.isArrayLit());
1252:       assertFalse(node0.isTry());
1253:       assertFalse(node0.isEmpty());
1254:       assertFalse(node0.isNE());
1255:       assertFalse(node0.isDelProp());
1256:       assertFalse(node0.isIf());
1257:       assertFalse(node0.isGetterDef());
1258:       assertFalse(node0.isVoid());
1259:       assertFalse(node0.isTrue());
1260:       assertFalse(node0.isDebugger());
1261:       assertFalse(node0.isCatch());
1262:       assertFalse(node0.isCase());
1263:       assertFalse(node0.isRegExp());
1264:       assertFalse(node0.isFor());
1265:       assertFalse(node0.isHook());
1266:       assertFalse(node0.isFalse());
1267:       assertFalse(node0.isInc());
1268:       assertFalse(node0.isString());
1269:       assertFalse(node0.isIn());
1270:       assertFalse(node0.isContinue());
1271:       assertFalse(node0.isAnd());
1272:       assertFalse(node0.isSetterDef());
1273:       assertFalse(node0.isFunction());
1274:       assertFalse(node0.isThrow());
1275:       assertFalse(node1.isExprResult());
1276:       assertFalse(node1.isScript());
1277:       assertFalse(node1.isWith());
1278:       assertFalse(node1.isNot());
1279:       assertFalse(node1.hasOneChild());
1280:       assertFalse(node1.isGetProp());
1281:       assertFalse(node1.isLabel());
1282:       assertFalse(node1.isAssignAdd());
1283:       assertTrue(node1.isParamList());
1284:       assertFalse(node1.isNumber());
1285:       assertEquals((-1), node1.getSourcePosition());
1286:       assertFalse(node1.isObjectLit());
1287:       assertFalse(node1.isFalse());
1288:       assertFalse(node1.isContinue());
1289:       assertFalse(node1.isAnd());
1290:       assertFalse(node1.isCast());
1291:       assertFalse(node1.isLabelName());
1292:       assertFalse(node1.isNew());
1293:       assertFalse(node1.isAdd());
1294:       assertFalse(node1.isString());
1295:       assertFalse(node1.isWhile());
1296:       assertFalse(node1.isVar());
1297:       assertFalse(node1.isDo());
1298:       assertFalse(node1.isReturn());
1299:       assertFalse(node1.isNull());
1300:       assertFalse(node1.isTypeOf());
1301:       assertFalse(node1.isDec());
1302:       assertFalse(node1.hasChildren());
1303:       assertEquals(83, node1.getType());
1304:       assertFalse(node1.isComma());
1305:       assertFalse(node1.isOr());
1306:       assertFalse(node1.isAssign());
1307:       assertFalse(node1.isName());
1308:       assertFalse(node1.isGetElem());
1309:       assertFalse(node1.isCall());
1310:       assertFalse(node1.isBreak());
1311:       assertFalse(node1.isDelProp());
1312:       assertFalse(node1.isVoid());
1313:       assertFalse(node1.isDebugger());
1314:       assertFalse(node1.isTrue());
1315:       assertFalse(node1.isFunction());
1316:       assertFalse(node1.isRegExp());
1317:       assertFalse(node1.isFor());
1318:       assertFalse(node1.isEmpty());
1319:       assertFalse(node1.isDefaultCase());
1320:       assertFalse(node1.isTry());
1321:       assertFalse(node1.isGetterDef());
1322:       assertEquals(0, node1.getChildCount());
1323:       assertFalse(node1.isStringKey());
1324:       assertFalse(node1.isSwitch());
1325:       assertFalse(node1.isArrayLit());
1326:       assertFalse(node1.isBlock());
1327:       assertEquals((-1), node1.getCharno());
1328:       assertFalse(node1.isInc());
1329:       assertFalse(node1.isHook());
1330:       assertFalse(node1.isCase());
1331:       assertFalse(node1.isThrow());
1332:       assertFalse(node1.isThis());
1333:       assertFalse(node1.isSetterDef());
1334:       assertFalse(node1.isNE());
1335:       assertFalse(node1.isInstanceOf());
1336:       assertFalse(node1.isIn());
1337:       assertFalse(node1.hasMoreThanOneChild());
1338:       assertFalse(node1.isCatch());
1339:       assertFalse(node1.isIf());
1340:       assertEquals((-1), node1.getLineno());
1341:       assertSame(node0, node1);
1342:       assertSame(node1, node0);
1343:       assertNotNull(iterator1);
1344:       
1345:       boolean boolean1 = node0.isIn();
1346:       assertFalse(boolean1);
1347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1348:       assertEquals(56, Node.CHANGE_TIME);
1349:       assertEquals(47, Node.IS_DISPATCHER);
1350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1351:       assertEquals(37, Node.OPT_ARG_NAME);
1352:       assertEquals(2, Node.POST_FLAG);
1353:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1354:       assertEquals(30, Node.VAR_ARGS_NAME);
1355:       assertEquals(49, Node.DIRECT_EVAL);
1356:       assertEquals(57, Node.LAST_PROP);
1357:       assertEquals(36, Node.QUOTED_PROP);
1358:       assertEquals(52, Node.LENGTH);
1359:       assertEquals(8, Node.FLAG_NO_THROWS);
1360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1361:       assertEquals(55, Node.INFERRED_FUNCTION);
1362:       assertEquals(39, Node.EMPTY_BLOCK);
1363:       assertEquals(29, Node.JSDOC_INFO_PROP);
1364:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1365:       assertEquals(53, Node.INPUT_ID);
1366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1367:       assertEquals(50, Node.FREE_CALL);
1368:       assertEquals(57, Node.REFLECTED_OBJECT);
1369:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1370:       assertEquals(48, Node.DIRECTIVES);
1371:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1372:       assertEquals(4095, Node.COLUMN_MASK);
1373:       assertEquals(40, Node.ORIGINALNAME_PROP);
1374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1375:       assertEquals(1, Node.DECR_FLAG);
1376:       assertEquals(43, Node.IS_CONSTANT_NAME);
1377:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1378:       assertEquals(12, Node.COLUMN_BITS);
1379:       assertEquals(46, Node.IS_NAMESPACE);
1380:       assertEquals(54, Node.SLASH_V);
1381:       assertEquals(32, Node.INCRDECR_PROP);
1382:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1383:       assertTrue(boolean1 == boolean0);
1384:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
1385:       assertEquals(0, linkedHashSet0.size());
1386:       assertTrue(linkedHashSet0.isEmpty());
1387:       assertEquals(0, immutableList0.size());
1388:       assertFalse(node0.hasOneChild());
1389:       assertFalse(node0.isCast());
1390:       assertFalse(node0.isLabelName());
1391:       assertFalse(node0.isExprResult());
1392:       assertFalse(node0.isGetElem());
1393:       assertFalse(node0.isScript());
1394:       assertEquals((-1), node0.getSourcePosition());
1395:       assertFalse(node0.isNumber());
1396:       assertFalse(node0.isOr());
1397:       assertFalse(node0.isNot());
1398:       assertFalse(node0.isInstanceOf());
1399:       assertFalse(node0.isObjectLit());
1400:       assertTrue(node0.isParamList());
1401:       assertFalse(node0.hasMoreThanOneChild());
1402:       assertEquals((-1), node0.getLineno());
1403:       assertFalse(node0.isGetProp());
1404:       assertFalse(node0.isTypeOf());
1405:       assertFalse(node0.isComma());
1406:       assertFalse(node0.isDec());
1407:       assertFalse(node0.isWith());
1408:       assertFalse(node0.isAssign());
1409:       assertFalse(node0.isWhile());
1410:       assertFalse(node0.hasChildren());
1411:       assertFalse(node0.isThis());
1412:       assertFalse(node0.isReturn());
1413:       assertFalse(node0.isBlock());
1414:       assertFalse(node0.isVar());
1415:       assertFalse(node0.isName());
1416:       assertFalse(node0.isAdd());
1417:       assertFalse(node0.isNew());
1418:       assertFalse(node0.isBreak());
1419:       assertFalse(node0.isCall());
1420:       assertFalse(node0.isNull());
1421:       assertEquals(83, node0.getType());
1422:       assertFalse(node0.isSwitch());
1423:       assertFalse(node0.isStringKey());
1424:       assertEquals((-1), node0.getCharno());
1425:       assertEquals(0, node0.getChildCount());
1426:       assertFalse(node0.isDo());
1427:       assertFalse(node0.isDefaultCase());
1428:       assertFalse(node0.isLabel());
1429:       assertFalse(node0.isAssignAdd());
1430:       assertFalse(node0.isArrayLit());
1431:       assertFalse(node0.isTry());
1432:       assertFalse(node0.isEmpty());
1433:       assertFalse(node0.isNE());
1434:       assertFalse(node0.isDelProp());
1435:       assertFalse(node0.isIf());
1436:       assertFalse(node0.isGetterDef());
1437:       assertFalse(node0.isVoid());
1438:       assertFalse(node0.isTrue());
1439:       assertFalse(node0.isDebugger());
1440:       assertFalse(node0.isCatch());
1441:       assertFalse(node0.isCase());
1442:       assertFalse(node0.isRegExp());
1443:       assertFalse(node0.isFor());
1444:       assertFalse(node0.isHook());
1445:       assertFalse(node0.isFalse());
1446:       assertFalse(node0.isInc());
1447:       assertFalse(node0.isString());
1448:       assertFalse(node0.isIn());
1449:       assertFalse(node0.isContinue());
1450:       assertFalse(node0.isAnd());
1451:       assertFalse(node0.isSetterDef());
1452:       assertFalse(node0.isFunction());
1453:       assertFalse(node0.isThrow());
1454:       assertSame(node0, node1);
1455:       
1456:       // Undeclared exception!
1457:       try { 
1458:         node1.getChildBefore(node0);
1459:         fail("Expecting exception: NullPointerException");
1460:       
1461:       } catch(NullPointerException e) {
1462:          //
1463:          // no message in exception (getMessage() returned null)
1464:          //
1465:          verifyException("com.google.javascript.rhino.Node", e);
1466:       }
1467:   }
1468: }
RegularFileObject[/tmp/EvoSuite_37_1628255580308/com/google/javascript/rhino/Node_37_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_37_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_37_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.javascript.rhino.Node$AncestorIterable$1",
112:       "com.google.common.collect.Iterators$12",
113:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
114:       "com.google.common.collect.Iterators$11",
115:       "com.google.javascript.rhino.jstype.JSType$1",
116:       "com.google.common.collect.EmptyImmutableBiMap",
117:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
118:       "com.google.common.base.Predicate",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.common.collect.ImmutableList$SerializedForm",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_37_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Preconditions",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.common.collect.ImmutableSet",
338:       "com.google.common.collect.EmptyImmutableSet",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.AbstractMultimap$Values",
351:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
352:       "com.google.common.collect.AbstractMapBasedMultimap$1",
353:       "com.google.common.collect.Multimaps$Entries",
354:       "com.google.common.collect.AbstractMultimap$Entries",
355:       "com.google.common.collect.AbstractMapBasedMultimap$2",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.Platform",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.jstype.TernaryValue",
362:       "com.google.javascript.rhino.jstype.JSType$2",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.ImmutableList$1"
365:     );
366:   }
367: }

[MASTER] 13:13:00.604 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertNotNull(linkedHashSet0);

Iterator<JSType> iterator0 = linkedHashSet0.iterator();
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertNotNull(iterator0);

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertNotNull(immutableList0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean0 = node0.isQualifiedName();
assertFalse(boolean0);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

simpleErrorReporter0.error("wV`=Nkp+4XKZ", "Object#Key", 34, 38);
JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertNull(jSDocInfo0);

Node node1 = node0.setJSDocInfo((JSDocInfo) null);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(83, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);

node1.putBooleanProp(105, true);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(83, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertSame(node0, node1);
assertSame(node1, node0);

Node.AncestorIterable node_AncestorIterable0 = node1.getAncestors();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(83, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node_AncestorIterable0);

Iterator<Node> iterator1 = node_AncestorIterable0.iterator();
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isWith());
assertFalse(node1.isNot());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertTrue(node1.isParamList());
assertFalse(node1.isNumber());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isObjectLit());
assertFalse(node1.isFalse());
assertFalse(node1.isContinue());
assertFalse(node1.isAnd());
assertFalse(node1.isCast());
assertFalse(node1.isLabelName());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isNull());
assertFalse(node1.isTypeOf());
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals(83, node1.getType());
assertFalse(node1.isComma());
assertFalse(node1.isOr());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isBreak());
assertFalse(node1.isDelProp());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isTrue());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isEmpty());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isBlock());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isCase());
assertFalse(node1.isThrow());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertFalse(node1.isNE());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isIn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCatch());
assertFalse(node1.isIf());
assertEquals((-1), node1.getLineno());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(iterator1);

boolean boolean1 = node0.isIn();
assertFalse(boolean1);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertTrue(boolean1 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.hasOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isGetElem());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isOr());
assertFalse(node0.isNot());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isObjectLit());
assertTrue(node0.isParamList());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isGetProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isWith());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.hasChildren());
assertFalse(node0.isThis());
assertFalse(node0.isReturn());
assertFalse(node0.isBlock());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isBreak());
assertFalse(node0.isCall());
assertFalse(node0.isNull());
assertEquals(83, node0.getType());
assertFalse(node0.isSwitch());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isTry());
assertFalse(node0.isEmpty());
assertFalse(node0.isNE());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isGetterDef());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isCase());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFunction());
assertFalse(node0.isThrow());
assertSame(node0, node1);

node1.getChildBefore(node0);

[MASTER] 13:13:00.701 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_38_1628255580615/com/google/javascript/rhino/Node_38_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_38_1628255580615/com/google/javascript/rhino/Node_38_tmp__ESTest_scaffolding.java]]
[MASTER] 13:13:00.701 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:00.701 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:13:00.702 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 273
[MASTER] 13:13:00.703 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_38_1628255580615/com/google/javascript/rhino/Node_38_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:13:00 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.common.collect.ImmutableList;
12: import com.google.javascript.rhino.JSDocInfo;
13: import com.google.javascript.rhino.Node;
14: import com.google.javascript.rhino.SimpleErrorReporter;
15: import com.google.javascript.rhino.jstype.JSType;
16: import com.google.javascript.rhino.jstype.JSTypeRegistry;
17: import java.util.Iterator;
18: import java.util.LinkedHashSet;
19: import java.util.List;
20: import org.evosuite.runtime.EvoRunner;
21: import org.evosuite.runtime.EvoRunnerParameters;
22: import org.evosuite.runtime.testdata.EvoSuiteFile;
23: import org.evosuite.runtime.testdata.FileSystemHandling;
24: import org.junit.runner.RunWith;
25: 
26: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
27: public class Node_38_tmp__ESTest extends Node_38_tmp__ESTest_scaffolding {
28: 
29:   @Test(timeout = 4000)
30:   public void test0()  throws Throwable  {
31:       FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
32:       assertNotNull(fileSystemHandling0);
33:       
34:       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
35:       assertNotNull(simpleErrorReporter0);
36:       
37:       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
38:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
39:       assertNotNull(jSTypeRegistry0);
40:       
41:       LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
42:       assertEquals(0, linkedHashSet0.size());
43:       assertTrue(linkedHashSet0.isEmpty());
44:       assertNotNull(linkedHashSet0);
45:       
46:       Iterator<JSType> iterator0 = linkedHashSet0.iterator();
47:       assertEquals(0, linkedHashSet0.size());
48:       assertTrue(linkedHashSet0.isEmpty());
49:       assertNotNull(iterator0);
50:       
51:       ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
52:       assertEquals(0, linkedHashSet0.size());
53:       assertTrue(linkedHashSet0.isEmpty());
54:       assertEquals(0, immutableList0.size());
55:       assertNotNull(immutableList0);
56:       
57:       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
58:       assertEquals(53, Node.INPUT_ID);
59:       assertEquals(43, Node.IS_CONSTANT_NAME);
60:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
61:       assertEquals(2, Node.POST_FLAG);
62:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
63:       assertEquals(4095, Node.COLUMN_MASK);
64:       assertEquals(48, Node.DIRECTIVES);
65:       assertEquals(39, Node.EMPTY_BLOCK);
66:       assertEquals(37, Node.OPT_ARG_NAME);
67:       assertEquals(56, Node.CHANGE_TIME);
68:       assertEquals(47, Node.IS_DISPATCHER);
69:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
70:       assertEquals(29, Node.JSDOC_INFO_PROP);
71:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
72:       assertEquals(15, Node.NO_SIDE_EFFECTS);
73:       assertEquals(36, Node.QUOTED_PROP);
74:       assertEquals(55, Node.INFERRED_FUNCTION);
75:       assertEquals(52, Node.LENGTH);
76:       assertEquals(8, Node.FLAG_NO_THROWS);
77:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
78:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
79:       assertEquals(54, Node.SLASH_V);
80:       assertEquals(57, Node.REFLECTED_OBJECT);
81:       assertEquals(57, Node.LAST_PROP);
82:       assertEquals(49, Node.DIRECT_EVAL);
83:       assertEquals(40, Node.ORIGINALNAME_PROP);
84:       assertEquals(30, Node.VAR_ARGS_NAME);
85:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
86:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
87:       assertEquals(12, Node.COLUMN_BITS);
88:       assertEquals(32, Node.INCRDECR_PROP);
89:       assertEquals(46, Node.IS_NAMESPACE);
90:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
91:       assertEquals(1, Node.DECR_FLAG);
92:       assertEquals(50, Node.FREE_CALL);
93:       assertEquals(51, Node.STATIC_SOURCE_FILE);
94:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
95:       assertEquals(0, linkedHashSet0.size());
96:       assertTrue(linkedHashSet0.isEmpty());
97:       assertEquals(0, immutableList0.size());
98:       assertFalse(node0.isScript());
99:       assertFalse(node0.isExprResult());
100:       assertFalse(node0.isNot());
101:       assertFalse(node0.isWith());
102:       assertFalse(node0.isCast());
103:       assertTrue(node0.isParamList());
104:       assertFalse(node0.isObjectLit());
105:       assertFalse(node0.isLabelName());
106:       assertFalse(node0.isAnd());
107:       assertFalse(node0.isThis());
108:       assertFalse(node0.isNumber());
109:       assertFalse(node0.isTypeOf());
110:       assertFalse(node0.isGetProp());
111:       assertFalse(node0.isBreak());
112:       assertFalse(node0.hasChildren());
113:       assertFalse(node0.isComma());
114:       assertFalse(node0.isDec());
115:       assertEquals((-1), node0.getSourcePosition());
116:       assertFalse(node0.isAssign());
117:       assertFalse(node0.isGetElem());
118:       assertFalse(node0.isInstanceOf());
119:       assertFalse(node0.hasMoreThanOneChild());
120:       assertFalse(node0.isHook());
121:       assertFalse(node0.hasOneChild());
122:       assertFalse(node0.isReturn());
123:       assertFalse(node0.isWhile());
124:       assertFalse(node0.isInc());
125:       assertFalse(node0.isContinue());
126:       assertFalse(node0.isString());
127:       assertEquals((-1), node0.getLineno());
128:       assertFalse(node0.isNE());
129:       assertFalse(node0.isSetterDef());
130:       assertFalse(node0.isFalse());
131:       assertFalse(node0.isIn());
132:       assertFalse(node0.isThrow());
133:       assertFalse(node0.isRegExp());
134:       assertFalse(node0.isTrue());
135:       assertFalse(node0.isFunction());
136:       assertFalse(node0.isVoid());
137:       assertFalse(node0.isDebugger());
138:       assertFalse(node0.isCatch());
139:       assertFalse(node0.isArrayLit());
140:       assertFalse(node0.isIf());
141:       assertFalse(node0.isDelProp());
142:       assertFalse(node0.isGetterDef());
143:       assertFalse(node0.isCase());
144:       assertFalse(node0.isFor());
145:       assertFalse(node0.isTry());
146:       assertFalse(node0.isBlock());
147:       assertFalse(node0.isSwitch());
148:       assertEquals((-1), node0.getCharno());
149:       assertFalse(node0.isNew());
150:       assertFalse(node0.isAdd());
151:       assertFalse(node0.isCall());
152:       assertFalse(node0.isName());
153:       assertFalse(node0.isStringKey());
154:       assertEquals(83, node0.getType());
155:       assertFalse(node0.isNull());
156:       assertFalse(node0.isEmpty());
157:       assertFalse(node0.isOr());
158:       assertFalse(node0.isVar());
159:       assertEquals(0, node0.getChildCount());
160:       assertFalse(node0.isLabel());
161:       assertFalse(node0.isAssignAdd());
162:       assertFalse(node0.isDo());
163:       assertFalse(node0.isDefaultCase());
164:       assertNotNull(node0);
165:       
166:       Iterable<Node> iterable0 = node0.children();
167:       assertEquals(53, Node.INPUT_ID);
168:       assertEquals(43, Node.IS_CONSTANT_NAME);
169:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
170:       assertEquals(2, Node.POST_FLAG);
171:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
172:       assertEquals(4095, Node.COLUMN_MASK);
173:       assertEquals(48, Node.DIRECTIVES);
174:       assertEquals(39, Node.EMPTY_BLOCK);
175:       assertEquals(37, Node.OPT_ARG_NAME);
176:       assertEquals(56, Node.CHANGE_TIME);
177:       assertEquals(47, Node.IS_DISPATCHER);
178:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
179:       assertEquals(29, Node.JSDOC_INFO_PROP);
180:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
181:       assertEquals(15, Node.NO_SIDE_EFFECTS);
182:       assertEquals(36, Node.QUOTED_PROP);
183:       assertEquals(55, Node.INFERRED_FUNCTION);
184:       assertEquals(52, Node.LENGTH);
185:       assertEquals(8, Node.FLAG_NO_THROWS);
186:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
187:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
188:       assertEquals(54, Node.SLASH_V);
189:       assertEquals(57, Node.REFLECTED_OBJECT);
190:       assertEquals(57, Node.LAST_PROP);
191:       assertEquals(49, Node.DIRECT_EVAL);
192:       assertEquals(40, Node.ORIGINALNAME_PROP);
193:       assertEquals(30, Node.VAR_ARGS_NAME);
194:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
195:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
196:       assertEquals(12, Node.COLUMN_BITS);
197:       assertEquals(32, Node.INCRDECR_PROP);
198:       assertEquals(46, Node.IS_NAMESPACE);
199:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
200:       assertEquals(1, Node.DECR_FLAG);
201:       assertEquals(50, Node.FREE_CALL);
202:       assertEquals(51, Node.STATIC_SOURCE_FILE);
203:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
204:       assertEquals(0, linkedHashSet0.size());
205:       assertTrue(linkedHashSet0.isEmpty());
206:       assertEquals(0, immutableList0.size());
207:       assertFalse(node0.isScript());
208:       assertFalse(node0.isExprResult());
209:       assertFalse(node0.isNot());
210:       assertFalse(node0.isWith());
211:       assertFalse(node0.isCast());
212:       assertTrue(node0.isParamList());
213:       assertFalse(node0.isObjectLit());
214:       assertFalse(node0.isLabelName());
215:       assertFalse(node0.isAnd());
216:       assertFalse(node0.isThis());
217:       assertFalse(node0.isNumber());
218:       assertFalse(node0.isTypeOf());
219:       assertFalse(node0.isGetProp());
220:       assertFalse(node0.isBreak());
221:       assertFalse(node0.hasChildren());
222:       assertFalse(node0.isComma());
223:       assertFalse(node0.isDec());
224:       assertEquals((-1), node0.getSourcePosition());
225:       assertFalse(node0.isAssign());
226:       assertFalse(node0.isGetElem());
227:       assertFalse(node0.isInstanceOf());
228:       assertFalse(node0.hasMoreThanOneChild());
229:       assertFalse(node0.isHook());
230:       assertFalse(node0.hasOneChild());
231:       assertFalse(node0.isReturn());
232:       assertFalse(node0.isWhile());
233:       assertFalse(node0.isInc());
234:       assertFalse(node0.isContinue());
235:       assertFalse(node0.isString());
236:       assertEquals((-1), node0.getLineno());
237:       assertFalse(node0.isNE());
238:       assertFalse(node0.isSetterDef());
239:       assertFalse(node0.isFalse());
240:       assertFalse(node0.isIn());
241:       assertFalse(node0.isThrow());
242:       assertFalse(node0.isRegExp());
243:       assertFalse(node0.isTrue());
244:       assertFalse(node0.isFunction());
245:       assertFalse(node0.isVoid());
246:       assertFalse(node0.isDebugger());
247:       assertFalse(node0.isCatch());
248:       assertFalse(node0.isArrayLit());
249:       assertFalse(node0.isIf());
250:       assertFalse(node0.isDelProp());
251:       assertFalse(node0.isGetterDef());
252:       assertFalse(node0.isCase());
253:       assertFalse(node0.isFor());
254:       assertFalse(node0.isTry());
255:       assertFalse(node0.isBlock());
256:       assertFalse(node0.isSwitch());
257:       assertEquals((-1), node0.getCharno());
258:       assertFalse(node0.isNew());
259:       assertFalse(node0.isAdd());
260:       assertFalse(node0.isCall());
261:       assertFalse(node0.isName());
262:       assertFalse(node0.isStringKey());
263:       assertEquals(83, node0.getType());
264:       assertFalse(node0.isNull());
265:       assertFalse(node0.isEmpty());
266:       assertFalse(node0.isOr());
267:       assertFalse(node0.isVar());
268:       assertEquals(0, node0.getChildCount());
269:       assertFalse(node0.isLabel());
270:       assertFalse(node0.isAssignAdd());
271:       assertFalse(node0.isDo());
272:       assertFalse(node0.isDefaultCase());
273:       assertFalse(iterable0.contains(node0));
274:       assertNotNull(iterable0);
275:       
276:       boolean boolean0 = node0.isQualifiedName();
277:       assertFalse(boolean0);
278:       assertEquals(53, Node.INPUT_ID);
279:       assertEquals(43, Node.IS_CONSTANT_NAME);
280:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
281:       assertEquals(2, Node.POST_FLAG);
282:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
283:       assertEquals(4095, Node.COLUMN_MASK);
284:       assertEquals(48, Node.DIRECTIVES);
285:       assertEquals(39, Node.EMPTY_BLOCK);
286:       assertEquals(37, Node.OPT_ARG_NAME);
287:       assertEquals(56, Node.CHANGE_TIME);
288:       assertEquals(47, Node.IS_DISPATCHER);
289:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
290:       assertEquals(29, Node.JSDOC_INFO_PROP);
291:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
292:       assertEquals(15, Node.NO_SIDE_EFFECTS);
293:       assertEquals(36, Node.QUOTED_PROP);
294:       assertEquals(55, Node.INFERRED_FUNCTION);
295:       assertEquals(52, Node.LENGTH);
296:       assertEquals(8, Node.FLAG_NO_THROWS);
297:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
298:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
299:       assertEquals(54, Node.SLASH_V);
300:       assertEquals(57, Node.REFLECTED_OBJECT);
301:       assertEquals(57, Node.LAST_PROP);
302:       assertEquals(49, Node.DIRECT_EVAL);
303:       assertEquals(40, Node.ORIGINALNAME_PROP);
304:       assertEquals(30, Node.VAR_ARGS_NAME);
305:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
306:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
307:       assertEquals(12, Node.COLUMN_BITS);
308:       assertEquals(32, Node.INCRDECR_PROP);
309:       assertEquals(46, Node.IS_NAMESPACE);
310:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
311:       assertEquals(1, Node.DECR_FLAG);
312:       assertEquals(50, Node.FREE_CALL);
313:       assertEquals(51, Node.STATIC_SOURCE_FILE);
314:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
315:       assertEquals(0, linkedHashSet0.size());
316:       assertTrue(linkedHashSet0.isEmpty());
317:       assertEquals(0, immutableList0.size());
318:       assertFalse(node0.isScript());
319:       assertFalse(node0.isExprResult());
320:       assertFalse(node0.isNot());
321:       assertFalse(node0.isWith());
322:       assertFalse(node0.isCast());
323:       assertTrue(node0.isParamList());
324:       assertFalse(node0.isObjectLit());
325:       assertFalse(node0.isLabelName());
326:       assertFalse(node0.isAnd());
327:       assertFalse(node0.isThis());
328:       assertFalse(node0.isNumber());
329:       assertFalse(node0.isTypeOf());
330:       assertFalse(node0.isGetProp());
331:       assertFalse(node0.isBreak());
332:       assertFalse(node0.hasChildren());
333:       assertFalse(node0.isComma());
334:       assertFalse(node0.isDec());
335:       assertEquals((-1), node0.getSourcePosition());
336:       assertFalse(node0.isAssign());
337:       assertFalse(node0.isGetElem());
338:       assertFalse(node0.isInstanceOf());
339:       assertFalse(node0.hasMoreThanOneChild());
340:       assertFalse(node0.isHook());
341:       assertFalse(node0.hasOneChild());
342:       assertFalse(node0.isReturn());
343:       assertFalse(node0.isWhile());
344:       assertFalse(node0.isInc());
345:       assertFalse(node0.isContinue());
346:       assertFalse(node0.isString());
347:       assertEquals((-1), node0.getLineno());
348:       assertFalse(node0.isNE());
349:       assertFalse(node0.isSetterDef());
350:       assertFalse(node0.isFalse());
351:       assertFalse(node0.isIn());
352:       assertFalse(node0.isThrow());
353:       assertFalse(node0.isRegExp());
354:       assertFalse(node0.isTrue());
355:       assertFalse(node0.isFunction());
356:       assertFalse(node0.isVoid());
357:       assertFalse(node0.isDebugger());
358:       assertFalse(node0.isCatch());
359:       assertFalse(node0.isArrayLit());
360:       assertFalse(node0.isIf());
361:       assertFalse(node0.isDelProp());
362:       assertFalse(node0.isGetterDef());
363:       assertFalse(node0.isCase());
364:       assertFalse(node0.isFor());
365:       assertFalse(node0.isTry());
366:       assertFalse(node0.isBlock());
367:       assertFalse(node0.isSwitch());
368:       assertEquals((-1), node0.getCharno());
369:       assertFalse(node0.isNew());
370:       assertFalse(node0.isAdd());
371:       assertFalse(node0.isCall());
372:       assertFalse(node0.isName());
373:       assertFalse(node0.isStringKey());
374:       assertEquals(83, node0.getType());
375:       assertFalse(node0.isNull());
376:       assertFalse(node0.isEmpty());
377:       assertFalse(node0.isOr());
378:       assertFalse(node0.isVar());
379:       assertEquals(0, node0.getChildCount());
380:       assertFalse(node0.isLabel());
381:       assertFalse(node0.isAssignAdd());
382:       assertFalse(node0.isDo());
383:       assertFalse(node0.isDefaultCase());
384:       
385:       FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
386:       assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
387:       assertNotNull(fileSystemHandling1);
388:       
389:       simpleErrorReporter0.error("wV`=Nkp+4XKZ", "Object#Key", 34, 38);
390:       JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
391:       assertEquals(53, Node.INPUT_ID);
392:       assertEquals(43, Node.IS_CONSTANT_NAME);
393:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
394:       assertEquals(2, Node.POST_FLAG);
395:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
396:       assertEquals(4095, Node.COLUMN_MASK);
397:       assertEquals(48, Node.DIRECTIVES);
398:       assertEquals(39, Node.EMPTY_BLOCK);
399:       assertEquals(37, Node.OPT_ARG_NAME);
400:       assertEquals(56, Node.CHANGE_TIME);
401:       assertEquals(47, Node.IS_DISPATCHER);
402:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
403:       assertEquals(29, Node.JSDOC_INFO_PROP);
404:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
405:       assertEquals(15, Node.NO_SIDE_EFFECTS);
406:       assertEquals(36, Node.QUOTED_PROP);
407:       assertEquals(55, Node.INFERRED_FUNCTION);
408:       assertEquals(52, Node.LENGTH);
409:       assertEquals(8, Node.FLAG_NO_THROWS);
410:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
411:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
412:       assertEquals(54, Node.SLASH_V);
413:       assertEquals(57, Node.REFLECTED_OBJECT);
414:       assertEquals(57, Node.LAST_PROP);
415:       assertEquals(49, Node.DIRECT_EVAL);
416:       assertEquals(40, Node.ORIGINALNAME_PROP);
417:       assertEquals(30, Node.VAR_ARGS_NAME);
418:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
419:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
420:       assertEquals(12, Node.COLUMN_BITS);
421:       assertEquals(32, Node.INCRDECR_PROP);
422:       assertEquals(46, Node.IS_NAMESPACE);
423:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
424:       assertEquals(1, Node.DECR_FLAG);
425:       assertEquals(50, Node.FREE_CALL);
426:       assertEquals(51, Node.STATIC_SOURCE_FILE);
427:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
428:       assertEquals(0, linkedHashSet0.size());
429:       assertTrue(linkedHashSet0.isEmpty());
430:       assertEquals(0, immutableList0.size());
431:       assertFalse(node0.isScript());
432:       assertFalse(node0.isExprResult());
433:       assertFalse(node0.isNot());
434:       assertFalse(node0.isWith());
435:       assertFalse(node0.isCast());
436:       assertTrue(node0.isParamList());
437:       assertFalse(node0.isObjectLit());
438:       assertFalse(node0.isLabelName());
439:       assertFalse(node0.isAnd());
440:       assertFalse(node0.isThis());
441:       assertFalse(node0.isNumber());
442:       assertFalse(node0.isTypeOf());
443:       assertFalse(node0.isGetProp());
444:       assertFalse(node0.isBreak());
445:       assertFalse(node0.hasChildren());
446:       assertFalse(node0.isComma());
447:       assertFalse(node0.isDec());
448:       assertEquals((-1), node0.getSourcePosition());
449:       assertFalse(node0.isAssign());
450:       assertFalse(node0.isGetElem());
451:       assertFalse(node0.isInstanceOf());
452:       assertFalse(node0.hasMoreThanOneChild());
453:       assertFalse(node0.isHook());
454:       assertFalse(node0.hasOneChild());
455:       assertFalse(node0.isReturn());
456:       assertFalse(node0.isWhile());
457:       assertFalse(node0.isInc());
458:       assertFalse(node0.isContinue());
459:       assertFalse(node0.isString());
460:       assertEquals((-1), node0.getLineno());
461:       assertFalse(node0.isNE());
462:       assertFalse(node0.isSetterDef());
463:       assertFalse(node0.isFalse());
464:       assertFalse(node0.isIn());
465:       assertFalse(node0.isThrow());
466:       assertFalse(node0.isRegExp());
467:       assertFalse(node0.isTrue());
468:       assertFalse(node0.isFunction());
469:       assertFalse(node0.isVoid());
470:       assertFalse(node0.isDebugger());
471:       assertFalse(node0.isCatch());
472:       assertFalse(node0.isArrayLit());
473:       assertFalse(node0.isIf());
474:       assertFalse(node0.isDelProp());
475:       assertFalse(node0.isGetterDef());
476:       assertFalse(node0.isCase());
477:       assertFalse(node0.isFor());
478:       assertFalse(node0.isTry());
479:       assertFalse(node0.isBlock());
480:       assertFalse(node0.isSwitch());
481:       assertEquals((-1), node0.getCharno());
482:       assertFalse(node0.isNew());
483:       assertFalse(node0.isAdd());
484:       assertFalse(node0.isCall());
485:       assertFalse(node0.isName());
486:       assertFalse(node0.isStringKey());
487:       assertEquals(83, node0.getType());
488:       assertFalse(node0.isNull());
489:       assertFalse(node0.isEmpty());
490:       assertFalse(node0.isOr());
491:       assertFalse(node0.isVar());
492:       assertEquals(0, node0.getChildCount());
493:       assertFalse(node0.isLabel());
494:       assertFalse(node0.isAssignAdd());
495:       assertFalse(node0.isDo());
496:       assertFalse(node0.isDefaultCase());
497:       assertNull(jSDocInfo0);
498:       
499:       Node node1 = node0.setJSDocInfo((JSDocInfo) null);
500:       assertEquals(53, Node.INPUT_ID);
501:       assertEquals(43, Node.IS_CONSTANT_NAME);
502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
503:       assertEquals(2, Node.POST_FLAG);
504:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
505:       assertEquals(4095, Node.COLUMN_MASK);
506:       assertEquals(48, Node.DIRECTIVES);
507:       assertEquals(39, Node.EMPTY_BLOCK);
508:       assertEquals(37, Node.OPT_ARG_NAME);
509:       assertEquals(56, Node.CHANGE_TIME);
510:       assertEquals(47, Node.IS_DISPATCHER);
511:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
512:       assertEquals(29, Node.JSDOC_INFO_PROP);
513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
514:       assertEquals(15, Node.NO_SIDE_EFFECTS);
515:       assertEquals(36, Node.QUOTED_PROP);
516:       assertEquals(55, Node.INFERRED_FUNCTION);
517:       assertEquals(52, Node.LENGTH);
518:       assertEquals(8, Node.FLAG_NO_THROWS);
519:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
520:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
521:       assertEquals(54, Node.SLASH_V);
522:       assertEquals(57, Node.REFLECTED_OBJECT);
523:       assertEquals(57, Node.LAST_PROP);
524:       assertEquals(49, Node.DIRECT_EVAL);
525:       assertEquals(40, Node.ORIGINALNAME_PROP);
526:       assertEquals(30, Node.VAR_ARGS_NAME);
527:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
528:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
529:       assertEquals(12, Node.COLUMN_BITS);
530:       assertEquals(32, Node.INCRDECR_PROP);
531:       assertEquals(46, Node.IS_NAMESPACE);
532:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
533:       assertEquals(1, Node.DECR_FLAG);
534:       assertEquals(50, Node.FREE_CALL);
535:       assertEquals(51, Node.STATIC_SOURCE_FILE);
536:       assertEquals(52, Node.LENGTH);
537:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
538:       assertEquals(57, Node.REFLECTED_OBJECT);
539:       assertEquals(40, Node.ORIGINALNAME_PROP);
540:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
541:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
542:       assertEquals(49, Node.DIRECT_EVAL);
543:       assertEquals(50, Node.FREE_CALL);
544:       assertEquals(48, Node.DIRECTIVES);
545:       assertEquals(54, Node.SLASH_V);
546:       assertEquals(32, Node.INCRDECR_PROP);
547:       assertEquals(46, Node.IS_NAMESPACE);
548:       assertEquals(51, Node.STATIC_SOURCE_FILE);
549:       assertEquals(4095, Node.COLUMN_MASK);
550:       assertEquals(1, Node.DECR_FLAG);
551:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
552:       assertEquals(12, Node.COLUMN_BITS);
553:       assertEquals(53, Node.INPUT_ID);
554:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
555:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
556:       assertEquals(36, Node.QUOTED_PROP);
557:       assertEquals(37, Node.OPT_ARG_NAME);
558:       assertEquals(43, Node.IS_CONSTANT_NAME);
559:       assertEquals(56, Node.CHANGE_TIME);
560:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
561:       assertEquals(55, Node.INFERRED_FUNCTION);
562:       assertEquals(8, Node.FLAG_NO_THROWS);
563:       assertEquals(39, Node.EMPTY_BLOCK);
564:       assertEquals(2, Node.POST_FLAG);
565:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
566:       assertEquals(29, Node.JSDOC_INFO_PROP);
567:       assertEquals(30, Node.VAR_ARGS_NAME);
568:       assertEquals(15, Node.NO_SIDE_EFFECTS);
569:       assertEquals(47, Node.IS_DISPATCHER);
570:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
571:       assertEquals(57, Node.LAST_PROP);
572:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
573:       assertEquals(0, linkedHashSet0.size());
574:       assertTrue(linkedHashSet0.isEmpty());
575:       assertEquals(0, immutableList0.size());
576:       assertFalse(node0.isScript());
577:       assertFalse(node0.isExprResult());
578:       assertFalse(node0.isNot());
579:       assertFalse(node0.isWith());
580:       assertFalse(node0.isCast());
581:       assertTrue(node0.isParamList());
582:       assertFalse(node0.isObjectLit());
583:       assertFalse(node0.isLabelName());
584:       assertFalse(node0.isAnd());
585:       assertFalse(node0.isThis());
586:       assertFalse(node0.isNumber());
587:       assertFalse(node0.isTypeOf());
588:       assertFalse(node0.isGetProp());
589:       assertFalse(node0.isBreak());
590:       assertFalse(node0.hasChildren());
591:       assertFalse(node0.isComma());
592:       assertFalse(node0.isDec());
593:       assertEquals((-1), node0.getSourcePosition());
594:       assertFalse(node0.isAssign());
595:       assertFalse(node0.isGetElem());
596:       assertFalse(node0.isInstanceOf());
597:       assertFalse(node0.hasMoreThanOneChild());
598:       assertFalse(node0.isHook());
599:       assertFalse(node0.hasOneChild());
600:       assertFalse(node0.isReturn());
601:       assertFalse(node0.isWhile());
602:       assertFalse(node0.isInc());
603:       assertFalse(node0.isContinue());
604:       assertFalse(node0.isString());
605:       assertEquals((-1), node0.getLineno());
606:       assertFalse(node0.isNE());
607:       assertFalse(node0.isSetterDef());
608:       assertFalse(node0.isFalse());
609:       assertFalse(node0.isIn());
610:       assertFalse(node0.isThrow());
611:       assertFalse(node0.isRegExp());
612:       assertFalse(node0.isTrue());
613:       assertFalse(node0.isFunction());
614:       assertFalse(node0.isVoid());
615:       assertFalse(node0.isDebugger());
616:       assertFalse(node0.isCatch());
617:       assertFalse(node0.isArrayLit());
618:       assertFalse(node0.isIf());
619:       assertFalse(node0.isDelProp());
620:       assertFalse(node0.isGetterDef());
621:       assertFalse(node0.isCase());
622:       assertFalse(node0.isFor());
623:       assertFalse(node0.isTry());
624:       assertFalse(node0.isBlock());
625:       assertFalse(node0.isSwitch());
626:       assertEquals((-1), node0.getCharno());
627:       assertFalse(node0.isNew());
628:       assertFalse(node0.isAdd());
629:       assertFalse(node0.isCall());
630:       assertFalse(node0.isName());
631:       assertFalse(node0.isStringKey());
632:       assertEquals(83, node0.getType());
633:       assertFalse(node0.isNull());
634:       assertFalse(node0.isEmpty());
635:       assertFalse(node0.isOr());
636:       assertFalse(node0.isVar());
637:       assertEquals(0, node0.getChildCount());
638:       assertFalse(node0.isLabel());
639:       assertFalse(node0.isAssignAdd());
640:       assertFalse(node0.isDo());
641:       assertFalse(node0.isDefaultCase());
642:       assertEquals((-1), node1.getCharno());
643:       assertFalse(node1.isInc());
644:       assertFalse(node1.isHook());
645:       assertFalse(node1.isSwitch());
646:       assertFalse(node1.isCase());
647:       assertFalse(node1.isIn());
648:       assertEquals(83, node1.getType());
649:       assertFalse(node1.isString());
650:       assertFalse(node1.isAnd());
651:       assertFalse(node1.isThrow());
652:       assertFalse(node1.isFalse());
653:       assertFalse(node1.isArrayLit());
654:       assertFalse(node1.isFunction());
655:       assertFalse(node1.isTry());
656:       assertFalse(node1.hasOneChild());
657:       assertFalse(node1.isGetterDef());
658:       assertFalse(node1.isNumber());
659:       assertFalse(node1.isScript());
660:       assertFalse(node1.isThis());
661:       assertEquals((-1), node1.getLineno());
662:       assertFalse(node1.isIf());
663:       assertFalse(node1.isNE());
664:       assertFalse(node1.isFor());
665:       assertFalse(node1.isRegExp());
666:       assertFalse(node1.hasMoreThanOneChild());
667:       assertFalse(node1.isWith());
668:       assertFalse(node1.isCatch());
669:       assertFalse(node1.isInstanceOf());
670:       assertFalse(node1.isBlock());
671:       assertFalse(node1.isNew());
672:       assertFalse(node1.isVar());
673:       assertFalse(node1.isWhile());
674:       assertFalse(node1.isDo());
675:       assertFalse(node1.isAdd());
676:       assertFalse(node1.isSetterDef());
677:       assertFalse(node1.isLabel());
678:       assertEquals((-1), node1.getSourcePosition());
679:       assertFalse(node1.isAssignAdd());
680:       assertFalse(node1.isStringKey());
681:       assertFalse(node1.isContinue());
682:       assertFalse(node1.isLabelName());
683:       assertEquals(0, node1.getChildCount());
684:       assertFalse(node1.isCast());
685:       assertFalse(node1.isVoid());
686:       assertFalse(node1.isDebugger());
687:       assertFalse(node1.isExprResult());
688:       assertFalse(node1.isTrue());
689:       assertFalse(node1.isDefaultCase());
690:       assertFalse(node1.isObjectLit());
691:       assertFalse(node1.isNot());
692:       assertTrue(node1.isParamList());
693:       assertFalse(node1.isEmpty());
694:       assertFalse(node1.isGetProp());
695:       assertFalse(node1.isOr());
696:       assertFalse(node1.isComma());
697:       assertFalse(node1.isDec());
698:       assertFalse(node1.isDelProp());
699:       assertFalse(node1.hasChildren());
700:       assertFalse(node1.isNull());
701:       assertFalse(node1.isReturn());
702:       assertFalse(node1.isName());
703:       assertFalse(node1.isCall());
704:       assertFalse(node1.isGetElem());
705:       assertFalse(node1.isAssign());
706:       assertFalse(node1.isBreak());
707:       assertFalse(node1.isTypeOf());
708:       assertSame(node0, node1);
709:       assertSame(node1, node0);
710:       assertNotNull(node1);
711:       
712:       boolean boolean1 = node0.isSetterDef();
713:       assertFalse(boolean1);
714:       assertEquals(53, Node.INPUT_ID);
715:       assertEquals(43, Node.IS_CONSTANT_NAME);
716:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
717:       assertEquals(2, Node.POST_FLAG);
718:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
719:       assertEquals(4095, Node.COLUMN_MASK);
720:       assertEquals(48, Node.DIRECTIVES);
721:       assertEquals(39, Node.EMPTY_BLOCK);
722:       assertEquals(37, Node.OPT_ARG_NAME);
723:       assertEquals(56, Node.CHANGE_TIME);
724:       assertEquals(47, Node.IS_DISPATCHER);
725:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
726:       assertEquals(29, Node.JSDOC_INFO_PROP);
727:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
728:       assertEquals(15, Node.NO_SIDE_EFFECTS);
729:       assertEquals(36, Node.QUOTED_PROP);
730:       assertEquals(55, Node.INFERRED_FUNCTION);
731:       assertEquals(52, Node.LENGTH);
732:       assertEquals(8, Node.FLAG_NO_THROWS);
733:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
734:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
735:       assertEquals(54, Node.SLASH_V);
736:       assertEquals(57, Node.REFLECTED_OBJECT);
737:       assertEquals(57, Node.LAST_PROP);
738:       assertEquals(49, Node.DIRECT_EVAL);
739:       assertEquals(40, Node.ORIGINALNAME_PROP);
740:       assertEquals(30, Node.VAR_ARGS_NAME);
741:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
742:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
743:       assertEquals(12, Node.COLUMN_BITS);
744:       assertEquals(32, Node.INCRDECR_PROP);
745:       assertEquals(46, Node.IS_NAMESPACE);
746:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
747:       assertEquals(1, Node.DECR_FLAG);
748:       assertEquals(50, Node.FREE_CALL);
749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
750:       assertTrue(boolean1 == boolean0);
751:       assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
752:       assertEquals(0, linkedHashSet0.size());
753:       assertTrue(linkedHashSet0.isEmpty());
754:       assertEquals(0, immutableList0.size());
755:       assertFalse(node0.isScript());
756:       assertFalse(node0.isExprResult());
757:       assertFalse(node0.isNot());
758:       assertFalse(node0.isWith());
759:       assertFalse(node0.isCast());
760:       assertTrue(node0.isParamList());
761:       assertFalse(node0.isObjectLit());
762:       assertFalse(node0.isLabelName());
763:       assertFalse(node0.isAnd());
764:       assertFalse(node0.isThis());
765:       assertFalse(node0.isNumber());
766:       assertFalse(node0.isTypeOf());
767:       assertFalse(node0.isGetProp());
768:       assertFalse(node0.isBreak());
769:       assertFalse(node0.hasChildren());
770:       assertFalse(node0.isComma());
771:       assertFalse(node0.isDec());
772:       assertEquals((-1), node0.getSourcePosition());
773:       assertFalse(node0.isAssign());
774:       assertFalse(node0.isGetElem());
775:       assertFalse(node0.isInstanceOf());
776:       assertFalse(node0.hasMoreThanOneChild());
777:       assertFalse(node0.isHook());
778:       assertFalse(node0.hasOneChild());
779:       assertFalse(node0.isReturn());
780:       assertFalse(node0.isWhile());
781:       assertFalse(node0.isInc());
782:       assertFalse(node0.isContinue());
783:       assertFalse(node0.isString());
784:       assertEquals((-1), node0.getLineno());
785:       assertFalse(node0.isNE());
786:       assertFalse(node0.isSetterDef());
787:       assertFalse(node0.isFalse());
788:       assertFalse(node0.isIn());
789:       assertFalse(node0.isThrow());
790:       assertFalse(node0.isRegExp());
791:       assertFalse(node0.isTrue());
792:       assertFalse(node0.isFunction());
793:       assertFalse(node0.isVoid());
794:       assertFalse(node0.isDebugger());
795:       assertFalse(node0.isCatch());
796:       assertFalse(node0.isArrayLit());
797:       assertFalse(node0.isIf());
798:       assertFalse(node0.isDelProp());
799:       assertFalse(node0.isGetterDef());
800:       assertFalse(node0.isCase());
801:       assertFalse(node0.isFor());
802:       assertFalse(node0.isTry());
803:       assertFalse(node0.isBlock());
804:       assertFalse(node0.isSwitch());
805:       assertEquals((-1), node0.getCharno());
806:       assertFalse(node0.isNew());
807:       assertFalse(node0.isAdd());
808:       assertFalse(node0.isCall());
809:       assertFalse(node0.isName());
810:       assertFalse(node0.isStringKey());
811:       assertEquals(83, node0.getType());
812:       assertFalse(node0.isNull());
813:       assertFalse(node0.isEmpty());
814:       assertFalse(node0.isOr());
815:       assertFalse(node0.isVar());
816:       assertEquals(0, node0.getChildCount());
817:       assertFalse(node0.isLabel());
818:       assertFalse(node0.isAssignAdd());
819:       assertFalse(node0.isDo());
820:       assertFalse(node0.isDefaultCase());
821:       assertSame(node0, node1);
822:       
823:       boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
824:       assertFalse(boolean2);
825:       assertTrue(boolean2 == boolean1);
826:       assertTrue(boolean2 == boolean0);
827:       
828:       // Undeclared exception!
829:       try { 
830:         node1.replaceChild(node0, node0);
831:         fail("Expecting exception: NullPointerException");
832:       
833:       } catch(NullPointerException e) {
834:          //
835:          // no message in exception (getMessage() returned null)
836:          //
837:          verifyException("com.google.javascript.rhino.Node", e);
838:       }
839:   }
840: }
RegularFileObject[/tmp/EvoSuite_38_1628255580615/com/google/javascript/rhino/Node_38_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:13:00 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_38_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_38_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.common.collect.RegularImmutableSet",
108:       "com.google.javascript.rhino.jstype.ModificationVisitor",
109:       "com.google.javascript.rhino.jstype.PropertyMap$1",
110:       "com.google.common.collect.AbstractMapEntry",
111:       "com.google.javascript.rhino.Node$AncestorIterable$1",
112:       "com.google.common.collect.Iterators$12",
113:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
114:       "com.google.common.collect.Iterators$11",
115:       "com.google.javascript.rhino.jstype.JSType$1",
116:       "com.google.common.collect.EmptyImmutableBiMap",
117:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
118:       "com.google.common.base.Predicate",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.javascript.rhino.jstype.JSType",
124:       "com.google.common.collect.ImmutableAsList",
125:       "com.google.javascript.rhino.Node$StringNode",
126:       "com.google.javascript.rhino.jstype.ProxyObjectType",
127:       "com.google.common.collect.Sets$SetView",
128:       "com.google.common.collect.RegularImmutableAsList",
129:       "com.google.javascript.rhino.jstype.TemplateType",
130:       "com.google.common.collect.SingletonImmutableSet",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.common.collect.ImmutableList$SerializedForm",
135:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
136:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
137:       "com.google.common.collect.AbstractMapBasedMultimap",
138:       "com.google.common.collect.Lists$Partition",
139:       "com.google.common.collect.Lists",
140:       "com.google.javascript.rhino.Node$SideEffectFlags",
141:       "com.google.common.collect.UnmodifiableListIterator",
142:       "com.google.javascript.rhino.jstype.NullType",
143:       "com.google.common.collect.Lists$TransformingSequentialList",
144:       "com.google.javascript.rhino.ErrorReporter",
145:       "com.google.javascript.rhino.jstype.UnknownType",
146:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
147:       "com.google.javascript.rhino.jstype.ValueType",
148:       "com.google.javascript.rhino.jstype.PropertyMap",
149:       "com.google.javascript.rhino.Token",
150:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
151:       "com.google.common.collect.ObjectArrays",
152:       "com.google.javascript.rhino.jstype.StaticSourceFile",
153:       "com.google.javascript.rhino.jstype.BooleanType",
154:       "com.google.javascript.rhino.jstype.NoObjectType",
155:       "com.google.common.collect.AbstractIterator",
156:       "com.google.javascript.rhino.jstype.FunctionBuilder",
157:       "com.google.javascript.rhino.jstype.JSType$TypePair",
158:       "com.google.common.base.Joiner$MapJoiner",
159:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
160:       "com.google.common.collect.ImmutableList$1",
161:       "com.google.common.collect.MapDifference",
162:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
163:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
164:       "com.google.common.collect.Sets$ImprovedAbstractSet",
165:       "com.google.javascript.rhino.jstype.FunctionType",
166:       "com.google.common.base.Preconditions",
167:       "com.google.common.collect.UnmodifiableIterator",
168:       "com.google.javascript.rhino.JSDocInfo",
169:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
170:       "com.google.javascript.rhino.jstype.Property",
171:       "com.google.common.collect.ImmutableMapValues",
172:       "com.google.common.collect.ImmutableEntry",
173:       "com.google.common.base.Joiner$1",
174:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
175:       "com.google.common.base.Joiner$2",
176:       "com.google.common.collect.ImmutableCollection",
177:       "com.google.common.collect.ImmutableEnumMap",
178:       "com.google.javascript.rhino.jstype.TernaryValue",
179:       "com.google.javascript.rhino.Node$AncestorIterable",
180:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
181:       "com.google.common.collect.Lists$RandomAccessListWrapper",
182:       "com.google.common.collect.ImmutableEnumSet",
183:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
184:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
185:       "com.google.javascript.rhino.jstype.EnumElementType",
186:       "com.google.javascript.rhino.jstype.UnionType",
187:       "com.google.common.base.Objects",
188:       "com.google.javascript.rhino.Node$NumberNode",
189:       "com.google.common.collect.SingletonImmutableList",
190:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
191:       "com.google.common.collect.ImmutableCollection$Builder",
192:       "com.google.javascript.rhino.jstype.StaticSlot",
193:       "com.google.common.collect.Iterators$6",
194:       "com.google.common.collect.BiMap",
195:       "com.google.common.collect.Iterators$7",
196:       "com.google.common.collect.AbstractSetMultimap",
197:       "com.google.common.base.Function",
198:       "com.google.common.collect.ImmutableSet",
199:       "com.google.common.collect.Lists$AbstractListWrapper",
200:       "com.google.common.collect.ImmutableMap",
201:       "com.google.common.collect.AbstractIndexedListIterator",
202:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
203:       "com.google.common.collect.Maps$1",
204:       "com.google.javascript.rhino.jstype.EnumType",
205:       "com.google.common.collect.Iterators$1",
206:       "com.google.common.collect.Iterators$2",
207:       "com.google.javascript.rhino.jstype.NamespaceType",
208:       "com.google.common.collect.Iterators$3",
209:       "com.google.common.collect.Sets",
210:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
211:       "com.google.javascript.rhino.Node$ObjectPropListItem",
212:       "com.google.common.collect.Lists$StringAsImmutableList",
213:       "com.google.common.collect.Lists$2",
214:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
215:       "com.google.common.collect.ImmutableList$Builder",
216:       "com.google.common.collect.Lists$1",
217:       "com.google.javascript.rhino.jstype.StaticReference",
218:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
219:       "com.google.common.collect.Multiset",
220:       "com.google.common.collect.AbstractMultimap",
221:       "com.google.common.collect.Multimap",
222:       "com.google.common.collect.Iterators",
223:       "com.google.common.collect.EmptyImmutableSet",
224:       "com.google.common.collect.Maps$ImprovedAbstractMap",
225:       "com.google.common.collect.ImmutableBiMap",
226:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
227:       "com.google.common.collect.ImmutableList",
228:       "com.google.common.collect.SingletonImmutableBiMap",
229:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
230:       "com.google.javascript.rhino.jstype.StringType",
231:       "com.google.javascript.rhino.Node$AbstractPropListItem",
232:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
233:       "com.google.javascript.rhino.jstype.TemplatizedType",
234:       "com.google.javascript.rhino.jstype.Visitor",
235:       "com.google.javascript.rhino.jstype.NoResolvedType",
236:       "com.google.javascript.rhino.jstype.JSTypeNative",
237:       "com.google.javascript.rhino.jstype.AllType",
238:       "com.google.common.collect.Maps",
239:       "com.google.common.collect.SetMultimap",
240:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
241:       "com.google.common.collect.Maps$EntryTransformer",
242:       "com.google.javascript.rhino.JSTypeExpression",
243:       "com.google.common.collect.Iterators$MergingIterator"
244:     );
245:   } 
246: 
247:   private static void resetClasses() {
248:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_38_tmp__ESTest_scaffolding.class.getClassLoader()); 
249: 
250:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
251:       "com.google.javascript.rhino.Node",
252:       "com.google.javascript.rhino.Node$NumberNode",
253:       "com.google.javascript.rhino.Node$StringNode",
254:       "com.google.javascript.rhino.Node$AbstractPropListItem",
255:       "com.google.javascript.rhino.Node$ObjectPropListItem",
256:       "com.google.javascript.rhino.Node$IntPropListItem",
257:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
258:       "com.google.javascript.rhino.Node$AncestorIterable",
259:       "com.google.javascript.rhino.Node$NodeMismatch",
260:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
261:       "com.google.javascript.rhino.Node$SideEffectFlags",
262:       "com.google.javascript.rhino.SimpleErrorReporter",
263:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
264:       "com.google.common.base.Joiner",
265:       "com.google.common.base.Preconditions",
266:       "com.google.common.base.Joiner$1",
267:       "com.google.common.collect.Collections2",
268:       "com.google.common.base.Joiner$MapJoiner",
269:       "com.google.common.collect.Maps",
270:       "com.google.common.collect.AbstractMultimap",
271:       "com.google.common.collect.AbstractMapBasedMultimap",
272:       "com.google.common.collect.AbstractSetMultimap",
273:       "com.google.common.collect.LinkedHashMultimap",
274:       "com.google.common.collect.AbstractMapEntry",
275:       "com.google.common.collect.ImmutableEntry",
276:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
277:       "com.google.common.collect.AbstractListMultimap",
278:       "com.google.common.collect.ArrayListMultimap",
279:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
280:       "com.google.common.collect.ImmutableCollection",
281:       "com.google.common.collect.RegularImmutableList",
282:       "com.google.common.collect.ObjectArrays",
283:       "com.google.common.collect.ImmutableList",
284:       "com.google.javascript.rhino.jstype.ModificationVisitor",
285:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
286:       "com.google.common.collect.ImmutableCollection$Builder",
287:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
288:       "com.google.common.collect.ImmutableList$Builder",
289:       "com.google.common.collect.UnmodifiableIterator",
290:       "com.google.common.collect.UnmodifiableListIterator",
291:       "com.google.common.collect.Iterators$1",
292:       "com.google.common.collect.Iterators$2",
293:       "com.google.common.collect.Iterators",
294:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
295:       "com.google.javascript.rhino.jstype.JSType$1",
296:       "com.google.javascript.rhino.jstype.JSType",
297:       "com.google.javascript.rhino.jstype.ObjectType",
298:       "com.google.javascript.rhino.jstype.ProxyObjectType",
299:       "com.google.javascript.rhino.jstype.TemplateType",
300:       "com.google.javascript.rhino.jstype.ValueType",
301:       "com.google.javascript.rhino.jstype.BooleanType",
302:       "com.google.javascript.rhino.jstype.NullType",
303:       "com.google.javascript.rhino.jstype.NumberType",
304:       "com.google.javascript.rhino.jstype.StringType",
305:       "com.google.javascript.rhino.jstype.UnknownType",
306:       "com.google.javascript.rhino.jstype.VoidType",
307:       "com.google.javascript.rhino.jstype.AllType",
308:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
309:       "com.google.common.collect.ImmutableMap",
310:       "com.google.common.collect.ImmutableBiMap",
311:       "com.google.common.collect.EmptyImmutableBiMap",
312:       "com.google.javascript.rhino.jstype.PropertyMap$1",
313:       "com.google.javascript.rhino.jstype.PropertyMap",
314:       "com.google.javascript.rhino.jstype.FunctionType",
315:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
316:       "com.google.javascript.rhino.Token",
317:       "com.google.javascript.rhino.jstype.ArrowType",
318:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
319:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
320:       "com.google.javascript.rhino.jstype.InstanceObjectType",
321:       "com.google.javascript.rhino.jstype.Property",
322:       "com.google.common.collect.Lists",
323:       "com.google.javascript.rhino.jstype.NoObjectType",
324:       "com.google.javascript.rhino.jstype.NoType",
325:       "com.google.javascript.rhino.jstype.NoResolvedType",
326:       "com.google.common.collect.SingletonImmutableList",
327:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
328:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
329:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
330:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
331:       "com.google.javascript.rhino.jstype.UnionType",
332:       "com.google.javascript.rhino.jstype.FunctionBuilder",
333:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
334:       "com.google.javascript.rhino.jstype.EnumType",
335:       "com.google.javascript.rhino.jstype.EnumElementType",
336:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
337:       "com.google.common.collect.ImmutableSet",
338:       "com.google.common.collect.EmptyImmutableSet",
339:       "com.google.javascript.rhino.JSDocInfo",
340:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
341:       "com.google.common.collect.Sets",
342:       "com.google.javascript.rhino.Node$AncestorIterable$1",
343:       "com.google.common.base.Objects",
344:       "com.google.javascript.rhino.InputId",
345:       "com.google.javascript.rhino.JSTypeExpression",
346:       "com.google.common.collect.Iterables",
347:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
348:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedDocumentation",
349:       "com.google.javascript.rhino.jstype.TemplatizedType",
350:       "com.google.common.collect.AbstractMultimap$Values",
351:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
352:       "com.google.common.collect.AbstractMapBasedMultimap$1",
353:       "com.google.common.collect.Multimaps$Entries",
354:       "com.google.common.collect.AbstractMultimap$Entries",
355:       "com.google.common.collect.AbstractMapBasedMultimap$2",
356:       "com.google.javascript.rhino.jstype.NamedType",
357:       "com.google.common.collect.AbstractIndexedListIterator",
358:       "com.google.common.collect.Iterators$11",
359:       "com.google.common.collect.Platform",
360:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
361:       "com.google.javascript.rhino.jstype.TernaryValue",
362:       "com.google.javascript.rhino.jstype.JSType$2",
363:       "com.google.javascript.rhino.jstype.JSType$TypePair",
364:       "com.google.common.collect.ImmutableList$1"
365:     );
366:   }
367: }

[MASTER] 13:13:00.860 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
assertNotNull(simpleErrorReporter0);

JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertNotNull(jSTypeRegistry0);

LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertNotNull(linkedHashSet0);

Iterator<JSType> iterator0 = linkedHashSet0.iterator();
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertNotNull(iterator0);

ImmutableList<JSType> immutableList0 = ImmutableList.copyOf((Iterator<? extends JSType>) iterator0);
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertNotNull(immutableList0);

Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(iterable0.contains(node0));
assertNotNull(iterable0);

boolean boolean0 = node0.isQualifiedName();
assertFalse(boolean0);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());

FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
assertNotNull(fileSystemHandling1);

simpleErrorReporter0.error("wV`=Nkp+4XKZ", "Object#Key", 34, 38);
JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertNull(jSDocInfo0);

Node node1 = node0.setJSDocInfo((JSDocInfo) null);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isInc());
assertFalse(node1.isHook());
assertFalse(node1.isSwitch());
assertFalse(node1.isCase());
assertFalse(node1.isIn());
assertEquals(83, node1.getType());
assertFalse(node1.isString());
assertFalse(node1.isAnd());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isArrayLit());
assertFalse(node1.isFunction());
assertFalse(node1.isTry());
assertFalse(node1.hasOneChild());
assertFalse(node1.isGetterDef());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isThis());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isFor());
assertFalse(node1.isRegExp());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWith());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isVar());
assertFalse(node1.isWhile());
assertFalse(node1.isDo());
assertFalse(node1.isAdd());
assertFalse(node1.isSetterDef());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isStringKey());
assertFalse(node1.isContinue());
assertFalse(node1.isLabelName());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCast());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isExprResult());
assertFalse(node1.isTrue());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertTrue(node1.isParamList());
assertFalse(node1.isEmpty());
assertFalse(node1.isGetProp());
assertFalse(node1.isOr());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isDelProp());
assertFalse(node1.hasChildren());
assertFalse(node1.isNull());
assertFalse(node1.isReturn());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isBreak());
assertFalse(node1.isTypeOf());
assertSame(node0, node1);
assertSame(node1, node0);
assertNotNull(node1);

boolean boolean1 = node0.isSetterDef();
assertFalse(boolean1);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(2, Node.POST_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertTrue(boolean1 == boolean0);
assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
assertEquals(0, linkedHashSet0.size());
assertTrue(linkedHashSet0.isEmpty());
assertEquals(0, immutableList0.size());
assertFalse(node0.isScript());
assertFalse(node0.isExprResult());
assertFalse(node0.isNot());
assertFalse(node0.isWith());
assertFalse(node0.isCast());
assertTrue(node0.isParamList());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isAnd());
assertFalse(node0.isThis());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isAssign());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isHook());
assertFalse(node0.hasOneChild());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isInc());
assertFalse(node0.isContinue());
assertFalse(node0.isString());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isSetterDef());
assertFalse(node0.isFalse());
assertFalse(node0.isIn());
assertFalse(node0.isThrow());
assertFalse(node0.isRegExp());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isVoid());
assertFalse(node0.isDebugger());
assertFalse(node0.isCatch());
assertFalse(node0.isArrayLit());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetterDef());
assertFalse(node0.isCase());
assertFalse(node0.isFor());
assertFalse(node0.isTry());
assertFalse(node0.isBlock());
assertFalse(node0.isSwitch());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertEquals(83, node0.getType());
assertFalse(node0.isNull());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isVar());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertSame(node0, node1);

boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean2);
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);

node1.replaceChild(node0, node0);

[MASTER] 13:13:49.404 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:13:50.132 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:13:50.431 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:13:50.766 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:13:51.069 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:13:52.259 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/8
* Done!

* Computation finished
