* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-100
* Going to generate test cases for class: com.google.javascript.rhino.Node
* Starting Client-0
* Connecting to master process on port 5544
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-110/build/classes
  - subjects/buggy-versions/Closure-110/lib/args4j.jar
  - subjects/buggy-versions/Closure-110/lib/guava.jar
  - subjects/buggy-versions/Closure-110/lib/json.jar
  - subjects/buggy-versions/Closure-110/lib/jsr305.jar
  - subjects/buggy-versions/Closure-110/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-110/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-110/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.rhino.Node
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 7813
* Using seed 601772554
* Starting evolution
bbc usage percentage is: 100%
* Initial Number of Goals in DynaMOSA = 5977 / 7813
[MASTER] 13:08:10.877 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedHashSet<E> : Type points to itself
[MASTER] 13:08:13.863 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] com.google.javascript.rhino.Node.setQuotedString()V
[MASTER] 13:16:38.223 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: Line 2263: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1871: 5986,380,0| Number of FF evals: 1599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1870: 5986,380,0| Number of FF evals: 1599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - false: 5509,3641,0| Number of FF evals: 4258
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1872: 5986,380,0| Number of FF evals: 1599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: I5 Branch 276 IF_ICMPNE L2435 - true: 290,0,0| Number of FF evals: 298
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1867: 5986,380,0| Number of FF evals: 1599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1866: 5986,380,0| Number of FF evals: 1599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - false: 501,0,0| Number of FF evals: 343
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDouble(D)V: I5 Branch 114 IF_ICMPNE L902 - false: 512,0,0| Number of FF evals: 949
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: Line 2311: 120,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I12 Branch 280 IFEQ L174 - true: 501,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - true: 2631,0,0| Number of FF evals: 899
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 26 TABLESWITCH L114 Case 54 - true: 1501,1234,12| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 709: 161,0,0| Number of FF evals: 272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I44 Branch 171 IF_ICMPNE L1527 - false: 1579,1357,28| Number of FF evals: 13386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - true: 13005,10933,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 708: 161,0,0| Number of FF evals: 272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1861: 5986,380,0| Number of FF evals: 1599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 707: 161,0,0| Number of FF evals: 272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: Line 1860: 5986,380,0| Number of FF evals: 1599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: I5 Branch 263 IF_ICMPNE L2383 - false: 3535,0,0| Number of FF evals: 1160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 704: 161,0,0| Number of FF evals: 272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLastSibling()Lcom/google/javascript/rhino/Node;: I8 Branch 64 IFNULL L589 - false: 1281,373,0| Number of FF evals: 2280
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isExprResult()Z: I5 Branch 241 IF_ICMPNE L2295 - false: 2851,1909,0| Number of FF evals: 5313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: Line 699: 161,0,0| Number of FF evals: 272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: Line 1365: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1958: 385,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThis()Z: I5 Branch 271 IF_ICMPNE L2415 - false: 10148,9092,0| Number of FF evals: 11519
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - true: 9,0,0| Number of FF evals: 339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: Line 1959: 385,0,0| Number of FF evals: 193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: root-Branch: 44,0,0| Number of FF evals: 895
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - false: 11441,10426,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - true: 385,0,0| Number of FF evals: 441
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetterDef()Z: I5 Branch 245 IF_ICMPNE L2311 - true: 120,0,0| Number of FF evals: 317
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I83 Branch 175 IF_ICMPNE L1534 - false: 2139,1870,102| Number of FF evals: 12487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: Line 2251: 2100,0,0| Number of FF evals: 720
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: Line 2227: 205,0,0| Number of FF evals: 133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - true: 9655,7037,0| Number of FF evals: 6003
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I16 Branch 90 IFNONNULL L717 - true: 738,160,0| Number of FF evals: 2350
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 89 IFNONNULL L715 - true: 22,0,0| Number of FF evals: 92
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - false: 385,0,0| Number of FF evals: 311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 212 IFNULL L1793 - false: 207,0,0| Number of FF evals: 618
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 48 IFNONNULL L424 - true: 10101,9331,15| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - true: 93,0,0| Number of FF evals: 1706
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: Line 1123: 205,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 19 TABLESWITCH L114 Case 47 - true: 1711,1384,8| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I21 Branch 82 IFNULL L670 - false: 53,0,0| Number of FF evals: 960
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - false: 124,0,0| Number of FF evals: 631
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 161 IFNE L1473 - true: 1316,0,0| Number of FF evals: 913
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I45 Branch 164 IFNULL L1483 - false: 11305,8687,0| Number of FF evals: 9100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - true: 1452,0,0| Number of FF evals: 1193
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I182 Branch 184 IFNE L1558 - false: 1665,1536,194| Number of FF evals: 11340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - true: 2024,0,0| Number of FF evals: 1367
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mergeLineCharNo(II)I: I15 Branch 141 IFEQ L1197 - false: 254,0,0| Number of FF evals: 432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - true: 316,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: Line 1847: 885,0,0| Number of FF evals: 390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I12 Branch 154 IF_ACMPNE L1417 - false: 1266,0,0| Number of FF evals: 1101
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSetterDef()Z: I5 Branch 267 IF_ICMPNE L2399 - false: 10887,9237,0| Number of FF evals: 9690
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I49 Branch 73 IFNONNULL L627 - true: 4062,3098,0| Number of FF evals: 4366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1168: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: I5 Branch 225 IF_ICMPNE L2231 - false: 1377,794,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1169: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 38 IFNONNULL L400 - true: 9531,8574,73| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I8 Branch 156 IFNE L1446 - true: 159,0,0| Number of FF evals: 828
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - false: 3273,1201,0| Number of FF evals: 2534
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I5 Branch 93 IF_ACMPNE L739 - true: 385,0,0| Number of FF evals: 330
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFalse()Z: I5 Branch 242 IF_ICMPNE L2299 - false: 204,10,0| Number of FF evals: 1583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - true: 1420,1097,155| Number of FF evals: 10711
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 12 TABLESWITCH L114 Case 40 - true: 1606,1351,14| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: Line 2375: 120,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssign()Z: Line 2231: 385,0,0| Number of FF evals: 214
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1164: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 195 LOOKUPSWITCH L1616 Case 33 - true: 866,437,0| Number of FF evals: 3513
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: Line 1165: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - false: 17701,13642,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - false: 2633,2363,548| Number of FF evals: 13386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 81 IF_ACMPNE L669 - false: 53,0,0| Number of FF evals: 576
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: Line 307: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getJsDocBuilderForNode()Lcom/google/javascript/rhino/Node$FileLevelJsDocBuilder;: root-Branch: 885,0,0| Number of FF evals: 546
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: Line 1380: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I30 Branch 169 IFNE L1523 - true: 9,0,0| Number of FF evals: 434
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I17 Branch 94 IFNONNULL L742 - false: 3273,1201,0| Number of FF evals: 2534
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: I5 Branch 246 IF_ICMPNE L2315 - true: 2988,0,0| Number of FF evals: 1204
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - true: 3273,1201,0| Number of FF evals: 2479
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 5 TABLESWITCH L114 Case 33 - true: 1521,1242,11| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I17 Branch 63 IF_ACMPNE L577 - true: 2035,682,0| Number of FF evals: 1626
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1827: 3162,0,0| Number of FF evals: 1151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1826: 1610,0,0| Number of FF evals: 600
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: Line 1473: 385,0,0| Number of FF evals: 222
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - true: 622,0,0| Number of FF evals: 413
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I66 Branch 160 IFNULL L1459 - false: 483,375,24| Number of FF evals: 5093
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDec()Z: I5 Branch 236 IF_ICMPNE L2275 - false: 16280,14716,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I29 Branch 95 IFNONNULL L744 - false: 3320,1248,0| Number of FF evals: 2568
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: I12 Branch 201 IFNULL L1658 - false: 886,0,0| Number of FF evals: 630
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1337: 385,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - true: 290,0,0| Number of FF evals: 650
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1333: 385,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - false: 13456,11059,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: Line 1332: 385,0,0| Number of FF evals: 220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 642: 1189,0,0| Number of FF evals: 893
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: root-Branch: 1018,0,0| Number of FF evals: 473
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I35 Branch 282 IFNE L179 - false: 1753,908,253| Number of FF evals: 3027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 646: 7161,4560,0| Number of FF evals: 3836
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - true: 8329,7213,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 644: 1189,0,0| Number of FF evals: 893
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: Line 1278: 19332,13726,0| Number of FF evals: 4485
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: Line 2303: 44,0,0| Number of FF evals: 54
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 209 IFNONNULL L1743 - true: 3646,3085,27| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: I5 Branch 226 IF_ICMPNE L2235 - true: 885,0,0| Number of FF evals: 748
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - true: 13727,10700,190| Number of FF evals: 13332
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: I8 Branch 134 IFNONNULL L1128 - false: 120,0,0| Number of FF evals: 665
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNE()Z: I5 Branch 256 IF_ICMPNE L2355 - false: 15198,13198,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetProp()Z: I5 Branch 247 IF_ICMPNE L2319 - false: 861,20,0| Number of FF evals: 1591
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - true: 54680,49074,33238| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: Line 2387: 120,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 162 IFNONNULL L1480 - false: 946,0,0| Number of FF evals: 797
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: I4 Branch 289 IFNONNULL L317 - false: 54680,49074,33148| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 18 TABLESWITCH L114 Case 46 - true: 354,27,0| Number of FF evals: 1726
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 492: 15,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - true: 205,0,0| Number of FF evals: 337
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 3 TABLESWITCH L114 Case 31 - true: 1704,1453,13| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 489: 4,0,0| Number of FF evals: 112
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - false: 24,0,0| Number of FF evals: 420
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 193 LOOKUPSWITCH L1598 Default-Case - false: 272,0,0| Number of FF evals: 659
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: root-Branch: 205,0,0| Number of FF evals: 887
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - false: 170,0,0| Number of FF evals: 533
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 27 TABLESWITCH L114 Case 55 - true: 1513,1246,13| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I8 Branch 287 IFEQ L232 - true: 120,0,0| Number of FF evals: 473
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I9 Branch 151 IF_ACMPEQ L1403 - false: 769,0,0| Number of FF evals: 883
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: Line 494: 15,0,0| Number of FF evals: 312
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: I5 Branch 235 IF_ICMPNE L2271 - false: 6717,4395,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - true: 3543,0,0| Number of FF evals: 1340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: Line 2363: 2809,0,0| Number of FF evals: 882
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I39 Branch 132 IFNULL L1035 - false: 223,0,0| Number of FF evals: 710
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - true: 290,0,0| Number of FF evals: 192
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: I5 Branch 248 IF_ICMPNE L2323 - false: 13603,9339,0| Number of FF evals: 11725
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I9 Branch 117 IF_ICMPNE L925 - false: 2002,1459,0| Number of FF evals: 6123
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - true: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: Line 2367: 4646,0,0| Number of FF evals: 1304
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.hasNext()Z: I5 Branch 299 IFNULL L1365 - false: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I4 Branch 99 IFNONNULL L778 - false: 386,0,0| Number of FF evals: 600
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I44 Branch 52 IF_ICMPGE L482 - true: 28,0,0| Number of FF evals: 321
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: I5 Branch 232 IF_ICMPNE L2259 - false: 4059,2336,0| Number of FF evals: 3943
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVar()Z: Line 2435: 290,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 232: 120,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: Line 2335: 501,0,0| Number of FF evals: 266
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(Lcom/google/javascript/rhino/Node$SideEffectFlags;)V: Line 2036: 6173,5459,0| Number of FF evals: 11017
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 4 TABLESWITCH L114 Case 32 - true: 615,364,9| Number of FF evals: 5956
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - true: 655,241,0| Number of FF evals: 2272
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 13 TABLESWITCH L114 Case 41 - true: 1502,1247,14| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: Line 2439: 622,0,0| Number of FF evals: 280
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I170 Branch 182 IFEQ L1558 - false: 1335,921,52| Number of FF evals: 8448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I162 Branch 127 LOOKUPSWITCH L987 Default-Case - false: 3834,3488,829| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - true: 30757,25151,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I94 Branch 54 IFNONNULL L488 - false: 4,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I133 Branch 178 IF_ICMPNE L1547 - false: 655,433,11| Number of FF evals: 6788
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeTypeAwareEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 163 IFNULL L1480 - false: 9655,7037,0| Number of FF evals: 6003
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.iterator()Ljava/util/Iterator;: I4 Branch 290 IFNE L1278 - false: 19332,13726,0| Number of FF evals: 4535
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: I5 Branch 257 IF_ICMPNE L2359 - false: 3164,1329,0| Number of FF evals: 4083
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isGetElem()Z: Line 2315: 2988,0,0| Number of FF evals: 901
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: Line 2211: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - false: 597,0,0| Number of FF evals: 472
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - true: 3224,2851,488| Number of FF evals: 13453
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSourceEncodedPositionForTree(I)V: I13 Branch 138 IFNULL L1183 - false: 401,0,0| Number of FF evals: 1009
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: Line 1505: 205,0,0| Number of FF evals: 130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: Line 1370: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 54680,49074,0| Number of FF evals: 13445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: I4 Branch 150 IFNULL L1403 - true: 290,0,0| Number of FF evals: 249
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: Line 2339: 885,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I33 Branch 157 IFNONNULL L1453 - false: 169,0,0| Number of FF evals: 833
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: Line 2223: 1610,0,0| Number of FF evals: 586
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1094: 385,0,0| Number of FF evals: 207
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: Line 1095: 385,0,0| Number of FF evals: 207
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - false: 1305,0,0| Number of FF evals: 1114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - true: 15454,12853,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: Line 2407: 290,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 17 TABLESWITCH L114 Case 45 - true: 1582,1255,3| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 78 IF_ACMPNE L646 - false: 7161,4560,0| Number of FF evals: 3898
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: root-Branch: 2988,0,0| Number of FF evals: 1353
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDelProp()Z: I5 Branch 238 IF_ICMPNE L2283 - false: 18096,16610,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: Line 1144: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: I7 Branch 153 IFNULL L1416 - true: 44,0,0| Number of FF evals: 371
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVarArgs()Z: root-Branch: 205,0,0| Number of FF evals: 516
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - false: 2715,1962,0| Number of FF evals: 4698
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I41 Branch 205 IF_ACMPNE L1689 - true: 8133,7380,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: Line 2291: 3543,0,0| Number of FF evals: 1044
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - true: 205,0,0| Number of FF evals: 551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I7 Branch 75 IF_ACMPNE L640 - false: 1199,0,0| Number of FF evals: 974
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isArrayLit()Z: I5 Branch 224 IF_ICMPNE L2227 - false: 1198,605,0| Number of FF evals: 9324
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - true: 15293,12722,4| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateArguments()Z: I7 Branch 219 IFNE L2161 - true: 3879,3054,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - true: 24772,19166,0| Number of FF evals: 8544
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - true: 1189,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 76 IFNONNULL L642 - false: 1189,0,0| Number of FF evals: 969
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: I4 Branch 291 IFNULL L1294 - false: 19332,13726,0| Number of FF evals: 4535
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: Line 2243: 205,0,0| Number of FF evals: 130
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I31 Branch 77 IFNONNULL L644 - false: 6997,4426,0| Number of FF evals: 3898
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: root-Branch: 1452,0,0| Number of FF evals: 784
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - false: 30757,25151,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - true: 2451,0,0| Number of FF evals: 1205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - true: 1018,0,0| Number of FF evals: 777
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: Line 349: 54680,49074,33012| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: I4 Branch 292 IFNONNULL L1299 - true: 19332,13726,0| Number of FF evals: 4535
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2031: 1080,359,0| Number of FF evals: 2554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: root-Branch: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: I5 Branch 222 IF_ICMPNE L2219 - false: 13159,10688,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I30 Branch 39 IFNONNULL L401 - true: 121,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: root-Branch: 1610,0,0| Number of FF evals: 605
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - false: 2760,1776,0| Number of FF evals: 8653
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - true: 501,0,0| Number of FF evals: 467
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentToTyped(Lcom/google/javascript/rhino/Node;)Z: root-Branch: 205,0,0| Number of FF evals: 718
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - false: 27,0,0| Number of FF evals: 267
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: Line 2032: 1080,359,0| Number of FF evals: 2554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFor()Z: I5 Branch 243 IF_ICMPNE L2303 - true: 44,0,0| Number of FF evals: 1010
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 80 IFNULL L669 - true: 161,0,0| Number of FF evals: 1662
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I42 Branch 67 IFNONNULL L601 - true: 77,0,0| Number of FF evals: 192
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 781: 386,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInc()Z: I5 Branch 251 IF_ICMPNE L2335 - false: 1736,797,0| Number of FF evals: 5363
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 778: 290,0,0| Number of FF evals: 179
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - true: 1301,0,0| Number of FF evals: 970
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.clonePropsFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 780: 386,0,0| Number of FF evals: 268
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 14 TABLESWITCH L114 Case 42 - true: 1164,909,13| Number of FF evals: 8351
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - false: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setDirectives(Ljava/util/Set;)V: root-Branch: 385,0,0| Number of FF evals: 206
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: Line 2411: 290,0,0| Number of FF evals: 172
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 47 IFNONNULL L423 - true: 230,0,0| Number of FF evals: 611
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - true: 501,0,0| Number of FF evals: 599
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.getIntValue()I: root-Branch: 54680,49074,0| Number of FF evals: 13445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - false: 181,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.next()Lcom/google/javascript/rhino/Node;: I4 Branch 300 IFNE L1370 - true: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I85 Branch 50 IFNONNULL L426 - true: 10085,9316,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: Line 2419: 1932,0,0| Number of FF evals: 640
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChild(Lcom/google/javascript/rhino/Node;)Z: Line 1416: 44,0,0| Number of FF evals: 54
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: I5 Branch 279 IF_ICMPNE L2447 - false: 9354,6856,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 197 LOOKUPSWITCH L1616 Default-Case - false: 838,128,0| Number of FF evals: 1736
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 252: 120,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: I5 Branch 275 IF_ICMPNE L2431 - false: 13405,10464,0| Number of FF evals: 8496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: Line 253: 120,0,0| Number of FF evals: 79
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I9 Branch 149 IF_ACMPNE L1393 - true: 276,0,0| Number of FF evals: 740
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: Line 1311: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - true: 501,0,0| Number of FF evals: 551
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.children()Ljava/lang/Iterable;: I4 Branch 144 IFNONNULL L1241 - true: 73,0,0| Number of FF evals: 259
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - true: 120,0,0| Number of FF evals: 119
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 16 TABLESWITCH L114 Case 44 - true: 1096,813,0| Number of FF evals: 9627
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1832: 3162,0,0| Number of FF evals: 1151
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: Line 1036: 315,0,0| Number of FF evals: 774
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 7 TABLESWITCH L114 Case 35 - true: 1550,1295,10| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: Line 2279: 1156,0,0| Number of FF evals: 474
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - true: 161,0,0| Number of FF evals: 1584
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 84 IFNULL L676 - false: 445,164,0| Number of FF evals: 1843
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: Line 2135: 290,0,0| Number of FF evals: 180
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: I5 Branch 268 IF_ICMPNE L2403 - false: 185,0,0| Number of FF evals: 153
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 25 TABLESWITCH L114 Case 53 - true: 123,0,0| Number of FF evals: 527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - true: 12950,10394,0| Number of FF evals: 6813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 670: 49,0,0| Number of FF evals: 407
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - false: 1296,556,0| Number of FF evals: 2964
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addSuppression(Ljava/lang/String;)V: I4 Branch 216 IFNONNULL L1974 - true: 505,0,0| Number of FF evals: 872
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 672: 40,0,0| Number of FF evals: 915
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAssignAdd()Z: Line 2235: 885,0,0| Number of FF evals: 400
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I43 Branch 120 IFNULL L961 - false: 1863,1540,203| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I23 Branch 295 IFEQ L2204 - false: 5494,2938,0| Number of FF evals: 4074
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.remove()V: root-Branch: 54680,49074,0| Number of FF evals: 13445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I27 Branch 207 IFNULL L1724 - true: 290,0,0| Number of FF evals: 705
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - false: 1695,1170,0| Number of FF evals: 6826
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: I5 Branch 234 IF_ICMPNE L2267 - false: 18824,14814,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: I5 Branch 115 IF_ICMPNE L912 - false: 2283,1055,0| Number of FF evals: 4080
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - false: 10965,9557,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I37 Branch 188 IFNONNULL L1582 - true: 3359,2834,0| Number of FF evals: 13450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1895: 501,0,0| Number of FF evals: 255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: Line 1894: 501,0,0| Number of FF evals: 255
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.hashCode()I: root-Branch: 54680,49074,0| Number of FF evals: 13445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - false: 1629,1407,44| Number of FF evals: 13386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 692: 161,0,0| Number of FF evals: 1212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: I5 Branch 266 IF_ICMPNE L2395 - true: 885,0,0| Number of FF evals: 751
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable.iterator()Ljava/util/Iterator;: Line 1362: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I18 Branch 51 IFEQ L478 - false: 22,0,0| Number of FF evals: 489
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I74 Branch 49 IFNONNULL L425 - true: 343,0,0| Number of FF evals: 788
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I4 Branch 196 LOOKUPSWITCH L1616 Case 38 - true: 505,55,0| Number of FF evals: 1735
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I19 Branch 214 IFNONNULL L1813 - true: 432,87,0| Number of FF evals: 1578
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChangeTime()I: Line 1899: 44,0,0| Number of FF evals: 55
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: Line 2343: 44,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isString()Z: Line 2403: 120,0,0| Number of FF evals: 95
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - false: 842,229,0| Number of FF evals: 2852
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I142 Branch 179 IF_ICMPEQ L1548 - true: 655,433,11| Number of FF evals: 6787
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 675: 161,0,0| Number of FF evals: 1212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - false: 4646,0,0| Number of FF evals: 1294
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 676: 161,0,0| Number of FF evals: 1212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I20 Branch 59 IF_ACMPEQ L555 - true: 164,0,0| Number of FF evals: 438
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 601: 27,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 604: 27,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: Line 344: 34119,28513,0| Number of FF evals: 8127
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - false: 14801,13462,0| Number of FF evals: 8850
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: I12 Branch 62 IFNULL L576 - true: 5680,657,0| Number of FF evals: 2014
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: I5 Branch 255 IF_ICMPNE L2351 - true: 622,0,0| Number of FF evals: 490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: root-Branch: 622,0,0| Number of FF evals: 376
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 24 TABLESWITCH L114 Case 52 - true: 527,160,0| Number of FF evals: 2504
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: Line 2379: 120,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 729: 3272,2660,0| Number of FF evals: 13450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.areBitFlagsSet(II)Z: I6 Branch 221 IF_ICMPNE L2174 - false: 3639,2832,0| Number of FF evals: 13176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 598: 27,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 731: 3443,2859,2| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 597: 27,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 600: 27,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWith()Z: Line 2447: 1301,0,0| Number of FF evals: 511
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: Line 599: 27,0,0| Number of FF evals: 67
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 734: 3443,2859,2| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: root-Branch: 48013,42407,0| Number of FF evals: 11677
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 735: 3443,2859,2| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isReturn()Z: I5 Branch 265 IF_ICMPNE L2391 - false: 851,0,0| Number of FF evals: 1449
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 736: 3443,2859,2| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBlock()Z: I5 Branch 227 IF_ICMPNE L2239 - false: 2698,1457,0| Number of FF evals: 4066
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 15 TABLESWITCH L114 Case 43 - true: 1609,1354,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - true: 4646,0,0| Number of FF evals: 1496
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I32 Branch 119 IF_ICMPNE L956 - false: 1420,1097,155| Number of FF evals: 10711
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 6 TABLESWITCH L114 Case 34 - true: 1811,1556,7| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNull()Z: I5 Branch 259 IF_ICMPNE L2367 - false: 8567,3670,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I8 Branch 37 IFNONNULL L399 - true: 160,0,0| Number of FF evals: 540
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isParamList()Z: Line 2383: 2631,0,0| Number of FF evals: 826
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I86 Branch 86 IFNULL L685 - false: 5275,4752,0| Number of FF evals: 12383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: Line 2202: 205,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - false: 16439,15596,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - true: 13661,13393,138| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - false: 5095,3793,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: I5 Branch 278 IF_ICMPNE L2443 - true: 205,0,0| Number of FF evals: 749
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasMoreThanOneChild()Z: Line 1403: 290,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabel()Z: I5 Branch 253 IF_ICMPNE L2343 - true: 44,0,0| Number of FF evals: 469
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: I4 Branch 199 IFNULL L1634 - false: 250,0,0| Number of FF evals: 341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: root-Branch: 885,0,0| Number of FF evals: 554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getNext()Lcom/google/javascript/rhino/Node;: Line 546: 205,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQuotedString()Z: Line 2181: 1018,0,0| Number of FF evals: 405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - true: 625,349,0| Number of FF evals: 3405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 8 TABLESWITCH L114 Case 36 - true: 765,510,0| Number of FF evals: 7144
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I62 Branch 189 IF_ICMPNE L1586 - false: 2370,1766,0| Number of FF evals: 9405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.next()Lcom/google/javascript/rhino/Node;: Line 1299: 19332,13726,0| Number of FF evals: 4485
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - true: 2988,0,0| Number of FF evals: 1229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setString(Ljava/lang/String;)V: I4 Branch 286 IF_ACMPNE L223 - false: 3862,1632,1420| Number of FF evals: 2043
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - true: 120,0,0| Number of FF evals: 365
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - true: 6732,1126,0| Number of FF evals: 2352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isObjectLit()Z: I5 Branch 261 IF_ICMPNE L2375 - false: 8025,7092,0| Number of FF evals: 4637
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 565: 4834,0,0| Number of FF evals: 1348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDouble()D: I5 Branch 113 IF_ICMPNE L889 - false: 539,0,0| Number of FF evals: 1207
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTry()Z: I5 Branch 274 IF_ICMPNE L2427 - false: 1108,376,0| Number of FF evals: 2641
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: Line 570: 6559,1359,0| Number of FF evals: 2437
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - true: 781,0,0| Number of FF evals: 664
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I24 Branch 168 IFEQ L1523 - false: 9,0,0| Number of FF evals: 435
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1582: 828,563,0| Number of FF evals: 3571
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: Line 1579: 2467,2174,0| Number of FF evals: 9114
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 633: 2988,0,0| Number of FF evals: 905
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 174: 501,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToBack(Lcom/google/javascript/rhino/Node;)V: Line 634: 3654,0,0| Number of FF evals: 1212
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1944: 205,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: Line 2255: 5606,0,0| Number of FF evals: 1502
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: Line 173: 501,0,0| Number of FF evals: 245
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - false: 6498,4995,0| Number of FF evals: 6685
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - true: 4602,4087,0| Number of FF evals: 12383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isName()Z: Line 2351: 622,0,0| Number of FF evals: 285
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I73 Branch 85 IF_ACMPNE L680 - false: 296,0,0| Number of FF evals: 778
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLineno(I)V: I9 Branch 137 IF_ICMPNE L1165 - false: 622,0,0| Number of FF evals: 616
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 30 TABLESWITCH L114 Default-Case - true: 92,0,0| Number of FF evals: 339
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I63 Branch 42 IFNONNULL L404 - true: 9437,8501,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOr()Z: I5 Branch 262 IF_ICMPNE L2379 - true: 120,0,0| Number of FF evals: 348
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - true: 8425,7580,3086| Number of FF evals: 13294
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - false: 14925,13124,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - true: 120,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I5 Branch 217 IF_ICMPEQ L2026 - true: 856,259,0| Number of FF evals: 2556
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - true: 3728,0,0| Number of FF evals: 1228
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I38 Branch 208 IFNONNULL L1727 - true: 1023,434,0| Number of FF evals: 2525
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I52 Branch 41 IFNONNULL L403 - true: 884,0,0| Number of FF evals: 1475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getExistingIntProp(I)I: I9 Branch 107 IFNONNULL L838 - true: 2945,1669,0| Number of FF evals: 4201
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: I5 Branch 254 IF_ICMPNE L2347 - true: 622,0,0| Number of FF evals: 575
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: I5 Branch 244 IF_ICMPNE L2307 - false: 7657,4246,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.<init>(Lcom/google/javascript/rhino/Node$AncestorIterable;)V: root-Branch: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$ObjectPropListItem.toString()Ljava/lang/String;: Line 317: 54680,49074,33039| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildBefore(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I3 Branch 74 IFNULL L640 - true: 1311,0,0| Number of FF evals: 987
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;)V: I9 Branch 284 IF_ACMPNE L194 - false: 296,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1684: 998,245,0| Number of FF evals: 1804
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.setQuotedString()V: root-Branch: 120,0,0| Number of FF evals: 177
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I19 Branch 44 IFNONNULL L420 - true: 10284,9470,154| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - false: 51,0,0| Number of FF evals: 404
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.copyInformationFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 211 IFNULL L1764 - false: 111,0,0| Number of FF evals: 343
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - false: 2292,2024,104| Number of FF evals: 13331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isRegExp()Z: I5 Branch 264 IF_ICMPNE L2387 - false: 1786,639,0| Number of FF evals: 2608
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I15 Branch 288 IFLE L232 - true: 74,0,0| Number of FF evals: 278
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I100 Branch 176 IF_ICMPEQ L1537 - true: 2130,1862,102| Number of FF evals: 12432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIn()Z: I5 Branch 250 IF_ICMPNE L2331 - false: 7613,6738,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I150 Branch 180 IFEQ L1553 - true: 9,0,0| Number of FF evals: 711
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I43 Branch 283 IFNE L179 - false: 1753,908,253| Number of FF evals: 3027
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isWhile()Z: Line 2443: 205,0,0| Number of FF evals: 138
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1694: 2715,1962,0| Number of FF evals: 4674
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 23 TABLESWITCH L114 Case 51 - false: 32,0,0| Number of FF evals: 517
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - true: 205,0,0| Number of FF evals: 257
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1692: 2715,1962,0| Number of FF evals: 4674
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I54 Branch 53 IF_ACMPEQ L483 - false: 4,0,0| Number of FF evals: 229
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1693: 2715,1962,0| Number of FF evals: 4674
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 190 LOOKUPSWITCH L1598 Case 33 - true: 647,427,0| Number of FF evals: 3877
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: Line 1943: 205,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1687: 2715,1962,0| Number of FF evals: 4674
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I4 Branch 293 IFEQ L2202 - false: 5365,4548,0| Number of FF evals: 6813
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1688: 2715,1962,0| Number of FF evals: 4674
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1689: 2715,1962,0| Number of FF evals: 4674
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: Line 2287: 44,0,0| Number of FF evals: 62
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTypeOf()Z: Line 2431: 501,0,0| Number of FF evals: 237
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isContinue()Z: Line 2267: 2451,0,0| Number of FF evals: 781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1019: 4491,3696,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeImpl()Ljava/lang/String;: Line 1018: 4491,3696,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I26 Branch 83 IFNONNULL L671 - false: 40,0,0| Number of FF evals: 1351
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I73 Branch 173 IF_ICMPEQ L1533 - true: 9,0,0| Number of FF evals: 338
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAdd()Z: Line 2219: 1018,0,0| Number of FF evals: 436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFrom(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 213 IFNONNULL L1809 - true: 12368,11980,14| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I11 Branch 166 IF_ICMPNE L1517 - false: 23,0,0| Number of FF evals: 1071
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.<init>(Lcom/google/javascript/rhino/Node;)V: Line 1858: 885,0,0| Number of FF evals: 390
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - true: 44,0,0| Number of FF evals: 409
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setChangeTime(I)V: root-Branch: 501,0,0| Number of FF evals: 358
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - true: 998,245,0| Number of FF evals: 1847
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I17 Branch 204 IFNULL L1684 - false: 2576,1823,0| Number of FF evals: 4698
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.chain(Lcom/google/javascript/rhino/Node$PropListItem;)Lcom/google/javascript/rhino/Node$PropListItem;: Line 354: 48013,42407,0| Number of FF evals: 11677
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: I7 Branch 202 IFNULL L1671 - false: 163,0,0| Number of FF evals: 205
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setSideEffectFlags(I)V: I9 Branch 218 IF_ICMPNE L2026 - false: 5049,4432,0| Number of FF evals: 11022
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getPropListHeadForTesting()Lcom/google/javascript/rhino/Node$PropListItem;: Line 1319: 54680,49074,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1646: 1610,0,0| Number of FF evals: 567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - true: 933,711,26| Number of FF evals: 9391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1647: 1610,0,0| Number of FF evals: 567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: I9 Branch 155 IFNULL L1430 - false: 3905,0,0| Number of FF evals: 1303
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - true: 1610,0,0| Number of FF evals: 721
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - true: 6536,1336,0| Number of FF evals: 2444
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getCharno()I: root-Branch: 622,0,0| Number of FF evals: 889
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildAtIndex(I)Lcom/google/javascript/rhino/Node;: I8 Branch 61 IFLE L566 - false: 4834,0,0| Number of FF evals: 1436
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 9 TABLESWITCH L114 Case 37 - true: 32,0,0| Number of FF evals: 85
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I61 Branch 172 IF_ICMPEQ L1530 - false: 1514,1292,94| Number of FF evals: 13386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: root-Branch: 205,0,0| Number of FF evals: 240
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isAnd()Z: I5 Branch 223 IF_ICMPNE L2223 - false: 8132,4765,0| Number of FF evals: 4967
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1986: 622,0,0| Number of FF evals: 320
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setWasEmptyNode(Z)V: Line 1985: 622,0,0| Number of FF evals: 320
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: Line 2423: 1610,0,0| Number of FF evals: 566
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVarArgs()Z: Line 1917: 205,0,0| Number of FF evals: 145
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: Line 1650: 1610,0,0| Number of FF evals: 567
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - true: 44,0,0| Number of FF evals: 442
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: root-Branch: 14662,9056,0| Number of FF evals: 3475
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: I5 Branch 260 IF_ICMPNE L2371 - false: 164,0,0| Number of FF evals: 195
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - true: 2809,0,0| Number of FF evals: 1154
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - true: 622,0,0| Number of FF evals: 395
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - false: 3506,2981,0| Number of FF evals: 13450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I29 Branch 281 IFNE L177 - true: 556,0,0| Number of FF evals: 1015
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: I4 Branch 148 IFNULL L1393 - false: 798,0,0| Number of FF evals: 571
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I15 Branch 186 IFLE L1579 - true: 3506,2981,0| Number of FF evals: 13450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I15 Branch 69 IFNONNULL L608 - true: 9746,8431,262| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1635: 250,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - false: 5225,2046,0| Number of FF evals: 4432
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachFromParent()Lcom/google/javascript/rhino/Node;: Line 1636: 250,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCase()Z: I5 Branch 230 IF_ICMPNE L2251 - true: 2100,0,0| Number of FF evals: 931
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getInputId()Lcom/google/javascript/rhino/InputId;: root-Branch: 205,0,0| Number of FF evals: 341
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - false: 1610,0,0| Number of FF evals: 579
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - false: 997,245,0| Number of FF evals: 1872
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I20 Branch 147 IFLE L1334 - true: 1887,0,0| Number of FF evals: 1498
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I25 Branch 297 IFNONNULL L1867 - false: 5986,380,0| Number of FF evals: 1645
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I35 Branch 158 IFNULL L1453 - false: 625,360,0| Number of FF evals: 3405
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeFirstChild()Lcom/google/javascript/rhino/Node;: I8 Branch 200 IFNULL L1647 - true: 1815,0,0| Number of FF evals: 773
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 46 IFNONNULL L422 - true: 10131,9356,40| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - false: 1018,0,0| Number of FF evals: 534
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildAfter(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 203 IF_ACMPNE L1682 - true: 34,0,0| Number of FF evals: 206
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNot()Z: I5 Branch 258 IF_ICMPNE L2363 - false: 15699,11537,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - false: 161,0,0| Number of FF evals: 450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I4 Branch 79 IFNONNULL L660 - true: 7757,5427,0| Number of FF evals: 7063
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourcePosition()I: Line 1160: 1610,0,0| Number of FF evals: 580
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNumber()Z: Line 2371: 44,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesThisCall()Z: Line 2124: 1452,0,0| Number of FF evals: 531
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I163 Branch 181 IFNULL L1556 - false: 655,241,0| Number of FF evals: 2297
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - true: 443,183,18| Number of FF evals: 2934
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I27 Branch 187 IF_ICMPNE L1580 - false: 946,421,0| Number of FF evals: 3445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I48 Branch 121 IF_ICMPEQ L961 - false: 443,183,18| Number of FF evals: 2934
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I9 Branch 87 IFNONNULL L699 - true: 303,0,0| Number of FF evals: 430
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - false: 2760,0,0| Number of FF evals: 1006
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceFileName()Ljava/lang/String;: I8 Branch 133 IFNONNULL L1104 - true: 641,0,0| Number of FF evals: 1517
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildrenToFront(Lcom/google/javascript/rhino/Node;)V: I11 Branch 72 IFNONNULL L621 - true: 594,0,0| Number of FF evals: 941
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isThrow()Z: I5 Branch 272 IF_ICMPNE L2419 - true: 1932,0,0| Number of FF evals: 714
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - true: 13564,11492,1| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: Line 1966: 290,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 96 IF_ACMPNE L754 - false: 13564,11492,1| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 22 TABLESWITCH L114 Case 50 - true: 1853,1526,69| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I121 Branch 177 IF_ICMPEQ L1544 - false: 2348,2080,103| Number of FF evals: 13331
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I10 Branch 194 IFLE L1600 - false: 13661,13393,138| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isScript()Z: Line 2395: 885,0,0| Number of FF evals: 385
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I41 Branch 40 IFNONNULL L402 - true: 9464,8528,27| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1679: 44,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1678: 44,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1677: 44,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLength()I: root-Branch: 120,0,0| Number of FF evals: 565
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: Line 2076: 205,0,0| Number of FF evals: 146
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.detachChildren()V: Line 1671: 44,0,0| Number of FF evals: 58
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I40 Branch 170 IF_ICMPEQ L1527 - true: 933,711,26| Number of FF evals: 9391
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 531: 120,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: Line 530: 120,0,0| Number of FF evals: 103
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - true: 290,0,0| Number of FF evals: 533
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isSwitch()Z: I5 Branch 270 IF_ICMPNE L2411 - false: 12224,10834,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I8 Branch 135 IFNONNULL L1149 - true: 7405,6440,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - false: 680,175,0| Number of FF evals: 2555
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isLabelName()Z: Line 2347: 622,0,0| Number of FF evals: 311
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: root-Branch: 290,0,0| Number of FF evals: 178
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 192 LOOKUPSWITCH L1598 Case 42 - true: 1661,1302,0| Number of FF evals: 6721
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toStringTreeHelper(Lcom/google/javascript/rhino/Node;ILjava/lang/Appendable;)V: I7 Branch 131 IF_ICMPEQ L1029 - false: 235,0,0| Number of FF evals: 713
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getBooleanProp(I)Z: I5 Branch 105 IFEQ L821 - false: 3157,2095,0| Number of FF evals: 3928
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.srcrefTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: Line 1801: 205,0,0| Number of FF evals: 133
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getQualifiedName()Ljava/lang/String;: I5 Branch 185 IF_ICMPNE L1577 - false: 1242,745,0| Number of FF evals: 4491
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1128: 120,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFromExterns()Z: Line 1127: 120,0,0| Number of FF evals: 99
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - true: 5,0,0| Number of FF evals: 176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I29 Branch 60 IFNONNULL L557 - true: 3025,2520,0| Number of FF evals: 12000
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 28 TABLESWITCH L114 Case 56 - true: 914,647,6| Number of FF evals: 9220
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - true: 205,0,0| Number of FF evals: 416
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I123 Branch 55 IFNONNULL L491 - false: 20,0,0| Number of FF evals: 485
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - false: 6176,5726,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 10 TABLESWITCH L114 Case 38 - true: 116,0,0| Number of FF evals: 527
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1137: 290,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - true: 1646,1517,192| Number of FF evals: 11340
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: Line 1136: 290,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isUnscopedQualifiedName()Z: I10 Branch 198 IFLE L1618 - true: 6176,5726,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 2 TABLESWITCH L114 Case 30 - true: 307,56,8| Number of FF evals: 1965
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I173 Branch 183 IFNE L1558 - false: 680,551,21| Number of FF evals: 6401
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.<init>(ILjava/lang/String;II)V: I11 Branch 285 IF_ACMPNE L202 - false: 52,0,0| Number of FF evals: 199
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getChildBefore(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I5 Branch 58 IF_ACMPNE L550 - false: 82,0,0| Number of FF evals: 490
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 757: 13564,11492,1| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I32 Branch 35 IFNONNULL L383 - true: 14,0,0| Number of FF evals: 128
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getIntValue()I: Line 339: 14662,9056,0| Number of FF evals: 3435
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 21 TABLESWITCH L114 Case 49 - true: 1185,858,30| Number of FF evals: 10827
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 754: 13564,11492,1| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 759: 13564,11492,1| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 758: 13564,11492,1| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - false: 7196,5366,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToBack(Lcom/google/javascript/rhino/Node;)V: I4 Branch 68 IFNONNULL L607 - true: 562,0,0| Number of FF evals: 664
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 748: 3321,1249,0| Number of FF evals: 2513
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 753: 13564,11492,1| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - true: 6732,1126,0| Number of FF evals: 2352
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 752: 13564,11492,1| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDefaultCase()Z: I5 Branch 237 IF_ICMPNE L2279 - true: 1156,0,0| Number of FF evals: 900
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 751: 3321,1249,0| Number of FF evals: 2513
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 750: 3321,1249,0| Number of FF evals: 2513
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - true: 15,0,0| Number of FF evals: 422
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.mayMutateGlobalStateOrThrow()Z: I7 Branch 220 IFNE L2166 - true: 14585,13625,0| Number of FF evals: 13176
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 739: 385,0,0| Number of FF evals: 211
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$FileLevelJsDocBuilder.append(Ljava/lang/String;)V: I9 Branch 296 IFNONNULL L1861 - false: 5986,380,0| Number of FF evals: 1645
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDebugger()Z: Line 2271: 1452,0,0| Number of FF evals: 542
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 744: 3273,1201,0| Number of FF evals: 2468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 742: 3273,1201,0| Number of FF evals: 2468
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1710: 9023,8093,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getLength()I: Line 1132: 120,0,0| Number of FF evals: 91
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneNode()Lcom/google/javascript/rhino/Node;: Line 1711: 9023,8093,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I44 Branch 36 IFNONNULL L385 - true: 8994,7975,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SiblingNodeIterable.hasNext()Z: Line 1294: 19332,13726,0| Number of FF evals: 4485
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I20 Branch 34 IFNONNULL L381 - true: 9050,8016,41| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 660: 1018,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.cloneTree()Lcom/google/javascript/rhino/Node;: I12 Branch 206 IFNULL L1721 - false: 286,0,0| Number of FF evals: 707
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 662: 1018,0,0| Number of FF evals: 431
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildAfter(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: Line 663: 6780,4450,1| Number of FF evals: 4837
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isIf()Z: I5 Branch 249 IF_ICMPNE L2327 - false: 300,0,0| Number of FF evals: 600
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(I[Lcom/google/javascript/rhino/Node;)V: I146 Branch 56 IF_ACMPEQ L494 - false: 16008,14393,41| Number of FF evals: 13359
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: Line 2247: 385,0,0| Number of FF evals: 202
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setIsSyntheticBlock(Z)V: root-Branch: 205,0,0| Number of FF evals: 302
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - true: 5715,4484,774| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - true: 622,0,0| Number of FF evals: 937
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I210 Branch 130 IFNULL L1000 - false: 1484,253,75| Number of FF evals: 1967
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I20 Branch 32 IFNONNULL L367 - true: 10615,9520,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - false: 13185,11939,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isHook()Z: Line 2323: 3543,0,0| Number of FF evals: 1015
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - false: 6228,5829,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - false: 385,0,0| Number of FF evals: 383
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isQualifiedName()Z: I4 Branch 191 LOOKUPSWITCH L1598 Case 38 - true: 174,0,0| Number of FF evals: 655
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 575: 4646,0,0| Number of FF evals: 1274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isDo()Z: I5 Branch 239 IF_ICMPNE L2287 - true: 44,0,0| Number of FF evals: 513
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIndexOfChild(Lcom/google/javascript/rhino/Node;)I: Line 574: 4646,0,0| Number of FF evals: 1274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - true: 3443,2859,2| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getAncestor(I)Lcom/google/javascript/rhino/Node;: I3 Branch 145 IFLT L1332 - true: 696,0,0| Number of FF evals: 477
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isVoid()Z: I5 Branch 277 IF_ICMPNE L2439 - false: 10106,8092,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isComma()Z: I5 Branch 233 IF_ICMPNE L2263 - true: 622,0,0| Number of FF evals: 746
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getString()Ljava/lang/String;: Line 912: 501,0,0| Number of FF evals: 250
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - true: 290,0,0| Number of FF evals: 345
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1430: 3728,0,0| Number of FF evals: 1080
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEquals(Lcom/google/javascript/rhino/Node;)Ljava/lang/String;: Line 1429: 3728,0,0| Number of FF evals: 1080
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - true: 205,0,0| Number of FF evals: 160
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - false: 493,0,0| Number of FF evals: 406
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$SideEffectFlags.areAllFlagsSet()Z: I4 Branch 298 IFNE L2076 - false: 392,0,0| Number of FF evals: 355
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I77 Branch 174 IF_ICMPNE L1533 - false: 1351,1132,24| Number of FF evals: 12487
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCatch()Z: Line 2259: 205,0,0| Number of FF evals: 147
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - true: 285,0,0| Number of FF evals: 386
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChild(Lcom/google/javascript/rhino/Node;)V: I29 Branch 88 IF_ACMPNE L704 - false: 161,0,0| Number of FF evals: 450
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isStringKey()Z: I5 Branch 269 IF_ICMPNE L2407 - false: 7331,6270,0| Number of FF evals: 9689
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCall()Z: I5 Branch 229 IF_ICMPNE L2247 - true: 385,0,0| Number of FF evals: 252
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - true: 3543,0,0| Number of FF evals: 1366
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - false: 2261,358,0| Number of FF evals: 4569
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isInstanceOf()Z: I5 Branch 252 IF_ICMPNE L2339 - true: 885,0,0| Number of FF evals: 797
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEmpty()Z: I5 Branch 240 IF_ICMPNE L2291 - false: 15501,10904,0| Number of FF evals: 12100
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setType(I)V: root-Branch: 120,0,0| Number of FF evals: 367
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - true: 3162,0,0| Number of FF evals: 1286
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - false: 7405,6418,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I69 Branch 92 IF_ACMPNE L731 - false: 3443,2859,2| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: Line 244: 44,0,0| Number of FF evals: 57
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isFunction()Z: Line 2307: 2988,0,0| Number of FF evals: 925
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - false: 17234,11628,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getSourceOffset()I: I22 Branch 136 IF_ICMPNE L1153 - true: 7405,6418,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setStaticSourceFile(Lcom/google/javascript/rhino/jstype/StaticSourceFile;)V: root-Branch: 385,0,0| Number of FF evals: 583
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - true: 17125,15517,2| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isNew()Z: Line 2359: 290,0,0| Number of FF evals: 187
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isCast()Z: I5 Branch 231 IF_ICMPNE L2255 - true: 5606,0,0| Number of FF evals: 1876
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.useSourceInfoIfMissingFromForTree(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node;: I14 Branch 215 IFNULL L1828 - false: 4493,275,0| Number of FF evals: 1632
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.toString(Ljava/lang/StringBuilder;ZZZ)V: I200 Branch 129 IFNULL L998 - false: 1484,253,75| Number of FF evals: 1967
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - false: 7566,5243,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 11 TABLESWITCH L114 Case 39 - true: 1184,929,18| Number of FF evals: 10971
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I15 Branch 66 IFNONNULL L597 - false: 27,0,0| Number of FF evals: 274
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - false: 27,0,0| Number of FF evals: 273
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 1 TABLESWITCH L114 Case 29 - true: 126,0,0| Number of FF evals: 554
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 168: 290,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isOnlyModifiesArgumentsCall()Z: root-Branch: 290,0,0| Number of FF evals: 315
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - false: 10655,9994,0| Number of FF evals: 10648
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.getObjectValue()Ljava/lang/Object;: root-Branch: 34119,28513,0| Number of FF evals: 8127
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NumberNode.setDouble(D)V: Line 167: 290,0,0| Number of FF evals: 166
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isEquivalentTo(Lcom/google/javascript/rhino/Node;ZZZ)Z: I16 Branch 167 IF_ACMPEQ L1517 - true: 23,0,0| Number of FF evals: 1069
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setLength(I)V: root-Branch: 290,0,0| Number of FF evals: 382
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1657: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1658: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.addChildToFront(Lcom/google/javascript/rhino/Node;)V: I4 Branch 65 IFNONNULL L596 - true: 201,0,0| Number of FF evals: 313
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1661: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1662: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.removeChildren()Lcom/google/javascript/rhino/Node;: Line 1663: 622,0,0| Number of FF evals: 323
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isBreak()Z: I5 Branch 228 IF_ICMPNE L2243 - false: 3497,1388,0| Number of FF evals: 3661
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$StringNode.isQuotedString()Z: root-Branch: 44,0,0| Number of FF evals: 107
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 20 TABLESWITCH L114 Case 48 - true: 545,218,0| Number of FF evals: 3998
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$AncestorIterable$1.remove()V: root-Branch: 54680,49074,0| Number of FF evals: 13445
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.propToString(I)Ljava/lang/String;: I3 Branch 29 TABLESWITCH L114 Case 57 - true: 735,468,4| Number of FF evals: 7449
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.isTrue()Z: I5 Branch 273 IF_ICMPNE L2423 - true: 1610,0,0| Number of FF evals: 781
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$NodeMismatch.equals(Ljava/lang/Object;)Z: I17 Branch 294 IFEQ L2204 - true: 5252,4591,0| Number of FF evals: 6732
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.replaceChild(Lcom/google/javascript/rhino/Node;Lcom/google/javascript/rhino/Node;)V: I46 Branch 91 IF_ACMPNE L725 - false: 3268,2691,0| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node$IntPropListItem.toString()Ljava/lang/String;: root-Branch: 54680,49074,33130| Number of FF evals: 13448
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.extractCharno(I)I: I4 Branch 143 IF_ICMPNE L1221 - false: 78,0,0| Number of FF evals: 657
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.checkTreeEqualsImpl(Lcom/google/javascript/rhino/Node;)Lcom/google/javascript/rhino/Node$NodeMismatch;: I39 Branch 159 IFNONNULL L1455 - false: 2193,1917,25| Number of FF evals: 13010
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.<init>(ILcom/google/javascript/rhino/Node;)V: I8 Branch 31 IFNONNULL L365 - true: 231,0,0| Number of FF evals: 669
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasOneChild()Z: Line 1393: 622,0,0| Number of FF evals: 287
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getDirectives()Ljava/util/Set;: root-Branch: 290,0,0| Number of FF evals: 372
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.getIntProp(I)I: I9 Branch 106 IFNONNULL L830 - true: 6397,3868,0| Number of FF evals: 3474
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.setString(Ljava/lang/String;)V: I5 Branch 116 IF_ICMPEQ L925 - true: 4449,3915,0| Number of FF evals: 12004
Number of times BBC is called, activated, and useful for com.google.javascript.rhino.Node.hasChildren()Z: I4 Branch 57 IFNULL L534 - false: 261,0,0| Number of FF evals: 632
* Search finished after 606s and 316 generations, 167076 statements, best individual has fitness: 2918.0
* Minimizing test suite
[MASTER] 13:19:29.621 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 93%
* Total number of goals: 853
* Number of covered goals: 795
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 85%
* Total number of goals: 714
* Number of covered goals: 606
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 105
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 86%
* Total number of goals: 530
* Number of covered goals: 458
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 48%
* Total number of goals: 4536
* Number of covered goals: 2179
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 92%
* Total number of goals: 233
* Number of covered goals: 214
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 91%
* Total number of goals: 233
* Number of covered goals: 212
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 79%
* Total number of goals: 714
* Number of covered goals: 566
* Generated 717 tests with total length 10375
* Resulting test suite's coverage: 76% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 13:20:39.028 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7009% of time used, but only 38/717 tests minimized), falling back to using all assertions
[MASTER] 13:20:57.045 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 11%
* Compiling and checking tests
[MASTER] 13:21:07.608 [logback-1] WARN  TimeController - Phase ASSERTION_GENERATION lasted too long, 10 seconds more than allowed.
[MASTER] 13:21:11.191 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_47_1628256070881/com/google/javascript/rhino/Node_47_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_47_1628256070881/com/google/javascript/rhino/Node_47_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:11.191 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:11.191 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:11.195 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 871
[MASTER] 13:21:11.198 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_47_1628256070881/com/google/javascript/rhino/Node_47_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:10 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_47_tmp__ESTest extends Node_47_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(514, "com.google.javascript.rhino.Node$StringNode");
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(36, Node.QUOTED_PROP);
25:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
26:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
27:       assertEquals(53, Node.INPUT_ID);
28:       assertEquals(55, Node.INFERRED_FUNCTION);
29:       assertEquals(29, Node.JSDOC_INFO_PROP);
30:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
31:       assertEquals(51, Node.STATIC_SOURCE_FILE);
32:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
33:       assertEquals(46, Node.IS_NAMESPACE);
34:       assertEquals(43, Node.IS_CONSTANT_NAME);
35:       assertEquals(47, Node.IS_DISPATCHER);
36:       assertEquals(2, Node.POST_FLAG);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(40, Node.ORIGINALNAME_PROP);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(52, Node.LENGTH);
41:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
42:       assertEquals(54, Node.SLASH_V);
43:       assertEquals(15, Node.NO_SIDE_EFFECTS);
44:       assertEquals(57, Node.LAST_PROP);
45:       assertEquals(8, Node.FLAG_NO_THROWS);
46:       assertEquals(50, Node.FREE_CALL);
47:       assertEquals(1, Node.DECR_FLAG);
48:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
49:       assertEquals(39, Node.EMPTY_BLOCK);
50:       assertEquals(4095, Node.COLUMN_MASK);
51:       assertEquals(32, Node.INCRDECR_PROP);
52:       assertEquals(12, Node.COLUMN_BITS);
53:       assertEquals(56, Node.CHANGE_TIME);
54:       assertEquals(37, Node.OPT_ARG_NAME);
55:       assertEquals(48, Node.DIRECTIVES);
56:       assertEquals(49, Node.DIRECT_EVAL);
57:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isBreak());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isThis());
64:       assertFalse(node0.isComma());
65:       assertFalse(node0.isHook());
66:       assertFalse(node0.isIn());
67:       assertFalse(node0.isWith());
68:       assertFalse(node0.isInstanceOf());
69:       assertFalse(node0.isExprResult());
70:       assertFalse(node0.isDelProp());
71:       assertFalse(node0.isIf());
72:       assertFalse(node0.isNE());
73:       assertFalse(node0.isGetElem());
74:       assertFalse(node0.isAssign());
75:       assertFalse(node0.isTypeOf());
76:       assertFalse(node0.isCast());
77:       assertFalse(node0.isFunction());
78:       assertFalse(node0.isDec());
79:       assertFalse(node0.hasChildren());
80:       assertFalse(node0.isReturn());
81:       assertFalse(node0.isContinue());
82:       assertFalse(node0.isAnd());
83:       assertFalse(node0.isObjectLit());
84:       assertFalse(node0.isNot());
85:       assertFalse(node0.isString());
86:       assertFalse(node0.isDebugger());
87:       assertEquals((-1), node0.getSourcePosition());
88:       assertFalse(node0.isCall());
89:       assertFalse(node0.isName());
90:       assertFalse(node0.isAdd());
91:       assertFalse(node0.isBlock());
92:       assertFalse(node0.isSetterDef());
93:       assertFalse(node0.isNew());
94:       assertFalse(node0.isVar());
95:       assertFalse(node0.isWhile());
96:       assertFalse(node0.isDo());
97:       assertFalse(node0.isRegExp());
98:       assertFalse(node0.isCatch());
99:       assertFalse(node0.hasMoreThanOneChild());
100:       assertEquals(514, node0.getType());
101:       assertFalse(node0.isVoid());
102:       assertFalse(node0.isTrue());
103:       assertFalse(node0.isOr());
104:       assertEquals((-1), node0.getLineno());
105:       assertFalse(node0.isNull());
106:       assertFalse(node0.isLabelName());
107:       assertFalse(node0.isArrayLit());
108:       assertFalse(node0.hasOneChild());
109:       assertFalse(node0.isGetterDef());
110:       assertFalse(node0.isNumber());
111:       assertFalse(node0.isEmpty());
112:       assertFalse(node0.isTry());
113:       assertFalse(node0.isLabel());
114:       assertFalse(node0.isDefaultCase());
115:       assertFalse(node0.isFor());
116:       assertFalse(node0.isAssignAdd());
117:       assertFalse(node0.isCase());
118:       assertEquals(0, node0.getChildCount());
119:       assertFalse(node0.isScript());
120:       assertEquals((-1), node0.getCharno());
121:       assertFalse(node0.isSwitch());
122:       assertFalse(node0.isParamList());
123:       assertFalse(node0.isStringKey());
124:       assertNotNull(node0);
125:       
126:       String string0 = node0.getSourceFileName();
127:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
128:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
129:       assertEquals(36, Node.QUOTED_PROP);
130:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
131:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
132:       assertEquals(53, Node.INPUT_ID);
133:       assertEquals(55, Node.INFERRED_FUNCTION);
134:       assertEquals(29, Node.JSDOC_INFO_PROP);
135:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
136:       assertEquals(51, Node.STATIC_SOURCE_FILE);
137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
138:       assertEquals(46, Node.IS_NAMESPACE);
139:       assertEquals(43, Node.IS_CONSTANT_NAME);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(2, Node.POST_FLAG);
142:       assertEquals(30, Node.VAR_ARGS_NAME);
143:       assertEquals(40, Node.ORIGINALNAME_PROP);
144:       assertEquals(57, Node.REFLECTED_OBJECT);
145:       assertEquals(52, Node.LENGTH);
146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
147:       assertEquals(54, Node.SLASH_V);
148:       assertEquals(15, Node.NO_SIDE_EFFECTS);
149:       assertEquals(57, Node.LAST_PROP);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(50, Node.FREE_CALL);
152:       assertEquals(1, Node.DECR_FLAG);
153:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
154:       assertEquals(39, Node.EMPTY_BLOCK);
155:       assertEquals(4095, Node.COLUMN_MASK);
156:       assertEquals(32, Node.INCRDECR_PROP);
157:       assertEquals(12, Node.COLUMN_BITS);
158:       assertEquals(56, Node.CHANGE_TIME);
159:       assertEquals(37, Node.OPT_ARG_NAME);
160:       assertEquals(48, Node.DIRECTIVES);
161:       assertEquals(49, Node.DIRECT_EVAL);
162:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
163:       assertFalse(node0.isThrow());
164:       assertFalse(node0.isFalse());
165:       assertFalse(node0.isBreak());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isInc());
168:       assertFalse(node0.isThis());
169:       assertFalse(node0.isComma());
170:       assertFalse(node0.isHook());
171:       assertFalse(node0.isIn());
172:       assertFalse(node0.isWith());
173:       assertFalse(node0.isInstanceOf());
174:       assertFalse(node0.isExprResult());
175:       assertFalse(node0.isDelProp());
176:       assertFalse(node0.isIf());
177:       assertFalse(node0.isNE());
178:       assertFalse(node0.isGetElem());
179:       assertFalse(node0.isAssign());
180:       assertFalse(node0.isTypeOf());
181:       assertFalse(node0.isCast());
182:       assertFalse(node0.isFunction());
183:       assertFalse(node0.isDec());
184:       assertFalse(node0.hasChildren());
185:       assertFalse(node0.isReturn());
186:       assertFalse(node0.isContinue());
187:       assertFalse(node0.isAnd());
188:       assertFalse(node0.isObjectLit());
189:       assertFalse(node0.isNot());
190:       assertFalse(node0.isString());
191:       assertFalse(node0.isDebugger());
192:       assertEquals((-1), node0.getSourcePosition());
193:       assertFalse(node0.isCall());
194:       assertFalse(node0.isName());
195:       assertFalse(node0.isAdd());
196:       assertFalse(node0.isBlock());
197:       assertFalse(node0.isSetterDef());
198:       assertFalse(node0.isNew());
199:       assertFalse(node0.isVar());
200:       assertFalse(node0.isWhile());
201:       assertFalse(node0.isDo());
202:       assertFalse(node0.isRegExp());
203:       assertFalse(node0.isCatch());
204:       assertFalse(node0.hasMoreThanOneChild());
205:       assertEquals(514, node0.getType());
206:       assertFalse(node0.isVoid());
207:       assertFalse(node0.isTrue());
208:       assertFalse(node0.isOr());
209:       assertEquals((-1), node0.getLineno());
210:       assertFalse(node0.isNull());
211:       assertFalse(node0.isLabelName());
212:       assertFalse(node0.isArrayLit());
213:       assertFalse(node0.hasOneChild());
214:       assertFalse(node0.isGetterDef());
215:       assertFalse(node0.isNumber());
216:       assertFalse(node0.isEmpty());
217:       assertFalse(node0.isTry());
218:       assertFalse(node0.isLabel());
219:       assertFalse(node0.isDefaultCase());
220:       assertFalse(node0.isFor());
221:       assertFalse(node0.isAssignAdd());
222:       assertFalse(node0.isCase());
223:       assertEquals(0, node0.getChildCount());
224:       assertFalse(node0.isScript());
225:       assertEquals((-1), node0.getCharno());
226:       assertFalse(node0.isSwitch());
227:       assertFalse(node0.isParamList());
228:       assertFalse(node0.isStringKey());
229:       assertNull(string0);
230:       
231:       Node node1 = Node.newNumber((double) 47);
232:       assertFalse(node1.equals((Object)node0));
233:       assertEquals(54, Node.SLASH_V);
234:       assertEquals(15, Node.NO_SIDE_EFFECTS);
235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
236:       assertEquals(49, Node.DIRECT_EVAL);
237:       assertEquals(57, Node.LAST_PROP);
238:       assertEquals(1, Node.DECR_FLAG);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(57, Node.REFLECTED_OBJECT);
241:       assertEquals(50, Node.FREE_CALL);
242:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
243:       assertEquals(52, Node.LENGTH);
244:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
245:       assertEquals(39, Node.EMPTY_BLOCK);
246:       assertEquals(2, Node.POST_FLAG);
247:       assertEquals(47, Node.IS_DISPATCHER);
248:       assertEquals(46, Node.IS_NAMESPACE);
249:       assertEquals(40, Node.ORIGINALNAME_PROP);
250:       assertEquals(30, Node.VAR_ARGS_NAME);
251:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
252:       assertEquals(36, Node.QUOTED_PROP);
253:       assertEquals(53, Node.INPUT_ID);
254:       assertEquals(43, Node.IS_CONSTANT_NAME);
255:       assertEquals(55, Node.INFERRED_FUNCTION);
256:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
257:       assertEquals(29, Node.JSDOC_INFO_PROP);
258:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(8, Node.FLAG_NO_THROWS);
261:       assertEquals(48, Node.DIRECTIVES);
262:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(56, Node.CHANGE_TIME);
265:       assertEquals(12, Node.COLUMN_BITS);
266:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
267:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
268:       assertEquals(4095, Node.COLUMN_MASK);
269:       assertFalse(node1.isTry());
270:       assertFalse(node1.isTrue());
271:       assertFalse(node1.isDebugger());
272:       assertFalse(node1.isFunction());
273:       assertFalse(node1.isRegExp());
274:       assertFalse(node1.isEmpty());
275:       assertFalse(node1.isFor());
276:       assertFalse(node1.isDefaultCase());
277:       assertFalse(node1.isCatch());
278:       assertFalse(node1.isIn());
279:       assertFalse(node1.isCall());
280:       assertFalse(node1.isNull());
281:       assertFalse(node1.isNE());
282:       assertFalse(node1.isVoid());
283:       assertFalse(node1.isIf());
284:       assertFalse(node1.isDelProp());
285:       assertFalse(node1.isName());
286:       assertFalse(node1.isInc());
287:       assertFalse(node1.isFalse());
288:       assertFalse(node1.isString());
289:       assertFalse(node1.isWhile());
290:       assertFalse(node1.isThrow());
291:       assertFalse(node1.isSetterDef());
292:       assertTrue(node1.isNumber());
293:       assertFalse(node1.isGetProp());
294:       assertEquals((-1), node1.getSourcePosition());
295:       assertFalse(node1.isContinue());
296:       assertFalse(node1.isObjectLit());
297:       assertFalse(node1.isNot());
298:       assertFalse(node1.isAnd());
299:       assertFalse(node1.isExprResult());
300:       assertFalse(node1.isCast());
301:       assertFalse(node1.isAssign());
302:       assertFalse(node1.hasChildren());
303:       assertFalse(node1.isScript());
304:       assertFalse(node1.hasOneChild());
305:       assertFalse(node1.isOr());
306:       assertEquals((-1), node1.getLineno());
307:       assertFalse(node1.isThis());
308:       assertFalse(node1.isReturn());
309:       assertFalse(node1.hasMoreThanOneChild());
310:       assertFalse(node1.isInstanceOf());
311:       assertFalse(node1.isComma());
312:       assertFalse(node1.isDec());
313:       assertFalse(node1.isTypeOf());
314:       assertFalse(node1.isWith());
315:       assertFalse(node1.isBreak());
316:       assertFalse(node1.isGetElem());
317:       assertFalse(node1.isNew());
318:       assertEquals((-1), node1.getCharno());
319:       assertFalse(node1.isBlock());
320:       assertFalse(node1.isHook());
321:       assertFalse(node1.isAdd());
322:       assertEquals(39, node1.getType());
323:       assertFalse(node1.isDo());
324:       assertFalse(node1.isCase());
325:       assertFalse(node1.isVar());
326:       assertFalse(node1.isLabel());
327:       assertFalse(node1.isAssignAdd());
328:       assertFalse(node1.isGetterDef());
329:       assertEquals(0, node1.getChildCount());
330:       assertFalse(node1.isLabelName());
331:       assertFalse(node1.isStringKey());
332:       assertFalse(node1.isSwitch());
333:       assertFalse(node1.isArrayLit());
334:       assertFalse(node1.isParamList());
335:       assertNotNull(node1);
336:       
337:       node0.setString("~7VH 6d?h7`htWG ");
338:       assertFalse(node0.equals((Object)node1));
339:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
340:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
341:       assertEquals(36, Node.QUOTED_PROP);
342:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
343:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
344:       assertEquals(53, Node.INPUT_ID);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(29, Node.JSDOC_INFO_PROP);
347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
348:       assertEquals(51, Node.STATIC_SOURCE_FILE);
349:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
350:       assertEquals(46, Node.IS_NAMESPACE);
351:       assertEquals(43, Node.IS_CONSTANT_NAME);
352:       assertEquals(47, Node.IS_DISPATCHER);
353:       assertEquals(2, Node.POST_FLAG);
354:       assertEquals(30, Node.VAR_ARGS_NAME);
355:       assertEquals(40, Node.ORIGINALNAME_PROP);
356:       assertEquals(57, Node.REFLECTED_OBJECT);
357:       assertEquals(52, Node.LENGTH);
358:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
359:       assertEquals(54, Node.SLASH_V);
360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
361:       assertEquals(57, Node.LAST_PROP);
362:       assertEquals(8, Node.FLAG_NO_THROWS);
363:       assertEquals(50, Node.FREE_CALL);
364:       assertEquals(1, Node.DECR_FLAG);
365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
366:       assertEquals(39, Node.EMPTY_BLOCK);
367:       assertEquals(4095, Node.COLUMN_MASK);
368:       assertEquals(32, Node.INCRDECR_PROP);
369:       assertEquals(12, Node.COLUMN_BITS);
370:       assertEquals(56, Node.CHANGE_TIME);
371:       assertEquals(37, Node.OPT_ARG_NAME);
372:       assertEquals(48, Node.DIRECTIVES);
373:       assertEquals(49, Node.DIRECT_EVAL);
374:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
375:       assertFalse(node0.isThrow());
376:       assertFalse(node0.isFalse());
377:       assertFalse(node0.isBreak());
378:       assertFalse(node0.isGetProp());
379:       assertFalse(node0.isInc());
380:       assertFalse(node0.isThis());
381:       assertFalse(node0.isComma());
382:       assertFalse(node0.isHook());
383:       assertFalse(node0.isIn());
384:       assertFalse(node0.isWith());
385:       assertFalse(node0.isInstanceOf());
386:       assertFalse(node0.isExprResult());
387:       assertFalse(node0.isDelProp());
388:       assertFalse(node0.isIf());
389:       assertFalse(node0.isNE());
390:       assertFalse(node0.isGetElem());
391:       assertFalse(node0.isAssign());
392:       assertFalse(node0.isTypeOf());
393:       assertFalse(node0.isCast());
394:       assertFalse(node0.isFunction());
395:       assertFalse(node0.isDec());
396:       assertFalse(node0.hasChildren());
397:       assertFalse(node0.isReturn());
398:       assertFalse(node0.isContinue());
399:       assertFalse(node0.isAnd());
400:       assertFalse(node0.isObjectLit());
401:       assertFalse(node0.isNot());
402:       assertFalse(node0.isString());
403:       assertFalse(node0.isDebugger());
404:       assertEquals((-1), node0.getSourcePosition());
405:       assertFalse(node0.isCall());
406:       assertFalse(node0.isName());
407:       assertFalse(node0.isAdd());
408:       assertFalse(node0.isBlock());
409:       assertFalse(node0.isSetterDef());
410:       assertFalse(node0.isNew());
411:       assertFalse(node0.isVar());
412:       assertFalse(node0.isWhile());
413:       assertFalse(node0.isDo());
414:       assertFalse(node0.isRegExp());
415:       assertFalse(node0.isCatch());
416:       assertFalse(node0.hasMoreThanOneChild());
417:       assertEquals(514, node0.getType());
418:       assertFalse(node0.isVoid());
419:       assertFalse(node0.isTrue());
420:       assertFalse(node0.isOr());
421:       assertEquals((-1), node0.getLineno());
422:       assertFalse(node0.isNull());
423:       assertFalse(node0.isLabelName());
424:       assertFalse(node0.isArrayLit());
425:       assertFalse(node0.hasOneChild());
426:       assertFalse(node0.isGetterDef());
427:       assertFalse(node0.isNumber());
428:       assertFalse(node0.isEmpty());
429:       assertFalse(node0.isTry());
430:       assertFalse(node0.isLabel());
431:       assertFalse(node0.isDefaultCase());
432:       assertFalse(node0.isFor());
433:       assertFalse(node0.isAssignAdd());
434:       assertFalse(node0.isCase());
435:       assertEquals(0, node0.getChildCount());
436:       assertFalse(node0.isScript());
437:       assertEquals((-1), node0.getCharno());
438:       assertFalse(node0.isSwitch());
439:       assertFalse(node0.isParamList());
440:       assertFalse(node0.isStringKey());
441:       
442:       Node node2 = Node.newString("~7VH 6d?h7`htWG ");
443:       assertNotSame(node2, node0);
444:       assertFalse(node2.equals((Object)node1));
445:       assertFalse(node2.equals((Object)node0));
446:       assertEquals(47, Node.IS_DISPATCHER);
447:       assertEquals(29, Node.JSDOC_INFO_PROP);
448:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
449:       assertEquals(56, Node.CHANGE_TIME);
450:       assertEquals(37, Node.OPT_ARG_NAME);
451:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
452:       assertEquals(32, Node.INCRDECR_PROP);
453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
454:       assertEquals(12, Node.COLUMN_BITS);
455:       assertEquals(2, Node.POST_FLAG);
456:       assertEquals(30, Node.VAR_ARGS_NAME);
457:       assertEquals(43, Node.IS_CONSTANT_NAME);
458:       assertEquals(1, Node.DECR_FLAG);
459:       assertEquals(46, Node.IS_NAMESPACE);
460:       assertEquals(54, Node.SLASH_V);
461:       assertEquals(50, Node.FREE_CALL);
462:       assertEquals(51, Node.STATIC_SOURCE_FILE);
463:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
464:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
465:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
466:       assertEquals(40, Node.ORIGINALNAME_PROP);
467:       assertEquals(48, Node.DIRECTIVES);
468:       assertEquals(39, Node.EMPTY_BLOCK);
469:       assertEquals(4095, Node.COLUMN_MASK);
470:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
471:       assertEquals(57, Node.LAST_PROP);
472:       assertEquals(15, Node.NO_SIDE_EFFECTS);
473:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
475:       assertEquals(53, Node.INPUT_ID);
476:       assertEquals(49, Node.DIRECT_EVAL);
477:       assertEquals(52, Node.LENGTH);
478:       assertEquals(57, Node.REFLECTED_OBJECT);
479:       assertEquals(55, Node.INFERRED_FUNCTION);
480:       assertEquals(8, Node.FLAG_NO_THROWS);
481:       assertEquals(36, Node.QUOTED_PROP);
482:       assertFalse(node2.isParamList());
483:       assertFalse(node2.isSetterDef());
484:       assertEquals(0, node2.getChildCount());
485:       assertFalse(node2.isNull());
486:       assertFalse(node2.isCatch());
487:       assertFalse(node2.isCall());
488:       assertFalse(node2.isStringKey());
489:       assertFalse(node2.isName());
490:       assertFalse(node2.isTrue());
491:       assertFalse(node2.isFunction());
492:       assertFalse(node2.isVoid());
493:       assertFalse(node2.isDefaultCase());
494:       assertEquals(40, node2.getType());
495:       assertFalse(node2.isVar());
496:       assertFalse(node2.isEmpty());
497:       assertFalse(node2.isAdd());
498:       assertFalse(node2.isDo());
499:       assertFalse(node2.isNew());
500:       assertFalse(node2.isNE());
501:       assertFalse(node2.isNumber());
502:       assertFalse(node2.isIf());
503:       assertFalse(node2.isAssignAdd());
504:       assertFalse(node2.isFor());
505:       assertFalse(node2.isGetterDef());
506:       assertFalse(node2.isLabel());
507:       assertFalse(node2.hasMoreThanOneChild());
508:       assertEquals((-1), node2.getLineno());
509:       assertFalse(node2.isLabelName());
510:       assertFalse(node2.isArrayLit());
511:       assertFalse(node2.isRegExp());
512:       assertFalse(node2.isScript());
513:       assertTrue(node2.isString());
514:       assertFalse(node2.isSwitch());
515:       assertFalse(node2.isWith());
516:       assertFalse(node2.isBlock());
517:       assertFalse(node2.isHook());
518:       assertEquals((-1), node2.getCharno());
519:       assertFalse(node2.isTry());
520:       assertFalse(node2.isCase());
521:       assertFalse(node2.hasOneChild());
522:       assertFalse(node2.isThis());
523:       assertFalse(node2.isComma());
524:       assertFalse(node2.isFalse());
525:       assertFalse(node2.isInstanceOf());
526:       assertFalse(node2.isAnd());
527:       assertFalse(node2.isBreak());
528:       assertFalse(node2.isInc());
529:       assertFalse(node2.isThrow());
530:       assertFalse(node2.isIn());
531:       assertFalse(node2.isTypeOf());
532:       assertFalse(node2.isReturn());
533:       assertFalse(node2.isAssign());
534:       assertFalse(node2.isOr());
535:       assertEquals((-1), node2.getSourcePosition());
536:       assertFalse(node2.isDec());
537:       assertFalse(node2.hasChildren());
538:       assertFalse(node2.isCast());
539:       assertFalse(node2.isContinue());
540:       assertFalse(node2.isDelProp());
541:       assertFalse(node2.isGetElem());
542:       assertFalse(node2.isExprResult());
543:       assertFalse(node2.isWhile());
544:       assertFalse(node2.isNot());
545:       assertFalse(node2.isDebugger());
546:       assertFalse(node2.isObjectLit());
547:       assertFalse(node2.isGetProp());
548:       assertNotNull(node2);
549:       
550:       Node node3 = new Node(31, node1, node1, node1, node2, 57, 43);
551:       assertFalse(node1.equals((Object)node2));
552:       assertFalse(node1.equals((Object)node0));
553:       assertFalse(node2.equals((Object)node1));
554:       assertFalse(node2.equals((Object)node0));
555:       assertFalse(node3.equals((Object)node1));
556:       assertFalse(node3.equals((Object)node0));
557:       assertFalse(node3.equals((Object)node2));
558:       assertEquals(54, Node.SLASH_V);
559:       assertEquals(15, Node.NO_SIDE_EFFECTS);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(49, Node.DIRECT_EVAL);
562:       assertEquals(57, Node.LAST_PROP);
563:       assertEquals(1, Node.DECR_FLAG);
564:       assertEquals(51, Node.STATIC_SOURCE_FILE);
565:       assertEquals(57, Node.REFLECTED_OBJECT);
566:       assertEquals(50, Node.FREE_CALL);
567:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
568:       assertEquals(52, Node.LENGTH);
569:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
570:       assertEquals(39, Node.EMPTY_BLOCK);
571:       assertEquals(2, Node.POST_FLAG);
572:       assertEquals(47, Node.IS_DISPATCHER);
573:       assertEquals(46, Node.IS_NAMESPACE);
574:       assertEquals(40, Node.ORIGINALNAME_PROP);
575:       assertEquals(30, Node.VAR_ARGS_NAME);
576:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
577:       assertEquals(36, Node.QUOTED_PROP);
578:       assertEquals(53, Node.INPUT_ID);
579:       assertEquals(43, Node.IS_CONSTANT_NAME);
580:       assertEquals(55, Node.INFERRED_FUNCTION);
581:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
582:       assertEquals(29, Node.JSDOC_INFO_PROP);
583:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
584:       assertEquals(37, Node.OPT_ARG_NAME);
585:       assertEquals(8, Node.FLAG_NO_THROWS);
586:       assertEquals(48, Node.DIRECTIVES);
587:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
588:       assertEquals(32, Node.INCRDECR_PROP);
589:       assertEquals(56, Node.CHANGE_TIME);
590:       assertEquals(12, Node.COLUMN_BITS);
591:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
592:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
593:       assertEquals(4095, Node.COLUMN_MASK);
594:       assertEquals(47, Node.IS_DISPATCHER);
595:       assertEquals(29, Node.JSDOC_INFO_PROP);
596:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
597:       assertEquals(56, Node.CHANGE_TIME);
598:       assertEquals(37, Node.OPT_ARG_NAME);
599:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
600:       assertEquals(32, Node.INCRDECR_PROP);
601:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
602:       assertEquals(12, Node.COLUMN_BITS);
603:       assertEquals(2, Node.POST_FLAG);
604:       assertEquals(30, Node.VAR_ARGS_NAME);
605:       assertEquals(43, Node.IS_CONSTANT_NAME);
606:       assertEquals(1, Node.DECR_FLAG);
607:       assertEquals(46, Node.IS_NAMESPACE);
608:       assertEquals(54, Node.SLASH_V);
609:       assertEquals(50, Node.FREE_CALL);
610:       assertEquals(51, Node.STATIC_SOURCE_FILE);
611:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
612:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
613:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
614:       assertEquals(40, Node.ORIGINALNAME_PROP);
615:       assertEquals(48, Node.DIRECTIVES);
616:       assertEquals(39, Node.EMPTY_BLOCK);
617:       assertEquals(4095, Node.COLUMN_MASK);
618:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
619:       assertEquals(57, Node.LAST_PROP);
620:       assertEquals(15, Node.NO_SIDE_EFFECTS);
621:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
622:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
623:       assertEquals(53, Node.INPUT_ID);
624:       assertEquals(49, Node.DIRECT_EVAL);
625:       assertEquals(52, Node.LENGTH);
626:       assertEquals(57, Node.REFLECTED_OBJECT);
627:       assertEquals(55, Node.INFERRED_FUNCTION);
628:       assertEquals(8, Node.FLAG_NO_THROWS);
629:       assertEquals(36, Node.QUOTED_PROP);
630:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
631:       assertEquals(54, Node.SLASH_V);
632:       assertEquals(52, Node.LENGTH);
633:       assertEquals(15, Node.NO_SIDE_EFFECTS);
634:       assertEquals(57, Node.LAST_PROP);
635:       assertEquals(49, Node.DIRECT_EVAL);
636:       assertEquals(1, Node.DECR_FLAG);
637:       assertEquals(40, Node.ORIGINALNAME_PROP);
638:       assertEquals(12, Node.COLUMN_BITS);
639:       assertEquals(30, Node.VAR_ARGS_NAME);
640:       assertEquals(48, Node.DIRECTIVES);
641:       assertEquals(8, Node.FLAG_NO_THROWS);
642:       assertEquals(39, Node.EMPTY_BLOCK);
643:       assertEquals(56, Node.CHANGE_TIME);
644:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
645:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
646:       assertEquals(37, Node.OPT_ARG_NAME);
647:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
648:       assertEquals(55, Node.INFERRED_FUNCTION);
649:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
650:       assertEquals(29, Node.JSDOC_INFO_PROP);
651:       assertEquals(57, Node.REFLECTED_OBJECT);
652:       assertEquals(36, Node.QUOTED_PROP);
653:       assertEquals(53, Node.INPUT_ID);
654:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
655:       assertEquals(43, Node.IS_CONSTANT_NAME);
656:       assertEquals(4095, Node.COLUMN_MASK);
657:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
658:       assertEquals(47, Node.IS_DISPATCHER);
659:       assertEquals(2, Node.POST_FLAG);
660:       assertEquals(32, Node.INCRDECR_PROP);
661:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
662:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
663:       assertEquals(46, Node.IS_NAMESPACE);
664:       assertEquals(50, Node.FREE_CALL);
665:       assertEquals(51, Node.STATIC_SOURCE_FILE);
666:       assertFalse(node1.isTry());
667:       assertFalse(node1.isTrue());
668:       assertFalse(node1.isDebugger());
669:       assertFalse(node1.isFunction());
670:       assertFalse(node1.isRegExp());
671:       assertFalse(node1.isEmpty());
672:       assertFalse(node1.isFor());
673:       assertFalse(node1.isDefaultCase());
674:       assertFalse(node1.isCatch());
675:       assertFalse(node1.isIn());
676:       assertFalse(node1.isCall());
677:       assertFalse(node1.isNull());
678:       assertFalse(node1.isNE());
679:       assertFalse(node1.isVoid());
680:       assertFalse(node1.isIf());
681:       assertFalse(node1.isDelProp());
682:       assertFalse(node1.isName());
683:       assertFalse(node1.isInc());
684:       assertFalse(node1.isFalse());
685:       assertFalse(node1.isString());
686:       assertFalse(node1.isWhile());
687:       assertFalse(node1.isThrow());
688:       assertFalse(node1.isSetterDef());
689:       assertTrue(node1.isNumber());
690:       assertFalse(node1.isGetProp());
691:       assertEquals((-1), node1.getSourcePosition());
692:       assertFalse(node1.isContinue());
693:       assertFalse(node1.isObjectLit());
694:       assertFalse(node1.isNot());
695:       assertFalse(node1.isAnd());
696:       assertFalse(node1.isExprResult());
697:       assertFalse(node1.isCast());
698:       assertFalse(node1.isAssign());
699:       assertFalse(node1.hasChildren());
700:       assertFalse(node1.isScript());
701:       assertFalse(node1.hasOneChild());
702:       assertFalse(node1.isOr());
703:       assertEquals((-1), node1.getLineno());
704:       assertFalse(node1.isThis());
705:       assertFalse(node1.isReturn());
706:       assertFalse(node1.hasMoreThanOneChild());
707:       assertFalse(node1.isInstanceOf());
708:       assertFalse(node1.isComma());
709:       assertFalse(node1.isDec());
710:       assertFalse(node1.isTypeOf());
711:       assertFalse(node1.isWith());
712:       assertFalse(node1.isBreak());
713:       assertFalse(node1.isGetElem());
714:       assertFalse(node1.isNew());
715:       assertEquals((-1), node1.getCharno());
716:       assertFalse(node1.isBlock());
717:       assertFalse(node1.isHook());
718:       assertFalse(node1.isAdd());
719:       assertEquals(39, node1.getType());
720:       assertFalse(node1.isDo());
721:       assertFalse(node1.isCase());
722:       assertFalse(node1.isVar());
723:       assertFalse(node1.isLabel());
724:       assertFalse(node1.isAssignAdd());
725:       assertFalse(node1.isGetterDef());
726:       assertEquals(0, node1.getChildCount());
727:       assertFalse(node1.isLabelName());
728:       assertFalse(node1.isStringKey());
729:       assertFalse(node1.isSwitch());
730:       assertFalse(node1.isArrayLit());
731:       assertFalse(node1.isParamList());
732:       assertFalse(node2.isParamList());
733:       assertFalse(node2.isSetterDef());
734:       assertEquals(0, node2.getChildCount());
735:       assertFalse(node2.isNull());
736:       assertFalse(node2.isCatch());
737:       assertFalse(node2.isCall());
738:       assertFalse(node2.isStringKey());
739:       assertFalse(node2.isName());
740:       assertFalse(node2.isTrue());
741:       assertFalse(node2.isFunction());
742:       assertFalse(node2.isVoid());
743:       assertFalse(node2.isDefaultCase());
744:       assertEquals(40, node2.getType());
745:       assertFalse(node2.isVar());
746:       assertFalse(node2.isEmpty());
747:       assertFalse(node2.isAdd());
748:       assertFalse(node2.isDo());
749:       assertFalse(node2.isNew());
750:       assertFalse(node2.isNE());
751:       assertFalse(node2.isNumber());
752:       assertFalse(node2.isIf());
753:       assertFalse(node2.isAssignAdd());
754:       assertFalse(node2.isFor());
755:       assertFalse(node2.isGetterDef());
756:       assertFalse(node2.isLabel());
757:       assertFalse(node2.hasMoreThanOneChild());
758:       assertEquals((-1), node2.getLineno());
759:       assertFalse(node2.isLabelName());
760:       assertFalse(node2.isArrayLit());
761:       assertFalse(node2.isRegExp());
762:       assertFalse(node2.isScript());
763:       assertTrue(node2.isString());
764:       assertFalse(node2.isSwitch());
765:       assertFalse(node2.isWith());
766:       assertFalse(node2.isBlock());
767:       assertFalse(node2.isHook());
768:       assertEquals((-1), node2.getCharno());
769:       assertFalse(node2.isTry());
770:       assertFalse(node2.isCase());
771:       assertFalse(node2.hasOneChild());
772:       assertFalse(node2.isThis());
773:       assertFalse(node2.isComma());
774:       assertFalse(node2.isFalse());
775:       assertFalse(node2.isInstanceOf());
776:       assertFalse(node2.isAnd());
777:       assertFalse(node2.isBreak());
778:       assertFalse(node2.isInc());
779:       assertFalse(node2.isThrow());
780:       assertFalse(node2.isIn());
781:       assertFalse(node2.isTypeOf());
782:       assertFalse(node2.isReturn());
783:       assertFalse(node2.isAssign());
784:       assertFalse(node2.isOr());
785:       assertEquals((-1), node2.getSourcePosition());
786:       assertFalse(node2.isDec());
787:       assertFalse(node2.hasChildren());
788:       assertFalse(node2.isCast());
789:       assertFalse(node2.isContinue());
790:       assertFalse(node2.isDelProp());
791:       assertFalse(node2.isGetElem());
792:       assertFalse(node2.isExprResult());
793:       assertFalse(node2.isWhile());
794:       assertFalse(node2.isNot());
795:       assertFalse(node2.isDebugger());
796:       assertFalse(node2.isObjectLit());
797:       assertFalse(node2.isGetProp());
798:       assertFalse(node3.isTry());
799:       assertFalse(node3.isTrue());
800:       assertFalse(node3.isDebugger());
801:       assertFalse(node3.isFunction());
802:       assertFalse(node3.isRegExp());
803:       assertFalse(node3.isIf());
804:       assertFalse(node3.isCatch());
805:       assertFalse(node3.isVoid());
806:       assertFalse(node3.isArrayLit());
807:       assertTrue(node3.hasChildren());
808:       assertEquals(43, node3.getCharno());
809:       assertFalse(node3.isParamList());
810:       assertFalse(node3.isString());
811:       assertFalse(node3.isFor());
812:       assertFalse(node3.isGetterDef());
813:       assertFalse(node3.isCase());
814:       assertFalse(node3.isThrow());
815:       assertFalse(node3.isBlock());
816:       assertFalse(node3.isHook());
817:       assertFalse(node3.isFalse());
818:       assertFalse(node3.isContinue());
819:       assertEquals(31, node3.getType());
820:       assertFalse(node3.isIn());
821:       assertFalse(node3.isNE());
822:       assertTrue(node3.isDelProp());
823:       assertEquals(57, node3.getLineno());
824:       assertEquals(2, node3.getChildCount());
825:       assertFalse(node3.isInc());
826:       assertFalse(node3.isSetterDef());
827:       assertFalse(node3.isLabelName());
828:       assertFalse(node3.isDec());
829:       assertFalse(node3.isAssign());
830:       assertFalse(node3.isTypeOf());
831:       assertFalse(node3.isWith());
832:       assertFalse(node3.isExprResult());
833:       assertFalse(node3.isCast());
834:       assertFalse(node3.isGetElem());
835:       assertEquals(233515, node3.getSourcePosition());
836:       assertFalse(node3.isReturn());
837:       assertFalse(node3.isInstanceOf());
838:       assertFalse(node3.isObjectLit());
839:       assertFalse(node3.isAnd());
840:       assertFalse(node3.isThis());
841:       assertFalse(node3.isComma());
842:       assertFalse(node3.isWhile());
843:       assertFalse(node3.isNot());
844:       assertFalse(node3.isNumber());
845:       assertFalse(node3.isScript());
846:       assertFalse(node3.hasOneChild());
847:       assertFalse(node3.isGetProp());
848:       assertFalse(node3.isVar());
849:       assertTrue(node3.hasMoreThanOneChild());
850:       assertFalse(node3.isStringKey());
851:       assertFalse(node3.isName());
852:       assertFalse(node3.isSwitch());
853:       assertFalse(node3.isCall());
854:       assertFalse(node3.isBreak());
855:       assertFalse(node3.isOr());
856:       assertFalse(node3.isAssignAdd());
857:       assertFalse(node3.isNull());
858:       assertFalse(node3.isLabel());
859:       assertFalse(node3.isEmpty());
860:       assertFalse(node3.isDo());
861:       assertFalse(node3.isDefaultCase());
862:       assertFalse(node3.isAdd());
863:       assertFalse(node3.isNew());
864:       assertNotNull(node3);
865:       
866:       Iterable<Node> iterable0 = node2.children();
867:       assertNotSame(node2, node0);
868:       assertFalse(node2.equals((Object)node1));
869:       assertFalse(node2.equals((Object)node3));
870:       assertFalse(node2.equals((Object)node0));
871:       assertFalse(iterable0.contains(node2));
872:       assertEquals(47, Node.IS_DISPATCHER);
873:       assertEquals(29, Node.JSDOC_INFO_PROP);
874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
875:       assertEquals(56, Node.CHANGE_TIME);
876:       assertEquals(37, Node.OPT_ARG_NAME);
877:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
878:       assertEquals(32, Node.INCRDECR_PROP);
879:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
880:       assertEquals(12, Node.COLUMN_BITS);
881:       assertEquals(2, Node.POST_FLAG);
882:       assertEquals(30, Node.VAR_ARGS_NAME);
883:       assertEquals(43, Node.IS_CONSTANT_NAME);
884:       assertEquals(1, Node.DECR_FLAG);
885:       assertEquals(46, Node.IS_NAMESPACE);
886:       assertEquals(54, Node.SLASH_V);
887:       assertEquals(50, Node.FREE_CALL);
888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
889:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
892:       assertEquals(40, Node.ORIGINALNAME_PROP);
893:       assertEquals(48, Node.DIRECTIVES);
894:       assertEquals(39, Node.EMPTY_BLOCK);
895:       assertEquals(4095, Node.COLUMN_MASK);
896:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
897:       assertEquals(57, Node.LAST_PROP);
898:       assertEquals(15, Node.NO_SIDE_EFFECTS);
899:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
900:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
901:       assertEquals(53, Node.INPUT_ID);
902:       assertEquals(49, Node.DIRECT_EVAL);
903:       assertEquals(52, Node.LENGTH);
904:       assertEquals(57, Node.REFLECTED_OBJECT);
905:       assertEquals(55, Node.INFERRED_FUNCTION);
906:       assertEquals(8, Node.FLAG_NO_THROWS);
907:       assertEquals(36, Node.QUOTED_PROP);
908:       assertFalse(node2.isParamList());
909:       assertFalse(node2.isSetterDef());
910:       assertEquals(0, node2.getChildCount());
911:       assertFalse(node2.isNull());
912:       assertFalse(node2.isCatch());
913:       assertFalse(node2.isCall());
914:       assertFalse(node2.isStringKey());
915:       assertFalse(node2.isName());
916:       assertFalse(node2.isTrue());
917:       assertFalse(node2.isFunction());
918:       assertFalse(node2.isVoid());
919:       assertFalse(node2.isDefaultCase());
920:       assertEquals(40, node2.getType());
921:       assertFalse(node2.isVar());
922:       assertFalse(node2.isEmpty());
923:       assertFalse(node2.isAdd());
924:       assertFalse(node2.isDo());
925:       assertFalse(node2.isNew());
926:       assertFalse(node2.isNE());
927:       assertFalse(node2.isNumber());
928:       assertFalse(node2.isIf());
929:       assertFalse(node2.isAssignAdd());
930:       assertFalse(node2.isFor());
931:       assertFalse(node2.isGetterDef());
932:       assertFalse(node2.isLabel());
933:       assertFalse(node2.hasMoreThanOneChild());
934:       assertEquals((-1), node2.getLineno());
935:       assertFalse(node2.isLabelName());
936:       assertFalse(node2.isArrayLit());
937:       assertFalse(node2.isRegExp());
938:       assertFalse(node2.isScript());
939:       assertTrue(node2.isString());
940:       assertFalse(node2.isSwitch());
941:       assertFalse(node2.isWith());
942:       assertFalse(node2.isBlock());
943:       assertFalse(node2.isHook());
944:       assertEquals((-1), node2.getCharno());
945:       assertFalse(node2.isTry());
946:       assertFalse(node2.isCase());
947:       assertFalse(node2.hasOneChild());
948:       assertFalse(node2.isThis());
949:       assertFalse(node2.isComma());
950:       assertFalse(node2.isFalse());
951:       assertFalse(node2.isInstanceOf());
952:       assertFalse(node2.isAnd());
953:       assertFalse(node2.isBreak());
954:       assertFalse(node2.isInc());
955:       assertFalse(node2.isThrow());
956:       assertFalse(node2.isIn());
957:       assertFalse(node2.isTypeOf());
958:       assertFalse(node2.isReturn());
959:       assertFalse(node2.isAssign());
960:       assertFalse(node2.isOr());
961:       assertEquals((-1), node2.getSourcePosition());
962:       assertFalse(node2.isDec());
963:       assertFalse(node2.hasChildren());
964:       assertFalse(node2.isCast());
965:       assertFalse(node2.isContinue());
966:       assertFalse(node2.isDelProp());
967:       assertFalse(node2.isGetElem());
968:       assertFalse(node2.isExprResult());
969:       assertFalse(node2.isWhile());
970:       assertFalse(node2.isNot());
971:       assertFalse(node2.isDebugger());
972:       assertFalse(node2.isObjectLit());
973:       assertFalse(node2.isGetProp());
974:       assertNotNull(iterable0);
975:       
976:       Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
977:       assertNotSame(node0, node2);
978:       assertNotSame(node2, node0);
979:       assertFalse(node0.equals((Object)node2));
980:       assertFalse(node0.equals((Object)node1));
981:       assertFalse(node0.equals((Object)node3));
982:       assertFalse(node2.equals((Object)node1));
983:       assertFalse(node2.equals((Object)node3));
984:       assertFalse(node2.equals((Object)node0));
985:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
986:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
987:       assertEquals(36, Node.QUOTED_PROP);
988:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
989:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
990:       assertEquals(53, Node.INPUT_ID);
991:       assertEquals(55, Node.INFERRED_FUNCTION);
992:       assertEquals(29, Node.JSDOC_INFO_PROP);
993:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
994:       assertEquals(51, Node.STATIC_SOURCE_FILE);
995:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
996:       assertEquals(46, Node.IS_NAMESPACE);
997:       assertEquals(43, Node.IS_CONSTANT_NAME);
998:       assertEquals(47, Node.IS_DISPATCHER);
999:       assertEquals(2, Node.POST_FLAG);
1000:       assertEquals(30, Node.VAR_ARGS_NAME);
1001:       assertEquals(40, Node.ORIGINALNAME_PROP);
1002:       assertEquals(57, Node.REFLECTED_OBJECT);
1003:       assertEquals(52, Node.LENGTH);
1004:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1005:       assertEquals(54, Node.SLASH_V);
1006:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1007:       assertEquals(57, Node.LAST_PROP);
1008:       assertEquals(8, Node.FLAG_NO_THROWS);
1009:       assertEquals(50, Node.FREE_CALL);
1010:       assertEquals(1, Node.DECR_FLAG);
1011:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1012:       assertEquals(39, Node.EMPTY_BLOCK);
1013:       assertEquals(4095, Node.COLUMN_MASK);
1014:       assertEquals(32, Node.INCRDECR_PROP);
1015:       assertEquals(12, Node.COLUMN_BITS);
1016:       assertEquals(56, Node.CHANGE_TIME);
1017:       assertEquals(37, Node.OPT_ARG_NAME);
1018:       assertEquals(48, Node.DIRECTIVES);
1019:       assertEquals(49, Node.DIRECT_EVAL);
1020:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1021:       assertEquals(47, Node.IS_DISPATCHER);
1022:       assertEquals(29, Node.JSDOC_INFO_PROP);
1023:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1024:       assertEquals(56, Node.CHANGE_TIME);
1025:       assertEquals(37, Node.OPT_ARG_NAME);
1026:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1027:       assertEquals(32, Node.INCRDECR_PROP);
1028:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1029:       assertEquals(12, Node.COLUMN_BITS);
1030:       assertEquals(2, Node.POST_FLAG);
1031:       assertEquals(30, Node.VAR_ARGS_NAME);
1032:       assertEquals(43, Node.IS_CONSTANT_NAME);
1033:       assertEquals(1, Node.DECR_FLAG);
1034:       assertEquals(46, Node.IS_NAMESPACE);
1035:       assertEquals(54, Node.SLASH_V);
1036:       assertEquals(50, Node.FREE_CALL);
1037:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1038:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1039:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1040:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1041:       assertEquals(40, Node.ORIGINALNAME_PROP);
1042:       assertEquals(48, Node.DIRECTIVES);
1043:       assertEquals(39, Node.EMPTY_BLOCK);
1044:       assertEquals(4095, Node.COLUMN_MASK);
1045:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1046:       assertEquals(57, Node.LAST_PROP);
1047:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1048:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1049:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1050:       assertEquals(53, Node.INPUT_ID);
1051:       assertEquals(49, Node.DIRECT_EVAL);
1052:       assertEquals(52, Node.LENGTH);
1053:       assertEquals(57, Node.REFLECTED_OBJECT);
1054:       assertEquals(55, Node.INFERRED_FUNCTION);
1055:       assertEquals(8, Node.FLAG_NO_THROWS);
1056:       assertEquals(36, Node.QUOTED_PROP);
1057:       assertFalse(node0.isThrow());
1058:       assertFalse(node0.isFalse());
1059:       assertFalse(node0.isBreak());
1060:       assertFalse(node0.isGetProp());
1061:       assertFalse(node0.isInc());
1062:       assertFalse(node0.isThis());
1063:       assertFalse(node0.isComma());
1064:       assertFalse(node0.isHook());
1065:       assertFalse(node0.isIn());
1066:       assertFalse(node0.isWith());
1067:       assertFalse(node0.isInstanceOf());
1068:       assertFalse(node0.isExprResult());
1069:       assertFalse(node0.isDelProp());
1070:       assertFalse(node0.isIf());
1071:       assertFalse(node0.isNE());
1072:       assertFalse(node0.isGetElem());
1073:       assertFalse(node0.isAssign());
1074:       assertFalse(node0.isTypeOf());
1075:       assertFalse(node0.isCast());
1076:       assertFalse(node0.isFunction());
1077:       assertFalse(node0.isDec());
1078:       assertFalse(node0.hasChildren());
1079:       assertFalse(node0.isReturn());
1080:       assertFalse(node0.isContinue());
1081:       assertFalse(node0.isAnd());
1082:       assertFalse(node0.isObjectLit());
1083:       assertFalse(node0.isNot());
1084:       assertFalse(node0.isString());
1085:       assertFalse(node0.isDebugger());
1086:       assertEquals((-1), node0.getSourcePosition());
1087:       assertFalse(node0.isCall());
1088:       assertFalse(node0.isName());
1089:       assertFalse(node0.isAdd());
1090:       assertFalse(node0.isBlock());
1091:       assertFalse(node0.isSetterDef());
1092:       assertFalse(node0.isNew());
1093:       assertFalse(node0.isVar());
1094:       assertFalse(node0.isWhile());
1095:       assertFalse(node0.isDo());
1096:       assertFalse(node0.isRegExp());
1097:       assertFalse(node0.isCatch());
1098:       assertFalse(node0.hasMoreThanOneChild());
1099:       assertEquals(514, node0.getType());
1100:       assertFalse(node0.isVoid());
1101:       assertFalse(node0.isTrue());
1102:       assertFalse(node0.isOr());
1103:       assertEquals((-1), node0.getLineno());
1104:       assertFalse(node0.isNull());
1105:       assertFalse(node0.isLabelName());
1106:       assertFalse(node0.isArrayLit());
1107:       assertFalse(node0.hasOneChild());
1108:       assertFalse(node0.isGetterDef());
1109:       assertFalse(node0.isNumber());
1110:       assertFalse(node0.isEmpty());
1111:       assertFalse(node0.isTry());
1112:       assertFalse(node0.isLabel());
1113:       assertFalse(node0.isDefaultCase());
1114:       assertFalse(node0.isFor());
1115:       assertFalse(node0.isAssignAdd());
1116:       assertFalse(node0.isCase());
1117:       assertEquals(0, node0.getChildCount());
1118:       assertFalse(node0.isScript());
1119:       assertEquals((-1), node0.getCharno());
1120:       assertFalse(node0.isSwitch());
1121:       assertFalse(node0.isParamList());
1122:       assertFalse(node0.isStringKey());
1123:       assertFalse(node2.isParamList());
1124:       assertFalse(node2.isSetterDef());
1125:       assertEquals(0, node2.getChildCount());
1126:       assertFalse(node2.isNull());
1127:       assertFalse(node2.isCatch());
1128:       assertFalse(node2.isCall());
1129:       assertFalse(node2.isStringKey());
1130:       assertFalse(node2.isName());
1131:       assertFalse(node2.isTrue());
1132:       assertFalse(node2.isFunction());
1133:       assertFalse(node2.isVoid());
1134:       assertFalse(node2.isDefaultCase());
1135:       assertEquals(40, node2.getType());
1136:       assertFalse(node2.isVar());
1137:       assertFalse(node2.isEmpty());
1138:       assertFalse(node2.isAdd());
1139:       assertFalse(node2.isDo());
1140:       assertFalse(node2.isNew());
1141:       assertFalse(node2.isNE());
1142:       assertFalse(node2.isNumber());
1143:       assertFalse(node2.isIf());
1144:       assertFalse(node2.isAssignAdd());
1145:       assertFalse(node2.isFor());
1146:       assertFalse(node2.isGetterDef());
1147:       assertFalse(node2.isLabel());
1148:       assertFalse(node2.hasMoreThanOneChild());
1149:       assertEquals((-1), node2.getLineno());
1150:       assertFalse(node2.isLabelName());
1151:       assertFalse(node2.isArrayLit());
1152:       assertFalse(node2.isRegExp());
1153:       assertFalse(node2.isScript());
1154:       assertTrue(node2.isString());
1155:       assertFalse(node2.isSwitch());
1156:       assertFalse(node2.isWith());
1157:       assertFalse(node2.isBlock());
1158:       assertFalse(node2.isHook());
1159:       assertEquals((-1), node2.getCharno());
1160:       assertFalse(node2.isTry());
1161:       assertFalse(node2.isCase());
1162:       assertFalse(node2.hasOneChild());
1163:       assertFalse(node2.isThis());
1164:       assertFalse(node2.isComma());
1165:       assertFalse(node2.isFalse());
1166:       assertFalse(node2.isInstanceOf());
1167:       assertFalse(node2.isAnd());
1168:       assertFalse(node2.isBreak());
1169:       assertFalse(node2.isInc());
1170:       assertFalse(node2.isThrow());
1171:       assertFalse(node2.isIn());
1172:       assertFalse(node2.isTypeOf());
1173:       assertFalse(node2.isReturn());
1174:       assertFalse(node2.isAssign());
1175:       assertFalse(node2.isOr());
1176:       assertEquals((-1), node2.getSourcePosition());
1177:       assertFalse(node2.isDec());
1178:       assertFalse(node2.hasChildren());
1179:       assertFalse(node2.isCast());
1180:       assertFalse(node2.isContinue());
1181:       assertFalse(node2.isDelProp());
1182:       assertFalse(node2.isGetElem());
1183:       assertFalse(node2.isExprResult());
1184:       assertFalse(node2.isWhile());
1185:       assertFalse(node2.isNot());
1186:       assertFalse(node2.isDebugger());
1187:       assertFalse(node2.isObjectLit());
1188:       assertFalse(node2.isGetProp());
1189:       assertNotNull(node_NodeMismatch0);
1190:       
1191:       String string1 = node1.toString();
1192:       assertFalse(node1.equals((Object)node3));
1193:       assertFalse(node1.equals((Object)node2));
1194:       assertFalse(node1.equals((Object)node0));
1195:       assertEquals(54, Node.SLASH_V);
1196:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1197:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1198:       assertEquals(49, Node.DIRECT_EVAL);
1199:       assertEquals(57, Node.LAST_PROP);
1200:       assertEquals(1, Node.DECR_FLAG);
1201:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1202:       assertEquals(57, Node.REFLECTED_OBJECT);
1203:       assertEquals(50, Node.FREE_CALL);
1204:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1205:       assertEquals(52, Node.LENGTH);
1206:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1207:       assertEquals(39, Node.EMPTY_BLOCK);
1208:       assertEquals(2, Node.POST_FLAG);
1209:       assertEquals(47, Node.IS_DISPATCHER);
1210:       assertEquals(46, Node.IS_NAMESPACE);
1211:       assertEquals(40, Node.ORIGINALNAME_PROP);
1212:       assertEquals(30, Node.VAR_ARGS_NAME);
1213:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1214:       assertEquals(36, Node.QUOTED_PROP);
1215:       assertEquals(53, Node.INPUT_ID);
1216:       assertEquals(43, Node.IS_CONSTANT_NAME);
1217:       assertEquals(55, Node.INFERRED_FUNCTION);
1218:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1219:       assertEquals(29, Node.JSDOC_INFO_PROP);
1220:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1221:       assertEquals(37, Node.OPT_ARG_NAME);
1222:       assertEquals(8, Node.FLAG_NO_THROWS);
1223:       assertEquals(48, Node.DIRECTIVES);
1224:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1225:       assertEquals(32, Node.INCRDECR_PROP);
1226:       assertEquals(56, Node.CHANGE_TIME);
1227:       assertEquals(12, Node.COLUMN_BITS);
1228:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1229:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1230:       assertEquals(4095, Node.COLUMN_MASK);
1231:       assertEquals("NUMBER 47.0", string1);
1232:       assertFalse(node1.isTry());
1233:       assertFalse(node1.isTrue());
1234:       assertFalse(node1.isDebugger());
1235:       assertFalse(node1.isFunction());
1236:       assertFalse(node1.isRegExp());
1237:       assertFalse(node1.isEmpty());
1238:       assertFalse(node1.isFor());
1239:       assertFalse(node1.isDefaultCase());
1240:       assertFalse(node1.isCatch());
1241:       assertFalse(node1.isIn());
1242:       assertFalse(node1.isCall());
1243:       assertFalse(node1.isNull());
1244:       assertFalse(node1.isNE());
1245:       assertFalse(node1.isVoid());
1246:       assertFalse(node1.isIf());
1247:       assertFalse(node1.isDelProp());
1248:       assertFalse(node1.isName());
1249:       assertFalse(node1.isInc());
1250:       assertFalse(node1.isFalse());
1251:       assertFalse(node1.isString());
1252:       assertFalse(node1.isWhile());
1253:       assertFalse(node1.isThrow());
1254:       assertFalse(node1.isSetterDef());
1255:       assertTrue(node1.isNumber());
1256:       assertFalse(node1.isGetProp());
1257:       assertEquals((-1), node1.getSourcePosition());
1258:       assertFalse(node1.isContinue());
1259:       assertFalse(node1.isObjectLit());
1260:       assertFalse(node1.isNot());
1261:       assertFalse(node1.isAnd());
1262:       assertFalse(node1.isExprResult());
1263:       assertFalse(node1.isCast());
1264:       assertFalse(node1.isAssign());
1265:       assertFalse(node1.hasChildren());
1266:       assertFalse(node1.isScript());
1267:       assertFalse(node1.hasOneChild());
1268:       assertFalse(node1.isOr());
1269:       assertEquals((-1), node1.getLineno());
1270:       assertFalse(node1.isThis());
1271:       assertFalse(node1.isReturn());
1272:       assertFalse(node1.hasMoreThanOneChild());
1273:       assertFalse(node1.isInstanceOf());
1274:       assertFalse(node1.isComma());
1275:       assertFalse(node1.isDec());
1276:       assertFalse(node1.isTypeOf());
1277:       assertFalse(node1.isWith());
1278:       assertFalse(node1.isBreak());
1279:       assertFalse(node1.isGetElem());
1280:       assertFalse(node1.isNew());
1281:       assertEquals((-1), node1.getCharno());
1282:       assertFalse(node1.isBlock());
1283:       assertFalse(node1.isHook());
1284:       assertFalse(node1.isAdd());
1285:       assertEquals(39, node1.getType());
1286:       assertFalse(node1.isDo());
1287:       assertFalse(node1.isCase());
1288:       assertFalse(node1.isVar());
1289:       assertFalse(node1.isLabel());
1290:       assertFalse(node1.isAssignAdd());
1291:       assertFalse(node1.isGetterDef());
1292:       assertEquals(0, node1.getChildCount());
1293:       assertFalse(node1.isLabelName());
1294:       assertFalse(node1.isStringKey());
1295:       assertFalse(node1.isSwitch());
1296:       assertFalse(node1.isArrayLit());
1297:       assertFalse(node1.isParamList());
1298:       assertNotNull(string1);
1299:       
1300:       node0.setOptionalArg(true);
1301:       assertNotSame(node0, node2);
1302:       assertFalse(node0.equals((Object)node2));
1303:       assertFalse(node0.equals((Object)node1));
1304:       assertFalse(node0.equals((Object)node3));
1305:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1306:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1307:       assertEquals(36, Node.QUOTED_PROP);
1308:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1309:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1310:       assertEquals(53, Node.INPUT_ID);
1311:       assertEquals(55, Node.INFERRED_FUNCTION);
1312:       assertEquals(29, Node.JSDOC_INFO_PROP);
1313:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1314:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1315:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1316:       assertEquals(46, Node.IS_NAMESPACE);
1317:       assertEquals(43, Node.IS_CONSTANT_NAME);
1318:       assertEquals(47, Node.IS_DISPATCHER);
1319:       assertEquals(2, Node.POST_FLAG);
1320:       assertEquals(30, Node.VAR_ARGS_NAME);
1321:       assertEquals(40, Node.ORIGINALNAME_PROP);
1322:       assertEquals(57, Node.REFLECTED_OBJECT);
1323:       assertEquals(52, Node.LENGTH);
1324:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1325:       assertEquals(54, Node.SLASH_V);
1326:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1327:       assertEquals(57, Node.LAST_PROP);
1328:       assertEquals(8, Node.FLAG_NO_THROWS);
1329:       assertEquals(50, Node.FREE_CALL);
1330:       assertEquals(1, Node.DECR_FLAG);
1331:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1332:       assertEquals(39, Node.EMPTY_BLOCK);
1333:       assertEquals(4095, Node.COLUMN_MASK);
1334:       assertEquals(32, Node.INCRDECR_PROP);
1335:       assertEquals(12, Node.COLUMN_BITS);
1336:       assertEquals(56, Node.CHANGE_TIME);
1337:       assertEquals(37, Node.OPT_ARG_NAME);
1338:       assertEquals(48, Node.DIRECTIVES);
1339:       assertEquals(49, Node.DIRECT_EVAL);
1340:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1341:       assertFalse(node0.isThrow());
1342:       assertFalse(node0.isFalse());
1343:       assertFalse(node0.isBreak());
1344:       assertFalse(node0.isGetProp());
1345:       assertFalse(node0.isInc());
1346:       assertFalse(node0.isThis());
1347:       assertFalse(node0.isComma());
1348:       assertFalse(node0.isHook());
1349:       assertFalse(node0.isIn());
1350:       assertFalse(node0.isWith());
1351:       assertFalse(node0.isInstanceOf());
1352:       assertFalse(node0.isExprResult());
1353:       assertFalse(node0.isDelProp());
1354:       assertFalse(node0.isIf());
1355:       assertFalse(node0.isNE());
1356:       assertFalse(node0.isGetElem());
1357:       assertFalse(node0.isAssign());
1358:       assertFalse(node0.isTypeOf());
1359:       assertFalse(node0.isCast());
1360:       assertFalse(node0.isFunction());
1361:       assertFalse(node0.isDec());
1362:       assertFalse(node0.hasChildren());
1363:       assertFalse(node0.isReturn());
1364:       assertFalse(node0.isContinue());
1365:       assertFalse(node0.isAnd());
1366:       assertFalse(node0.isObjectLit());
1367:       assertFalse(node0.isNot());
1368:       assertFalse(node0.isString());
1369:       assertFalse(node0.isDebugger());
1370:       assertEquals((-1), node0.getSourcePosition());
1371:       assertFalse(node0.isCall());
1372:       assertFalse(node0.isName());
1373:       assertFalse(node0.isAdd());
1374:       assertFalse(node0.isBlock());
1375:       assertFalse(node0.isSetterDef());
1376:       assertFalse(node0.isNew());
1377:       assertFalse(node0.isVar());
1378:       assertFalse(node0.isWhile());
1379:       assertFalse(node0.isDo());
1380:       assertFalse(node0.isRegExp());
1381:       assertFalse(node0.isCatch());
1382:       assertFalse(node0.hasMoreThanOneChild());
1383:       assertEquals(514, node0.getType());
1384:       assertFalse(node0.isVoid());
1385:       assertFalse(node0.isTrue());
1386:       assertFalse(node0.isOr());
1387:       assertEquals((-1), node0.getLineno());
1388:       assertFalse(node0.isNull());
1389:       assertFalse(node0.isLabelName());
1390:       assertFalse(node0.isArrayLit());
1391:       assertFalse(node0.hasOneChild());
1392:       assertFalse(node0.isGetterDef());
1393:       assertFalse(node0.isNumber());
1394:       assertFalse(node0.isEmpty());
1395:       assertFalse(node0.isTry());
1396:       assertFalse(node0.isLabel());
1397:       assertFalse(node0.isDefaultCase());
1398:       assertFalse(node0.isFor());
1399:       assertFalse(node0.isAssignAdd());
1400:       assertFalse(node0.isCase());
1401:       assertEquals(0, node0.getChildCount());
1402:       assertFalse(node0.isScript());
1403:       assertEquals((-1), node0.getCharno());
1404:       assertFalse(node0.isSwitch());
1405:       assertFalse(node0.isParamList());
1406:       assertFalse(node0.isStringKey());
1407:       
1408:       int int0 = node3.getSourceOffset();
1409:       assertNotSame(node2, node0);
1410:       assertFalse(node1.equals((Object)node3));
1411:       assertFalse(node1.equals((Object)node2));
1412:       assertFalse(node1.equals((Object)node0));
1413:       assertFalse(node2.equals((Object)node1));
1414:       assertFalse(node2.equals((Object)node3));
1415:       assertFalse(node2.equals((Object)node0));
1416:       assertFalse(node3.equals((Object)node1));
1417:       assertFalse(node3.equals((Object)node0));
1418:       assertFalse(node3.equals((Object)node2));
1419:       assertEquals(54, Node.SLASH_V);
1420:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1421:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1422:       assertEquals(49, Node.DIRECT_EVAL);
1423:       assertEquals(57, Node.LAST_PROP);
1424:       assertEquals(1, Node.DECR_FLAG);
1425:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1426:       assertEquals(57, Node.REFLECTED_OBJECT);
1427:       assertEquals(50, Node.FREE_CALL);
1428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1429:       assertEquals(52, Node.LENGTH);
1430:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1431:       assertEquals(39, Node.EMPTY_BLOCK);
1432:       assertEquals(2, Node.POST_FLAG);
1433:       assertEquals(47, Node.IS_DISPATCHER);
1434:       assertEquals(46, Node.IS_NAMESPACE);
1435:       assertEquals(40, Node.ORIGINALNAME_PROP);
1436:       assertEquals(30, Node.VAR_ARGS_NAME);
1437:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1438:       assertEquals(36, Node.QUOTED_PROP);
1439:       assertEquals(53, Node.INPUT_ID);
1440:       assertEquals(43, Node.IS_CONSTANT_NAME);
1441:       assertEquals(55, Node.INFERRED_FUNCTION);
1442:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1443:       assertEquals(29, Node.JSDOC_INFO_PROP);
1444:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1445:       assertEquals(37, Node.OPT_ARG_NAME);
1446:       assertEquals(8, Node.FLAG_NO_THROWS);
1447:       assertEquals(48, Node.DIRECTIVES);
1448:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1449:       assertEquals(32, Node.INCRDECR_PROP);
1450:       assertEquals(56, Node.CHANGE_TIME);
1451:       assertEquals(12, Node.COLUMN_BITS);
1452:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1453:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1454:       assertEquals(4095, Node.COLUMN_MASK);
1455:       assertEquals(47, Node.IS_DISPATCHER);
1456:       assertEquals(29, Node.JSDOC_INFO_PROP);
1457:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1458:       assertEquals(56, Node.CHANGE_TIME);
1459:       assertEquals(37, Node.OPT_ARG_NAME);
1460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1461:       assertEquals(32, Node.INCRDECR_PROP);
1462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1463:       assertEquals(12, Node.COLUMN_BITS);
1464:       assertEquals(2, Node.POST_FLAG);
1465:       assertEquals(30, Node.VAR_ARGS_NAME);
1466:       assertEquals(43, Node.IS_CONSTANT_NAME);
1467:       assertEquals(1, Node.DECR_FLAG);
1468:       assertEquals(46, Node.IS_NAMESPACE);
1469:       assertEquals(54, Node.SLASH_V);
1470:       assertEquals(50, Node.FREE_CALL);
1471:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1472:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1473:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1474:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1475:       assertEquals(40, Node.ORIGINALNAME_PROP);
1476:       assertEquals(48, Node.DIRECTIVES);
1477:       assertEquals(39, Node.EMPTY_BLOCK);
1478:       assertEquals(4095, Node.COLUMN_MASK);
1479:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1480:       assertEquals(57, Node.LAST_PROP);
1481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1482:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1484:       assertEquals(53, Node.INPUT_ID);
1485:       assertEquals(49, Node.DIRECT_EVAL);
1486:       assertEquals(52, Node.LENGTH);
1487:       assertEquals(57, Node.REFLECTED_OBJECT);
1488:       assertEquals(55, Node.INFERRED_FUNCTION);
1489:       assertEquals(8, Node.FLAG_NO_THROWS);
1490:       assertEquals(36, Node.QUOTED_PROP);
1491:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1492:       assertEquals(54, Node.SLASH_V);
1493:       assertEquals(52, Node.LENGTH);
1494:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1495:       assertEquals(57, Node.LAST_PROP);
1496:       assertEquals(49, Node.DIRECT_EVAL);
1497:       assertEquals(1, Node.DECR_FLAG);
1498:       assertEquals(40, Node.ORIGINALNAME_PROP);
1499:       assertEquals(12, Node.COLUMN_BITS);
1500:       assertEquals(30, Node.VAR_ARGS_NAME);
1501:       assertEquals(48, Node.DIRECTIVES);
1502:       assertEquals(8, Node.FLAG_NO_THROWS);
1503:       assertEquals(39, Node.EMPTY_BLOCK);
1504:       assertEquals(56, Node.CHANGE_TIME);
1505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1506:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1507:       assertEquals(37, Node.OPT_ARG_NAME);
1508:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1509:       assertEquals(55, Node.INFERRED_FUNCTION);
1510:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1511:       assertEquals(29, Node.JSDOC_INFO_PROP);
1512:       assertEquals(57, Node.REFLECTED_OBJECT);
1513:       assertEquals(36, Node.QUOTED_PROP);
1514:       assertEquals(53, Node.INPUT_ID);
1515:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1516:       assertEquals(43, Node.IS_CONSTANT_NAME);
1517:       assertEquals(4095, Node.COLUMN_MASK);
1518:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1519:       assertEquals(47, Node.IS_DISPATCHER);
1520:       assertEquals(2, Node.POST_FLAG);
1521:       assertEquals(32, Node.INCRDECR_PROP);
1522:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1523:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1524:       assertEquals(46, Node.IS_NAMESPACE);
1525:       assertEquals(50, Node.FREE_CALL);
1526:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1527:       assertEquals((-1), int0);
1528:       assertFalse(node1.isTry());
1529:       assertFalse(node1.isTrue());
1530:       assertFalse(node1.isDebugger());
1531:       assertFalse(node1.isFunction());
1532:       assertFalse(node1.isRegExp());
1533:       assertFalse(node1.isEmpty());
1534:       assertFalse(node1.isFor());
1535:       assertFalse(node1.isDefaultCase());
1536:       assertFalse(node1.isCatch());
1537:       assertFalse(node1.isIn());
1538:       assertFalse(node1.isCall());
1539:       assertFalse(node1.isNull());
1540:       assertFalse(node1.isNE());
1541:       assertFalse(node1.isVoid());
1542:       assertFalse(node1.isIf());
1543:       assertFalse(node1.isDelProp());
1544:       assertFalse(node1.isName());
1545:       assertFalse(node1.isInc());
1546:       assertFalse(node1.isFalse());
1547:       assertFalse(node1.isString());
1548:       assertFalse(node1.isWhile());
1549:       assertFalse(node1.isThrow());
1550:       assertFalse(node1.isSetterDef());
1551:       assertTrue(node1.isNumber());
1552:       assertFalse(node1.isGetProp());
1553:       assertEquals((-1), node1.getSourcePosition());
1554:       assertFalse(node1.isContinue());
1555:       assertFalse(node1.isObjectLit());
1556:       assertFalse(node1.isNot());
1557:       assertFalse(node1.isAnd());
1558:       assertFalse(node1.isExprResult());
1559:       assertFalse(node1.isCast());
1560:       assertFalse(node1.isAssign());
1561:       assertFalse(node1.hasChildren());
1562:       assertFalse(node1.isScript());
1563:       assertFalse(node1.hasOneChild());
1564:       assertFalse(node1.isOr());
1565:       assertEquals((-1), node1.getLineno());
1566:       assertFalse(node1.isThis());
1567:       assertFalse(node1.isReturn());
1568:       assertFalse(node1.hasMoreThanOneChild());
1569:       assertFalse(node1.isInstanceOf());
1570:       assertFalse(node1.isComma());
1571:       assertFalse(node1.isDec());
1572:       assertFalse(node1.isTypeOf());
1573:       assertFalse(node1.isWith());
1574:       assertFalse(node1.isBreak());
1575:       assertFalse(node1.isGetElem());
1576:       assertFalse(node1.isNew());
1577:       assertEquals((-1), node1.getCharno());
1578:       assertFalse(node1.isBlock());
1579:       assertFalse(node1.isHook());
1580:       assertFalse(node1.isAdd());
1581:       assertEquals(39, node1.getType());
1582:       assertFalse(node1.isDo());
1583:       assertFalse(node1.isCase());
1584:       assertFalse(node1.isVar());
1585:       assertFalse(node1.isLabel());
1586:       assertFalse(node1.isAssignAdd());
1587:       assertFalse(node1.isGetterDef());
1588:       assertEquals(0, node1.getChildCount());
1589:       assertFalse(node1.isLabelName());
1590:       assertFalse(node1.isStringKey());
1591:       assertFalse(node1.isSwitch());
1592:       assertFalse(node1.isArrayLit());
1593:       assertFalse(node1.isParamList());
1594:       assertFalse(node2.isParamList());
1595:       assertFalse(node2.isSetterDef());
1596:       assertEquals(0, node2.getChildCount());
1597:       assertFalse(node2.isNull());
1598:       assertFalse(node2.isCatch());
1599:       assertFalse(node2.isCall());
1600:       assertFalse(node2.isStringKey());
1601:       assertFalse(node2.isName());
1602:       assertFalse(node2.isTrue());
1603:       assertFalse(node2.isFunction());
1604:       assertFalse(node2.isVoid());
1605:       assertFalse(node2.isDefaultCase());
1606:       assertEquals(40, node2.getType());
1607:       assertFalse(node2.isVar());
1608:       assertFalse(node2.isEmpty());
1609:       assertFalse(node2.isAdd());
1610:       assertFalse(node2.isDo());
1611:       assertFalse(node2.isNew());
1612:       assertFalse(node2.isNE());
1613:       assertFalse(node2.isNumber());
1614:       assertFalse(node2.isIf());
1615:       assertFalse(node2.isAssignAdd());
1616:       assertFalse(node2.isFor());
1617:       assertFalse(node2.isGetterDef());
1618:       assertFalse(node2.isLabel());
1619:       assertFalse(node2.hasMoreThanOneChild());
1620:       assertEquals((-1), node2.getLineno());
1621:       assertFalse(node2.isLabelName());
1622:       assertFalse(node2.isArrayLit());
1623:       assertFalse(node2.isRegExp());
1624:       assertFalse(node2.isScript());
1625:       assertTrue(node2.isString());
1626:       assertFalse(node2.isSwitch());
1627:       assertFalse(node2.isWith());
1628:       assertFalse(node2.isBlock());
1629:       assertFalse(node2.isHook());
1630:       assertEquals((-1), node2.getCharno());
1631:       assertFalse(node2.isTry());
1632:       assertFalse(node2.isCase());
1633:       assertFalse(node2.hasOneChild());
1634:       assertFalse(node2.isThis());
1635:       assertFalse(node2.isComma());
1636:       assertFalse(node2.isFalse());
1637:       assertFalse(node2.isInstanceOf());
1638:       assertFalse(node2.isAnd());
1639:       assertFalse(node2.isBreak());
1640:       assertFalse(node2.isInc());
1641:       assertFalse(node2.isThrow());
1642:       assertFalse(node2.isIn());
1643:       assertFalse(node2.isTypeOf());
1644:       assertFalse(node2.isReturn());
1645:       assertFalse(node2.isAssign());
1646:       assertFalse(node2.isOr());
1647:       assertEquals((-1), node2.getSourcePosition());
1648:       assertFalse(node2.isDec());
1649:       assertFalse(node2.hasChildren());
1650:       assertFalse(node2.isCast());
1651:       assertFalse(node2.isContinue());
1652:       assertFalse(node2.isDelProp());
1653:       assertFalse(node2.isGetElem());
1654:       assertFalse(node2.isExprResult());
1655:       assertFalse(node2.isWhile());
1656:       assertFalse(node2.isNot());
1657:       assertFalse(node2.isDebugger());
1658:       assertFalse(node2.isObjectLit());
1659:       assertFalse(node2.isGetProp());
1660:       assertFalse(node3.isTry());
1661:       assertFalse(node3.isTrue());
1662:       assertFalse(node3.isDebugger());
1663:       assertFalse(node3.isFunction());
1664:       assertFalse(node3.isRegExp());
1665:       assertFalse(node3.isIf());
1666:       assertFalse(node3.isCatch());
1667:       assertFalse(node3.isVoid());
1668:       assertFalse(node3.isArrayLit());
1669:       assertTrue(node3.hasChildren());
1670:       assertEquals(43, node3.getCharno());
1671:       assertFalse(node3.isParamList());
1672:       assertFalse(node3.isString());
1673:       assertFalse(node3.isFor());
1674:       assertFalse(node3.isGetterDef());
1675:       assertFalse(node3.isCase());
1676:       assertFalse(node3.isThrow());
1677:       assertFalse(node3.isBlock());
1678:       assertFalse(node3.isHook());
1679:       assertFalse(node3.isFalse());
1680:       assertFalse(node3.isContinue());
1681:       assertEquals(31, node3.getType());
1682:       assertFalse(node3.isIn());
1683:       assertFalse(node3.isNE());
1684:       assertTrue(node3.isDelProp());
1685:       assertEquals(57, node3.getLineno());
1686:       assertEquals(2, node3.getChildCount());
1687:       assertFalse(node3.isInc());
1688:       assertFalse(node3.isSetterDef());
1689:       assertFalse(node3.isLabelName());
1690:       assertFalse(node3.isDec());
1691:       assertFalse(node3.isAssign());
1692:       assertFalse(node3.isTypeOf());
1693:       assertFalse(node3.isWith());
1694:       assertFalse(node3.isExprResult());
1695:       assertFalse(node3.isCast());
1696:       assertFalse(node3.isGetElem());
1697:       assertEquals(233515, node3.getSourcePosition());
1698:       assertFalse(node3.isReturn());
1699:       assertFalse(node3.isInstanceOf());
1700:       assertFalse(node3.isObjectLit());
1701:       assertFalse(node3.isAnd());
1702:       assertFalse(node3.isThis());
1703:       assertFalse(node3.isComma());
1704:       assertFalse(node3.isWhile());
1705:       assertFalse(node3.isNot());
1706:       assertFalse(node3.isNumber());
1707:       assertFalse(node3.isScript());
1708:       assertFalse(node3.hasOneChild());
1709:       assertFalse(node3.isGetProp());
1710:       assertFalse(node3.isVar());
1711:       assertTrue(node3.hasMoreThanOneChild());
1712:       assertFalse(node3.isStringKey());
1713:       assertFalse(node3.isName());
1714:       assertFalse(node3.isSwitch());
1715:       assertFalse(node3.isCall());
1716:       assertFalse(node3.isBreak());
1717:       assertFalse(node3.isOr());
1718:       assertFalse(node3.isAssignAdd());
1719:       assertFalse(node3.isNull());
1720:       assertFalse(node3.isLabel());
1721:       assertFalse(node3.isEmpty());
1722:       assertFalse(node3.isDo());
1723:       assertFalse(node3.isDefaultCase());
1724:       assertFalse(node3.isAdd());
1725:       assertFalse(node3.isNew());
1726:       
1727:       int int1 = node2.getLength();
1728:       assertNotSame(node2, node0);
1729:       assertFalse(node2.equals((Object)node1));
1730:       assertFalse(node2.equals((Object)node3));
1731:       assertFalse(node2.equals((Object)node0));
1732:       assertFalse(int1 == int0);
1733:       assertEquals(47, Node.IS_DISPATCHER);
1734:       assertEquals(29, Node.JSDOC_INFO_PROP);
1735:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1736:       assertEquals(56, Node.CHANGE_TIME);
1737:       assertEquals(37, Node.OPT_ARG_NAME);
1738:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1739:       assertEquals(32, Node.INCRDECR_PROP);
1740:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1741:       assertEquals(12, Node.COLUMN_BITS);
1742:       assertEquals(2, Node.POST_FLAG);
1743:       assertEquals(30, Node.VAR_ARGS_NAME);
1744:       assertEquals(43, Node.IS_CONSTANT_NAME);
1745:       assertEquals(1, Node.DECR_FLAG);
1746:       assertEquals(46, Node.IS_NAMESPACE);
1747:       assertEquals(54, Node.SLASH_V);
1748:       assertEquals(50, Node.FREE_CALL);
1749:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1750:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1751:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1752:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1753:       assertEquals(40, Node.ORIGINALNAME_PROP);
1754:       assertEquals(48, Node.DIRECTIVES);
1755:       assertEquals(39, Node.EMPTY_BLOCK);
1756:       assertEquals(4095, Node.COLUMN_MASK);
1757:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1758:       assertEquals(57, Node.LAST_PROP);
1759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1760:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1761:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1762:       assertEquals(53, Node.INPUT_ID);
1763:       assertEquals(49, Node.DIRECT_EVAL);
1764:       assertEquals(52, Node.LENGTH);
1765:       assertEquals(57, Node.REFLECTED_OBJECT);
1766:       assertEquals(55, Node.INFERRED_FUNCTION);
1767:       assertEquals(8, Node.FLAG_NO_THROWS);
1768:       assertEquals(36, Node.QUOTED_PROP);
1769:       assertEquals(0, int1);
1770:       assertFalse(node2.isParamList());
1771:       assertFalse(node2.isSetterDef());
1772:       assertEquals(0, node2.getChildCount());
1773:       assertFalse(node2.isNull());
1774:       assertFalse(node2.isCatch());
1775:       assertFalse(node2.isCall());
1776:       assertFalse(node2.isStringKey());
1777:       assertFalse(node2.isName());
1778:       assertFalse(node2.isTrue());
1779:       assertFalse(node2.isFunction());
1780:       assertFalse(node2.isVoid());
1781:       assertFalse(node2.isDefaultCase());
1782:       assertEquals(40, node2.getType());
1783:       assertFalse(node2.isVar());
1784:       assertFalse(node2.isEmpty());
1785:       assertFalse(node2.isAdd());
1786:       assertFalse(node2.isDo());
1787:       assertFalse(node2.isNew());
1788:       assertFalse(node2.isNE());
1789:       assertFalse(node2.isNumber());
1790:       assertFalse(node2.isIf());
1791:       assertFalse(node2.isAssignAdd());
1792:       assertFalse(node2.isFor());
1793:       assertFalse(node2.isGetterDef());
1794:       assertFalse(node2.isLabel());
1795:       assertFalse(node2.hasMoreThanOneChild());
1796:       assertEquals((-1), node2.getLineno());
1797:       assertFalse(node2.isLabelName());
1798:       assertFalse(node2.isArrayLit());
1799:       assertFalse(node2.isRegExp());
1800:       assertFalse(node2.isScript());
1801:       assertTrue(node2.isString());
1802:       assertFalse(node2.isSwitch());
1803:       assertFalse(node2.isWith());
1804:       assertFalse(node2.isBlock());
1805:       assertFalse(node2.isHook());
1806:       assertEquals((-1), node2.getCharno());
1807:       assertFalse(node2.isTry());
1808:       assertFalse(node2.isCase());
1809:       assertFalse(node2.hasOneChild());
1810:       assertFalse(node2.isThis());
1811:       assertFalse(node2.isComma());
1812:       assertFalse(node2.isFalse());
1813:       assertFalse(node2.isInstanceOf());
1814:       assertFalse(node2.isAnd());
1815:       assertFalse(node2.isBreak());
1816:       assertFalse(node2.isInc());
1817:       assertFalse(node2.isThrow());
1818:       assertFalse(node2.isIn());
1819:       assertFalse(node2.isTypeOf());
1820:       assertFalse(node2.isReturn());
1821:       assertFalse(node2.isAssign());
1822:       assertFalse(node2.isOr());
1823:       assertEquals((-1), node2.getSourcePosition());
1824:       assertFalse(node2.isDec());
1825:       assertFalse(node2.hasChildren());
1826:       assertFalse(node2.isCast());
1827:       assertFalse(node2.isContinue());
1828:       assertFalse(node2.isDelProp());
1829:       assertFalse(node2.isGetElem());
1830:       assertFalse(node2.isExprResult());
1831:       assertFalse(node2.isWhile());
1832:       assertFalse(node2.isNot());
1833:       assertFalse(node2.isDebugger());
1834:       assertFalse(node2.isObjectLit());
1835:       assertFalse(node2.isGetProp());
1836:       
1837:       boolean boolean0 = true;
1838:       // Undeclared exception!
1839:       try { 
1840:         node2.replaceChild(node0, node1);
1841:         fail("Expecting exception: IllegalArgumentException");
1842:       
1843:       } catch(IllegalArgumentException e) {
1844:          //
1845:          // The new child node has siblings.
1846:          //
1847:          verifyException("com.google.common.base.Preconditions", e);
1848:       }
1849:   }
1850: }
RegularFileObject[/tmp/EvoSuite_47_1628256070881/com/google/javascript/rhino/Node_47_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:11 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_47_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_47_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_47_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:11.286 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(514, "com.google.javascript.rhino.Node$StringNode");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(514, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertNotNull(node0);

String string0 = node0.getSourceFileName();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(514, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertNull(string0);

Node node1 = Node.newNumber((double) 47);
assertFalse(node1.equals((Object)node0));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isAdd());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertNotNull(node1);

node0.setString("~7VH 6d?h7`htWG ");
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(514, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

Node node2 = Node.newString("~7VH 6d?h7`htWG ");
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertNotNull(node2);

Node node3 = new Node(31, node1, node1, node1, node2, 57, 43);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isAdd());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isIf());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertTrue(node3.hasChildren());
assertEquals(43, node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isString());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isThrow());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertEquals(31, node3.getType());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertTrue(node3.isDelProp());
assertEquals(57, node3.getLineno());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertEquals(233515, node3.getSourcePosition());
assertFalse(node3.isReturn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isVar());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isSwitch());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNull());
assertFalse(node3.isLabel());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());
assertNotNull(node3);

Iterable<Node> iterable0 = node2.children();
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(iterable0.contains(node2));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertNotNull(iterable0);

Node.NodeMismatch node_NodeMismatch0 = node2.checkTreeEqualsImpl(node0);
assertNotSame(node0, node2);
assertNotSame(node2, node0);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(514, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertNotNull(node_NodeMismatch0);

String string1 = node1.toString();
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals("NUMBER 47.0", string1);
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isAdd());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertNotNull(string1);

node0.setOptionalArg(true);
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node2));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node3));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isHook());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isReturn());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNot());
assertFalse(node0.isString());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isAdd());
assertFalse(node0.isBlock());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isRegExp());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertEquals(514, node0.getType());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isOr());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNull());
assertFalse(node0.isLabelName());
assertFalse(node0.isArrayLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNumber());
assertFalse(node0.isEmpty());
assertFalse(node0.isTry());
assertFalse(node0.isLabel());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isFor());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isCase());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());

int int0 = node3.getSourceOffset();
assertNotSame(node2, node0);
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals((-1), int0);
assertFalse(node1.isTry());
assertFalse(node1.isTrue());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isRegExp());
assertFalse(node1.isEmpty());
assertFalse(node1.isFor());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isCatch());
assertFalse(node1.isIn());
assertFalse(node1.isCall());
assertFalse(node1.isNull());
assertFalse(node1.isNE());
assertFalse(node1.isVoid());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isName());
assertFalse(node1.isInc());
assertFalse(node1.isFalse());
assertFalse(node1.isString());
assertFalse(node1.isWhile());
assertFalse(node1.isThrow());
assertFalse(node1.isSetterDef());
assertTrue(node1.isNumber());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isContinue());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isCast());
assertFalse(node1.isAssign());
assertFalse(node1.hasChildren());
assertFalse(node1.isScript());
assertFalse(node1.hasOneChild());
assertFalse(node1.isOr());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isComma());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isNew());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isBlock());
assertFalse(node1.isHook());
assertFalse(node1.isAdd());
assertEquals(39, node1.getType());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isVar());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isGetterDef());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());
assertFalse(node1.isStringKey());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());
assertFalse(node3.isTry());
assertFalse(node3.isTrue());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isRegExp());
assertFalse(node3.isIf());
assertFalse(node3.isCatch());
assertFalse(node3.isVoid());
assertFalse(node3.isArrayLit());
assertTrue(node3.hasChildren());
assertEquals(43, node3.getCharno());
assertFalse(node3.isParamList());
assertFalse(node3.isString());
assertFalse(node3.isFor());
assertFalse(node3.isGetterDef());
assertFalse(node3.isCase());
assertFalse(node3.isThrow());
assertFalse(node3.isBlock());
assertFalse(node3.isHook());
assertFalse(node3.isFalse());
assertFalse(node3.isContinue());
assertEquals(31, node3.getType());
assertFalse(node3.isIn());
assertFalse(node3.isNE());
assertTrue(node3.isDelProp());
assertEquals(57, node3.getLineno());
assertEquals(2, node3.getChildCount());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isLabelName());
assertFalse(node3.isDec());
assertFalse(node3.isAssign());
assertFalse(node3.isTypeOf());
assertFalse(node3.isWith());
assertFalse(node3.isExprResult());
assertFalse(node3.isCast());
assertFalse(node3.isGetElem());
assertEquals(233515, node3.getSourcePosition());
assertFalse(node3.isReturn());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isObjectLit());
assertFalse(node3.isAnd());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isWhile());
assertFalse(node3.isNot());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.hasOneChild());
assertFalse(node3.isGetProp());
assertFalse(node3.isVar());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isStringKey());
assertFalse(node3.isName());
assertFalse(node3.isSwitch());
assertFalse(node3.isCall());
assertFalse(node3.isBreak());
assertFalse(node3.isOr());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isNull());
assertFalse(node3.isLabel());
assertFalse(node3.isEmpty());
assertFalse(node3.isDo());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isAdd());
assertFalse(node3.isNew());

int int1 = node2.getLength();
assertNotSame(node2, node0);
assertFalse(node2.equals((Object)node1));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(int1 == int0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(0, int1);
assertFalse(node2.isParamList());
assertFalse(node2.isSetterDef());
assertEquals(0, node2.getChildCount());
assertFalse(node2.isNull());
assertFalse(node2.isCatch());
assertFalse(node2.isCall());
assertFalse(node2.isStringKey());
assertFalse(node2.isName());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isVoid());
assertFalse(node2.isDefaultCase());
assertEquals(40, node2.getType());
assertFalse(node2.isVar());
assertFalse(node2.isEmpty());
assertFalse(node2.isAdd());
assertFalse(node2.isDo());
assertFalse(node2.isNew());
assertFalse(node2.isNE());
assertFalse(node2.isNumber());
assertFalse(node2.isIf());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isFor());
assertFalse(node2.isGetterDef());
assertFalse(node2.isLabel());
assertFalse(node2.hasMoreThanOneChild());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isLabelName());
assertFalse(node2.isArrayLit());
assertFalse(node2.isRegExp());
assertFalse(node2.isScript());
assertTrue(node2.isString());
assertFalse(node2.isSwitch());
assertFalse(node2.isWith());
assertFalse(node2.isBlock());
assertFalse(node2.isHook());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isTry());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isThis());
assertFalse(node2.isComma());
assertFalse(node2.isFalse());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isAnd());
assertFalse(node2.isBreak());
assertFalse(node2.isInc());
assertFalse(node2.isThrow());
assertFalse(node2.isIn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isReturn());
assertFalse(node2.isAssign());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.hasChildren());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isNot());
assertFalse(node2.isDebugger());
assertFalse(node2.isObjectLit());
assertFalse(node2.isGetProp());

boolean boolean0 = true;
node2.replaceChild(node0, node1);

[MASTER] 13:21:13.977 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_63_1628256073503/com/google/javascript/rhino/Node_63_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_63_1628256073503/com/google/javascript/rhino/Node_63_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:13.977 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:13.977 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:13.978 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 870
[MASTER] 13:21:13.981 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_63_1628256073503/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:13 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_63_tmp__ESTest extends Node_63_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString("Undefined");
21:       assertEquals(29, Node.JSDOC_INFO_PROP);
22:       assertEquals(47, Node.IS_DISPATCHER);
23:       assertEquals(2, Node.POST_FLAG);
24:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
25:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
26:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
27:       assertEquals(32, Node.INCRDECR_PROP);
28:       assertEquals(53, Node.INPUT_ID);
29:       assertEquals(12, Node.COLUMN_BITS);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(15, Node.NO_SIDE_EFFECTS);
32:       assertEquals(36, Node.QUOTED_PROP);
33:       assertEquals(55, Node.INFERRED_FUNCTION);
34:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
35:       assertEquals(4095, Node.COLUMN_MASK);
36:       assertEquals(52, Node.LENGTH);
37:       assertEquals(48, Node.DIRECTIVES);
38:       assertEquals(37, Node.OPT_ARG_NAME);
39:       assertEquals(57, Node.REFLECTED_OBJECT);
40:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
41:       assertEquals(56, Node.CHANGE_TIME);
42:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
43:       assertEquals(50, Node.FREE_CALL);
44:       assertEquals(8, Node.FLAG_NO_THROWS);
45:       assertEquals(39, Node.EMPTY_BLOCK);
46:       assertEquals(40, Node.ORIGINALNAME_PROP);
47:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
48:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
49:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
50:       assertEquals(57, Node.LAST_PROP);
51:       assertEquals(30, Node.VAR_ARGS_NAME);
52:       assertEquals(1, Node.DECR_FLAG);
53:       assertEquals(51, Node.STATIC_SOURCE_FILE);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(54, Node.SLASH_V);
56:       assertEquals(43, Node.IS_CONSTANT_NAME);
57:       assertFalse(node0.isComma());
58:       assertFalse(node0.isBreak());
59:       assertFalse(node0.isThis());
60:       assertFalse(node0.isGetProp());
61:       assertFalse(node0.isThrow());
62:       assertFalse(node0.isInstanceOf());
63:       assertFalse(node0.isHook());
64:       assertFalse(node0.isFalse());
65:       assertFalse(node0.isWith());
66:       assertFalse(node0.isScript());
67:       assertEquals((-1), node0.getCharno());
68:       assertFalse(node0.isCase());
69:       assertFalse(node0.isAnd());
70:       assertFalse(node0.isSwitch());
71:       assertFalse(node0.hasOneChild());
72:       assertFalse(node0.isNot());
73:       assertFalse(node0.isObjectLit());
74:       assertFalse(node0.isNumber());
75:       assertFalse(node0.isTypeOf());
76:       assertFalse(node0.isDec());
77:       assertFalse(node0.hasChildren());
78:       assertFalse(node0.isLabelName());
79:       assertFalse(node0.isDelProp());
80:       assertFalse(node0.isAssignAdd());
81:       assertFalse(node0.isArrayLit());
82:       assertFalse(node0.isReturn());
83:       assertFalse(node0.isGetElem());
84:       assertFalse(node0.isLabel());
85:       assertFalse(node0.isAssign());
86:       assertFalse(node0.isTrue());
87:       assertFalse(node0.isExprResult());
88:       assertFalse(node0.isNew());
89:       assertFalse(node0.isVoid());
90:       assertFalse(node0.isDo());
91:       assertFalse(node0.isDefaultCase());
92:       assertFalse(node0.isAdd());
93:       assertFalse(node0.isEmpty());
94:       assertFalse(node0.isOr());
95:       assertFalse(node0.isNull());
96:       assertFalse(node0.isSetterDef());
97:       assertFalse(node0.isName());
98:       assertFalse(node0.isStringKey());
99:       assertFalse(node0.isParamList());
100:       assertFalse(node0.isCatch());
101:       assertEquals(0, node0.getChildCount());
102:       assertFalse(node0.isVar());
103:       assertFalse(node0.isCall());
104:       assertFalse(node0.isRegExp());
105:       assertFalse(node0.isDebugger());
106:       assertFalse(node0.isBlock());
107:       assertTrue(node0.isString());
108:       assertFalse(node0.isTry());
109:       assertFalse(node0.isWhile());
110:       assertFalse(node0.isGetterDef());
111:       assertEquals((-1), node0.getSourcePosition());
112:       assertFalse(node0.isNE());
113:       assertFalse(node0.isFor());
114:       assertFalse(node0.isIf());
115:       assertFalse(node0.isCast());
116:       assertEquals((-1), node0.getLineno());
117:       assertFalse(node0.isFunction());
118:       assertFalse(node0.isContinue());
119:       assertFalse(node0.hasMoreThanOneChild());
120:       assertFalse(node0.isInc());
121:       assertEquals(40, node0.getType());
122:       assertFalse(node0.isIn());
123:       
124:       Node node1 = Node.newString(".", 12, 108);
125:       assertNotSame(node1, node0);
126:       assertFalse(node1.equals((Object)node0));
127:       assertEquals(1, Node.DECR_FLAG);
128:       assertEquals(30, Node.VAR_ARGS_NAME);
129:       assertEquals(46, Node.IS_NAMESPACE);
130:       assertEquals(51, Node.STATIC_SOURCE_FILE);
131:       assertEquals(12, Node.COLUMN_BITS);
132:       assertEquals(37, Node.OPT_ARG_NAME);
133:       assertEquals(2, Node.POST_FLAG);
134:       assertEquals(54, Node.SLASH_V);
135:       assertEquals(56, Node.CHANGE_TIME);
136:       assertEquals(49, Node.DIRECT_EVAL);
137:       assertEquals(40, Node.ORIGINALNAME_PROP);
138:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
139:       assertEquals(57, Node.REFLECTED_OBJECT);
140:       assertEquals(47, Node.IS_DISPATCHER);
141:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
142:       assertEquals(52, Node.LENGTH);
143:       assertEquals(8, Node.FLAG_NO_THROWS);
144:       assertEquals(57, Node.LAST_PROP);
145:       assertEquals(29, Node.JSDOC_INFO_PROP);
146:       assertEquals(53, Node.INPUT_ID);
147:       assertEquals(15, Node.NO_SIDE_EFFECTS);
148:       assertEquals(39, Node.EMPTY_BLOCK);
149:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
150:       assertEquals(55, Node.INFERRED_FUNCTION);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(36, Node.QUOTED_PROP);
153:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(43, Node.IS_CONSTANT_NAME);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
158:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(32, Node.INCRDECR_PROP);
162:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
163:       assertFalse(node1.isNot());
164:       assertFalse(node1.isWith());
165:       assertFalse(node1.isObjectLit());
166:       assertFalse(node1.isInstanceOf());
167:       assertFalse(node1.isExprResult());
168:       assertFalse(node1.isScript());
169:       assertFalse(node1.isAnd());
170:       assertFalse(node1.isAssign());
171:       assertFalse(node1.isDec());
172:       assertFalse(node1.isNumber());
173:       assertFalse(node1.isTypeOf());
174:       assertFalse(node1.isBreak());
175:       assertFalse(node1.isGetProp());
176:       assertFalse(node1.isGetElem());
177:       assertFalse(node1.isReturn());
178:       assertFalse(node1.hasOneChild());
179:       assertFalse(node1.isThis());
180:       assertFalse(node1.isComma());
181:       assertFalse(node1.hasChildren());
182:       assertFalse(node1.isHook());
183:       assertFalse(node1.isWhile());
184:       assertFalse(node1.hasMoreThanOneChild());
185:       assertFalse(node1.isContinue());
186:       assertFalse(node1.isInc());
187:       assertFalse(node1.isIn());
188:       assertFalse(node1.isNE());
189:       assertFalse(node1.isFalse());
190:       assertFalse(node1.isSetterDef());
191:       assertFalse(node1.isCast());
192:       assertEquals(108, node1.getCharno());
193:       assertFalse(node1.isFunction());
194:       assertEquals(12, node1.getLineno());
195:       assertFalse(node1.isThrow());
196:       assertEquals(40, node1.getType());
197:       assertFalse(node1.isDefaultCase());
198:       assertFalse(node1.isRegExp());
199:       assertFalse(node1.isCatch());
200:       assertFalse(node1.isVoid());
201:       assertFalse(node1.isDebugger());
202:       assertFalse(node1.isParamList());
203:       assertFalse(node1.isTrue());
204:       assertFalse(node1.isNull());
205:       assertFalse(node1.isIf());
206:       assertFalse(node1.isDelProp());
207:       assertFalse(node1.isGetterDef());
208:       assertEquals(49260, node1.getSourcePosition());
209:       assertFalse(node1.isName());
210:       assertFalse(node1.isCall());
211:       assertFalse(node1.isTry());
212:       assertTrue(node1.isString());
213:       assertFalse(node1.isFor());
214:       assertFalse(node1.isBlock());
215:       assertFalse(node1.isDo());
216:       assertFalse(node1.isCase());
217:       assertFalse(node1.isAdd());
218:       assertFalse(node1.isOr());
219:       assertFalse(node1.isSwitch());
220:       assertFalse(node1.isStringKey());
221:       assertFalse(node1.isLabelName());
222:       assertFalse(node1.isEmpty());
223:       assertFalse(node1.isArrayLit());
224:       assertFalse(node1.isAssignAdd());
225:       assertFalse(node1.isLabel());
226:       assertFalse(node1.isNew());
227:       assertEquals(0, node1.getChildCount());
228:       assertFalse(node1.isVar());
229:       
230:       boolean boolean0 = node1.isSyntheticBlock();
231:       assertNotSame(node1, node0);
232:       assertFalse(node1.equals((Object)node0));
233:       assertEquals(1, Node.DECR_FLAG);
234:       assertEquals(30, Node.VAR_ARGS_NAME);
235:       assertEquals(46, Node.IS_NAMESPACE);
236:       assertEquals(51, Node.STATIC_SOURCE_FILE);
237:       assertEquals(12, Node.COLUMN_BITS);
238:       assertEquals(37, Node.OPT_ARG_NAME);
239:       assertEquals(2, Node.POST_FLAG);
240:       assertEquals(54, Node.SLASH_V);
241:       assertEquals(56, Node.CHANGE_TIME);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(40, Node.ORIGINALNAME_PROP);
244:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
245:       assertEquals(57, Node.REFLECTED_OBJECT);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
248:       assertEquals(52, Node.LENGTH);
249:       assertEquals(8, Node.FLAG_NO_THROWS);
250:       assertEquals(57, Node.LAST_PROP);
251:       assertEquals(29, Node.JSDOC_INFO_PROP);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(15, Node.NO_SIDE_EFFECTS);
254:       assertEquals(39, Node.EMPTY_BLOCK);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(55, Node.INFERRED_FUNCTION);
257:       assertEquals(4095, Node.COLUMN_MASK);
258:       assertEquals(36, Node.QUOTED_PROP);
259:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
260:       assertEquals(48, Node.DIRECTIVES);
261:       assertEquals(43, Node.IS_CONSTANT_NAME);
262:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(50, Node.FREE_CALL);
266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
267:       assertEquals(32, Node.INCRDECR_PROP);
268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
269:       assertFalse(boolean0);
270:       assertFalse(node1.isNot());
271:       assertFalse(node1.isWith());
272:       assertFalse(node1.isObjectLit());
273:       assertFalse(node1.isInstanceOf());
274:       assertFalse(node1.isExprResult());
275:       assertFalse(node1.isScript());
276:       assertFalse(node1.isAnd());
277:       assertFalse(node1.isAssign());
278:       assertFalse(node1.isDec());
279:       assertFalse(node1.isNumber());
280:       assertFalse(node1.isTypeOf());
281:       assertFalse(node1.isBreak());
282:       assertFalse(node1.isGetProp());
283:       assertFalse(node1.isGetElem());
284:       assertFalse(node1.isReturn());
285:       assertFalse(node1.hasOneChild());
286:       assertFalse(node1.isThis());
287:       assertFalse(node1.isComma());
288:       assertFalse(node1.hasChildren());
289:       assertFalse(node1.isHook());
290:       assertFalse(node1.isWhile());
291:       assertFalse(node1.hasMoreThanOneChild());
292:       assertFalse(node1.isContinue());
293:       assertFalse(node1.isInc());
294:       assertFalse(node1.isIn());
295:       assertFalse(node1.isNE());
296:       assertFalse(node1.isFalse());
297:       assertFalse(node1.isSetterDef());
298:       assertFalse(node1.isCast());
299:       assertEquals(108, node1.getCharno());
300:       assertFalse(node1.isFunction());
301:       assertEquals(12, node1.getLineno());
302:       assertFalse(node1.isThrow());
303:       assertEquals(40, node1.getType());
304:       assertFalse(node1.isDefaultCase());
305:       assertFalse(node1.isRegExp());
306:       assertFalse(node1.isCatch());
307:       assertFalse(node1.isVoid());
308:       assertFalse(node1.isDebugger());
309:       assertFalse(node1.isParamList());
310:       assertFalse(node1.isTrue());
311:       assertFalse(node1.isNull());
312:       assertFalse(node1.isIf());
313:       assertFalse(node1.isDelProp());
314:       assertFalse(node1.isGetterDef());
315:       assertEquals(49260, node1.getSourcePosition());
316:       assertFalse(node1.isName());
317:       assertFalse(node1.isCall());
318:       assertFalse(node1.isTry());
319:       assertTrue(node1.isString());
320:       assertFalse(node1.isFor());
321:       assertFalse(node1.isBlock());
322:       assertFalse(node1.isDo());
323:       assertFalse(node1.isCase());
324:       assertFalse(node1.isAdd());
325:       assertFalse(node1.isOr());
326:       assertFalse(node1.isSwitch());
327:       assertFalse(node1.isStringKey());
328:       assertFalse(node1.isLabelName());
329:       assertFalse(node1.isEmpty());
330:       assertFalse(node1.isArrayLit());
331:       assertFalse(node1.isAssignAdd());
332:       assertFalse(node1.isLabel());
333:       assertFalse(node1.isNew());
334:       assertEquals(0, node1.getChildCount());
335:       assertFalse(node1.isVar());
336:       
337:       Node node2 = Node.newString(".");
338:       assertNotSame(node2, node0);
339:       assertNotSame(node2, node1);
340:       assertFalse(node2.equals((Object)node0));
341:       assertFalse(node2.equals((Object)node1));
342:       assertEquals(56, Node.CHANGE_TIME);
343:       assertEquals(47, Node.IS_DISPATCHER);
344:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
345:       assertEquals(2, Node.POST_FLAG);
346:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
347:       assertEquals(37, Node.OPT_ARG_NAME);
348:       assertEquals(29, Node.JSDOC_INFO_PROP);
349:       assertEquals(51, Node.STATIC_SOURCE_FILE);
350:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
351:       assertEquals(46, Node.IS_NAMESPACE);
352:       assertEquals(49, Node.DIRECT_EVAL);
353:       assertEquals(1, Node.DECR_FLAG);
354:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
355:       assertEquals(4095, Node.COLUMN_MASK);
356:       assertEquals(32, Node.INCRDECR_PROP);
357:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
358:       assertEquals(12, Node.COLUMN_BITS);
359:       assertEquals(8, Node.FLAG_NO_THROWS);
360:       assertEquals(50, Node.FREE_CALL);
361:       assertEquals(48, Node.DIRECTIVES);
362:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
363:       assertEquals(39, Node.EMPTY_BLOCK);
364:       assertEquals(40, Node.ORIGINALNAME_PROP);
365:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
366:       assertEquals(57, Node.REFLECTED_OBJECT);
367:       assertEquals(52, Node.LENGTH);
368:       assertEquals(54, Node.SLASH_V);
369:       assertEquals(43, Node.IS_CONSTANT_NAME);
370:       assertEquals(15, Node.NO_SIDE_EFFECTS);
371:       assertEquals(57, Node.LAST_PROP);
372:       assertEquals(36, Node.QUOTED_PROP);
373:       assertEquals(30, Node.VAR_ARGS_NAME);
374:       assertEquals(55, Node.INFERRED_FUNCTION);
375:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
376:       assertEquals(53, Node.INPUT_ID);
377:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
378:       assertFalse(node2.isSetterDef());
379:       assertFalse(node2.isNull());
380:       assertFalse(node2.isParamList());
381:       assertFalse(node2.isStringKey());
382:       assertFalse(node2.isAdd());
383:       assertFalse(node2.isDebugger());
384:       assertFalse(node2.isFunction());
385:       assertFalse(node2.isNew());
386:       assertFalse(node2.isDefaultCase());
387:       assertFalse(node2.isVar());
388:       assertFalse(node2.isContinue());
389:       assertEquals(40, node2.getType());
390:       assertFalse(node2.isArrayLit());
391:       assertEquals(0, node2.getChildCount());
392:       assertEquals((-1), node2.getLineno());
393:       assertFalse(node2.isIf());
394:       assertFalse(node2.isFor());
395:       assertFalse(node2.isNE());
396:       assertFalse(node2.isCase());
397:       assertFalse(node2.hasOneChild());
398:       assertFalse(node2.isGetterDef());
399:       assertFalse(node2.isIn());
400:       assertFalse(node2.isNumber());
401:       assertFalse(node2.isBlock());
402:       assertFalse(node2.isRegExp());
403:       assertFalse(node2.isTry());
404:       assertTrue(node2.isString());
405:       assertFalse(node2.isHook());
406:       assertFalse(node2.hasMoreThanOneChild());
407:       assertFalse(node2.isWith());
408:       assertFalse(node2.isCatch());
409:       assertFalse(node2.isInstanceOf());
410:       assertFalse(node2.isThis());
411:       assertFalse(node2.isGetProp());
412:       assertFalse(node2.isComma());
413:       assertFalse(node2.isThrow());
414:       assertFalse(node2.isObjectLit());
415:       assertFalse(node2.isNot());
416:       assertFalse(node2.isScript());
417:       assertEquals((-1), node2.getCharno());
418:       assertFalse(node2.isInc());
419:       assertFalse(node2.isSwitch());
420:       assertFalse(node2.isAnd());
421:       assertFalse(node2.isFalse());
422:       assertFalse(node2.isLabelName());
423:       assertFalse(node2.isCast());
424:       assertFalse(node2.isTypeOf());
425:       assertFalse(node2.isLabel());
426:       assertFalse(node2.isOr());
427:       assertEquals((-1), node2.getSourcePosition());
428:       assertFalse(node2.isDec());
429:       assertFalse(node2.isDelProp());
430:       assertFalse(node2.hasChildren());
431:       assertFalse(node2.isReturn());
432:       assertFalse(node2.isAssignAdd());
433:       assertFalse(node2.isDo());
434:       assertFalse(node2.isEmpty());
435:       assertFalse(node2.isTrue());
436:       assertFalse(node2.isVoid());
437:       assertFalse(node2.isExprResult());
438:       assertFalse(node2.isWhile());
439:       assertFalse(node2.isCall());
440:       assertFalse(node2.isGetElem());
441:       assertFalse(node2.isAssign());
442:       assertFalse(node2.isName());
443:       assertFalse(node2.isBreak());
444:       
445:       Node node3 = new Node((-1600), node0, node1, node2, node2, 31, (-2139));
446:       assertFalse(node0.equals((Object)node1));
447:       assertFalse(node0.equals((Object)node2));
448:       assertFalse(node1.equals((Object)node2));
449:       assertFalse(node1.equals((Object)node0));
450:       assertFalse(node2.equals((Object)node0));
451:       assertFalse(node2.equals((Object)node1));
452:       assertFalse(node3.equals((Object)node0));
453:       assertFalse(node3.equals((Object)node2));
454:       assertFalse(node3.equals((Object)node1));
455:       assertEquals(29, Node.JSDOC_INFO_PROP);
456:       assertEquals(47, Node.IS_DISPATCHER);
457:       assertEquals(2, Node.POST_FLAG);
458:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
459:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
460:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
461:       assertEquals(32, Node.INCRDECR_PROP);
462:       assertEquals(53, Node.INPUT_ID);
463:       assertEquals(12, Node.COLUMN_BITS);
464:       assertEquals(49, Node.DIRECT_EVAL);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(36, Node.QUOTED_PROP);
467:       assertEquals(55, Node.INFERRED_FUNCTION);
468:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
469:       assertEquals(4095, Node.COLUMN_MASK);
470:       assertEquals(52, Node.LENGTH);
471:       assertEquals(48, Node.DIRECTIVES);
472:       assertEquals(37, Node.OPT_ARG_NAME);
473:       assertEquals(57, Node.REFLECTED_OBJECT);
474:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
475:       assertEquals(56, Node.CHANGE_TIME);
476:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
477:       assertEquals(50, Node.FREE_CALL);
478:       assertEquals(8, Node.FLAG_NO_THROWS);
479:       assertEquals(39, Node.EMPTY_BLOCK);
480:       assertEquals(40, Node.ORIGINALNAME_PROP);
481:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
482:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
483:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
484:       assertEquals(57, Node.LAST_PROP);
485:       assertEquals(30, Node.VAR_ARGS_NAME);
486:       assertEquals(1, Node.DECR_FLAG);
487:       assertEquals(51, Node.STATIC_SOURCE_FILE);
488:       assertEquals(46, Node.IS_NAMESPACE);
489:       assertEquals(54, Node.SLASH_V);
490:       assertEquals(43, Node.IS_CONSTANT_NAME);
491:       assertEquals(1, Node.DECR_FLAG);
492:       assertEquals(30, Node.VAR_ARGS_NAME);
493:       assertEquals(46, Node.IS_NAMESPACE);
494:       assertEquals(51, Node.STATIC_SOURCE_FILE);
495:       assertEquals(12, Node.COLUMN_BITS);
496:       assertEquals(37, Node.OPT_ARG_NAME);
497:       assertEquals(2, Node.POST_FLAG);
498:       assertEquals(54, Node.SLASH_V);
499:       assertEquals(56, Node.CHANGE_TIME);
500:       assertEquals(49, Node.DIRECT_EVAL);
501:       assertEquals(40, Node.ORIGINALNAME_PROP);
502:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
503:       assertEquals(57, Node.REFLECTED_OBJECT);
504:       assertEquals(47, Node.IS_DISPATCHER);
505:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
506:       assertEquals(52, Node.LENGTH);
507:       assertEquals(8, Node.FLAG_NO_THROWS);
508:       assertEquals(57, Node.LAST_PROP);
509:       assertEquals(29, Node.JSDOC_INFO_PROP);
510:       assertEquals(53, Node.INPUT_ID);
511:       assertEquals(15, Node.NO_SIDE_EFFECTS);
512:       assertEquals(39, Node.EMPTY_BLOCK);
513:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
514:       assertEquals(55, Node.INFERRED_FUNCTION);
515:       assertEquals(4095, Node.COLUMN_MASK);
516:       assertEquals(36, Node.QUOTED_PROP);
517:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
518:       assertEquals(48, Node.DIRECTIVES);
519:       assertEquals(43, Node.IS_CONSTANT_NAME);
520:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
521:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
522:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
523:       assertEquals(50, Node.FREE_CALL);
524:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
525:       assertEquals(32, Node.INCRDECR_PROP);
526:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
527:       assertEquals(56, Node.CHANGE_TIME);
528:       assertEquals(47, Node.IS_DISPATCHER);
529:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
530:       assertEquals(2, Node.POST_FLAG);
531:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
532:       assertEquals(37, Node.OPT_ARG_NAME);
533:       assertEquals(29, Node.JSDOC_INFO_PROP);
534:       assertEquals(51, Node.STATIC_SOURCE_FILE);
535:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
536:       assertEquals(46, Node.IS_NAMESPACE);
537:       assertEquals(49, Node.DIRECT_EVAL);
538:       assertEquals(1, Node.DECR_FLAG);
539:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
540:       assertEquals(4095, Node.COLUMN_MASK);
541:       assertEquals(32, Node.INCRDECR_PROP);
542:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
543:       assertEquals(12, Node.COLUMN_BITS);
544:       assertEquals(8, Node.FLAG_NO_THROWS);
545:       assertEquals(50, Node.FREE_CALL);
546:       assertEquals(48, Node.DIRECTIVES);
547:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
548:       assertEquals(39, Node.EMPTY_BLOCK);
549:       assertEquals(40, Node.ORIGINALNAME_PROP);
550:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
551:       assertEquals(57, Node.REFLECTED_OBJECT);
552:       assertEquals(52, Node.LENGTH);
553:       assertEquals(54, Node.SLASH_V);
554:       assertEquals(43, Node.IS_CONSTANT_NAME);
555:       assertEquals(15, Node.NO_SIDE_EFFECTS);
556:       assertEquals(57, Node.LAST_PROP);
557:       assertEquals(36, Node.QUOTED_PROP);
558:       assertEquals(30, Node.VAR_ARGS_NAME);
559:       assertEquals(55, Node.INFERRED_FUNCTION);
560:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
561:       assertEquals(53, Node.INPUT_ID);
562:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
563:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
564:       assertEquals(50, Node.FREE_CALL);
565:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
566:       assertEquals(8, Node.FLAG_NO_THROWS);
567:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
568:       assertEquals(57, Node.REFLECTED_OBJECT);
569:       assertEquals(52, Node.LENGTH);
570:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
571:       assertEquals(55, Node.INFERRED_FUNCTION);
572:       assertEquals(15, Node.NO_SIDE_EFFECTS);
573:       assertEquals(39, Node.EMPTY_BLOCK);
574:       assertEquals(30, Node.VAR_ARGS_NAME);
575:       assertEquals(43, Node.IS_CONSTANT_NAME);
576:       assertEquals(57, Node.LAST_PROP);
577:       assertEquals(54, Node.SLASH_V);
578:       assertEquals(51, Node.STATIC_SOURCE_FILE);
579:       assertEquals(46, Node.IS_NAMESPACE);
580:       assertEquals(40, Node.ORIGINALNAME_PROP);
581:       assertEquals(56, Node.CHANGE_TIME);
582:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
583:       assertEquals(2, Node.POST_FLAG);
584:       assertEquals(47, Node.IS_DISPATCHER);
585:       assertEquals(32, Node.INCRDECR_PROP);
586:       assertEquals(1, Node.DECR_FLAG);
587:       assertEquals(29, Node.JSDOC_INFO_PROP);
588:       assertEquals(53, Node.INPUT_ID);
589:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
590:       assertEquals(49, Node.DIRECT_EVAL);
591:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
592:       assertEquals(12, Node.COLUMN_BITS);
593:       assertEquals(36, Node.QUOTED_PROP);
594:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
595:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
596:       assertEquals(4095, Node.COLUMN_MASK);
597:       assertEquals(37, Node.OPT_ARG_NAME);
598:       assertEquals(48, Node.DIRECTIVES);
599:       assertFalse(node0.isComma());
600:       assertFalse(node0.isBreak());
601:       assertFalse(node0.isThis());
602:       assertFalse(node0.isGetProp());
603:       assertFalse(node0.isThrow());
604:       assertFalse(node0.isInstanceOf());
605:       assertFalse(node0.isHook());
606:       assertFalse(node0.isFalse());
607:       assertFalse(node0.isWith());
608:       assertFalse(node0.isScript());
609:       assertEquals((-1), node0.getCharno());
610:       assertFalse(node0.isCase());
611:       assertFalse(node0.isAnd());
612:       assertFalse(node0.isSwitch());
613:       assertFalse(node0.hasOneChild());
614:       assertFalse(node0.isNot());
615:       assertFalse(node0.isObjectLit());
616:       assertFalse(node0.isNumber());
617:       assertFalse(node0.isTypeOf());
618:       assertFalse(node0.isDec());
619:       assertFalse(node0.hasChildren());
620:       assertFalse(node0.isLabelName());
621:       assertFalse(node0.isDelProp());
622:       assertFalse(node0.isAssignAdd());
623:       assertFalse(node0.isArrayLit());
624:       assertFalse(node0.isReturn());
625:       assertFalse(node0.isGetElem());
626:       assertFalse(node0.isLabel());
627:       assertFalse(node0.isAssign());
628:       assertFalse(node0.isTrue());
629:       assertFalse(node0.isExprResult());
630:       assertFalse(node0.isNew());
631:       assertFalse(node0.isVoid());
632:       assertFalse(node0.isDo());
633:       assertFalse(node0.isDefaultCase());
634:       assertFalse(node0.isAdd());
635:       assertFalse(node0.isEmpty());
636:       assertFalse(node0.isOr());
637:       assertFalse(node0.isNull());
638:       assertFalse(node0.isSetterDef());
639:       assertFalse(node0.isName());
640:       assertFalse(node0.isStringKey());
641:       assertFalse(node0.isParamList());
642:       assertFalse(node0.isCatch());
643:       assertEquals(0, node0.getChildCount());
644:       assertFalse(node0.isVar());
645:       assertFalse(node0.isCall());
646:       assertFalse(node0.isRegExp());
647:       assertFalse(node0.isDebugger());
648:       assertFalse(node0.isBlock());
649:       assertTrue(node0.isString());
650:       assertFalse(node0.isTry());
651:       assertFalse(node0.isWhile());
652:       assertFalse(node0.isGetterDef());
653:       assertEquals((-1), node0.getSourcePosition());
654:       assertFalse(node0.isNE());
655:       assertFalse(node0.isFor());
656:       assertFalse(node0.isIf());
657:       assertFalse(node0.isCast());
658:       assertEquals((-1), node0.getLineno());
659:       assertFalse(node0.isFunction());
660:       assertFalse(node0.isContinue());
661:       assertFalse(node0.hasMoreThanOneChild());
662:       assertFalse(node0.isInc());
663:       assertEquals(40, node0.getType());
664:       assertFalse(node0.isIn());
665:       assertFalse(node1.isNot());
666:       assertFalse(node1.isWith());
667:       assertFalse(node1.isObjectLit());
668:       assertFalse(node1.isInstanceOf());
669:       assertFalse(node1.isExprResult());
670:       assertFalse(node1.isScript());
671:       assertFalse(node1.isAnd());
672:       assertFalse(node1.isAssign());
673:       assertFalse(node1.isDec());
674:       assertFalse(node1.isNumber());
675:       assertFalse(node1.isTypeOf());
676:       assertFalse(node1.isBreak());
677:       assertFalse(node1.isGetProp());
678:       assertFalse(node1.isGetElem());
679:       assertFalse(node1.isReturn());
680:       assertFalse(node1.hasOneChild());
681:       assertFalse(node1.isThis());
682:       assertFalse(node1.isComma());
683:       assertFalse(node1.hasChildren());
684:       assertFalse(node1.isHook());
685:       assertFalse(node1.isWhile());
686:       assertFalse(node1.hasMoreThanOneChild());
687:       assertFalse(node1.isContinue());
688:       assertFalse(node1.isInc());
689:       assertFalse(node1.isIn());
690:       assertFalse(node1.isNE());
691:       assertFalse(node1.isFalse());
692:       assertFalse(node1.isSetterDef());
693:       assertFalse(node1.isCast());
694:       assertEquals(108, node1.getCharno());
695:       assertFalse(node1.isFunction());
696:       assertEquals(12, node1.getLineno());
697:       assertFalse(node1.isThrow());
698:       assertEquals(40, node1.getType());
699:       assertFalse(node1.isDefaultCase());
700:       assertFalse(node1.isRegExp());
701:       assertFalse(node1.isCatch());
702:       assertFalse(node1.isVoid());
703:       assertFalse(node1.isDebugger());
704:       assertFalse(node1.isParamList());
705:       assertFalse(node1.isTrue());
706:       assertFalse(node1.isNull());
707:       assertFalse(node1.isIf());
708:       assertFalse(node1.isDelProp());
709:       assertFalse(node1.isGetterDef());
710:       assertEquals(49260, node1.getSourcePosition());
711:       assertFalse(node1.isName());
712:       assertFalse(node1.isCall());
713:       assertFalse(node1.isTry());
714:       assertTrue(node1.isString());
715:       assertFalse(node1.isFor());
716:       assertFalse(node1.isBlock());
717:       assertFalse(node1.isDo());
718:       assertFalse(node1.isCase());
719:       assertFalse(node1.isAdd());
720:       assertFalse(node1.isOr());
721:       assertFalse(node1.isSwitch());
722:       assertFalse(node1.isStringKey());
723:       assertFalse(node1.isLabelName());
724:       assertFalse(node1.isEmpty());
725:       assertFalse(node1.isArrayLit());
726:       assertFalse(node1.isAssignAdd());
727:       assertFalse(node1.isLabel());
728:       assertFalse(node1.isNew());
729:       assertEquals(0, node1.getChildCount());
730:       assertFalse(node1.isVar());
731:       assertFalse(node2.isSetterDef());
732:       assertFalse(node2.isNull());
733:       assertFalse(node2.isParamList());
734:       assertFalse(node2.isStringKey());
735:       assertFalse(node2.isAdd());
736:       assertFalse(node2.isDebugger());
737:       assertFalse(node2.isFunction());
738:       assertFalse(node2.isNew());
739:       assertFalse(node2.isDefaultCase());
740:       assertFalse(node2.isVar());
741:       assertFalse(node2.isContinue());
742:       assertEquals(40, node2.getType());
743:       assertFalse(node2.isArrayLit());
744:       assertEquals(0, node2.getChildCount());
745:       assertEquals((-1), node2.getLineno());
746:       assertFalse(node2.isIf());
747:       assertFalse(node2.isFor());
748:       assertFalse(node2.isNE());
749:       assertFalse(node2.isCase());
750:       assertFalse(node2.hasOneChild());
751:       assertFalse(node2.isGetterDef());
752:       assertFalse(node2.isIn());
753:       assertFalse(node2.isNumber());
754:       assertFalse(node2.isBlock());
755:       assertFalse(node2.isRegExp());
756:       assertFalse(node2.isTry());
757:       assertTrue(node2.isString());
758:       assertFalse(node2.isHook());
759:       assertFalse(node2.hasMoreThanOneChild());
760:       assertFalse(node2.isWith());
761:       assertFalse(node2.isCatch());
762:       assertFalse(node2.isInstanceOf());
763:       assertFalse(node2.isThis());
764:       assertFalse(node2.isGetProp());
765:       assertFalse(node2.isComma());
766:       assertFalse(node2.isThrow());
767:       assertFalse(node2.isObjectLit());
768:       assertFalse(node2.isNot());
769:       assertFalse(node2.isScript());
770:       assertEquals((-1), node2.getCharno());
771:       assertFalse(node2.isInc());
772:       assertFalse(node2.isSwitch());
773:       assertFalse(node2.isAnd());
774:       assertFalse(node2.isFalse());
775:       assertFalse(node2.isLabelName());
776:       assertFalse(node2.isCast());
777:       assertFalse(node2.isTypeOf());
778:       assertFalse(node2.isLabel());
779:       assertFalse(node2.isOr());
780:       assertEquals((-1), node2.getSourcePosition());
781:       assertFalse(node2.isDec());
782:       assertFalse(node2.isDelProp());
783:       assertFalse(node2.hasChildren());
784:       assertFalse(node2.isReturn());
785:       assertFalse(node2.isAssignAdd());
786:       assertFalse(node2.isDo());
787:       assertFalse(node2.isEmpty());
788:       assertFalse(node2.isTrue());
789:       assertFalse(node2.isVoid());
790:       assertFalse(node2.isExprResult());
791:       assertFalse(node2.isWhile());
792:       assertFalse(node2.isCall());
793:       assertFalse(node2.isGetElem());
794:       assertFalse(node2.isAssign());
795:       assertFalse(node2.isName());
796:       assertFalse(node2.isBreak());
797:       assertFalse(node3.isNE());
798:       assertFalse(node3.isIf());
799:       assertFalse(node3.isDelProp());
800:       assertFalse(node3.isGetterDef());
801:       assertTrue(node3.hasChildren());
802:       assertFalse(node3.isEmpty());
803:       assertFalse(node3.isFor());
804:       assertFalse(node3.isInc());
805:       assertFalse(node3.isDefaultCase());
806:       assertTrue(node3.hasMoreThanOneChild());
807:       assertFalse(node3.isRegExp());
808:       assertFalse(node3.isVoid());
809:       assertFalse(node3.isIn());
810:       assertFalse(node3.isTrue());
811:       assertFalse(node3.isThis());
812:       assertFalse(node3.isParamList());
813:       assertFalse(node3.isInstanceOf());
814:       assertFalse(node3.isCatch());
815:       assertFalse(node3.isHook());
816:       assertFalse(node3.isBlock());
817:       assertFalse(node3.isVar());
818:       assertFalse(node3.isSwitch());
819:       assertEquals((-1), node3.getCharno());
820:       assertFalse(node3.isTry());
821:       assertFalse(node3.isCase());
822:       assertFalse(node3.isScript());
823:       assertFalse(node3.isArrayLit());
824:       assertFalse(node3.isStringKey());
825:       assertEquals((-1), node3.getSourcePosition());
826:       assertFalse(node3.isDec());
827:       assertFalse(node3.isNumber());
828:       assertFalse(node3.isTypeOf());
829:       assertEquals((-1), node3.getLineno());
830:       assertFalse(node3.isLabelName());
831:       assertFalse(node3.isGetElem());
832:       assertFalse(node3.isCast());
833:       assertFalse(node3.isContinue());
834:       assertFalse(node3.hasOneChild());
835:       assertFalse(node3.isAssign());
836:       assertFalse(node3.isReturn());
837:       assertFalse(node3.isAssignAdd());
838:       assertFalse(node3.isWhile());
839:       assertFalse(node3.isLabel());
840:       assertEquals(3, node3.getChildCount());
841:       assertFalse(node3.isWith());
842:       assertFalse(node3.isDo());
843:       assertFalse(node3.isNew());
844:       assertEquals((-1600), node3.getType());
845:       assertFalse(node3.isExprResult());
846:       assertFalse(node3.isAdd());
847:       assertFalse(node3.isName());
848:       assertFalse(node3.isOr());
849:       assertFalse(node3.isNull());
850:       assertFalse(node3.isSetterDef());
851:       assertFalse(node3.isComma());
852:       assertFalse(node3.isBreak());
853:       assertFalse(node3.isGetProp());
854:       assertFalse(node3.isCall());
855:       assertFalse(node3.isFalse());
856:       assertFalse(node3.isThrow());
857:       assertFalse(node3.isDebugger());
858:       assertFalse(node3.isFunction());
859:       assertFalse(node3.isString());
860:       assertFalse(node3.isAnd());
861:       assertFalse(node3.isObjectLit());
862:       assertFalse(node3.isNot());
863:       
864:       Iterable<Node> iterable0 = node2.children();
865:       assertNotSame(node2, node0);
866:       assertNotSame(node2, node1);
867:       assertFalse(node2.equals((Object)node0));
868:       assertFalse(node2.equals((Object)node3));
869:       assertFalse(node2.equals((Object)node1));
870:       assertFalse(iterable0.contains(node3));
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(47, Node.IS_DISPATCHER);
873:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
874:       assertEquals(2, Node.POST_FLAG);
875:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
876:       assertEquals(37, Node.OPT_ARG_NAME);
877:       assertEquals(29, Node.JSDOC_INFO_PROP);
878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
879:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
880:       assertEquals(46, Node.IS_NAMESPACE);
881:       assertEquals(49, Node.DIRECT_EVAL);
882:       assertEquals(1, Node.DECR_FLAG);
883:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
884:       assertEquals(4095, Node.COLUMN_MASK);
885:       assertEquals(32, Node.INCRDECR_PROP);
886:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
887:       assertEquals(12, Node.COLUMN_BITS);
888:       assertEquals(8, Node.FLAG_NO_THROWS);
889:       assertEquals(50, Node.FREE_CALL);
890:       assertEquals(48, Node.DIRECTIVES);
891:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
892:       assertEquals(39, Node.EMPTY_BLOCK);
893:       assertEquals(40, Node.ORIGINALNAME_PROP);
894:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
895:       assertEquals(57, Node.REFLECTED_OBJECT);
896:       assertEquals(52, Node.LENGTH);
897:       assertEquals(54, Node.SLASH_V);
898:       assertEquals(43, Node.IS_CONSTANT_NAME);
899:       assertEquals(15, Node.NO_SIDE_EFFECTS);
900:       assertEquals(57, Node.LAST_PROP);
901:       assertEquals(36, Node.QUOTED_PROP);
902:       assertEquals(30, Node.VAR_ARGS_NAME);
903:       assertEquals(55, Node.INFERRED_FUNCTION);
904:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
905:       assertEquals(53, Node.INPUT_ID);
906:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
907:       assertFalse(node2.isSetterDef());
908:       assertFalse(node2.isNull());
909:       assertFalse(node2.isParamList());
910:       assertFalse(node2.isStringKey());
911:       assertFalse(node2.isAdd());
912:       assertFalse(node2.isDebugger());
913:       assertFalse(node2.isFunction());
914:       assertFalse(node2.isNew());
915:       assertFalse(node2.isDefaultCase());
916:       assertFalse(node2.isVar());
917:       assertFalse(node2.isContinue());
918:       assertEquals(40, node2.getType());
919:       assertFalse(node2.isArrayLit());
920:       assertEquals(0, node2.getChildCount());
921:       assertEquals((-1), node2.getLineno());
922:       assertFalse(node2.isIf());
923:       assertFalse(node2.isFor());
924:       assertFalse(node2.isNE());
925:       assertFalse(node2.isCase());
926:       assertFalse(node2.hasOneChild());
927:       assertFalse(node2.isGetterDef());
928:       assertFalse(node2.isIn());
929:       assertFalse(node2.isNumber());
930:       assertFalse(node2.isBlock());
931:       assertFalse(node2.isRegExp());
932:       assertFalse(node2.isTry());
933:       assertTrue(node2.isString());
934:       assertFalse(node2.isHook());
935:       assertFalse(node2.hasMoreThanOneChild());
936:       assertFalse(node2.isWith());
937:       assertFalse(node2.isCatch());
938:       assertFalse(node2.isInstanceOf());
939:       assertFalse(node2.isThis());
940:       assertFalse(node2.isGetProp());
941:       assertFalse(node2.isComma());
942:       assertFalse(node2.isThrow());
943:       assertFalse(node2.isObjectLit());
944:       assertFalse(node2.isNot());
945:       assertFalse(node2.isScript());
946:       assertEquals((-1), node2.getCharno());
947:       assertFalse(node2.isInc());
948:       assertFalse(node2.isSwitch());
949:       assertFalse(node2.isAnd());
950:       assertFalse(node2.isFalse());
951:       assertFalse(node2.isLabelName());
952:       assertFalse(node2.isCast());
953:       assertFalse(node2.isTypeOf());
954:       assertFalse(node2.isLabel());
955:       assertFalse(node2.isOr());
956:       assertEquals((-1), node2.getSourcePosition());
957:       assertFalse(node2.isDec());
958:       assertFalse(node2.isDelProp());
959:       assertFalse(node2.hasChildren());
960:       assertFalse(node2.isReturn());
961:       assertFalse(node2.isAssignAdd());
962:       assertFalse(node2.isDo());
963:       assertFalse(node2.isEmpty());
964:       assertFalse(node2.isTrue());
965:       assertFalse(node2.isVoid());
966:       assertFalse(node2.isExprResult());
967:       assertFalse(node2.isWhile());
968:       assertFalse(node2.isCall());
969:       assertFalse(node2.isGetElem());
970:       assertFalse(node2.isAssign());
971:       assertFalse(node2.isName());
972:       assertFalse(node2.isBreak());
973:       
974:       node1.checkTreeEqualsImpl(node3);
975:       assertNotSame(node0, node1);
976:       assertNotSame(node0, node2);
977:       assertNotSame(node1, node2);
978:       assertNotSame(node1, node0);
979:       assertNotSame(node2, node0);
980:       assertNotSame(node2, node1);
981:       assertFalse(node0.equals((Object)node3));
982:       assertFalse(node0.equals((Object)node1));
983:       assertFalse(node0.equals((Object)node2));
984:       assertFalse(node1.equals((Object)node2));
985:       assertFalse(node1.equals((Object)node0));
986:       assertFalse(node1.equals((Object)node3));
987:       assertFalse(node2.equals((Object)node0));
988:       assertFalse(node2.equals((Object)node3));
989:       assertFalse(node2.equals((Object)node1));
990:       assertFalse(node3.equals((Object)node0));
991:       assertFalse(node3.equals((Object)node2));
992:       assertFalse(node3.equals((Object)node1));
993:       assertEquals(29, Node.JSDOC_INFO_PROP);
994:       assertEquals(47, Node.IS_DISPATCHER);
995:       assertEquals(2, Node.POST_FLAG);
996:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
997:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
998:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
999:       assertEquals(32, Node.INCRDECR_PROP);
1000:       assertEquals(53, Node.INPUT_ID);
1001:       assertEquals(12, Node.COLUMN_BITS);
1002:       assertEquals(49, Node.DIRECT_EVAL);
1003:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1004:       assertEquals(36, Node.QUOTED_PROP);
1005:       assertEquals(55, Node.INFERRED_FUNCTION);
1006:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1007:       assertEquals(4095, Node.COLUMN_MASK);
1008:       assertEquals(52, Node.LENGTH);
1009:       assertEquals(48, Node.DIRECTIVES);
1010:       assertEquals(37, Node.OPT_ARG_NAME);
1011:       assertEquals(57, Node.REFLECTED_OBJECT);
1012:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1013:       assertEquals(56, Node.CHANGE_TIME);
1014:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1015:       assertEquals(50, Node.FREE_CALL);
1016:       assertEquals(8, Node.FLAG_NO_THROWS);
1017:       assertEquals(39, Node.EMPTY_BLOCK);
1018:       assertEquals(40, Node.ORIGINALNAME_PROP);
1019:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1020:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1021:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1022:       assertEquals(57, Node.LAST_PROP);
1023:       assertEquals(30, Node.VAR_ARGS_NAME);
1024:       assertEquals(1, Node.DECR_FLAG);
1025:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1026:       assertEquals(46, Node.IS_NAMESPACE);
1027:       assertEquals(54, Node.SLASH_V);
1028:       assertEquals(43, Node.IS_CONSTANT_NAME);
1029:       assertEquals(1, Node.DECR_FLAG);
1030:       assertEquals(30, Node.VAR_ARGS_NAME);
1031:       assertEquals(46, Node.IS_NAMESPACE);
1032:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1033:       assertEquals(12, Node.COLUMN_BITS);
1034:       assertEquals(37, Node.OPT_ARG_NAME);
1035:       assertEquals(2, Node.POST_FLAG);
1036:       assertEquals(54, Node.SLASH_V);
1037:       assertEquals(56, Node.CHANGE_TIME);
1038:       assertEquals(49, Node.DIRECT_EVAL);
1039:       assertEquals(40, Node.ORIGINALNAME_PROP);
1040:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1041:       assertEquals(57, Node.REFLECTED_OBJECT);
1042:       assertEquals(47, Node.IS_DISPATCHER);
1043:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1044:       assertEquals(52, Node.LENGTH);
1045:       assertEquals(8, Node.FLAG_NO_THROWS);
1046:       assertEquals(57, Node.LAST_PROP);
1047:       assertEquals(29, Node.JSDOC_INFO_PROP);
1048:       assertEquals(53, Node.INPUT_ID);
1049:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1050:       assertEquals(39, Node.EMPTY_BLOCK);
1051:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1052:       assertEquals(55, Node.INFERRED_FUNCTION);
1053:       assertEquals(4095, Node.COLUMN_MASK);
1054:       assertEquals(36, Node.QUOTED_PROP);
1055:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1056:       assertEquals(48, Node.DIRECTIVES);
1057:       assertEquals(43, Node.IS_CONSTANT_NAME);
1058:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1059:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1060:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1061:       assertEquals(50, Node.FREE_CALL);
1062:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1063:       assertEquals(32, Node.INCRDECR_PROP);
1064:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1065:       assertEquals(56, Node.CHANGE_TIME);
1066:       assertEquals(47, Node.IS_DISPATCHER);
1067:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1068:       assertEquals(2, Node.POST_FLAG);
1069:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1070:       assertEquals(37, Node.OPT_ARG_NAME);
1071:       assertEquals(29, Node.JSDOC_INFO_PROP);
1072:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1073:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1074:       assertEquals(46, Node.IS_NAMESPACE);
1075:       assertEquals(49, Node.DIRECT_EVAL);
1076:       assertEquals(1, Node.DECR_FLAG);
1077:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1078:       assertEquals(4095, Node.COLUMN_MASK);
1079:       assertEquals(32, Node.INCRDECR_PROP);
1080:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1081:       assertEquals(12, Node.COLUMN_BITS);
1082:       assertEquals(8, Node.FLAG_NO_THROWS);
1083:       assertEquals(50, Node.FREE_CALL);
1084:       assertEquals(48, Node.DIRECTIVES);
1085:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1086:       assertEquals(39, Node.EMPTY_BLOCK);
1087:       assertEquals(40, Node.ORIGINALNAME_PROP);
1088:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1089:       assertEquals(57, Node.REFLECTED_OBJECT);
1090:       assertEquals(52, Node.LENGTH);
1091:       assertEquals(54, Node.SLASH_V);
1092:       assertEquals(43, Node.IS_CONSTANT_NAME);
1093:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1094:       assertEquals(57, Node.LAST_PROP);
1095:       assertEquals(36, Node.QUOTED_PROP);
1096:       assertEquals(30, Node.VAR_ARGS_NAME);
1097:       assertEquals(55, Node.INFERRED_FUNCTION);
1098:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1099:       assertEquals(53, Node.INPUT_ID);
1100:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1101:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1102:       assertEquals(50, Node.FREE_CALL);
1103:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1104:       assertEquals(8, Node.FLAG_NO_THROWS);
1105:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1106:       assertEquals(57, Node.REFLECTED_OBJECT);
1107:       assertEquals(52, Node.LENGTH);
1108:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1109:       assertEquals(55, Node.INFERRED_FUNCTION);
1110:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1111:       assertEquals(39, Node.EMPTY_BLOCK);
1112:       assertEquals(30, Node.VAR_ARGS_NAME);
1113:       assertEquals(43, Node.IS_CONSTANT_NAME);
1114:       assertEquals(57, Node.LAST_PROP);
1115:       assertEquals(54, Node.SLASH_V);
1116:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1117:       assertEquals(46, Node.IS_NAMESPACE);
1118:       assertEquals(40, Node.ORIGINALNAME_PROP);
1119:       assertEquals(56, Node.CHANGE_TIME);
1120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1121:       assertEquals(2, Node.POST_FLAG);
1122:       assertEquals(47, Node.IS_DISPATCHER);
1123:       assertEquals(32, Node.INCRDECR_PROP);
1124:       assertEquals(1, Node.DECR_FLAG);
1125:       assertEquals(29, Node.JSDOC_INFO_PROP);
1126:       assertEquals(53, Node.INPUT_ID);
1127:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1128:       assertEquals(49, Node.DIRECT_EVAL);
1129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1130:       assertEquals(12, Node.COLUMN_BITS);
1131:       assertEquals(36, Node.QUOTED_PROP);
1132:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1133:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1134:       assertEquals(4095, Node.COLUMN_MASK);
1135:       assertEquals(37, Node.OPT_ARG_NAME);
1136:       assertEquals(48, Node.DIRECTIVES);
1137:       assertFalse(node0.isComma());
1138:       assertFalse(node0.isBreak());
1139:       assertFalse(node0.isThis());
1140:       assertFalse(node0.isGetProp());
1141:       assertFalse(node0.isThrow());
1142:       assertFalse(node0.isInstanceOf());
1143:       assertFalse(node0.isHook());
1144:       assertFalse(node0.isFalse());
1145:       assertFalse(node0.isWith());
1146:       assertFalse(node0.isScript());
1147:       assertEquals((-1), node0.getCharno());
1148:       assertFalse(node0.isCase());
1149:       assertFalse(node0.isAnd());
1150:       assertFalse(node0.isSwitch());
1151:       assertFalse(node0.hasOneChild());
1152:       assertFalse(node0.isNot());
1153:       assertFalse(node0.isObjectLit());
1154:       assertFalse(node0.isNumber());
1155:       assertFalse(node0.isTypeOf());
1156:       assertFalse(node0.isDec());
1157:       assertFalse(node0.hasChildren());
1158:       assertFalse(node0.isLabelName());
1159:       assertFalse(node0.isDelProp());
1160:       assertFalse(node0.isAssignAdd());
1161:       assertFalse(node0.isArrayLit());
1162:       assertFalse(node0.isReturn());
1163:       assertFalse(node0.isGetElem());
1164:       assertFalse(node0.isLabel());
1165:       assertFalse(node0.isAssign());
1166:       assertFalse(node0.isTrue());
1167:       assertFalse(node0.isExprResult());
1168:       assertFalse(node0.isNew());
1169:       assertFalse(node0.isVoid());
1170:       assertFalse(node0.isDo());
1171:       assertFalse(node0.isDefaultCase());
1172:       assertFalse(node0.isAdd());
1173:       assertFalse(node0.isEmpty());
1174:       assertFalse(node0.isOr());
1175:       assertFalse(node0.isNull());
1176:       assertFalse(node0.isSetterDef());
1177:       assertFalse(node0.isName());
1178:       assertFalse(node0.isStringKey());
1179:       assertFalse(node0.isParamList());
1180:       assertFalse(node0.isCatch());
1181:       assertEquals(0, node0.getChildCount());
1182:       assertFalse(node0.isVar());
1183:       assertFalse(node0.isCall());
1184:       assertFalse(node0.isRegExp());
1185:       assertFalse(node0.isDebugger());
1186:       assertFalse(node0.isBlock());
1187:       assertTrue(node0.isString());
1188:       assertFalse(node0.isTry());
1189:       assertFalse(node0.isWhile());
1190:       assertFalse(node0.isGetterDef());
1191:       assertEquals((-1), node0.getSourcePosition());
1192:       assertFalse(node0.isNE());
1193:       assertFalse(node0.isFor());
1194:       assertFalse(node0.isIf());
1195:       assertFalse(node0.isCast());
1196:       assertEquals((-1), node0.getLineno());
1197:       assertFalse(node0.isFunction());
1198:       assertFalse(node0.isContinue());
1199:       assertFalse(node0.hasMoreThanOneChild());
1200:       assertFalse(node0.isInc());
1201:       assertEquals(40, node0.getType());
1202:       assertFalse(node0.isIn());
1203:       assertFalse(node1.isNot());
1204:       assertFalse(node1.isWith());
1205:       assertFalse(node1.isObjectLit());
1206:       assertFalse(node1.isInstanceOf());
1207:       assertFalse(node1.isExprResult());
1208:       assertFalse(node1.isScript());
1209:       assertFalse(node1.isAnd());
1210:       assertFalse(node1.isAssign());
1211:       assertFalse(node1.isDec());
1212:       assertFalse(node1.isNumber());
1213:       assertFalse(node1.isTypeOf());
1214:       assertFalse(node1.isBreak());
1215:       assertFalse(node1.isGetProp());
1216:       assertFalse(node1.isGetElem());
1217:       assertFalse(node1.isReturn());
1218:       assertFalse(node1.hasOneChild());
1219:       assertFalse(node1.isThis());
1220:       assertFalse(node1.isComma());
1221:       assertFalse(node1.hasChildren());
1222:       assertFalse(node1.isHook());
1223:       assertFalse(node1.isWhile());
1224:       assertFalse(node1.hasMoreThanOneChild());
1225:       assertFalse(node1.isContinue());
1226:       assertFalse(node1.isInc());
1227:       assertFalse(node1.isIn());
1228:       assertFalse(node1.isNE());
1229:       assertFalse(node1.isFalse());
1230:       assertFalse(node1.isSetterDef());
1231:       assertFalse(node1.isCast());
1232:       assertEquals(108, node1.getCharno());
1233:       assertFalse(node1.isFunction());
1234:       assertEquals(12, node1.getLineno());
1235:       assertFalse(node1.isThrow());
1236:       assertEquals(40, node1.getType());
1237:       assertFalse(node1.isDefaultCase());
1238:       assertFalse(node1.isRegExp());
1239:       assertFalse(node1.isCatch());
1240:       assertFalse(node1.isVoid());
1241:       assertFalse(node1.isDebugger());
1242:       assertFalse(node1.isParamList());
1243:       assertFalse(node1.isTrue());
1244:       assertFalse(node1.isNull());
1245:       assertFalse(node1.isIf());
1246:       assertFalse(node1.isDelProp());
1247:       assertFalse(node1.isGetterDef());
1248:       assertEquals(49260, node1.getSourcePosition());
1249:       assertFalse(node1.isName());
1250:       assertFalse(node1.isCall());
1251:       assertFalse(node1.isTry());
1252:       assertTrue(node1.isString());
1253:       assertFalse(node1.isFor());
1254:       assertFalse(node1.isBlock());
1255:       assertFalse(node1.isDo());
1256:       assertFalse(node1.isCase());
1257:       assertFalse(node1.isAdd());
1258:       assertFalse(node1.isOr());
1259:       assertFalse(node1.isSwitch());
1260:       assertFalse(node1.isStringKey());
1261:       assertFalse(node1.isLabelName());
1262:       assertFalse(node1.isEmpty());
1263:       assertFalse(node1.isArrayLit());
1264:       assertFalse(node1.isAssignAdd());
1265:       assertFalse(node1.isLabel());
1266:       assertFalse(node1.isNew());
1267:       assertEquals(0, node1.getChildCount());
1268:       assertFalse(node1.isVar());
1269:       assertFalse(node2.isSetterDef());
1270:       assertFalse(node2.isNull());
1271:       assertFalse(node2.isParamList());
1272:       assertFalse(node2.isStringKey());
1273:       assertFalse(node2.isAdd());
1274:       assertFalse(node2.isDebugger());
1275:       assertFalse(node2.isFunction());
1276:       assertFalse(node2.isNew());
1277:       assertFalse(node2.isDefaultCase());
1278:       assertFalse(node2.isVar());
1279:       assertFalse(node2.isContinue());
1280:       assertEquals(40, node2.getType());
1281:       assertFalse(node2.isArrayLit());
1282:       assertEquals(0, node2.getChildCount());
1283:       assertEquals((-1), node2.getLineno());
1284:       assertFalse(node2.isIf());
1285:       assertFalse(node2.isFor());
1286:       assertFalse(node2.isNE());
1287:       assertFalse(node2.isCase());
1288:       assertFalse(node2.hasOneChild());
1289:       assertFalse(node2.isGetterDef());
1290:       assertFalse(node2.isIn());
1291:       assertFalse(node2.isNumber());
1292:       assertFalse(node2.isBlock());
1293:       assertFalse(node2.isRegExp());
1294:       assertFalse(node2.isTry());
1295:       assertTrue(node2.isString());
1296:       assertFalse(node2.isHook());
1297:       assertFalse(node2.hasMoreThanOneChild());
1298:       assertFalse(node2.isWith());
1299:       assertFalse(node2.isCatch());
1300:       assertFalse(node2.isInstanceOf());
1301:       assertFalse(node2.isThis());
1302:       assertFalse(node2.isGetProp());
1303:       assertFalse(node2.isComma());
1304:       assertFalse(node2.isThrow());
1305:       assertFalse(node2.isObjectLit());
1306:       assertFalse(node2.isNot());
1307:       assertFalse(node2.isScript());
1308:       assertEquals((-1), node2.getCharno());
1309:       assertFalse(node2.isInc());
1310:       assertFalse(node2.isSwitch());
1311:       assertFalse(node2.isAnd());
1312:       assertFalse(node2.isFalse());
1313:       assertFalse(node2.isLabelName());
1314:       assertFalse(node2.isCast());
1315:       assertFalse(node2.isTypeOf());
1316:       assertFalse(node2.isLabel());
1317:       assertFalse(node2.isOr());
1318:       assertEquals((-1), node2.getSourcePosition());
1319:       assertFalse(node2.isDec());
1320:       assertFalse(node2.isDelProp());
1321:       assertFalse(node2.hasChildren());
1322:       assertFalse(node2.isReturn());
1323:       assertFalse(node2.isAssignAdd());
1324:       assertFalse(node2.isDo());
1325:       assertFalse(node2.isEmpty());
1326:       assertFalse(node2.isTrue());
1327:       assertFalse(node2.isVoid());
1328:       assertFalse(node2.isExprResult());
1329:       assertFalse(node2.isWhile());
1330:       assertFalse(node2.isCall());
1331:       assertFalse(node2.isGetElem());
1332:       assertFalse(node2.isAssign());
1333:       assertFalse(node2.isName());
1334:       assertFalse(node2.isBreak());
1335:       assertFalse(node3.isNE());
1336:       assertFalse(node3.isIf());
1337:       assertFalse(node3.isDelProp());
1338:       assertFalse(node3.isGetterDef());
1339:       assertTrue(node3.hasChildren());
1340:       assertFalse(node3.isEmpty());
1341:       assertFalse(node3.isFor());
1342:       assertFalse(node3.isInc());
1343:       assertFalse(node3.isDefaultCase());
1344:       assertTrue(node3.hasMoreThanOneChild());
1345:       assertFalse(node3.isRegExp());
1346:       assertFalse(node3.isVoid());
1347:       assertFalse(node3.isIn());
1348:       assertFalse(node3.isTrue());
1349:       assertFalse(node3.isThis());
1350:       assertFalse(node3.isParamList());
1351:       assertFalse(node3.isInstanceOf());
1352:       assertFalse(node3.isCatch());
1353:       assertFalse(node3.isHook());
1354:       assertFalse(node3.isBlock());
1355:       assertFalse(node3.isVar());
1356:       assertFalse(node3.isSwitch());
1357:       assertEquals((-1), node3.getCharno());
1358:       assertFalse(node3.isTry());
1359:       assertFalse(node3.isCase());
1360:       assertFalse(node3.isScript());
1361:       assertFalse(node3.isArrayLit());
1362:       assertFalse(node3.isStringKey());
1363:       assertEquals((-1), node3.getSourcePosition());
1364:       assertFalse(node3.isDec());
1365:       assertFalse(node3.isNumber());
1366:       assertFalse(node3.isTypeOf());
1367:       assertEquals((-1), node3.getLineno());
1368:       assertFalse(node3.isLabelName());
1369:       assertFalse(node3.isGetElem());
1370:       assertFalse(node3.isCast());
1371:       assertFalse(node3.isContinue());
1372:       assertFalse(node3.hasOneChild());
1373:       assertFalse(node3.isAssign());
1374:       assertFalse(node3.isReturn());
1375:       assertFalse(node3.isAssignAdd());
1376:       assertFalse(node3.isWhile());
1377:       assertFalse(node3.isLabel());
1378:       assertEquals(3, node3.getChildCount());
1379:       assertFalse(node3.isWith());
1380:       assertFalse(node3.isDo());
1381:       assertFalse(node3.isNew());
1382:       assertEquals((-1600), node3.getType());
1383:       assertFalse(node3.isExprResult());
1384:       assertFalse(node3.isAdd());
1385:       assertFalse(node3.isName());
1386:       assertFalse(node3.isOr());
1387:       assertFalse(node3.isNull());
1388:       assertFalse(node3.isSetterDef());
1389:       assertFalse(node3.isComma());
1390:       assertFalse(node3.isBreak());
1391:       assertFalse(node3.isGetProp());
1392:       assertFalse(node3.isCall());
1393:       assertFalse(node3.isFalse());
1394:       assertFalse(node3.isThrow());
1395:       assertFalse(node3.isDebugger());
1396:       assertFalse(node3.isFunction());
1397:       assertFalse(node3.isString());
1398:       assertFalse(node3.isAnd());
1399:       assertFalse(node3.isObjectLit());
1400:       assertFalse(node3.isNot());
1401:       
1402:       String string0 = node2.toString();
1403:       assertNotSame(node2, node0);
1404:       assertNotSame(node2, node1);
1405:       assertFalse(node2.equals((Object)node0));
1406:       assertFalse(node2.equals((Object)node3));
1407:       assertFalse(node2.equals((Object)node1));
1408:       assertEquals(56, Node.CHANGE_TIME);
1409:       assertEquals(47, Node.IS_DISPATCHER);
1410:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1411:       assertEquals(2, Node.POST_FLAG);
1412:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1413:       assertEquals(37, Node.OPT_ARG_NAME);
1414:       assertEquals(29, Node.JSDOC_INFO_PROP);
1415:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1416:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1417:       assertEquals(46, Node.IS_NAMESPACE);
1418:       assertEquals(49, Node.DIRECT_EVAL);
1419:       assertEquals(1, Node.DECR_FLAG);
1420:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1421:       assertEquals(4095, Node.COLUMN_MASK);
1422:       assertEquals(32, Node.INCRDECR_PROP);
1423:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1424:       assertEquals(12, Node.COLUMN_BITS);
1425:       assertEquals(8, Node.FLAG_NO_THROWS);
1426:       assertEquals(50, Node.FREE_CALL);
1427:       assertEquals(48, Node.DIRECTIVES);
1428:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1429:       assertEquals(39, Node.EMPTY_BLOCK);
1430:       assertEquals(40, Node.ORIGINALNAME_PROP);
1431:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1432:       assertEquals(57, Node.REFLECTED_OBJECT);
1433:       assertEquals(52, Node.LENGTH);
1434:       assertEquals(54, Node.SLASH_V);
1435:       assertEquals(43, Node.IS_CONSTANT_NAME);
1436:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1437:       assertEquals(57, Node.LAST_PROP);
1438:       assertEquals(36, Node.QUOTED_PROP);
1439:       assertEquals(30, Node.VAR_ARGS_NAME);
1440:       assertEquals(55, Node.INFERRED_FUNCTION);
1441:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1442:       assertEquals(53, Node.INPUT_ID);
1443:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1444:       assertEquals("STRING .", string0);
1445:       assertFalse(node2.isSetterDef());
1446:       assertFalse(node2.isNull());
1447:       assertFalse(node2.isParamList());
1448:       assertFalse(node2.isStringKey());
1449:       assertFalse(node2.isAdd());
1450:       assertFalse(node2.isDebugger());
1451:       assertFalse(node2.isFunction());
1452:       assertFalse(node2.isNew());
1453:       assertFalse(node2.isDefaultCase());
1454:       assertFalse(node2.isVar());
1455:       assertFalse(node2.isContinue());
1456:       assertEquals(40, node2.getType());
1457:       assertFalse(node2.isArrayLit());
1458:       assertEquals(0, node2.getChildCount());
1459:       assertEquals((-1), node2.getLineno());
1460:       assertFalse(node2.isIf());
1461:       assertFalse(node2.isFor());
1462:       assertFalse(node2.isNE());
1463:       assertFalse(node2.isCase());
1464:       assertFalse(node2.hasOneChild());
1465:       assertFalse(node2.isGetterDef());
1466:       assertFalse(node2.isIn());
1467:       assertFalse(node2.isNumber());
1468:       assertFalse(node2.isBlock());
1469:       assertFalse(node2.isRegExp());
1470:       assertFalse(node2.isTry());
1471:       assertTrue(node2.isString());
1472:       assertFalse(node2.isHook());
1473:       assertFalse(node2.hasMoreThanOneChild());
1474:       assertFalse(node2.isWith());
1475:       assertFalse(node2.isCatch());
1476:       assertFalse(node2.isInstanceOf());
1477:       assertFalse(node2.isThis());
1478:       assertFalse(node2.isGetProp());
1479:       assertFalse(node2.isComma());
1480:       assertFalse(node2.isThrow());
1481:       assertFalse(node2.isObjectLit());
1482:       assertFalse(node2.isNot());
1483:       assertFalse(node2.isScript());
1484:       assertEquals((-1), node2.getCharno());
1485:       assertFalse(node2.isInc());
1486:       assertFalse(node2.isSwitch());
1487:       assertFalse(node2.isAnd());
1488:       assertFalse(node2.isFalse());
1489:       assertFalse(node2.isLabelName());
1490:       assertFalse(node2.isCast());
1491:       assertFalse(node2.isTypeOf());
1492:       assertFalse(node2.isLabel());
1493:       assertFalse(node2.isOr());
1494:       assertEquals((-1), node2.getSourcePosition());
1495:       assertFalse(node2.isDec());
1496:       assertFalse(node2.isDelProp());
1497:       assertFalse(node2.hasChildren());
1498:       assertFalse(node2.isReturn());
1499:       assertFalse(node2.isAssignAdd());
1500:       assertFalse(node2.isDo());
1501:       assertFalse(node2.isEmpty());
1502:       assertFalse(node2.isTrue());
1503:       assertFalse(node2.isVoid());
1504:       assertFalse(node2.isExprResult());
1505:       assertFalse(node2.isWhile());
1506:       assertFalse(node2.isCall());
1507:       assertFalse(node2.isGetElem());
1508:       assertFalse(node2.isAssign());
1509:       assertFalse(node2.isName());
1510:       assertFalse(node2.isBreak());
1511:       
1512:       int int0 = node3.getSourceOffset();
1513:       assertNotSame(node0, node1);
1514:       assertNotSame(node0, node2);
1515:       assertNotSame(node1, node2);
1516:       assertNotSame(node1, node0);
1517:       assertNotSame(node2, node0);
1518:       assertNotSame(node2, node1);
1519:       assertFalse(node0.equals((Object)node3));
1520:       assertFalse(node0.equals((Object)node1));
1521:       assertFalse(node0.equals((Object)node2));
1522:       assertFalse(node1.equals((Object)node2));
1523:       assertFalse(node1.equals((Object)node0));
1524:       assertFalse(node1.equals((Object)node3));
1525:       assertFalse(node2.equals((Object)node0));
1526:       assertFalse(node2.equals((Object)node3));
1527:       assertFalse(node2.equals((Object)node1));
1528:       assertFalse(node3.equals((Object)node0));
1529:       assertFalse(node3.equals((Object)node2));
1530:       assertFalse(node3.equals((Object)node1));
1531:       assertEquals(29, Node.JSDOC_INFO_PROP);
1532:       assertEquals(47, Node.IS_DISPATCHER);
1533:       assertEquals(2, Node.POST_FLAG);
1534:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1535:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1536:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1537:       assertEquals(32, Node.INCRDECR_PROP);
1538:       assertEquals(53, Node.INPUT_ID);
1539:       assertEquals(12, Node.COLUMN_BITS);
1540:       assertEquals(49, Node.DIRECT_EVAL);
1541:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1542:       assertEquals(36, Node.QUOTED_PROP);
1543:       assertEquals(55, Node.INFERRED_FUNCTION);
1544:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1545:       assertEquals(4095, Node.COLUMN_MASK);
1546:       assertEquals(52, Node.LENGTH);
1547:       assertEquals(48, Node.DIRECTIVES);
1548:       assertEquals(37, Node.OPT_ARG_NAME);
1549:       assertEquals(57, Node.REFLECTED_OBJECT);
1550:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1551:       assertEquals(56, Node.CHANGE_TIME);
1552:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1553:       assertEquals(50, Node.FREE_CALL);
1554:       assertEquals(8, Node.FLAG_NO_THROWS);
1555:       assertEquals(39, Node.EMPTY_BLOCK);
1556:       assertEquals(40, Node.ORIGINALNAME_PROP);
1557:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1558:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1559:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1560:       assertEquals(57, Node.LAST_PROP);
1561:       assertEquals(30, Node.VAR_ARGS_NAME);
1562:       assertEquals(1, Node.DECR_FLAG);
1563:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1564:       assertEquals(46, Node.IS_NAMESPACE);
1565:       assertEquals(54, Node.SLASH_V);
1566:       assertEquals(43, Node.IS_CONSTANT_NAME);
1567:       assertEquals(1, Node.DECR_FLAG);
1568:       assertEquals(30, Node.VAR_ARGS_NAME);
1569:       assertEquals(46, Node.IS_NAMESPACE);
1570:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1571:       assertEquals(12, Node.COLUMN_BITS);
1572:       assertEquals(37, Node.OPT_ARG_NAME);
1573:       assertEquals(2, Node.POST_FLAG);
1574:       assertEquals(54, Node.SLASH_V);
1575:       assertEquals(56, Node.CHANGE_TIME);
1576:       assertEquals(49, Node.DIRECT_EVAL);
1577:       assertEquals(40, Node.ORIGINALNAME_PROP);
1578:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1579:       assertEquals(57, Node.REFLECTED_OBJECT);
1580:       assertEquals(47, Node.IS_DISPATCHER);
1581:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1582:       assertEquals(52, Node.LENGTH);
1583:       assertEquals(8, Node.FLAG_NO_THROWS);
1584:       assertEquals(57, Node.LAST_PROP);
1585:       assertEquals(29, Node.JSDOC_INFO_PROP);
1586:       assertEquals(53, Node.INPUT_ID);
1587:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1588:       assertEquals(39, Node.EMPTY_BLOCK);
1589:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1590:       assertEquals(55, Node.INFERRED_FUNCTION);
1591:       assertEquals(4095, Node.COLUMN_MASK);
1592:       assertEquals(36, Node.QUOTED_PROP);
1593:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1594:       assertEquals(48, Node.DIRECTIVES);
1595:       assertEquals(43, Node.IS_CONSTANT_NAME);
1596:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1597:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1598:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1599:       assertEquals(50, Node.FREE_CALL);
1600:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1601:       assertEquals(32, Node.INCRDECR_PROP);
1602:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1603:       assertEquals(56, Node.CHANGE_TIME);
1604:       assertEquals(47, Node.IS_DISPATCHER);
1605:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1606:       assertEquals(2, Node.POST_FLAG);
1607:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1608:       assertEquals(37, Node.OPT_ARG_NAME);
1609:       assertEquals(29, Node.JSDOC_INFO_PROP);
1610:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1611:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1612:       assertEquals(46, Node.IS_NAMESPACE);
1613:       assertEquals(49, Node.DIRECT_EVAL);
1614:       assertEquals(1, Node.DECR_FLAG);
1615:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1616:       assertEquals(4095, Node.COLUMN_MASK);
1617:       assertEquals(32, Node.INCRDECR_PROP);
1618:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1619:       assertEquals(12, Node.COLUMN_BITS);
1620:       assertEquals(8, Node.FLAG_NO_THROWS);
1621:       assertEquals(50, Node.FREE_CALL);
1622:       assertEquals(48, Node.DIRECTIVES);
1623:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1624:       assertEquals(39, Node.EMPTY_BLOCK);
1625:       assertEquals(40, Node.ORIGINALNAME_PROP);
1626:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1627:       assertEquals(57, Node.REFLECTED_OBJECT);
1628:       assertEquals(52, Node.LENGTH);
1629:       assertEquals(54, Node.SLASH_V);
1630:       assertEquals(43, Node.IS_CONSTANT_NAME);
1631:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1632:       assertEquals(57, Node.LAST_PROP);
1633:       assertEquals(36, Node.QUOTED_PROP);
1634:       assertEquals(30, Node.VAR_ARGS_NAME);
1635:       assertEquals(55, Node.INFERRED_FUNCTION);
1636:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1637:       assertEquals(53, Node.INPUT_ID);
1638:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1639:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1640:       assertEquals(50, Node.FREE_CALL);
1641:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1642:       assertEquals(8, Node.FLAG_NO_THROWS);
1643:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1644:       assertEquals(57, Node.REFLECTED_OBJECT);
1645:       assertEquals(52, Node.LENGTH);
1646:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1647:       assertEquals(55, Node.INFERRED_FUNCTION);
1648:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1649:       assertEquals(39, Node.EMPTY_BLOCK);
1650:       assertEquals(30, Node.VAR_ARGS_NAME);
1651:       assertEquals(43, Node.IS_CONSTANT_NAME);
1652:       assertEquals(57, Node.LAST_PROP);
1653:       assertEquals(54, Node.SLASH_V);
1654:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1655:       assertEquals(46, Node.IS_NAMESPACE);
1656:       assertEquals(40, Node.ORIGINALNAME_PROP);
1657:       assertEquals(56, Node.CHANGE_TIME);
1658:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1659:       assertEquals(2, Node.POST_FLAG);
1660:       assertEquals(47, Node.IS_DISPATCHER);
1661:       assertEquals(32, Node.INCRDECR_PROP);
1662:       assertEquals(1, Node.DECR_FLAG);
1663:       assertEquals(29, Node.JSDOC_INFO_PROP);
1664:       assertEquals(53, Node.INPUT_ID);
1665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1666:       assertEquals(49, Node.DIRECT_EVAL);
1667:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1668:       assertEquals(12, Node.COLUMN_BITS);
1669:       assertEquals(36, Node.QUOTED_PROP);
1670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1672:       assertEquals(4095, Node.COLUMN_MASK);
1673:       assertEquals(37, Node.OPT_ARG_NAME);
1674:       assertEquals(48, Node.DIRECTIVES);
1675:       assertEquals((-1), int0);
1676:       assertFalse(node0.isComma());
1677:       assertFalse(node0.isBreak());
1678:       assertFalse(node0.isThis());
1679:       assertFalse(node0.isGetProp());
1680:       assertFalse(node0.isThrow());
1681:       assertFalse(node0.isInstanceOf());
1682:       assertFalse(node0.isHook());
1683:       assertFalse(node0.isFalse());
1684:       assertFalse(node0.isWith());
1685:       assertFalse(node0.isScript());
1686:       assertEquals((-1), node0.getCharno());
1687:       assertFalse(node0.isCase());
1688:       assertFalse(node0.isAnd());
1689:       assertFalse(node0.isSwitch());
1690:       assertFalse(node0.hasOneChild());
1691:       assertFalse(node0.isNot());
1692:       assertFalse(node0.isObjectLit());
1693:       assertFalse(node0.isNumber());
1694:       assertFalse(node0.isTypeOf());
1695:       assertFalse(node0.isDec());
1696:       assertFalse(node0.hasChildren());
1697:       assertFalse(node0.isLabelName());
1698:       assertFalse(node0.isDelProp());
1699:       assertFalse(node0.isAssignAdd());
1700:       assertFalse(node0.isArrayLit());
1701:       assertFalse(node0.isReturn());
1702:       assertFalse(node0.isGetElem());
1703:       assertFalse(node0.isLabel());
1704:       assertFalse(node0.isAssign());
1705:       assertFalse(node0.isTrue());
1706:       assertFalse(node0.isExprResult());
1707:       assertFalse(node0.isNew());
1708:       assertFalse(node0.isVoid());
1709:       assertFalse(node0.isDo());
1710:       assertFalse(node0.isDefaultCase());
1711:       assertFalse(node0.isAdd());
1712:       assertFalse(node0.isEmpty());
1713:       assertFalse(node0.isOr());
1714:       assertFalse(node0.isNull());
1715:       assertFalse(node0.isSetterDef());
1716:       assertFalse(node0.isName());
1717:       assertFalse(node0.isStringKey());
1718:       assertFalse(node0.isParamList());
1719:       assertFalse(node0.isCatch());
1720:       assertEquals(0, node0.getChildCount());
1721:       assertFalse(node0.isVar());
1722:       assertFalse(node0.isCall());
1723:       assertFalse(node0.isRegExp());
1724:       assertFalse(node0.isDebugger());
1725:       assertFalse(node0.isBlock());
1726:       assertTrue(node0.isString());
1727:       assertFalse(node0.isTry());
1728:       assertFalse(node0.isWhile());
1729:       assertFalse(node0.isGetterDef());
1730:       assertEquals((-1), node0.getSourcePosition());
1731:       assertFalse(node0.isNE());
1732:       assertFalse(node0.isFor());
1733:       assertFalse(node0.isIf());
1734:       assertFalse(node0.isCast());
1735:       assertEquals((-1), node0.getLineno());
1736:       assertFalse(node0.isFunction());
1737:       assertFalse(node0.isContinue());
1738:       assertFalse(node0.hasMoreThanOneChild());
1739:       assertFalse(node0.isInc());
1740:       assertEquals(40, node0.getType());
1741:       assertFalse(node0.isIn());
1742:       assertFalse(node1.isNot());
1743:       assertFalse(node1.isWith());
1744:       assertFalse(node1.isObjectLit());
1745:       assertFalse(node1.isInstanceOf());
1746:       assertFalse(node1.isExprResult());
1747:       assertFalse(node1.isScript());
1748:       assertFalse(node1.isAnd());
1749:       assertFalse(node1.isAssign());
1750:       assertFalse(node1.isDec());
1751:       assertFalse(node1.isNumber());
1752:       assertFalse(node1.isTypeOf());
1753:       assertFalse(node1.isBreak());
1754:       assertFalse(node1.isGetProp());
1755:       assertFalse(node1.isGetElem());
1756:       assertFalse(node1.isReturn());
1757:       assertFalse(node1.hasOneChild());
1758:       assertFalse(node1.isThis());
1759:       assertFalse(node1.isComma());
1760:       assertFalse(node1.hasChildren());
1761:       assertFalse(node1.isHook());
1762:       assertFalse(node1.isWhile());
1763:       assertFalse(node1.hasMoreThanOneChild());
1764:       assertFalse(node1.isContinue());
1765:       assertFalse(node1.isInc());
1766:       assertFalse(node1.isIn());
1767:       assertFalse(node1.isNE());
1768:       assertFalse(node1.isFalse());
1769:       assertFalse(node1.isSetterDef());
1770:       assertFalse(node1.isCast());
1771:       assertEquals(108, node1.getCharno());
1772:       assertFalse(node1.isFunction());
1773:       assertEquals(12, node1.getLineno());
1774:       assertFalse(node1.isThrow());
1775:       assertEquals(40, node1.getType());
1776:       assertFalse(node1.isDefaultCase());
1777:       assertFalse(node1.isRegExp());
1778:       assertFalse(node1.isCatch());
1779:       assertFalse(node1.isVoid());
1780:       assertFalse(node1.isDebugger());
1781:       assertFalse(node1.isParamList());
1782:       assertFalse(node1.isTrue());
1783:       assertFalse(node1.isNull());
1784:       assertFalse(node1.isIf());
1785:       assertFalse(node1.isDelProp());
1786:       assertFalse(node1.isGetterDef());
1787:       assertEquals(49260, node1.getSourcePosition());
1788:       assertFalse(node1.isName());
1789:       assertFalse(node1.isCall());
1790:       assertFalse(node1.isTry());
1791:       assertTrue(node1.isString());
1792:       assertFalse(node1.isFor());
1793:       assertFalse(node1.isBlock());
1794:       assertFalse(node1.isDo());
1795:       assertFalse(node1.isCase());
1796:       assertFalse(node1.isAdd());
1797:       assertFalse(node1.isOr());
1798:       assertFalse(node1.isSwitch());
1799:       assertFalse(node1.isStringKey());
1800:       assertFalse(node1.isLabelName());
1801:       assertFalse(node1.isEmpty());
1802:       assertFalse(node1.isArrayLit());
1803:       assertFalse(node1.isAssignAdd());
1804:       assertFalse(node1.isLabel());
1805:       assertFalse(node1.isNew());
1806:       assertEquals(0, node1.getChildCount());
1807:       assertFalse(node1.isVar());
1808:       assertFalse(node2.isSetterDef());
1809:       assertFalse(node2.isNull());
1810:       assertFalse(node2.isParamList());
1811:       assertFalse(node2.isStringKey());
1812:       assertFalse(node2.isAdd());
1813:       assertFalse(node2.isDebugger());
1814:       assertFalse(node2.isFunction());
1815:       assertFalse(node2.isNew());
1816:       assertFalse(node2.isDefaultCase());
1817:       assertFalse(node2.isVar());
1818:       assertFalse(node2.isContinue());
1819:       assertEquals(40, node2.getType());
1820:       assertFalse(node2.isArrayLit());
1821:       assertEquals(0, node2.getChildCount());
1822:       assertEquals((-1), node2.getLineno());
1823:       assertFalse(node2.isIf());
1824:       assertFalse(node2.isFor());
1825:       assertFalse(node2.isNE());
1826:       assertFalse(node2.isCase());
1827:       assertFalse(node2.hasOneChild());
1828:       assertFalse(node2.isGetterDef());
1829:       assertFalse(node2.isIn());
1830:       assertFalse(node2.isNumber());
1831:       assertFalse(node2.isBlock());
1832:       assertFalse(node2.isRegExp());
1833:       assertFalse(node2.isTry());
1834:       assertTrue(node2.isString());
1835:       assertFalse(node2.isHook());
1836:       assertFalse(node2.hasMoreThanOneChild());
1837:       assertFalse(node2.isWith());
1838:       assertFalse(node2.isCatch());
1839:       assertFalse(node2.isInstanceOf());
1840:       assertFalse(node2.isThis());
1841:       assertFalse(node2.isGetProp());
1842:       assertFalse(node2.isComma());
1843:       assertFalse(node2.isThrow());
1844:       assertFalse(node2.isObjectLit());
1845:       assertFalse(node2.isNot());
1846:       assertFalse(node2.isScript());
1847:       assertEquals((-1), node2.getCharno());
1848:       assertFalse(node2.isInc());
1849:       assertFalse(node2.isSwitch());
1850:       assertFalse(node2.isAnd());
1851:       assertFalse(node2.isFalse());
1852:       assertFalse(node2.isLabelName());
1853:       assertFalse(node2.isCast());
1854:       assertFalse(node2.isTypeOf());
1855:       assertFalse(node2.isLabel());
1856:       assertFalse(node2.isOr());
1857:       assertEquals((-1), node2.getSourcePosition());
1858:       assertFalse(node2.isDec());
1859:       assertFalse(node2.isDelProp());
1860:       assertFalse(node2.hasChildren());
1861:       assertFalse(node2.isReturn());
1862:       assertFalse(node2.isAssignAdd());
1863:       assertFalse(node2.isDo());
1864:       assertFalse(node2.isEmpty());
1865:       assertFalse(node2.isTrue());
1866:       assertFalse(node2.isVoid());
1867:       assertFalse(node2.isExprResult());
1868:       assertFalse(node2.isWhile());
1869:       assertFalse(node2.isCall());
1870:       assertFalse(node2.isGetElem());
1871:       assertFalse(node2.isAssign());
1872:       assertFalse(node2.isName());
1873:       assertFalse(node2.isBreak());
1874:       assertFalse(node3.isNE());
1875:       assertFalse(node3.isIf());
1876:       assertFalse(node3.isDelProp());
1877:       assertFalse(node3.isGetterDef());
1878:       assertTrue(node3.hasChildren());
1879:       assertFalse(node3.isEmpty());
1880:       assertFalse(node3.isFor());
1881:       assertFalse(node3.isInc());
1882:       assertFalse(node3.isDefaultCase());
1883:       assertTrue(node3.hasMoreThanOneChild());
1884:       assertFalse(node3.isRegExp());
1885:       assertFalse(node3.isVoid());
1886:       assertFalse(node3.isIn());
1887:       assertFalse(node3.isTrue());
1888:       assertFalse(node3.isThis());
1889:       assertFalse(node3.isParamList());
1890:       assertFalse(node3.isInstanceOf());
1891:       assertFalse(node3.isCatch());
1892:       assertFalse(node3.isHook());
1893:       assertFalse(node3.isBlock());
1894:       assertFalse(node3.isVar());
1895:       assertFalse(node3.isSwitch());
1896:       assertEquals((-1), node3.getCharno());
1897:       assertFalse(node3.isTry());
1898:       assertFalse(node3.isCase());
1899:       assertFalse(node3.isScript());
1900:       assertFalse(node3.isArrayLit());
1901:       assertFalse(node3.isStringKey());
1902:       assertEquals((-1), node3.getSourcePosition());
1903:       assertFalse(node3.isDec());
1904:       assertFalse(node3.isNumber());
1905:       assertFalse(node3.isTypeOf());
1906:       assertEquals((-1), node3.getLineno());
1907:       assertFalse(node3.isLabelName());
1908:       assertFalse(node3.isGetElem());
1909:       assertFalse(node3.isCast());
1910:       assertFalse(node3.isContinue());
1911:       assertFalse(node3.hasOneChild());
1912:       assertFalse(node3.isAssign());
1913:       assertFalse(node3.isReturn());
1914:       assertFalse(node3.isAssignAdd());
1915:       assertFalse(node3.isWhile());
1916:       assertFalse(node3.isLabel());
1917:       assertEquals(3, node3.getChildCount());
1918:       assertFalse(node3.isWith());
1919:       assertFalse(node3.isDo());
1920:       assertFalse(node3.isNew());
1921:       assertEquals((-1600), node3.getType());
1922:       assertFalse(node3.isExprResult());
1923:       assertFalse(node3.isAdd());
1924:       assertFalse(node3.isName());
1925:       assertFalse(node3.isOr());
1926:       assertFalse(node3.isNull());
1927:       assertFalse(node3.isSetterDef());
1928:       assertFalse(node3.isComma());
1929:       assertFalse(node3.isBreak());
1930:       assertFalse(node3.isGetProp());
1931:       assertFalse(node3.isCall());
1932:       assertFalse(node3.isFalse());
1933:       assertFalse(node3.isThrow());
1934:       assertFalse(node3.isDebugger());
1935:       assertFalse(node3.isFunction());
1936:       assertFalse(node3.isString());
1937:       assertFalse(node3.isAnd());
1938:       assertFalse(node3.isObjectLit());
1939:       assertFalse(node3.isNot());
1940:       
1941:       int int1 = node0.getLength();
1942:       assertNotSame(node0, node1);
1943:       assertNotSame(node0, node2);
1944:       assertFalse(node0.equals((Object)node3));
1945:       assertFalse(node0.equals((Object)node1));
1946:       assertFalse(node0.equals((Object)node2));
1947:       assertFalse(int1 == int0);
1948:       assertEquals(29, Node.JSDOC_INFO_PROP);
1949:       assertEquals(47, Node.IS_DISPATCHER);
1950:       assertEquals(2, Node.POST_FLAG);
1951:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1952:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1953:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1954:       assertEquals(32, Node.INCRDECR_PROP);
1955:       assertEquals(53, Node.INPUT_ID);
1956:       assertEquals(12, Node.COLUMN_BITS);
1957:       assertEquals(49, Node.DIRECT_EVAL);
1958:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1959:       assertEquals(36, Node.QUOTED_PROP);
1960:       assertEquals(55, Node.INFERRED_FUNCTION);
1961:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1962:       assertEquals(4095, Node.COLUMN_MASK);
1963:       assertEquals(52, Node.LENGTH);
1964:       assertEquals(48, Node.DIRECTIVES);
1965:       assertEquals(37, Node.OPT_ARG_NAME);
1966:       assertEquals(57, Node.REFLECTED_OBJECT);
1967:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1968:       assertEquals(56, Node.CHANGE_TIME);
1969:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1970:       assertEquals(50, Node.FREE_CALL);
1971:       assertEquals(8, Node.FLAG_NO_THROWS);
1972:       assertEquals(39, Node.EMPTY_BLOCK);
1973:       assertEquals(40, Node.ORIGINALNAME_PROP);
1974:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1975:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1976:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1977:       assertEquals(57, Node.LAST_PROP);
1978:       assertEquals(30, Node.VAR_ARGS_NAME);
1979:       assertEquals(1, Node.DECR_FLAG);
1980:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1981:       assertEquals(46, Node.IS_NAMESPACE);
1982:       assertEquals(54, Node.SLASH_V);
1983:       assertEquals(43, Node.IS_CONSTANT_NAME);
1984:       assertEquals(0, int1);
1985:       assertFalse(node0.isComma());
1986:       assertFalse(node0.isBreak());
1987:       assertFalse(node0.isThis());
1988:       assertFalse(node0.isGetProp());
1989:       assertFalse(node0.isThrow());
1990:       assertFalse(node0.isInstanceOf());
1991:       assertFalse(node0.isHook());
1992:       assertFalse(node0.isFalse());
1993:       assertFalse(node0.isWith());
1994:       assertFalse(node0.isScript());
1995:       assertEquals((-1), node0.getCharno());
1996:       assertFalse(node0.isCase());
1997:       assertFalse(node0.isAnd());
1998:       assertFalse(node0.isSwitch());
1999:       assertFalse(node0.hasOneChild());
2000:       assertFalse(node0.isNot());
2001:       assertFalse(node0.isObjectLit());
2002:       assertFalse(node0.isNumber());
2003:       assertFalse(node0.isTypeOf());
2004:       assertFalse(node0.isDec());
2005:       assertFalse(node0.hasChildren());
2006:       assertFalse(node0.isLabelName());
2007:       assertFalse(node0.isDelProp());
2008:       assertFalse(node0.isAssignAdd());
2009:       assertFalse(node0.isArrayLit());
2010:       assertFalse(node0.isReturn());
2011:       assertFalse(node0.isGetElem());
2012:       assertFalse(node0.isLabel());
2013:       assertFalse(node0.isAssign());
2014:       assertFalse(node0.isTrue());
2015:       assertFalse(node0.isExprResult());
2016:       assertFalse(node0.isNew());
2017:       assertFalse(node0.isVoid());
2018:       assertFalse(node0.isDo());
2019:       assertFalse(node0.isDefaultCase());
2020:       assertFalse(node0.isAdd());
2021:       assertFalse(node0.isEmpty());
2022:       assertFalse(node0.isOr());
2023:       assertFalse(node0.isNull());
2024:       assertFalse(node0.isSetterDef());
2025:       assertFalse(node0.isName());
2026:       assertFalse(node0.isStringKey());
2027:       assertFalse(node0.isParamList());
2028:       assertFalse(node0.isCatch());
2029:       assertEquals(0, node0.getChildCount());
2030:       assertFalse(node0.isVar());
2031:       assertFalse(node0.isCall());
2032:       assertFalse(node0.isRegExp());
2033:       assertFalse(node0.isDebugger());
2034:       assertFalse(node0.isBlock());
2035:       assertTrue(node0.isString());
2036:       assertFalse(node0.isTry());
2037:       assertFalse(node0.isWhile());
2038:       assertFalse(node0.isGetterDef());
2039:       assertEquals((-1), node0.getSourcePosition());
2040:       assertFalse(node0.isNE());
2041:       assertFalse(node0.isFor());
2042:       assertFalse(node0.isIf());
2043:       assertFalse(node0.isCast());
2044:       assertEquals((-1), node0.getLineno());
2045:       assertFalse(node0.isFunction());
2046:       assertFalse(node0.isContinue());
2047:       assertFalse(node0.hasMoreThanOneChild());
2048:       assertFalse(node0.isInc());
2049:       assertEquals(40, node0.getType());
2050:       assertFalse(node0.isIn());
2051:       
2052:       node0.setOptionalArg(false);
2053:       assertNotSame(node0, node1);
2054:       assertNotSame(node0, node2);
2055:       assertFalse(node0.equals((Object)node3));
2056:       assertFalse(node0.equals((Object)node1));
2057:       assertFalse(node0.equals((Object)node2));
2058:       assertEquals(29, Node.JSDOC_INFO_PROP);
2059:       assertEquals(47, Node.IS_DISPATCHER);
2060:       assertEquals(2, Node.POST_FLAG);
2061:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2062:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2063:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2064:       assertEquals(32, Node.INCRDECR_PROP);
2065:       assertEquals(53, Node.INPUT_ID);
2066:       assertEquals(12, Node.COLUMN_BITS);
2067:       assertEquals(49, Node.DIRECT_EVAL);
2068:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2069:       assertEquals(36, Node.QUOTED_PROP);
2070:       assertEquals(55, Node.INFERRED_FUNCTION);
2071:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2072:       assertEquals(4095, Node.COLUMN_MASK);
2073:       assertEquals(52, Node.LENGTH);
2074:       assertEquals(48, Node.DIRECTIVES);
2075:       assertEquals(37, Node.OPT_ARG_NAME);
2076:       assertEquals(57, Node.REFLECTED_OBJECT);
2077:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2078:       assertEquals(56, Node.CHANGE_TIME);
2079:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2080:       assertEquals(50, Node.FREE_CALL);
2081:       assertEquals(8, Node.FLAG_NO_THROWS);
2082:       assertEquals(39, Node.EMPTY_BLOCK);
2083:       assertEquals(40, Node.ORIGINALNAME_PROP);
2084:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2085:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2086:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2087:       assertEquals(57, Node.LAST_PROP);
2088:       assertEquals(30, Node.VAR_ARGS_NAME);
2089:       assertEquals(1, Node.DECR_FLAG);
2090:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2091:       assertEquals(46, Node.IS_NAMESPACE);
2092:       assertEquals(54, Node.SLASH_V);
2093:       assertEquals(43, Node.IS_CONSTANT_NAME);
2094:       assertFalse(node0.isComma());
2095:       assertFalse(node0.isBreak());
2096:       assertFalse(node0.isThis());
2097:       assertFalse(node0.isGetProp());
2098:       assertFalse(node0.isThrow());
2099:       assertFalse(node0.isInstanceOf());
2100:       assertFalse(node0.isHook());
2101:       assertFalse(node0.isFalse());
2102:       assertFalse(node0.isWith());
2103:       assertFalse(node0.isScript());
2104:       assertEquals((-1), node0.getCharno());
2105:       assertFalse(node0.isCase());
2106:       assertFalse(node0.isAnd());
2107:       assertFalse(node0.isSwitch());
2108:       assertFalse(node0.hasOneChild());
2109:       assertFalse(node0.isNot());
2110:       assertFalse(node0.isObjectLit());
2111:       assertFalse(node0.isNumber());
2112:       assertFalse(node0.isTypeOf());
2113:       assertFalse(node0.isDec());
2114:       assertFalse(node0.hasChildren());
2115:       assertFalse(node0.isLabelName());
2116:       assertFalse(node0.isDelProp());
2117:       assertFalse(node0.isAssignAdd());
2118:       assertFalse(node0.isArrayLit());
2119:       assertFalse(node0.isReturn());
2120:       assertFalse(node0.isGetElem());
2121:       assertFalse(node0.isLabel());
2122:       assertFalse(node0.isAssign());
2123:       assertFalse(node0.isTrue());
2124:       assertFalse(node0.isExprResult());
2125:       assertFalse(node0.isNew());
2126:       assertFalse(node0.isVoid());
2127:       assertFalse(node0.isDo());
2128:       assertFalse(node0.isDefaultCase());
2129:       assertFalse(node0.isAdd());
2130:       assertFalse(node0.isEmpty());
2131:       assertFalse(node0.isOr());
2132:       assertFalse(node0.isNull());
2133:       assertFalse(node0.isSetterDef());
2134:       assertFalse(node0.isName());
2135:       assertFalse(node0.isStringKey());
2136:       assertFalse(node0.isParamList());
2137:       assertFalse(node0.isCatch());
2138:       assertEquals(0, node0.getChildCount());
2139:       assertFalse(node0.isVar());
2140:       assertFalse(node0.isCall());
2141:       assertFalse(node0.isRegExp());
2142:       assertFalse(node0.isDebugger());
2143:       assertFalse(node0.isBlock());
2144:       assertTrue(node0.isString());
2145:       assertFalse(node0.isTry());
2146:       assertFalse(node0.isWhile());
2147:       assertFalse(node0.isGetterDef());
2148:       assertEquals((-1), node0.getSourcePosition());
2149:       assertFalse(node0.isNE());
2150:       assertFalse(node0.isFor());
2151:       assertFalse(node0.isIf());
2152:       assertFalse(node0.isCast());
2153:       assertEquals((-1), node0.getLineno());
2154:       assertFalse(node0.isFunction());
2155:       assertFalse(node0.isContinue());
2156:       assertFalse(node0.hasMoreThanOneChild());
2157:       assertFalse(node0.isInc());
2158:       assertEquals(40, node0.getType());
2159:       assertFalse(node0.isIn());
2160:       
2161:       boolean boolean1 = node3.isArrayLit();
2162:       assertNotSame(node0, node1);
2163:       assertNotSame(node0, node2);
2164:       assertNotSame(node1, node2);
2165:       assertNotSame(node1, node0);
2166:       assertNotSame(node2, node0);
2167:       assertNotSame(node2, node1);
2168:       assertFalse(node0.equals((Object)node3));
2169:       assertFalse(node0.equals((Object)node1));
2170:       assertFalse(node0.equals((Object)node2));
2171:       assertFalse(node1.equals((Object)node2));
2172:       assertFalse(node1.equals((Object)node0));
2173:       assertFalse(node1.equals((Object)node3));
2174:       assertFalse(node2.equals((Object)node0));
2175:       assertFalse(node2.equals((Object)node3));
2176:       assertFalse(node2.equals((Object)node1));
2177:       assertFalse(node3.equals((Object)node0));
2178:       assertFalse(node3.equals((Object)node2));
2179:       assertFalse(node3.equals((Object)node1));
2180:       assertTrue(boolean1 == boolean0);
2181:       assertEquals(29, Node.JSDOC_INFO_PROP);
2182:       assertEquals(47, Node.IS_DISPATCHER);
2183:       assertEquals(2, Node.POST_FLAG);
2184:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2185:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2186:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2187:       assertEquals(32, Node.INCRDECR_PROP);
2188:       assertEquals(53, Node.INPUT_ID);
2189:       assertEquals(12, Node.COLUMN_BITS);
2190:       assertEquals(49, Node.DIRECT_EVAL);
2191:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2192:       assertEquals(36, Node.QUOTED_PROP);
2193:       assertEquals(55, Node.INFERRED_FUNCTION);
2194:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2195:       assertEquals(4095, Node.COLUMN_MASK);
2196:       assertEquals(52, Node.LENGTH);
2197:       assertEquals(48, Node.DIRECTIVES);
2198:       assertEquals(37, Node.OPT_ARG_NAME);
2199:       assertEquals(57, Node.REFLECTED_OBJECT);
2200:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2201:       assertEquals(56, Node.CHANGE_TIME);
2202:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2203:       assertEquals(50, Node.FREE_CALL);
2204:       assertEquals(8, Node.FLAG_NO_THROWS);
2205:       assertEquals(39, Node.EMPTY_BLOCK);
2206:       assertEquals(40, Node.ORIGINALNAME_PROP);
2207:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2208:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2209:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2210:       assertEquals(57, Node.LAST_PROP);
2211:       assertEquals(30, Node.VAR_ARGS_NAME);
2212:       assertEquals(1, Node.DECR_FLAG);
2213:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2214:       assertEquals(46, Node.IS_NAMESPACE);
2215:       assertEquals(54, Node.SLASH_V);
2216:       assertEquals(43, Node.IS_CONSTANT_NAME);
2217:       assertEquals(1, Node.DECR_FLAG);
2218:       assertEquals(30, Node.VAR_ARGS_NAME);
2219:       assertEquals(46, Node.IS_NAMESPACE);
2220:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2221:       assertEquals(12, Node.COLUMN_BITS);
2222:       assertEquals(37, Node.OPT_ARG_NAME);
2223:       assertEquals(2, Node.POST_FLAG);
2224:       assertEquals(54, Node.SLASH_V);
2225:       assertEquals(56, Node.CHANGE_TIME);
2226:       assertEquals(49, Node.DIRECT_EVAL);
2227:       assertEquals(40, Node.ORIGINALNAME_PROP);
2228:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2229:       assertEquals(57, Node.REFLECTED_OBJECT);
2230:       assertEquals(47, Node.IS_DISPATCHER);
2231:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2232:       assertEquals(52, Node.LENGTH);
2233:       assertEquals(8, Node.FLAG_NO_THROWS);
2234:       assertEquals(57, Node.LAST_PROP);
2235:       assertEquals(29, Node.JSDOC_INFO_PROP);
2236:       assertEquals(53, Node.INPUT_ID);
2237:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2238:       assertEquals(39, Node.EMPTY_BLOCK);
2239:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2240:       assertEquals(55, Node.INFERRED_FUNCTION);
2241:       assertEquals(4095, Node.COLUMN_MASK);
2242:       assertEquals(36, Node.QUOTED_PROP);
2243:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2244:       assertEquals(48, Node.DIRECTIVES);
2245:       assertEquals(43, Node.IS_CONSTANT_NAME);
2246:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2247:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2249:       assertEquals(50, Node.FREE_CALL);
2250:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2251:       assertEquals(32, Node.INCRDECR_PROP);
2252:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2253:       assertEquals(56, Node.CHANGE_TIME);
2254:       assertEquals(47, Node.IS_DISPATCHER);
2255:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2256:       assertEquals(2, Node.POST_FLAG);
2257:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2258:       assertEquals(37, Node.OPT_ARG_NAME);
2259:       assertEquals(29, Node.JSDOC_INFO_PROP);
2260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2261:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2262:       assertEquals(46, Node.IS_NAMESPACE);
2263:       assertEquals(49, Node.DIRECT_EVAL);
2264:       assertEquals(1, Node.DECR_FLAG);
2265:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2266:       assertEquals(4095, Node.COLUMN_MASK);
2267:       assertEquals(32, Node.INCRDECR_PROP);
2268:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2269:       assertEquals(12, Node.COLUMN_BITS);
2270:       assertEquals(8, Node.FLAG_NO_THROWS);
2271:       assertEquals(50, Node.FREE_CALL);
2272:       assertEquals(48, Node.DIRECTIVES);
2273:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2274:       assertEquals(39, Node.EMPTY_BLOCK);
2275:       assertEquals(40, Node.ORIGINALNAME_PROP);
2276:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2277:       assertEquals(57, Node.REFLECTED_OBJECT);
2278:       assertEquals(52, Node.LENGTH);
2279:       assertEquals(54, Node.SLASH_V);
2280:       assertEquals(43, Node.IS_CONSTANT_NAME);
2281:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2282:       assertEquals(57, Node.LAST_PROP);
2283:       assertEquals(36, Node.QUOTED_PROP);
2284:       assertEquals(30, Node.VAR_ARGS_NAME);
2285:       assertEquals(55, Node.INFERRED_FUNCTION);
2286:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2287:       assertEquals(53, Node.INPUT_ID);
2288:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2289:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2290:       assertEquals(50, Node.FREE_CALL);
2291:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2292:       assertEquals(8, Node.FLAG_NO_THROWS);
2293:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2294:       assertEquals(57, Node.REFLECTED_OBJECT);
2295:       assertEquals(52, Node.LENGTH);
2296:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2297:       assertEquals(55, Node.INFERRED_FUNCTION);
2298:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2299:       assertEquals(39, Node.EMPTY_BLOCK);
2300:       assertEquals(30, Node.VAR_ARGS_NAME);
2301:       assertEquals(43, Node.IS_CONSTANT_NAME);
2302:       assertEquals(57, Node.LAST_PROP);
2303:       assertEquals(54, Node.SLASH_V);
2304:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2305:       assertEquals(46, Node.IS_NAMESPACE);
2306:       assertEquals(40, Node.ORIGINALNAME_PROP);
2307:       assertEquals(56, Node.CHANGE_TIME);
2308:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2309:       assertEquals(2, Node.POST_FLAG);
2310:       assertEquals(47, Node.IS_DISPATCHER);
2311:       assertEquals(32, Node.INCRDECR_PROP);
2312:       assertEquals(1, Node.DECR_FLAG);
2313:       assertEquals(29, Node.JSDOC_INFO_PROP);
2314:       assertEquals(53, Node.INPUT_ID);
2315:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2316:       assertEquals(49, Node.DIRECT_EVAL);
2317:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2318:       assertEquals(12, Node.COLUMN_BITS);
2319:       assertEquals(36, Node.QUOTED_PROP);
2320:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2321:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2322:       assertEquals(4095, Node.COLUMN_MASK);
2323:       assertEquals(37, Node.OPT_ARG_NAME);
2324:       assertEquals(48, Node.DIRECTIVES);
2325:       assertFalse(boolean1);
2326:       assertFalse(node0.isComma());
2327:       assertFalse(node0.isBreak());
2328:       assertFalse(node0.isThis());
2329:       assertFalse(node0.isGetProp());
2330:       assertFalse(node0.isThrow());
2331:       assertFalse(node0.isInstanceOf());
2332:       assertFalse(node0.isHook());
2333:       assertFalse(node0.isFalse());
2334:       assertFalse(node0.isWith());
2335:       assertFalse(node0.isScript());
2336:       assertEquals((-1), node0.getCharno());
2337:       assertFalse(node0.isCase());
2338:       assertFalse(node0.isAnd());
2339:       assertFalse(node0.isSwitch());
2340:       assertFalse(node0.hasOneChild());
2341:       assertFalse(node0.isNot());
2342:       assertFalse(node0.isObjectLit());
2343:       assertFalse(node0.isNumber());
2344:       assertFalse(node0.isTypeOf());
2345:       assertFalse(node0.isDec());
2346:       assertFalse(node0.hasChildren());
2347:       assertFalse(node0.isLabelName());
2348:       assertFalse(node0.isDelProp());
2349:       assertFalse(node0.isAssignAdd());
2350:       assertFalse(node0.isArrayLit());
2351:       assertFalse(node0.isReturn());
2352:       assertFalse(node0.isGetElem());
2353:       assertFalse(node0.isLabel());
2354:       assertFalse(node0.isAssign());
2355:       assertFalse(node0.isTrue());
2356:       assertFalse(node0.isExprResult());
2357:       assertFalse(node0.isNew());
2358:       assertFalse(node0.isVoid());
2359:       
2360:       int int2 = node1.getChildCount();
2361:       assertNotSame(node1, node2);
2362:       assertNotSame(node1, node0);
2363:       assertFalse(node1.equals((Object)node2));
2364:       assertFalse(node1.equals((Object)node0));
2365:       assertFalse(node1.equals((Object)node3));
2366:       assertTrue(int2 == int1);
2367:       assertFalse(int2 == int0);
2368:       assertEquals(1, Node.DECR_FLAG);
2369:       assertEquals(30, Node.VAR_ARGS_NAME);
2370:       assertEquals(46, Node.IS_NAMESPACE);
2371:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2372:       assertEquals(12, Node.COLUMN_BITS);
2373:       assertEquals(37, Node.OPT_ARG_NAME);
2374:       assertEquals(2, Node.POST_FLAG);
2375:       assertEquals(54, Node.SLASH_V);
2376:       assertEquals(56, Node.CHANGE_TIME);
2377:       assertEquals(49, Node.DIRECT_EVAL);
2378:       assertEquals(40, Node.ORIGINALNAME_PROP);
2379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2380:       assertEquals(57, Node.REFLECTED_OBJECT);
2381:       assertEquals(47, Node.IS_DISPATCHER);
2382:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2383:       assertEquals(52, Node.LENGTH);
2384:       assertEquals(8, Node.FLAG_NO_THROWS);
2385:       assertEquals(57, Node.LAST_PROP);
2386:       assertEquals(29, Node.JSDOC_INFO_PROP);
2387:       assertEquals(53, Node.INPUT_ID);
2388:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2389:       assertEquals(39, Node.EMPTY_BLOCK);
2390:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2391:       assertEquals(55, Node.INFERRED_FUNCTION);
2392:       assertEquals(4095, Node.COLUMN_MASK);
2393:       assertEquals(36, Node.QUOTED_PROP);
2394:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2395:       assertEquals(48, Node.DIRECTIVES);
2396:       assertEquals(43, Node.IS_CONSTANT_NAME);
2397:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2398:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2399:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2400:       assertEquals(50, Node.FREE_CALL);
2401:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2402:       assertEquals(32, Node.INCRDECR_PROP);
2403:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2404:       assertEquals(0, int2);
2405:       
2406:       Node node4 = node0.srcrefTree(node1);
2407:       assertNotSame(node0, node1);
2408:       assertSame(node0, node4);
2409:       assertNotSame(node0, node2);
2410:       assertNotSame(node1, node2);
2411:       assertNotSame(node1, node0);
2412:       assertNotSame(node1, node4);
2413:       assertNotSame(node4, node1);
2414:       assertSame(node4, node0);
2415:       assertNotSame(node4, node2);
2416:       assertFalse(node0.equals((Object)node3));
2417:       assertFalse(node0.equals((Object)node1));
2418:       assertFalse(node0.equals((Object)node2));
2419:       assertFalse(node1.equals((Object)node2));
2420:       assertFalse(node1.equals((Object)node0));
2421:       assertFalse(node1.equals((Object)node3));
2422:       assertFalse(node4.equals((Object)node1));
2423:       assertFalse(node4.equals((Object)node3));
2424:       assertFalse(node4.equals((Object)node2));
2425:       assertEquals(29, Node.JSDOC_INFO_PROP);
2426:       assertEquals(47, Node.IS_DISPATCHER);
2427:       assertEquals(2, Node.POST_FLAG);
2428:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2429:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2430:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2431:       assertEquals(32, Node.INCRDECR_PROP);
2432:       assertEquals(53, Node.INPUT_ID);
2433:       assertEquals(12, Node.COLUMN_BITS);
2434:       assertEquals(49, Node.DIRECT_EVAL);
2435:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2436:       assertEquals(36, Node.QUOTED_PROP);
2437:       assertEquals(55, Node.INFERRED_FUNCTION);
2438:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2439:       assertEquals(4095, Node.COLUMN_MASK);
2440:       assertEquals(52, Node.LENGTH);
2441:       assertEquals(48, Node.DIRECTIVES);
2442:       assertEquals(37, Node.OPT_ARG_NAME);
2443:       assertEquals(57, Node.REFLECTED_OBJECT);
2444:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2445:       assertEquals(56, Node.CHANGE_TIME);
2446:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2447:       assertEquals(50, Node.FREE_CALL);
2448:       assertEquals(8, Node.FLAG_NO_THROWS);
2449:       assertEquals(39, Node.EMPTY_BLOCK);
2450:       assertEquals(40, Node.ORIGINALNAME_PROP);
2451:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2452:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2453:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2454:       assertEquals(57, Node.LAST_PROP);
2455:       assertEquals(30, Node.VAR_ARGS_NAME);
2456:       assertEquals(1, Node.DECR_FLAG);
2457:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2458:       assertEquals(46, Node.IS_NAMESPACE);
2459:       assertEquals(54, Node.SLASH_V);
2460:       assertEquals(43, Node.IS_CONSTANT_NAME);
2461:       assertEquals(1, Node.DECR_FLAG);
2462:       assertEquals(30, Node.VAR_ARGS_NAME);
2463:       assertEquals(46, Node.IS_NAMESPACE);
2464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2465:       assertEquals(12, Node.COLUMN_BITS);
2466:       assertEquals(37, Node.OPT_ARG_NAME);
2467:       assertEquals(2, Node.POST_FLAG);
2468:       assertEquals(54, Node.SLASH_V);
2469:       assertEquals(56, Node.CHANGE_TIME);
2470:       assertEquals(49, Node.DIRECT_EVAL);
2471:       assertEquals(40, Node.ORIGINALNAME_PROP);
2472:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2473:       assertEquals(57, Node.REFLECTED_OBJECT);
2474:       assertEquals(47, Node.IS_DISPATCHER);
2475:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2476:       assertEquals(52, Node.LENGTH);
2477:       assertEquals(8, Node.FLAG_NO_THROWS);
2478:       assertEquals(57, Node.LAST_PROP);
2479:       assertEquals(29, Node.JSDOC_INFO_PROP);
2480:       assertEquals(53, Node.INPUT_ID);
2481:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2482:       assertEquals(39, Node.EMPTY_BLOCK);
2483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2484:       assertEquals(55, Node.INFERRED_FUNCTION);
2485:       assertEquals(4095, Node.COLUMN_MASK);
2486:       assertEquals(36, Node.QUOTED_PROP);
2487:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2488:       assertEquals(48, Node.DIRECTIVES);
2489:       assertEquals(43, Node.IS_CONSTANT_NAME);
2490:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2491:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2492:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2493:       assertEquals(50, Node.FREE_CALL);
2494:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2495:       assertEquals(32, Node.INCRDECR_PROP);
2496:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2497:       assertEquals(57, Node.REFLECTED_OBJECT);
2498:       assertEquals(40, Node.ORIGINALNAME_PROP);
2499:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2500:       assertEquals(8, Node.FLAG_NO_THROWS);
2501:       assertEquals(39, Node.EMPTY_BLOCK);
2502:       assertEquals(54, Node.SLASH_V);
2503:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2504:       assertEquals(50, Node.FREE_CALL);
2505:       assertEquals(52, Node.LENGTH);
2506:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2507:       assertEquals(46, Node.IS_NAMESPACE);
2508:       assertEquals(55, Node.INFERRED_FUNCTION);
2509:       assertEquals(2, Node.POST_FLAG);
2510:       assertEquals(47, Node.IS_DISPATCHER);
2511:       assertEquals(57, Node.LAST_PROP);
2512:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2513:       assertEquals(30, Node.VAR_ARGS_NAME);
2514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2515:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2516:       assertEquals(29, Node.JSDOC_INFO_PROP);
2517:       assertEquals(53, Node.INPUT_ID);
2518:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2519:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2520:       assertEquals(43, Node.IS_CONSTANT_NAME);
2521:       assertEquals(56, Node.CHANGE_TIME);
2522:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2523:       assertEquals(36, Node.QUOTED_PROP);
2524:       assertEquals(12, Node.COLUMN_BITS);
2525:       assertEquals(4095, Node.COLUMN_MASK);
2526:       assertEquals(49, Node.DIRECT_EVAL);
2527:       assertEquals(37, Node.OPT_ARG_NAME);
2528:       assertEquals(48, Node.DIRECTIVES);
2529:       assertEquals(32, Node.INCRDECR_PROP);
2530:       assertEquals(1, Node.DECR_FLAG);
2531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2532:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2533:   }
2534: }
RegularFileObject[/tmp/EvoSuite_63_1628256073503/com/google/javascript/rhino/Node_63_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:13 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_63_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_63_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_63_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:14.166 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("Undefined");
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());

Node node1 = Node.newString(".", 12, 108);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertEquals(108, node1.getCharno());
assertFalse(node1.isFunction());
assertEquals(12, node1.getLineno());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertEquals(49260, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());

boolean boolean0 = node1.isSyntheticBlock();
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(boolean0);
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertEquals(108, node1.getCharno());
assertFalse(node1.isFunction());
assertEquals(12, node1.getLineno());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertEquals(49260, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());

Node node2 = Node.newString(".");
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isBreak());

Node node3 = new Node((-1600), node0, node1, node2, node2, 31, (-2139));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertEquals(108, node1.getCharno());
assertFalse(node1.isFunction());
assertEquals(12, node1.getLineno());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertEquals(49260, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertTrue(node3.hasChildren());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isIn());
assertFalse(node3.isTrue());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertEquals((-1600), node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isAdd());
assertFalse(node3.isName());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());

Iterable<Node> iterable0 = node2.children();
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(iterable0.contains(node3));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isBreak());

node1.checkTreeEqualsImpl(node3);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertEquals(108, node1.getCharno());
assertFalse(node1.isFunction());
assertEquals(12, node1.getLineno());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertEquals(49260, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertTrue(node3.hasChildren());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isIn());
assertFalse(node3.isTrue());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertEquals((-1600), node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isAdd());
assertFalse(node3.isName());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());

String string0 = node2.toString();
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals("STRING .", string0);
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isBreak());

int int0 = node3.getSourceOffset();
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals((-1), int0);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isObjectLit());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isExprResult());
assertFalse(node1.isScript());
assertFalse(node1.isAnd());
assertFalse(node1.isAssign());
assertFalse(node1.isDec());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBreak());
assertFalse(node1.isGetProp());
assertFalse(node1.isGetElem());
assertFalse(node1.isReturn());
assertFalse(node1.hasOneChild());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.hasChildren());
assertFalse(node1.isHook());
assertFalse(node1.isWhile());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isIn());
assertFalse(node1.isNE());
assertFalse(node1.isFalse());
assertFalse(node1.isSetterDef());
assertFalse(node1.isCast());
assertEquals(108, node1.getCharno());
assertFalse(node1.isFunction());
assertEquals(12, node1.getLineno());
assertFalse(node1.isThrow());
assertEquals(40, node1.getType());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isRegExp());
assertFalse(node1.isCatch());
assertFalse(node1.isVoid());
assertFalse(node1.isDebugger());
assertFalse(node1.isParamList());
assertFalse(node1.isTrue());
assertFalse(node1.isNull());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isGetterDef());
assertEquals(49260, node1.getSourcePosition());
assertFalse(node1.isName());
assertFalse(node1.isCall());
assertFalse(node1.isTry());
assertTrue(node1.isString());
assertFalse(node1.isFor());
assertFalse(node1.isBlock());
assertFalse(node1.isDo());
assertFalse(node1.isCase());
assertFalse(node1.isAdd());
assertFalse(node1.isOr());
assertFalse(node1.isSwitch());
assertFalse(node1.isStringKey());
assertFalse(node1.isLabelName());
assertFalse(node1.isEmpty());
assertFalse(node1.isArrayLit());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isNew());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isVar());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNull());
assertFalse(node2.isParamList());
assertFalse(node2.isStringKey());
assertFalse(node2.isAdd());
assertFalse(node2.isDebugger());
assertFalse(node2.isFunction());
assertFalse(node2.isNew());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isVar());
assertFalse(node2.isContinue());
assertEquals(40, node2.getType());
assertFalse(node2.isArrayLit());
assertEquals(0, node2.getChildCount());
assertEquals((-1), node2.getLineno());
assertFalse(node2.isIf());
assertFalse(node2.isFor());
assertFalse(node2.isNE());
assertFalse(node2.isCase());
assertFalse(node2.hasOneChild());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isNumber());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isTry());
assertTrue(node2.isString());
assertFalse(node2.isHook());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isThis());
assertFalse(node2.isGetProp());
assertFalse(node2.isComma());
assertFalse(node2.isThrow());
assertFalse(node2.isObjectLit());
assertFalse(node2.isNot());
assertFalse(node2.isScript());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isInc());
assertFalse(node2.isSwitch());
assertFalse(node2.isAnd());
assertFalse(node2.isFalse());
assertFalse(node2.isLabelName());
assertFalse(node2.isCast());
assertFalse(node2.isTypeOf());
assertFalse(node2.isLabel());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isDec());
assertFalse(node2.isDelProp());
assertFalse(node2.hasChildren());
assertFalse(node2.isReturn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isDo());
assertFalse(node2.isEmpty());
assertFalse(node2.isTrue());
assertFalse(node2.isVoid());
assertFalse(node2.isExprResult());
assertFalse(node2.isWhile());
assertFalse(node2.isCall());
assertFalse(node2.isGetElem());
assertFalse(node2.isAssign());
assertFalse(node2.isName());
assertFalse(node2.isBreak());
assertFalse(node3.isNE());
assertFalse(node3.isIf());
assertFalse(node3.isDelProp());
assertFalse(node3.isGetterDef());
assertTrue(node3.hasChildren());
assertFalse(node3.isEmpty());
assertFalse(node3.isFor());
assertFalse(node3.isInc());
assertFalse(node3.isDefaultCase());
assertTrue(node3.hasMoreThanOneChild());
assertFalse(node3.isRegExp());
assertFalse(node3.isVoid());
assertFalse(node3.isIn());
assertFalse(node3.isTrue());
assertFalse(node3.isThis());
assertFalse(node3.isParamList());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isCatch());
assertFalse(node3.isHook());
assertFalse(node3.isBlock());
assertFalse(node3.isVar());
assertFalse(node3.isSwitch());
assertEquals((-1), node3.getCharno());
assertFalse(node3.isTry());
assertFalse(node3.isCase());
assertFalse(node3.isScript());
assertFalse(node3.isArrayLit());
assertFalse(node3.isStringKey());
assertEquals((-1), node3.getSourcePosition());
assertFalse(node3.isDec());
assertFalse(node3.isNumber());
assertFalse(node3.isTypeOf());
assertEquals((-1), node3.getLineno());
assertFalse(node3.isLabelName());
assertFalse(node3.isGetElem());
assertFalse(node3.isCast());
assertFalse(node3.isContinue());
assertFalse(node3.hasOneChild());
assertFalse(node3.isAssign());
assertFalse(node3.isReturn());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertEquals(3, node3.getChildCount());
assertFalse(node3.isWith());
assertFalse(node3.isDo());
assertFalse(node3.isNew());
assertEquals((-1600), node3.getType());
assertFalse(node3.isExprResult());
assertFalse(node3.isAdd());
assertFalse(node3.isName());
assertFalse(node3.isOr());
assertFalse(node3.isNull());
assertFalse(node3.isSetterDef());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isGetProp());
assertFalse(node3.isCall());
assertFalse(node3.isFalse());
assertFalse(node3.isThrow());
assertFalse(node3.isDebugger());
assertFalse(node3.isFunction());
assertFalse(node3.isString());
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());

int int1 = node0.getLength();
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(int1 == int0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(0, int1);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());

node0.setOptionalArg(false);
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAdd());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertFalse(node0.isNull());
assertFalse(node0.isSetterDef());
assertFalse(node0.isName());
assertFalse(node0.isStringKey());
assertFalse(node0.isParamList());
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertFalse(node0.isRegExp());
assertFalse(node0.isDebugger());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isTry());
assertFalse(node0.isWhile());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNE());
assertFalse(node0.isFor());
assertFalse(node0.isIf());
assertFalse(node0.isCast());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFunction());
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isInc());
assertEquals(40, node0.getType());
assertFalse(node0.isIn());

boolean boolean1 = node3.isArrayLit();
assertNotSame(node0, node1);
assertNotSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node3));
assertFalse(node2.equals((Object)node1));
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node2));
assertFalse(node3.equals((Object)node1));
assertTrue(boolean1 == boolean0);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean1);
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isThis());
assertFalse(node0.isGetProp());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertFalse(node0.isFalse());
assertFalse(node0.isWith());
assertFalse(node0.isScript());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isCase());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isNumber());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isArrayLit());
assertFalse(node0.isReturn());
assertFalse(node0.isGetElem());
assertFalse(node0.isLabel());
assertFalse(node0.isAssign());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isNew());
assertFalse(node0.isVoid());

int int2 = node1.getChildCount();
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertTrue(int2 == int1);
assertFalse(int2 == int0);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(0, int2);

Node node4 = node0.srcrefTree(node1);
assertNotSame(node0, node1);
assertSame(node0, node4);
assertNotSame(node0, node2);
assertNotSame(node1, node2);
assertNotSame(node1, node0);
assertNotSame(node1, node4);
assertNotSame(node4, node1);
assertSame(node4, node0);
assertNotSame(node4, node2);
assertFalse(node0.equals((Object)node3));
assertFalse(node0.equals((Object)node1));
assertFalse(node0.equals((Object)node2));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node4.equals((Object)node1));
assertFalse(node4.equals((Object)node3));
assertFalse(node4.equals((Object)node2));
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(48, Node.DIRECTIVES);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(57, Node.LAST_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(50, Node.FREE_CALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(52, Node.LENGTH);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);


[MASTER] 13:21:18.425 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_89_1628256078343/com/google/javascript/rhino/Node_89_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_89_1628256078343/com/google/javascript/rhino/Node_89_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:18.425 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:18.425 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:18.426 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 13:21:18.427 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_89_1628256078343/com/google/javascript/rhino/Node_89_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:18 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_89_tmp__ESTest extends Node_89_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(".");
21:       assertEquals(32, Node.INCRDECR_PROP);
22:       assertEquals(46, Node.IS_NAMESPACE);
23:       assertEquals(51, Node.STATIC_SOURCE_FILE);
24:       assertEquals(37, Node.OPT_ARG_NAME);
25:       assertEquals(1, Node.DECR_FLAG);
26:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
27:       assertEquals(30, Node.VAR_ARGS_NAME);
28:       assertEquals(2, Node.POST_FLAG);
29:       assertEquals(57, Node.LAST_PROP);
30:       assertEquals(12, Node.COLUMN_BITS);
31:       assertEquals(47, Node.IS_DISPATCHER);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
34:       assertEquals(52, Node.LENGTH);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(53, Node.INPUT_ID);
37:       assertEquals(15, Node.NO_SIDE_EFFECTS);
38:       assertEquals(56, Node.CHANGE_TIME);
39:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
40:       assertEquals(49, Node.DIRECT_EVAL);
41:       assertEquals(8, Node.FLAG_NO_THROWS);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(36, Node.QUOTED_PROP);
44:       assertEquals(57, Node.REFLECTED_OBJECT);
45:       assertEquals(4095, Node.COLUMN_MASK);
46:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
47:       assertEquals(55, Node.INFERRED_FUNCTION);
48:       assertEquals(48, Node.DIRECTIVES);
49:       assertEquals(39, Node.EMPTY_BLOCK);
50:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
51:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
52:       assertEquals(40, Node.ORIGINALNAME_PROP);
53:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
54:       assertEquals(43, Node.IS_CONSTANT_NAME);
55:       assertEquals(50, Node.FREE_CALL);
56:       assertEquals(54, Node.SLASH_V);
57:       assertFalse(node0.isCatch());
58:       assertEquals(0, node0.getChildCount());
59:       assertEquals(40, node0.getType());
60:       assertFalse(node0.isFunction());
61:       assertFalse(node0.isParamList());
62:       assertFalse(node0.isRegExp());
63:       assertFalse(node0.isVoid());
64:       assertFalse(node0.isArrayLit());
65:       assertFalse(node0.isBlock());
66:       assertFalse(node0.isStringKey());
67:       assertFalse(node0.isFor());
68:       assertFalse(node0.isDebugger());
69:       assertTrue(node0.isString());
70:       assertFalse(node0.isGetterDef());
71:       assertFalse(node0.isTry());
72:       assertFalse(node0.hasMoreThanOneChild());
73:       assertFalse(node0.isContinue());
74:       assertFalse(node0.isCase());
75:       assertEquals((-1), node0.getLineno());
76:       assertFalse(node0.isFalse());
77:       assertFalse(node0.isIf());
78:       assertFalse(node0.isNE());
79:       assertFalse(node0.isThrow());
80:       assertFalse(node0.isInc());
81:       assertFalse(node0.isSetterDef());
82:       assertFalse(node0.isIn());
83:       assertFalse(node0.isAnd());
84:       assertFalse(node0.isNot());
85:       assertFalse(node0.isObjectLit());
86:       assertFalse(node0.isThis());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.isWith());
89:       assertFalse(node0.isBreak());
90:       assertFalse(node0.isInstanceOf());
91:       assertFalse(node0.isExprResult());
92:       assertFalse(node0.isCast());
93:       assertFalse(node0.hasOneChild());
94:       assertFalse(node0.isLabelName());
95:       assertFalse(node0.isAssign());
96:       assertFalse(node0.hasChildren());
97:       assertFalse(node0.isHook());
98:       assertFalse(node0.isGetProp());
99:       assertEquals((-1), node0.getCharno());
100:       assertEquals((-1), node0.getSourcePosition());
101:       assertFalse(node0.isNumber());
102:       assertFalse(node0.isScript());
103:       assertFalse(node0.isDo());
104:       assertFalse(node0.isReturn());
105:       assertFalse(node0.isWhile());
106:       assertFalse(node0.isLabel());
107:       assertFalse(node0.isAssignAdd());
108:       assertFalse(node0.isSwitch());
109:       assertFalse(node0.isDec());
110:       assertFalse(node0.isDelProp());
111:       assertFalse(node0.isTypeOf());
112:       assertFalse(node0.isGetElem());
113:       assertFalse(node0.isCall());
114:       assertFalse(node0.isName());
115:       assertFalse(node0.isNull());
116:       assertFalse(node0.isVar());
117:       assertFalse(node0.isTrue());
118:       assertFalse(node0.isDefaultCase());
119:       assertFalse(node0.isNew());
120:       assertFalse(node0.isOr());
121:       assertFalse(node0.isEmpty());
122:       assertFalse(node0.isAdd());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(32, Node.INCRDECR_PROP);
128:       assertEquals(46, Node.IS_NAMESPACE);
129:       assertEquals(51, Node.STATIC_SOURCE_FILE);
130:       assertEquals(37, Node.OPT_ARG_NAME);
131:       assertEquals(1, Node.DECR_FLAG);
132:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
133:       assertEquals(30, Node.VAR_ARGS_NAME);
134:       assertEquals(2, Node.POST_FLAG);
135:       assertEquals(57, Node.LAST_PROP);
136:       assertEquals(12, Node.COLUMN_BITS);
137:       assertEquals(47, Node.IS_DISPATCHER);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
140:       assertEquals(52, Node.LENGTH);
141:       assertEquals(29, Node.JSDOC_INFO_PROP);
142:       assertEquals(53, Node.INPUT_ID);
143:       assertEquals(15, Node.NO_SIDE_EFFECTS);
144:       assertEquals(56, Node.CHANGE_TIME);
145:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
146:       assertEquals(49, Node.DIRECT_EVAL);
147:       assertEquals(8, Node.FLAG_NO_THROWS);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(36, Node.QUOTED_PROP);
150:       assertEquals(57, Node.REFLECTED_OBJECT);
151:       assertEquals(4095, Node.COLUMN_MASK);
152:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
153:       assertEquals(55, Node.INFERRED_FUNCTION);
154:       assertEquals(48, Node.DIRECTIVES);
155:       assertEquals(39, Node.EMPTY_BLOCK);
156:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
157:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
158:       assertEquals(40, Node.ORIGINALNAME_PROP);
159:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
160:       assertEquals(43, Node.IS_CONSTANT_NAME);
161:       assertEquals(50, Node.FREE_CALL);
162:       assertEquals(54, Node.SLASH_V);
163:       assertFalse(node0.isCatch());
164:       assertEquals(0, node0.getChildCount());
165:       assertEquals(40, node0.getType());
166:       assertFalse(node0.isFunction());
167:       assertFalse(node0.isParamList());
168:       assertFalse(node0.isRegExp());
169:       assertFalse(node0.isVoid());
170:       assertFalse(node0.isArrayLit());
171:       assertFalse(node0.isBlock());
172:       assertFalse(node0.isStringKey());
173:       assertFalse(node0.isFor());
174:       assertFalse(node0.isDebugger());
175:       assertTrue(node0.isString());
176:       assertFalse(node0.isGetterDef());
177:       assertFalse(node0.isTry());
178:       assertFalse(node0.hasMoreThanOneChild());
179:       assertFalse(node0.isContinue());
180:       assertFalse(node0.isCase());
181:       assertEquals((-1), node0.getLineno());
182:       assertFalse(node0.isFalse());
183:       assertFalse(node0.isIf());
184:       assertFalse(node0.isNE());
185:       assertFalse(node0.isThrow());
186:       assertFalse(node0.isInc());
187:       assertFalse(node0.isSetterDef());
188:       assertFalse(node0.isIn());
189:       assertFalse(node0.isAnd());
190:       assertFalse(node0.isNot());
191:       assertFalse(node0.isObjectLit());
192:       assertFalse(node0.isThis());
193:       assertFalse(node0.isComma());
194:       assertFalse(node0.isWith());
195:       assertFalse(node0.isBreak());
196:       assertFalse(node0.isInstanceOf());
197:       assertFalse(node0.isExprResult());
198:       assertFalse(node0.isCast());
199:       assertFalse(node0.hasOneChild());
200:       assertFalse(node0.isLabelName());
201:       assertFalse(node0.isAssign());
202:       assertFalse(node0.hasChildren());
203:       assertFalse(node0.isHook());
204:       assertFalse(node0.isGetProp());
205:       assertEquals((-1), node0.getCharno());
206:       assertEquals((-1), node0.getSourcePosition());
207:       assertFalse(node0.isNumber());
208:       assertFalse(node0.isScript());
209:       assertFalse(node0.isDo());
210:       assertFalse(node0.isReturn());
211:       assertFalse(node0.isWhile());
212:       assertFalse(node0.isLabel());
213:       assertFalse(node0.isAssignAdd());
214:       assertFalse(node0.isSwitch());
215:       assertFalse(node0.isDec());
216:       assertFalse(node0.isDelProp());
217:       assertFalse(node0.isTypeOf());
218:       assertFalse(node0.isGetElem());
219:       assertFalse(node0.isCall());
220:       assertFalse(node0.isName());
221:       assertFalse(node0.isNull());
222:       assertFalse(node0.isVar());
223:       assertFalse(node0.isTrue());
224:       assertFalse(node0.isDefaultCase());
225:       assertFalse(node0.isNew());
226:       assertFalse(node0.isOr());
227:       assertFalse(node0.isEmpty());
228:       assertFalse(node0.isAdd());
229:       assertNotNull(iterable0);
230:       
231:       String string0 = node0.toString();
232:       assertEquals(32, Node.INCRDECR_PROP);
233:       assertEquals(46, Node.IS_NAMESPACE);
234:       assertEquals(51, Node.STATIC_SOURCE_FILE);
235:       assertEquals(37, Node.OPT_ARG_NAME);
236:       assertEquals(1, Node.DECR_FLAG);
237:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
238:       assertEquals(30, Node.VAR_ARGS_NAME);
239:       assertEquals(2, Node.POST_FLAG);
240:       assertEquals(57, Node.LAST_PROP);
241:       assertEquals(12, Node.COLUMN_BITS);
242:       assertEquals(47, Node.IS_DISPATCHER);
243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
244:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(29, Node.JSDOC_INFO_PROP);
247:       assertEquals(53, Node.INPUT_ID);
248:       assertEquals(15, Node.NO_SIDE_EFFECTS);
249:       assertEquals(56, Node.CHANGE_TIME);
250:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
251:       assertEquals(49, Node.DIRECT_EVAL);
252:       assertEquals(8, Node.FLAG_NO_THROWS);
253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
254:       assertEquals(36, Node.QUOTED_PROP);
255:       assertEquals(57, Node.REFLECTED_OBJECT);
256:       assertEquals(4095, Node.COLUMN_MASK);
257:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
258:       assertEquals(55, Node.INFERRED_FUNCTION);
259:       assertEquals(48, Node.DIRECTIVES);
260:       assertEquals(39, Node.EMPTY_BLOCK);
261:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
262:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
263:       assertEquals(40, Node.ORIGINALNAME_PROP);
264:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
265:       assertEquals(43, Node.IS_CONSTANT_NAME);
266:       assertEquals(50, Node.FREE_CALL);
267:       assertEquals(54, Node.SLASH_V);
268:       assertEquals("STRING .", string0);
269:       assertFalse(node0.isCatch());
270:       assertEquals(0, node0.getChildCount());
271:       assertEquals(40, node0.getType());
272:       assertFalse(node0.isFunction());
273:       assertFalse(node0.isParamList());
274:       assertFalse(node0.isRegExp());
275:       assertFalse(node0.isVoid());
276:       assertFalse(node0.isArrayLit());
277:       assertFalse(node0.isBlock());
278:       assertFalse(node0.isStringKey());
279:       assertFalse(node0.isFor());
280:       assertFalse(node0.isDebugger());
281:       assertTrue(node0.isString());
282:       assertFalse(node0.isGetterDef());
283:       assertFalse(node0.isTry());
284:       assertFalse(node0.hasMoreThanOneChild());
285:       assertFalse(node0.isContinue());
286:       assertFalse(node0.isCase());
287:       assertEquals((-1), node0.getLineno());
288:       assertFalse(node0.isFalse());
289:       assertFalse(node0.isIf());
290:       assertFalse(node0.isNE());
291:       assertFalse(node0.isThrow());
292:       assertFalse(node0.isInc());
293:       assertFalse(node0.isSetterDef());
294:       assertFalse(node0.isIn());
295:       assertFalse(node0.isAnd());
296:       assertFalse(node0.isNot());
297:       assertFalse(node0.isObjectLit());
298:       assertFalse(node0.isThis());
299:       assertFalse(node0.isComma());
300:       assertFalse(node0.isWith());
301:       assertFalse(node0.isBreak());
302:       assertFalse(node0.isInstanceOf());
303:       assertFalse(node0.isExprResult());
304:       assertFalse(node0.isCast());
305:       assertFalse(node0.hasOneChild());
306:       assertFalse(node0.isLabelName());
307:       assertFalse(node0.isAssign());
308:       assertFalse(node0.hasChildren());
309:       assertFalse(node0.isHook());
310:       assertFalse(node0.isGetProp());
311:       assertEquals((-1), node0.getCharno());
312:       assertEquals((-1), node0.getSourcePosition());
313:       assertFalse(node0.isNumber());
314:       assertFalse(node0.isScript());
315:       assertFalse(node0.isDo());
316:       assertFalse(node0.isReturn());
317:       assertFalse(node0.isWhile());
318:       assertFalse(node0.isLabel());
319:       assertFalse(node0.isAssignAdd());
320:       assertFalse(node0.isSwitch());
321:       assertFalse(node0.isDec());
322:       assertFalse(node0.isDelProp());
323:       assertFalse(node0.isTypeOf());
324:       assertFalse(node0.isGetElem());
325:       assertFalse(node0.isCall());
326:       assertFalse(node0.isName());
327:       assertFalse(node0.isNull());
328:       assertFalse(node0.isVar());
329:       assertFalse(node0.isTrue());
330:       assertFalse(node0.isDefaultCase());
331:       assertFalse(node0.isNew());
332:       assertFalse(node0.isOr());
333:       assertFalse(node0.isEmpty());
334:       assertFalse(node0.isAdd());
335:       assertNotNull(string0);
336:       
337:       Node node1 = Node.newString("3");
338:       assertNotSame(node1, node0);
339:       assertFalse(node1.equals((Object)node0));
340:       assertEquals(47, Node.IS_DISPATCHER);
341:       assertEquals(56, Node.CHANGE_TIME);
342:       assertEquals(2, Node.POST_FLAG);
343:       assertEquals(37, Node.OPT_ARG_NAME);
344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
345:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
346:       assertEquals(29, Node.JSDOC_INFO_PROP);
347:       assertEquals(46, Node.IS_NAMESPACE);
348:       assertEquals(51, Node.STATIC_SOURCE_FILE);
349:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
350:       assertEquals(15, Node.NO_SIDE_EFFECTS);
351:       assertEquals(57, Node.LAST_PROP);
352:       assertEquals(43, Node.IS_CONSTANT_NAME);
353:       assertEquals(36, Node.QUOTED_PROP);
354:       assertEquals(30, Node.VAR_ARGS_NAME);
355:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
356:       assertEquals(55, Node.INFERRED_FUNCTION);
357:       assertEquals(53, Node.INPUT_ID);
358:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
359:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
360:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
361:       assertEquals(50, Node.FREE_CALL);
362:       assertEquals(8, Node.FLAG_NO_THROWS);
363:       assertEquals(48, Node.DIRECTIVES);
364:       assertEquals(40, Node.ORIGINALNAME_PROP);
365:       assertEquals(39, Node.EMPTY_BLOCK);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(54, Node.SLASH_V);
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(49, Node.DIRECT_EVAL);
370:       assertEquals(1, Node.DECR_FLAG);
371:       assertEquals(32, Node.INCRDECR_PROP);
372:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
373:       assertEquals(4095, Node.COLUMN_MASK);
374:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
375:       assertEquals(12, Node.COLUMN_BITS);
376:       assertFalse(node1.isParamList());
377:       assertFalse(node1.isSetterDef());
378:       assertFalse(node1.isStringKey());
379:       assertFalse(node1.isNull());
380:       assertFalse(node1.isAdd());
381:       assertFalse(node1.isTrue());
382:       assertFalse(node1.isRegExp());
383:       assertTrue(node1.isString());
384:       assertFalse(node1.isVoid());
385:       assertFalse(node1.isTry());
386:       assertFalse(node1.isWhile());
387:       assertFalse(node1.isBlock());
388:       assertFalse(node1.isCall());
389:       assertFalse(node1.hasMoreThanOneChild());
390:       assertFalse(node1.isName());
391:       assertEquals((-1), node1.getLineno());
392:       assertFalse(node1.isCatch());
393:       assertEquals((-1), node1.getSourcePosition());
394:       assertFalse(node1.isDec());
395:       assertFalse(node1.isTypeOf());
396:       assertFalse(node1.isReturn());
397:       assertFalse(node1.isIf());
398:       assertFalse(node1.hasChildren());
399:       assertFalse(node1.isNE());
400:       assertFalse(node1.isIn());
401:       assertFalse(node1.isDebugger());
402:       assertFalse(node1.isFunction());
403:       assertFalse(node1.isInc());
404:       assertEquals(40, node1.getType());
405:       assertFalse(node1.isAnd());
406:       assertFalse(node1.isContinue());
407:       assertFalse(node1.isFalse());
408:       assertFalse(node1.isCast());
409:       assertFalse(node1.isThis());
410:       assertFalse(node1.isComma());
411:       assertFalse(node1.isGetProp());
412:       assertFalse(node1.isThrow());
413:       assertFalse(node1.isObjectLit());
414:       assertFalse(node1.isNot());
415:       assertFalse(node1.isScript());
416:       assertFalse(node1.isExprResult());
417:       assertFalse(node1.isHook());
418:       assertFalse(node1.isAssign());
419:       assertFalse(node1.isWith());
420:       assertFalse(node1.isBreak());
421:       assertFalse(node1.isInstanceOf());
422:       assertFalse(node1.isGetElem());
423:       assertFalse(node1.isNumber());
424:       assertFalse(node1.isGetterDef());
425:       assertFalse(node1.isOr());
426:       assertFalse(node1.isDelProp());
427:       assertFalse(node1.isLabel());
428:       assertFalse(node1.isAssignAdd());
429:       assertFalse(node1.isFor());
430:       assertFalse(node1.isCase());
431:       assertFalse(node1.hasOneChild());
432:       assertFalse(node1.isDo());
433:       assertFalse(node1.isEmpty());
434:       assertFalse(node1.isSwitch());
435:       assertEquals((-1), node1.getCharno());
436:       assertFalse(node1.isNew());
437:       assertFalse(node1.isDefaultCase());
438:       assertFalse(node1.isVar());
439:       assertFalse(node1.isArrayLit());
440:       assertEquals(0, node1.getChildCount());
441:       assertFalse(node1.isLabelName());
442:       assertNotNull(node1);
443:       
444:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
445:       assertNotSame(node0, node1);
446:       assertNotSame(node1, node0);
447:       assertFalse(node0.equals((Object)node1));
448:       assertFalse(node1.equals((Object)node0));
449:       assertEquals(32, Node.INCRDECR_PROP);
450:       assertEquals(46, Node.IS_NAMESPACE);
451:       assertEquals(51, Node.STATIC_SOURCE_FILE);
452:       assertEquals(37, Node.OPT_ARG_NAME);
453:       assertEquals(1, Node.DECR_FLAG);
454:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
455:       assertEquals(30, Node.VAR_ARGS_NAME);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(57, Node.LAST_PROP);
458:       assertEquals(12, Node.COLUMN_BITS);
459:       assertEquals(47, Node.IS_DISPATCHER);
460:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
461:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
462:       assertEquals(52, Node.LENGTH);
463:       assertEquals(29, Node.JSDOC_INFO_PROP);
464:       assertEquals(53, Node.INPUT_ID);
465:       assertEquals(15, Node.NO_SIDE_EFFECTS);
466:       assertEquals(56, Node.CHANGE_TIME);
467:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
468:       assertEquals(49, Node.DIRECT_EVAL);
469:       assertEquals(8, Node.FLAG_NO_THROWS);
470:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
471:       assertEquals(36, Node.QUOTED_PROP);
472:       assertEquals(57, Node.REFLECTED_OBJECT);
473:       assertEquals(4095, Node.COLUMN_MASK);
474:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
475:       assertEquals(55, Node.INFERRED_FUNCTION);
476:       assertEquals(48, Node.DIRECTIVES);
477:       assertEquals(39, Node.EMPTY_BLOCK);
478:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
479:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
480:       assertEquals(40, Node.ORIGINALNAME_PROP);
481:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
482:       assertEquals(43, Node.IS_CONSTANT_NAME);
483:       assertEquals(50, Node.FREE_CALL);
484:       assertEquals(54, Node.SLASH_V);
485:       assertEquals(47, Node.IS_DISPATCHER);
486:       assertEquals(56, Node.CHANGE_TIME);
487:       assertEquals(2, Node.POST_FLAG);
488:       assertEquals(37, Node.OPT_ARG_NAME);
489:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
490:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
491:       assertEquals(29, Node.JSDOC_INFO_PROP);
492:       assertEquals(46, Node.IS_NAMESPACE);
493:       assertEquals(51, Node.STATIC_SOURCE_FILE);
494:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
495:       assertEquals(15, Node.NO_SIDE_EFFECTS);
496:       assertEquals(57, Node.LAST_PROP);
497:       assertEquals(43, Node.IS_CONSTANT_NAME);
498:       assertEquals(36, Node.QUOTED_PROP);
499:       assertEquals(30, Node.VAR_ARGS_NAME);
500:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
501:       assertEquals(55, Node.INFERRED_FUNCTION);
502:       assertEquals(53, Node.INPUT_ID);
503:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
504:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
505:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
506:       assertEquals(50, Node.FREE_CALL);
507:       assertEquals(8, Node.FLAG_NO_THROWS);
508:       assertEquals(48, Node.DIRECTIVES);
509:       assertEquals(40, Node.ORIGINALNAME_PROP);
510:       assertEquals(39, Node.EMPTY_BLOCK);
511:       assertEquals(52, Node.LENGTH);
512:       assertEquals(54, Node.SLASH_V);
513:       assertEquals(57, Node.REFLECTED_OBJECT);
514:       assertEquals(49, Node.DIRECT_EVAL);
515:       assertEquals(1, Node.DECR_FLAG);
516:       assertEquals(32, Node.INCRDECR_PROP);
517:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
518:       assertEquals(4095, Node.COLUMN_MASK);
519:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
520:       assertEquals(12, Node.COLUMN_BITS);
521:       assertFalse(node0.isCatch());
522:       assertEquals(0, node0.getChildCount());
523:       assertEquals(40, node0.getType());
524:       assertFalse(node0.isFunction());
525:       assertFalse(node0.isParamList());
526:       assertFalse(node0.isRegExp());
527:       assertFalse(node0.isVoid());
528:       assertFalse(node0.isArrayLit());
529:       assertFalse(node0.isBlock());
530:       assertFalse(node0.isStringKey());
531:       assertFalse(node0.isFor());
532:       assertFalse(node0.isDebugger());
533:       assertTrue(node0.isString());
534:       assertFalse(node0.isGetterDef());
535:       assertFalse(node0.isTry());
536:       assertFalse(node0.hasMoreThanOneChild());
537:       assertFalse(node0.isContinue());
538:       assertFalse(node0.isCase());
539:       assertEquals((-1), node0.getLineno());
540:       assertFalse(node0.isFalse());
541:       assertFalse(node0.isIf());
542:       assertFalse(node0.isNE());
543:       assertFalse(node0.isThrow());
544:       assertFalse(node0.isInc());
545:       assertFalse(node0.isSetterDef());
546:       assertFalse(node0.isIn());
547:       assertFalse(node0.isAnd());
548:       assertFalse(node0.isNot());
549:       assertFalse(node0.isObjectLit());
550:       assertFalse(node0.isThis());
551:       assertFalse(node0.isComma());
552:       assertFalse(node0.isWith());
553:       assertFalse(node0.isBreak());
554:       assertFalse(node0.isInstanceOf());
555:       assertFalse(node0.isExprResult());
556:       assertFalse(node0.isCast());
557:       assertFalse(node0.hasOneChild());
558:       assertFalse(node0.isLabelName());
559:       assertFalse(node0.isAssign());
560:       assertFalse(node0.hasChildren());
561:       assertFalse(node0.isHook());
562:       assertFalse(node0.isGetProp());
563:       assertEquals((-1), node0.getCharno());
564:       assertEquals((-1), node0.getSourcePosition());
565:       assertFalse(node0.isNumber());
566:       assertFalse(node0.isScript());
567:       assertFalse(node0.isDo());
568:       assertFalse(node0.isReturn());
569:       assertFalse(node0.isWhile());
570:       assertFalse(node0.isLabel());
571:       assertFalse(node0.isAssignAdd());
572:       assertFalse(node0.isSwitch());
573:       assertFalse(node0.isDec());
574:       assertFalse(node0.isDelProp());
575:       assertFalse(node0.isTypeOf());
576:       assertFalse(node0.isGetElem());
577:       assertFalse(node0.isCall());
578:       assertFalse(node0.isName());
579:       assertFalse(node0.isNull());
580:       assertFalse(node0.isVar());
581:       assertFalse(node0.isTrue());
582:       assertFalse(node0.isDefaultCase());
583:       assertFalse(node0.isNew());
584:       assertFalse(node0.isOr());
585:       assertFalse(node0.isEmpty());
586:       assertFalse(node0.isAdd());
587:       assertFalse(node1.isParamList());
588:       assertFalse(node1.isSetterDef());
589:       assertFalse(node1.isStringKey());
590:       assertFalse(node1.isNull());
591:       assertFalse(node1.isAdd());
592:       assertFalse(node1.isTrue());
593:       assertFalse(node1.isRegExp());
594:       assertTrue(node1.isString());
595:       assertFalse(node1.isVoid());
596:       assertFalse(node1.isTry());
597:       assertFalse(node1.isWhile());
598:       assertFalse(node1.isBlock());
599:       assertFalse(node1.isCall());
600:       assertFalse(node1.hasMoreThanOneChild());
601:       assertFalse(node1.isName());
602:       assertEquals((-1), node1.getLineno());
603:       assertFalse(node1.isCatch());
604:       assertEquals((-1), node1.getSourcePosition());
605:       assertFalse(node1.isDec());
606:       assertFalse(node1.isTypeOf());
607:       assertFalse(node1.isReturn());
608:       assertFalse(node1.isIf());
609:       assertFalse(node1.hasChildren());
610:       assertFalse(node1.isNE());
611:       assertFalse(node1.isIn());
612:       assertFalse(node1.isDebugger());
613:       assertFalse(node1.isFunction());
614:       assertFalse(node1.isInc());
615:       assertEquals(40, node1.getType());
616:       assertFalse(node1.isAnd());
617:       assertFalse(node1.isContinue());
618:       assertFalse(node1.isFalse());
619:       assertFalse(node1.isCast());
620:       assertFalse(node1.isThis());
621:       assertFalse(node1.isComma());
622:       assertFalse(node1.isGetProp());
623:       assertFalse(node1.isThrow());
624:       assertFalse(node1.isObjectLit());
625:       assertFalse(node1.isNot());
626:       assertFalse(node1.isScript());
627:       assertFalse(node1.isExprResult());
628:       assertFalse(node1.isHook());
629:       assertFalse(node1.isAssign());
630:       assertFalse(node1.isWith());
631:       assertFalse(node1.isBreak());
632:       assertFalse(node1.isInstanceOf());
633:       assertFalse(node1.isGetElem());
634:       assertFalse(node1.isNumber());
635:       assertFalse(node1.isGetterDef());
636:       assertFalse(node1.isOr());
637:       assertFalse(node1.isDelProp());
638:       assertFalse(node1.isLabel());
639:       assertFalse(node1.isAssignAdd());
640:       assertFalse(node1.isFor());
641:       assertFalse(node1.isCase());
642:       assertFalse(node1.hasOneChild());
643:       assertFalse(node1.isDo());
644:       assertFalse(node1.isEmpty());
645:       assertFalse(node1.isSwitch());
646:       assertEquals((-1), node1.getCharno());
647:       assertFalse(node1.isNew());
648:       assertFalse(node1.isDefaultCase());
649:       assertFalse(node1.isVar());
650:       assertFalse(node1.isArrayLit());
651:       assertEquals(0, node1.getChildCount());
652:       assertFalse(node1.isLabelName());
653:       assertNotNull(node_NodeMismatch0);
654:       
655:       boolean boolean0 = node1.isEquivalentToTyped(node0);
656:       assertNotSame(node0, node1);
657:       assertNotSame(node1, node0);
658:       assertFalse(node0.equals((Object)node1));
659:       assertFalse(node1.equals((Object)node0));
660:       assertEquals(32, Node.INCRDECR_PROP);
661:       assertEquals(46, Node.IS_NAMESPACE);
662:       assertEquals(51, Node.STATIC_SOURCE_FILE);
663:       assertEquals(37, Node.OPT_ARG_NAME);
664:       assertEquals(1, Node.DECR_FLAG);
665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
666:       assertEquals(30, Node.VAR_ARGS_NAME);
667:       assertEquals(2, Node.POST_FLAG);
668:       assertEquals(57, Node.LAST_PROP);
669:       assertEquals(12, Node.COLUMN_BITS);
670:       assertEquals(47, Node.IS_DISPATCHER);
671:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(52, Node.LENGTH);
674:       assertEquals(29, Node.JSDOC_INFO_PROP);
675:       assertEquals(53, Node.INPUT_ID);
676:       assertEquals(15, Node.NO_SIDE_EFFECTS);
677:       assertEquals(56, Node.CHANGE_TIME);
678:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
679:       assertEquals(49, Node.DIRECT_EVAL);
680:       assertEquals(8, Node.FLAG_NO_THROWS);
681:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
682:       assertEquals(36, Node.QUOTED_PROP);
683:       assertEquals(57, Node.REFLECTED_OBJECT);
684:       assertEquals(4095, Node.COLUMN_MASK);
685:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
686:       assertEquals(55, Node.INFERRED_FUNCTION);
687:       assertEquals(48, Node.DIRECTIVES);
688:       assertEquals(39, Node.EMPTY_BLOCK);
689:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
690:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
691:       assertEquals(40, Node.ORIGINALNAME_PROP);
692:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
693:       assertEquals(43, Node.IS_CONSTANT_NAME);
694:       assertEquals(50, Node.FREE_CALL);
695:       assertEquals(54, Node.SLASH_V);
696:       assertEquals(47, Node.IS_DISPATCHER);
697:       assertEquals(56, Node.CHANGE_TIME);
698:       assertEquals(2, Node.POST_FLAG);
699:       assertEquals(37, Node.OPT_ARG_NAME);
700:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
701:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
702:       assertEquals(29, Node.JSDOC_INFO_PROP);
703:       assertEquals(46, Node.IS_NAMESPACE);
704:       assertEquals(51, Node.STATIC_SOURCE_FILE);
705:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
706:       assertEquals(15, Node.NO_SIDE_EFFECTS);
707:       assertEquals(57, Node.LAST_PROP);
708:       assertEquals(43, Node.IS_CONSTANT_NAME);
709:       assertEquals(36, Node.QUOTED_PROP);
710:       assertEquals(30, Node.VAR_ARGS_NAME);
711:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
712:       assertEquals(55, Node.INFERRED_FUNCTION);
713:       assertEquals(53, Node.INPUT_ID);
714:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
715:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
716:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
717:       assertEquals(50, Node.FREE_CALL);
718:       assertEquals(8, Node.FLAG_NO_THROWS);
719:       assertEquals(48, Node.DIRECTIVES);
720:       assertEquals(40, Node.ORIGINALNAME_PROP);
721:       assertEquals(39, Node.EMPTY_BLOCK);
722:       assertEquals(52, Node.LENGTH);
723:       assertEquals(54, Node.SLASH_V);
724:       assertEquals(57, Node.REFLECTED_OBJECT);
725:       assertEquals(49, Node.DIRECT_EVAL);
726:       assertEquals(1, Node.DECR_FLAG);
727:       assertEquals(32, Node.INCRDECR_PROP);
728:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
729:       assertEquals(4095, Node.COLUMN_MASK);
730:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
731:       assertEquals(12, Node.COLUMN_BITS);
732:       assertFalse(boolean0);
733:       assertFalse(node0.isCatch());
734:       assertEquals(0, node0.getChildCount());
735:       assertEquals(40, node0.getType());
736:       assertFalse(node0.isFunction());
737:       assertFalse(node0.isParamList());
738:       assertFalse(node0.isRegExp());
739:       assertFalse(node0.isVoid());
740:       assertFalse(node0.isArrayLit());
741:       assertFalse(node0.isBlock());
742:       assertFalse(node0.isStringKey());
743:       assertFalse(node0.isFor());
744:       assertFalse(node0.isDebugger());
745:       assertTrue(node0.isString());
746:       assertFalse(node0.isGetterDef());
747:       assertFalse(node0.isTry());
748:       assertFalse(node0.hasMoreThanOneChild());
749:       assertFalse(node0.isContinue());
750:       assertFalse(node0.isCase());
751:       assertEquals((-1), node0.getLineno());
752:       assertFalse(node0.isFalse());
753:       assertFalse(node0.isIf());
754:       assertFalse(node0.isNE());
755:       assertFalse(node0.isThrow());
756:       assertFalse(node0.isInc());
757:       assertFalse(node0.isSetterDef());
758:       assertFalse(node0.isIn());
759:       assertFalse(node0.isAnd());
760:       assertFalse(node0.isNot());
761:       assertFalse(node0.isObjectLit());
762:       assertFalse(node0.isThis());
763:       assertFalse(node0.isComma());
764:       assertFalse(node0.isWith());
765:       assertFalse(node0.isBreak());
766:       assertFalse(node0.isInstanceOf());
767:       assertFalse(node0.isExprResult());
768:       assertFalse(node0.isCast());
769:       assertFalse(node0.hasOneChild());
770:       assertFalse(node0.isLabelName());
771:       assertFalse(node0.isAssign());
772:       assertFalse(node0.hasChildren());
773:       assertFalse(node0.isHook());
774:       assertFalse(node0.isGetProp());
775:       assertEquals((-1), node0.getCharno());
776:       assertEquals((-1), node0.getSourcePosition());
777:       assertFalse(node0.isNumber());
778:       assertFalse(node0.isScript());
779:       assertFalse(node0.isDo());
780:       assertFalse(node0.isReturn());
781:       assertFalse(node0.isWhile());
782:       assertFalse(node0.isLabel());
783:       assertFalse(node0.isAssignAdd());
784:       assertFalse(node0.isSwitch());
785:       assertFalse(node0.isDec());
786:       assertFalse(node0.isDelProp());
787:       assertFalse(node0.isTypeOf());
788:       assertFalse(node0.isGetElem());
789:       assertFalse(node0.isCall());
790:       assertFalse(node0.isName());
791:       assertFalse(node0.isNull());
792:       assertFalse(node0.isVar());
793:       assertFalse(node0.isTrue());
794:       assertFalse(node0.isDefaultCase());
795:       assertFalse(node0.isNew());
796:       assertFalse(node0.isOr());
797:       assertFalse(node0.isEmpty());
798:       assertFalse(node0.isAdd());
799:       assertFalse(node1.isParamList());
800:       assertFalse(node1.isSetterDef());
801:       assertFalse(node1.isStringKey());
802:       assertFalse(node1.isNull());
803:       assertFalse(node1.isAdd());
804:       assertFalse(node1.isTrue());
805:       assertFalse(node1.isRegExp());
806:       assertTrue(node1.isString());
807:       assertFalse(node1.isVoid());
808:       assertFalse(node1.isTry());
809:       assertFalse(node1.isWhile());
810:       assertFalse(node1.isBlock());
811:       assertFalse(node1.isCall());
812:       assertFalse(node1.hasMoreThanOneChild());
813:       assertFalse(node1.isName());
814:       assertEquals((-1), node1.getLineno());
815:       assertFalse(node1.isCatch());
816:       assertEquals((-1), node1.getSourcePosition());
817:       assertFalse(node1.isDec());
818:       assertFalse(node1.isTypeOf());
819:       assertFalse(node1.isReturn());
820:       assertFalse(node1.isIf());
821:       assertFalse(node1.hasChildren());
822:       assertFalse(node1.isNE());
823:       assertFalse(node1.isIn());
824:       assertFalse(node1.isDebugger());
825:       assertFalse(node1.isFunction());
826:       assertFalse(node1.isInc());
827:       assertEquals(40, node1.getType());
828:       assertFalse(node1.isAnd());
829:       assertFalse(node1.isContinue());
830:       assertFalse(node1.isFalse());
831:       assertFalse(node1.isCast());
832:       assertFalse(node1.isThis());
833:       assertFalse(node1.isComma());
834:       assertFalse(node1.isGetProp());
835:       assertFalse(node1.isThrow());
836:       assertFalse(node1.isObjectLit());
837:       assertFalse(node1.isNot());
838:       assertFalse(node1.isScript());
839:       assertFalse(node1.isExprResult());
840:       assertFalse(node1.isHook());
841:       assertFalse(node1.isAssign());
842:       assertFalse(node1.isWith());
843:       assertFalse(node1.isBreak());
844:       assertFalse(node1.isInstanceOf());
845:       assertFalse(node1.isGetElem());
846:       assertFalse(node1.isNumber());
847:       assertFalse(node1.isGetterDef());
848:       assertFalse(node1.isOr());
849:       assertFalse(node1.isDelProp());
850:       assertFalse(node1.isLabel());
851:       assertFalse(node1.isAssignAdd());
852:       assertFalse(node1.isFor());
853:       assertFalse(node1.isCase());
854:       assertFalse(node1.hasOneChild());
855:       assertFalse(node1.isDo());
856:       assertFalse(node1.isEmpty());
857:       assertFalse(node1.isSwitch());
858:       assertEquals((-1), node1.getCharno());
859:       assertFalse(node1.isNew());
860:       assertFalse(node1.isDefaultCase());
861:       assertFalse(node1.isVar());
862:       assertFalse(node1.isArrayLit());
863:       assertEquals(0, node1.getChildCount());
864:       assertFalse(node1.isLabelName());
865:       
866:       boolean boolean1 = node1.isCall();
867:       assertNotSame(node1, node0);
868:       assertFalse(node1.equals((Object)node0));
869:       assertTrue(boolean1 == boolean0);
870:       assertEquals(47, Node.IS_DISPATCHER);
871:       assertEquals(56, Node.CHANGE_TIME);
872:       assertEquals(2, Node.POST_FLAG);
873:       assertEquals(37, Node.OPT_ARG_NAME);
874:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
875:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
876:       assertEquals(29, Node.JSDOC_INFO_PROP);
877:       assertEquals(46, Node.IS_NAMESPACE);
878:       assertEquals(51, Node.STATIC_SOURCE_FILE);
879:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
880:       assertEquals(15, Node.NO_SIDE_EFFECTS);
881:       assertEquals(57, Node.LAST_PROP);
882:       assertEquals(43, Node.IS_CONSTANT_NAME);
883:       assertEquals(36, Node.QUOTED_PROP);
884:       assertEquals(30, Node.VAR_ARGS_NAME);
885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
886:       assertEquals(55, Node.INFERRED_FUNCTION);
887:       assertEquals(53, Node.INPUT_ID);
888:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
889:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(50, Node.FREE_CALL);
892:       assertEquals(8, Node.FLAG_NO_THROWS);
893:       assertEquals(48, Node.DIRECTIVES);
894:       assertEquals(40, Node.ORIGINALNAME_PROP);
895:       assertEquals(39, Node.EMPTY_BLOCK);
896:       assertEquals(52, Node.LENGTH);
897:       assertEquals(54, Node.SLASH_V);
898:       assertEquals(57, Node.REFLECTED_OBJECT);
899:       assertEquals(49, Node.DIRECT_EVAL);
900:       assertEquals(1, Node.DECR_FLAG);
901:       assertEquals(32, Node.INCRDECR_PROP);
902:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
903:       assertEquals(4095, Node.COLUMN_MASK);
904:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
905:       assertEquals(12, Node.COLUMN_BITS);
906:       assertFalse(boolean1);
907:       assertFalse(node1.isParamList());
908:       assertFalse(node1.isSetterDef());
909:       assertFalse(node1.isStringKey());
910:       assertFalse(node1.isNull());
911:       assertFalse(node1.isAdd());
912:       assertFalse(node1.isTrue());
913:       assertFalse(node1.isRegExp());
914:       assertTrue(node1.isString());
915:       assertFalse(node1.isVoid());
916:       assertFalse(node1.isTry());
917:       assertFalse(node1.isWhile());
918:       assertFalse(node1.isBlock());
919:       assertFalse(node1.isCall());
920:       assertFalse(node1.hasMoreThanOneChild());
921:       assertFalse(node1.isName());
922:       assertEquals((-1), node1.getLineno());
923:       assertFalse(node1.isCatch());
924:       assertEquals((-1), node1.getSourcePosition());
925:       assertFalse(node1.isDec());
926:       assertFalse(node1.isTypeOf());
927:       assertFalse(node1.isReturn());
928:       assertFalse(node1.isIf());
929:       assertFalse(node1.hasChildren());
930:       assertFalse(node1.isNE());
931:       assertFalse(node1.isIn());
932:       assertFalse(node1.isDebugger());
933:       assertFalse(node1.isFunction());
934:       assertFalse(node1.isInc());
935:       assertEquals(40, node1.getType());
936:       assertFalse(node1.isAnd());
937:       assertFalse(node1.isContinue());
938:       assertFalse(node1.isFalse());
939:       assertFalse(node1.isCast());
940:       assertFalse(node1.isThis());
941:       assertFalse(node1.isComma());
942:       assertFalse(node1.isGetProp());
943:       assertFalse(node1.isThrow());
944:       assertFalse(node1.isObjectLit());
945:       assertFalse(node1.isNot());
946:       assertFalse(node1.isScript());
947:       assertFalse(node1.isExprResult());
948:       assertFalse(node1.isHook());
949:       assertFalse(node1.isAssign());
950:       assertFalse(node1.isWith());
951:       assertFalse(node1.isBreak());
952:       assertFalse(node1.isInstanceOf());
953:       assertFalse(node1.isGetElem());
954:       assertFalse(node1.isNumber());
955:       assertFalse(node1.isGetterDef());
956:       assertFalse(node1.isOr());
957:       assertFalse(node1.isDelProp());
958:       assertFalse(node1.isLabel());
959:       assertFalse(node1.isAssignAdd());
960:       assertFalse(node1.isFor());
961:       assertFalse(node1.isCase());
962:       assertFalse(node1.hasOneChild());
963:       assertFalse(node1.isDo());
964:       assertFalse(node1.isEmpty());
965:       assertFalse(node1.isSwitch());
966:       assertEquals((-1), node1.getCharno());
967:       assertFalse(node1.isNew());
968:       assertFalse(node1.isDefaultCase());
969:       assertFalse(node1.isVar());
970:       assertFalse(node1.isArrayLit());
971:       assertEquals(0, node1.getChildCount());
972:       assertFalse(node1.isLabelName());
973:   }
974: }
RegularFileObject[/tmp/EvoSuite_89_1628256078343/com/google/javascript/rhino/Node_89_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:18 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_89_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_89_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_89_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:18.450 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(".");
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(iterable0);

String string0 = node0.toString();
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals("STRING .", string0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertNotNull(string0);

Node node1 = Node.newString("3");
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertTrue(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertTrue(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node1.isEquivalentToTyped(node0);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(48, Node.DIRECTIVES);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean0);
assertFalse(node0.isCatch());
assertEquals(0, node0.getChildCount());
assertEquals(40, node0.getType());
assertFalse(node0.isFunction());
assertFalse(node0.isParamList());
assertFalse(node0.isRegExp());
assertFalse(node0.isVoid());
assertFalse(node0.isArrayLit());
assertFalse(node0.isBlock());
assertFalse(node0.isStringKey());
assertFalse(node0.isFor());
assertFalse(node0.isDebugger());
assertTrue(node0.isString());
assertFalse(node0.isGetterDef());
assertFalse(node0.isTry());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isCase());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isFalse());
assertFalse(node0.isIf());
assertFalse(node0.isNE());
assertFalse(node0.isThrow());
assertFalse(node0.isInc());
assertFalse(node0.isSetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isWith());
assertFalse(node0.isBreak());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isExprResult());
assertFalse(node0.isCast());
assertFalse(node0.hasOneChild());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssign());
assertFalse(node0.hasChildren());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getCharno());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isScript());
assertFalse(node0.isDo());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isSwitch());
assertFalse(node0.isDec());
assertFalse(node0.isDelProp());
assertFalse(node0.isTypeOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isTrue());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isNew());
assertFalse(node0.isOr());
assertFalse(node0.isEmpty());
assertFalse(node0.isAdd());
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertTrue(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());

boolean boolean1 = node1.isCall();
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(50, Node.FREE_CALL);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean1);
assertFalse(node1.isParamList());
assertFalse(node1.isSetterDef());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isAdd());
assertFalse(node1.isTrue());
assertFalse(node1.isRegExp());
assertTrue(node1.isString());
assertFalse(node1.isVoid());
assertFalse(node1.isTry());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isCall());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isName());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isCatch());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isReturn());
assertFalse(node1.isIf());
assertFalse(node1.hasChildren());
assertFalse(node1.isNE());
assertFalse(node1.isIn());
assertFalse(node1.isDebugger());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertEquals(40, node1.getType());
assertFalse(node1.isAnd());
assertFalse(node1.isContinue());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isThis());
assertFalse(node1.isComma());
assertFalse(node1.isGetProp());
assertFalse(node1.isThrow());
assertFalse(node1.isObjectLit());
assertFalse(node1.isNot());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isHook());
assertFalse(node1.isAssign());
assertFalse(node1.isWith());
assertFalse(node1.isBreak());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isGetElem());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isDelProp());
assertFalse(node1.isLabel());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.hasOneChild());
assertFalse(node1.isDo());
assertFalse(node1.isEmpty());
assertFalse(node1.isSwitch());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isNew());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVar());
assertFalse(node1.isArrayLit());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isLabelName());


[MASTER] 13:21:19.055 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_93_1628256079020/com/google/javascript/rhino/Node_93_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_93_1628256079020/com/google/javascript/rhino/Node_93_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:19.055 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:19.055 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:19.056 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 13:21:19.058 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_93_1628256079020/com/google/javascript/rhino/Node_93_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_93_tmp__ESTest extends Node_93_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(".");
21:       assertEquals(15, Node.NO_SIDE_EFFECTS);
22:       assertEquals(57, Node.LAST_PROP);
23:       assertEquals(54, Node.SLASH_V);
24:       assertEquals(1, Node.DECR_FLAG);
25:       assertEquals(49, Node.DIRECT_EVAL);
26:       assertEquals(51, Node.STATIC_SOURCE_FILE);
27:       assertEquals(57, Node.REFLECTED_OBJECT);
28:       assertEquals(46, Node.IS_NAMESPACE);
29:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
30:       assertEquals(52, Node.LENGTH);
31:       assertEquals(50, Node.FREE_CALL);
32:       assertEquals(47, Node.IS_DISPATCHER);
33:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
34:       assertEquals(39, Node.EMPTY_BLOCK);
35:       assertEquals(29, Node.JSDOC_INFO_PROP);
36:       assertEquals(40, Node.ORIGINALNAME_PROP);
37:       assertEquals(30, Node.VAR_ARGS_NAME);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(43, Node.IS_CONSTANT_NAME);
40:       assertEquals(36, Node.QUOTED_PROP);
41:       assertEquals(53, Node.INPUT_ID);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(55, Node.INFERRED_FUNCTION);
44:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
45:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
49:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
50:       assertEquals(37, Node.OPT_ARG_NAME);
51:       assertEquals(48, Node.DIRECTIVES);
52:       assertEquals(32, Node.INCRDECR_PROP);
53:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
54:       assertEquals(4095, Node.COLUMN_MASK);
55:       assertEquals(12, Node.COLUMN_BITS);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertFalse(node0.isDebugger());
58:       assertFalse(node0.isVoid());
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isFunction());
61:       assertFalse(node0.isRegExp());
62:       assertEquals(40, node0.getType());
63:       assertFalse(node0.isFor());
64:       assertFalse(node0.isEmpty());
65:       assertFalse(node0.isDefaultCase());
66:       assertFalse(node0.isTry());
67:       assertFalse(node0.isSetterDef());
68:       assertFalse(node0.isNE());
69:       assertFalse(node0.isIn());
70:       assertFalse(node0.isNull());
71:       assertFalse(node0.isCall());
72:       assertFalse(node0.isName());
73:       assertFalse(node0.isCatch());
74:       assertFalse(node0.isDelProp());
75:       assertFalse(node0.isIf());
76:       assertEquals((-1), node0.getCharno());
77:       assertFalse(node0.isBlock());
78:       assertTrue(node0.isString());
79:       assertFalse(node0.isSwitch());
80:       assertFalse(node0.isAdd());
81:       assertFalse(node0.isHook());
82:       assertFalse(node0.isVar());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isCase());
85:       assertFalse(node0.isNew());
86:       assertFalse(node0.isAssignAdd());
87:       assertFalse(node0.isParamList());
88:       assertFalse(node0.isGetterDef());
89:       assertEquals(0, node0.getChildCount());
90:       assertFalse(node0.isNumber());
91:       assertFalse(node0.isLabel());
92:       assertFalse(node0.isStringKey());
93:       assertFalse(node0.isArrayLit());
94:       assertFalse(node0.isLabelName());
95:       assertFalse(node0.isExprResult());
96:       assertFalse(node0.isScript());
97:       assertFalse(node0.isWith());
98:       assertFalse(node0.isNot());
99:       assertFalse(node0.isObjectLit());
100:       assertFalse(node0.hasOneChild());
101:       assertFalse(node0.isThis());
102:       assertFalse(node0.hasChildren());
103:       assertFalse(node0.isTypeOf());
104:       assertFalse(node0.isReturn());
105:       assertFalse(node0.isAssign());
106:       assertFalse(node0.isOr());
107:       assertFalse(node0.isDec());
108:       assertFalse(node0.isComma());
109:       assertFalse(node0.hasMoreThanOneChild());
110:       assertFalse(node0.isGetElem());
111:       assertFalse(node0.isInstanceOf());
112:       assertFalse(node0.isBreak());
113:       assertEquals((-1), node0.getLineno());
114:       assertFalse(node0.isInc());
115:       assertFalse(node0.isThrow());
116:       assertFalse(node0.isWhile());
117:       assertFalse(node0.isGetProp());
118:       assertEquals((-1), node0.getSourcePosition());
119:       assertFalse(node0.isContinue());
120:       assertFalse(node0.isAnd());
121:       assertFalse(node0.isFalse());
122:       assertFalse(node0.isCast());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(15, Node.NO_SIDE_EFFECTS);
128:       assertEquals(57, Node.LAST_PROP);
129:       assertEquals(54, Node.SLASH_V);
130:       assertEquals(1, Node.DECR_FLAG);
131:       assertEquals(49, Node.DIRECT_EVAL);
132:       assertEquals(51, Node.STATIC_SOURCE_FILE);
133:       assertEquals(57, Node.REFLECTED_OBJECT);
134:       assertEquals(46, Node.IS_NAMESPACE);
135:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
136:       assertEquals(52, Node.LENGTH);
137:       assertEquals(50, Node.FREE_CALL);
138:       assertEquals(47, Node.IS_DISPATCHER);
139:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
140:       assertEquals(39, Node.EMPTY_BLOCK);
141:       assertEquals(29, Node.JSDOC_INFO_PROP);
142:       assertEquals(40, Node.ORIGINALNAME_PROP);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(2, Node.POST_FLAG);
145:       assertEquals(43, Node.IS_CONSTANT_NAME);
146:       assertEquals(36, Node.QUOTED_PROP);
147:       assertEquals(53, Node.INPUT_ID);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(55, Node.INFERRED_FUNCTION);
150:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
151:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
152:       assertEquals(8, Node.FLAG_NO_THROWS);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
156:       assertEquals(37, Node.OPT_ARG_NAME);
157:       assertEquals(48, Node.DIRECTIVES);
158:       assertEquals(32, Node.INCRDECR_PROP);
159:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
160:       assertEquals(4095, Node.COLUMN_MASK);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
163:       assertFalse(node0.isDebugger());
164:       assertFalse(node0.isVoid());
165:       assertFalse(node0.isTrue());
166:       assertFalse(node0.isFunction());
167:       assertFalse(node0.isRegExp());
168:       assertEquals(40, node0.getType());
169:       assertFalse(node0.isFor());
170:       assertFalse(node0.isEmpty());
171:       assertFalse(node0.isDefaultCase());
172:       assertFalse(node0.isTry());
173:       assertFalse(node0.isSetterDef());
174:       assertFalse(node0.isNE());
175:       assertFalse(node0.isIn());
176:       assertFalse(node0.isNull());
177:       assertFalse(node0.isCall());
178:       assertFalse(node0.isName());
179:       assertFalse(node0.isCatch());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.isIf());
182:       assertEquals((-1), node0.getCharno());
183:       assertFalse(node0.isBlock());
184:       assertTrue(node0.isString());
185:       assertFalse(node0.isSwitch());
186:       assertFalse(node0.isAdd());
187:       assertFalse(node0.isHook());
188:       assertFalse(node0.isVar());
189:       assertFalse(node0.isDo());
190:       assertFalse(node0.isCase());
191:       assertFalse(node0.isNew());
192:       assertFalse(node0.isAssignAdd());
193:       assertFalse(node0.isParamList());
194:       assertFalse(node0.isGetterDef());
195:       assertEquals(0, node0.getChildCount());
196:       assertFalse(node0.isNumber());
197:       assertFalse(node0.isLabel());
198:       assertFalse(node0.isStringKey());
199:       assertFalse(node0.isArrayLit());
200:       assertFalse(node0.isLabelName());
201:       assertFalse(node0.isExprResult());
202:       assertFalse(node0.isScript());
203:       assertFalse(node0.isWith());
204:       assertFalse(node0.isNot());
205:       assertFalse(node0.isObjectLit());
206:       assertFalse(node0.hasOneChild());
207:       assertFalse(node0.isThis());
208:       assertFalse(node0.hasChildren());
209:       assertFalse(node0.isTypeOf());
210:       assertFalse(node0.isReturn());
211:       assertFalse(node0.isAssign());
212:       assertFalse(node0.isOr());
213:       assertFalse(node0.isDec());
214:       assertFalse(node0.isComma());
215:       assertFalse(node0.hasMoreThanOneChild());
216:       assertFalse(node0.isGetElem());
217:       assertFalse(node0.isInstanceOf());
218:       assertFalse(node0.isBreak());
219:       assertEquals((-1), node0.getLineno());
220:       assertFalse(node0.isInc());
221:       assertFalse(node0.isThrow());
222:       assertFalse(node0.isWhile());
223:       assertFalse(node0.isGetProp());
224:       assertEquals((-1), node0.getSourcePosition());
225:       assertFalse(node0.isContinue());
226:       assertFalse(node0.isAnd());
227:       assertFalse(node0.isFalse());
228:       assertFalse(node0.isCast());
229:       assertNotNull(iterable0);
230:       
231:       String string0 = node0.toString();
232:       assertEquals(15, Node.NO_SIDE_EFFECTS);
233:       assertEquals(57, Node.LAST_PROP);
234:       assertEquals(54, Node.SLASH_V);
235:       assertEquals(1, Node.DECR_FLAG);
236:       assertEquals(49, Node.DIRECT_EVAL);
237:       assertEquals(51, Node.STATIC_SOURCE_FILE);
238:       assertEquals(57, Node.REFLECTED_OBJECT);
239:       assertEquals(46, Node.IS_NAMESPACE);
240:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
241:       assertEquals(52, Node.LENGTH);
242:       assertEquals(50, Node.FREE_CALL);
243:       assertEquals(47, Node.IS_DISPATCHER);
244:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
245:       assertEquals(39, Node.EMPTY_BLOCK);
246:       assertEquals(29, Node.JSDOC_INFO_PROP);
247:       assertEquals(40, Node.ORIGINALNAME_PROP);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(2, Node.POST_FLAG);
250:       assertEquals(43, Node.IS_CONSTANT_NAME);
251:       assertEquals(36, Node.QUOTED_PROP);
252:       assertEquals(53, Node.INPUT_ID);
253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
254:       assertEquals(55, Node.INFERRED_FUNCTION);
255:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
256:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
257:       assertEquals(8, Node.FLAG_NO_THROWS);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
260:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
261:       assertEquals(37, Node.OPT_ARG_NAME);
262:       assertEquals(48, Node.DIRECTIVES);
263:       assertEquals(32, Node.INCRDECR_PROP);
264:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
265:       assertEquals(4095, Node.COLUMN_MASK);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
268:       assertEquals("STRING .", string0);
269:       assertFalse(node0.isDebugger());
270:       assertFalse(node0.isVoid());
271:       assertFalse(node0.isTrue());
272:       assertFalse(node0.isFunction());
273:       assertFalse(node0.isRegExp());
274:       assertEquals(40, node0.getType());
275:       assertFalse(node0.isFor());
276:       assertFalse(node0.isEmpty());
277:       assertFalse(node0.isDefaultCase());
278:       assertFalse(node0.isTry());
279:       assertFalse(node0.isSetterDef());
280:       assertFalse(node0.isNE());
281:       assertFalse(node0.isIn());
282:       assertFalse(node0.isNull());
283:       assertFalse(node0.isCall());
284:       assertFalse(node0.isName());
285:       assertFalse(node0.isCatch());
286:       assertFalse(node0.isDelProp());
287:       assertFalse(node0.isIf());
288:       assertEquals((-1), node0.getCharno());
289:       assertFalse(node0.isBlock());
290:       assertTrue(node0.isString());
291:       assertFalse(node0.isSwitch());
292:       assertFalse(node0.isAdd());
293:       assertFalse(node0.isHook());
294:       assertFalse(node0.isVar());
295:       assertFalse(node0.isDo());
296:       assertFalse(node0.isCase());
297:       assertFalse(node0.isNew());
298:       assertFalse(node0.isAssignAdd());
299:       assertFalse(node0.isParamList());
300:       assertFalse(node0.isGetterDef());
301:       assertEquals(0, node0.getChildCount());
302:       assertFalse(node0.isNumber());
303:       assertFalse(node0.isLabel());
304:       assertFalse(node0.isStringKey());
305:       assertFalse(node0.isArrayLit());
306:       assertFalse(node0.isLabelName());
307:       assertFalse(node0.isExprResult());
308:       assertFalse(node0.isScript());
309:       assertFalse(node0.isWith());
310:       assertFalse(node0.isNot());
311:       assertFalse(node0.isObjectLit());
312:       assertFalse(node0.hasOneChild());
313:       assertFalse(node0.isThis());
314:       assertFalse(node0.hasChildren());
315:       assertFalse(node0.isTypeOf());
316:       assertFalse(node0.isReturn());
317:       assertFalse(node0.isAssign());
318:       assertFalse(node0.isOr());
319:       assertFalse(node0.isDec());
320:       assertFalse(node0.isComma());
321:       assertFalse(node0.hasMoreThanOneChild());
322:       assertFalse(node0.isGetElem());
323:       assertFalse(node0.isInstanceOf());
324:       assertFalse(node0.isBreak());
325:       assertEquals((-1), node0.getLineno());
326:       assertFalse(node0.isInc());
327:       assertFalse(node0.isThrow());
328:       assertFalse(node0.isWhile());
329:       assertFalse(node0.isGetProp());
330:       assertEquals((-1), node0.getSourcePosition());
331:       assertFalse(node0.isContinue());
332:       assertFalse(node0.isAnd());
333:       assertFalse(node0.isFalse());
334:       assertFalse(node0.isCast());
335:       assertNotNull(string0);
336:       
337:       boolean boolean0 = node0.isAssign();
338:       assertEquals(15, Node.NO_SIDE_EFFECTS);
339:       assertEquals(57, Node.LAST_PROP);
340:       assertEquals(54, Node.SLASH_V);
341:       assertEquals(1, Node.DECR_FLAG);
342:       assertEquals(49, Node.DIRECT_EVAL);
343:       assertEquals(51, Node.STATIC_SOURCE_FILE);
344:       assertEquals(57, Node.REFLECTED_OBJECT);
345:       assertEquals(46, Node.IS_NAMESPACE);
346:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
347:       assertEquals(52, Node.LENGTH);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(47, Node.IS_DISPATCHER);
350:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
351:       assertEquals(39, Node.EMPTY_BLOCK);
352:       assertEquals(29, Node.JSDOC_INFO_PROP);
353:       assertEquals(40, Node.ORIGINALNAME_PROP);
354:       assertEquals(30, Node.VAR_ARGS_NAME);
355:       assertEquals(2, Node.POST_FLAG);
356:       assertEquals(43, Node.IS_CONSTANT_NAME);
357:       assertEquals(36, Node.QUOTED_PROP);
358:       assertEquals(53, Node.INPUT_ID);
359:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
360:       assertEquals(55, Node.INFERRED_FUNCTION);
361:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
362:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
363:       assertEquals(8, Node.FLAG_NO_THROWS);
364:       assertEquals(56, Node.CHANGE_TIME);
365:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
366:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
367:       assertEquals(37, Node.OPT_ARG_NAME);
368:       assertEquals(48, Node.DIRECTIVES);
369:       assertEquals(32, Node.INCRDECR_PROP);
370:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
371:       assertEquals(4095, Node.COLUMN_MASK);
372:       assertEquals(12, Node.COLUMN_BITS);
373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
374:       assertFalse(boolean0);
375:       assertFalse(node0.isDebugger());
376:       assertFalse(node0.isVoid());
377:       assertFalse(node0.isTrue());
378:       assertFalse(node0.isFunction());
379:       assertFalse(node0.isRegExp());
380:       assertEquals(40, node0.getType());
381:       assertFalse(node0.isFor());
382:       assertFalse(node0.isEmpty());
383:       assertFalse(node0.isDefaultCase());
384:       assertFalse(node0.isTry());
385:       assertFalse(node0.isSetterDef());
386:       assertFalse(node0.isNE());
387:       assertFalse(node0.isIn());
388:       assertFalse(node0.isNull());
389:       assertFalse(node0.isCall());
390:       assertFalse(node0.isName());
391:       assertFalse(node0.isCatch());
392:       assertFalse(node0.isDelProp());
393:       assertFalse(node0.isIf());
394:       assertEquals((-1), node0.getCharno());
395:       assertFalse(node0.isBlock());
396:       assertTrue(node0.isString());
397:       assertFalse(node0.isSwitch());
398:       assertFalse(node0.isAdd());
399:       assertFalse(node0.isHook());
400:       assertFalse(node0.isVar());
401:       assertFalse(node0.isDo());
402:       assertFalse(node0.isCase());
403:       assertFalse(node0.isNew());
404:       assertFalse(node0.isAssignAdd());
405:       assertFalse(node0.isParamList());
406:       assertFalse(node0.isGetterDef());
407:       assertEquals(0, node0.getChildCount());
408:       assertFalse(node0.isNumber());
409:       assertFalse(node0.isLabel());
410:       assertFalse(node0.isStringKey());
411:       assertFalse(node0.isArrayLit());
412:       assertFalse(node0.isLabelName());
413:       assertFalse(node0.isExprResult());
414:       assertFalse(node0.isScript());
415:       assertFalse(node0.isWith());
416:       assertFalse(node0.isNot());
417:       assertFalse(node0.isObjectLit());
418:       assertFalse(node0.hasOneChild());
419:       assertFalse(node0.isThis());
420:       assertFalse(node0.hasChildren());
421:       assertFalse(node0.isTypeOf());
422:       assertFalse(node0.isReturn());
423:       assertFalse(node0.isAssign());
424:       assertFalse(node0.isOr());
425:       assertFalse(node0.isDec());
426:       assertFalse(node0.isComma());
427:       assertFalse(node0.hasMoreThanOneChild());
428:       assertFalse(node0.isGetElem());
429:       assertFalse(node0.isInstanceOf());
430:       assertFalse(node0.isBreak());
431:       assertEquals((-1), node0.getLineno());
432:       assertFalse(node0.isInc());
433:       assertFalse(node0.isThrow());
434:       assertFalse(node0.isWhile());
435:       assertFalse(node0.isGetProp());
436:       assertEquals((-1), node0.getSourcePosition());
437:       assertFalse(node0.isContinue());
438:       assertFalse(node0.isAnd());
439:       assertFalse(node0.isFalse());
440:       assertFalse(node0.isCast());
441:   }
442: }
RegularFileObject[/tmp/EvoSuite_93_1628256079020/com/google/javascript/rhino/Node_93_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:19 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_93_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_93_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_93_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:19.066 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(".");
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertNotNull(iterable0);

String string0 = node0.toString();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals("STRING .", string0);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());
assertNotNull(string0);

boolean boolean0 = node0.isAssign();
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(1, Node.DECR_FLAG);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertFalse(boolean0);
assertFalse(node0.isDebugger());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertEquals(40, node0.getType());
assertFalse(node0.isFor());
assertFalse(node0.isEmpty());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTry());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNE());
assertFalse(node0.isIn());
assertFalse(node0.isNull());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertFalse(node0.isCatch());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isSwitch());
assertFalse(node0.isAdd());
assertFalse(node0.isHook());
assertFalse(node0.isVar());
assertFalse(node0.isDo());
assertFalse(node0.isCase());
assertFalse(node0.isNew());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isParamList());
assertFalse(node0.isGetterDef());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isNumber());
assertFalse(node0.isLabel());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.isExprResult());
assertFalse(node0.isScript());
assertFalse(node0.isWith());
assertFalse(node0.isNot());
assertFalse(node0.isObjectLit());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isReturn());
assertFalse(node0.isAssign());
assertFalse(node0.isOr());
assertFalse(node0.isDec());
assertFalse(node0.isComma());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isGetElem());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isBreak());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInc());
assertFalse(node0.isThrow());
assertFalse(node0.isWhile());
assertFalse(node0.isGetProp());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isContinue());
assertFalse(node0.isAnd());
assertFalse(node0.isFalse());
assertFalse(node0.isCast());


[MASTER] 13:21:20.206 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_99_1628256079597/com/google/javascript/rhino/Node_99_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_99_1628256079597/com/google/javascript/rhino/Node_99_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:20.206 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:20.206 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:20.211 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 1418
[MASTER] 13:21:20.213 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_99_1628256079597/com/google/javascript/rhino/Node_99_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:19 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.InputId;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_99_tmp__ESTest extends Node_99_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newNumber(0.0, 0, 0);
22:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
23:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
24:       assertEquals(53, Node.INPUT_ID);
25:       assertEquals(29, Node.JSDOC_INFO_PROP);
26:       assertEquals(43, Node.IS_CONSTANT_NAME);
27:       assertEquals(56, Node.CHANGE_TIME);
28:       assertEquals(36, Node.QUOTED_PROP);
29:       assertEquals(37, Node.OPT_ARG_NAME);
30:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(55, Node.INFERRED_FUNCTION);
33:       assertEquals(39, Node.EMPTY_BLOCK);
34:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(2, Node.POST_FLAG);
39:       assertEquals(30, Node.VAR_ARGS_NAME);
40:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
41:       assertEquals(57, Node.REFLECTED_OBJECT);
42:       assertEquals(52, Node.LENGTH);
43:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
44:       assertEquals(40, Node.ORIGINALNAME_PROP);
45:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
46:       assertEquals(8, Node.FLAG_NO_THROWS);
47:       assertEquals(48, Node.DIRECTIVES);
48:       assertEquals(49, Node.DIRECT_EVAL);
49:       assertEquals(50, Node.FREE_CALL);
50:       assertEquals(54, Node.SLASH_V);
51:       assertEquals(51, Node.STATIC_SOURCE_FILE);
52:       assertEquals(4095, Node.COLUMN_MASK);
53:       assertEquals(32, Node.INCRDECR_PROP);
54:       assertEquals(1, Node.DECR_FLAG);
55:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
56:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
57:       assertEquals(12, Node.COLUMN_BITS);
58:       assertFalse(node0.isThrow());
59:       assertFalse(node0.isFalse());
60:       assertFalse(node0.isHook());
61:       assertFalse(node0.isGetProp());
62:       assertFalse(node0.isInc());
63:       assertFalse(node0.isString());
64:       assertFalse(node0.isCase());
65:       assertFalse(node0.isExprResult());
66:       assertFalse(node0.isThis());
67:       assertFalse(node0.isComma());
68:       assertFalse(node0.isBreak());
69:       assertFalse(node0.isWith());
70:       assertFalse(node0.isInstanceOf());
71:       assertFalse(node0.isGetElem());
72:       assertFalse(node0.isArrayLit());
73:       assertFalse(node0.isLabelName());
74:       assertFalse(node0.hasOneChild());
75:       assertFalse(node0.isDelProp());
76:       assertFalse(node0.isFor());
77:       assertFalse(node0.isTrue());
78:       assertFalse(node0.isTry());
79:       assertFalse(node0.isOr());
80:       assertFalse(node0.isGetterDef());
81:       assertFalse(node0.isScript());
82:       assertFalse(node0.isEmpty());
83:       assertFalse(node0.isDo());
84:       assertFalse(node0.isDefaultCase());
85:       assertFalse(node0.isSwitch());
86:       assertFalse(node0.isAssignAdd());
87:       assertFalse(node0.isLabel());
88:       assertEquals(0, node0.getChildCount());
89:       assertFalse(node0.isCall());
90:       assertFalse(node0.isName());
91:       assertEquals(0, node0.getSourcePosition());
92:       assertFalse(node0.isNull());
93:       assertFalse(node0.isVar());
94:       assertFalse(node0.isParamList());
95:       assertFalse(node0.isStringKey());
96:       assertFalse(node0.isSetterDef());
97:       assertFalse(node0.isNew());
98:       assertFalse(node0.isAdd());
99:       assertEquals(39, node0.getType());
100:       assertFalse(node0.isReturn());
101:       assertFalse(node0.isWhile());
102:       assertFalse(node0.isVoid());
103:       assertFalse(node0.isBlock());
104:       assertFalse(node0.isRegExp());
105:       assertFalse(node0.isDec());
106:       assertFalse(node0.isTypeOf());
107:       assertFalse(node0.hasMoreThanOneChild());
108:       assertFalse(node0.isCatch());
109:       assertFalse(node0.isAssign());
110:       assertFalse(node0.isIf());
111:       assertFalse(node0.hasChildren());
112:       assertFalse(node0.isNE());
113:       assertFalse(node0.isDebugger());
114:       assertEquals(0, node0.getCharno());
115:       assertTrue(node0.isNumber());
116:       assertFalse(node0.isIn());
117:       assertFalse(node0.isContinue());
118:       assertFalse(node0.isObjectLit());
119:       assertFalse(node0.isAnd());
120:       assertFalse(node0.isNot());
121:       assertFalse(node0.isFunction());
122:       assertEquals(0, node0.getLineno());
123:       assertFalse(node0.isCast());
124:       
125:       double double0 = node0.getDouble();
126:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
127:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
128:       assertEquals(53, Node.INPUT_ID);
129:       assertEquals(29, Node.JSDOC_INFO_PROP);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(56, Node.CHANGE_TIME);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(37, Node.OPT_ARG_NAME);
134:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
135:       assertEquals(46, Node.IS_NAMESPACE);
136:       assertEquals(55, Node.INFERRED_FUNCTION);
137:       assertEquals(39, Node.EMPTY_BLOCK);
138:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
139:       assertEquals(15, Node.NO_SIDE_EFFECTS);
140:       assertEquals(57, Node.LAST_PROP);
141:       assertEquals(47, Node.IS_DISPATCHER);
142:       assertEquals(2, Node.POST_FLAG);
143:       assertEquals(30, Node.VAR_ARGS_NAME);
144:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
145:       assertEquals(57, Node.REFLECTED_OBJECT);
146:       assertEquals(52, Node.LENGTH);
147:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
148:       assertEquals(40, Node.ORIGINALNAME_PROP);
149:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
150:       assertEquals(8, Node.FLAG_NO_THROWS);
151:       assertEquals(48, Node.DIRECTIVES);
152:       assertEquals(49, Node.DIRECT_EVAL);
153:       assertEquals(50, Node.FREE_CALL);
154:       assertEquals(54, Node.SLASH_V);
155:       assertEquals(51, Node.STATIC_SOURCE_FILE);
156:       assertEquals(4095, Node.COLUMN_MASK);
157:       assertEquals(32, Node.INCRDECR_PROP);
158:       assertEquals(1, Node.DECR_FLAG);
159:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
160:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
161:       assertEquals(12, Node.COLUMN_BITS);
162:       assertEquals(0.0, double0, 0.01);
163:       assertFalse(node0.isThrow());
164:       assertFalse(node0.isFalse());
165:       assertFalse(node0.isHook());
166:       assertFalse(node0.isGetProp());
167:       assertFalse(node0.isInc());
168:       assertFalse(node0.isString());
169:       assertFalse(node0.isCase());
170:       assertFalse(node0.isExprResult());
171:       assertFalse(node0.isThis());
172:       assertFalse(node0.isComma());
173:       assertFalse(node0.isBreak());
174:       assertFalse(node0.isWith());
175:       assertFalse(node0.isInstanceOf());
176:       assertFalse(node0.isGetElem());
177:       assertFalse(node0.isArrayLit());
178:       assertFalse(node0.isLabelName());
179:       assertFalse(node0.hasOneChild());
180:       assertFalse(node0.isDelProp());
181:       assertFalse(node0.isFor());
182:       assertFalse(node0.isTrue());
183:       assertFalse(node0.isTry());
184:       assertFalse(node0.isOr());
185:       assertFalse(node0.isGetterDef());
186:       assertFalse(node0.isScript());
187:       assertFalse(node0.isEmpty());
188:       assertFalse(node0.isDo());
189:       assertFalse(node0.isDefaultCase());
190:       assertFalse(node0.isSwitch());
191:       assertFalse(node0.isAssignAdd());
192:       assertFalse(node0.isLabel());
193:       assertEquals(0, node0.getChildCount());
194:       assertFalse(node0.isCall());
195:       assertFalse(node0.isName());
196:       assertEquals(0, node0.getSourcePosition());
197:       assertFalse(node0.isNull());
198:       assertFalse(node0.isVar());
199:       assertFalse(node0.isParamList());
200:       assertFalse(node0.isStringKey());
201:       assertFalse(node0.isSetterDef());
202:       assertFalse(node0.isNew());
203:       assertFalse(node0.isAdd());
204:       assertEquals(39, node0.getType());
205:       assertFalse(node0.isReturn());
206:       assertFalse(node0.isWhile());
207:       assertFalse(node0.isVoid());
208:       assertFalse(node0.isBlock());
209:       assertFalse(node0.isRegExp());
210:       assertFalse(node0.isDec());
211:       assertFalse(node0.isTypeOf());
212:       assertFalse(node0.hasMoreThanOneChild());
213:       assertFalse(node0.isCatch());
214:       assertFalse(node0.isAssign());
215:       assertFalse(node0.isIf());
216:       assertFalse(node0.hasChildren());
217:       assertFalse(node0.isNE());
218:       assertFalse(node0.isDebugger());
219:       assertEquals(0, node0.getCharno());
220:       assertTrue(node0.isNumber());
221:       assertFalse(node0.isIn());
222:       assertFalse(node0.isContinue());
223:       assertFalse(node0.isObjectLit());
224:       assertFalse(node0.isAnd());
225:       assertFalse(node0.isNot());
226:       assertFalse(node0.isFunction());
227:       assertEquals(0, node0.getLineno());
228:       assertFalse(node0.isCast());
229:       
230:       node0.setSourceFileForTesting(", ...");
231:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
232:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
233:       assertEquals(53, Node.INPUT_ID);
234:       assertEquals(29, Node.JSDOC_INFO_PROP);
235:       assertEquals(43, Node.IS_CONSTANT_NAME);
236:       assertEquals(56, Node.CHANGE_TIME);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(37, Node.OPT_ARG_NAME);
239:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
240:       assertEquals(46, Node.IS_NAMESPACE);
241:       assertEquals(55, Node.INFERRED_FUNCTION);
242:       assertEquals(39, Node.EMPTY_BLOCK);
243:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
244:       assertEquals(15, Node.NO_SIDE_EFFECTS);
245:       assertEquals(57, Node.LAST_PROP);
246:       assertEquals(47, Node.IS_DISPATCHER);
247:       assertEquals(2, Node.POST_FLAG);
248:       assertEquals(30, Node.VAR_ARGS_NAME);
249:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
250:       assertEquals(57, Node.REFLECTED_OBJECT);
251:       assertEquals(52, Node.LENGTH);
252:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
253:       assertEquals(40, Node.ORIGINALNAME_PROP);
254:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
255:       assertEquals(8, Node.FLAG_NO_THROWS);
256:       assertEquals(48, Node.DIRECTIVES);
257:       assertEquals(49, Node.DIRECT_EVAL);
258:       assertEquals(50, Node.FREE_CALL);
259:       assertEquals(54, Node.SLASH_V);
260:       assertEquals(51, Node.STATIC_SOURCE_FILE);
261:       assertEquals(4095, Node.COLUMN_MASK);
262:       assertEquals(32, Node.INCRDECR_PROP);
263:       assertEquals(1, Node.DECR_FLAG);
264:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
265:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
266:       assertEquals(12, Node.COLUMN_BITS);
267:       assertFalse(node0.isThrow());
268:       assertFalse(node0.isFalse());
269:       assertFalse(node0.isHook());
270:       assertFalse(node0.isGetProp());
271:       assertFalse(node0.isInc());
272:       assertFalse(node0.isString());
273:       assertFalse(node0.isCase());
274:       assertFalse(node0.isExprResult());
275:       assertFalse(node0.isThis());
276:       assertFalse(node0.isComma());
277:       assertFalse(node0.isBreak());
278:       assertFalse(node0.isWith());
279:       assertFalse(node0.isInstanceOf());
280:       assertFalse(node0.isGetElem());
281:       assertFalse(node0.isArrayLit());
282:       assertFalse(node0.isLabelName());
283:       assertFalse(node0.hasOneChild());
284:       assertFalse(node0.isDelProp());
285:       assertFalse(node0.isFor());
286:       assertFalse(node0.isTrue());
287:       assertFalse(node0.isTry());
288:       assertFalse(node0.isOr());
289:       assertFalse(node0.isGetterDef());
290:       assertFalse(node0.isScript());
291:       assertFalse(node0.isEmpty());
292:       assertFalse(node0.isDo());
293:       assertFalse(node0.isDefaultCase());
294:       assertFalse(node0.isSwitch());
295:       assertFalse(node0.isAssignAdd());
296:       assertFalse(node0.isLabel());
297:       assertEquals(0, node0.getChildCount());
298:       assertFalse(node0.isCall());
299:       assertFalse(node0.isName());
300:       assertEquals(0, node0.getSourcePosition());
301:       assertFalse(node0.isNull());
302:       assertFalse(node0.isVar());
303:       assertFalse(node0.isParamList());
304:       assertFalse(node0.isStringKey());
305:       assertFalse(node0.isSetterDef());
306:       assertFalse(node0.isNew());
307:       assertFalse(node0.isAdd());
308:       assertEquals(39, node0.getType());
309:       assertFalse(node0.isReturn());
310:       assertFalse(node0.isWhile());
311:       assertFalse(node0.isVoid());
312:       assertFalse(node0.isBlock());
313:       assertFalse(node0.isRegExp());
314:       assertFalse(node0.isDec());
315:       assertFalse(node0.isTypeOf());
316:       assertFalse(node0.hasMoreThanOneChild());
317:       assertFalse(node0.isCatch());
318:       assertFalse(node0.isAssign());
319:       assertFalse(node0.isIf());
320:       assertFalse(node0.hasChildren());
321:       assertFalse(node0.isNE());
322:       assertFalse(node0.isDebugger());
323:       assertEquals(0, node0.getCharno());
324:       assertTrue(node0.isNumber());
325:       assertFalse(node0.isIn());
326:       assertFalse(node0.isContinue());
327:       assertFalse(node0.isObjectLit());
328:       assertFalse(node0.isAnd());
329:       assertFalse(node0.isNot());
330:       assertFalse(node0.isFunction());
331:       assertEquals(0, node0.getLineno());
332:       assertFalse(node0.isCast());
333:       
334:       boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
335:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
336:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
337:       assertEquals(53, Node.INPUT_ID);
338:       assertEquals(29, Node.JSDOC_INFO_PROP);
339:       assertEquals(43, Node.IS_CONSTANT_NAME);
340:       assertEquals(56, Node.CHANGE_TIME);
341:       assertEquals(36, Node.QUOTED_PROP);
342:       assertEquals(37, Node.OPT_ARG_NAME);
343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
344:       assertEquals(46, Node.IS_NAMESPACE);
345:       assertEquals(55, Node.INFERRED_FUNCTION);
346:       assertEquals(39, Node.EMPTY_BLOCK);
347:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
348:       assertEquals(15, Node.NO_SIDE_EFFECTS);
349:       assertEquals(57, Node.LAST_PROP);
350:       assertEquals(47, Node.IS_DISPATCHER);
351:       assertEquals(2, Node.POST_FLAG);
352:       assertEquals(30, Node.VAR_ARGS_NAME);
353:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
354:       assertEquals(57, Node.REFLECTED_OBJECT);
355:       assertEquals(52, Node.LENGTH);
356:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
357:       assertEquals(40, Node.ORIGINALNAME_PROP);
358:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
359:       assertEquals(8, Node.FLAG_NO_THROWS);
360:       assertEquals(48, Node.DIRECTIVES);
361:       assertEquals(49, Node.DIRECT_EVAL);
362:       assertEquals(50, Node.FREE_CALL);
363:       assertEquals(54, Node.SLASH_V);
364:       assertEquals(51, Node.STATIC_SOURCE_FILE);
365:       assertEquals(4095, Node.COLUMN_MASK);
366:       assertEquals(32, Node.INCRDECR_PROP);
367:       assertEquals(1, Node.DECR_FLAG);
368:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
369:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
370:       assertEquals(12, Node.COLUMN_BITS);
371:       assertTrue(boolean0);
372:       assertFalse(node0.isThrow());
373:       assertFalse(node0.isFalse());
374:       assertFalse(node0.isHook());
375:       assertFalse(node0.isGetProp());
376:       assertFalse(node0.isInc());
377:       assertFalse(node0.isString());
378:       assertFalse(node0.isCase());
379:       assertFalse(node0.isExprResult());
380:       assertFalse(node0.isThis());
381:       assertFalse(node0.isComma());
382:       assertFalse(node0.isBreak());
383:       assertFalse(node0.isWith());
384:       assertFalse(node0.isInstanceOf());
385:       assertFalse(node0.isGetElem());
386:       assertFalse(node0.isArrayLit());
387:       assertFalse(node0.isLabelName());
388:       assertFalse(node0.hasOneChild());
389:       assertFalse(node0.isDelProp());
390:       assertFalse(node0.isFor());
391:       assertFalse(node0.isTrue());
392:       assertFalse(node0.isTry());
393:       assertFalse(node0.isOr());
394:       assertFalse(node0.isGetterDef());
395:       assertFalse(node0.isScript());
396:       assertFalse(node0.isEmpty());
397:       assertFalse(node0.isDo());
398:       assertFalse(node0.isDefaultCase());
399:       assertFalse(node0.isSwitch());
400:       assertFalse(node0.isAssignAdd());
401:       assertFalse(node0.isLabel());
402:       assertEquals(0, node0.getChildCount());
403:       assertFalse(node0.isCall());
404:       assertFalse(node0.isName());
405:       assertEquals(0, node0.getSourcePosition());
406:       assertFalse(node0.isNull());
407:       assertFalse(node0.isVar());
408:       assertFalse(node0.isParamList());
409:       assertFalse(node0.isStringKey());
410:       assertFalse(node0.isSetterDef());
411:       assertFalse(node0.isNew());
412:       assertFalse(node0.isAdd());
413:       assertEquals(39, node0.getType());
414:       assertFalse(node0.isReturn());
415:       assertFalse(node0.isWhile());
416:       assertFalse(node0.isVoid());
417:       assertFalse(node0.isBlock());
418:       assertFalse(node0.isRegExp());
419:       assertFalse(node0.isDec());
420:       assertFalse(node0.isTypeOf());
421:       assertFalse(node0.hasMoreThanOneChild());
422:       assertFalse(node0.isCatch());
423:       assertFalse(node0.isAssign());
424:       assertFalse(node0.isIf());
425:       assertFalse(node0.hasChildren());
426:       assertFalse(node0.isNE());
427:       assertFalse(node0.isDebugger());
428:       assertEquals(0, node0.getCharno());
429:       assertTrue(node0.isNumber());
430:       assertFalse(node0.isIn());
431:       assertFalse(node0.isContinue());
432:       assertFalse(node0.isObjectLit());
433:       assertFalse(node0.isAnd());
434:       assertFalse(node0.isNot());
435:       assertFalse(node0.isFunction());
436:       assertEquals(0, node0.getLineno());
437:       assertFalse(node0.isCast());
438:       
439:       String string0 = node0.toStringTree();
440:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
441:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
442:       assertEquals(53, Node.INPUT_ID);
443:       assertEquals(29, Node.JSDOC_INFO_PROP);
444:       assertEquals(43, Node.IS_CONSTANT_NAME);
445:       assertEquals(56, Node.CHANGE_TIME);
446:       assertEquals(36, Node.QUOTED_PROP);
447:       assertEquals(37, Node.OPT_ARG_NAME);
448:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
449:       assertEquals(46, Node.IS_NAMESPACE);
450:       assertEquals(55, Node.INFERRED_FUNCTION);
451:       assertEquals(39, Node.EMPTY_BLOCK);
452:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
453:       assertEquals(15, Node.NO_SIDE_EFFECTS);
454:       assertEquals(57, Node.LAST_PROP);
455:       assertEquals(47, Node.IS_DISPATCHER);
456:       assertEquals(2, Node.POST_FLAG);
457:       assertEquals(30, Node.VAR_ARGS_NAME);
458:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
459:       assertEquals(57, Node.REFLECTED_OBJECT);
460:       assertEquals(52, Node.LENGTH);
461:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
462:       assertEquals(40, Node.ORIGINALNAME_PROP);
463:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
464:       assertEquals(8, Node.FLAG_NO_THROWS);
465:       assertEquals(48, Node.DIRECTIVES);
466:       assertEquals(49, Node.DIRECT_EVAL);
467:       assertEquals(50, Node.FREE_CALL);
468:       assertEquals(54, Node.SLASH_V);
469:       assertEquals(51, Node.STATIC_SOURCE_FILE);
470:       assertEquals(4095, Node.COLUMN_MASK);
471:       assertEquals(32, Node.INCRDECR_PROP);
472:       assertEquals(1, Node.DECR_FLAG);
473:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
474:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
475:       assertEquals(12, Node.COLUMN_BITS);
476:       assertFalse(node0.isThrow());
477:       assertFalse(node0.isFalse());
478:       assertFalse(node0.isHook());
479:       assertFalse(node0.isGetProp());
480:       assertFalse(node0.isInc());
481:       assertFalse(node0.isString());
482:       assertFalse(node0.isCase());
483:       assertFalse(node0.isExprResult());
484:       assertFalse(node0.isThis());
485:       assertFalse(node0.isComma());
486:       assertFalse(node0.isBreak());
487:       assertFalse(node0.isWith());
488:       assertFalse(node0.isInstanceOf());
489:       assertFalse(node0.isGetElem());
490:       assertFalse(node0.isArrayLit());
491:       assertFalse(node0.isLabelName());
492:       assertFalse(node0.hasOneChild());
493:       assertFalse(node0.isDelProp());
494:       assertFalse(node0.isFor());
495:       assertFalse(node0.isTrue());
496:       assertFalse(node0.isTry());
497:       assertFalse(node0.isOr());
498:       assertFalse(node0.isGetterDef());
499:       assertFalse(node0.isScript());
500:       assertFalse(node0.isEmpty());
501:       assertFalse(node0.isDo());
502:       assertFalse(node0.isDefaultCase());
503:       assertFalse(node0.isSwitch());
504:       assertFalse(node0.isAssignAdd());
505:       assertFalse(node0.isLabel());
506:       assertEquals(0, node0.getChildCount());
507:       assertFalse(node0.isCall());
508:       assertFalse(node0.isName());
509:       assertEquals(0, node0.getSourcePosition());
510:       assertFalse(node0.isNull());
511:       assertFalse(node0.isVar());
512:       assertFalse(node0.isParamList());
513:       assertFalse(node0.isStringKey());
514:       assertFalse(node0.isSetterDef());
515:       assertFalse(node0.isNew());
516:       assertFalse(node0.isAdd());
517:       assertEquals(39, node0.getType());
518:       assertFalse(node0.isReturn());
519:       assertFalse(node0.isWhile());
520:       assertFalse(node0.isVoid());
521:       assertFalse(node0.isBlock());
522:       assertFalse(node0.isRegExp());
523:       assertFalse(node0.isDec());
524:       assertFalse(node0.isTypeOf());
525:       assertFalse(node0.hasMoreThanOneChild());
526:       assertFalse(node0.isCatch());
527:       assertFalse(node0.isAssign());
528:       assertFalse(node0.isIf());
529:       assertFalse(node0.hasChildren());
530:       assertFalse(node0.isNE());
531:       assertFalse(node0.isDebugger());
532:       assertEquals(0, node0.getCharno());
533:       assertTrue(node0.isNumber());
534:       assertFalse(node0.isIn());
535:       assertFalse(node0.isContinue());
536:       assertFalse(node0.isObjectLit());
537:       assertFalse(node0.isAnd());
538:       assertFalse(node0.isNot());
539:       assertFalse(node0.isFunction());
540:       assertEquals(0, node0.getLineno());
541:       assertFalse(node0.isCast());
542:       
543:       String string1 = node0.toStringTree();
544:       assertTrue(string1.equals((Object)string0));
545:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
546:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
547:       assertEquals(53, Node.INPUT_ID);
548:       assertEquals(29, Node.JSDOC_INFO_PROP);
549:       assertEquals(43, Node.IS_CONSTANT_NAME);
550:       assertEquals(56, Node.CHANGE_TIME);
551:       assertEquals(36, Node.QUOTED_PROP);
552:       assertEquals(37, Node.OPT_ARG_NAME);
553:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
554:       assertEquals(46, Node.IS_NAMESPACE);
555:       assertEquals(55, Node.INFERRED_FUNCTION);
556:       assertEquals(39, Node.EMPTY_BLOCK);
557:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
558:       assertEquals(15, Node.NO_SIDE_EFFECTS);
559:       assertEquals(57, Node.LAST_PROP);
560:       assertEquals(47, Node.IS_DISPATCHER);
561:       assertEquals(2, Node.POST_FLAG);
562:       assertEquals(30, Node.VAR_ARGS_NAME);
563:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
564:       assertEquals(57, Node.REFLECTED_OBJECT);
565:       assertEquals(52, Node.LENGTH);
566:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
567:       assertEquals(40, Node.ORIGINALNAME_PROP);
568:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
569:       assertEquals(8, Node.FLAG_NO_THROWS);
570:       assertEquals(48, Node.DIRECTIVES);
571:       assertEquals(49, Node.DIRECT_EVAL);
572:       assertEquals(50, Node.FREE_CALL);
573:       assertEquals(54, Node.SLASH_V);
574:       assertEquals(51, Node.STATIC_SOURCE_FILE);
575:       assertEquals(4095, Node.COLUMN_MASK);
576:       assertEquals(32, Node.INCRDECR_PROP);
577:       assertEquals(1, Node.DECR_FLAG);
578:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
579:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
580:       assertEquals(12, Node.COLUMN_BITS);
581:       assertFalse(node0.isThrow());
582:       assertFalse(node0.isFalse());
583:       assertFalse(node0.isHook());
584:       assertFalse(node0.isGetProp());
585:       assertFalse(node0.isInc());
586:       assertFalse(node0.isString());
587:       assertFalse(node0.isCase());
588:       assertFalse(node0.isExprResult());
589:       assertFalse(node0.isThis());
590:       assertFalse(node0.isComma());
591:       assertFalse(node0.isBreak());
592:       assertFalse(node0.isWith());
593:       assertFalse(node0.isInstanceOf());
594:       assertFalse(node0.isGetElem());
595:       assertFalse(node0.isArrayLit());
596:       assertFalse(node0.isLabelName());
597:       assertFalse(node0.hasOneChild());
598:       assertFalse(node0.isDelProp());
599:       assertFalse(node0.isFor());
600:       assertFalse(node0.isTrue());
601:       assertFalse(node0.isTry());
602:       assertFalse(node0.isOr());
603:       assertFalse(node0.isGetterDef());
604:       assertFalse(node0.isScript());
605:       assertFalse(node0.isEmpty());
606:       assertFalse(node0.isDo());
607:       assertFalse(node0.isDefaultCase());
608:       assertFalse(node0.isSwitch());
609:       assertFalse(node0.isAssignAdd());
610:       assertFalse(node0.isLabel());
611:       assertEquals(0, node0.getChildCount());
612:       assertFalse(node0.isCall());
613:       assertFalse(node0.isName());
614:       assertEquals(0, node0.getSourcePosition());
615:       assertFalse(node0.isNull());
616:       assertFalse(node0.isVar());
617:       assertFalse(node0.isParamList());
618:       assertFalse(node0.isStringKey());
619:       assertFalse(node0.isSetterDef());
620:       assertFalse(node0.isNew());
621:       assertFalse(node0.isAdd());
622:       assertEquals(39, node0.getType());
623:       assertFalse(node0.isReturn());
624:       assertFalse(node0.isWhile());
625:       assertFalse(node0.isVoid());
626:       assertFalse(node0.isBlock());
627:       assertFalse(node0.isRegExp());
628:       assertFalse(node0.isDec());
629:       assertFalse(node0.isTypeOf());
630:       assertFalse(node0.hasMoreThanOneChild());
631:       assertFalse(node0.isCatch());
632:       assertFalse(node0.isAssign());
633:       assertFalse(node0.isIf());
634:       assertFalse(node0.hasChildren());
635:       assertFalse(node0.isNE());
636:       assertFalse(node0.isDebugger());
637:       assertEquals(0, node0.getCharno());
638:       assertTrue(node0.isNumber());
639:       assertFalse(node0.isIn());
640:       assertFalse(node0.isContinue());
641:       assertFalse(node0.isObjectLit());
642:       assertFalse(node0.isAnd());
643:       assertFalse(node0.isNot());
644:       assertFalse(node0.isFunction());
645:       assertEquals(0, node0.getLineno());
646:       assertFalse(node0.isCast());
647:       
648:       Node node1 = Node.newNumber((double) 2, 0, 1619);
649:       assertNotSame(node1, node0);
650:       assertFalse(node1.equals((Object)node0));
651:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
652:       assertEquals(50, Node.FREE_CALL);
653:       assertEquals(48, Node.DIRECTIVES);
654:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
655:       assertEquals(40, Node.ORIGINALNAME_PROP);
656:       assertEquals(4095, Node.COLUMN_MASK);
657:       assertEquals(15, Node.NO_SIDE_EFFECTS);
658:       assertEquals(57, Node.LAST_PROP);
659:       assertEquals(30, Node.VAR_ARGS_NAME);
660:       assertEquals(49, Node.DIRECT_EVAL);
661:       assertEquals(36, Node.QUOTED_PROP);
662:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
663:       assertEquals(57, Node.REFLECTED_OBJECT);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(8, Node.FLAG_NO_THROWS);
666:       assertEquals(39, Node.EMPTY_BLOCK);
667:       assertEquals(53, Node.INPUT_ID);
668:       assertEquals(55, Node.INFERRED_FUNCTION);
669:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
670:       assertEquals(29, Node.JSDOC_INFO_PROP);
671:       assertEquals(52, Node.LENGTH);
672:       assertEquals(47, Node.IS_DISPATCHER);
673:       assertEquals(2, Node.POST_FLAG);
674:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
675:       assertEquals(37, Node.OPT_ARG_NAME);
676:       assertEquals(56, Node.CHANGE_TIME);
677:       assertEquals(12, Node.COLUMN_BITS);
678:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
679:       assertEquals(1, Node.DECR_FLAG);
680:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
681:       assertEquals(54, Node.SLASH_V);
682:       assertEquals(43, Node.IS_CONSTANT_NAME);
683:       assertEquals(46, Node.IS_NAMESPACE);
684:       assertEquals(32, Node.INCRDECR_PROP);
685:       assertEquals(51, Node.STATIC_SOURCE_FILE);
686:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
687:       assertFalse(node1.isNE());
688:       assertFalse(node1.isGetterDef());
689:       assertFalse(node1.isEmpty());
690:       assertFalse(node1.isIn());
691:       assertFalse(node1.isArrayLit());
692:       assertFalse(node1.isDelProp());
693:       assertFalse(node1.isIf());
694:       assertFalse(node1.isSwitch());
695:       assertFalse(node1.isDebugger());
696:       assertFalse(node1.isVoid());
697:       assertFalse(node1.isString());
698:       assertFalse(node1.isRegExp());
699:       assertFalse(node1.isFor());
700:       assertFalse(node1.isCase());
701:       assertFalse(node1.isHook());
702:       assertTrue(node1.isNumber());
703:       assertFalse(node1.isTry());
704:       assertFalse(node1.isParamList());
705:       assertFalse(node1.isComma());
706:       assertFalse(node1.isNull());
707:       assertFalse(node1.isBreak());
708:       assertEquals(0, node1.getChildCount());
709:       assertFalse(node1.isCall());
710:       assertFalse(node1.isStringKey());
711:       assertFalse(node1.isName());
712:       assertFalse(node1.isTrue());
713:       assertFalse(node1.isAdd());
714:       assertFalse(node1.isNew());
715:       assertEquals(1619, node1.getSourcePosition());
716:       assertFalse(node1.isVar());
717:       assertFalse(node1.isDo());
718:       assertFalse(node1.isDefaultCase());
719:       assertFalse(node1.isAssignAdd());
720:       assertFalse(node1.hasChildren());
721:       assertFalse(node1.isLabel());
722:       assertFalse(node1.isDec());
723:       assertFalse(node1.isAssign());
724:       assertFalse(node1.isOr());
725:       assertFalse(node1.isTypeOf());
726:       assertFalse(node1.hasMoreThanOneChild());
727:       assertFalse(node1.isCast());
728:       assertFalse(node1.isGetElem());
729:       assertFalse(node1.isLabelName());
730:       assertFalse(node1.isExprResult());
731:       assertFalse(node1.isBlock());
732:       assertFalse(node1.isScript());
733:       assertFalse(node1.isNot());
734:       assertFalse(node1.isWith());
735:       assertFalse(node1.hasOneChild());
736:       assertEquals(39, node1.getType());
737:       assertFalse(node1.isReturn());
738:       assertFalse(node1.isWhile());
739:       assertFalse(node1.isThis());
740:       assertFalse(node1.isSetterDef());
741:       assertEquals(0, node1.getLineno());
742:       assertFalse(node1.isGetProp());
743:       assertFalse(node1.isInstanceOf());
744:       assertFalse(node1.isFalse());
745:       assertFalse(node1.isObjectLit());
746:       assertFalse(node1.isAnd());
747:       assertFalse(node1.isCatch());
748:       assertFalse(node1.isFunction());
749:       assertFalse(node1.isInc());
750:       assertFalse(node1.isContinue());
751:       assertFalse(node1.isThrow());
752:       assertEquals(1619, node1.getCharno());
753:       
754:       Node node2 = node0.copyInformationFromForTree(node1);
755:       assertSame(node0, node2);
756:       assertNotSame(node0, node1);
757:       assertNotSame(node1, node0);
758:       assertNotSame(node1, node2);
759:       assertSame(node2, node0);
760:       assertNotSame(node2, node1);
761:       assertFalse(node0.equals((Object)node1));
762:       assertFalse(node1.equals((Object)node0));
763:       assertFalse(node2.equals((Object)node1));
764:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
765:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
766:       assertEquals(53, Node.INPUT_ID);
767:       assertEquals(29, Node.JSDOC_INFO_PROP);
768:       assertEquals(43, Node.IS_CONSTANT_NAME);
769:       assertEquals(56, Node.CHANGE_TIME);
770:       assertEquals(36, Node.QUOTED_PROP);
771:       assertEquals(37, Node.OPT_ARG_NAME);
772:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
773:       assertEquals(46, Node.IS_NAMESPACE);
774:       assertEquals(55, Node.INFERRED_FUNCTION);
775:       assertEquals(39, Node.EMPTY_BLOCK);
776:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
777:       assertEquals(15, Node.NO_SIDE_EFFECTS);
778:       assertEquals(57, Node.LAST_PROP);
779:       assertEquals(47, Node.IS_DISPATCHER);
780:       assertEquals(2, Node.POST_FLAG);
781:       assertEquals(30, Node.VAR_ARGS_NAME);
782:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
783:       assertEquals(57, Node.REFLECTED_OBJECT);
784:       assertEquals(52, Node.LENGTH);
785:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
786:       assertEquals(40, Node.ORIGINALNAME_PROP);
787:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
788:       assertEquals(8, Node.FLAG_NO_THROWS);
789:       assertEquals(48, Node.DIRECTIVES);
790:       assertEquals(49, Node.DIRECT_EVAL);
791:       assertEquals(50, Node.FREE_CALL);
792:       assertEquals(54, Node.SLASH_V);
793:       assertEquals(51, Node.STATIC_SOURCE_FILE);
794:       assertEquals(4095, Node.COLUMN_MASK);
795:       assertEquals(32, Node.INCRDECR_PROP);
796:       assertEquals(1, Node.DECR_FLAG);
797:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
798:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
799:       assertEquals(12, Node.COLUMN_BITS);
800:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
801:       assertEquals(50, Node.FREE_CALL);
802:       assertEquals(48, Node.DIRECTIVES);
803:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
804:       assertEquals(40, Node.ORIGINALNAME_PROP);
805:       assertEquals(4095, Node.COLUMN_MASK);
806:       assertEquals(15, Node.NO_SIDE_EFFECTS);
807:       assertEquals(57, Node.LAST_PROP);
808:       assertEquals(30, Node.VAR_ARGS_NAME);
809:       assertEquals(49, Node.DIRECT_EVAL);
810:       assertEquals(36, Node.QUOTED_PROP);
811:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
812:       assertEquals(57, Node.REFLECTED_OBJECT);
813:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
814:       assertEquals(8, Node.FLAG_NO_THROWS);
815:       assertEquals(39, Node.EMPTY_BLOCK);
816:       assertEquals(53, Node.INPUT_ID);
817:       assertEquals(55, Node.INFERRED_FUNCTION);
818:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
819:       assertEquals(29, Node.JSDOC_INFO_PROP);
820:       assertEquals(52, Node.LENGTH);
821:       assertEquals(47, Node.IS_DISPATCHER);
822:       assertEquals(2, Node.POST_FLAG);
823:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
824:       assertEquals(37, Node.OPT_ARG_NAME);
825:       assertEquals(56, Node.CHANGE_TIME);
826:       assertEquals(12, Node.COLUMN_BITS);
827:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
828:       assertEquals(1, Node.DECR_FLAG);
829:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
830:       assertEquals(54, Node.SLASH_V);
831:       assertEquals(43, Node.IS_CONSTANT_NAME);
832:       assertEquals(46, Node.IS_NAMESPACE);
833:       assertEquals(32, Node.INCRDECR_PROP);
834:       assertEquals(51, Node.STATIC_SOURCE_FILE);
835:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
836:       assertEquals(37, Node.OPT_ARG_NAME);
837:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
838:       assertEquals(46, Node.IS_NAMESPACE);
839:       assertEquals(56, Node.CHANGE_TIME);
840:       assertEquals(32, Node.INCRDECR_PROP);
841:       assertEquals(12, Node.COLUMN_BITS);
842:       assertEquals(47, Node.IS_DISPATCHER);
843:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
844:       assertEquals(2, Node.POST_FLAG);
845:       assertEquals(30, Node.VAR_ARGS_NAME);
846:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
847:       assertEquals(54, Node.SLASH_V);
848:       assertEquals(43, Node.IS_CONSTANT_NAME);
849:       assertEquals(1, Node.DECR_FLAG);
850:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
851:       assertEquals(51, Node.STATIC_SOURCE_FILE);
852:       assertEquals(50, Node.FREE_CALL);
853:       assertEquals(48, Node.DIRECTIVES);
854:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
855:       assertEquals(39, Node.EMPTY_BLOCK);
856:       assertEquals(40, Node.ORIGINALNAME_PROP);
857:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
858:       assertEquals(4095, Node.COLUMN_MASK);
859:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
860:       assertEquals(53, Node.INPUT_ID);
861:       assertEquals(15, Node.NO_SIDE_EFFECTS);
862:       assertEquals(57, Node.LAST_PROP);
863:       assertEquals(49, Node.DIRECT_EVAL);
864:       assertEquals(55, Node.INFERRED_FUNCTION);
865:       assertEquals(29, Node.JSDOC_INFO_PROP);
866:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
867:       assertEquals(57, Node.REFLECTED_OBJECT);
868:       assertEquals(36, Node.QUOTED_PROP);
869:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
870:       assertEquals(52, Node.LENGTH);
871:       assertEquals(8, Node.FLAG_NO_THROWS);
872:       assertFalse(node0.isThrow());
873:       assertFalse(node0.isFalse());
874:       assertFalse(node0.isHook());
875:       assertFalse(node0.isGetProp());
876:       assertFalse(node0.isInc());
877:       assertFalse(node0.isString());
878:       assertFalse(node0.isCase());
879:       assertFalse(node0.isExprResult());
880:       assertFalse(node0.isThis());
881:       assertFalse(node0.isComma());
882:       assertFalse(node0.isBreak());
883:       assertFalse(node0.isWith());
884:       assertFalse(node0.isInstanceOf());
885:       assertFalse(node0.isGetElem());
886:       assertFalse(node0.isArrayLit());
887:       assertFalse(node0.isLabelName());
888:       assertFalse(node0.hasOneChild());
889:       assertFalse(node0.isDelProp());
890:       assertFalse(node0.isFor());
891:       assertFalse(node0.isTrue());
892:       assertFalse(node0.isTry());
893:       assertFalse(node0.isOr());
894:       assertFalse(node0.isGetterDef());
895:       assertFalse(node0.isScript());
896:       assertFalse(node0.isEmpty());
897:       assertFalse(node0.isDo());
898:       assertFalse(node0.isDefaultCase());
899:       assertFalse(node0.isSwitch());
900:       assertFalse(node0.isAssignAdd());
901:       assertFalse(node0.isLabel());
902:       assertEquals(0, node0.getChildCount());
903:       assertFalse(node0.isCall());
904:       assertFalse(node0.isName());
905:       assertEquals(0, node0.getSourcePosition());
906:       assertFalse(node0.isNull());
907:       assertFalse(node0.isVar());
908:       assertFalse(node0.isParamList());
909:       assertFalse(node0.isStringKey());
910:       assertFalse(node0.isSetterDef());
911:       assertFalse(node0.isNew());
912:       assertFalse(node0.isAdd());
913:       assertEquals(39, node0.getType());
914:       assertFalse(node0.isReturn());
915:       assertFalse(node0.isWhile());
916:       assertFalse(node0.isVoid());
917:       assertFalse(node0.isBlock());
918:       assertFalse(node0.isRegExp());
919:       assertFalse(node0.isDec());
920:       assertFalse(node0.isTypeOf());
921:       assertFalse(node0.hasMoreThanOneChild());
922:       assertFalse(node0.isCatch());
923:       assertFalse(node0.isAssign());
924:       assertFalse(node0.isIf());
925:       assertFalse(node0.hasChildren());
926:       assertFalse(node0.isNE());
927:       assertFalse(node0.isDebugger());
928:       assertEquals(0, node0.getCharno());
929:       assertTrue(node0.isNumber());
930:       assertFalse(node0.isIn());
931:       assertFalse(node0.isContinue());
932:       assertFalse(node0.isObjectLit());
933:       assertFalse(node0.isAnd());
934:       assertFalse(node0.isNot());
935:       assertFalse(node0.isFunction());
936:       assertEquals(0, node0.getLineno());
937:       assertFalse(node0.isCast());
938:       assertFalse(node1.isNE());
939:       assertFalse(node1.isGetterDef());
940:       assertFalse(node1.isEmpty());
941:       assertFalse(node1.isIn());
942:       assertFalse(node1.isArrayLit());
943:       assertFalse(node1.isDelProp());
944:       assertFalse(node1.isIf());
945:       assertFalse(node1.isSwitch());
946:       assertFalse(node1.isDebugger());
947:       assertFalse(node1.isVoid());
948:       assertFalse(node1.isString());
949:       assertFalse(node1.isRegExp());
950:       assertFalse(node1.isFor());
951:       assertFalse(node1.isCase());
952:       assertFalse(node1.isHook());
953:       assertTrue(node1.isNumber());
954:       assertFalse(node1.isTry());
955:       assertFalse(node1.isParamList());
956:       assertFalse(node1.isComma());
957:       assertFalse(node1.isNull());
958:       assertFalse(node1.isBreak());
959:       assertEquals(0, node1.getChildCount());
960:       assertFalse(node1.isCall());
961:       assertFalse(node1.isStringKey());
962:       assertFalse(node1.isName());
963:       assertFalse(node1.isTrue());
964:       assertFalse(node1.isAdd());
965:       assertFalse(node1.isNew());
966:       assertEquals(1619, node1.getSourcePosition());
967:       assertFalse(node1.isVar());
968:       assertFalse(node1.isDo());
969:       assertFalse(node1.isDefaultCase());
970:       assertFalse(node1.isAssignAdd());
971:       assertFalse(node1.hasChildren());
972:       assertFalse(node1.isLabel());
973:       assertFalse(node1.isDec());
974:       assertFalse(node1.isAssign());
975:       assertFalse(node1.isOr());
976:       assertFalse(node1.isTypeOf());
977:       assertFalse(node1.hasMoreThanOneChild());
978:       assertFalse(node1.isCast());
979:       assertFalse(node1.isGetElem());
980:       assertFalse(node1.isLabelName());
981:       assertFalse(node1.isExprResult());
982:       assertFalse(node1.isBlock());
983:       assertFalse(node1.isScript());
984:       assertFalse(node1.isNot());
985:       assertFalse(node1.isWith());
986:       assertFalse(node1.hasOneChild());
987:       assertEquals(39, node1.getType());
988:       assertFalse(node1.isReturn());
989:       assertFalse(node1.isWhile());
990:       assertFalse(node1.isThis());
991:       assertFalse(node1.isSetterDef());
992:       assertEquals(0, node1.getLineno());
993:       assertFalse(node1.isGetProp());
994:       assertFalse(node1.isInstanceOf());
995:       assertFalse(node1.isFalse());
996:       assertFalse(node1.isObjectLit());
997:       assertFalse(node1.isAnd());
998:       assertFalse(node1.isCatch());
999:       assertFalse(node1.isFunction());
1000:       assertFalse(node1.isInc());
1001:       assertFalse(node1.isContinue());
1002:       assertFalse(node1.isThrow());
1003:       assertEquals(1619, node1.getCharno());
1004:       assertFalse(node2.isInstanceOf());
1005:       assertFalse(node2.isObjectLit());
1006:       assertFalse(node2.isThis());
1007:       assertFalse(node2.isNot());
1008:       assertFalse(node2.isComma());
1009:       assertFalse(node2.isWith());
1010:       assertFalse(node2.isBreak());
1011:       assertFalse(node2.isExprResult());
1012:       assertFalse(node2.isAnd());
1013:       assertFalse(node2.isCast());
1014:       assertFalse(node2.isFalse());
1015:       assertEquals(0, node2.getCharno());
1016:       assertFalse(node2.isThrow());
1017:       assertFalse(node2.isInc());
1018:       assertFalse(node2.isReturn());
1019:       assertFalse(node2.isContinue());
1020:       assertFalse(node2.isTypeOf());
1021:       assertFalse(node2.isDec());
1022:       assertFalse(node2.isOr());
1023:       assertFalse(node2.isDelProp());
1024:       assertFalse(node2.isGetElem());
1025:       assertFalse(node2.isDebugger());
1026:       assertFalse(node2.isAssign());
1027:       assertFalse(node2.isString());
1028:       assertFalse(node2.isWhile());
1029:       assertFalse(node2.hasChildren());
1030:       assertFalse(node2.isGetProp());
1031:       assertTrue(node2.isNumber());
1032:       assertEquals(0, node2.getLineno());
1033:       assertFalse(node2.isCatch());
1034:       assertEquals(0, node2.getChildCount());
1035:       assertEquals(0, node2.getSourcePosition());
1036:       assertFalse(node2.isNull());
1037:       assertFalse(node2.isStringKey());
1038:       assertFalse(node2.isParamList());
1039:       assertFalse(node2.isVoid());
1040:       assertFalse(node2.isCall());
1041:       assertFalse(node2.isName());
1042:       assertFalse(node2.isAdd());
1043:       assertFalse(node2.isVar());
1044:       assertFalse(node2.isTrue());
1045:       assertFalse(node2.isFunction());
1046:       assertFalse(node2.isDefaultCase());
1047:       assertFalse(node2.isEmpty());
1048:       assertFalse(node2.isSetterDef());
1049:       assertFalse(node2.isNew());
1050:       assertFalse(node2.isDo());
1051:       assertFalse(node2.isIn());
1052:       assertFalse(node2.isAssignAdd());
1053:       assertFalse(node2.hasMoreThanOneChild());
1054:       assertFalse(node2.isLabel());
1055:       assertFalse(node2.isIf());
1056:       assertFalse(node2.isNE());
1057:       assertFalse(node2.isSwitch());
1058:       assertFalse(node2.isArrayLit());
1059:       assertFalse(node2.isLabelName());
1060:       assertFalse(node2.isHook());
1061:       assertFalse(node2.isBlock());
1062:       assertFalse(node2.isRegExp());
1063:       assertFalse(node2.isGetterDef());
1064:       assertEquals(39, node2.getType());
1065:       assertFalse(node2.isFor());
1066:       assertFalse(node2.isScript());
1067:       assertFalse(node2.isCase());
1068:       assertFalse(node2.isTry());
1069:       assertFalse(node2.hasOneChild());
1070:       
1071:       InputId inputId0 = new InputId("T^vUBYU Z6?5p");
1072:       assertEquals("T^vUBYU Z6?5p", inputId0.getIdName());
1073:       
1074:       String string2 = inputId0.toString();
1075:       assertFalse(string2.equals((Object)string0));
1076:       assertFalse(string2.equals((Object)string1));
1077:       assertEquals("InputId: T^vUBYU Z6?5p", string2);
1078:       assertEquals("T^vUBYU Z6?5p", inputId0.getIdName());
1079:       
1080:       String string3 = inputId0.toString();
1081:       assertFalse(string3.equals((Object)string1));
1082:       assertFalse(string3.equals((Object)string0));
1083:       assertTrue(string3.equals((Object)string2));
1084:       assertEquals("InputId: T^vUBYU Z6?5p", string3);
1085:       assertEquals("T^vUBYU Z6?5p", inputId0.getIdName());
1086:       
1087:       node0.setInputId(inputId0);
1088:       assertSame(node0, node2);
1089:       assertNotSame(node0, node1);
1090:       assertFalse(node0.equals((Object)node1));
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1093:       assertEquals(53, Node.INPUT_ID);
1094:       assertEquals(29, Node.JSDOC_INFO_PROP);
1095:       assertEquals(43, Node.IS_CONSTANT_NAME);
1096:       assertEquals(56, Node.CHANGE_TIME);
1097:       assertEquals(36, Node.QUOTED_PROP);
1098:       assertEquals(37, Node.OPT_ARG_NAME);
1099:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1100:       assertEquals(46, Node.IS_NAMESPACE);
1101:       assertEquals(55, Node.INFERRED_FUNCTION);
1102:       assertEquals(39, Node.EMPTY_BLOCK);
1103:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1104:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1105:       assertEquals(57, Node.LAST_PROP);
1106:       assertEquals(47, Node.IS_DISPATCHER);
1107:       assertEquals(2, Node.POST_FLAG);
1108:       assertEquals(30, Node.VAR_ARGS_NAME);
1109:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1110:       assertEquals(57, Node.REFLECTED_OBJECT);
1111:       assertEquals(52, Node.LENGTH);
1112:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1113:       assertEquals(40, Node.ORIGINALNAME_PROP);
1114:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1115:       assertEquals(8, Node.FLAG_NO_THROWS);
1116:       assertEquals(48, Node.DIRECTIVES);
1117:       assertEquals(49, Node.DIRECT_EVAL);
1118:       assertEquals(50, Node.FREE_CALL);
1119:       assertEquals(54, Node.SLASH_V);
1120:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1121:       assertEquals(4095, Node.COLUMN_MASK);
1122:       assertEquals(32, Node.INCRDECR_PROP);
1123:       assertEquals(1, Node.DECR_FLAG);
1124:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1125:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1126:       assertEquals(12, Node.COLUMN_BITS);
1127:       assertFalse(node0.isThrow());
1128:       assertFalse(node0.isFalse());
1129:       assertFalse(node0.isHook());
1130:       assertFalse(node0.isGetProp());
1131:       assertFalse(node0.isInc());
1132:       assertFalse(node0.isString());
1133:       assertFalse(node0.isCase());
1134:       assertFalse(node0.isExprResult());
1135:       assertFalse(node0.isThis());
1136:       assertFalse(node0.isComma());
1137:       assertFalse(node0.isBreak());
1138:       assertFalse(node0.isWith());
1139:       assertFalse(node0.isInstanceOf());
1140:       assertFalse(node0.isGetElem());
1141:       assertFalse(node0.isArrayLit());
1142:       assertFalse(node0.isLabelName());
1143:       assertFalse(node0.hasOneChild());
1144:       assertFalse(node0.isDelProp());
1145:       assertFalse(node0.isFor());
1146:       assertFalse(node0.isTrue());
1147:       assertFalse(node0.isTry());
1148:       assertFalse(node0.isOr());
1149:       assertFalse(node0.isGetterDef());
1150:       assertFalse(node0.isScript());
1151:       assertFalse(node0.isEmpty());
1152:       assertFalse(node0.isDo());
1153:       assertFalse(node0.isDefaultCase());
1154:       assertFalse(node0.isSwitch());
1155:       assertFalse(node0.isAssignAdd());
1156:       assertFalse(node0.isLabel());
1157:       assertEquals(0, node0.getChildCount());
1158:       assertFalse(node0.isCall());
1159:       assertFalse(node0.isName());
1160:       assertEquals(0, node0.getSourcePosition());
1161:       assertFalse(node0.isNull());
1162:       assertFalse(node0.isVar());
1163:       assertFalse(node0.isParamList());
1164:       assertFalse(node0.isStringKey());
1165:       assertFalse(node0.isSetterDef());
1166:       assertFalse(node0.isNew());
1167:       assertFalse(node0.isAdd());
1168:       assertEquals(39, node0.getType());
1169:       assertFalse(node0.isReturn());
1170:       assertFalse(node0.isWhile());
1171:       assertFalse(node0.isVoid());
1172:       assertFalse(node0.isBlock());
1173:       assertFalse(node0.isRegExp());
1174:       assertFalse(node0.isDec());
1175:       assertFalse(node0.isTypeOf());
1176:       assertFalse(node0.hasMoreThanOneChild());
1177:       assertFalse(node0.isCatch());
1178:       assertFalse(node0.isAssign());
1179:       assertFalse(node0.isIf());
1180:       assertFalse(node0.hasChildren());
1181:       assertFalse(node0.isNE());
1182:       assertFalse(node0.isDebugger());
1183:       assertEquals(0, node0.getCharno());
1184:       assertTrue(node0.isNumber());
1185:       assertFalse(node0.isIn());
1186:       assertFalse(node0.isContinue());
1187:       assertFalse(node0.isObjectLit());
1188:       assertFalse(node0.isAnd());
1189:       assertFalse(node0.isNot());
1190:       assertFalse(node0.isFunction());
1191:       assertEquals(0, node0.getLineno());
1192:       assertFalse(node0.isCast());
1193:       assertEquals("T^vUBYU Z6?5p", inputId0.getIdName());
1194:       
1195:       boolean boolean1 = node0.wasEmptyNode();
1196:       assertSame(node0, node2);
1197:       assertNotSame(node0, node1);
1198:       assertFalse(node0.equals((Object)node1));
1199:       assertFalse(boolean1 == boolean0);
1200:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1201:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1202:       assertEquals(53, Node.INPUT_ID);
1203:       assertEquals(29, Node.JSDOC_INFO_PROP);
1204:       assertEquals(43, Node.IS_CONSTANT_NAME);
1205:       assertEquals(56, Node.CHANGE_TIME);
1206:       assertEquals(36, Node.QUOTED_PROP);
1207:       assertEquals(37, Node.OPT_ARG_NAME);
1208:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1209:       assertEquals(46, Node.IS_NAMESPACE);
1210:       assertEquals(55, Node.INFERRED_FUNCTION);
1211:       assertEquals(39, Node.EMPTY_BLOCK);
1212:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1213:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1214:       assertEquals(57, Node.LAST_PROP);
1215:       assertEquals(47, Node.IS_DISPATCHER);
1216:       assertEquals(2, Node.POST_FLAG);
1217:       assertEquals(30, Node.VAR_ARGS_NAME);
1218:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1219:       assertEquals(57, Node.REFLECTED_OBJECT);
1220:       assertEquals(52, Node.LENGTH);
1221:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1222:       assertEquals(40, Node.ORIGINALNAME_PROP);
1223:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1224:       assertEquals(8, Node.FLAG_NO_THROWS);
1225:       assertEquals(48, Node.DIRECTIVES);
1226:       assertEquals(49, Node.DIRECT_EVAL);
1227:       assertEquals(50, Node.FREE_CALL);
1228:       assertEquals(54, Node.SLASH_V);
1229:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1230:       assertEquals(4095, Node.COLUMN_MASK);
1231:       assertEquals(32, Node.INCRDECR_PROP);
1232:       assertEquals(1, Node.DECR_FLAG);
1233:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1234:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1235:       assertEquals(12, Node.COLUMN_BITS);
1236:       assertFalse(boolean1);
1237:       assertFalse(node0.isThrow());
1238:       assertFalse(node0.isFalse());
1239:       assertFalse(node0.isHook());
1240:       assertFalse(node0.isGetProp());
1241:       assertFalse(node0.isInc());
1242:       assertFalse(node0.isString());
1243:       assertFalse(node0.isCase());
1244:       assertFalse(node0.isExprResult());
1245:       assertFalse(node0.isThis());
1246:       assertFalse(node0.isComma());
1247:       assertFalse(node0.isBreak());
1248:       assertFalse(node0.isWith());
1249:       assertFalse(node0.isInstanceOf());
1250:       assertFalse(node0.isGetElem());
1251:       assertFalse(node0.isArrayLit());
1252:       assertFalse(node0.isLabelName());
1253:       assertFalse(node0.hasOneChild());
1254:       assertFalse(node0.isDelProp());
1255:       assertFalse(node0.isFor());
1256:       assertFalse(node0.isTrue());
1257:       assertFalse(node0.isTry());
1258:       assertFalse(node0.isOr());
1259:       assertFalse(node0.isGetterDef());
1260:       assertFalse(node0.isScript());
1261:       assertFalse(node0.isEmpty());
1262:       assertFalse(node0.isDo());
1263:       assertFalse(node0.isDefaultCase());
1264:       assertFalse(node0.isSwitch());
1265:       assertFalse(node0.isAssignAdd());
1266:       assertFalse(node0.isLabel());
1267:       assertEquals(0, node0.getChildCount());
1268:       assertFalse(node0.isCall());
1269:       assertFalse(node0.isName());
1270:       assertEquals(0, node0.getSourcePosition());
1271:       assertFalse(node0.isNull());
1272:       assertFalse(node0.isVar());
1273:       assertFalse(node0.isParamList());
1274:       assertFalse(node0.isStringKey());
1275:       assertFalse(node0.isSetterDef());
1276:       assertFalse(node0.isNew());
1277:       assertFalse(node0.isAdd());
1278:       assertEquals(39, node0.getType());
1279:       assertFalse(node0.isReturn());
1280:       assertFalse(node0.isWhile());
1281:       assertFalse(node0.isVoid());
1282:       assertFalse(node0.isBlock());
1283:       assertFalse(node0.isRegExp());
1284:       assertFalse(node0.isDec());
1285:       assertFalse(node0.isTypeOf());
1286:       assertFalse(node0.hasMoreThanOneChild());
1287:       assertFalse(node0.isCatch());
1288:       assertFalse(node0.isAssign());
1289:       assertFalse(node0.isIf());
1290:       assertFalse(node0.hasChildren());
1291:       assertFalse(node0.isNE());
1292:       assertFalse(node0.isDebugger());
1293:       assertEquals(0, node0.getCharno());
1294:       assertTrue(node0.isNumber());
1295:       assertFalse(node0.isIn());
1296:       assertFalse(node0.isContinue());
1297:       assertFalse(node0.isObjectLit());
1298:       assertFalse(node0.isAnd());
1299:       assertFalse(node0.isNot());
1300:       assertFalse(node0.isFunction());
1301:       assertEquals(0, node0.getLineno());
1302:       assertFalse(node0.isCast());
1303:       
1304:       boolean boolean2 = node0.hasChildren();
1305:       assertSame(node0, node2);
1306:       assertNotSame(node0, node1);
1307:       assertFalse(node0.equals((Object)node1));
1308:       assertFalse(boolean2 == boolean0);
1309:       assertTrue(boolean2 == boolean1);
1310:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1311:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1312:       assertEquals(53, Node.INPUT_ID);
1313:       assertEquals(29, Node.JSDOC_INFO_PROP);
1314:       assertEquals(43, Node.IS_CONSTANT_NAME);
1315:       assertEquals(56, Node.CHANGE_TIME);
1316:       assertEquals(36, Node.QUOTED_PROP);
1317:       assertEquals(37, Node.OPT_ARG_NAME);
1318:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1319:       assertEquals(46, Node.IS_NAMESPACE);
1320:       assertEquals(55, Node.INFERRED_FUNCTION);
1321:       assertEquals(39, Node.EMPTY_BLOCK);
1322:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1323:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1324:       assertEquals(57, Node.LAST_PROP);
1325:       assertEquals(47, Node.IS_DISPATCHER);
1326:       assertEquals(2, Node.POST_FLAG);
1327:       assertEquals(30, Node.VAR_ARGS_NAME);
1328:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1329:       assertEquals(57, Node.REFLECTED_OBJECT);
1330:       assertEquals(52, Node.LENGTH);
1331:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1332:       assertEquals(40, Node.ORIGINALNAME_PROP);
1333:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1334:       assertEquals(8, Node.FLAG_NO_THROWS);
1335:       assertEquals(48, Node.DIRECTIVES);
1336:       assertEquals(49, Node.DIRECT_EVAL);
1337:       assertEquals(50, Node.FREE_CALL);
1338:       assertEquals(54, Node.SLASH_V);
1339:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1340:       assertEquals(4095, Node.COLUMN_MASK);
1341:       assertEquals(32, Node.INCRDECR_PROP);
1342:       assertEquals(1, Node.DECR_FLAG);
1343:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1344:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1345:       assertEquals(12, Node.COLUMN_BITS);
1346:       assertFalse(boolean2);
1347:       assertFalse(node0.isThrow());
1348:       assertFalse(node0.isFalse());
1349:       assertFalse(node0.isHook());
1350:       assertFalse(node0.isGetProp());
1351:       assertFalse(node0.isInc());
1352:       assertFalse(node0.isString());
1353:       assertFalse(node0.isCase());
1354:       assertFalse(node0.isExprResult());
1355:       assertFalse(node0.isThis());
1356:       assertFalse(node0.isComma());
1357:       assertFalse(node0.isBreak());
1358:       assertFalse(node0.isWith());
1359:       assertFalse(node0.isInstanceOf());
1360:       assertFalse(node0.isGetElem());
1361:       assertFalse(node0.isArrayLit());
1362:       assertFalse(node0.isLabelName());
1363:       assertFalse(node0.hasOneChild());
1364:       assertFalse(node0.isDelProp());
1365:       assertFalse(node0.isFor());
1366:       assertFalse(node0.isTrue());
1367:       assertFalse(node0.isTry());
1368:       assertFalse(node0.isOr());
1369:       assertFalse(node0.isGetterDef());
1370:       assertFalse(node0.isScript());
1371:       assertFalse(node0.isEmpty());
1372:       assertFalse(node0.isDo());
1373:       assertFalse(node0.isDefaultCase());
1374:       assertFalse(node0.isSwitch());
1375:       assertFalse(node0.isAssignAdd());
1376:       assertFalse(node0.isLabel());
1377:       assertEquals(0, node0.getChildCount());
1378:       assertFalse(node0.isCall());
1379:       assertFalse(node0.isName());
1380:       assertEquals(0, node0.getSourcePosition());
1381:       assertFalse(node0.isNull());
1382:       assertFalse(node0.isVar());
1383:       assertFalse(node0.isParamList());
1384:       assertFalse(node0.isStringKey());
1385:       assertFalse(node0.isSetterDef());
1386:       assertFalse(node0.isNew());
1387:       assertFalse(node0.isAdd());
1388:       assertEquals(39, node0.getType());
1389:       assertFalse(node0.isReturn());
1390:       assertFalse(node0.isWhile());
1391:       assertFalse(node0.isVoid());
1392:       assertFalse(node0.isBlock());
1393:       assertFalse(node0.isRegExp());
1394:       assertFalse(node0.isDec());
1395:       assertFalse(node0.isTypeOf());
1396:       assertFalse(node0.hasMoreThanOneChild());
1397:       assertFalse(node0.isCatch());
1398:       assertFalse(node0.isAssign());
1399:       assertFalse(node0.isIf());
1400:       assertFalse(node0.hasChildren());
1401:       assertFalse(node0.isNE());
1402:       assertFalse(node0.isDebugger());
1403:       assertEquals(0, node0.getCharno());
1404:       assertTrue(node0.isNumber());
1405:       assertFalse(node0.isIn());
1406:       assertFalse(node0.isContinue());
1407:       assertFalse(node0.isObjectLit());
1408:       assertFalse(node0.isAnd());
1409:       assertFalse(node0.isNot());
1410:       assertFalse(node0.isFunction());
1411:       assertEquals(0, node0.getLineno());
1412:       assertFalse(node0.isCast());
1413:       
1414:       Iterable<Node> iterable0 = node0.children();
1415:       assertSame(node0, node2);
1416:       assertNotSame(node0, node1);
1417:       assertFalse(node0.equals((Object)node1));
1418:       assertFalse(iterable0.contains(node2));
1419:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1420:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1421:       assertEquals(53, Node.INPUT_ID);
1422:       assertEquals(29, Node.JSDOC_INFO_PROP);
1423:       assertEquals(43, Node.IS_CONSTANT_NAME);
1424:       assertEquals(56, Node.CHANGE_TIME);
1425:       assertEquals(36, Node.QUOTED_PROP);
1426:       assertEquals(37, Node.OPT_ARG_NAME);
1427:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1428:       assertEquals(46, Node.IS_NAMESPACE);
1429:       assertEquals(55, Node.INFERRED_FUNCTION);
1430:       assertEquals(39, Node.EMPTY_BLOCK);
1431:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1432:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1433:       assertEquals(57, Node.LAST_PROP);
1434:       assertEquals(47, Node.IS_DISPATCHER);
1435:       assertEquals(2, Node.POST_FLAG);
1436:       assertEquals(30, Node.VAR_ARGS_NAME);
1437:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1438:       assertEquals(57, Node.REFLECTED_OBJECT);
1439:       assertEquals(52, Node.LENGTH);
1440:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1441:       assertEquals(40, Node.ORIGINALNAME_PROP);
1442:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1443:       assertEquals(8, Node.FLAG_NO_THROWS);
1444:       assertEquals(48, Node.DIRECTIVES);
1445:       assertEquals(49, Node.DIRECT_EVAL);
1446:       assertEquals(50, Node.FREE_CALL);
1447:       assertEquals(54, Node.SLASH_V);
1448:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1449:       assertEquals(4095, Node.COLUMN_MASK);
1450:       assertEquals(32, Node.INCRDECR_PROP);
1451:       assertEquals(1, Node.DECR_FLAG);
1452:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1453:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1454:       assertEquals(12, Node.COLUMN_BITS);
1455:       assertFalse(node0.isThrow());
1456:       assertFalse(node0.isFalse());
1457:       assertFalse(node0.isHook());
1458:       assertFalse(node0.isGetProp());
1459:       assertFalse(node0.isInc());
1460:       assertFalse(node0.isString());
1461:       assertFalse(node0.isCase());
1462:       assertFalse(node0.isExprResult());
1463:       assertFalse(node0.isThis());
1464:       assertFalse(node0.isComma());
1465:       assertFalse(node0.isBreak());
1466:       assertFalse(node0.isWith());
1467:       assertFalse(node0.isInstanceOf());
1468:       assertFalse(node0.isGetElem());
1469:       assertFalse(node0.isArrayLit());
1470:       assertFalse(node0.isLabelName());
1471:       assertFalse(node0.hasOneChild());
1472:       assertFalse(node0.isDelProp());
1473:       assertFalse(node0.isFor());
1474:       assertFalse(node0.isTrue());
1475:       assertFalse(node0.isTry());
1476:       
1477:       node0.putIntProp((-3510), 0);
1478:       assertSame(node0, node2);
1479:       assertNotSame(node0, node1);
1480:       assertFalse(node0.equals((Object)node1));
1481:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1482:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1483:       assertEquals(53, Node.INPUT_ID);
1484:       assertEquals(29, Node.JSDOC_INFO_PROP);
1485:       assertEquals(43, Node.IS_CONSTANT_NAME);
1486:       assertEquals(56, Node.CHANGE_TIME);
1487:       assertEquals(36, Node.QUOTED_PROP);
1488:       assertEquals(37, Node.OPT_ARG_NAME);
1489:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1490:       assertEquals(46, Node.IS_NAMESPACE);
1491:       assertEquals(55, Node.INFERRED_FUNCTION);
1492:       assertEquals(39, Node.EMPTY_BLOCK);
1493:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1494:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1495:       assertEquals(57, Node.LAST_PROP);
1496:       assertEquals(47, Node.IS_DISPATCHER);
1497:       assertEquals(2, Node.POST_FLAG);
1498:       assertEquals(30, Node.VAR_ARGS_NAME);
1499:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1500:       assertEquals(57, Node.REFLECTED_OBJECT);
1501:       assertEquals(52, Node.LENGTH);
1502:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1503:       assertEquals(40, Node.ORIGINALNAME_PROP);
1504:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1505:       assertEquals(8, Node.FLAG_NO_THROWS);
1506:       assertEquals(48, Node.DIRECTIVES);
1507:       assertEquals(49, Node.DIRECT_EVAL);
1508:       assertEquals(50, Node.FREE_CALL);
1509:       assertEquals(54, Node.SLASH_V);
1510:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1511:       assertEquals(4095, Node.COLUMN_MASK);
1512:       assertEquals(32, Node.INCRDECR_PROP);
1513:       assertEquals(1, Node.DECR_FLAG);
1514:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1515:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1516:       assertEquals(12, Node.COLUMN_BITS);
1517:       
1518:       boolean boolean3 = node0.isBlock();
1519:       assertSame(node0, node2);
1520:       assertNotSame(node0, node1);
1521:       assertFalse(boolean3 == boolean0);
1522:       assertTrue(boolean3 == boolean2);
1523:       assertTrue(boolean3 == boolean1);
1524:       assertFalse(node0.equals((Object)node1));
1525:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1526:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1527:       assertEquals(53, Node.INPUT_ID);
1528:       assertEquals(29, Node.JSDOC_INFO_PROP);
1529:       assertEquals(43, Node.IS_CONSTANT_NAME);
1530:       assertEquals(56, Node.CHANGE_TIME);
1531:       assertEquals(36, Node.QUOTED_PROP);
1532:       assertEquals(37, Node.OPT_ARG_NAME);
1533:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1534:       assertEquals(46, Node.IS_NAMESPACE);
1535:       assertEquals(55, Node.INFERRED_FUNCTION);
1536:       assertEquals(39, Node.EMPTY_BLOCK);
1537:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1538:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1539:       assertEquals(57, Node.LAST_PROP);
1540:       assertEquals(47, Node.IS_DISPATCHER);
1541:       assertEquals(2, Node.POST_FLAG);
1542:       assertEquals(30, Node.VAR_ARGS_NAME);
1543:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1544:       assertEquals(57, Node.REFLECTED_OBJECT);
1545:       assertEquals(52, Node.LENGTH);
1546:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1547:       assertEquals(40, Node.ORIGINALNAME_PROP);
1548:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1549:       assertEquals(8, Node.FLAG_NO_THROWS);
1550:       assertEquals(48, Node.DIRECTIVES);
1551:       assertEquals(49, Node.DIRECT_EVAL);
1552:       assertEquals(50, Node.FREE_CALL);
1553:       assertEquals(54, Node.SLASH_V);
1554:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1555:       assertEquals(4095, Node.COLUMN_MASK);
1556:       assertEquals(32, Node.INCRDECR_PROP);
1557:       assertEquals(1, Node.DECR_FLAG);
1558:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1559:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1560:       assertEquals(12, Node.COLUMN_BITS);
1561:       assertFalse(boolean3);
1562:       
1563:       node0.getStaticSourceFile();
1564:       assertSame(node0, node2);
1565:       assertNotSame(node0, node1);
1566:       assertFalse(node0.equals((Object)node1));
1567:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1568:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1569:       assertEquals(53, Node.INPUT_ID);
1570:       assertEquals(29, Node.JSDOC_INFO_PROP);
1571:       assertEquals(43, Node.IS_CONSTANT_NAME);
1572:       assertEquals(56, Node.CHANGE_TIME);
1573:       assertEquals(36, Node.QUOTED_PROP);
1574:       assertEquals(37, Node.OPT_ARG_NAME);
1575:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1576:       assertEquals(46, Node.IS_NAMESPACE);
1577:       assertEquals(55, Node.INFERRED_FUNCTION);
1578:       assertEquals(39, Node.EMPTY_BLOCK);
1579:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1580:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1581:       assertEquals(57, Node.LAST_PROP);
1582:       assertEquals(47, Node.IS_DISPATCHER);
1583:       assertEquals(2, Node.POST_FLAG);
1584:       assertEquals(30, Node.VAR_ARGS_NAME);
1585:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1586:       assertEquals(57, Node.REFLECTED_OBJECT);
1587:       assertEquals(52, Node.LENGTH);
1588:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1589:       assertEquals(40, Node.ORIGINALNAME_PROP);
1590:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1591:       assertEquals(8, Node.FLAG_NO_THROWS);
1592:       assertEquals(48, Node.DIRECTIVES);
1593:       assertEquals(49, Node.DIRECT_EVAL);
1594:       assertEquals(50, Node.FREE_CALL);
1595:       assertEquals(54, Node.SLASH_V);
1596:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1597:       assertEquals(4095, Node.COLUMN_MASK);
1598:       assertEquals(32, Node.INCRDECR_PROP);
1599:       assertEquals(1, Node.DECR_FLAG);
1600:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1601:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1602:       assertEquals(12, Node.COLUMN_BITS);
1603:       
1604:       boolean boolean4 = node0.isDelProp();
1605:       assertSame(node0, node2);
1606:       assertNotSame(node0, node1);
1607:       assertFalse(node0.equals((Object)node1));
1608:       assertTrue(boolean4 == boolean2);
1609:       assertFalse(boolean4 == boolean0);
1610:       assertTrue(boolean4 == boolean3);
1611:       assertTrue(boolean4 == boolean1);
1612:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1613:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1614:       assertEquals(53, Node.INPUT_ID);
1615:       assertEquals(29, Node.JSDOC_INFO_PROP);
1616:       assertEquals(43, Node.IS_CONSTANT_NAME);
1617:       assertEquals(56, Node.CHANGE_TIME);
1618:       assertEquals(36, Node.QUOTED_PROP);
1619:       assertEquals(37, Node.OPT_ARG_NAME);
1620:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1621:       assertEquals(46, Node.IS_NAMESPACE);
1622:       assertEquals(55, Node.INFERRED_FUNCTION);
1623:       assertEquals(39, Node.EMPTY_BLOCK);
1624:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1625:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1626:       assertEquals(57, Node.LAST_PROP);
1627:       assertEquals(47, Node.IS_DISPATCHER);
1628:       assertEquals(2, Node.POST_FLAG);
1629:       assertEquals(30, Node.VAR_ARGS_NAME);
1630:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1631:       assertEquals(57, Node.REFLECTED_OBJECT);
1632:       assertEquals(52, Node.LENGTH);
1633:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1634:       assertEquals(40, Node.ORIGINALNAME_PROP);
1635:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1636:       assertEquals(8, Node.FLAG_NO_THROWS);
1637:       assertEquals(48, Node.DIRECTIVES);
1638:       assertEquals(49, Node.DIRECT_EVAL);
1639:       assertEquals(50, Node.FREE_CALL);
1640:       assertEquals(54, Node.SLASH_V);
1641:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1642:       assertEquals(4095, Node.COLUMN_MASK);
1643:       assertEquals(32, Node.INCRDECR_PROP);
1644:       assertEquals(1, Node.DECR_FLAG);
1645:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1646:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1647:       assertEquals(12, Node.COLUMN_BITS);
1648:       assertFalse(boolean4);
1649:       
1650:       boolean boolean5 = node0.isExprResult();
1651:       assertSame(node0, node2);
1652:       assertNotSame(node0, node1);
1653:       assertFalse(node0.equals((Object)node1));
1654:       assertTrue(boolean5 == boolean3);
1655:       assertTrue(boolean5 == boolean4);
1656:       assertTrue(boolean5 == boolean2);
1657:       assertFalse(boolean5 == boolean0);
1658:       assertTrue(boolean5 == boolean1);
1659:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1660:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1661:       assertEquals(53, Node.INPUT_ID);
1662:       assertEquals(29, Node.JSDOC_INFO_PROP);
1663:       assertEquals(43, Node.IS_CONSTANT_NAME);
1664:       assertEquals(56, Node.CHANGE_TIME);
1665:       assertEquals(36, Node.QUOTED_PROP);
1666:       assertEquals(37, Node.OPT_ARG_NAME);
1667:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1668:       assertEquals(46, Node.IS_NAMESPACE);
1669:       assertEquals(55, Node.INFERRED_FUNCTION);
1670:       assertEquals(39, Node.EMPTY_BLOCK);
1671:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1672:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1673:       assertEquals(57, Node.LAST_PROP);
1674:       assertEquals(47, Node.IS_DISPATCHER);
1675:       assertEquals(2, Node.POST_FLAG);
1676:       assertEquals(30, Node.VAR_ARGS_NAME);
1677:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1678:       assertEquals(57, Node.REFLECTED_OBJECT);
1679:       assertEquals(52, Node.LENGTH);
1680:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1681:       assertEquals(40, Node.ORIGINALNAME_PROP);
1682:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1683:       assertEquals(8, Node.FLAG_NO_THROWS);
1684:       assertEquals(48, Node.DIRECTIVES);
1685:       assertEquals(49, Node.DIRECT_EVAL);
1686:       assertEquals(50, Node.FREE_CALL);
1687:       assertEquals(54, Node.SLASH_V);
1688:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1689:       assertEquals(4095, Node.COLUMN_MASK);
1690:       assertEquals(32, Node.INCRDECR_PROP);
1691:       assertEquals(1, Node.DECR_FLAG);
1692:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1693:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1694:       assertEquals(12, Node.COLUMN_BITS);
1695:       assertFalse(boolean5);
1696:       
1697:       Node node3 = node0.useSourceInfoFromForTree(node1);
1698:       assertSame(node0, node2);
1699:       assertSame(node0, node3);
1700:       assertNotSame(node0, node1);
1701:       assertSame(node3, node2);
1702:       assertNotSame(node3, node1);
1703:       assertSame(node3, node0);
1704:       assertNotSame(node1, node0);
1705:       assertNotSame(node1, node3);
1706:       assertNotSame(node1, node2);
1707:       assertFalse(node0.equals((Object)node1));
1708:       assertFalse(node3.equals((Object)node1));
1709:       assertFalse(node1.equals((Object)node0));
1710:       assertFalse(node1.equals((Object)node2));
1711:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1712:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1713:       assertEquals(53, Node.INPUT_ID);
1714:       assertEquals(29, Node.JSDOC_INFO_PROP);
1715:       assertEquals(43, Node.IS_CONSTANT_NAME);
1716:       assertEquals(56, Node.CHANGE_TIME);
1717:       assertEquals(36, Node.QUOTED_PROP);
1718:       assertEquals(37, Node.OPT_ARG_NAME);
1719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1720:       assertEquals(46, Node.IS_NAMESPACE);
1721:       assertEquals(55, Node.INFERRED_FUNCTION);
1722:       assertEquals(39, Node.EMPTY_BLOCK);
1723:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1724:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1725:       assertEquals(57, Node.LAST_PROP);
1726:       assertEquals(47, Node.IS_DISPATCHER);
1727:       assertEquals(2, Node.POST_FLAG);
1728:       assertEquals(30, Node.VAR_ARGS_NAME);
1729:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1730:       assertEquals(57, Node.REFLECTED_OBJECT);
1731:       assertEquals(52, Node.LENGTH);
1732:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1733:       assertEquals(40, Node.ORIGINALNAME_PROP);
1734:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1735:       assertEquals(8, Node.FLAG_NO_THROWS);
1736:       assertEquals(48, Node.DIRECTIVES);
1737:       assertEquals(49, Node.DIRECT_EVAL);
1738:       assertEquals(50, Node.FREE_CALL);
1739:       assertEquals(54, Node.SLASH_V);
1740:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1741:       assertEquals(4095, Node.COLUMN_MASK);
1742:       assertEquals(32, Node.INCRDECR_PROP);
1743:       assertEquals(1, Node.DECR_FLAG);
1744:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1745:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1746:       assertEquals(12, Node.COLUMN_BITS);
1747:       assertEquals(29, Node.JSDOC_INFO_PROP);
1748:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1749:       assertEquals(53, Node.INPUT_ID);
1750:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1751:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1752:       assertEquals(37, Node.OPT_ARG_NAME);
1753:       assertEquals(36, Node.QUOTED_PROP);
1754:       assertEquals(46, Node.IS_NAMESPACE);
1755:       assertEquals(43, Node.IS_CONSTANT_NAME);
1756:       assertEquals(56, Node.CHANGE_TIME);
1757:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1758:       assertEquals(30, Node.VAR_ARGS_NAME);
1759:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1760:       assertEquals(55, Node.INFERRED_FUNCTION);
1761:       assertEquals(39, Node.EMPTY_BLOCK);
1762:       assertEquals(2, Node.POST_FLAG);
1763:       assertEquals(57, Node.LAST_PROP);
1764:       assertEquals(47, Node.IS_DISPATCHER);
1765:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1766:       assertEquals(40, Node.ORIGINALNAME_PROP);
1767:       assertEquals(50, Node.FREE_CALL);
1768:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1769:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1770:       assertEquals(52, Node.LENGTH);
1771:       assertEquals(54, Node.SLASH_V);
1772:       assertEquals(8, Node.FLAG_NO_THROWS);
1773:       assertEquals(48, Node.DIRECTIVES);
1774:       assertEquals(57, Node.REFLECTED_OBJECT);
1775:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1776:       assertEquals(49, Node.DIRECT_EVAL);
1777:       assertEquals(1, Node.DECR_FLAG);
1778:       assertEquals(4095, Node.COLUMN_MASK);
1779:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1780:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1781:       assertEquals(32, Node.INCRDECR_PROP);
1782:       assertEquals(12, Node.COLUMN_BITS);
1783:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1784:       assertEquals(50, Node.FREE_CALL);
1785:       assertEquals(48, Node.DIRECTIVES);
1786:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1787:       assertEquals(40, Node.ORIGINALNAME_PROP);
1788:       assertEquals(4095, Node.COLUMN_MASK);
1789:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1790:       assertEquals(57, Node.LAST_PROP);
1791:       assertEquals(30, Node.VAR_ARGS_NAME);
1792:       assertEquals(49, Node.DIRECT_EVAL);
1793:       assertEquals(36, Node.QUOTED_PROP);
1794:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1795:       assertEquals(57, Node.REFLECTED_OBJECT);
1796:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1797:       assertEquals(8, Node.FLAG_NO_THROWS);
1798:       assertEquals(39, Node.EMPTY_BLOCK);
1799:       assertEquals(53, Node.INPUT_ID);
1800:       assertEquals(55, Node.INFERRED_FUNCTION);
1801:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1802:       assertEquals(29, Node.JSDOC_INFO_PROP);
1803:       assertEquals(52, Node.LENGTH);
1804:       assertEquals(47, Node.IS_DISPATCHER);
1805:       assertEquals(2, Node.POST_FLAG);
1806:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1807:       assertEquals(37, Node.OPT_ARG_NAME);
1808:       assertEquals(56, Node.CHANGE_TIME);
1809:       assertEquals(12, Node.COLUMN_BITS);
1810:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1811:       assertEquals(1, Node.DECR_FLAG);
1812:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1813:       assertEquals(54, Node.SLASH_V);
1814:       assertEquals(43, Node.IS_CONSTANT_NAME);
1815:       assertEquals(46, Node.IS_NAMESPACE);
1816:       assertEquals(32, Node.INCRDECR_PROP);
1817:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1818:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1819:       
1820:       node3.addChildrenToFront(node2);
1821:       assertSame(node0, node2);
1822:       assertSame(node0, node3);
1823:       assertNotSame(node0, node1);
1824:       assertSame(node3, node2);
1825:       assertNotSame(node3, node1);
1826:       assertSame(node3, node0);
1827:       assertNotSame(node1, node0);
1828:       assertNotSame(node1, node3);
1829:       assertNotSame(node1, node2);
1830:       assertSame(node2, node0);
1831:       assertSame(node2, node3);
1832:       assertNotSame(node2, node1);
1833:       assertFalse(node0.equals((Object)node1));
1834:       assertFalse(node3.equals((Object)node1));
1835:       assertFalse(node1.equals((Object)node0));
1836:       assertFalse(node1.equals((Object)node3));
1837:       assertFalse(node1.equals((Object)node2));
1838:       assertFalse(node2.equals((Object)node1));
1839:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1840:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1841:       assertEquals(53, Node.INPUT_ID);
1842:       assertEquals(29, Node.JSDOC_INFO_PROP);
1843:       assertEquals(43, Node.IS_CONSTANT_NAME);
1844:       assertEquals(56, Node.CHANGE_TIME);
1845:       assertEquals(36, Node.QUOTED_PROP);
1846:       assertEquals(37, Node.OPT_ARG_NAME);
1847:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1848:       assertEquals(46, Node.IS_NAMESPACE);
1849:       assertEquals(55, Node.INFERRED_FUNCTION);
1850:       assertEquals(39, Node.EMPTY_BLOCK);
1851:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1852:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1853:       assertEquals(57, Node.LAST_PROP);
1854:       assertEquals(47, Node.IS_DISPATCHER);
1855:       assertEquals(2, Node.POST_FLAG);
1856:       assertEquals(30, Node.VAR_ARGS_NAME);
1857:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1858:       assertEquals(57, Node.REFLECTED_OBJECT);
1859:       assertEquals(52, Node.LENGTH);
1860:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1861:       assertEquals(40, Node.ORIGINALNAME_PROP);
1862:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1863:       assertEquals(8, Node.FLAG_NO_THROWS);
1864:       assertEquals(48, Node.DIRECTIVES);
1865:       assertEquals(49, Node.DIRECT_EVAL);
1866:       assertEquals(50, Node.FREE_CALL);
1867:       assertEquals(54, Node.SLASH_V);
1868:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1869:       assertEquals(4095, Node.COLUMN_MASK);
1870:       assertEquals(32, Node.INCRDECR_PROP);
1871:       assertEquals(1, Node.DECR_FLAG);
1872:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1873:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1874:       assertEquals(12, Node.COLUMN_BITS);
1875:       assertEquals(29, Node.JSDOC_INFO_PROP);
1876:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1877:       assertEquals(53, Node.INPUT_ID);
1878:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1879:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1880:       assertEquals(37, Node.OPT_ARG_NAME);
1881:       assertEquals(36, Node.QUOTED_PROP);
1882:       assertEquals(46, Node.IS_NAMESPACE);
1883:       assertEquals(43, Node.IS_CONSTANT_NAME);
1884:       assertEquals(56, Node.CHANGE_TIME);
1885:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1886:       assertEquals(30, Node.VAR_ARGS_NAME);
1887:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1888:       assertEquals(55, Node.INFERRED_FUNCTION);
1889:       assertEquals(39, Node.EMPTY_BLOCK);
1890:       assertEquals(2, Node.POST_FLAG);
1891:       assertEquals(57, Node.LAST_PROP);
1892:       assertEquals(47, Node.IS_DISPATCHER);
1893:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1894:       assertEquals(40, Node.ORIGINALNAME_PROP);
1895:       assertEquals(50, Node.FREE_CALL);
1896:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1897:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1898:       assertEquals(52, Node.LENGTH);
1899:       assertEquals(54, Node.SLASH_V);
1900:       assertEquals(8, Node.FLAG_NO_THROWS);
1901:       assertEquals(48, Node.DIRECTIVES);
1902:       assertEquals(57, Node.REFLECTED_OBJECT);
1903:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1904:       assertEquals(49, Node.DIRECT_EVAL);
1905:       assertEquals(1, Node.DECR_FLAG);
1906:       assertEquals(4095, Node.COLUMN_MASK);
1907:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1908:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1909:       assertEquals(32, Node.INCRDECR_PROP);
1910:       assertEquals(12, Node.COLUMN_BITS);
1911:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1912:       assertEquals(50, Node.FREE_CALL);
1913:       assertEquals(48, Node.DIRECTIVES);
1914:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1915:       assertEquals(40, Node.ORIGINALNAME_PROP);
1916:       assertEquals(4095, Node.COLUMN_MASK);
1917:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1918:       assertEquals(57, Node.LAST_PROP);
1919:       assertEquals(30, Node.VAR_ARGS_NAME);
1920:       assertEquals(49, Node.DIRECT_EVAL);
1921:       assertEquals(36, Node.QUOTED_PROP);
1922:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1923:       assertEquals(57, Node.REFLECTED_OBJECT);
1924:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1925:       assertEquals(8, Node.FLAG_NO_THROWS);
1926:       assertEquals(39, Node.EMPTY_BLOCK);
1927:       assertEquals(53, Node.INPUT_ID);
1928:       assertEquals(55, Node.INFERRED_FUNCTION);
1929:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1930:       assertEquals(29, Node.JSDOC_INFO_PROP);
1931:       assertEquals(52, Node.LENGTH);
1932:       assertEquals(47, Node.IS_DISPATCHER);
1933:       assertEquals(2, Node.POST_FLAG);
1934:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1935:       assertEquals(37, Node.OPT_ARG_NAME);
1936:       assertEquals(56, Node.CHANGE_TIME);
1937:       assertEquals(12, Node.COLUMN_BITS);
1938:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1939:       assertEquals(1, Node.DECR_FLAG);
1940:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1941:       assertEquals(54, Node.SLASH_V);
1942:       assertEquals(43, Node.IS_CONSTANT_NAME);
1943:       assertEquals(46, Node.IS_NAMESPACE);
1944:       assertEquals(32, Node.INCRDECR_PROP);
1945:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1946:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1947:       assertEquals(37, Node.OPT_ARG_NAME);
1948:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1949:       assertEquals(46, Node.IS_NAMESPACE);
1950:       assertEquals(56, Node.CHANGE_TIME);
1951:       assertEquals(32, Node.INCRDECR_PROP);
1952:       assertEquals(12, Node.COLUMN_BITS);
1953:       assertEquals(47, Node.IS_DISPATCHER);
1954:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1955:       assertEquals(2, Node.POST_FLAG);
1956:       assertEquals(30, Node.VAR_ARGS_NAME);
1957:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1958:       assertEquals(54, Node.SLASH_V);
1959:       assertEquals(43, Node.IS_CONSTANT_NAME);
1960:       assertEquals(1, Node.DECR_FLAG);
1961:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1962:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1963:       assertEquals(50, Node.FREE_CALL);
1964:       assertEquals(48, Node.DIRECTIVES);
1965:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1966:       assertEquals(39, Node.EMPTY_BLOCK);
1967:       assertEquals(40, Node.ORIGINALNAME_PROP);
1968:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1969:       assertEquals(4095, Node.COLUMN_MASK);
1970:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1971:       assertEquals(53, Node.INPUT_ID);
1972:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1973:       assertEquals(57, Node.LAST_PROP);
1974:       assertEquals(49, Node.DIRECT_EVAL);
1975:       assertEquals(55, Node.INFERRED_FUNCTION);
1976:       assertEquals(29, Node.JSDOC_INFO_PROP);
1977:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1978:       assertEquals(57, Node.REFLECTED_OBJECT);
1979:       assertEquals(36, Node.QUOTED_PROP);
1980:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1981:       assertEquals(52, Node.LENGTH);
1982:       assertEquals(8, Node.FLAG_NO_THROWS);
1983:       
1984:       node2.getProp(148);
1985:       assertSame(node0, node2);
1986:       assertSame(node0, node3);
1987:       assertNotSame(node0, node1);
1988:       assertNotSame(node1, node0);
1989:       assertNotSame(node1, node3);
1990:       assertNotSame(node1, node2);
1991:       assertSame(node2, node0);
1992:       assertSame(node2, node3);
1993:       assertNotSame(node2, node1);
1994:       assertFalse(node0.equals((Object)node1));
1995:       assertFalse(node1.equals((Object)node0));
1996:       assertFalse(node1.equals((Object)node3));
1997:       assertFalse(node1.equals((Object)node2));
1998:       assertFalse(node2.equals((Object)node1));
1999:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2000:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2001:       assertEquals(53, Node.INPUT_ID);
2002:       assertEquals(29, Node.JSDOC_INFO_PROP);
2003:       assertEquals(43, Node.IS_CONSTANT_NAME);
2004:       assertEquals(56, Node.CHANGE_TIME);
2005:       assertEquals(36, Node.QUOTED_PROP);
2006:       assertEquals(37, Node.OPT_ARG_NAME);
2007:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2008:       assertEquals(46, Node.IS_NAMESPACE);
2009:       assertEquals(55, Node.INFERRED_FUNCTION);
2010:       assertEquals(39, Node.EMPTY_BLOCK);
2011:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2012:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2013:       assertEquals(57, Node.LAST_PROP);
2014:       assertEquals(47, Node.IS_DISPATCHER);
2015:       assertEquals(2, Node.POST_FLAG);
2016:       assertEquals(30, Node.VAR_ARGS_NAME);
2017:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2018:       assertEquals(57, Node.REFLECTED_OBJECT);
2019:       assertEquals(52, Node.LENGTH);
2020:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2021:       assertEquals(40, Node.ORIGINALNAME_PROP);
2022:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2023:       assertEquals(8, Node.FLAG_NO_THROWS);
2024:       assertEquals(48, Node.DIRECTIVES);
2025:       assertEquals(49, Node.DIRECT_EVAL);
2026:       assertEquals(50, Node.FREE_CALL);
2027:       assertEquals(54, Node.SLASH_V);
2028:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2029:       assertEquals(4095, Node.COLUMN_MASK);
2030:       assertEquals(32, Node.INCRDECR_PROP);
2031:       assertEquals(1, Node.DECR_FLAG);
2032:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2033:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2034:       assertEquals(12, Node.COLUMN_BITS);
2035:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2036:       assertEquals(50, Node.FREE_CALL);
2037:       assertEquals(48, Node.DIRECTIVES);
2038:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2039:       assertEquals(40, Node.ORIGINALNAME_PROP);
2040:       assertEquals(4095, Node.COLUMN_MASK);
2041:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2042:       assertEquals(57, Node.LAST_PROP);
2043:       assertEquals(30, Node.VAR_ARGS_NAME);
2044:       assertEquals(49, Node.DIRECT_EVAL);
2045:       assertEquals(36, Node.QUOTED_PROP);
2046:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2047:       assertEquals(57, Node.REFLECTED_OBJECT);
2048:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2049:       assertEquals(8, Node.FLAG_NO_THROWS);
2050:       assertEquals(39, Node.EMPTY_BLOCK);
2051:       assertEquals(53, Node.INPUT_ID);
2052:       assertEquals(55, Node.INFERRED_FUNCTION);
2053:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2054:       assertEquals(29, Node.JSDOC_INFO_PROP);
2055:       assertEquals(52, Node.LENGTH);
2056:       assertEquals(47, Node.IS_DISPATCHER);
2057:       assertEquals(2, Node.POST_FLAG);
2058:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2059:       assertEquals(37, Node.OPT_ARG_NAME);
2060:       assertEquals(56, Node.CHANGE_TIME);
2061:       assertEquals(12, Node.COLUMN_BITS);
2062:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2063:       assertEquals(1, Node.DECR_FLAG);
2064:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2065:       assertEquals(54, Node.SLASH_V);
2066:       assertEquals(43, Node.IS_CONSTANT_NAME);
2067:       assertEquals(46, Node.IS_NAMESPACE);
2068:       assertEquals(32, Node.INCRDECR_PROP);
2069:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2070:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2071:       assertEquals(37, Node.OPT_ARG_NAME);
2072:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2073:       assertEquals(46, Node.IS_NAMESPACE);
2074:       assertEquals(56, Node.CHANGE_TIME);
2075:       assertEquals(32, Node.INCRDECR_PROP);
2076:       assertEquals(12, Node.COLUMN_BITS);
2077:       assertEquals(47, Node.IS_DISPATCHER);
2078:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2079:       assertEquals(2, Node.POST_FLAG);
2080:       assertEquals(30, Node.VAR_ARGS_NAME);
2081:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2082:       assertEquals(54, Node.SLASH_V);
2083:       assertEquals(43, Node.IS_CONSTANT_NAME);
2084:       assertEquals(1, Node.DECR_FLAG);
2085:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2086:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2087:       assertEquals(50, Node.FREE_CALL);
2088:       assertEquals(48, Node.DIRECTIVES);
2089:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2090:       assertEquals(39, Node.EMPTY_BLOCK);
2091:       assertEquals(40, Node.ORIGINALNAME_PROP);
2092:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2093:       assertEquals(4095, Node.COLUMN_MASK);
2094:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2095:       assertEquals(53, Node.INPUT_ID);
2096:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2097:       assertEquals(57, Node.LAST_PROP);
2098:       assertEquals(49, Node.DIRECT_EVAL);
2099:       assertEquals(55, Node.INFERRED_FUNCTION);
2100:       assertEquals(29, Node.JSDOC_INFO_PROP);
2101:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2102:       assertEquals(57, Node.REFLECTED_OBJECT);
2103:       assertEquals(36, Node.QUOTED_PROP);
2104:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2105:       assertEquals(52, Node.LENGTH);
2106:       assertEquals(8, Node.FLAG_NO_THROWS);
2107:       
2108:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
2109:       assertSame(node0, node2);
2110:       assertSame(node0, node3);
2111:       assertNotSame(node0, node1);
2112:       assertNotSame(node1, node0);
2113:       assertNotSame(node1, node3);
2114:       assertNotSame(node1, node2);
2115:       assertFalse(node0.equals((Object)node1));
2116:       assertFalse(node1.equals((Object)node0));
2117:       assertFalse(node1.equals((Object)node3));
2118:       assertFalse(node1.equals((Object)node2));
2119:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2120:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2121:       assertEquals(53, Node.INPUT_ID);
2122:       assertEquals(29, Node.JSDOC_INFO_PROP);
2123:       assertEquals(43, Node.IS_CONSTANT_NAME);
2124:       assertEquals(56, Node.CHANGE_TIME);
2125:       assertEquals(36, Node.QUOTED_PROP);
2126:       assertEquals(37, Node.OPT_ARG_NAME);
2127:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2128:       assertEquals(46, Node.IS_NAMESPACE);
2129:       assertEquals(55, Node.INFERRED_FUNCTION);
2130:       assertEquals(39, Node.EMPTY_BLOCK);
2131:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2132:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2133:       assertEquals(57, Node.LAST_PROP);
2134:       assertEquals(47, Node.IS_DISPATCHER);
2135:       assertEquals(2, Node.POST_FLAG);
2136:       assertEquals(30, Node.VAR_ARGS_NAME);
2137:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2138:       assertEquals(57, Node.REFLECTED_OBJECT);
2139:       assertEquals(52, Node.LENGTH);
2140:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2141:       assertEquals(40, Node.ORIGINALNAME_PROP);
2142:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2143:       assertEquals(8, Node.FLAG_NO_THROWS);
2144:       assertEquals(48, Node.DIRECTIVES);
2145:       assertEquals(49, Node.DIRECT_EVAL);
2146:       assertEquals(50, Node.FREE_CALL);
2147:       assertEquals(54, Node.SLASH_V);
2148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2149:       assertEquals(4095, Node.COLUMN_MASK);
2150:       assertEquals(32, Node.INCRDECR_PROP);
2151:       assertEquals(1, Node.DECR_FLAG);
2152:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2153:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2154:       assertEquals(12, Node.COLUMN_BITS);
2155:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2156:       assertEquals(50, Node.FREE_CALL);
2157:       assertEquals(48, Node.DIRECTIVES);
2158:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2159:       assertEquals(40, Node.ORIGINALNAME_PROP);
2160:       assertEquals(4095, Node.COLUMN_MASK);
2161:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2162:       assertEquals(57, Node.LAST_PROP);
2163:       assertEquals(30, Node.VAR_ARGS_NAME);
2164:       assertEquals(49, Node.DIRECT_EVAL);
2165:       assertEquals(36, Node.QUOTED_PROP);
2166:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2167:       assertEquals(57, Node.REFLECTED_OBJECT);
2168:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2169:       assertEquals(8, Node.FLAG_NO_THROWS);
2170:       assertEquals(39, Node.EMPTY_BLOCK);
2171:       assertEquals(53, Node.INPUT_ID);
2172:       assertEquals(55, Node.INFERRED_FUNCTION);
2173:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2174:       assertEquals(29, Node.JSDOC_INFO_PROP);
2175:       assertEquals(52, Node.LENGTH);
2176:       assertEquals(47, Node.IS_DISPATCHER);
2177:       assertEquals(2, Node.POST_FLAG);
2178:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2179:       assertEquals(37, Node.OPT_ARG_NAME);
2180:       assertEquals(56, Node.CHANGE_TIME);
2181:       assertEquals(12, Node.COLUMN_BITS);
2182:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2183:       assertEquals(1, Node.DECR_FLAG);
2184:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2185:       assertEquals(54, Node.SLASH_V);
2186:       assertEquals(43, Node.IS_CONSTANT_NAME);
2187:       assertEquals(46, Node.IS_NAMESPACE);
2188:       assertEquals(32, Node.INCRDECR_PROP);
2189:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2190:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2191:       
2192:       boolean boolean6 = node_NodeMismatch0.equals(", ...");
2193:       assertSame(node0, node2);
2194:       assertSame(node0, node3);
2195:       assertNotSame(node0, node1);
2196:       assertNotSame(node1, node0);
2197:       assertNotSame(node1, node3);
2198:       assertNotSame(node1, node2);
2199:       assertFalse(node0.equals((Object)node1));
2200:       assertFalse(node1.equals((Object)node0));
2201:       assertFalse(node1.equals((Object)node3));
2202:       assertFalse(node1.equals((Object)node2));
2203:       assertTrue(boolean6 == boolean2);
2204:       assertFalse(boolean6 == boolean0);
2205:       assertTrue(boolean6 == boolean3);
2206:       assertTrue(boolean6 == boolean5);
2207:       assertTrue(boolean6 == boolean1);
2208:       assertTrue(boolean6 == boolean4);
2209:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2210:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2211:       assertEquals(53, Node.INPUT_ID);
2212:       assertEquals(29, Node.JSDOC_INFO_PROP);
2213:       assertEquals(43, Node.IS_CONSTANT_NAME);
2214:       assertEquals(56, Node.CHANGE_TIME);
2215:       assertEquals(36, Node.QUOTED_PROP);
2216:       assertEquals(37, Node.OPT_ARG_NAME);
2217:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2218:       assertEquals(46, Node.IS_NAMESPACE);
2219:       assertEquals(55, Node.INFERRED_FUNCTION);
2220:       assertEquals(39, Node.EMPTY_BLOCK);
2221:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2222:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2223:       assertEquals(57, Node.LAST_PROP);
2224:       assertEquals(47, Node.IS_DISPATCHER);
2225:       assertEquals(2, Node.POST_FLAG);
2226:       assertEquals(30, Node.VAR_ARGS_NAME);
2227:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2228:       assertEquals(57, Node.REFLECTED_OBJECT);
2229:       assertEquals(52, Node.LENGTH);
2230:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2231:       assertEquals(40, Node.ORIGINALNAME_PROP);
2232:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2233:       assertEquals(8, Node.FLAG_NO_THROWS);
2234:       assertEquals(48, Node.DIRECTIVES);
2235:       assertEquals(49, Node.DIRECT_EVAL);
2236:       assertEquals(50, Node.FREE_CALL);
2237:       assertEquals(54, Node.SLASH_V);
2238:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2239:       assertEquals(4095, Node.COLUMN_MASK);
2240:       assertEquals(32, Node.INCRDECR_PROP);
2241:       assertEquals(1, Node.DECR_FLAG);
2242:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2244:       assertEquals(12, Node.COLUMN_BITS);
2245:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2246:       assertEquals(50, Node.FREE_CALL);
2247:       assertEquals(48, Node.DIRECTIVES);
2248:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2249:       assertEquals(40, Node.ORIGINALNAME_PROP);
2250:       assertEquals(4095, Node.COLUMN_MASK);
2251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2252:       assertEquals(57, Node.LAST_PROP);
2253:       assertEquals(30, Node.VAR_ARGS_NAME);
2254:       assertEquals(49, Node.DIRECT_EVAL);
2255:       assertEquals(36, Node.QUOTED_PROP);
2256:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2257:       assertEquals(57, Node.REFLECTED_OBJECT);
2258:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2259:       assertEquals(8, Node.FLAG_NO_THROWS);
2260:       assertEquals(39, Node.EMPTY_BLOCK);
2261:       assertEquals(53, Node.INPUT_ID);
2262:       assertEquals(55, Node.INFERRED_FUNCTION);
2263:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2264:       assertEquals(29, Node.JSDOC_INFO_PROP);
2265:       assertEquals(52, Node.LENGTH);
2266:       assertEquals(47, Node.IS_DISPATCHER);
2267:       assertEquals(2, Node.POST_FLAG);
2268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2269:       assertEquals(37, Node.OPT_ARG_NAME);
2270:       assertEquals(56, Node.CHANGE_TIME);
2271:       assertEquals(12, Node.COLUMN_BITS);
2272:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2273:       assertEquals(1, Node.DECR_FLAG);
2274:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2275:       assertEquals(54, Node.SLASH_V);
2276:       assertEquals(43, Node.IS_CONSTANT_NAME);
2277:       assertEquals(46, Node.IS_NAMESPACE);
2278:       assertEquals(32, Node.INCRDECR_PROP);
2279:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2280:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2281:       assertFalse(boolean6);
2282:       
2283:       boolean boolean7 = node3.isCatch();
2284:       assertSame(node0, node2);
2285:       assertSame(node0, node3);
2286:       assertNotSame(node0, node1);
2287:       assertSame(node3, node2);
2288:       assertNotSame(node3, node1);
2289:       assertSame(node3, node0);
2290:       assertNotSame(node1, node0);
2291:       assertNotSame(node1, node3);
2292:       assertNotSame(node1, node2);
2293:       assertFalse(node0.equals((Object)node1));
2294:       assertFalse(node3.equals((Object)node1));
2295:       assertFalse(node1.equals((Object)node0));
2296:       assertFalse(node1.equals((Object)node3));
2297:       assertFalse(node1.equals((Object)node2));
2298:       assertTrue(boolean7 == boolean5);
2299:       assertTrue(boolean7 == boolean3);
2300:       assertTrue(boolean7 == boolean4);
2301:       assertTrue(boolean7 == boolean1);
2302:       assertTrue(boolean7 == boolean6);
2303:       assertFalse(boolean7 == boolean0);
2304:       assertTrue(boolean7 == boolean2);
2305:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2306:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2307:       assertEquals(53, Node.INPUT_ID);
2308:       assertEquals(29, Node.JSDOC_INFO_PROP);
2309:       assertEquals(43, Node.IS_CONSTANT_NAME);
2310:       assertEquals(56, Node.CHANGE_TIME);
2311:       assertEquals(36, Node.QUOTED_PROP);
2312:       assertEquals(37, Node.OPT_ARG_NAME);
2313:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2314:       assertEquals(46, Node.IS_NAMESPACE);
2315:       assertEquals(55, Node.INFERRED_FUNCTION);
2316:       assertEquals(39, Node.EMPTY_BLOCK);
2317:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2318:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2319:       assertEquals(57, Node.LAST_PROP);
2320:       assertEquals(47, Node.IS_DISPATCHER);
2321:       assertEquals(2, Node.POST_FLAG);
2322:       assertEquals(30, Node.VAR_ARGS_NAME);
2323:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2324:       assertEquals(57, Node.REFLECTED_OBJECT);
2325:       assertEquals(52, Node.LENGTH);
2326:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2327:       assertEquals(40, Node.ORIGINALNAME_PROP);
2328:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2329:       assertEquals(8, Node.FLAG_NO_THROWS);
2330:       assertEquals(48, Node.DIRECTIVES);
2331:       assertEquals(49, Node.DIRECT_EVAL);
2332:       assertEquals(50, Node.FREE_CALL);
2333:       assertEquals(54, Node.SLASH_V);
2334:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2335:       assertEquals(4095, Node.COLUMN_MASK);
2336:       assertEquals(32, Node.INCRDECR_PROP);
2337:       assertEquals(1, Node.DECR_FLAG);
2338:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2339:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2340:       assertEquals(12, Node.COLUMN_BITS);
2341:       assertEquals(29, Node.JSDOC_INFO_PROP);
2342:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2343:       assertEquals(53, Node.INPUT_ID);
2344:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2345:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2346:       assertEquals(37, Node.OPT_ARG_NAME);
2347:       assertEquals(36, Node.QUOTED_PROP);
2348:       assertEquals(46, Node.IS_NAMESPACE);
2349:       assertEquals(43, Node.IS_CONSTANT_NAME);
2350:       assertEquals(56, Node.CHANGE_TIME);
2351:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2352:       assertEquals(30, Node.VAR_ARGS_NAME);
2353:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2354:       assertEquals(55, Node.INFERRED_FUNCTION);
2355:       assertEquals(39, Node.EMPTY_BLOCK);
2356:       assertEquals(2, Node.POST_FLAG);
2357:       assertEquals(57, Node.LAST_PROP);
2358:       assertEquals(47, Node.IS_DISPATCHER);
2359:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2360:       assertEquals(40, Node.ORIGINALNAME_PROP);
2361:       assertEquals(50, Node.FREE_CALL);
2362:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2363:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2364:       assertEquals(52, Node.LENGTH);
2365:       assertEquals(54, Node.SLASH_V);
2366:       assertEquals(8, Node.FLAG_NO_THROWS);
2367:       assertEquals(48, Node.DIRECTIVES);
2368:       assertEquals(57, Node.REFLECTED_OBJECT);
2369:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2370:       assertEquals(49, Node.DIRECT_EVAL);
2371:       assertEquals(1, Node.DECR_FLAG);
2372:       assertEquals(4095, Node.COLUMN_MASK);
2373:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2374:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2375:       assertEquals(32, Node.INCRDECR_PROP);
2376:       assertEquals(12, Node.COLUMN_BITS);
2377:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2378:       assertEquals(50, Node.FREE_CALL);
2379:       assertEquals(48, Node.DIRECTIVES);
2380:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2381:       assertEquals(40, Node.ORIGINALNAME_PROP);
2382:       assertEquals(4095, Node.COLUMN_MASK);
2383:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2384:       assertEquals(57, Node.LAST_PROP);
2385:       assertEquals(30, Node.VAR_ARGS_NAME);
2386:       assertEquals(49, Node.DIRECT_EVAL);
2387:       assertEquals(36, Node.QUOTED_PROP);
2388:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2389:       assertEquals(57, Node.REFLECTED_OBJECT);
2390:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2391:       assertEquals(8, Node.FLAG_NO_THROWS);
2392:       assertEquals(39, Node.EMPTY_BLOCK);
2393:       assertEquals(53, Node.INPUT_ID);
2394:       assertEquals(55, Node.INFERRED_FUNCTION);
2395:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2396:       assertEquals(29, Node.JSDOC_INFO_PROP);
2397:       assertEquals(52, Node.LENGTH);
2398:       assertEquals(47, Node.IS_DISPATCHER);
2399:       assertEquals(2, Node.POST_FLAG);
2400:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2401:       assertEquals(37, Node.OPT_ARG_NAME);
2402:       assertEquals(56, Node.CHANGE_TIME);
2403:       assertEquals(12, Node.COLUMN_BITS);
2404:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2405:       assertEquals(1, Node.DECR_FLAG);
2406:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2407:       assertEquals(54, Node.SLASH_V);
2408:       assertEquals(43, Node.IS_CONSTANT_NAME);
2409:       assertEquals(46, Node.IS_NAMESPACE);
2410:       assertEquals(32, Node.INCRDECR_PROP);
2411:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2412:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2413:       assertFalse(boolean7);
2414:       
2415:       boolean boolean8 = node1.hasChild(node2);
2416:       assertSame(node0, node2);
2417:       assertSame(node0, node3);
2418:       assertNotSame(node0, node1);
2419:       assertNotSame(node1, node0);
2420:       assertNotSame(node1, node3);
2421:       assertNotSame(node1, node2);
2422:       assertSame(node2, node0);
2423:       assertSame(node2, node3);
2424:       assertNotSame(node2, node1);
2425:       assertFalse(node0.equals((Object)node1));
2426:       assertFalse(node1.equals((Object)node0));
2427:       assertFalse(node1.equals((Object)node3));
2428:       assertFalse(node1.equals((Object)node2));
2429:       assertFalse(node2.equals((Object)node1));
2430:       assertTrue(boolean8 == boolean7);
2431:       assertTrue(boolean8 == boolean5);
2432:       assertTrue(boolean8 == boolean1);
2433:       assertTrue(boolean8 == boolean3);
2434:       assertTrue(boolean8 == boolean6);
2435:       assertTrue(boolean8 == boolean4);
2436:       assertTrue(boolean8 == boolean2);
2437:       assertFalse(boolean8 == boolean0);
2438:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2439:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2440:       assertEquals(53, Node.INPUT_ID);
2441:       assertEquals(29, Node.JSDOC_INFO_PROP);
2442:       assertEquals(43, Node.IS_CONSTANT_NAME);
2443:       assertEquals(56, Node.CHANGE_TIME);
2444:       assertEquals(36, Node.QUOTED_PROP);
2445:       assertEquals(37, Node.OPT_ARG_NAME);
2446:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2447:       assertEquals(46, Node.IS_NAMESPACE);
2448:       assertEquals(55, Node.INFERRED_FUNCTION);
2449:       assertEquals(39, Node.EMPTY_BLOCK);
2450:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2451:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2452:       assertEquals(57, Node.LAST_PROP);
2453:       assertEquals(47, Node.IS_DISPATCHER);
2454:       assertEquals(2, Node.POST_FLAG);
2455:       assertEquals(30, Node.VAR_ARGS_NAME);
2456:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2457:       assertEquals(57, Node.REFLECTED_OBJECT);
2458:       assertEquals(52, Node.LENGTH);
2459:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2460:       assertEquals(40, Node.ORIGINALNAME_PROP);
2461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2462:       assertEquals(8, Node.FLAG_NO_THROWS);
2463:       assertEquals(48, Node.DIRECTIVES);
2464:       assertEquals(49, Node.DIRECT_EVAL);
2465:       assertEquals(50, Node.FREE_CALL);
2466:       assertEquals(54, Node.SLASH_V);
2467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2468:       assertEquals(4095, Node.COLUMN_MASK);
2469:       assertEquals(32, Node.INCRDECR_PROP);
2470:       assertEquals(1, Node.DECR_FLAG);
2471:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2472:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2473:       assertEquals(12, Node.COLUMN_BITS);
2474:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2475:       assertEquals(50, Node.FREE_CALL);
2476:       assertEquals(48, Node.DIRECTIVES);
2477:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2478:       assertEquals(40, Node.ORIGINALNAME_PROP);
2479:       assertEquals(4095, Node.COLUMN_MASK);
2480:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2481:       assertEquals(57, Node.LAST_PROP);
2482:       assertEquals(30, Node.VAR_ARGS_NAME);
2483:       assertEquals(49, Node.DIRECT_EVAL);
2484:       assertEquals(36, Node.QUOTED_PROP);
2485:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2486:       assertEquals(57, Node.REFLECTED_OBJECT);
2487:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2488:       assertEquals(8, Node.FLAG_NO_THROWS);
2489:       assertEquals(39, Node.EMPTY_BLOCK);
2490:       assertEquals(53, Node.INPUT_ID);
2491:       assertEquals(55, Node.INFERRED_FUNCTION);
2492:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2493:       assertEquals(29, Node.JSDOC_INFO_PROP);
2494:       assertEquals(52, Node.LENGTH);
2495:       assertEquals(47, Node.IS_DISPATCHER);
2496:       assertEquals(2, Node.POST_FLAG);
2497:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2498:       assertEquals(37, Node.OPT_ARG_NAME);
2499:       assertEquals(56, Node.CHANGE_TIME);
2500:       assertEquals(12, Node.COLUMN_BITS);
2501:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2502:       assertEquals(1, Node.DECR_FLAG);
2503:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2504:       assertEquals(54, Node.SLASH_V);
2505:       assertEquals(43, Node.IS_CONSTANT_NAME);
2506:       assertEquals(46, Node.IS_NAMESPACE);
2507:       assertEquals(32, Node.INCRDECR_PROP);
2508:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2509:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2510:       assertEquals(37, Node.OPT_ARG_NAME);
2511:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
2512:       assertEquals(46, Node.IS_NAMESPACE);
2513:       assertEquals(56, Node.CHANGE_TIME);
2514:       assertEquals(32, Node.INCRDECR_PROP);
2515:       assertEquals(12, Node.COLUMN_BITS);
2516:       assertEquals(47, Node.IS_DISPATCHER);
2517:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
2518:       assertEquals(2, Node.POST_FLAG);
2519:       assertEquals(30, Node.VAR_ARGS_NAME);
2520:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
2521:       assertEquals(54, Node.SLASH_V);
2522:       assertEquals(43, Node.IS_CONSTANT_NAME);
2523:       assertEquals(1, Node.DECR_FLAG);
2524:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
2525:       assertEquals(51, Node.STATIC_SOURCE_FILE);
2526:       assertEquals(50, Node.FREE_CALL);
2527:       assertEquals(48, Node.DIRECTIVES);
2528:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
2529:       assertEquals(39, Node.EMPTY_BLOCK);
2530:       assertEquals(40, Node.ORIGINALNAME_PROP);
2531:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
2532:       assertEquals(4095, Node.COLUMN_MASK);
2533:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
2534:       assertEquals(53, Node.INPUT_ID);
2535:       assertEquals(15, Node.NO_SIDE_EFFECTS);
2536:       assertEquals(57, Node.LAST_PROP);
2537:       assertEquals(49, Node.DIRECT_EVAL);
2538:       assertEquals(55, Node.INFERRED_FUNCTION);
2539:       assertEquals(29, Node.JSDOC_INFO_PROP);
2540:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
2541:       assertEquals(57, Node.REFLECTED_OBJECT);
2542:       assertEquals(36, Node.QUOTED_PROP);
2543:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
2544:       assertEquals(52, Node.LENGTH);
2545:       assertEquals(8, Node.FLAG_NO_THROWS);
2546:       assertFalse(boolean8);
2547:   }
2548: }
RegularFileObject[/tmp/EvoSuite_99_1628256079597/com/google/javascript/rhino/Node_99_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:20 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_99_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_99_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_99_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:20.481 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newNumber(0.0, 0, 0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());

double double0 = node0.getDouble();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0.0, double0, 0.01);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());

node0.setSourceFileForTesting(", ...");
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());

boolean boolean0 = node0.mayMutateGlobalStateOrThrow();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertTrue(boolean0);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());

String string0 = node0.toStringTree();
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());

String string1 = node0.toStringTree();
assertTrue(string1.equals((Object)string0));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());

Node node1 = Node.newNumber((double) 2, 0, 1619);
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(1619, node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertEquals(1619, node1.getCharno());

Node node2 = node0.copyInformationFromForTree(node1);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());
assertFalse(node1.isNE());
assertFalse(node1.isGetterDef());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDelProp());
assertFalse(node1.isIf());
assertFalse(node1.isSwitch());
assertFalse(node1.isDebugger());
assertFalse(node1.isVoid());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertFalse(node1.isFor());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertTrue(node1.isNumber());
assertFalse(node1.isTry());
assertFalse(node1.isParamList());
assertFalse(node1.isComma());
assertFalse(node1.isNull());
assertFalse(node1.isBreak());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isCall());
assertFalse(node1.isStringKey());
assertFalse(node1.isName());
assertFalse(node1.isTrue());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertEquals(1619, node1.getSourcePosition());
assertFalse(node1.isVar());
assertFalse(node1.isDo());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isAssignAdd());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isOr());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertFalse(node1.isLabelName());
assertFalse(node1.isExprResult());
assertFalse(node1.isBlock());
assertFalse(node1.isScript());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.hasOneChild());
assertEquals(39, node1.getType());
assertFalse(node1.isReturn());
assertFalse(node1.isWhile());
assertFalse(node1.isThis());
assertFalse(node1.isSetterDef());
assertEquals(0, node1.getLineno());
assertFalse(node1.isGetProp());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isFalse());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isCatch());
assertFalse(node1.isFunction());
assertFalse(node1.isInc());
assertFalse(node1.isContinue());
assertFalse(node1.isThrow());
assertEquals(1619, node1.getCharno());
assertFalse(node2.isInstanceOf());
assertFalse(node2.isObjectLit());
assertFalse(node2.isThis());
assertFalse(node2.isNot());
assertFalse(node2.isComma());
assertFalse(node2.isWith());
assertFalse(node2.isBreak());
assertFalse(node2.isExprResult());
assertFalse(node2.isAnd());
assertFalse(node2.isCast());
assertFalse(node2.isFalse());
assertEquals(0, node2.getCharno());
assertFalse(node2.isThrow());
assertFalse(node2.isInc());
assertFalse(node2.isReturn());
assertFalse(node2.isContinue());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isOr());
assertFalse(node2.isDelProp());
assertFalse(node2.isGetElem());
assertFalse(node2.isDebugger());
assertFalse(node2.isAssign());
assertFalse(node2.isString());
assertFalse(node2.isWhile());
assertFalse(node2.hasChildren());
assertFalse(node2.isGetProp());
assertTrue(node2.isNumber());
assertEquals(0, node2.getLineno());
assertFalse(node2.isCatch());
assertEquals(0, node2.getChildCount());
assertEquals(0, node2.getSourcePosition());
assertFalse(node2.isNull());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isVoid());
assertFalse(node2.isCall());
assertFalse(node2.isName());
assertFalse(node2.isAdd());
assertFalse(node2.isVar());
assertFalse(node2.isTrue());
assertFalse(node2.isFunction());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isEmpty());
assertFalse(node2.isSetterDef());
assertFalse(node2.isNew());
assertFalse(node2.isDo());
assertFalse(node2.isIn());
assertFalse(node2.isAssignAdd());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isLabel());
assertFalse(node2.isIf());
assertFalse(node2.isNE());
assertFalse(node2.isSwitch());
assertFalse(node2.isArrayLit());
assertFalse(node2.isLabelName());
assertFalse(node2.isHook());
assertFalse(node2.isBlock());
assertFalse(node2.isRegExp());
assertFalse(node2.isGetterDef());
assertEquals(39, node2.getType());
assertFalse(node2.isFor());
assertFalse(node2.isScript());
assertFalse(node2.isCase());
assertFalse(node2.isTry());
assertFalse(node2.hasOneChild());

InputId inputId0 = new InputId("T^vUBYU Z6?5p");
assertEquals("T^vUBYU Z6?5p", inputId0.getIdName());

String string2 = inputId0.toString();
assertFalse(string2.equals((Object)string0));
assertFalse(string2.equals((Object)string1));
assertEquals("InputId: T^vUBYU Z6?5p", string2);
assertEquals("T^vUBYU Z6?5p", inputId0.getIdName());

String string3 = inputId0.toString();
assertFalse(string3.equals((Object)string1));
assertFalse(string3.equals((Object)string0));
assertTrue(string3.equals((Object)string2));
assertEquals("InputId: T^vUBYU Z6?5p", string3);
assertEquals("T^vUBYU Z6?5p", inputId0.getIdName());

node0.setInputId(inputId0);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());
assertEquals("T^vUBYU Z6?5p", inputId0.getIdName());

boolean boolean1 = node0.wasEmptyNode();
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean1 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean1);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());

boolean boolean2 = node0.hasChildren();
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean2);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());
assertFalse(node0.isOr());
assertFalse(node0.isGetterDef());
assertFalse(node0.isScript());
assertFalse(node0.isEmpty());
assertFalse(node0.isDo());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isSwitch());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCall());
assertFalse(node0.isName());
assertEquals(0, node0.getSourcePosition());
assertFalse(node0.isNull());
assertFalse(node0.isVar());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isSetterDef());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertEquals(39, node0.getType());
assertFalse(node0.isReturn());
assertFalse(node0.isWhile());
assertFalse(node0.isVoid());
assertFalse(node0.isBlock());
assertFalse(node0.isRegExp());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCatch());
assertFalse(node0.isAssign());
assertFalse(node0.isIf());
assertFalse(node0.hasChildren());
assertFalse(node0.isNE());
assertFalse(node0.isDebugger());
assertEquals(0, node0.getCharno());
assertTrue(node0.isNumber());
assertFalse(node0.isIn());
assertFalse(node0.isContinue());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertFalse(node0.isNot());
assertFalse(node0.isFunction());
assertEquals(0, node0.getLineno());
assertFalse(node0.isCast());

Iterable<Node> iterable0 = node0.children();
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(iterable0.contains(node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isGetProp());
assertFalse(node0.isInc());
assertFalse(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isExprResult());
assertFalse(node0.isThis());
assertFalse(node0.isComma());
assertFalse(node0.isBreak());
assertFalse(node0.isWith());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isGetElem());
assertFalse(node0.isArrayLit());
assertFalse(node0.isLabelName());
assertFalse(node0.hasOneChild());
assertFalse(node0.isDelProp());
assertFalse(node0.isFor());
assertFalse(node0.isTrue());
assertFalse(node0.isTry());

node0.putIntProp((-3510), 0);
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean3 = node0.isBlock();
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(boolean3 == boolean0);
assertTrue(boolean3 == boolean2);
assertTrue(boolean3 == boolean1);
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean3);

node0.getStaticSourceFile();
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);

boolean boolean4 = node0.isDelProp();
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean4 == boolean2);
assertFalse(boolean4 == boolean0);
assertTrue(boolean4 == boolean3);
assertTrue(boolean4 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean4);

boolean boolean5 = node0.isExprResult();
assertSame(node0, node2);
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertTrue(boolean5 == boolean3);
assertTrue(boolean5 == boolean4);
assertTrue(boolean5 == boolean2);
assertFalse(boolean5 == boolean0);
assertTrue(boolean5 == boolean1);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertFalse(boolean5);

Node node3 = node0.useSourceInfoFromForTree(node1);
assertSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertSame(node3, node2);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

node3.addChildrenToFront(node2);
assertSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertSame(node3, node2);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

node2.getProp(148);
assertSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeTypeAwareEqualsImpl(node0);
assertSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);

boolean boolean6 = node_NodeMismatch0.equals(", ...");
assertSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean6 == boolean2);
assertFalse(boolean6 == boolean0);
assertTrue(boolean6 == boolean3);
assertTrue(boolean6 == boolean5);
assertTrue(boolean6 == boolean1);
assertTrue(boolean6 == boolean4);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean6);

boolean boolean7 = node3.isCatch();
assertSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertSame(node3, node2);
assertNotSame(node3, node1);
assertSame(node3, node0);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertFalse(node0.equals((Object)node1));
assertFalse(node3.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertTrue(boolean7 == boolean5);
assertTrue(boolean7 == boolean3);
assertTrue(boolean7 == boolean4);
assertTrue(boolean7 == boolean1);
assertTrue(boolean7 == boolean6);
assertFalse(boolean7 == boolean0);
assertTrue(boolean7 == boolean2);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(54, Node.SLASH_V);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertFalse(boolean7);

boolean boolean8 = node1.hasChild(node2);
assertSame(node0, node2);
assertSame(node0, node3);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertNotSame(node1, node3);
assertNotSame(node1, node2);
assertSame(node2, node0);
assertSame(node2, node3);
assertNotSame(node2, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node3));
assertFalse(node1.equals((Object)node2));
assertFalse(node2.equals((Object)node1));
assertTrue(boolean8 == boolean7);
assertTrue(boolean8 == boolean5);
assertTrue(boolean8 == boolean1);
assertTrue(boolean8 == boolean3);
assertTrue(boolean8 == boolean6);
assertTrue(boolean8 == boolean4);
assertTrue(boolean8 == boolean2);
assertFalse(boolean8 == boolean0);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(53, Node.INPUT_ID);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(52, Node.LENGTH);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(50, Node.FREE_CALL);
assertEquals(54, Node.SLASH_V);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(52, Node.LENGTH);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(1, Node.DECR_FLAG);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(50, Node.FREE_CALL);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(53, Node.INPUT_ID);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(8, Node.FLAG_NO_THROWS);
assertFalse(boolean8);


[MASTER] 13:21:22.416 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_111_1628256082315/com/google/javascript/rhino/Node_111_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_111_1628256082315/com/google/javascript/rhino/Node_111_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:22.416 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:22.416 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:22.417 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 361
[MASTER] 13:21:22.420 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_111_1628256082315/com/google/javascript/rhino/Node_111_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:22 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import com.google.javascript.rhino.Node;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_111_tmp__ESTest extends Node_111_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString("5aW?n/I=");
22:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
23:       assertEquals(50, Node.FREE_CALL);
24:       assertEquals(39, Node.EMPTY_BLOCK);
25:       assertEquals(40, Node.ORIGINALNAME_PROP);
26:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
27:       assertEquals(8, Node.FLAG_NO_THROWS);
28:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
29:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
30:       assertEquals(57, Node.LAST_PROP);
31:       assertEquals(49, Node.DIRECT_EVAL);
32:       assertEquals(36, Node.QUOTED_PROP);
33:       assertEquals(15, Node.NO_SIDE_EFFECTS);
34:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
35:       assertEquals(55, Node.INFERRED_FUNCTION);
36:       assertEquals(4095, Node.COLUMN_MASK);
37:       assertEquals(52, Node.LENGTH);
38:       assertEquals(57, Node.REFLECTED_OBJECT);
39:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
40:       assertEquals(37, Node.OPT_ARG_NAME);
41:       assertEquals(48, Node.DIRECTIVES);
42:       assertEquals(56, Node.CHANGE_TIME);
43:       assertEquals(29, Node.JSDOC_INFO_PROP);
44:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
45:       assertEquals(47, Node.IS_DISPATCHER);
46:       assertEquals(2, Node.POST_FLAG);
47:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
48:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
49:       assertEquals(32, Node.INCRDECR_PROP);
50:       assertEquals(12, Node.COLUMN_BITS);
51:       assertEquals(53, Node.INPUT_ID);
52:       assertEquals(1, Node.DECR_FLAG);
53:       assertEquals(30, Node.VAR_ARGS_NAME);
54:       assertEquals(46, Node.IS_NAMESPACE);
55:       assertEquals(51, Node.STATIC_SOURCE_FILE);
56:       assertEquals(54, Node.SLASH_V);
57:       assertEquals(43, Node.IS_CONSTANT_NAME);
58:       assertEquals((-1), node0.getSourcePosition());
59:       assertFalse(node0.hasChildren());
60:       assertFalse(node0.isLabelName());
61:       assertFalse(node0.isAssignAdd());
62:       assertEquals((-1), node0.getLineno());
63:       assertFalse(node0.hasMoreThanOneChild());
64:       assertFalse(node0.isCast());
65:       assertFalse(node0.isContinue());
66:       assertFalse(node0.isGetElem());
67:       assertFalse(node0.isAssign());
68:       assertFalse(node0.isReturn());
69:       assertFalse(node0.isLabel());
70:       assertFalse(node0.isDec());
71:       assertFalse(node0.isTypeOf());
72:       assertFalse(node0.isBlock());
73:       assertFalse(node0.isScript());
74:       assertFalse(node0.isWhile());
75:       assertFalse(node0.hasOneChild());
76:       assertTrue(node0.isString());
77:       assertFalse(node0.isAnd());
78:       assertFalse(node0.isStringKey());
79:       assertFalse(node0.isNot());
80:       assertFalse(node0.isNumber());
81:       assertFalse(node0.isObjectLit());
82:       assertFalse(node0.isSetterDef());
83:       assertFalse(node0.isThis());
84:       assertFalse(node0.isCatch());
85:       assertFalse(node0.isThrow());
86:       assertFalse(node0.isInstanceOf());
87:       assertFalse(node0.isHook());
88:       assertEquals(40, node0.getType());
89:       assertFalse(node0.isWith());
90:       assertFalse(node0.isFalse());
91:       assertFalse(node0.isRegExp());
92:       assertFalse(node0.isInc());
93:       assertFalse(node0.isIn());
94:       assertFalse(node0.isNE());
95:       assertFalse(node0.isIf());
96:       assertFalse(node0.isDelProp());
97:       assertFalse(node0.isArrayLit());
98:       assertFalse(node0.isFor());
99:       assertFalse(node0.isFunction());
100:       assertFalse(node0.isSwitch());
101:       assertFalse(node0.isDebugger());
102:       assertEquals((-1), node0.getCharno());
103:       assertFalse(node0.isTry());
104:       assertFalse(node0.isCase());
105:       assertFalse(node0.isGetterDef());
106:       assertFalse(node0.isComma());
107:       assertFalse(node0.isParamList());
108:       assertFalse(node0.isBreak());
109:       assertFalse(node0.isGetProp());
110:       assertFalse(node0.isNull());
111:       assertFalse(node0.isName());
112:       assertFalse(node0.isVar());
113:       assertFalse(node0.isCall());
114:       assertEquals(0, node0.getChildCount());
115:       assertFalse(node0.isTrue());
116:       assertFalse(node0.isExprResult());
117:       assertFalse(node0.isAdd());
118:       assertFalse(node0.isDo());
119:       assertFalse(node0.isNew());
120:       assertFalse(node0.isDefaultCase());
121:       assertFalse(node0.isVoid());
122:       assertFalse(node0.isEmpty());
123:       assertFalse(node0.isOr());
124:       assertNotNull(node0);
125:       
126:       Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
127:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
128:       assertEquals(0, node_SideEffectFlags0.valueOf());
129:       assertNotNull(node_SideEffectFlags0);
130:       
131:       Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
132:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
133:       assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
134:       assertEquals(31, node_SideEffectFlags0.valueOf());
135:       assertFalse(node_SideEffectFlags0.areAllFlagsSet());
136:       assertFalse(node_SideEffectFlags1.areAllFlagsSet());
137:       assertEquals(31, node_SideEffectFlags1.valueOf());
138:       assertNotNull(node_SideEffectFlags1);
139:       
140:       Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
141:       assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
142:       assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
143:       assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
144:       assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
145:       assertTrue(node_SideEffectFlags0.areAllFlagsSet());
146:       assertEquals(0, node_SideEffectFlags0.valueOf());
147:       assertTrue(node_SideEffectFlags2.areAllFlagsSet());
148:       assertEquals(0, node_SideEffectFlags2.valueOf());
149:       assertNotNull(node_SideEffectFlags2);
150:       
151:       String string0 = node0.getQualifiedName();
152:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
153:       assertEquals(50, Node.FREE_CALL);
154:       assertEquals(39, Node.EMPTY_BLOCK);
155:       assertEquals(40, Node.ORIGINALNAME_PROP);
156:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
157:       assertEquals(8, Node.FLAG_NO_THROWS);
158:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
159:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
160:       assertEquals(57, Node.LAST_PROP);
161:       assertEquals(49, Node.DIRECT_EVAL);
162:       assertEquals(36, Node.QUOTED_PROP);
163:       assertEquals(15, Node.NO_SIDE_EFFECTS);
164:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
165:       assertEquals(55, Node.INFERRED_FUNCTION);
166:       assertEquals(4095, Node.COLUMN_MASK);
167:       assertEquals(52, Node.LENGTH);
168:       assertEquals(57, Node.REFLECTED_OBJECT);
169:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
170:       assertEquals(37, Node.OPT_ARG_NAME);
171:       assertEquals(48, Node.DIRECTIVES);
172:       assertEquals(56, Node.CHANGE_TIME);
173:       assertEquals(29, Node.JSDOC_INFO_PROP);
174:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
175:       assertEquals(47, Node.IS_DISPATCHER);
176:       assertEquals(2, Node.POST_FLAG);
177:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
178:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
179:       assertEquals(32, Node.INCRDECR_PROP);
180:       assertEquals(12, Node.COLUMN_BITS);
181:       assertEquals(53, Node.INPUT_ID);
182:       assertEquals(1, Node.DECR_FLAG);
183:       assertEquals(30, Node.VAR_ARGS_NAME);
184:       assertEquals(46, Node.IS_NAMESPACE);
185:       assertEquals(51, Node.STATIC_SOURCE_FILE);
186:       assertEquals(54, Node.SLASH_V);
187:       assertEquals(43, Node.IS_CONSTANT_NAME);
188:       assertEquals((-1), node0.getSourcePosition());
189:       assertFalse(node0.hasChildren());
190:       assertFalse(node0.isLabelName());
191:       assertFalse(node0.isAssignAdd());
192:       assertEquals((-1), node0.getLineno());
193:       assertFalse(node0.hasMoreThanOneChild());
194:       assertFalse(node0.isCast());
195:       assertFalse(node0.isContinue());
196:       assertFalse(node0.isGetElem());
197:       assertFalse(node0.isAssign());
198:       assertFalse(node0.isReturn());
199:       assertFalse(node0.isLabel());
200:       assertFalse(node0.isDec());
201:       assertFalse(node0.isTypeOf());
202:       assertFalse(node0.isBlock());
203:       assertFalse(node0.isScript());
204:       assertFalse(node0.isWhile());
205:       assertFalse(node0.hasOneChild());
206:       assertTrue(node0.isString());
207:       assertFalse(node0.isAnd());
208:       assertFalse(node0.isStringKey());
209:       assertFalse(node0.isNot());
210:       assertFalse(node0.isNumber());
211:       assertFalse(node0.isObjectLit());
212:       assertFalse(node0.isSetterDef());
213:       assertFalse(node0.isThis());
214:       assertFalse(node0.isCatch());
215:       assertFalse(node0.isThrow());
216:       assertFalse(node0.isInstanceOf());
217:       assertFalse(node0.isHook());
218:       assertEquals(40, node0.getType());
219:       assertFalse(node0.isWith());
220:       assertFalse(node0.isFalse());
221:       assertFalse(node0.isRegExp());
222:       assertFalse(node0.isInc());
223:       assertFalse(node0.isIn());
224:       assertFalse(node0.isNE());
225:       assertFalse(node0.isIf());
226:       assertFalse(node0.isDelProp());
227:       assertFalse(node0.isArrayLit());
228:       assertFalse(node0.isFor());
229:       assertFalse(node0.isFunction());
230:       assertFalse(node0.isSwitch());
231:       assertFalse(node0.isDebugger());
232:       assertEquals((-1), node0.getCharno());
233:       assertFalse(node0.isTry());
234:       assertFalse(node0.isCase());
235:       assertFalse(node0.isGetterDef());
236:       assertFalse(node0.isComma());
237:       assertFalse(node0.isParamList());
238:       assertFalse(node0.isBreak());
239:       assertFalse(node0.isGetProp());
240:       assertFalse(node0.isNull());
241:       assertFalse(node0.isName());
242:       assertFalse(node0.isVar());
243:       assertFalse(node0.isCall());
244:       assertEquals(0, node0.getChildCount());
245:       assertFalse(node0.isTrue());
246:       assertFalse(node0.isExprResult());
247:       assertFalse(node0.isAdd());
248:       assertFalse(node0.isDo());
249:       assertFalse(node0.isNew());
250:       assertFalse(node0.isDefaultCase());
251:       assertFalse(node0.isVoid());
252:       assertFalse(node0.isEmpty());
253:       assertFalse(node0.isOr());
254:       assertNull(string0);
255:       
256:       node0.putIntProp(488, 1341);
257:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
258:       assertEquals(50, Node.FREE_CALL);
259:       assertEquals(39, Node.EMPTY_BLOCK);
260:       assertEquals(40, Node.ORIGINALNAME_PROP);
261:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
262:       assertEquals(8, Node.FLAG_NO_THROWS);
263:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
264:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
265:       assertEquals(57, Node.LAST_PROP);
266:       assertEquals(49, Node.DIRECT_EVAL);
267:       assertEquals(36, Node.QUOTED_PROP);
268:       assertEquals(15, Node.NO_SIDE_EFFECTS);
269:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
270:       assertEquals(55, Node.INFERRED_FUNCTION);
271:       assertEquals(4095, Node.COLUMN_MASK);
272:       assertEquals(52, Node.LENGTH);
273:       assertEquals(57, Node.REFLECTED_OBJECT);
274:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
275:       assertEquals(37, Node.OPT_ARG_NAME);
276:       assertEquals(48, Node.DIRECTIVES);
277:       assertEquals(56, Node.CHANGE_TIME);
278:       assertEquals(29, Node.JSDOC_INFO_PROP);
279:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
280:       assertEquals(47, Node.IS_DISPATCHER);
281:       assertEquals(2, Node.POST_FLAG);
282:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
283:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
284:       assertEquals(32, Node.INCRDECR_PROP);
285:       assertEquals(12, Node.COLUMN_BITS);
286:       assertEquals(53, Node.INPUT_ID);
287:       assertEquals(1, Node.DECR_FLAG);
288:       assertEquals(30, Node.VAR_ARGS_NAME);
289:       assertEquals(46, Node.IS_NAMESPACE);
290:       assertEquals(51, Node.STATIC_SOURCE_FILE);
291:       assertEquals(54, Node.SLASH_V);
292:       assertEquals(43, Node.IS_CONSTANT_NAME);
293:       assertEquals((-1), node0.getSourcePosition());
294:       assertFalse(node0.hasChildren());
295:       assertFalse(node0.isLabelName());
296:       assertFalse(node0.isAssignAdd());
297:       assertEquals((-1), node0.getLineno());
298:       assertFalse(node0.hasMoreThanOneChild());
299:       assertFalse(node0.isCast());
300:       assertFalse(node0.isContinue());
301:       assertFalse(node0.isGetElem());
302:       assertFalse(node0.isAssign());
303:       assertFalse(node0.isReturn());
304:       assertFalse(node0.isLabel());
305:       assertFalse(node0.isDec());
306:       assertFalse(node0.isTypeOf());
307:       assertFalse(node0.isBlock());
308:       assertFalse(node0.isScript());
309:       assertFalse(node0.isWhile());
310:       assertFalse(node0.hasOneChild());
311:       assertTrue(node0.isString());
312:       assertFalse(node0.isAnd());
313:       assertFalse(node0.isStringKey());
314:       assertFalse(node0.isNot());
315:       assertFalse(node0.isNumber());
316:       assertFalse(node0.isObjectLit());
317:       assertFalse(node0.isSetterDef());
318:       assertFalse(node0.isThis());
319:       assertFalse(node0.isCatch());
320:       assertFalse(node0.isThrow());
321:       assertFalse(node0.isInstanceOf());
322:       assertFalse(node0.isHook());
323:       assertEquals(40, node0.getType());
324:       assertFalse(node0.isWith());
325:       assertFalse(node0.isFalse());
326:       assertFalse(node0.isRegExp());
327:       assertFalse(node0.isInc());
328:       assertFalse(node0.isIn());
329:       assertFalse(node0.isNE());
330:       assertFalse(node0.isIf());
331:       assertFalse(node0.isDelProp());
332:       assertFalse(node0.isArrayLit());
333:       assertFalse(node0.isFor());
334:       assertFalse(node0.isFunction());
335:       assertFalse(node0.isSwitch());
336:       assertFalse(node0.isDebugger());
337:       assertEquals((-1), node0.getCharno());
338:       assertFalse(node0.isTry());
339:       assertFalse(node0.isCase());
340:       assertFalse(node0.isGetterDef());
341:       assertFalse(node0.isComma());
342:       assertFalse(node0.isParamList());
343:       assertFalse(node0.isBreak());
344:       assertFalse(node0.isGetProp());
345:       assertFalse(node0.isNull());
346:       assertFalse(node0.isName());
347:       assertFalse(node0.isVar());
348:       assertFalse(node0.isCall());
349:       assertEquals(0, node0.getChildCount());
350:       assertFalse(node0.isTrue());
351:       assertFalse(node0.isExprResult());
352:       assertFalse(node0.isAdd());
353:       assertFalse(node0.isDo());
354:       assertFalse(node0.isNew());
355:       assertFalse(node0.isDefaultCase());
356:       assertFalse(node0.isVoid());
357:       assertFalse(node0.isEmpty());
358:       assertFalse(node0.isOr());
359:       
360:       Iterable<Node> iterable0 = node0.children();
361:       assertFalse(iterable0.contains(node0));
362:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
363:       assertEquals(50, Node.FREE_CALL);
364:       assertEquals(39, Node.EMPTY_BLOCK);
365:       assertEquals(40, Node.ORIGINALNAME_PROP);
366:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
367:       assertEquals(8, Node.FLAG_NO_THROWS);
368:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
369:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
370:       assertEquals(57, Node.LAST_PROP);
371:       assertEquals(49, Node.DIRECT_EVAL);
372:       assertEquals(36, Node.QUOTED_PROP);
373:       assertEquals(15, Node.NO_SIDE_EFFECTS);
374:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
375:       assertEquals(55, Node.INFERRED_FUNCTION);
376:       assertEquals(4095, Node.COLUMN_MASK);
377:       assertEquals(52, Node.LENGTH);
378:       assertEquals(57, Node.REFLECTED_OBJECT);
379:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
380:       assertEquals(37, Node.OPT_ARG_NAME);
381:       assertEquals(48, Node.DIRECTIVES);
382:       assertEquals(56, Node.CHANGE_TIME);
383:       assertEquals(29, Node.JSDOC_INFO_PROP);
384:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
385:       assertEquals(47, Node.IS_DISPATCHER);
386:       assertEquals(2, Node.POST_FLAG);
387:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
388:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
389:       assertEquals(32, Node.INCRDECR_PROP);
390:       assertEquals(12, Node.COLUMN_BITS);
391:       assertEquals(53, Node.INPUT_ID);
392:       assertEquals(1, Node.DECR_FLAG);
393:       assertEquals(30, Node.VAR_ARGS_NAME);
394:       assertEquals(46, Node.IS_NAMESPACE);
395:       assertEquals(51, Node.STATIC_SOURCE_FILE);
396:       assertEquals(54, Node.SLASH_V);
397:       assertEquals(43, Node.IS_CONSTANT_NAME);
398:       assertEquals((-1), node0.getSourcePosition());
399:       assertFalse(node0.hasChildren());
400:       assertFalse(node0.isLabelName());
401:       assertFalse(node0.isAssignAdd());
402:       assertEquals((-1), node0.getLineno());
403:       assertFalse(node0.hasMoreThanOneChild());
404:       assertFalse(node0.isCast());
405:       assertFalse(node0.isContinue());
406:       assertFalse(node0.isGetElem());
407:       assertFalse(node0.isAssign());
408:       assertFalse(node0.isReturn());
409:       assertFalse(node0.isLabel());
410:       assertFalse(node0.isDec());
411:       assertFalse(node0.isTypeOf());
412:       assertFalse(node0.isBlock());
413:       assertFalse(node0.isScript());
414:       assertFalse(node0.isWhile());
415:       assertFalse(node0.hasOneChild());
416:       assertTrue(node0.isString());
417:       assertFalse(node0.isAnd());
418:       assertFalse(node0.isStringKey());
419:       assertFalse(node0.isNot());
420:       assertFalse(node0.isNumber());
421:       assertFalse(node0.isObjectLit());
422:       assertFalse(node0.isSetterDef());
423:       assertFalse(node0.isThis());
424:       assertFalse(node0.isCatch());
425:       assertFalse(node0.isThrow());
426:       assertFalse(node0.isInstanceOf());
427:       assertFalse(node0.isHook());
428:       assertEquals(40, node0.getType());
429:       assertFalse(node0.isWith());
430:       assertFalse(node0.isFalse());
431:       assertFalse(node0.isRegExp());
432:       assertFalse(node0.isInc());
433:       assertFalse(node0.isIn());
434:       assertFalse(node0.isNE());
435:       assertFalse(node0.isIf());
436:       assertFalse(node0.isDelProp());
437:       assertFalse(node0.isArrayLit());
438:       assertFalse(node0.isFor());
439:       assertFalse(node0.isFunction());
440:       assertFalse(node0.isSwitch());
441:       assertFalse(node0.isDebugger());
442:       assertEquals((-1), node0.getCharno());
443:       assertFalse(node0.isTry());
444:       assertFalse(node0.isCase());
445:       assertFalse(node0.isGetterDef());
446:       assertFalse(node0.isComma());
447:       assertFalse(node0.isParamList());
448:       assertFalse(node0.isBreak());
449:       assertFalse(node0.isGetProp());
450:       assertFalse(node0.isNull());
451:       assertFalse(node0.isName());
452:       assertFalse(node0.isVar());
453:       assertFalse(node0.isCall());
454:       assertEquals(0, node0.getChildCount());
455:       assertFalse(node0.isTrue());
456:       assertFalse(node0.isExprResult());
457:       assertFalse(node0.isAdd());
458:       assertFalse(node0.isDo());
459:       assertFalse(node0.isNew());
460:       assertFalse(node0.isDefaultCase());
461:       assertFalse(node0.isVoid());
462:       assertFalse(node0.isEmpty());
463:       assertFalse(node0.isOr());
464:       assertNotNull(iterable0);
465:       
466:       // Undeclared exception!
467:       try { 
468:         node0.toString();
469:         fail("Expecting exception: IllegalStateException");
470:       
471:       } catch(IllegalStateException e) {
472:          //
473:          // unexpected prop id 488
474:          //
475:          verifyException("com.google.javascript.rhino.Node", e);
476:       }
477:   }
478: }
RegularFileObject[/tmp/EvoSuite_111_1628256082315/com/google/javascript/rhino/Node_111_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:22 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_111_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_111_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_111_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:22.426 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString("5aW?n/I=");
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(40, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertNotNull(node0);

Node.SideEffectFlags node_SideEffectFlags0 = new Node.SideEffectFlags();
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertNotNull(node_SideEffectFlags0);

Node.SideEffectFlags node_SideEffectFlags1 = node_SideEffectFlags0.clearAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags1, node_SideEffectFlags0);
assertEquals(31, node_SideEffectFlags0.valueOf());
assertFalse(node_SideEffectFlags0.areAllFlagsSet());
assertFalse(node_SideEffectFlags1.areAllFlagsSet());
assertEquals(31, node_SideEffectFlags1.valueOf());
assertNotNull(node_SideEffectFlags1);

Node.SideEffectFlags node_SideEffectFlags2 = node_SideEffectFlags0.setAllFlags();
assertSame(node_SideEffectFlags0, node_SideEffectFlags2);
assertSame(node_SideEffectFlags0, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags1);
assertSame(node_SideEffectFlags2, node_SideEffectFlags0);
assertTrue(node_SideEffectFlags0.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags0.valueOf());
assertTrue(node_SideEffectFlags2.areAllFlagsSet());
assertEquals(0, node_SideEffectFlags2.valueOf());
assertNotNull(node_SideEffectFlags2);

String string0 = node0.getQualifiedName();
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(40, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertNull(string0);

node0.putIntProp(488, 1341);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(40, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.LAST_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(52, Node.LENGTH);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(53, Node.INPUT_ID);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.hasChildren());
assertFalse(node0.isLabelName());
assertFalse(node0.isAssignAdd());
assertEquals((-1), node0.getLineno());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isGetElem());
assertFalse(node0.isAssign());
assertFalse(node0.isReturn());
assertFalse(node0.isLabel());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isBlock());
assertFalse(node0.isScript());
assertFalse(node0.isWhile());
assertFalse(node0.hasOneChild());
assertTrue(node0.isString());
assertFalse(node0.isAnd());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isSetterDef());
assertFalse(node0.isThis());
assertFalse(node0.isCatch());
assertFalse(node0.isThrow());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isHook());
assertEquals(40, node0.getType());
assertFalse(node0.isWith());
assertFalse(node0.isFalse());
assertFalse(node0.isRegExp());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDelProp());
assertFalse(node0.isArrayLit());
assertFalse(node0.isFor());
assertFalse(node0.isFunction());
assertFalse(node0.isSwitch());
assertFalse(node0.isDebugger());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isTry());
assertFalse(node0.isCase());
assertFalse(node0.isGetterDef());
assertFalse(node0.isComma());
assertFalse(node0.isParamList());
assertFalse(node0.isBreak());
assertFalse(node0.isGetProp());
assertFalse(node0.isNull());
assertFalse(node0.isName());
assertFalse(node0.isVar());
assertFalse(node0.isCall());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isTrue());
assertFalse(node0.isExprResult());
assertFalse(node0.isAdd());
assertFalse(node0.isDo());
assertFalse(node0.isNew());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isOr());
assertNotNull(iterable0);

node0.toString();

[MASTER] 13:21:26.852 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_131_1628256086657/com/google/javascript/rhino/Node_131_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_131_1628256086657/com/google/javascript/rhino/Node_131_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:26.852 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:26.852 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:26.853 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 127
[MASTER] 13:21:26.854 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_131_1628256086657/com/google/javascript/rhino/Node_131_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:26 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import com.google.javascript.rhino.jstype.StaticSourceFile;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
17: public class Node_131_tmp__ESTest extends Node_131_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       Node node0 = Node.newString(".");
22:       assertEquals(54, Node.SLASH_V);
23:       assertEquals(15, Node.NO_SIDE_EFFECTS);
24:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
25:       assertEquals(30, Node.VAR_ARGS_NAME);
26:       assertEquals(52, Node.LENGTH);
27:       assertEquals(40, Node.ORIGINALNAME_PROP);
28:       assertEquals(51, Node.STATIC_SOURCE_FILE);
29:       assertEquals(57, Node.REFLECTED_OBJECT);
30:       assertEquals(49, Node.DIRECT_EVAL);
31:       assertEquals(46, Node.IS_NAMESPACE);
32:       assertEquals(37, Node.OPT_ARG_NAME);
33:       assertEquals(48, Node.DIRECTIVES);
34:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
35:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
36:       assertEquals(50, Node.FREE_CALL);
37:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
38:       assertEquals(4095, Node.COLUMN_MASK);
39:       assertEquals(1, Node.DECR_FLAG);
40:       assertEquals(12, Node.COLUMN_BITS);
41:       assertEquals(32, Node.INCRDECR_PROP);
42:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
43:       assertEquals(36, Node.QUOTED_PROP);
44:       assertEquals(53, Node.INPUT_ID);
45:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
46:       assertEquals(43, Node.IS_CONSTANT_NAME);
47:       assertEquals(56, Node.CHANGE_TIME);
48:       assertEquals(8, Node.FLAG_NO_THROWS);
49:       assertEquals(2, Node.POST_FLAG);
50:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
51:       assertEquals(39, Node.EMPTY_BLOCK);
52:       assertEquals(47, Node.IS_DISPATCHER);
53:       assertEquals(29, Node.JSDOC_INFO_PROP);
54:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
55:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
56:       assertEquals(55, Node.INFERRED_FUNCTION);
57:       assertEquals(57, Node.LAST_PROP);
58:       assertFalse(node0.isTry());
59:       assertFalse(node0.isTrue());
60:       assertFalse(node0.isArrayLit());
61:       assertFalse(node0.isDefaultCase());
62:       assertFalse(node0.isVoid());
63:       assertFalse(node0.isEmpty());
64:       assertFalse(node0.isDebugger());
65:       assertFalse(node0.isGetterDef());
66:       assertFalse(node0.isSetterDef());
67:       assertFalse(node0.isParamList());
68:       assertEquals(40, node0.getType());
69:       assertEquals(0, node0.getChildCount());
70:       assertFalse(node0.isFunction());
71:       assertFalse(node0.isNew());
72:       assertFalse(node0.isAdd());
73:       assertFalse(node0.isVar());
74:       assertFalse(node0.isName());
75:       assertFalse(node0.isDo());
76:       assertFalse(node0.isNull());
77:       assertFalse(node0.isOr());
78:       assertFalse(node0.isGetProp());
79:       assertFalse(node0.isReturn());
80:       assertFalse(node0.isDelProp());
81:       assertFalse(node0.isAssign());
82:       assertFalse(node0.isWhile());
83:       assertFalse(node0.isBreak());
84:       assertFalse(node0.hasChildren());
85:       assertFalse(node0.isGetElem());
86:       assertFalse(node0.isCall());
87:       assertFalse(node0.isComma());
88:       assertFalse(node0.isDec());
89:       assertFalse(node0.isTypeOf());
90:       assertFalse(node0.isExprResult());
91:       assertFalse(node0.hasOneChild());
92:       assertFalse(node0.isNot());
93:       assertFalse(node0.isScript());
94:       assertEquals((-1), node0.getSourcePosition());
95:       assertFalse(node0.isNumber());
96:       assertFalse(node0.isObjectLit());
97:       assertFalse(node0.isLabel());
98:       assertFalse(node0.isAssignAdd());
99:       assertFalse(node0.isAnd());
100:       assertFalse(node0.isLabelName());
101:       assertFalse(node0.isThrow());
102:       assertFalse(node0.isCast());
103:       assertFalse(node0.isContinue());
104:       assertFalse(node0.isFalse());
105:       assertFalse(node0.isHook());
106:       assertFalse(node0.isBlock());
107:       assertFalse(node0.isInc());
108:       assertFalse(node0.isSwitch());
109:       assertTrue(node0.isString());
110:       assertFalse(node0.isCase());
111:       assertFalse(node0.isStringKey());
112:       assertEquals((-1), node0.getCharno());
113:       assertFalse(node0.isIn());
114:       assertEquals((-1), node0.getLineno());
115:       assertFalse(node0.isInstanceOf());
116:       assertFalse(node0.isThis());
117:       assertFalse(node0.isNE());
118:       assertFalse(node0.isIf());
119:       assertFalse(node0.isWith());
120:       assertFalse(node0.isFor());
121:       assertFalse(node0.isCatch());
122:       assertFalse(node0.hasMoreThanOneChild());
123:       assertFalse(node0.isRegExp());
124:       assertNotNull(node0);
125:       
126:       Iterable<Node> iterable0 = node0.children();
127:       assertFalse(iterable0.contains(node0));
128:       assertEquals(54, Node.SLASH_V);
129:       assertEquals(15, Node.NO_SIDE_EFFECTS);
130:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
131:       assertEquals(30, Node.VAR_ARGS_NAME);
132:       assertEquals(52, Node.LENGTH);
133:       assertEquals(40, Node.ORIGINALNAME_PROP);
134:       assertEquals(51, Node.STATIC_SOURCE_FILE);
135:       assertEquals(57, Node.REFLECTED_OBJECT);
136:       assertEquals(49, Node.DIRECT_EVAL);
137:       assertEquals(46, Node.IS_NAMESPACE);
138:       assertEquals(37, Node.OPT_ARG_NAME);
139:       assertEquals(48, Node.DIRECTIVES);
140:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
141:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
142:       assertEquals(50, Node.FREE_CALL);
143:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(1, Node.DECR_FLAG);
146:       assertEquals(12, Node.COLUMN_BITS);
147:       assertEquals(32, Node.INCRDECR_PROP);
148:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
149:       assertEquals(36, Node.QUOTED_PROP);
150:       assertEquals(53, Node.INPUT_ID);
151:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
152:       assertEquals(43, Node.IS_CONSTANT_NAME);
153:       assertEquals(56, Node.CHANGE_TIME);
154:       assertEquals(8, Node.FLAG_NO_THROWS);
155:       assertEquals(2, Node.POST_FLAG);
156:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
157:       assertEquals(39, Node.EMPTY_BLOCK);
158:       assertEquals(47, Node.IS_DISPATCHER);
159:       assertEquals(29, Node.JSDOC_INFO_PROP);
160:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
161:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
162:       assertEquals(55, Node.INFERRED_FUNCTION);
163:       assertEquals(57, Node.LAST_PROP);
164:       assertFalse(node0.isTry());
165:       assertFalse(node0.isTrue());
166:       assertFalse(node0.isArrayLit());
167:       assertFalse(node0.isDefaultCase());
168:       assertFalse(node0.isVoid());
169:       assertFalse(node0.isEmpty());
170:       assertFalse(node0.isDebugger());
171:       assertFalse(node0.isGetterDef());
172:       assertFalse(node0.isSetterDef());
173:       assertFalse(node0.isParamList());
174:       assertEquals(40, node0.getType());
175:       assertEquals(0, node0.getChildCount());
176:       assertFalse(node0.isFunction());
177:       assertFalse(node0.isNew());
178:       assertFalse(node0.isAdd());
179:       assertFalse(node0.isVar());
180:       assertFalse(node0.isName());
181:       assertFalse(node0.isDo());
182:       assertFalse(node0.isNull());
183:       assertFalse(node0.isOr());
184:       assertFalse(node0.isGetProp());
185:       assertFalse(node0.isReturn());
186:       assertFalse(node0.isDelProp());
187:       assertFalse(node0.isAssign());
188:       assertFalse(node0.isWhile());
189:       assertFalse(node0.isBreak());
190:       assertFalse(node0.hasChildren());
191:       assertFalse(node0.isGetElem());
192:       assertFalse(node0.isCall());
193:       assertFalse(node0.isComma());
194:       assertFalse(node0.isDec());
195:       assertFalse(node0.isTypeOf());
196:       assertFalse(node0.isExprResult());
197:       assertFalse(node0.hasOneChild());
198:       assertFalse(node0.isNot());
199:       assertFalse(node0.isScript());
200:       assertEquals((-1), node0.getSourcePosition());
201:       assertFalse(node0.isNumber());
202:       assertFalse(node0.isObjectLit());
203:       assertFalse(node0.isLabel());
204:       assertFalse(node0.isAssignAdd());
205:       assertFalse(node0.isAnd());
206:       assertFalse(node0.isLabelName());
207:       assertFalse(node0.isThrow());
208:       assertFalse(node0.isCast());
209:       assertFalse(node0.isContinue());
210:       assertFalse(node0.isFalse());
211:       assertFalse(node0.isHook());
212:       assertFalse(node0.isBlock());
213:       assertFalse(node0.isInc());
214:       assertFalse(node0.isSwitch());
215:       assertTrue(node0.isString());
216:       assertFalse(node0.isCase());
217:       assertFalse(node0.isStringKey());
218:       assertEquals((-1), node0.getCharno());
219:       assertFalse(node0.isIn());
220:       assertEquals((-1), node0.getLineno());
221:       assertFalse(node0.isInstanceOf());
222:       assertFalse(node0.isThis());
223:       assertFalse(node0.isNE());
224:       assertFalse(node0.isIf());
225:       assertFalse(node0.isWith());
226:       assertFalse(node0.isFor());
227:       assertFalse(node0.isCatch());
228:       assertFalse(node0.hasMoreThanOneChild());
229:       assertFalse(node0.isRegExp());
230:       assertNotNull(iterable0);
231:       
232:       String string0 = node0.toString();
233:       assertEquals(54, Node.SLASH_V);
234:       assertEquals(15, Node.NO_SIDE_EFFECTS);
235:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
236:       assertEquals(30, Node.VAR_ARGS_NAME);
237:       assertEquals(52, Node.LENGTH);
238:       assertEquals(40, Node.ORIGINALNAME_PROP);
239:       assertEquals(51, Node.STATIC_SOURCE_FILE);
240:       assertEquals(57, Node.REFLECTED_OBJECT);
241:       assertEquals(49, Node.DIRECT_EVAL);
242:       assertEquals(46, Node.IS_NAMESPACE);
243:       assertEquals(37, Node.OPT_ARG_NAME);
244:       assertEquals(48, Node.DIRECTIVES);
245:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
246:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
247:       assertEquals(50, Node.FREE_CALL);
248:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
249:       assertEquals(4095, Node.COLUMN_MASK);
250:       assertEquals(1, Node.DECR_FLAG);
251:       assertEquals(12, Node.COLUMN_BITS);
252:       assertEquals(32, Node.INCRDECR_PROP);
253:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
254:       assertEquals(36, Node.QUOTED_PROP);
255:       assertEquals(53, Node.INPUT_ID);
256:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
257:       assertEquals(43, Node.IS_CONSTANT_NAME);
258:       assertEquals(56, Node.CHANGE_TIME);
259:       assertEquals(8, Node.FLAG_NO_THROWS);
260:       assertEquals(2, Node.POST_FLAG);
261:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
262:       assertEquals(39, Node.EMPTY_BLOCK);
263:       assertEquals(47, Node.IS_DISPATCHER);
264:       assertEquals(29, Node.JSDOC_INFO_PROP);
265:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
266:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
267:       assertEquals(55, Node.INFERRED_FUNCTION);
268:       assertEquals(57, Node.LAST_PROP);
269:       assertEquals("STRING .", string0);
270:       assertFalse(node0.isTry());
271:       assertFalse(node0.isTrue());
272:       assertFalse(node0.isArrayLit());
273:       assertFalse(node0.isDefaultCase());
274:       assertFalse(node0.isVoid());
275:       assertFalse(node0.isEmpty());
276:       assertFalse(node0.isDebugger());
277:       assertFalse(node0.isGetterDef());
278:       assertFalse(node0.isSetterDef());
279:       assertFalse(node0.isParamList());
280:       assertEquals(40, node0.getType());
281:       assertEquals(0, node0.getChildCount());
282:       assertFalse(node0.isFunction());
283:       assertFalse(node0.isNew());
284:       assertFalse(node0.isAdd());
285:       assertFalse(node0.isVar());
286:       assertFalse(node0.isName());
287:       assertFalse(node0.isDo());
288:       assertFalse(node0.isNull());
289:       assertFalse(node0.isOr());
290:       assertFalse(node0.isGetProp());
291:       assertFalse(node0.isReturn());
292:       assertFalse(node0.isDelProp());
293:       assertFalse(node0.isAssign());
294:       assertFalse(node0.isWhile());
295:       assertFalse(node0.isBreak());
296:       assertFalse(node0.hasChildren());
297:       assertFalse(node0.isGetElem());
298:       assertFalse(node0.isCall());
299:       assertFalse(node0.isComma());
300:       assertFalse(node0.isDec());
301:       assertFalse(node0.isTypeOf());
302:       assertFalse(node0.isExprResult());
303:       assertFalse(node0.hasOneChild());
304:       assertFalse(node0.isNot());
305:       assertFalse(node0.isScript());
306:       assertEquals((-1), node0.getSourcePosition());
307:       assertFalse(node0.isNumber());
308:       assertFalse(node0.isObjectLit());
309:       assertFalse(node0.isLabel());
310:       assertFalse(node0.isAssignAdd());
311:       assertFalse(node0.isAnd());
312:       assertFalse(node0.isLabelName());
313:       assertFalse(node0.isThrow());
314:       assertFalse(node0.isCast());
315:       assertFalse(node0.isContinue());
316:       assertFalse(node0.isFalse());
317:       assertFalse(node0.isHook());
318:       assertFalse(node0.isBlock());
319:       assertFalse(node0.isInc());
320:       assertFalse(node0.isSwitch());
321:       assertTrue(node0.isString());
322:       assertFalse(node0.isCase());
323:       assertFalse(node0.isStringKey());
324:       assertEquals((-1), node0.getCharno());
325:       assertFalse(node0.isIn());
326:       assertEquals((-1), node0.getLineno());
327:       assertFalse(node0.isInstanceOf());
328:       assertFalse(node0.isThis());
329:       assertFalse(node0.isNE());
330:       assertFalse(node0.isIf());
331:       assertFalse(node0.isWith());
332:       assertFalse(node0.isFor());
333:       assertFalse(node0.isCatch());
334:       assertFalse(node0.hasMoreThanOneChild());
335:       assertFalse(node0.isRegExp());
336:       assertNotNull(string0);
337:       
338:       Node node1 = Node.newString("x#");
339:       assertNotSame(node1, node0);
340:       assertFalse(node1.equals((Object)node0));
341:       assertEquals(4095, Node.COLUMN_MASK);
342:       assertEquals(55, Node.INFERRED_FUNCTION);
343:       assertEquals(39, Node.EMPTY_BLOCK);
344:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
345:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
346:       assertEquals(57, Node.REFLECTED_OBJECT);
347:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
348:       assertEquals(52, Node.LENGTH);
349:       assertEquals(53, Node.INPUT_ID);
350:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
351:       assertEquals(29, Node.JSDOC_INFO_PROP);
352:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
353:       assertEquals(56, Node.CHANGE_TIME);
354:       assertEquals(36, Node.QUOTED_PROP);
355:       assertEquals(37, Node.OPT_ARG_NAME);
356:       assertEquals(8, Node.FLAG_NO_THROWS);
357:       assertEquals(48, Node.DIRECTIVES);
358:       assertEquals(49, Node.DIRECT_EVAL);
359:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
360:       assertEquals(51, Node.STATIC_SOURCE_FILE);
361:       assertEquals(32, Node.INCRDECR_PROP);
362:       assertEquals(1, Node.DECR_FLAG);
363:       assertEquals(15, Node.NO_SIDE_EFFECTS);
364:       assertEquals(47, Node.IS_DISPATCHER);
365:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
366:       assertEquals(57, Node.LAST_PROP);
367:       assertEquals(2, Node.POST_FLAG);
368:       assertEquals(30, Node.VAR_ARGS_NAME);
369:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
370:       assertEquals(12, Node.COLUMN_BITS);
371:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
372:       assertEquals(40, Node.ORIGINALNAME_PROP);
373:       assertEquals(43, Node.IS_CONSTANT_NAME);
374:       assertEquals(50, Node.FREE_CALL);
375:       assertEquals(46, Node.IS_NAMESPACE);
376:       assertEquals(54, Node.SLASH_V);
377:       assertFalse(node1.isCase());
378:       assertFalse(node1.isSwitch());
379:       assertFalse(node1.isArrayLit());
380:       assertFalse(node1.isHook());
381:       assertFalse(node1.isFor());
382:       assertFalse(node1.isDebugger());
383:       assertFalse(node1.isGetProp());
384:       assertEquals((-1), node1.getCharno());
385:       assertFalse(node1.isTry());
386:       assertFalse(node1.isGetterDef());
387:       assertFalse(node1.isObjectLit());
388:       assertFalse(node1.isAnd());
389:       assertEquals(40, node1.getType());
390:       assertFalse(node1.isNot());
391:       assertFalse(node1.isFunction());
392:       assertFalse(node1.isThis());
393:       assertFalse(node1.isRegExp());
394:       assertFalse(node1.isWith());
395:       assertFalse(node1.isCast());
396:       assertFalse(node1.isCatch());
397:       assertFalse(node1.isInstanceOf());
398:       assertFalse(node1.isThrow());
399:       assertFalse(node1.isFalse());
400:       assertFalse(node1.isIf());
401:       assertFalse(node1.isNE());
402:       assertFalse(node1.isInc());
403:       assertFalse(node1.isSetterDef());
404:       assertFalse(node1.isIn());
405:       assertFalse(node1.isContinue());
406:       assertFalse(node1.isDo());
407:       assertFalse(node1.isReturn());
408:       assertFalse(node1.isAssignAdd());
409:       assertFalse(node1.isWhile());
410:       assertFalse(node1.isBlock());
411:       assertFalse(node1.isLabel());
412:       assertEquals((-1), node1.getLineno());
413:       assertFalse(node1.isDec());
414:       assertFalse(node1.isTypeOf());
415:       assertFalse(node1.hasMoreThanOneChild());
416:       assertFalse(node1.isLabelName());
417:       assertFalse(node1.isAssign());
418:       assertFalse(node1.hasOneChild());
419:       assertFalse(node1.hasChildren());
420:       assertFalse(node1.isParamList());
421:       assertFalse(node1.isStringKey());
422:       assertTrue(node1.isString());
423:       assertEquals((-1), node1.getSourcePosition());
424:       assertFalse(node1.isNumber());
425:       assertFalse(node1.isScript());
426:       assertFalse(node1.isDefaultCase());
427:       assertFalse(node1.isVoid());
428:       assertFalse(node1.isExprResult());
429:       assertFalse(node1.isComma());
430:       assertEquals(0, node1.getChildCount());
431:       assertFalse(node1.isBreak());
432:       assertFalse(node1.isGetElem());
433:       assertFalse(node1.isCall());
434:       assertFalse(node1.isName());
435:       assertFalse(node1.isDelProp());
436:       assertFalse(node1.isNull());
437:       assertFalse(node1.isVar());
438:       assertFalse(node1.isTrue());
439:       assertFalse(node1.isOr());
440:       assertFalse(node1.isNew());
441:       assertFalse(node1.isEmpty());
442:       assertFalse(node1.isAdd());
443:       assertNotNull(node1);
444:       
445:       Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
446:       assertFalse(node0.equals((Object)node1));
447:       assertFalse(node1.equals((Object)node0));
448:       assertEquals(54, Node.SLASH_V);
449:       assertEquals(15, Node.NO_SIDE_EFFECTS);
450:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
451:       assertEquals(30, Node.VAR_ARGS_NAME);
452:       assertEquals(52, Node.LENGTH);
453:       assertEquals(40, Node.ORIGINALNAME_PROP);
454:       assertEquals(51, Node.STATIC_SOURCE_FILE);
455:       assertEquals(57, Node.REFLECTED_OBJECT);
456:       assertEquals(49, Node.DIRECT_EVAL);
457:       assertEquals(46, Node.IS_NAMESPACE);
458:       assertEquals(37, Node.OPT_ARG_NAME);
459:       assertEquals(48, Node.DIRECTIVES);
460:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
461:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
462:       assertEquals(50, Node.FREE_CALL);
463:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
464:       assertEquals(4095, Node.COLUMN_MASK);
465:       assertEquals(1, Node.DECR_FLAG);
466:       assertEquals(12, Node.COLUMN_BITS);
467:       assertEquals(32, Node.INCRDECR_PROP);
468:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
469:       assertEquals(36, Node.QUOTED_PROP);
470:       assertEquals(53, Node.INPUT_ID);
471:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
472:       assertEquals(43, Node.IS_CONSTANT_NAME);
473:       assertEquals(56, Node.CHANGE_TIME);
474:       assertEquals(8, Node.FLAG_NO_THROWS);
475:       assertEquals(2, Node.POST_FLAG);
476:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
477:       assertEquals(39, Node.EMPTY_BLOCK);
478:       assertEquals(47, Node.IS_DISPATCHER);
479:       assertEquals(29, Node.JSDOC_INFO_PROP);
480:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
481:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
482:       assertEquals(55, Node.INFERRED_FUNCTION);
483:       assertEquals(57, Node.LAST_PROP);
484:       assertEquals(4095, Node.COLUMN_MASK);
485:       assertEquals(55, Node.INFERRED_FUNCTION);
486:       assertEquals(39, Node.EMPTY_BLOCK);
487:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
488:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
489:       assertEquals(57, Node.REFLECTED_OBJECT);
490:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
491:       assertEquals(52, Node.LENGTH);
492:       assertEquals(53, Node.INPUT_ID);
493:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
494:       assertEquals(29, Node.JSDOC_INFO_PROP);
495:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
496:       assertEquals(56, Node.CHANGE_TIME);
497:       assertEquals(36, Node.QUOTED_PROP);
498:       assertEquals(37, Node.OPT_ARG_NAME);
499:       assertEquals(8, Node.FLAG_NO_THROWS);
500:       assertEquals(48, Node.DIRECTIVES);
501:       assertEquals(49, Node.DIRECT_EVAL);
502:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
503:       assertEquals(51, Node.STATIC_SOURCE_FILE);
504:       assertEquals(32, Node.INCRDECR_PROP);
505:       assertEquals(1, Node.DECR_FLAG);
506:       assertEquals(15, Node.NO_SIDE_EFFECTS);
507:       assertEquals(47, Node.IS_DISPATCHER);
508:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
509:       assertEquals(57, Node.LAST_PROP);
510:       assertEquals(2, Node.POST_FLAG);
511:       assertEquals(30, Node.VAR_ARGS_NAME);
512:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
513:       assertEquals(12, Node.COLUMN_BITS);
514:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
515:       assertEquals(40, Node.ORIGINALNAME_PROP);
516:       assertEquals(43, Node.IS_CONSTANT_NAME);
517:       assertEquals(50, Node.FREE_CALL);
518:       assertEquals(46, Node.IS_NAMESPACE);
519:       assertEquals(54, Node.SLASH_V);
520:       assertFalse(node0.isTry());
521:       assertFalse(node0.isTrue());
522:       assertFalse(node0.isArrayLit());
523:       assertFalse(node0.isDefaultCase());
524:       assertFalse(node0.isVoid());
525:       assertFalse(node0.isEmpty());
526:       assertFalse(node0.isDebugger());
527:       assertFalse(node0.isGetterDef());
528:       assertFalse(node0.isSetterDef());
529:       assertFalse(node0.isParamList());
530:       assertEquals(40, node0.getType());
531:       assertEquals(0, node0.getChildCount());
532:       assertFalse(node0.isFunction());
533:       assertFalse(node0.isNew());
534:       assertFalse(node0.isAdd());
535:       assertFalse(node0.isVar());
536:       assertFalse(node0.isName());
537:       assertFalse(node0.isDo());
538:       assertFalse(node0.isNull());
539:       assertFalse(node0.isOr());
540:       assertFalse(node0.isGetProp());
541:       assertFalse(node0.isReturn());
542:       assertFalse(node0.isDelProp());
543:       assertFalse(node0.isAssign());
544:       assertFalse(node0.isWhile());
545:       assertFalse(node0.isBreak());
546:       assertFalse(node0.hasChildren());
547:       assertFalse(node0.isGetElem());
548:       assertFalse(node0.isCall());
549:       assertFalse(node0.isComma());
550:       assertFalse(node0.isDec());
551:       assertFalse(node0.isTypeOf());
552:       assertFalse(node0.isExprResult());
553:       assertFalse(node0.hasOneChild());
554:       assertFalse(node0.isNot());
555:       assertFalse(node0.isScript());
556:       assertEquals((-1), node0.getSourcePosition());
557:       assertFalse(node0.isNumber());
558:       assertFalse(node0.isObjectLit());
559:       assertFalse(node0.isLabel());
560:       assertFalse(node0.isAssignAdd());
561:       assertFalse(node0.isAnd());
562:       assertFalse(node0.isLabelName());
563:       assertFalse(node0.isThrow());
564:       assertFalse(node0.isCast());
565:       assertFalse(node0.isContinue());
566:       assertFalse(node0.isFalse());
567:       assertFalse(node0.isHook());
568:       assertFalse(node0.isBlock());
569:       assertFalse(node0.isInc());
570:       assertFalse(node0.isSwitch());
571:       assertTrue(node0.isString());
572:       assertFalse(node0.isCase());
573:       assertFalse(node0.isStringKey());
574:       assertEquals((-1), node0.getCharno());
575:       assertFalse(node0.isIn());
576:       assertEquals((-1), node0.getLineno());
577:       assertFalse(node0.isInstanceOf());
578:       assertFalse(node0.isThis());
579:       assertFalse(node0.isNE());
580:       assertFalse(node0.isIf());
581:       assertFalse(node0.isWith());
582:       assertFalse(node0.isFor());
583:       assertFalse(node0.isCatch());
584:       assertFalse(node0.hasMoreThanOneChild());
585:       assertFalse(node0.isRegExp());
586:       assertFalse(node1.isCase());
587:       assertFalse(node1.isSwitch());
588:       assertFalse(node1.isArrayLit());
589:       assertFalse(node1.isHook());
590:       assertFalse(node1.isFor());
591:       assertFalse(node1.isDebugger());
592:       assertFalse(node1.isGetProp());
593:       assertEquals((-1), node1.getCharno());
594:       assertFalse(node1.isTry());
595:       assertFalse(node1.isGetterDef());
596:       assertFalse(node1.isObjectLit());
597:       assertFalse(node1.isAnd());
598:       assertEquals(40, node1.getType());
599:       assertFalse(node1.isNot());
600:       assertFalse(node1.isFunction());
601:       assertFalse(node1.isThis());
602:       assertFalse(node1.isRegExp());
603:       assertFalse(node1.isWith());
604:       assertFalse(node1.isCast());
605:       assertFalse(node1.isCatch());
606:       assertFalse(node1.isInstanceOf());
607:       assertFalse(node1.isThrow());
608:       assertFalse(node1.isFalse());
609:       assertFalse(node1.isIf());
610:       assertFalse(node1.isNE());
611:       assertFalse(node1.isInc());
612:       assertFalse(node1.isSetterDef());
613:       assertFalse(node1.isIn());
614:       assertFalse(node1.isContinue());
615:       assertFalse(node1.isDo());
616:       assertFalse(node1.isReturn());
617:       assertFalse(node1.isAssignAdd());
618:       assertFalse(node1.isWhile());
619:       assertFalse(node1.isBlock());
620:       assertFalse(node1.isLabel());
621:       assertEquals((-1), node1.getLineno());
622:       assertFalse(node1.isDec());
623:       assertFalse(node1.isTypeOf());
624:       assertFalse(node1.hasMoreThanOneChild());
625:       assertFalse(node1.isLabelName());
626:       assertFalse(node1.isAssign());
627:       assertFalse(node1.hasOneChild());
628:       assertFalse(node1.hasChildren());
629:       assertFalse(node1.isParamList());
630:       assertFalse(node1.isStringKey());
631:       assertTrue(node1.isString());
632:       assertEquals((-1), node1.getSourcePosition());
633:       assertFalse(node1.isNumber());
634:       assertFalse(node1.isScript());
635:       assertFalse(node1.isDefaultCase());
636:       assertFalse(node1.isVoid());
637:       assertFalse(node1.isExprResult());
638:       assertFalse(node1.isComma());
639:       assertEquals(0, node1.getChildCount());
640:       assertFalse(node1.isBreak());
641:       assertFalse(node1.isGetElem());
642:       assertFalse(node1.isCall());
643:       assertFalse(node1.isName());
644:       assertFalse(node1.isDelProp());
645:       assertFalse(node1.isNull());
646:       assertFalse(node1.isVar());
647:       assertFalse(node1.isTrue());
648:       assertFalse(node1.isOr());
649:       assertFalse(node1.isNew());
650:       assertFalse(node1.isEmpty());
651:       assertFalse(node1.isAdd());
652:       assertNotNull(node_NodeMismatch0);
653:       
654:       boolean boolean0 = node0.isEquivalentToTyped(node1);
655:       assertNotSame(node0, node1);
656:       assertNotSame(node1, node0);
657:       assertFalse(node0.equals((Object)node1));
658:       assertFalse(node1.equals((Object)node0));
659:       assertEquals(54, Node.SLASH_V);
660:       assertEquals(15, Node.NO_SIDE_EFFECTS);
661:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
662:       assertEquals(30, Node.VAR_ARGS_NAME);
663:       assertEquals(52, Node.LENGTH);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(51, Node.STATIC_SOURCE_FILE);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(49, Node.DIRECT_EVAL);
668:       assertEquals(46, Node.IS_NAMESPACE);
669:       assertEquals(37, Node.OPT_ARG_NAME);
670:       assertEquals(48, Node.DIRECTIVES);
671:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
672:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
673:       assertEquals(50, Node.FREE_CALL);
674:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
675:       assertEquals(4095, Node.COLUMN_MASK);
676:       assertEquals(1, Node.DECR_FLAG);
677:       assertEquals(12, Node.COLUMN_BITS);
678:       assertEquals(32, Node.INCRDECR_PROP);
679:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
680:       assertEquals(36, Node.QUOTED_PROP);
681:       assertEquals(53, Node.INPUT_ID);
682:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
683:       assertEquals(43, Node.IS_CONSTANT_NAME);
684:       assertEquals(56, Node.CHANGE_TIME);
685:       assertEquals(8, Node.FLAG_NO_THROWS);
686:       assertEquals(2, Node.POST_FLAG);
687:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
688:       assertEquals(39, Node.EMPTY_BLOCK);
689:       assertEquals(47, Node.IS_DISPATCHER);
690:       assertEquals(29, Node.JSDOC_INFO_PROP);
691:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
692:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
693:       assertEquals(55, Node.INFERRED_FUNCTION);
694:       assertEquals(57, Node.LAST_PROP);
695:       assertEquals(4095, Node.COLUMN_MASK);
696:       assertEquals(55, Node.INFERRED_FUNCTION);
697:       assertEquals(39, Node.EMPTY_BLOCK);
698:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
699:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
700:       assertEquals(57, Node.REFLECTED_OBJECT);
701:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
702:       assertEquals(52, Node.LENGTH);
703:       assertEquals(53, Node.INPUT_ID);
704:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
705:       assertEquals(29, Node.JSDOC_INFO_PROP);
706:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
707:       assertEquals(56, Node.CHANGE_TIME);
708:       assertEquals(36, Node.QUOTED_PROP);
709:       assertEquals(37, Node.OPT_ARG_NAME);
710:       assertEquals(8, Node.FLAG_NO_THROWS);
711:       assertEquals(48, Node.DIRECTIVES);
712:       assertEquals(49, Node.DIRECT_EVAL);
713:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
714:       assertEquals(51, Node.STATIC_SOURCE_FILE);
715:       assertEquals(32, Node.INCRDECR_PROP);
716:       assertEquals(1, Node.DECR_FLAG);
717:       assertEquals(15, Node.NO_SIDE_EFFECTS);
718:       assertEquals(47, Node.IS_DISPATCHER);
719:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
720:       assertEquals(57, Node.LAST_PROP);
721:       assertEquals(2, Node.POST_FLAG);
722:       assertEquals(30, Node.VAR_ARGS_NAME);
723:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
724:       assertEquals(12, Node.COLUMN_BITS);
725:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
726:       assertEquals(40, Node.ORIGINALNAME_PROP);
727:       assertEquals(43, Node.IS_CONSTANT_NAME);
728:       assertEquals(50, Node.FREE_CALL);
729:       assertEquals(46, Node.IS_NAMESPACE);
730:       assertEquals(54, Node.SLASH_V);
731:       assertFalse(boolean0);
732:       assertFalse(node0.isTry());
733:       assertFalse(node0.isTrue());
734:       assertFalse(node0.isArrayLit());
735:       assertFalse(node0.isDefaultCase());
736:       assertFalse(node0.isVoid());
737:       assertFalse(node0.isEmpty());
738:       assertFalse(node0.isDebugger());
739:       assertFalse(node0.isGetterDef());
740:       assertFalse(node0.isSetterDef());
741:       assertFalse(node0.isParamList());
742:       assertEquals(40, node0.getType());
743:       assertEquals(0, node0.getChildCount());
744:       assertFalse(node0.isFunction());
745:       assertFalse(node0.isNew());
746:       assertFalse(node0.isAdd());
747:       assertFalse(node0.isVar());
748:       assertFalse(node0.isName());
749:       assertFalse(node0.isDo());
750:       assertFalse(node0.isNull());
751:       assertFalse(node0.isOr());
752:       assertFalse(node0.isGetProp());
753:       assertFalse(node0.isReturn());
754:       assertFalse(node0.isDelProp());
755:       assertFalse(node0.isAssign());
756:       assertFalse(node0.isWhile());
757:       assertFalse(node0.isBreak());
758:       assertFalse(node0.hasChildren());
759:       assertFalse(node0.isGetElem());
760:       assertFalse(node0.isCall());
761:       assertFalse(node0.isComma());
762:       assertFalse(node0.isDec());
763:       assertFalse(node0.isTypeOf());
764:       assertFalse(node0.isExprResult());
765:       assertFalse(node0.hasOneChild());
766:       assertFalse(node0.isNot());
767:       assertFalse(node0.isScript());
768:       assertEquals((-1), node0.getSourcePosition());
769:       assertFalse(node0.isNumber());
770:       assertFalse(node0.isObjectLit());
771:       assertFalse(node0.isLabel());
772:       assertFalse(node0.isAssignAdd());
773:       assertFalse(node0.isAnd());
774:       assertFalse(node0.isLabelName());
775:       assertFalse(node0.isThrow());
776:       assertFalse(node0.isCast());
777:       assertFalse(node0.isContinue());
778:       assertFalse(node0.isFalse());
779:       assertFalse(node0.isHook());
780:       assertFalse(node0.isBlock());
781:       assertFalse(node0.isInc());
782:       assertFalse(node0.isSwitch());
783:       assertTrue(node0.isString());
784:       assertFalse(node0.isCase());
785:       assertFalse(node0.isStringKey());
786:       assertEquals((-1), node0.getCharno());
787:       assertFalse(node0.isIn());
788:       assertEquals((-1), node0.getLineno());
789:       assertFalse(node0.isInstanceOf());
790:       assertFalse(node0.isThis());
791:       assertFalse(node0.isNE());
792:       assertFalse(node0.isIf());
793:       assertFalse(node0.isWith());
794:       assertFalse(node0.isFor());
795:       assertFalse(node0.isCatch());
796:       assertFalse(node0.hasMoreThanOneChild());
797:       assertFalse(node0.isRegExp());
798:       assertFalse(node1.isCase());
799:       assertFalse(node1.isSwitch());
800:       assertFalse(node1.isArrayLit());
801:       assertFalse(node1.isHook());
802:       assertFalse(node1.isFor());
803:       assertFalse(node1.isDebugger());
804:       assertFalse(node1.isGetProp());
805:       assertEquals((-1), node1.getCharno());
806:       assertFalse(node1.isTry());
807:       assertFalse(node1.isGetterDef());
808:       assertFalse(node1.isObjectLit());
809:       assertFalse(node1.isAnd());
810:       assertEquals(40, node1.getType());
811:       assertFalse(node1.isNot());
812:       assertFalse(node1.isFunction());
813:       assertFalse(node1.isThis());
814:       assertFalse(node1.isRegExp());
815:       assertFalse(node1.isWith());
816:       assertFalse(node1.isCast());
817:       assertFalse(node1.isCatch());
818:       assertFalse(node1.isInstanceOf());
819:       assertFalse(node1.isThrow());
820:       assertFalse(node1.isFalse());
821:       assertFalse(node1.isIf());
822:       assertFalse(node1.isNE());
823:       assertFalse(node1.isInc());
824:       assertFalse(node1.isSetterDef());
825:       assertFalse(node1.isIn());
826:       assertFalse(node1.isContinue());
827:       assertFalse(node1.isDo());
828:       assertFalse(node1.isReturn());
829:       assertFalse(node1.isAssignAdd());
830:       assertFalse(node1.isWhile());
831:       assertFalse(node1.isBlock());
832:       assertFalse(node1.isLabel());
833:       assertEquals((-1), node1.getLineno());
834:       assertFalse(node1.isDec());
835:       assertFalse(node1.isTypeOf());
836:       assertFalse(node1.hasMoreThanOneChild());
837:       assertFalse(node1.isLabelName());
838:       assertFalse(node1.isAssign());
839:       assertFalse(node1.hasOneChild());
840:       assertFalse(node1.hasChildren());
841:       assertFalse(node1.isParamList());
842:       assertFalse(node1.isStringKey());
843:       assertTrue(node1.isString());
844:       assertEquals((-1), node1.getSourcePosition());
845:       assertFalse(node1.isNumber());
846:       assertFalse(node1.isScript());
847:       assertFalse(node1.isDefaultCase());
848:       assertFalse(node1.isVoid());
849:       assertFalse(node1.isExprResult());
850:       assertFalse(node1.isComma());
851:       assertEquals(0, node1.getChildCount());
852:       assertFalse(node1.isBreak());
853:       assertFalse(node1.isGetElem());
854:       assertFalse(node1.isCall());
855:       assertFalse(node1.isName());
856:       assertFalse(node1.isDelProp());
857:       assertFalse(node1.isNull());
858:       assertFalse(node1.isVar());
859:       assertFalse(node1.isTrue());
860:       assertFalse(node1.isOr());
861:       assertFalse(node1.isNew());
862:       assertFalse(node1.isEmpty());
863:       assertFalse(node1.isAdd());
864:       
865:       boolean boolean1 = node1.isCall();
866:       assertNotSame(node1, node0);
867:       assertFalse(node1.equals((Object)node0));
868:       assertTrue(boolean1 == boolean0);
869:       assertEquals(4095, Node.COLUMN_MASK);
870:       assertEquals(55, Node.INFERRED_FUNCTION);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
873:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
874:       assertEquals(57, Node.REFLECTED_OBJECT);
875:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
876:       assertEquals(52, Node.LENGTH);
877:       assertEquals(53, Node.INPUT_ID);
878:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
879:       assertEquals(29, Node.JSDOC_INFO_PROP);
880:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
881:       assertEquals(56, Node.CHANGE_TIME);
882:       assertEquals(36, Node.QUOTED_PROP);
883:       assertEquals(37, Node.OPT_ARG_NAME);
884:       assertEquals(8, Node.FLAG_NO_THROWS);
885:       assertEquals(48, Node.DIRECTIVES);
886:       assertEquals(49, Node.DIRECT_EVAL);
887:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
888:       assertEquals(51, Node.STATIC_SOURCE_FILE);
889:       assertEquals(32, Node.INCRDECR_PROP);
890:       assertEquals(1, Node.DECR_FLAG);
891:       assertEquals(15, Node.NO_SIDE_EFFECTS);
892:       assertEquals(47, Node.IS_DISPATCHER);
893:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
894:       assertEquals(57, Node.LAST_PROP);
895:       assertEquals(2, Node.POST_FLAG);
896:       assertEquals(30, Node.VAR_ARGS_NAME);
897:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
898:       assertEquals(12, Node.COLUMN_BITS);
899:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
900:       assertEquals(40, Node.ORIGINALNAME_PROP);
901:       assertEquals(43, Node.IS_CONSTANT_NAME);
902:       assertEquals(50, Node.FREE_CALL);
903:       assertEquals(46, Node.IS_NAMESPACE);
904:       assertEquals(54, Node.SLASH_V);
905:       assertFalse(boolean1);
906:       assertFalse(node1.isCase());
907:       assertFalse(node1.isSwitch());
908:       assertFalse(node1.isArrayLit());
909:       assertFalse(node1.isHook());
910:       assertFalse(node1.isFor());
911:       assertFalse(node1.isDebugger());
912:       assertFalse(node1.isGetProp());
913:       assertEquals((-1), node1.getCharno());
914:       assertFalse(node1.isTry());
915:       assertFalse(node1.isGetterDef());
916:       assertFalse(node1.isObjectLit());
917:       assertFalse(node1.isAnd());
918:       assertEquals(40, node1.getType());
919:       assertFalse(node1.isNot());
920:       assertFalse(node1.isFunction());
921:       assertFalse(node1.isThis());
922:       assertFalse(node1.isRegExp());
923:       assertFalse(node1.isWith());
924:       assertFalse(node1.isCast());
925:       assertFalse(node1.isCatch());
926:       assertFalse(node1.isInstanceOf());
927:       assertFalse(node1.isThrow());
928:       assertFalse(node1.isFalse());
929:       assertFalse(node1.isIf());
930:       assertFalse(node1.isNE());
931:       assertFalse(node1.isInc());
932:       assertFalse(node1.isSetterDef());
933:       assertFalse(node1.isIn());
934:       assertFalse(node1.isContinue());
935:       assertFalse(node1.isDo());
936:       assertFalse(node1.isReturn());
937:       assertFalse(node1.isAssignAdd());
938:       assertFalse(node1.isWhile());
939:       assertFalse(node1.isBlock());
940:       assertFalse(node1.isLabel());
941:       assertEquals((-1), node1.getLineno());
942:       assertFalse(node1.isDec());
943:       assertFalse(node1.isTypeOf());
944:       assertFalse(node1.hasMoreThanOneChild());
945:       assertFalse(node1.isLabelName());
946:       assertFalse(node1.isAssign());
947:       assertFalse(node1.hasOneChild());
948:       assertFalse(node1.hasChildren());
949:       assertFalse(node1.isParamList());
950:       assertFalse(node1.isStringKey());
951:       assertTrue(node1.isString());
952:       assertEquals((-1), node1.getSourcePosition());
953:       assertFalse(node1.isNumber());
954:       assertFalse(node1.isScript());
955:       assertFalse(node1.isDefaultCase());
956:       assertFalse(node1.isVoid());
957:       assertFalse(node1.isExprResult());
958:       assertFalse(node1.isComma());
959:       assertEquals(0, node1.getChildCount());
960:       assertFalse(node1.isBreak());
961:       assertFalse(node1.isGetElem());
962:       assertFalse(node1.isCall());
963:       assertFalse(node1.isName());
964:       assertFalse(node1.isDelProp());
965:       assertFalse(node1.isNull());
966:       assertFalse(node1.isVar());
967:       assertFalse(node1.isTrue());
968:       assertFalse(node1.isOr());
969:       assertFalse(node1.isNew());
970:       assertFalse(node1.isEmpty());
971:       assertFalse(node1.isAdd());
972:       
973:       StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
974:       assertNotSame(node0, node1);
975:       assertFalse(node0.equals((Object)node1));
976:       assertEquals(54, Node.SLASH_V);
977:       assertEquals(15, Node.NO_SIDE_EFFECTS);
978:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
979:       assertEquals(30, Node.VAR_ARGS_NAME);
980:       assertEquals(52, Node.LENGTH);
981:       assertEquals(40, Node.ORIGINALNAME_PROP);
982:       assertEquals(51, Node.STATIC_SOURCE_FILE);
983:       assertEquals(57, Node.REFLECTED_OBJECT);
984:       assertEquals(49, Node.DIRECT_EVAL);
985:       assertEquals(46, Node.IS_NAMESPACE);
986:       assertEquals(37, Node.OPT_ARG_NAME);
987:       assertEquals(48, Node.DIRECTIVES);
988:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
989:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
990:       assertEquals(50, Node.FREE_CALL);
991:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
992:       assertEquals(4095, Node.COLUMN_MASK);
993:       assertEquals(1, Node.DECR_FLAG);
994:       assertEquals(12, Node.COLUMN_BITS);
995:       assertEquals(32, Node.INCRDECR_PROP);
996:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
997:       assertEquals(36, Node.QUOTED_PROP);
998:       assertEquals(53, Node.INPUT_ID);
999:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1000:       assertEquals(43, Node.IS_CONSTANT_NAME);
1001:       assertEquals(56, Node.CHANGE_TIME);
1002:       assertEquals(8, Node.FLAG_NO_THROWS);
1003:       assertEquals(2, Node.POST_FLAG);
1004:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1005:       assertEquals(39, Node.EMPTY_BLOCK);
1006:       assertEquals(47, Node.IS_DISPATCHER);
1007:       assertEquals(29, Node.JSDOC_INFO_PROP);
1008:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1009:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1010:       assertEquals(55, Node.INFERRED_FUNCTION);
1011:       assertEquals(57, Node.LAST_PROP);
1012:       assertFalse(node0.isTry());
1013:       assertFalse(node0.isTrue());
1014:       assertFalse(node0.isArrayLit());
1015:       assertFalse(node0.isDefaultCase());
1016:       assertFalse(node0.isVoid());
1017:       assertFalse(node0.isEmpty());
1018:       assertFalse(node0.isDebugger());
1019:       assertFalse(node0.isGetterDef());
1020:       assertFalse(node0.isSetterDef());
1021:       assertFalse(node0.isParamList());
1022:       assertEquals(40, node0.getType());
1023:       assertEquals(0, node0.getChildCount());
1024:       assertFalse(node0.isFunction());
1025:       assertFalse(node0.isNew());
1026:       assertFalse(node0.isAdd());
1027:       assertFalse(node0.isVar());
1028:       assertFalse(node0.isName());
1029:       assertFalse(node0.isDo());
1030:       assertFalse(node0.isNull());
1031:       assertFalse(node0.isOr());
1032:       assertFalse(node0.isGetProp());
1033:       assertFalse(node0.isReturn());
1034:       assertFalse(node0.isDelProp());
1035:       assertFalse(node0.isAssign());
1036:       assertFalse(node0.isWhile());
1037:       assertFalse(node0.isBreak());
1038:       assertFalse(node0.hasChildren());
1039:       assertFalse(node0.isGetElem());
1040:       assertFalse(node0.isCall());
1041:       assertFalse(node0.isComma());
1042:       assertFalse(node0.isDec());
1043:       assertFalse(node0.isTypeOf());
1044:       assertFalse(node0.isExprResult());
1045:       assertFalse(node0.hasOneChild());
1046:       assertFalse(node0.isNot());
1047:       assertFalse(node0.isScript());
1048:       assertEquals((-1), node0.getSourcePosition());
1049:       assertFalse(node0.isNumber());
1050:       assertFalse(node0.isObjectLit());
1051:       assertFalse(node0.isLabel());
1052:       assertFalse(node0.isAssignAdd());
1053:       assertFalse(node0.isAnd());
1054:       assertFalse(node0.isLabelName());
1055:       assertFalse(node0.isThrow());
1056:       assertFalse(node0.isCast());
1057:       assertFalse(node0.isContinue());
1058:       assertFalse(node0.isFalse());
1059:       assertFalse(node0.isHook());
1060:       assertFalse(node0.isBlock());
1061:       assertFalse(node0.isInc());
1062:       assertFalse(node0.isSwitch());
1063:       assertTrue(node0.isString());
1064:       assertFalse(node0.isCase());
1065:       assertFalse(node0.isStringKey());
1066:       assertEquals((-1), node0.getCharno());
1067:       assertFalse(node0.isIn());
1068:       assertEquals((-1), node0.getLineno());
1069:       assertFalse(node0.isInstanceOf());
1070:       assertFalse(node0.isThis());
1071:       assertFalse(node0.isNE());
1072:       assertFalse(node0.isIf());
1073:       assertFalse(node0.isWith());
1074:       assertFalse(node0.isFor());
1075:       assertFalse(node0.isCatch());
1076:       assertFalse(node0.hasMoreThanOneChild());
1077:       assertFalse(node0.isRegExp());
1078:       assertNull(staticSourceFile0);
1079:       
1080:       boolean boolean2 = node1.isScript();
1081:       assertNotSame(node1, node0);
1082:       assertFalse(node1.equals((Object)node0));
1083:       assertTrue(boolean2 == boolean1);
1084:       assertTrue(boolean2 == boolean0);
1085:       assertEquals(4095, Node.COLUMN_MASK);
1086:       assertEquals(55, Node.INFERRED_FUNCTION);
1087:       assertEquals(39, Node.EMPTY_BLOCK);
1088:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
1089:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
1090:       assertEquals(57, Node.REFLECTED_OBJECT);
1091:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
1092:       assertEquals(52, Node.LENGTH);
1093:       assertEquals(53, Node.INPUT_ID);
1094:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
1095:       assertEquals(29, Node.JSDOC_INFO_PROP);
1096:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1097:       assertEquals(56, Node.CHANGE_TIME);
1098:       assertEquals(36, Node.QUOTED_PROP);
1099:       assertEquals(37, Node.OPT_ARG_NAME);
1100:       assertEquals(8, Node.FLAG_NO_THROWS);
1101:       assertEquals(48, Node.DIRECTIVES);
1102:       assertEquals(49, Node.DIRECT_EVAL);
1103:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1104:       assertEquals(51, Node.STATIC_SOURCE_FILE);
1105:       assertEquals(32, Node.INCRDECR_PROP);
1106:       assertEquals(1, Node.DECR_FLAG);
1107:       assertEquals(15, Node.NO_SIDE_EFFECTS);
1108:       assertEquals(47, Node.IS_DISPATCHER);
1109:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
1110:       assertEquals(57, Node.LAST_PROP);
1111:       assertEquals(2, Node.POST_FLAG);
1112:       assertEquals(30, Node.VAR_ARGS_NAME);
1113:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
1114:       assertEquals(12, Node.COLUMN_BITS);
1115:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
1116:       assertEquals(40, Node.ORIGINALNAME_PROP);
1117:       assertEquals(43, Node.IS_CONSTANT_NAME);
1118:       assertEquals(50, Node.FREE_CALL);
1119:       assertEquals(46, Node.IS_NAMESPACE);
1120:       assertEquals(54, Node.SLASH_V);
1121:       assertFalse(boolean2);
1122:       assertFalse(node1.isCase());
1123:       assertFalse(node1.isSwitch());
1124:       assertFalse(node1.isArrayLit());
1125:       assertFalse(node1.isHook());
1126:       assertFalse(node1.isFor());
1127:       assertFalse(node1.isDebugger());
1128:       assertFalse(node1.isGetProp());
1129:       assertEquals((-1), node1.getCharno());
1130:       assertFalse(node1.isTry());
1131:       assertFalse(node1.isGetterDef());
1132:       assertFalse(node1.isObjectLit());
1133:       assertFalse(node1.isAnd());
1134:       assertEquals(40, node1.getType());
1135:       assertFalse(node1.isNot());
1136:       assertFalse(node1.isFunction());
1137:       assertFalse(node1.isThis());
1138:       assertFalse(node1.isRegExp());
1139:       assertFalse(node1.isWith());
1140:       assertFalse(node1.isCast());
1141:       assertFalse(node1.isCatch());
1142:       assertFalse(node1.isInstanceOf());
1143:       assertFalse(node1.isThrow());
1144:       assertFalse(node1.isFalse());
1145:       assertFalse(node1.isIf());
1146:       assertFalse(node1.isNE());
1147:       assertFalse(node1.isInc());
1148:       assertFalse(node1.isSetterDef());
1149:       assertFalse(node1.isIn());
1150:       assertFalse(node1.isContinue());
1151:       assertFalse(node1.isDo());
1152:       assertFalse(node1.isReturn());
1153:       assertFalse(node1.isAssignAdd());
1154:       assertFalse(node1.isWhile());
1155:       assertFalse(node1.isBlock());
1156:       assertFalse(node1.isLabel());
1157:       assertEquals((-1), node1.getLineno());
1158:       assertFalse(node1.isDec());
1159:       assertFalse(node1.isTypeOf());
1160:       assertFalse(node1.hasMoreThanOneChild());
1161:       assertFalse(node1.isLabelName());
1162:       assertFalse(node1.isAssign());
1163:       assertFalse(node1.hasOneChild());
1164:       assertFalse(node1.hasChildren());
1165:       assertFalse(node1.isParamList());
1166:       assertFalse(node1.isStringKey());
1167:       assertTrue(node1.isString());
1168:       assertEquals((-1), node1.getSourcePosition());
1169:       assertFalse(node1.isNumber());
1170:       assertFalse(node1.isScript());
1171:       assertFalse(node1.isDefaultCase());
1172:       assertFalse(node1.isVoid());
1173:       assertFalse(node1.isExprResult());
1174:       assertFalse(node1.isComma());
1175:       assertEquals(0, node1.getChildCount());
1176:       assertFalse(node1.isBreak());
1177:       assertFalse(node1.isGetElem());
1178:       assertFalse(node1.isCall());
1179:       assertFalse(node1.isName());
1180:       assertFalse(node1.isDelProp());
1181:       assertFalse(node1.isNull());
1182:       assertFalse(node1.isVar());
1183:       assertFalse(node1.isTrue());
1184:       assertFalse(node1.isOr());
1185:       assertFalse(node1.isNew());
1186:       assertFalse(node1.isEmpty());
1187:       assertFalse(node1.isAdd());
1188:   }
1189: }
RegularFileObject[/tmp/EvoSuite_131_1628256086657/com/google/javascript/rhino/Node_131_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:26 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_131_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_131_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_131_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:26.887 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(".");
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertNotNull(iterable0);

String string0 = node0.toString();
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals("STRING .", string0);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertNotNull(string0);

Node node1 = Node.newString("x#");
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertTrue(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = new Node.NodeMismatch(node0, node1);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertTrue(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node0.isEquivalentToTyped(node1);
assertNotSame(node0, node1);
assertNotSame(node1, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean0);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertTrue(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());

boolean boolean1 = node1.isCall();
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean1 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean1);
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertTrue(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());

StaticSourceFile staticSourceFile0 = node0.getStaticSourceFile();
assertNotSame(node0, node1);
assertFalse(node0.equals((Object)node1));
assertEquals(54, Node.SLASH_V);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(52, Node.LENGTH);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.DECR_FLAG);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isTry());
assertFalse(node0.isTrue());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isVoid());
assertFalse(node0.isEmpty());
assertFalse(node0.isDebugger());
assertFalse(node0.isGetterDef());
assertFalse(node0.isSetterDef());
assertFalse(node0.isParamList());
assertEquals(40, node0.getType());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isFunction());
assertFalse(node0.isNew());
assertFalse(node0.isAdd());
assertFalse(node0.isVar());
assertFalse(node0.isName());
assertFalse(node0.isDo());
assertFalse(node0.isNull());
assertFalse(node0.isOr());
assertFalse(node0.isGetProp());
assertFalse(node0.isReturn());
assertFalse(node0.isDelProp());
assertFalse(node0.isAssign());
assertFalse(node0.isWhile());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isGetElem());
assertFalse(node0.isCall());
assertFalse(node0.isComma());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isExprResult());
assertFalse(node0.hasOneChild());
assertFalse(node0.isNot());
assertFalse(node0.isScript());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isNumber());
assertFalse(node0.isObjectLit());
assertFalse(node0.isLabel());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isAnd());
assertFalse(node0.isLabelName());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isContinue());
assertFalse(node0.isFalse());
assertFalse(node0.isHook());
assertFalse(node0.isBlock());
assertFalse(node0.isInc());
assertFalse(node0.isSwitch());
assertTrue(node0.isString());
assertFalse(node0.isCase());
assertFalse(node0.isStringKey());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isIn());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isThis());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isWith());
assertFalse(node0.isFor());
assertFalse(node0.isCatch());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isRegExp());
assertNull(staticSourceFile0);

boolean boolean2 = node1.isScript();
assertNotSame(node1, node0);
assertFalse(node1.equals((Object)node0));
assertTrue(boolean2 == boolean1);
assertTrue(boolean2 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(52, Node.LENGTH);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean2);
assertFalse(node1.isCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isArrayLit());
assertFalse(node1.isHook());
assertFalse(node1.isFor());
assertFalse(node1.isDebugger());
assertFalse(node1.isGetProp());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isTry());
assertFalse(node1.isGetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertEquals(40, node1.getType());
assertFalse(node1.isNot());
assertFalse(node1.isFunction());
assertFalse(node1.isThis());
assertFalse(node1.isRegExp());
assertFalse(node1.isWith());
assertFalse(node1.isCast());
assertFalse(node1.isCatch());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isThrow());
assertFalse(node1.isFalse());
assertFalse(node1.isIf());
assertFalse(node1.isNE());
assertFalse(node1.isInc());
assertFalse(node1.isSetterDef());
assertFalse(node1.isIn());
assertFalse(node1.isContinue());
assertFalse(node1.isDo());
assertFalse(node1.isReturn());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isWhile());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasChildren());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertTrue(node1.isString());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isNumber());
assertFalse(node1.isScript());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isVoid());
assertFalse(node1.isExprResult());
assertFalse(node1.isComma());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isBreak());
assertFalse(node1.isGetElem());
assertFalse(node1.isCall());
assertFalse(node1.isName());
assertFalse(node1.isDelProp());
assertFalse(node1.isNull());
assertFalse(node1.isVar());
assertFalse(node1.isTrue());
assertFalse(node1.isOr());
assertFalse(node1.isNew());
assertFalse(node1.isEmpty());
assertFalse(node1.isAdd());


[MASTER] 13:21:27.535 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_137_1628256087461/com/google/javascript/rhino/Node_137_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_137_1628256087461/com/google/javascript/rhino/Node_137_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:27.535 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:27.535 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:27.535 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 13:21:27.536 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_137_1628256087461/com/google/javascript/rhino/Node_137_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:27 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_137_tmp__ESTest extends Node_137_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(".");
21:       assertEquals(55, Node.INFERRED_FUNCTION);
22:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
23:       assertEquals(4095, Node.COLUMN_MASK);
24:       assertEquals(8, Node.FLAG_NO_THROWS);
25:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
26:       assertEquals(43, Node.IS_CONSTANT_NAME);
27:       assertEquals(36, Node.QUOTED_PROP);
28:       assertEquals(48, Node.DIRECTIVES);
29:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
30:       assertEquals(40, Node.ORIGINALNAME_PROP);
31:       assertEquals(53, Node.INPUT_ID);
32:       assertEquals(57, Node.REFLECTED_OBJECT);
33:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
34:       assertEquals(52, Node.LENGTH);
35:       assertEquals(15, Node.NO_SIDE_EFFECTS);
36:       assertEquals(57, Node.LAST_PROP);
37:       assertEquals(47, Node.IS_DISPATCHER);
38:       assertEquals(29, Node.JSDOC_INFO_PROP);
39:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
40:       assertEquals(39, Node.EMPTY_BLOCK);
41:       assertEquals(46, Node.IS_NAMESPACE);
42:       assertEquals(51, Node.STATIC_SOURCE_FILE);
43:       assertEquals(12, Node.COLUMN_BITS);
44:       assertEquals(2, Node.POST_FLAG);
45:       assertEquals(30, Node.VAR_ARGS_NAME);
46:       assertEquals(56, Node.CHANGE_TIME);
47:       assertEquals(54, Node.SLASH_V);
48:       assertEquals(37, Node.OPT_ARG_NAME);
49:       assertEquals(49, Node.DIRECT_EVAL);
50:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
51:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
52:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
55:       assertEquals(1, Node.DECR_FLAG);
56:       assertEquals(32, Node.INCRDECR_PROP);
57:       assertFalse(node0.isContinue());
58:       assertFalse(node0.hasMoreThanOneChild());
59:       assertEquals((-1), node0.getLineno());
60:       assertFalse(node0.isWhile());
61:       assertFalse(node0.isAssignAdd());
62:       assertFalse(node0.isDo());
63:       assertFalse(node0.isAdd());
64:       assertFalse(node0.isNumber());
65:       assertEquals((-1), node0.getSourcePosition());
66:       assertFalse(node0.isOr());
67:       assertFalse(node0.isCall());
68:       assertFalse(node0.isGetElem());
69:       assertTrue(node0.isString());
70:       assertFalse(node0.hasOneChild());
71:       assertFalse(node0.isName());
72:       assertFalse(node0.isExprResult());
73:       assertFalse(node0.isBlock());
74:       assertFalse(node0.isReturn());
75:       assertFalse(node0.isWith());
76:       assertFalse(node0.hasChildren());
77:       assertFalse(node0.isTypeOf());
78:       assertFalse(node0.isDec());
79:       assertFalse(node0.isAssign());
80:       assertFalse(node0.isDefaultCase());
81:       assertFalse(node0.isTrue());
82:       assertFalse(node0.isParamList());
83:       assertFalse(node0.isScript());
84:       assertFalse(node0.isNull());
85:       assertFalse(node0.isStringKey());
86:       assertFalse(node0.isEmpty());
87:       assertFalse(node0.isVar());
88:       assertFalse(node0.isArrayLit());
89:       assertFalse(node0.isNew());
90:       assertFalse(node0.isLabelName());
91:       assertFalse(node0.isLabel());
92:       assertEquals(0, node0.getChildCount());
93:       assertFalse(node0.isCase());
94:       assertFalse(node0.isInc());
95:       assertEquals((-1), node0.getCharno());
96:       assertFalse(node0.isSwitch());
97:       assertFalse(node0.isNE());
98:       assertFalse(node0.isGetterDef());
99:       assertFalse(node0.isIn());
100:       assertFalse(node0.isFor());
101:       assertFalse(node0.isDelProp());
102:       assertFalse(node0.isIf());
103:       assertFalse(node0.isBreak());
104:       assertFalse(node0.isVoid());
105:       assertFalse(node0.isTry());
106:       assertFalse(node0.isThis());
107:       assertFalse(node0.isHook());
108:       assertFalse(node0.isRegExp());
109:       assertFalse(node0.isComma());
110:       assertFalse(node0.isObjectLit());
111:       assertFalse(node0.isAnd());
112:       assertEquals(40, node0.getType());
113:       assertFalse(node0.isCatch());
114:       assertFalse(node0.isInstanceOf());
115:       assertFalse(node0.isDebugger());
116:       assertFalse(node0.isSetterDef());
117:       assertFalse(node0.isGetProp());
118:       assertFalse(node0.isNot());
119:       assertFalse(node0.isFalse());
120:       assertFalse(node0.isThrow());
121:       assertFalse(node0.isCast());
122:       assertFalse(node0.isFunction());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(55, Node.INFERRED_FUNCTION);
128:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
129:       assertEquals(4095, Node.COLUMN_MASK);
130:       assertEquals(8, Node.FLAG_NO_THROWS);
131:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
132:       assertEquals(43, Node.IS_CONSTANT_NAME);
133:       assertEquals(36, Node.QUOTED_PROP);
134:       assertEquals(48, Node.DIRECTIVES);
135:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
136:       assertEquals(40, Node.ORIGINALNAME_PROP);
137:       assertEquals(53, Node.INPUT_ID);
138:       assertEquals(57, Node.REFLECTED_OBJECT);
139:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
140:       assertEquals(52, Node.LENGTH);
141:       assertEquals(15, Node.NO_SIDE_EFFECTS);
142:       assertEquals(57, Node.LAST_PROP);
143:       assertEquals(47, Node.IS_DISPATCHER);
144:       assertEquals(29, Node.JSDOC_INFO_PROP);
145:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
146:       assertEquals(39, Node.EMPTY_BLOCK);
147:       assertEquals(46, Node.IS_NAMESPACE);
148:       assertEquals(51, Node.STATIC_SOURCE_FILE);
149:       assertEquals(12, Node.COLUMN_BITS);
150:       assertEquals(2, Node.POST_FLAG);
151:       assertEquals(30, Node.VAR_ARGS_NAME);
152:       assertEquals(56, Node.CHANGE_TIME);
153:       assertEquals(54, Node.SLASH_V);
154:       assertEquals(37, Node.OPT_ARG_NAME);
155:       assertEquals(49, Node.DIRECT_EVAL);
156:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
157:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
158:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
161:       assertEquals(1, Node.DECR_FLAG);
162:       assertEquals(32, Node.INCRDECR_PROP);
163:       assertFalse(node0.isContinue());
164:       assertFalse(node0.hasMoreThanOneChild());
165:       assertEquals((-1), node0.getLineno());
166:       assertFalse(node0.isWhile());
167:       assertFalse(node0.isAssignAdd());
168:       assertFalse(node0.isDo());
169:       assertFalse(node0.isAdd());
170:       assertFalse(node0.isNumber());
171:       assertEquals((-1), node0.getSourcePosition());
172:       assertFalse(node0.isOr());
173:       assertFalse(node0.isCall());
174:       assertFalse(node0.isGetElem());
175:       assertTrue(node0.isString());
176:       assertFalse(node0.hasOneChild());
177:       assertFalse(node0.isName());
178:       assertFalse(node0.isExprResult());
179:       assertFalse(node0.isBlock());
180:       assertFalse(node0.isReturn());
181:       assertFalse(node0.isWith());
182:       assertFalse(node0.hasChildren());
183:       assertFalse(node0.isTypeOf());
184:       assertFalse(node0.isDec());
185:       assertFalse(node0.isAssign());
186:       assertFalse(node0.isDefaultCase());
187:       assertFalse(node0.isTrue());
188:       assertFalse(node0.isParamList());
189:       assertFalse(node0.isScript());
190:       assertFalse(node0.isNull());
191:       assertFalse(node0.isStringKey());
192:       assertFalse(node0.isEmpty());
193:       assertFalse(node0.isVar());
194:       assertFalse(node0.isArrayLit());
195:       assertFalse(node0.isNew());
196:       assertFalse(node0.isLabelName());
197:       assertFalse(node0.isLabel());
198:       assertEquals(0, node0.getChildCount());
199:       assertFalse(node0.isCase());
200:       assertFalse(node0.isInc());
201:       assertEquals((-1), node0.getCharno());
202:       assertFalse(node0.isSwitch());
203:       assertFalse(node0.isNE());
204:       assertFalse(node0.isGetterDef());
205:       assertFalse(node0.isIn());
206:       assertFalse(node0.isFor());
207:       assertFalse(node0.isDelProp());
208:       assertFalse(node0.isIf());
209:       assertFalse(node0.isBreak());
210:       assertFalse(node0.isVoid());
211:       assertFalse(node0.isTry());
212:       assertFalse(node0.isThis());
213:       assertFalse(node0.isHook());
214:       assertFalse(node0.isRegExp());
215:       assertFalse(node0.isComma());
216:       assertFalse(node0.isObjectLit());
217:       assertFalse(node0.isAnd());
218:       assertEquals(40, node0.getType());
219:       assertFalse(node0.isCatch());
220:       assertFalse(node0.isInstanceOf());
221:       assertFalse(node0.isDebugger());
222:       assertFalse(node0.isSetterDef());
223:       assertFalse(node0.isGetProp());
224:       assertFalse(node0.isNot());
225:       assertFalse(node0.isFalse());
226:       assertFalse(node0.isThrow());
227:       assertFalse(node0.isCast());
228:       assertFalse(node0.isFunction());
229:       assertNotNull(iterable0);
230:       
231:       String string0 = node0.toString();
232:       assertEquals(55, Node.INFERRED_FUNCTION);
233:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
234:       assertEquals(4095, Node.COLUMN_MASK);
235:       assertEquals(8, Node.FLAG_NO_THROWS);
236:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
237:       assertEquals(43, Node.IS_CONSTANT_NAME);
238:       assertEquals(36, Node.QUOTED_PROP);
239:       assertEquals(48, Node.DIRECTIVES);
240:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
241:       assertEquals(40, Node.ORIGINALNAME_PROP);
242:       assertEquals(53, Node.INPUT_ID);
243:       assertEquals(57, Node.REFLECTED_OBJECT);
244:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
245:       assertEquals(52, Node.LENGTH);
246:       assertEquals(15, Node.NO_SIDE_EFFECTS);
247:       assertEquals(57, Node.LAST_PROP);
248:       assertEquals(47, Node.IS_DISPATCHER);
249:       assertEquals(29, Node.JSDOC_INFO_PROP);
250:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
251:       assertEquals(39, Node.EMPTY_BLOCK);
252:       assertEquals(46, Node.IS_NAMESPACE);
253:       assertEquals(51, Node.STATIC_SOURCE_FILE);
254:       assertEquals(12, Node.COLUMN_BITS);
255:       assertEquals(2, Node.POST_FLAG);
256:       assertEquals(30, Node.VAR_ARGS_NAME);
257:       assertEquals(56, Node.CHANGE_TIME);
258:       assertEquals(54, Node.SLASH_V);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(49, Node.DIRECT_EVAL);
261:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
262:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
263:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
266:       assertEquals(1, Node.DECR_FLAG);
267:       assertEquals(32, Node.INCRDECR_PROP);
268:       assertEquals("STRING .", string0);
269:       assertFalse(node0.isContinue());
270:       assertFalse(node0.hasMoreThanOneChild());
271:       assertEquals((-1), node0.getLineno());
272:       assertFalse(node0.isWhile());
273:       assertFalse(node0.isAssignAdd());
274:       assertFalse(node0.isDo());
275:       assertFalse(node0.isAdd());
276:       assertFalse(node0.isNumber());
277:       assertEquals((-1), node0.getSourcePosition());
278:       assertFalse(node0.isOr());
279:       assertFalse(node0.isCall());
280:       assertFalse(node0.isGetElem());
281:       assertTrue(node0.isString());
282:       assertFalse(node0.hasOneChild());
283:       assertFalse(node0.isName());
284:       assertFalse(node0.isExprResult());
285:       assertFalse(node0.isBlock());
286:       assertFalse(node0.isReturn());
287:       assertFalse(node0.isWith());
288:       assertFalse(node0.hasChildren());
289:       assertFalse(node0.isTypeOf());
290:       assertFalse(node0.isDec());
291:       assertFalse(node0.isAssign());
292:       assertFalse(node0.isDefaultCase());
293:       assertFalse(node0.isTrue());
294:       assertFalse(node0.isParamList());
295:       assertFalse(node0.isScript());
296:       assertFalse(node0.isNull());
297:       assertFalse(node0.isStringKey());
298:       assertFalse(node0.isEmpty());
299:       assertFalse(node0.isVar());
300:       assertFalse(node0.isArrayLit());
301:       assertFalse(node0.isNew());
302:       assertFalse(node0.isLabelName());
303:       assertFalse(node0.isLabel());
304:       assertEquals(0, node0.getChildCount());
305:       assertFalse(node0.isCase());
306:       assertFalse(node0.isInc());
307:       assertEquals((-1), node0.getCharno());
308:       assertFalse(node0.isSwitch());
309:       assertFalse(node0.isNE());
310:       assertFalse(node0.isGetterDef());
311:       assertFalse(node0.isIn());
312:       assertFalse(node0.isFor());
313:       assertFalse(node0.isDelProp());
314:       assertFalse(node0.isIf());
315:       assertFalse(node0.isBreak());
316:       assertFalse(node0.isVoid());
317:       assertFalse(node0.isTry());
318:       assertFalse(node0.isThis());
319:       assertFalse(node0.isHook());
320:       assertFalse(node0.isRegExp());
321:       assertFalse(node0.isComma());
322:       assertFalse(node0.isObjectLit());
323:       assertFalse(node0.isAnd());
324:       assertEquals(40, node0.getType());
325:       assertFalse(node0.isCatch());
326:       assertFalse(node0.isInstanceOf());
327:       assertFalse(node0.isDebugger());
328:       assertFalse(node0.isSetterDef());
329:       assertFalse(node0.isGetProp());
330:       assertFalse(node0.isNot());
331:       assertFalse(node0.isFalse());
332:       assertFalse(node0.isThrow());
333:       assertFalse(node0.isCast());
334:       assertFalse(node0.isFunction());
335:       assertNotNull(string0);
336:       
337:       Node node1 = new Node(37, 55, 47);
338:       assertFalse(node1.equals((Object)node0));
339:       assertEquals(48, Node.DIRECTIVES);
340:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
341:       assertEquals(8, Node.FLAG_NO_THROWS);
342:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
343:       assertEquals(50, Node.FREE_CALL);
344:       assertEquals(55, Node.INFERRED_FUNCTION);
345:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
346:       assertEquals(39, Node.EMPTY_BLOCK);
347:       assertEquals(54, Node.SLASH_V);
348:       assertEquals(43, Node.IS_CONSTANT_NAME);
349:       assertEquals(30, Node.VAR_ARGS_NAME);
350:       assertEquals(40, Node.ORIGINALNAME_PROP);
351:       assertEquals(56, Node.CHANGE_TIME);
352:       assertEquals(47, Node.IS_DISPATCHER);
353:       assertEquals(12, Node.COLUMN_BITS);
354:       assertEquals(46, Node.IS_NAMESPACE);
355:       assertEquals(2, Node.POST_FLAG);
356:       assertEquals(51, Node.STATIC_SOURCE_FILE);
357:       assertEquals(1, Node.DECR_FLAG);
358:       assertEquals(29, Node.JSDOC_INFO_PROP);
359:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
360:       assertEquals(15, Node.NO_SIDE_EFFECTS);
361:       assertEquals(57, Node.LAST_PROP);
362:       assertEquals(32, Node.INCRDECR_PROP);
363:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
364:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
365:       assertEquals(53, Node.INPUT_ID);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
368:       assertEquals(57, Node.REFLECTED_OBJECT);
369:       assertEquals(36, Node.QUOTED_PROP);
370:       assertEquals(49, Node.DIRECT_EVAL);
371:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
372:       assertEquals(4095, Node.COLUMN_MASK);
373:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
374:       assertEquals(37, Node.OPT_ARG_NAME);
375:       assertFalse(node1.isOr());
376:       assertFalse(node1.hasMoreThanOneChild());
377:       assertFalse(node1.isAssignAdd());
378:       assertFalse(node1.isContinue());
379:       assertFalse(node1.isWhile());
380:       assertFalse(node1.isDec());
381:       assertFalse(node1.isAssign());
382:       assertFalse(node1.isDo());
383:       assertFalse(node1.isTypeOf());
384:       assertFalse(node1.isBlock());
385:       assertFalse(node1.isLabel());
386:       assertFalse(node1.hasChildren());
387:       assertFalse(node1.isReturn());
388:       assertFalse(node1.isExprResult());
389:       assertFalse(node1.isAdd());
390:       assertFalse(node1.isNew());
391:       assertFalse(node1.isGetElem());
392:       assertFalse(node1.isName());
393:       assertFalse(node1.isNull());
394:       assertFalse(node1.isSetterDef());
395:       assertFalse(node1.isGetProp());
396:       assertFalse(node1.isFalse());
397:       assertFalse(node1.isFunction());
398:       assertEquals(47, node1.getCharno());
399:       assertFalse(node1.isThrow());
400:       assertFalse(node1.isComma());
401:       assertFalse(node1.isCast());
402:       assertFalse(node1.isString());
403:       assertFalse(node1.isNot());
404:       assertFalse(node1.isDebugger());
405:       assertFalse(node1.isObjectLit());
406:       assertFalse(node1.isAnd());
407:       assertFalse(node1.isIn());
408:       assertFalse(node1.isCase());
409:       assertEquals(37, node1.getType());
410:       assertFalse(node1.isFor());
411:       assertFalse(node1.isVoid());
412:       assertFalse(node1.isEmpty());
413:       assertFalse(node1.isInc());
414:       assertFalse(node1.isDelProp());
415:       assertFalse(node1.isBreak());
416:       assertEquals(55, node1.getLineno());
417:       assertTrue(node1.isCall());
418:       assertFalse(node1.isIf());
419:       assertFalse(node1.isTrue());
420:       assertFalse(node1.isNE());
421:       assertEquals(0, node1.getChildCount());
422:       assertFalse(node1.isInstanceOf());
423:       assertEquals(225327, node1.getSourcePosition());
424:       assertFalse(node1.isCatch());
425:       assertFalse(node1.isRegExp());
426:       assertFalse(node1.isDefaultCase());
427:       assertFalse(node1.isWith());
428:       assertFalse(node1.isVar());
429:       assertFalse(node1.isThis());
430:       assertFalse(node1.isHook());
431:       assertFalse(node1.hasOneChild());
432:       assertFalse(node1.isTry());
433:       assertFalse(node1.isArrayLit());
434:       assertFalse(node1.isScript());
435:       assertFalse(node1.isGetterDef());
436:       assertFalse(node1.isLabelName());
437:       assertFalse(node1.isNumber());
438:       assertFalse(node1.isSwitch());
439:       assertFalse(node1.isParamList());
440:       assertFalse(node1.isStringKey());
441:       assertNotNull(node1);
442:       
443:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
444:       assertFalse(node0.equals((Object)node1));
445:       assertFalse(node1.equals((Object)node0));
446:       assertEquals(55, Node.INFERRED_FUNCTION);
447:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
448:       assertEquals(4095, Node.COLUMN_MASK);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
451:       assertEquals(43, Node.IS_CONSTANT_NAME);
452:       assertEquals(36, Node.QUOTED_PROP);
453:       assertEquals(48, Node.DIRECTIVES);
454:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
455:       assertEquals(40, Node.ORIGINALNAME_PROP);
456:       assertEquals(53, Node.INPUT_ID);
457:       assertEquals(57, Node.REFLECTED_OBJECT);
458:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
459:       assertEquals(52, Node.LENGTH);
460:       assertEquals(15, Node.NO_SIDE_EFFECTS);
461:       assertEquals(57, Node.LAST_PROP);
462:       assertEquals(47, Node.IS_DISPATCHER);
463:       assertEquals(29, Node.JSDOC_INFO_PROP);
464:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
465:       assertEquals(39, Node.EMPTY_BLOCK);
466:       assertEquals(46, Node.IS_NAMESPACE);
467:       assertEquals(51, Node.STATIC_SOURCE_FILE);
468:       assertEquals(12, Node.COLUMN_BITS);
469:       assertEquals(2, Node.POST_FLAG);
470:       assertEquals(30, Node.VAR_ARGS_NAME);
471:       assertEquals(56, Node.CHANGE_TIME);
472:       assertEquals(54, Node.SLASH_V);
473:       assertEquals(37, Node.OPT_ARG_NAME);
474:       assertEquals(49, Node.DIRECT_EVAL);
475:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
476:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
477:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
478:       assertEquals(50, Node.FREE_CALL);
479:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
480:       assertEquals(1, Node.DECR_FLAG);
481:       assertEquals(32, Node.INCRDECR_PROP);
482:       assertEquals(48, Node.DIRECTIVES);
483:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
484:       assertEquals(8, Node.FLAG_NO_THROWS);
485:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
486:       assertEquals(50, Node.FREE_CALL);
487:       assertEquals(55, Node.INFERRED_FUNCTION);
488:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
489:       assertEquals(39, Node.EMPTY_BLOCK);
490:       assertEquals(54, Node.SLASH_V);
491:       assertEquals(43, Node.IS_CONSTANT_NAME);
492:       assertEquals(30, Node.VAR_ARGS_NAME);
493:       assertEquals(40, Node.ORIGINALNAME_PROP);
494:       assertEquals(56, Node.CHANGE_TIME);
495:       assertEquals(47, Node.IS_DISPATCHER);
496:       assertEquals(12, Node.COLUMN_BITS);
497:       assertEquals(46, Node.IS_NAMESPACE);
498:       assertEquals(2, Node.POST_FLAG);
499:       assertEquals(51, Node.STATIC_SOURCE_FILE);
500:       assertEquals(1, Node.DECR_FLAG);
501:       assertEquals(29, Node.JSDOC_INFO_PROP);
502:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
503:       assertEquals(15, Node.NO_SIDE_EFFECTS);
504:       assertEquals(57, Node.LAST_PROP);
505:       assertEquals(32, Node.INCRDECR_PROP);
506:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
507:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
508:       assertEquals(53, Node.INPUT_ID);
509:       assertEquals(52, Node.LENGTH);
510:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
511:       assertEquals(57, Node.REFLECTED_OBJECT);
512:       assertEquals(36, Node.QUOTED_PROP);
513:       assertEquals(49, Node.DIRECT_EVAL);
514:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
515:       assertEquals(4095, Node.COLUMN_MASK);
516:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
517:       assertEquals(37, Node.OPT_ARG_NAME);
518:       assertFalse(node0.isContinue());
519:       assertFalse(node0.hasMoreThanOneChild());
520:       assertEquals((-1), node0.getLineno());
521:       assertFalse(node0.isWhile());
522:       assertFalse(node0.isAssignAdd());
523:       assertFalse(node0.isDo());
524:       assertFalse(node0.isAdd());
525:       assertFalse(node0.isNumber());
526:       assertEquals((-1), node0.getSourcePosition());
527:       assertFalse(node0.isOr());
528:       assertFalse(node0.isCall());
529:       assertFalse(node0.isGetElem());
530:       assertTrue(node0.isString());
531:       assertFalse(node0.hasOneChild());
532:       assertFalse(node0.isName());
533:       assertFalse(node0.isExprResult());
534:       assertFalse(node0.isBlock());
535:       assertFalse(node0.isReturn());
536:       assertFalse(node0.isWith());
537:       assertFalse(node0.hasChildren());
538:       assertFalse(node0.isTypeOf());
539:       assertFalse(node0.isDec());
540:       assertFalse(node0.isAssign());
541:       assertFalse(node0.isDefaultCase());
542:       assertFalse(node0.isTrue());
543:       assertFalse(node0.isParamList());
544:       assertFalse(node0.isScript());
545:       assertFalse(node0.isNull());
546:       assertFalse(node0.isStringKey());
547:       assertFalse(node0.isEmpty());
548:       assertFalse(node0.isVar());
549:       assertFalse(node0.isArrayLit());
550:       assertFalse(node0.isNew());
551:       assertFalse(node0.isLabelName());
552:       assertFalse(node0.isLabel());
553:       assertEquals(0, node0.getChildCount());
554:       assertFalse(node0.isCase());
555:       assertFalse(node0.isInc());
556:       assertEquals((-1), node0.getCharno());
557:       assertFalse(node0.isSwitch());
558:       assertFalse(node0.isNE());
559:       assertFalse(node0.isGetterDef());
560:       assertFalse(node0.isIn());
561:       assertFalse(node0.isFor());
562:       assertFalse(node0.isDelProp());
563:       assertFalse(node0.isIf());
564:       assertFalse(node0.isBreak());
565:       assertFalse(node0.isVoid());
566:       assertFalse(node0.isTry());
567:       assertFalse(node0.isThis());
568:       assertFalse(node0.isHook());
569:       assertFalse(node0.isRegExp());
570:       assertFalse(node0.isComma());
571:       assertFalse(node0.isObjectLit());
572:       assertFalse(node0.isAnd());
573:       assertEquals(40, node0.getType());
574:       assertFalse(node0.isCatch());
575:       assertFalse(node0.isInstanceOf());
576:       assertFalse(node0.isDebugger());
577:       assertFalse(node0.isSetterDef());
578:       assertFalse(node0.isGetProp());
579:       assertFalse(node0.isNot());
580:       assertFalse(node0.isFalse());
581:       assertFalse(node0.isThrow());
582:       assertFalse(node0.isCast());
583:       assertFalse(node0.isFunction());
584:       assertFalse(node1.isOr());
585:       assertFalse(node1.hasMoreThanOneChild());
586:       assertFalse(node1.isAssignAdd());
587:       assertFalse(node1.isContinue());
588:       assertFalse(node1.isWhile());
589:       assertFalse(node1.isDec());
590:       assertFalse(node1.isAssign());
591:       assertFalse(node1.isDo());
592:       assertFalse(node1.isTypeOf());
593:       assertFalse(node1.isBlock());
594:       assertFalse(node1.isLabel());
595:       assertFalse(node1.hasChildren());
596:       assertFalse(node1.isReturn());
597:       assertFalse(node1.isExprResult());
598:       assertFalse(node1.isAdd());
599:       assertFalse(node1.isNew());
600:       assertFalse(node1.isGetElem());
601:       assertFalse(node1.isName());
602:       assertFalse(node1.isNull());
603:       assertFalse(node1.isSetterDef());
604:       assertFalse(node1.isGetProp());
605:       assertFalse(node1.isFalse());
606:       assertFalse(node1.isFunction());
607:       assertEquals(47, node1.getCharno());
608:       assertFalse(node1.isThrow());
609:       assertFalse(node1.isComma());
610:       assertFalse(node1.isCast());
611:       assertFalse(node1.isString());
612:       assertFalse(node1.isNot());
613:       assertFalse(node1.isDebugger());
614:       assertFalse(node1.isObjectLit());
615:       assertFalse(node1.isAnd());
616:       assertFalse(node1.isIn());
617:       assertFalse(node1.isCase());
618:       assertEquals(37, node1.getType());
619:       assertFalse(node1.isFor());
620:       assertFalse(node1.isVoid());
621:       assertFalse(node1.isEmpty());
622:       assertFalse(node1.isInc());
623:       assertFalse(node1.isDelProp());
624:       assertFalse(node1.isBreak());
625:       assertEquals(55, node1.getLineno());
626:       assertTrue(node1.isCall());
627:       assertFalse(node1.isIf());
628:       assertFalse(node1.isTrue());
629:       assertFalse(node1.isNE());
630:       assertEquals(0, node1.getChildCount());
631:       assertFalse(node1.isInstanceOf());
632:       assertEquals(225327, node1.getSourcePosition());
633:       assertFalse(node1.isCatch());
634:       assertFalse(node1.isRegExp());
635:       assertFalse(node1.isDefaultCase());
636:       assertFalse(node1.isWith());
637:       assertFalse(node1.isVar());
638:       assertFalse(node1.isThis());
639:       assertFalse(node1.isHook());
640:       assertFalse(node1.hasOneChild());
641:       assertFalse(node1.isTry());
642:       assertFalse(node1.isArrayLit());
643:       assertFalse(node1.isScript());
644:       assertFalse(node1.isGetterDef());
645:       assertFalse(node1.isLabelName());
646:       assertFalse(node1.isNumber());
647:       assertFalse(node1.isSwitch());
648:       assertFalse(node1.isParamList());
649:       assertFalse(node1.isStringKey());
650:       assertNotNull(node_NodeMismatch0);
651:       
652:       boolean boolean0 = node1.isEquivalentToTyped(node0);
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(node1.equals((Object)node0));
655:       assertEquals(55, Node.INFERRED_FUNCTION);
656:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
657:       assertEquals(4095, Node.COLUMN_MASK);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
660:       assertEquals(43, Node.IS_CONSTANT_NAME);
661:       assertEquals(36, Node.QUOTED_PROP);
662:       assertEquals(48, Node.DIRECTIVES);
663:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
664:       assertEquals(40, Node.ORIGINALNAME_PROP);
665:       assertEquals(53, Node.INPUT_ID);
666:       assertEquals(57, Node.REFLECTED_OBJECT);
667:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
668:       assertEquals(52, Node.LENGTH);
669:       assertEquals(15, Node.NO_SIDE_EFFECTS);
670:       assertEquals(57, Node.LAST_PROP);
671:       assertEquals(47, Node.IS_DISPATCHER);
672:       assertEquals(29, Node.JSDOC_INFO_PROP);
673:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
674:       assertEquals(39, Node.EMPTY_BLOCK);
675:       assertEquals(46, Node.IS_NAMESPACE);
676:       assertEquals(51, Node.STATIC_SOURCE_FILE);
677:       assertEquals(12, Node.COLUMN_BITS);
678:       assertEquals(2, Node.POST_FLAG);
679:       assertEquals(30, Node.VAR_ARGS_NAME);
680:       assertEquals(56, Node.CHANGE_TIME);
681:       assertEquals(54, Node.SLASH_V);
682:       assertEquals(37, Node.OPT_ARG_NAME);
683:       assertEquals(49, Node.DIRECT_EVAL);
684:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
685:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
686:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
687:       assertEquals(50, Node.FREE_CALL);
688:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
689:       assertEquals(1, Node.DECR_FLAG);
690:       assertEquals(32, Node.INCRDECR_PROP);
691:       assertEquals(48, Node.DIRECTIVES);
692:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
693:       assertEquals(8, Node.FLAG_NO_THROWS);
694:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
695:       assertEquals(50, Node.FREE_CALL);
696:       assertEquals(55, Node.INFERRED_FUNCTION);
697:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
698:       assertEquals(39, Node.EMPTY_BLOCK);
699:       assertEquals(54, Node.SLASH_V);
700:       assertEquals(43, Node.IS_CONSTANT_NAME);
701:       assertEquals(30, Node.VAR_ARGS_NAME);
702:       assertEquals(40, Node.ORIGINALNAME_PROP);
703:       assertEquals(56, Node.CHANGE_TIME);
704:       assertEquals(47, Node.IS_DISPATCHER);
705:       assertEquals(12, Node.COLUMN_BITS);
706:       assertEquals(46, Node.IS_NAMESPACE);
707:       assertEquals(2, Node.POST_FLAG);
708:       assertEquals(51, Node.STATIC_SOURCE_FILE);
709:       assertEquals(1, Node.DECR_FLAG);
710:       assertEquals(29, Node.JSDOC_INFO_PROP);
711:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
712:       assertEquals(15, Node.NO_SIDE_EFFECTS);
713:       assertEquals(57, Node.LAST_PROP);
714:       assertEquals(32, Node.INCRDECR_PROP);
715:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
716:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
717:       assertEquals(53, Node.INPUT_ID);
718:       assertEquals(52, Node.LENGTH);
719:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
720:       assertEquals(57, Node.REFLECTED_OBJECT);
721:       assertEquals(36, Node.QUOTED_PROP);
722:       assertEquals(49, Node.DIRECT_EVAL);
723:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
724:       assertEquals(4095, Node.COLUMN_MASK);
725:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
726:       assertEquals(37, Node.OPT_ARG_NAME);
727:       assertFalse(boolean0);
728:       assertFalse(node0.isContinue());
729:       assertFalse(node0.hasMoreThanOneChild());
730:       assertEquals((-1), node0.getLineno());
731:       assertFalse(node0.isWhile());
732:       assertFalse(node0.isAssignAdd());
733:       assertFalse(node0.isDo());
734:       assertFalse(node0.isAdd());
735:       assertFalse(node0.isNumber());
736:       assertEquals((-1), node0.getSourcePosition());
737:       assertFalse(node0.isOr());
738:       assertFalse(node0.isCall());
739:       assertFalse(node0.isGetElem());
740:       assertTrue(node0.isString());
741:       assertFalse(node0.hasOneChild());
742:       assertFalse(node0.isName());
743:       assertFalse(node0.isExprResult());
744:       assertFalse(node0.isBlock());
745:       assertFalse(node0.isReturn());
746:       assertFalse(node0.isWith());
747:       assertFalse(node0.hasChildren());
748:       assertFalse(node0.isTypeOf());
749:       assertFalse(node0.isDec());
750:       assertFalse(node0.isAssign());
751:       assertFalse(node0.isDefaultCase());
752:       assertFalse(node0.isTrue());
753:       assertFalse(node0.isParamList());
754:       assertFalse(node0.isScript());
755:       assertFalse(node0.isNull());
756:       assertFalse(node0.isStringKey());
757:       assertFalse(node0.isEmpty());
758:       assertFalse(node0.isVar());
759:       assertFalse(node0.isArrayLit());
760:       assertFalse(node0.isNew());
761:       assertFalse(node0.isLabelName());
762:       assertFalse(node0.isLabel());
763:       assertEquals(0, node0.getChildCount());
764:       assertFalse(node0.isCase());
765:       assertFalse(node0.isInc());
766:       assertEquals((-1), node0.getCharno());
767:       assertFalse(node0.isSwitch());
768:       assertFalse(node0.isNE());
769:       assertFalse(node0.isGetterDef());
770:       assertFalse(node0.isIn());
771:       assertFalse(node0.isFor());
772:       assertFalse(node0.isDelProp());
773:       assertFalse(node0.isIf());
774:       assertFalse(node0.isBreak());
775:       assertFalse(node0.isVoid());
776:       assertFalse(node0.isTry());
777:       assertFalse(node0.isThis());
778:       assertFalse(node0.isHook());
779:       assertFalse(node0.isRegExp());
780:       assertFalse(node0.isComma());
781:       assertFalse(node0.isObjectLit());
782:       assertFalse(node0.isAnd());
783:       assertEquals(40, node0.getType());
784:       assertFalse(node0.isCatch());
785:       assertFalse(node0.isInstanceOf());
786:       assertFalse(node0.isDebugger());
787:       assertFalse(node0.isSetterDef());
788:       assertFalse(node0.isGetProp());
789:       assertFalse(node0.isNot());
790:       assertFalse(node0.isFalse());
791:       assertFalse(node0.isThrow());
792:       assertFalse(node0.isCast());
793:       assertFalse(node0.isFunction());
794:       assertFalse(node1.isOr());
795:       assertFalse(node1.hasMoreThanOneChild());
796:       assertFalse(node1.isAssignAdd());
797:       assertFalse(node1.isContinue());
798:       assertFalse(node1.isWhile());
799:       assertFalse(node1.isDec());
800:       assertFalse(node1.isAssign());
801:       assertFalse(node1.isDo());
802:       assertFalse(node1.isTypeOf());
803:       assertFalse(node1.isBlock());
804:       assertFalse(node1.isLabel());
805:       assertFalse(node1.hasChildren());
806:       assertFalse(node1.isReturn());
807:       assertFalse(node1.isExprResult());
808:       assertFalse(node1.isAdd());
809:       assertFalse(node1.isNew());
810:       assertFalse(node1.isGetElem());
811:       assertFalse(node1.isName());
812:       assertFalse(node1.isNull());
813:       assertFalse(node1.isSetterDef());
814:       assertFalse(node1.isGetProp());
815:       assertFalse(node1.isFalse());
816:       assertFalse(node1.isFunction());
817:       assertEquals(47, node1.getCharno());
818:       assertFalse(node1.isThrow());
819:       assertFalse(node1.isComma());
820:       assertFalse(node1.isCast());
821:       assertFalse(node1.isString());
822:       assertFalse(node1.isNot());
823:       assertFalse(node1.isDebugger());
824:       assertFalse(node1.isObjectLit());
825:       assertFalse(node1.isAnd());
826:       assertFalse(node1.isIn());
827:       assertFalse(node1.isCase());
828:       assertEquals(37, node1.getType());
829:       assertFalse(node1.isFor());
830:       assertFalse(node1.isVoid());
831:       assertFalse(node1.isEmpty());
832:       assertFalse(node1.isInc());
833:       assertFalse(node1.isDelProp());
834:       assertFalse(node1.isBreak());
835:       assertEquals(55, node1.getLineno());
836:       assertTrue(node1.isCall());
837:       assertFalse(node1.isIf());
838:       assertFalse(node1.isTrue());
839:       assertFalse(node1.isNE());
840:       assertEquals(0, node1.getChildCount());
841:       assertFalse(node1.isInstanceOf());
842:       assertEquals(225327, node1.getSourcePosition());
843:       assertFalse(node1.isCatch());
844:       assertFalse(node1.isRegExp());
845:       assertFalse(node1.isDefaultCase());
846:       assertFalse(node1.isWith());
847:       assertFalse(node1.isVar());
848:       assertFalse(node1.isThis());
849:       assertFalse(node1.isHook());
850:       assertFalse(node1.hasOneChild());
851:       assertFalse(node1.isTry());
852:       assertFalse(node1.isArrayLit());
853:       assertFalse(node1.isScript());
854:       assertFalse(node1.isGetterDef());
855:       assertFalse(node1.isLabelName());
856:       assertFalse(node1.isNumber());
857:       assertFalse(node1.isSwitch());
858:       assertFalse(node1.isParamList());
859:       assertFalse(node1.isStringKey());
860:       
861:       boolean boolean1 = node1.isCall();
862:       assertFalse(node1.equals((Object)node0));
863:       assertFalse(boolean1 == boolean0);
864:       assertEquals(48, Node.DIRECTIVES);
865:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
866:       assertEquals(8, Node.FLAG_NO_THROWS);
867:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
868:       assertEquals(50, Node.FREE_CALL);
869:       assertEquals(55, Node.INFERRED_FUNCTION);
870:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
871:       assertEquals(39, Node.EMPTY_BLOCK);
872:       assertEquals(54, Node.SLASH_V);
873:       assertEquals(43, Node.IS_CONSTANT_NAME);
874:       assertEquals(30, Node.VAR_ARGS_NAME);
875:       assertEquals(40, Node.ORIGINALNAME_PROP);
876:       assertEquals(56, Node.CHANGE_TIME);
877:       assertEquals(47, Node.IS_DISPATCHER);
878:       assertEquals(12, Node.COLUMN_BITS);
879:       assertEquals(46, Node.IS_NAMESPACE);
880:       assertEquals(2, Node.POST_FLAG);
881:       assertEquals(51, Node.STATIC_SOURCE_FILE);
882:       assertEquals(1, Node.DECR_FLAG);
883:       assertEquals(29, Node.JSDOC_INFO_PROP);
884:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
885:       assertEquals(15, Node.NO_SIDE_EFFECTS);
886:       assertEquals(57, Node.LAST_PROP);
887:       assertEquals(32, Node.INCRDECR_PROP);
888:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
889:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
890:       assertEquals(53, Node.INPUT_ID);
891:       assertEquals(52, Node.LENGTH);
892:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
893:       assertEquals(57, Node.REFLECTED_OBJECT);
894:       assertEquals(36, Node.QUOTED_PROP);
895:       assertEquals(49, Node.DIRECT_EVAL);
896:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
897:       assertEquals(4095, Node.COLUMN_MASK);
898:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
899:       assertEquals(37, Node.OPT_ARG_NAME);
900:       assertTrue(boolean1);
901:       assertFalse(node1.isOr());
902:       assertFalse(node1.hasMoreThanOneChild());
903:       assertFalse(node1.isAssignAdd());
904:       assertFalse(node1.isContinue());
905:       assertFalse(node1.isWhile());
906:       assertFalse(node1.isDec());
907:       assertFalse(node1.isAssign());
908:       assertFalse(node1.isDo());
909:       assertFalse(node1.isTypeOf());
910:       assertFalse(node1.isBlock());
911:       assertFalse(node1.isLabel());
912:       assertFalse(node1.hasChildren());
913:       assertFalse(node1.isReturn());
914:       assertFalse(node1.isExprResult());
915:       assertFalse(node1.isAdd());
916:       assertFalse(node1.isNew());
917:       assertFalse(node1.isGetElem());
918:       assertFalse(node1.isName());
919:       assertFalse(node1.isNull());
920:       assertFalse(node1.isSetterDef());
921:       assertFalse(node1.isGetProp());
922:       assertFalse(node1.isFalse());
923:       assertFalse(node1.isFunction());
924:       assertEquals(47, node1.getCharno());
925:       assertFalse(node1.isThrow());
926:       assertFalse(node1.isComma());
927:       assertFalse(node1.isCast());
928:       assertFalse(node1.isString());
929:       assertFalse(node1.isNot());
930:       assertFalse(node1.isDebugger());
931:       assertFalse(node1.isObjectLit());
932:       assertFalse(node1.isAnd());
933:       assertFalse(node1.isIn());
934:       assertFalse(node1.isCase());
935:       assertEquals(37, node1.getType());
936:       assertFalse(node1.isFor());
937:       assertFalse(node1.isVoid());
938:       assertFalse(node1.isEmpty());
939:       assertFalse(node1.isInc());
940:       assertFalse(node1.isDelProp());
941:       assertFalse(node1.isBreak());
942:       assertEquals(55, node1.getLineno());
943:       assertTrue(node1.isCall());
944:       assertFalse(node1.isIf());
945:       assertFalse(node1.isTrue());
946:       assertFalse(node1.isNE());
947:       assertEquals(0, node1.getChildCount());
948:       assertFalse(node1.isInstanceOf());
949:       assertEquals(225327, node1.getSourcePosition());
950:       assertFalse(node1.isCatch());
951:       assertFalse(node1.isRegExp());
952:       assertFalse(node1.isDefaultCase());
953:       assertFalse(node1.isWith());
954:       assertFalse(node1.isVar());
955:       assertFalse(node1.isThis());
956:       assertFalse(node1.isHook());
957:       assertFalse(node1.hasOneChild());
958:       assertFalse(node1.isTry());
959:       assertFalse(node1.isArrayLit());
960:       assertFalse(node1.isScript());
961:       assertFalse(node1.isGetterDef());
962:       assertFalse(node1.isLabelName());
963:       assertFalse(node1.isNumber());
964:       assertFalse(node1.isSwitch());
965:       assertFalse(node1.isParamList());
966:       assertFalse(node1.isStringKey());
967:   }
968: }
RegularFileObject[/tmp/EvoSuite_137_1628256087461/com/google/javascript/rhino/Node_137_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:27 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_137_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_137_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_137_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:27.558 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(".");
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertNotNull(iterable0);

String string0 = node0.toString();
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals("STRING .", string0);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertNotNull(string0);

Node node1 = new Node(37, 55, 47);
assertFalse(node1.equals((Object)node0));
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertEquals(47, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(37, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals(55, node1.getLineno());
assertTrue(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertEquals(47, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(37, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals(55, node1.getLineno());
assertTrue(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node1.isEquivalentToTyped(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(54, Node.SLASH_V);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(1, Node.DECR_FLAG);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertFalse(boolean0);
assertFalse(node0.isContinue());
assertFalse(node0.hasMoreThanOneChild());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isWhile());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isDo());
assertFalse(node0.isAdd());
assertFalse(node0.isNumber());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isOr());
assertFalse(node0.isCall());
assertFalse(node0.isGetElem());
assertTrue(node0.isString());
assertFalse(node0.hasOneChild());
assertFalse(node0.isName());
assertFalse(node0.isExprResult());
assertFalse(node0.isBlock());
assertFalse(node0.isReturn());
assertFalse(node0.isWith());
assertFalse(node0.hasChildren());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isTrue());
assertFalse(node0.isParamList());
assertFalse(node0.isScript());
assertFalse(node0.isNull());
assertFalse(node0.isStringKey());
assertFalse(node0.isEmpty());
assertFalse(node0.isVar());
assertFalse(node0.isArrayLit());
assertFalse(node0.isNew());
assertFalse(node0.isLabelName());
assertFalse(node0.isLabel());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isSwitch());
assertFalse(node0.isNE());
assertFalse(node0.isGetterDef());
assertFalse(node0.isIn());
assertFalse(node0.isFor());
assertFalse(node0.isDelProp());
assertFalse(node0.isIf());
assertFalse(node0.isBreak());
assertFalse(node0.isVoid());
assertFalse(node0.isTry());
assertFalse(node0.isThis());
assertFalse(node0.isHook());
assertFalse(node0.isRegExp());
assertFalse(node0.isComma());
assertFalse(node0.isObjectLit());
assertFalse(node0.isAnd());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isDebugger());
assertFalse(node0.isSetterDef());
assertFalse(node0.isGetProp());
assertFalse(node0.isNot());
assertFalse(node0.isFalse());
assertFalse(node0.isThrow());
assertFalse(node0.isCast());
assertFalse(node0.isFunction());
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertEquals(47, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(37, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals(55, node1.getLineno());
assertTrue(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());

boolean boolean1 = node1.isCall();
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertEquals(48, Node.DIRECTIVES);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(2, Node.POST_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(52, Node.LENGTH);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(37, Node.OPT_ARG_NAME);
assertTrue(boolean1);
assertFalse(node1.isOr());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isContinue());
assertFalse(node1.isWhile());
assertFalse(node1.isDec());
assertFalse(node1.isAssign());
assertFalse(node1.isDo());
assertFalse(node1.isTypeOf());
assertFalse(node1.isBlock());
assertFalse(node1.isLabel());
assertFalse(node1.hasChildren());
assertFalse(node1.isReturn());
assertFalse(node1.isExprResult());
assertFalse(node1.isAdd());
assertFalse(node1.isNew());
assertFalse(node1.isGetElem());
assertFalse(node1.isName());
assertFalse(node1.isNull());
assertFalse(node1.isSetterDef());
assertFalse(node1.isGetProp());
assertFalse(node1.isFalse());
assertFalse(node1.isFunction());
assertEquals(47, node1.getCharno());
assertFalse(node1.isThrow());
assertFalse(node1.isComma());
assertFalse(node1.isCast());
assertFalse(node1.isString());
assertFalse(node1.isNot());
assertFalse(node1.isDebugger());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isIn());
assertFalse(node1.isCase());
assertEquals(37, node1.getType());
assertFalse(node1.isFor());
assertFalse(node1.isVoid());
assertFalse(node1.isEmpty());
assertFalse(node1.isInc());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertEquals(55, node1.getLineno());
assertTrue(node1.isCall());
assertFalse(node1.isIf());
assertFalse(node1.isTrue());
assertFalse(node1.isNE());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isInstanceOf());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isCatch());
assertFalse(node1.isRegExp());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isWith());
assertFalse(node1.isVar());
assertFalse(node1.isThis());
assertFalse(node1.isHook());
assertFalse(node1.hasOneChild());
assertFalse(node1.isTry());
assertFalse(node1.isArrayLit());
assertFalse(node1.isScript());
assertFalse(node1.isGetterDef());
assertFalse(node1.isLabelName());
assertFalse(node1.isNumber());
assertFalse(node1.isSwitch());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());


[MASTER] 13:21:33.139 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_166_1628256093067/com/google/javascript/rhino/Node_166_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_166_1628256093067/com/google/javascript/rhino/Node_166_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:33.139 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:33.139 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:33.139 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 13:21:33.140 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_166_1628256093067/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:33 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_166_tmp__ESTest extends Node_166_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(".");
21:       assertEquals(53, Node.INPUT_ID);
22:       assertEquals(36, Node.QUOTED_PROP);
23:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
24:       assertEquals(43, Node.IS_CONSTANT_NAME);
25:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
26:       assertEquals(55, Node.INFERRED_FUNCTION);
27:       assertEquals(29, Node.JSDOC_INFO_PROP);
28:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
29:       assertEquals(48, Node.DIRECTIVES);
30:       assertEquals(8, Node.FLAG_NO_THROWS);
31:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
32:       assertEquals(37, Node.OPT_ARG_NAME);
33:       assertEquals(32, Node.INCRDECR_PROP);
34:       assertEquals(12, Node.COLUMN_BITS);
35:       assertEquals(56, Node.CHANGE_TIME);
36:       assertEquals(49, Node.DIRECT_EVAL);
37:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
38:       assertEquals(4095, Node.COLUMN_MASK);
39:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
40:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
41:       assertEquals(54, Node.SLASH_V);
42:       assertEquals(57, Node.LAST_PROP);
43:       assertEquals(57, Node.REFLECTED_OBJECT);
44:       assertEquals(1, Node.DECR_FLAG);
45:       assertEquals(50, Node.FREE_CALL);
46:       assertEquals(51, Node.STATIC_SOURCE_FILE);
47:       assertEquals(15, Node.NO_SIDE_EFFECTS);
48:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
49:       assertEquals(52, Node.LENGTH);
50:       assertEquals(39, Node.EMPTY_BLOCK);
51:       assertEquals(2, Node.POST_FLAG);
52:       assertEquals(46, Node.IS_NAMESPACE);
53:       assertEquals(47, Node.IS_DISPATCHER);
54:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
55:       assertEquals(40, Node.ORIGINALNAME_PROP);
56:       assertEquals(30, Node.VAR_ARGS_NAME);
57:       assertFalse(node0.isBlock());
58:       assertFalse(node0.isAdd());
59:       assertFalse(node0.isNew());
60:       assertFalse(node0.isCall());
61:       assertFalse(node0.isWhile());
62:       assertFalse(node0.isDo());
63:       assertFalse(node0.isSetterDef());
64:       assertFalse(node0.isVar());
65:       assertTrue(node0.isString());
66:       assertEquals(0, node0.getChildCount());
67:       assertFalse(node0.isLabel());
68:       assertFalse(node0.isNumber());
69:       assertFalse(node0.isContinue());
70:       assertFalse(node0.isLabelName());
71:       assertEquals((-1), node0.getSourcePosition());
72:       assertFalse(node0.isParamList());
73:       assertFalse(node0.isStringKey());
74:       assertFalse(node0.isArrayLit());
75:       assertFalse(node0.isDebugger());
76:       assertFalse(node0.isExprResult());
77:       assertFalse(node0.isDec());
78:       assertFalse(node0.isAssign());
79:       assertFalse(node0.isEmpty());
80:       assertFalse(node0.hasChildren());
81:       assertFalse(node0.isDefaultCase());
82:       assertFalse(node0.isAssignAdd());
83:       assertFalse(node0.isReturn());
84:       assertFalse(node0.isOr());
85:       assertFalse(node0.isComma());
86:       assertFalse(node0.isTypeOf());
87:       assertFalse(node0.isDelProp());
88:       assertFalse(node0.isGetElem());
89:       assertFalse(node0.isNull());
90:       assertFalse(node0.isBreak());
91:       assertFalse(node0.isTrue());
92:       assertFalse(node0.isVoid());
93:       assertFalse(node0.isName());
94:       assertFalse(node0.isHook());
95:       assertEquals((-1), node0.getCharno());
96:       assertFalse(node0.isInc());
97:       assertFalse(node0.isFalse());
98:       assertFalse(node0.isCase());
99:       assertFalse(node0.isThis());
100:       assertFalse(node0.isThrow());
101:       assertFalse(node0.isGetProp());
102:       assertFalse(node0.isObjectLit());
103:       assertFalse(node0.isGetterDef());
104:       assertFalse(node0.isNot());
105:       assertFalse(node0.isAnd());
106:       assertFalse(node0.isSwitch());
107:       assertFalse(node0.isTry());
108:       assertFalse(node0.hasOneChild());
109:       assertFalse(node0.isFunction());
110:       assertFalse(node0.isScript());
111:       assertFalse(node0.isCast());
112:       assertFalse(node0.isRegExp());
113:       assertFalse(node0.isFor());
114:       assertEquals(40, node0.getType());
115:       assertEquals((-1), node0.getLineno());
116:       assertFalse(node0.isCatch());
117:       assertFalse(node0.isInstanceOf());
118:       assertFalse(node0.hasMoreThanOneChild());
119:       assertFalse(node0.isIn());
120:       assertFalse(node0.isWith());
121:       assertFalse(node0.isNE());
122:       assertFalse(node0.isIf());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(53, Node.INPUT_ID);
128:       assertEquals(36, Node.QUOTED_PROP);
129:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
130:       assertEquals(43, Node.IS_CONSTANT_NAME);
131:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
132:       assertEquals(55, Node.INFERRED_FUNCTION);
133:       assertEquals(29, Node.JSDOC_INFO_PROP);
134:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
135:       assertEquals(48, Node.DIRECTIVES);
136:       assertEquals(8, Node.FLAG_NO_THROWS);
137:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
138:       assertEquals(37, Node.OPT_ARG_NAME);
139:       assertEquals(32, Node.INCRDECR_PROP);
140:       assertEquals(12, Node.COLUMN_BITS);
141:       assertEquals(56, Node.CHANGE_TIME);
142:       assertEquals(49, Node.DIRECT_EVAL);
143:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
144:       assertEquals(4095, Node.COLUMN_MASK);
145:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
146:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
147:       assertEquals(54, Node.SLASH_V);
148:       assertEquals(57, Node.LAST_PROP);
149:       assertEquals(57, Node.REFLECTED_OBJECT);
150:       assertEquals(1, Node.DECR_FLAG);
151:       assertEquals(50, Node.FREE_CALL);
152:       assertEquals(51, Node.STATIC_SOURCE_FILE);
153:       assertEquals(15, Node.NO_SIDE_EFFECTS);
154:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
155:       assertEquals(52, Node.LENGTH);
156:       assertEquals(39, Node.EMPTY_BLOCK);
157:       assertEquals(2, Node.POST_FLAG);
158:       assertEquals(46, Node.IS_NAMESPACE);
159:       assertEquals(47, Node.IS_DISPATCHER);
160:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
161:       assertEquals(40, Node.ORIGINALNAME_PROP);
162:       assertEquals(30, Node.VAR_ARGS_NAME);
163:       assertFalse(node0.isBlock());
164:       assertFalse(node0.isAdd());
165:       assertFalse(node0.isNew());
166:       assertFalse(node0.isCall());
167:       assertFalse(node0.isWhile());
168:       assertFalse(node0.isDo());
169:       assertFalse(node0.isSetterDef());
170:       assertFalse(node0.isVar());
171:       assertTrue(node0.isString());
172:       assertEquals(0, node0.getChildCount());
173:       assertFalse(node0.isLabel());
174:       assertFalse(node0.isNumber());
175:       assertFalse(node0.isContinue());
176:       assertFalse(node0.isLabelName());
177:       assertEquals((-1), node0.getSourcePosition());
178:       assertFalse(node0.isParamList());
179:       assertFalse(node0.isStringKey());
180:       assertFalse(node0.isArrayLit());
181:       assertFalse(node0.isDebugger());
182:       assertFalse(node0.isExprResult());
183:       assertFalse(node0.isDec());
184:       assertFalse(node0.isAssign());
185:       assertFalse(node0.isEmpty());
186:       assertFalse(node0.hasChildren());
187:       assertFalse(node0.isDefaultCase());
188:       assertFalse(node0.isAssignAdd());
189:       assertFalse(node0.isReturn());
190:       assertFalse(node0.isOr());
191:       assertFalse(node0.isComma());
192:       assertFalse(node0.isTypeOf());
193:       assertFalse(node0.isDelProp());
194:       assertFalse(node0.isGetElem());
195:       assertFalse(node0.isNull());
196:       assertFalse(node0.isBreak());
197:       assertFalse(node0.isTrue());
198:       assertFalse(node0.isVoid());
199:       assertFalse(node0.isName());
200:       assertFalse(node0.isHook());
201:       assertEquals((-1), node0.getCharno());
202:       assertFalse(node0.isInc());
203:       assertFalse(node0.isFalse());
204:       assertFalse(node0.isCase());
205:       assertFalse(node0.isThis());
206:       assertFalse(node0.isThrow());
207:       assertFalse(node0.isGetProp());
208:       assertFalse(node0.isObjectLit());
209:       assertFalse(node0.isGetterDef());
210:       assertFalse(node0.isNot());
211:       assertFalse(node0.isAnd());
212:       assertFalse(node0.isSwitch());
213:       assertFalse(node0.isTry());
214:       assertFalse(node0.hasOneChild());
215:       assertFalse(node0.isFunction());
216:       assertFalse(node0.isScript());
217:       assertFalse(node0.isCast());
218:       assertFalse(node0.isRegExp());
219:       assertFalse(node0.isFor());
220:       assertEquals(40, node0.getType());
221:       assertEquals((-1), node0.getLineno());
222:       assertFalse(node0.isCatch());
223:       assertFalse(node0.isInstanceOf());
224:       assertFalse(node0.hasMoreThanOneChild());
225:       assertFalse(node0.isIn());
226:       assertFalse(node0.isWith());
227:       assertFalse(node0.isNE());
228:       assertFalse(node0.isIf());
229:       assertNotNull(iterable0);
230:       
231:       Node node1 = new Node(50);
232:       assertFalse(node1.equals((Object)node0));
233:       assertEquals(50, Node.FREE_CALL);
234:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
235:       assertEquals(57, Node.REFLECTED_OBJECT);
236:       assertEquals(48, Node.DIRECTIVES);
237:       assertEquals(54, Node.SLASH_V);
238:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
239:       assertEquals(40, Node.ORIGINALNAME_PROP);
240:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
241:       assertEquals(30, Node.VAR_ARGS_NAME);
242:       assertEquals(49, Node.DIRECT_EVAL);
243:       assertEquals(57, Node.LAST_PROP);
244:       assertEquals(36, Node.QUOTED_PROP);
245:       assertEquals(53, Node.INPUT_ID);
246:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
247:       assertEquals(8, Node.FLAG_NO_THROWS);
248:       assertEquals(52, Node.LENGTH);
249:       assertEquals(55, Node.INFERRED_FUNCTION);
250:       assertEquals(39, Node.EMPTY_BLOCK);
251:       assertEquals(15, Node.NO_SIDE_EFFECTS);
252:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
253:       assertEquals(29, Node.JSDOC_INFO_PROP);
254:       assertEquals(56, Node.CHANGE_TIME);
255:       assertEquals(2, Node.POST_FLAG);
256:       assertEquals(47, Node.IS_DISPATCHER);
257:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
258:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
259:       assertEquals(37, Node.OPT_ARG_NAME);
260:       assertEquals(1, Node.DECR_FLAG);
261:       assertEquals(4095, Node.COLUMN_MASK);
262:       assertEquals(43, Node.IS_CONSTANT_NAME);
263:       assertEquals(51, Node.STATIC_SOURCE_FILE);
264:       assertEquals(12, Node.COLUMN_BITS);
265:       assertEquals(46, Node.IS_NAMESPACE);
266:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
267:       assertEquals(32, Node.INCRDECR_PROP);
268:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
269:       assertFalse(node1.isDec());
270:       assertFalse(node1.hasChildren());
271:       assertEquals((-1), node1.getSourcePosition());
272:       assertFalse(node1.isLabelName());
273:       assertFalse(node1.isAssign());
274:       assertFalse(node1.isNumber());
275:       assertFalse(node1.isTypeOf());
276:       assertFalse(node1.isCast());
277:       assertFalse(node1.isGetElem());
278:       assertEquals((-1), node1.getLineno());
279:       assertFalse(node1.isOr());
280:       assertFalse(node1.isWhile());
281:       assertFalse(node1.isNot());
282:       assertFalse(node1.isWith());
283:       assertFalse(node1.isScript());
284:       assertFalse(node1.isExprResult());
285:       assertFalse(node1.isInstanceOf());
286:       assertFalse(node1.hasOneChild());
287:       assertFalse(node1.hasMoreThanOneChild());
288:       assertFalse(node1.isComma());
289:       assertFalse(node1.isBlock());
290:       assertFalse(node1.isThis());
291:       assertFalse(node1.isReturn());
292:       assertFalse(node1.isFalse());
293:       assertFalse(node1.isGetProp());
294:       assertFalse(node1.isSetterDef());
295:       assertFalse(node1.isObjectLit());
296:       assertFalse(node1.isAnd());
297:       assertFalse(node1.isFunction());
298:       assertFalse(node1.isContinue());
299:       assertFalse(node1.isInc());
300:       assertFalse(node1.isThrow());
301:       assertFalse(node1.isGetterDef());
302:       assertFalse(node1.isIf());
303:       assertFalse(node1.isDelProp());
304:       assertFalse(node1.isEmpty());
305:       assertFalse(node1.isIn());
306:       assertFalse(node1.isArrayLit());
307:       assertFalse(node1.isDebugger());
308:       assertFalse(node1.isNE());
309:       assertFalse(node1.isTrue());
310:       assertFalse(node1.isString());
311:       assertFalse(node1.isRegExp());
312:       assertFalse(node1.isVoid());
313:       assertFalse(node1.isCase());
314:       assertFalse(node1.isCatch());
315:       assertFalse(node1.isTry());
316:       assertFalse(node1.isFor());
317:       assertFalse(node1.isHook());
318:       assertFalse(node1.isBreak());
319:       assertFalse(node1.isName());
320:       assertEquals(50, node1.getType());
321:       assertFalse(node1.isCall());
322:       assertEquals((-1), node1.getCharno());
323:       assertFalse(node1.isParamList());
324:       assertFalse(node1.isStringKey());
325:       assertFalse(node1.isNull());
326:       assertFalse(node1.isDefaultCase());
327:       assertFalse(node1.isSwitch());
328:       assertFalse(node1.isDo());
329:       assertFalse(node1.isNew());
330:       assertFalse(node1.isAdd());
331:       assertEquals(0, node1.getChildCount());
332:       assertFalse(node1.isAssignAdd());
333:       assertFalse(node1.isLabel());
334:       assertFalse(node1.isVar());
335:       assertNotNull(node1);
336:       
337:       Node node2 = new Node(31, node0);
338:       assertFalse(node0.equals((Object)node1));
339:       assertFalse(node2.equals((Object)node0));
340:       assertFalse(node2.equals((Object)node1));
341:       assertEquals(53, Node.INPUT_ID);
342:       assertEquals(36, Node.QUOTED_PROP);
343:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
344:       assertEquals(43, Node.IS_CONSTANT_NAME);
345:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
346:       assertEquals(55, Node.INFERRED_FUNCTION);
347:       assertEquals(29, Node.JSDOC_INFO_PROP);
348:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
349:       assertEquals(48, Node.DIRECTIVES);
350:       assertEquals(8, Node.FLAG_NO_THROWS);
351:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
352:       assertEquals(37, Node.OPT_ARG_NAME);
353:       assertEquals(32, Node.INCRDECR_PROP);
354:       assertEquals(12, Node.COLUMN_BITS);
355:       assertEquals(56, Node.CHANGE_TIME);
356:       assertEquals(49, Node.DIRECT_EVAL);
357:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
358:       assertEquals(4095, Node.COLUMN_MASK);
359:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
360:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
361:       assertEquals(54, Node.SLASH_V);
362:       assertEquals(57, Node.LAST_PROP);
363:       assertEquals(57, Node.REFLECTED_OBJECT);
364:       assertEquals(1, Node.DECR_FLAG);
365:       assertEquals(50, Node.FREE_CALL);
366:       assertEquals(51, Node.STATIC_SOURCE_FILE);
367:       assertEquals(15, Node.NO_SIDE_EFFECTS);
368:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
369:       assertEquals(52, Node.LENGTH);
370:       assertEquals(39, Node.EMPTY_BLOCK);
371:       assertEquals(2, Node.POST_FLAG);
372:       assertEquals(46, Node.IS_NAMESPACE);
373:       assertEquals(47, Node.IS_DISPATCHER);
374:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
375:       assertEquals(40, Node.ORIGINALNAME_PROP);
376:       assertEquals(30, Node.VAR_ARGS_NAME);
377:       assertEquals(40, Node.ORIGINALNAME_PROP);
378:       assertEquals(57, Node.REFLECTED_OBJECT);
379:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
380:       assertEquals(52, Node.LENGTH);
381:       assertEquals(50, Node.FREE_CALL);
382:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
383:       assertEquals(8, Node.FLAG_NO_THROWS);
384:       assertEquals(48, Node.DIRECTIVES);
385:       assertEquals(49, Node.DIRECT_EVAL);
386:       assertEquals(54, Node.SLASH_V);
387:       assertEquals(12, Node.COLUMN_BITS);
388:       assertEquals(1, Node.DECR_FLAG);
389:       assertEquals(51, Node.STATIC_SOURCE_FILE);
390:       assertEquals(4095, Node.COLUMN_MASK);
391:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
392:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
393:       assertEquals(32, Node.INCRDECR_PROP);
394:       assertEquals(29, Node.JSDOC_INFO_PROP);
395:       assertEquals(53, Node.INPUT_ID);
396:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
397:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
398:       assertEquals(37, Node.OPT_ARG_NAME);
399:       assertEquals(36, Node.QUOTED_PROP);
400:       assertEquals(46, Node.IS_NAMESPACE);
401:       assertEquals(56, Node.CHANGE_TIME);
402:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
403:       assertEquals(43, Node.IS_CONSTANT_NAME);
404:       assertEquals(55, Node.INFERRED_FUNCTION);
405:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
406:       assertEquals(30, Node.VAR_ARGS_NAME);
407:       assertEquals(2, Node.POST_FLAG);
408:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
409:       assertEquals(39, Node.EMPTY_BLOCK);
410:       assertEquals(15, Node.NO_SIDE_EFFECTS);
411:       assertEquals(47, Node.IS_DISPATCHER);
412:       assertEquals(57, Node.LAST_PROP);
413:       assertFalse(node0.isBlock());
414:       assertFalse(node0.isAdd());
415:       assertFalse(node0.isNew());
416:       assertFalse(node0.isCall());
417:       assertFalse(node0.isWhile());
418:       assertFalse(node0.isDo());
419:       assertFalse(node0.isSetterDef());
420:       assertFalse(node0.isVar());
421:       assertTrue(node0.isString());
422:       assertEquals(0, node0.getChildCount());
423:       assertFalse(node0.isLabel());
424:       assertFalse(node0.isNumber());
425:       assertFalse(node0.isContinue());
426:       assertFalse(node0.isLabelName());
427:       assertEquals((-1), node0.getSourcePosition());
428:       assertFalse(node0.isParamList());
429:       assertFalse(node0.isStringKey());
430:       assertFalse(node0.isArrayLit());
431:       assertFalse(node0.isDebugger());
432:       assertFalse(node0.isExprResult());
433:       assertFalse(node0.isDec());
434:       assertFalse(node0.isAssign());
435:       assertFalse(node0.isEmpty());
436:       assertFalse(node0.hasChildren());
437:       assertFalse(node0.isDefaultCase());
438:       assertFalse(node0.isAssignAdd());
439:       assertFalse(node0.isReturn());
440:       assertFalse(node0.isOr());
441:       assertFalse(node0.isComma());
442:       assertFalse(node0.isTypeOf());
443:       assertFalse(node0.isDelProp());
444:       assertFalse(node0.isGetElem());
445:       assertFalse(node0.isNull());
446:       assertFalse(node0.isBreak());
447:       assertFalse(node0.isTrue());
448:       assertFalse(node0.isVoid());
449:       assertFalse(node0.isName());
450:       assertFalse(node0.isHook());
451:       assertEquals((-1), node0.getCharno());
452:       assertFalse(node0.isInc());
453:       assertFalse(node0.isFalse());
454:       assertFalse(node0.isCase());
455:       assertFalse(node0.isThis());
456:       assertFalse(node0.isThrow());
457:       assertFalse(node0.isGetProp());
458:       assertFalse(node0.isObjectLit());
459:       assertFalse(node0.isGetterDef());
460:       assertFalse(node0.isNot());
461:       assertFalse(node0.isAnd());
462:       assertFalse(node0.isSwitch());
463:       assertFalse(node0.isTry());
464:       assertFalse(node0.hasOneChild());
465:       assertFalse(node0.isFunction());
466:       assertFalse(node0.isScript());
467:       assertFalse(node0.isCast());
468:       assertFalse(node0.isRegExp());
469:       assertFalse(node0.isFor());
470:       assertEquals(40, node0.getType());
471:       assertEquals((-1), node0.getLineno());
472:       assertFalse(node0.isCatch());
473:       assertFalse(node0.isInstanceOf());
474:       assertFalse(node0.hasMoreThanOneChild());
475:       assertFalse(node0.isIn());
476:       assertFalse(node0.isWith());
477:       assertFalse(node0.isNE());
478:       assertFalse(node0.isIf());
479:       assertFalse(node2.isLabelName());
480:       assertFalse(node2.isAssign());
481:       assertFalse(node2.isGetElem());
482:       assertTrue(node2.isDelProp());
483:       assertFalse(node2.isOr());
484:       assertEquals((-1), node2.getSourcePosition());
485:       assertFalse(node2.isScript());
486:       assertFalse(node2.isNumber());
487:       assertFalse(node2.isNot());
488:       assertFalse(node2.isDo());
489:       assertFalse(node2.isAnd());
490:       assertFalse(node2.isAssignAdd());
491:       assertFalse(node2.isLabel());
492:       assertFalse(node2.isCast());
493:       assertFalse(node2.isContinue());
494:       assertFalse(node2.isName());
495:       assertFalse(node2.isCall());
496:       assertFalse(node2.isBreak());
497:       assertFalse(node2.isNull());
498:       assertFalse(node2.isVar());
499:       assertFalse(node2.isAdd());
500:       assertFalse(node2.isNew());
501:       assertFalse(node2.isGetProp());
502:       assertFalse(node2.isString());
503:       assertFalse(node2.isObjectLit());
504:       assertFalse(node2.isVoid());
505:       assertFalse(node2.isWhile());
506:       assertFalse(node2.isExprResult());
507:       assertFalse(node2.isReturn());
508:       assertFalse(node2.isTypeOf());
509:       assertFalse(node2.isDec());
510:       assertFalse(node2.isComma());
511:       assertFalse(node2.isFor());
512:       assertFalse(node2.isEmpty());
513:       assertTrue(node2.hasOneChild());
514:       assertFalse(node2.isArrayLit());
515:       assertFalse(node2.isNE());
516:       assertFalse(node2.isIf());
517:       assertFalse(node2.isTry());
518:       assertFalse(node2.isTrue());
519:       assertFalse(node2.isDebugger());
520:       assertFalse(node2.isGetterDef());
521:       assertFalse(node2.isIn());
522:       assertFalse(node2.isDefaultCase());
523:       assertFalse(node2.isSwitch());
524:       assertFalse(node2.isFunction());
525:       assertFalse(node2.isFalse());
526:       assertFalse(node2.isThrow());
527:       assertFalse(node2.isStringKey());
528:       assertFalse(node2.isParamList());
529:       assertFalse(node2.isInc());
530:       assertEquals((-1), node2.getCharno());
531:       assertFalse(node2.isSetterDef());
532:       assertFalse(node2.isCase());
533:       assertFalse(node2.isBlock());
534:       assertTrue(node2.hasChildren());
535:       assertEquals((-1), node2.getLineno());
536:       assertEquals(1, node2.getChildCount());
537:       assertEquals(31, node2.getType());
538:       assertFalse(node2.isThis());
539:       assertFalse(node2.isHook());
540:       assertFalse(node2.isRegExp());
541:       assertFalse(node2.isCatch());
542:       assertFalse(node2.isInstanceOf());
543:       assertFalse(node2.hasMoreThanOneChild());
544:       assertFalse(node2.isWith());
545:       assertNotNull(node2);
546:       
547:       Node node3 = new Node(2, 38, 41);
548:       assertFalse(node3.equals((Object)node0));
549:       assertFalse(node3.equals((Object)node1));
550:       assertFalse(node3.equals((Object)node2));
551:       assertEquals(51, Node.STATIC_SOURCE_FILE);
552:       assertEquals(32, Node.INCRDECR_PROP);
553:       assertEquals(1, Node.DECR_FLAG);
554:       assertEquals(15, Node.NO_SIDE_EFFECTS);
555:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
556:       assertEquals(57, Node.LAST_PROP);
557:       assertEquals(47, Node.IS_DISPATCHER);
558:       assertEquals(2, Node.POST_FLAG);
559:       assertEquals(30, Node.VAR_ARGS_NAME);
560:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
561:       assertEquals(12, Node.COLUMN_BITS);
562:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
563:       assertEquals(57, Node.REFLECTED_OBJECT);
564:       assertEquals(53, Node.INPUT_ID);
565:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
566:       assertEquals(52, Node.LENGTH);
567:       assertEquals(29, Node.JSDOC_INFO_PROP);
568:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
569:       assertEquals(56, Node.CHANGE_TIME);
570:       assertEquals(36, Node.QUOTED_PROP);
571:       assertEquals(37, Node.OPT_ARG_NAME);
572:       assertEquals(8, Node.FLAG_NO_THROWS);
573:       assertEquals(48, Node.DIRECTIVES);
574:       assertEquals(49, Node.DIRECT_EVAL);
575:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
576:       assertEquals(4095, Node.COLUMN_MASK);
577:       assertEquals(39, Node.EMPTY_BLOCK);
578:       assertEquals(55, Node.INFERRED_FUNCTION);
579:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
580:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
581:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
582:       assertEquals(40, Node.ORIGINALNAME_PROP);
583:       assertEquals(43, Node.IS_CONSTANT_NAME);
584:       assertEquals(50, Node.FREE_CALL);
585:       assertEquals(46, Node.IS_NAMESPACE);
586:       assertEquals(54, Node.SLASH_V);
587:       assertFalse(node3.isAnd());
588:       assertFalse(node3.isObjectLit());
589:       assertFalse(node3.isNot());
590:       assertFalse(node3.isExprResult());
591:       assertFalse(node3.isThis());
592:       assertFalse(node3.isComma());
593:       assertFalse(node3.isBreak());
594:       assertFalse(node3.isWith());
595:       assertFalse(node3.isCast());
596:       assertEquals(41, node3.getCharno());
597:       assertFalse(node3.isInstanceOf());
598:       assertFalse(node3.isLabelName());
599:       assertFalse(node3.isAssign());
600:       assertFalse(node3.hasOneChild());
601:       assertFalse(node3.hasChildren());
602:       assertFalse(node3.isHook());
603:       assertFalse(node3.isGetProp());
604:       assertFalse(node3.isNumber());
605:       assertFalse(node3.isScript());
606:       assertFalse(node3.isString());
607:       assertFalse(node3.isContinue());
608:       assertFalse(node3.isCase());
609:       assertEquals(155689, node3.getSourcePosition());
610:       assertFalse(node3.isBlock());
611:       assertFalse(node3.hasMoreThanOneChild());
612:       assertEquals(2, node3.getType());
613:       assertFalse(node3.isThrow());
614:       assertFalse(node3.isFalse());
615:       assertFalse(node3.isIf());
616:       assertFalse(node3.isNE());
617:       assertFalse(node3.isInc());
618:       assertFalse(node3.isSetterDef());
619:       assertFalse(node3.isIn());
620:       assertFalse(node3.isDefaultCase());
621:       assertFalse(node3.isVoid());
622:       assertFalse(node3.isFunction());
623:       assertEquals(0, node3.getChildCount());
624:       assertFalse(node3.isRegExp());
625:       assertFalse(node3.isCatch());
626:       assertFalse(node3.isArrayLit());
627:       assertFalse(node3.isFor());
628:       assertFalse(node3.isParamList());
629:       assertFalse(node3.isStringKey());
630:       assertFalse(node3.isTry());
631:       assertFalse(node3.isDebugger());
632:       assertFalse(node3.isGetterDef());
633:       assertFalse(node3.isDo());
634:       assertFalse(node3.isReturn());
635:       assertFalse(node3.isSwitch());
636:       assertFalse(node3.isAssignAdd());
637:       assertFalse(node3.isWhile());
638:       assertFalse(node3.isLabel());
639:       assertFalse(node3.isDec());
640:       assertEquals(38, node3.getLineno());
641:       assertFalse(node3.isTypeOf());
642:       assertFalse(node3.isGetElem());
643:       assertFalse(node3.isCall());
644:       assertFalse(node3.isName());
645:       assertFalse(node3.isDelProp());
646:       assertFalse(node3.isNull());
647:       assertFalse(node3.isVar());
648:       assertFalse(node3.isTrue());
649:       assertFalse(node3.isOr());
650:       assertFalse(node3.isNew());
651:       assertFalse(node3.isEmpty());
652:       assertFalse(node3.isAdd());
653:       assertNotNull(node3);
654:       
655:       boolean boolean0 = node3.mayMutateArguments();
656:       assertNotSame(node3, node1);
657:       assertNotSame(node3, node2);
658:       assertFalse(node3.equals((Object)node0));
659:       assertFalse(node3.equals((Object)node1));
660:       assertFalse(node3.equals((Object)node2));
661:       assertEquals(51, Node.STATIC_SOURCE_FILE);
662:       assertEquals(32, Node.INCRDECR_PROP);
663:       assertEquals(1, Node.DECR_FLAG);
664:       assertEquals(15, Node.NO_SIDE_EFFECTS);
665:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
666:       assertEquals(57, Node.LAST_PROP);
667:       assertEquals(47, Node.IS_DISPATCHER);
668:       assertEquals(2, Node.POST_FLAG);
669:       assertEquals(30, Node.VAR_ARGS_NAME);
670:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
671:       assertEquals(12, Node.COLUMN_BITS);
672:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
673:       assertEquals(57, Node.REFLECTED_OBJECT);
674:       assertEquals(53, Node.INPUT_ID);
675:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
676:       assertEquals(52, Node.LENGTH);
677:       assertEquals(29, Node.JSDOC_INFO_PROP);
678:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
679:       assertEquals(56, Node.CHANGE_TIME);
680:       assertEquals(36, Node.QUOTED_PROP);
681:       assertEquals(37, Node.OPT_ARG_NAME);
682:       assertEquals(8, Node.FLAG_NO_THROWS);
683:       assertEquals(48, Node.DIRECTIVES);
684:       assertEquals(49, Node.DIRECT_EVAL);
685:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
686:       assertEquals(4095, Node.COLUMN_MASK);
687:       assertEquals(39, Node.EMPTY_BLOCK);
688:       assertEquals(55, Node.INFERRED_FUNCTION);
689:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
690:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
691:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
692:       assertEquals(40, Node.ORIGINALNAME_PROP);
693:       assertEquals(43, Node.IS_CONSTANT_NAME);
694:       assertEquals(50, Node.FREE_CALL);
695:       assertEquals(46, Node.IS_NAMESPACE);
696:       assertEquals(54, Node.SLASH_V);
697:       assertTrue(boolean0);
698:       assertFalse(node3.isAnd());
699:       assertFalse(node3.isObjectLit());
700:       assertFalse(node3.isNot());
701:       assertFalse(node3.isExprResult());
702:       assertFalse(node3.isThis());
703:       assertFalse(node3.isComma());
704:       assertFalse(node3.isBreak());
705:       assertFalse(node3.isWith());
706:       assertFalse(node3.isCast());
707:       assertEquals(41, node3.getCharno());
708:       assertFalse(node3.isInstanceOf());
709:       assertFalse(node3.isLabelName());
710:       assertFalse(node3.isAssign());
711:       assertFalse(node3.hasOneChild());
712:       assertFalse(node3.hasChildren());
713:       assertFalse(node3.isHook());
714:       assertFalse(node3.isGetProp());
715:       assertFalse(node3.isNumber());
716:       assertFalse(node3.isScript());
717:       assertFalse(node3.isString());
718:       assertFalse(node3.isContinue());
719:       assertFalse(node3.isCase());
720:       assertEquals(155689, node3.getSourcePosition());
721:       assertFalse(node3.isBlock());
722:       assertFalse(node3.hasMoreThanOneChild());
723:       assertEquals(2, node3.getType());
724:       assertFalse(node3.isThrow());
725:       assertFalse(node3.isFalse());
726:       assertFalse(node3.isIf());
727:       assertFalse(node3.isNE());
728:       assertFalse(node3.isInc());
729:       assertFalse(node3.isSetterDef());
730:       assertFalse(node3.isIn());
731:       assertFalse(node3.isDefaultCase());
732:       assertFalse(node3.isVoid());
733:       assertFalse(node3.isFunction());
734:       assertEquals(0, node3.getChildCount());
735:       assertFalse(node3.isRegExp());
736:       assertFalse(node3.isCatch());
737:       assertFalse(node3.isArrayLit());
738:       assertFalse(node3.isFor());
739:       assertFalse(node3.isParamList());
740:       assertFalse(node3.isStringKey());
741:       assertFalse(node3.isTry());
742:       assertFalse(node3.isDebugger());
743:       assertFalse(node3.isGetterDef());
744:       assertFalse(node3.isDo());
745:       assertFalse(node3.isReturn());
746:       assertFalse(node3.isSwitch());
747:       assertFalse(node3.isAssignAdd());
748:       assertFalse(node3.isWhile());
749:       assertFalse(node3.isLabel());
750:       assertFalse(node3.isDec());
751:       assertEquals(38, node3.getLineno());
752:       assertFalse(node3.isTypeOf());
753:       assertFalse(node3.isGetElem());
754:       assertFalse(node3.isCall());
755:       assertFalse(node3.isName());
756:       assertFalse(node3.isDelProp());
757:       assertFalse(node3.isNull());
758:       assertFalse(node3.isVar());
759:       assertFalse(node3.isTrue());
760:       assertFalse(node3.isOr());
761:       assertFalse(node3.isNew());
762:       assertFalse(node3.isEmpty());
763:       assertFalse(node3.isAdd());
764:       
765:       boolean boolean1 = node1.isOnlyModifiesThisCall();
766:       assertNotSame(node1, node2);
767:       assertNotSame(node1, node3);
768:       assertFalse(node1.equals((Object)node0));
769:       assertFalse(node1.equals((Object)node2));
770:       assertFalse(node1.equals((Object)node3));
771:       assertFalse(boolean1 == boolean0);
772:       assertEquals(50, Node.FREE_CALL);
773:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
774:       assertEquals(57, Node.REFLECTED_OBJECT);
775:       assertEquals(48, Node.DIRECTIVES);
776:       assertEquals(54, Node.SLASH_V);
777:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
778:       assertEquals(40, Node.ORIGINALNAME_PROP);
779:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
780:       assertEquals(30, Node.VAR_ARGS_NAME);
781:       assertEquals(49, Node.DIRECT_EVAL);
782:       assertEquals(57, Node.LAST_PROP);
783:       assertEquals(36, Node.QUOTED_PROP);
784:       assertEquals(53, Node.INPUT_ID);
785:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
786:       assertEquals(8, Node.FLAG_NO_THROWS);
787:       assertEquals(52, Node.LENGTH);
788:       assertEquals(55, Node.INFERRED_FUNCTION);
789:       assertEquals(39, Node.EMPTY_BLOCK);
790:       assertEquals(15, Node.NO_SIDE_EFFECTS);
791:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
792:       assertEquals(29, Node.JSDOC_INFO_PROP);
793:       assertEquals(56, Node.CHANGE_TIME);
794:       assertEquals(2, Node.POST_FLAG);
795:       assertEquals(47, Node.IS_DISPATCHER);
796:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
797:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
798:       assertEquals(37, Node.OPT_ARG_NAME);
799:       assertEquals(1, Node.DECR_FLAG);
800:       assertEquals(4095, Node.COLUMN_MASK);
801:       assertEquals(43, Node.IS_CONSTANT_NAME);
802:       assertEquals(51, Node.STATIC_SOURCE_FILE);
803:       assertEquals(12, Node.COLUMN_BITS);
804:       assertEquals(46, Node.IS_NAMESPACE);
805:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
806:       assertEquals(32, Node.INCRDECR_PROP);
807:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
808:       assertFalse(boolean1);
809:       assertFalse(node1.isDec());
810:       assertFalse(node1.hasChildren());
811:       assertEquals((-1), node1.getSourcePosition());
812:       assertFalse(node1.isLabelName());
813:       assertFalse(node1.isAssign());
814:       assertFalse(node1.isNumber());
815:       assertFalse(node1.isTypeOf());
816:       assertFalse(node1.isCast());
817:       assertFalse(node1.isGetElem());
818:       assertEquals((-1), node1.getLineno());
819:       assertFalse(node1.isOr());
820:       assertFalse(node1.isWhile());
821:       assertFalse(node1.isNot());
822:       assertFalse(node1.isWith());
823:       assertFalse(node1.isScript());
824:       assertFalse(node1.isExprResult());
825:       assertFalse(node1.isInstanceOf());
826:       assertFalse(node1.hasOneChild());
827:       assertFalse(node1.hasMoreThanOneChild());
828:       assertFalse(node1.isComma());
829:       assertFalse(node1.isBlock());
830:       assertFalse(node1.isThis());
831:       assertFalse(node1.isReturn());
832:       assertFalse(node1.isFalse());
833:       assertFalse(node1.isGetProp());
834:       assertFalse(node1.isSetterDef());
835:       assertFalse(node1.isObjectLit());
836:       assertFalse(node1.isAnd());
837:       assertFalse(node1.isFunction());
838:       assertFalse(node1.isContinue());
839:       assertFalse(node1.isInc());
840:       assertFalse(node1.isThrow());
841:       assertFalse(node1.isGetterDef());
842:       assertFalse(node1.isIf());
843:       assertFalse(node1.isDelProp());
844:       assertFalse(node1.isEmpty());
845:       assertFalse(node1.isIn());
846:       assertFalse(node1.isArrayLit());
847:       assertFalse(node1.isDebugger());
848:       assertFalse(node1.isNE());
849:       assertFalse(node1.isTrue());
850:       assertFalse(node1.isString());
851:       assertFalse(node1.isRegExp());
852:       assertFalse(node1.isVoid());
853:       assertFalse(node1.isCase());
854:       assertFalse(node1.isCatch());
855:       assertFalse(node1.isTry());
856:       assertFalse(node1.isFor());
857:       assertFalse(node1.isHook());
858:       assertFalse(node1.isBreak());
859:       assertFalse(node1.isName());
860:       assertEquals(50, node1.getType());
861:       assertFalse(node1.isCall());
862:       assertEquals((-1), node1.getCharno());
863:       assertFalse(node1.isParamList());
864:       assertFalse(node1.isStringKey());
865:       assertFalse(node1.isNull());
866:       assertFalse(node1.isDefaultCase());
867:       assertFalse(node1.isSwitch());
868:       assertFalse(node1.isDo());
869:       assertFalse(node1.isNew());
870:       assertFalse(node1.isAdd());
871:       assertEquals(0, node1.getChildCount());
872:       assertFalse(node1.isAssignAdd());
873:       assertFalse(node1.isLabel());
874:       assertFalse(node1.isVar());
875:       
876:       boolean boolean2 = node3.isWhile();
877:       assertNotSame(node3, node1);
878:       assertNotSame(node3, node2);
879:       assertFalse(node3.equals((Object)node0));
880:       assertFalse(node3.equals((Object)node1));
881:       assertFalse(node3.equals((Object)node2));
882:       assertFalse(boolean2 == boolean0);
883:       assertTrue(boolean2 == boolean1);
884:       assertEquals(51, Node.STATIC_SOURCE_FILE);
885:       assertEquals(32, Node.INCRDECR_PROP);
886:       assertEquals(1, Node.DECR_FLAG);
887:       assertEquals(15, Node.NO_SIDE_EFFECTS);
888:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
889:       assertEquals(57, Node.LAST_PROP);
890:       assertEquals(47, Node.IS_DISPATCHER);
891:       assertEquals(2, Node.POST_FLAG);
892:       assertEquals(30, Node.VAR_ARGS_NAME);
893:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
894:       assertEquals(12, Node.COLUMN_BITS);
895:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
896:       assertEquals(57, Node.REFLECTED_OBJECT);
897:       assertEquals(53, Node.INPUT_ID);
898:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
899:       assertEquals(52, Node.LENGTH);
900:       assertEquals(29, Node.JSDOC_INFO_PROP);
901:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
902:       assertEquals(56, Node.CHANGE_TIME);
903:       assertEquals(36, Node.QUOTED_PROP);
904:       assertEquals(37, Node.OPT_ARG_NAME);
905:       assertEquals(8, Node.FLAG_NO_THROWS);
906:       assertEquals(48, Node.DIRECTIVES);
907:       assertEquals(49, Node.DIRECT_EVAL);
908:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
909:       assertEquals(4095, Node.COLUMN_MASK);
910:       assertEquals(39, Node.EMPTY_BLOCK);
911:       assertEquals(55, Node.INFERRED_FUNCTION);
912:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
913:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
914:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
915:       assertEquals(40, Node.ORIGINALNAME_PROP);
916:       assertEquals(43, Node.IS_CONSTANT_NAME);
917:       assertEquals(50, Node.FREE_CALL);
918:       assertEquals(46, Node.IS_NAMESPACE);
919:       assertEquals(54, Node.SLASH_V);
920:       assertFalse(boolean2);
921:       assertFalse(node3.isAnd());
922:       assertFalse(node3.isObjectLit());
923:       assertFalse(node3.isNot());
924:       assertFalse(node3.isExprResult());
925:       assertFalse(node3.isThis());
926:       assertFalse(node3.isComma());
927:       assertFalse(node3.isBreak());
928:       assertFalse(node3.isWith());
929:       assertFalse(node3.isCast());
930:       assertEquals(41, node3.getCharno());
931:       assertFalse(node3.isInstanceOf());
932:       assertFalse(node3.isLabelName());
933:       assertFalse(node3.isAssign());
934:       assertFalse(node3.hasOneChild());
935:       assertFalse(node3.hasChildren());
936:       assertFalse(node3.isHook());
937:       assertFalse(node3.isGetProp());
938:       assertFalse(node3.isNumber());
939:       assertFalse(node3.isScript());
940:       assertFalse(node3.isString());
941:       assertFalse(node3.isContinue());
942:       assertFalse(node3.isCase());
943:       assertEquals(155689, node3.getSourcePosition());
944:       assertFalse(node3.isBlock());
945:       assertFalse(node3.hasMoreThanOneChild());
946:       assertEquals(2, node3.getType());
947:       assertFalse(node3.isThrow());
948:       assertFalse(node3.isFalse());
949:       assertFalse(node3.isIf());
950:       assertFalse(node3.isNE());
951:       assertFalse(node3.isInc());
952:       assertFalse(node3.isSetterDef());
953:       assertFalse(node3.isIn());
954:       assertFalse(node3.isDefaultCase());
955:       assertFalse(node3.isVoid());
956:       assertFalse(node3.isFunction());
957:       assertEquals(0, node3.getChildCount());
958:       assertFalse(node3.isRegExp());
959:       assertFalse(node3.isCatch());
960:       assertFalse(node3.isArrayLit());
961:       assertFalse(node3.isFor());
962:       assertFalse(node3.isParamList());
963:       assertFalse(node3.isStringKey());
964:       assertFalse(node3.isTry());
965:       assertFalse(node3.isDebugger());
966:       assertFalse(node3.isGetterDef());
967:       assertFalse(node3.isDo());
968:       assertFalse(node3.isReturn());
969:       assertFalse(node3.isSwitch());
970:       assertFalse(node3.isAssignAdd());
971:       assertFalse(node3.isWhile());
972:       assertFalse(node3.isLabel());
973:       assertFalse(node3.isDec());
974:       assertEquals(38, node3.getLineno());
975:       assertFalse(node3.isTypeOf());
976:       assertFalse(node3.isGetElem());
977:       assertFalse(node3.isCall());
978:       assertFalse(node3.isName());
979:       assertFalse(node3.isDelProp());
980:       assertFalse(node3.isNull());
981:       assertFalse(node3.isVar());
982:       assertFalse(node3.isTrue());
983:       assertFalse(node3.isOr());
984:       assertFalse(node3.isNew());
985:       assertFalse(node3.isEmpty());
986:       assertFalse(node3.isAdd());
987:       
988:       int int0 = Node.NO_SIDE_EFFECTS;
989:       assertEquals(15, int0);
990:   }
991: }
RegularFileObject[/tmp/EvoSuite_166_1628256093067/com/google/javascript/rhino/Node_166_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:33 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_166_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_166_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_166_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:33.162 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(".");
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertNotNull(iterable0);

Node node1 = new Node(50);
assertFalse(node1.equals((Object)node0));
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertEquals(50, node1.getType());
assertFalse(node1.isCall());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());
assertNotNull(node1);

Node node2 = new Node(31, node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node2.equals((Object)node0));
assertFalse(node2.equals((Object)node1));
assertEquals(53, Node.INPUT_ID);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(48, Node.DIRECTIVES);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(54, Node.SLASH_V);
assertEquals(57, Node.LAST_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(1, Node.DECR_FLAG);
assertEquals(50, Node.FREE_CALL);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(2, Node.POST_FLAG);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(50, Node.FREE_CALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(54, Node.SLASH_V);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(1, Node.DECR_FLAG);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(2, Node.POST_FLAG);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(57, Node.LAST_PROP);
assertFalse(node0.isBlock());
assertFalse(node0.isAdd());
assertFalse(node0.isNew());
assertFalse(node0.isCall());
assertFalse(node0.isWhile());
assertFalse(node0.isDo());
assertFalse(node0.isSetterDef());
assertFalse(node0.isVar());
assertTrue(node0.isString());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isLabel());
assertFalse(node0.isNumber());
assertFalse(node0.isContinue());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isArrayLit());
assertFalse(node0.isDebugger());
assertFalse(node0.isExprResult());
assertFalse(node0.isDec());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.hasChildren());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isReturn());
assertFalse(node0.isOr());
assertFalse(node0.isComma());
assertFalse(node0.isTypeOf());
assertFalse(node0.isDelProp());
assertFalse(node0.isGetElem());
assertFalse(node0.isNull());
assertFalse(node0.isBreak());
assertFalse(node0.isTrue());
assertFalse(node0.isVoid());
assertFalse(node0.isName());
assertFalse(node0.isHook());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isInc());
assertFalse(node0.isFalse());
assertFalse(node0.isCase());
assertFalse(node0.isThis());
assertFalse(node0.isThrow());
assertFalse(node0.isGetProp());
assertFalse(node0.isObjectLit());
assertFalse(node0.isGetterDef());
assertFalse(node0.isNot());
assertFalse(node0.isAnd());
assertFalse(node0.isSwitch());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isFunction());
assertFalse(node0.isScript());
assertFalse(node0.isCast());
assertFalse(node0.isRegExp());
assertFalse(node0.isFor());
assertEquals(40, node0.getType());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isCatch());
assertFalse(node0.isInstanceOf());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isIn());
assertFalse(node0.isWith());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node2.isLabelName());
assertFalse(node2.isAssign());
assertFalse(node2.isGetElem());
assertTrue(node2.isDelProp());
assertFalse(node2.isOr());
assertEquals((-1), node2.getSourcePosition());
assertFalse(node2.isScript());
assertFalse(node2.isNumber());
assertFalse(node2.isNot());
assertFalse(node2.isDo());
assertFalse(node2.isAnd());
assertFalse(node2.isAssignAdd());
assertFalse(node2.isLabel());
assertFalse(node2.isCast());
assertFalse(node2.isContinue());
assertFalse(node2.isName());
assertFalse(node2.isCall());
assertFalse(node2.isBreak());
assertFalse(node2.isNull());
assertFalse(node2.isVar());
assertFalse(node2.isAdd());
assertFalse(node2.isNew());
assertFalse(node2.isGetProp());
assertFalse(node2.isString());
assertFalse(node2.isObjectLit());
assertFalse(node2.isVoid());
assertFalse(node2.isWhile());
assertFalse(node2.isExprResult());
assertFalse(node2.isReturn());
assertFalse(node2.isTypeOf());
assertFalse(node2.isDec());
assertFalse(node2.isComma());
assertFalse(node2.isFor());
assertFalse(node2.isEmpty());
assertTrue(node2.hasOneChild());
assertFalse(node2.isArrayLit());
assertFalse(node2.isNE());
assertFalse(node2.isIf());
assertFalse(node2.isTry());
assertFalse(node2.isTrue());
assertFalse(node2.isDebugger());
assertFalse(node2.isGetterDef());
assertFalse(node2.isIn());
assertFalse(node2.isDefaultCase());
assertFalse(node2.isSwitch());
assertFalse(node2.isFunction());
assertFalse(node2.isFalse());
assertFalse(node2.isThrow());
assertFalse(node2.isStringKey());
assertFalse(node2.isParamList());
assertFalse(node2.isInc());
assertEquals((-1), node2.getCharno());
assertFalse(node2.isSetterDef());
assertFalse(node2.isCase());
assertFalse(node2.isBlock());
assertTrue(node2.hasChildren());
assertEquals((-1), node2.getLineno());
assertEquals(1, node2.getChildCount());
assertEquals(31, node2.getType());
assertFalse(node2.isThis());
assertFalse(node2.isHook());
assertFalse(node2.isRegExp());
assertFalse(node2.isCatch());
assertFalse(node2.isInstanceOf());
assertFalse(node2.hasMoreThanOneChild());
assertFalse(node2.isWith());
assertNotNull(node2);

Node node3 = new Node(2, 38, 41);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertEquals(41, node3.getCharno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isContinue());
assertFalse(node3.isCase());
assertEquals(155689, node3.getSourcePosition());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(2, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFor());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isSwitch());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertEquals(38, node3.getLineno());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());
assertNotNull(node3);

boolean boolean0 = node3.mayMutateArguments();
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertTrue(boolean0);
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertEquals(41, node3.getCharno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isContinue());
assertFalse(node3.isCase());
assertEquals(155689, node3.getSourcePosition());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(2, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFor());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isSwitch());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertEquals(38, node3.getLineno());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());

boolean boolean1 = node1.isOnlyModifiesThisCall();
assertNotSame(node1, node2);
assertNotSame(node1, node3);
assertFalse(node1.equals((Object)node0));
assertFalse(node1.equals((Object)node2));
assertFalse(node1.equals((Object)node3));
assertFalse(boolean1 == boolean0);
assertEquals(50, Node.FREE_CALL);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(48, Node.DIRECTIVES);
assertEquals(54, Node.SLASH_V);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(57, Node.LAST_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(53, Node.INPUT_ID);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(52, Node.LENGTH);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(2, Node.POST_FLAG);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(1, Node.DECR_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertFalse(boolean1);
assertFalse(node1.isDec());
assertFalse(node1.hasChildren());
assertEquals((-1), node1.getSourcePosition());
assertFalse(node1.isLabelName());
assertFalse(node1.isAssign());
assertFalse(node1.isNumber());
assertFalse(node1.isTypeOf());
assertFalse(node1.isCast());
assertFalse(node1.isGetElem());
assertEquals((-1), node1.getLineno());
assertFalse(node1.isOr());
assertFalse(node1.isWhile());
assertFalse(node1.isNot());
assertFalse(node1.isWith());
assertFalse(node1.isScript());
assertFalse(node1.isExprResult());
assertFalse(node1.isInstanceOf());
assertFalse(node1.hasOneChild());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isComma());
assertFalse(node1.isBlock());
assertFalse(node1.isThis());
assertFalse(node1.isReturn());
assertFalse(node1.isFalse());
assertFalse(node1.isGetProp());
assertFalse(node1.isSetterDef());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isFunction());
assertFalse(node1.isContinue());
assertFalse(node1.isInc());
assertFalse(node1.isThrow());
assertFalse(node1.isGetterDef());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isEmpty());
assertFalse(node1.isIn());
assertFalse(node1.isArrayLit());
assertFalse(node1.isDebugger());
assertFalse(node1.isNE());
assertFalse(node1.isTrue());
assertFalse(node1.isString());
assertFalse(node1.isRegExp());
assertFalse(node1.isVoid());
assertFalse(node1.isCase());
assertFalse(node1.isCatch());
assertFalse(node1.isTry());
assertFalse(node1.isFor());
assertFalse(node1.isHook());
assertFalse(node1.isBreak());
assertFalse(node1.isName());
assertEquals(50, node1.getType());
assertFalse(node1.isCall());
assertEquals((-1), node1.getCharno());
assertFalse(node1.isParamList());
assertFalse(node1.isStringKey());
assertFalse(node1.isNull());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isSwitch());
assertFalse(node1.isDo());
assertFalse(node1.isNew());
assertFalse(node1.isAdd());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isLabel());
assertFalse(node1.isVar());

boolean boolean2 = node3.isWhile();
assertNotSame(node3, node1);
assertNotSame(node3, node2);
assertFalse(node3.equals((Object)node0));
assertFalse(node3.equals((Object)node1));
assertFalse(node3.equals((Object)node2));
assertFalse(boolean2 == boolean0);
assertTrue(boolean2 == boolean1);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(2, Node.POST_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(53, Node.INPUT_ID);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(50, Node.FREE_CALL);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(54, Node.SLASH_V);
assertFalse(boolean2);
assertFalse(node3.isAnd());
assertFalse(node3.isObjectLit());
assertFalse(node3.isNot());
assertFalse(node3.isExprResult());
assertFalse(node3.isThis());
assertFalse(node3.isComma());
assertFalse(node3.isBreak());
assertFalse(node3.isWith());
assertFalse(node3.isCast());
assertEquals(41, node3.getCharno());
assertFalse(node3.isInstanceOf());
assertFalse(node3.isLabelName());
assertFalse(node3.isAssign());
assertFalse(node3.hasOneChild());
assertFalse(node3.hasChildren());
assertFalse(node3.isHook());
assertFalse(node3.isGetProp());
assertFalse(node3.isNumber());
assertFalse(node3.isScript());
assertFalse(node3.isString());
assertFalse(node3.isContinue());
assertFalse(node3.isCase());
assertEquals(155689, node3.getSourcePosition());
assertFalse(node3.isBlock());
assertFalse(node3.hasMoreThanOneChild());
assertEquals(2, node3.getType());
assertFalse(node3.isThrow());
assertFalse(node3.isFalse());
assertFalse(node3.isIf());
assertFalse(node3.isNE());
assertFalse(node3.isInc());
assertFalse(node3.isSetterDef());
assertFalse(node3.isIn());
assertFalse(node3.isDefaultCase());
assertFalse(node3.isVoid());
assertFalse(node3.isFunction());
assertEquals(0, node3.getChildCount());
assertFalse(node3.isRegExp());
assertFalse(node3.isCatch());
assertFalse(node3.isArrayLit());
assertFalse(node3.isFor());
assertFalse(node3.isParamList());
assertFalse(node3.isStringKey());
assertFalse(node3.isTry());
assertFalse(node3.isDebugger());
assertFalse(node3.isGetterDef());
assertFalse(node3.isDo());
assertFalse(node3.isReturn());
assertFalse(node3.isSwitch());
assertFalse(node3.isAssignAdd());
assertFalse(node3.isWhile());
assertFalse(node3.isLabel());
assertFalse(node3.isDec());
assertEquals(38, node3.getLineno());
assertFalse(node3.isTypeOf());
assertFalse(node3.isGetElem());
assertFalse(node3.isCall());
assertFalse(node3.isName());
assertFalse(node3.isDelProp());
assertFalse(node3.isNull());
assertFalse(node3.isVar());
assertFalse(node3.isTrue());
assertFalse(node3.isOr());
assertFalse(node3.isNew());
assertFalse(node3.isEmpty());
assertFalse(node3.isAdd());

int int0 = Node.NO_SIDE_EFFECTS;
assertEquals(15, int0);


[MASTER] 13:21:37.859 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_187_1628256097748/com/google/javascript/rhino/Node_187_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_187_1628256097748/com/google/javascript/rhino/Node_187_tmp__ESTest_scaffolding.java]]
[MASTER] 13:21:37.859 [logback-2] ERROR JUnitAnalyzer - Classpath: subjects/buggy-versions/Closure-110/build/classes:subjects/buggy-versions/Closure-110/lib/args4j.jar:subjects/buggy-versions/Closure-110/lib/guava.jar:subjects/buggy-versions/Closure-110/lib/json.jar:subjects/buggy-versions/Closure-110/lib/jsr305.jar:subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:subjects/buggy-versions/Closure-110/build/lib/rhino.jar:subjects/buggy-versions/Closure-110/lib/ant.jar:/experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:37.859 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /experiment/tools/evosuite.jar:/experiment/subjects/buggy-versions/Closure-110/build/classes:/experiment/subjects/buggy-versions/Closure-110/lib/args4j.jar:/experiment/subjects/buggy-versions/Closure-110/lib/guava.jar:/experiment/subjects/buggy-versions/Closure-110/lib/json.jar:/experiment/subjects/buggy-versions/Closure-110/lib/jsr305.jar:/experiment/subjects/buggy-versions/Closure-110/lib/protobuf-java.jar:/experiment/subjects/buggy-versions/Closure-110/build/lib/rhino.jar:/experiment/subjects/buggy-versions/Closure-110/lib/ant.jar
[MASTER] 13:21:37.859 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method contains(com.google.javascript.rhino.Node)
  location: variable iterable0 of type java.lang.Iterable<com.google.javascript.rhino.Node>: 126
[MASTER] 13:21:37.860 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_187_1628256097748/com/google/javascript/rhino/Node_187_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Fri Aug 06 13:21:37 GMT 2021
4:  */
5: 
6: package com.google.javascript.rhino;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import com.google.javascript.rhino.Node;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: 
15: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
16: public class Node_187_tmp__ESTest extends Node_187_tmp__ESTest_scaffolding {
17: 
18:   @Test(timeout = 4000)
19:   public void test0()  throws Throwable  {
20:       Node node0 = Node.newString(".");
21:       assertEquals(4095, Node.COLUMN_MASK);
22:       assertEquals(43, Node.IS_CONSTANT_NAME);
23:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
24:       assertEquals(8, Node.FLAG_NO_THROWS);
25:       assertEquals(39, Node.EMPTY_BLOCK);
26:       assertEquals(36, Node.QUOTED_PROP);
27:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
28:       assertEquals(53, Node.INPUT_ID);
29:       assertEquals(55, Node.INFERRED_FUNCTION);
30:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
31:       assertEquals(56, Node.CHANGE_TIME);
32:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
33:       assertEquals(57, Node.REFLECTED_OBJECT);
34:       assertEquals(37, Node.OPT_ARG_NAME);
35:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
36:       assertEquals(48, Node.DIRECTIVES);
37:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
38:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
39:       assertEquals(51, Node.STATIC_SOURCE_FILE);
40:       assertEquals(1, Node.DECR_FLAG);
41:       assertEquals(30, Node.VAR_ARGS_NAME);
42:       assertEquals(49, Node.DIRECT_EVAL);
43:       assertEquals(32, Node.INCRDECR_PROP);
44:       assertEquals(57, Node.LAST_PROP);
45:       assertEquals(12, Node.COLUMN_BITS);
46:       assertEquals(46, Node.IS_NAMESPACE);
47:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
48:       assertEquals(52, Node.LENGTH);
49:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
50:       assertEquals(15, Node.NO_SIDE_EFFECTS);
51:       assertEquals(29, Node.JSDOC_INFO_PROP);
52:       assertEquals(40, Node.ORIGINALNAME_PROP);
53:       assertEquals(50, Node.FREE_CALL);
54:       assertEquals(47, Node.IS_DISPATCHER);
55:       assertEquals(54, Node.SLASH_V);
56:       assertEquals(2, Node.POST_FLAG);
57:       assertFalse(node0.isCase());
58:       assertFalse(node0.isInc());
59:       assertFalse(node0.isIn());
60:       assertFalse(node0.isHook());
61:       assertFalse(node0.isThrow());
62:       assertFalse(node0.isFalse());
63:       assertFalse(node0.isGetterDef());
64:       assertEquals((-1), node0.getCharno());
65:       assertFalse(node0.isDebugger());
66:       assertFalse(node0.isArrayLit());
67:       assertFalse(node0.isSwitch());
68:       assertFalse(node0.isAnd());
69:       assertFalse(node0.isWith());
70:       assertEquals(40, node0.getType());
71:       assertFalse(node0.isCatch());
72:       assertFalse(node0.isScript());
73:       assertFalse(node0.isFunction());
74:       assertFalse(node0.isRegExp());
75:       assertFalse(node0.isInstanceOf());
76:       assertFalse(node0.isTry());
77:       assertFalse(node0.hasOneChild());
78:       assertFalse(node0.isThis());
79:       assertFalse(node0.isFor());
80:       assertFalse(node0.isSetterDef());
81:       assertEquals((-1), node0.getLineno());
82:       assertFalse(node0.isNE());
83:       assertFalse(node0.isIf());
84:       assertFalse(node0.isDo());
85:       assertFalse(node0.hasMoreThanOneChild());
86:       assertFalse(node0.isContinue());
87:       assertFalse(node0.isLabel());
88:       assertFalse(node0.isAdd());
89:       assertFalse(node0.isAssignAdd());
90:       assertFalse(node0.isBlock());
91:       assertTrue(node0.isString());
92:       assertFalse(node0.isReturn());
93:       assertFalse(node0.isNew());
94:       assertFalse(node0.isVar());
95:       assertFalse(node0.isWhile());
96:       assertFalse(node0.isLabelName());
97:       assertEquals((-1), node0.getSourcePosition());
98:       assertFalse(node0.isCast());
99:       assertFalse(node0.isNumber());
100:       assertFalse(node0.isParamList());
101:       assertFalse(node0.isStringKey());
102:       assertFalse(node0.isNot());
103:       assertFalse(node0.isExprResult());
104:       assertFalse(node0.isObjectLit());
105:       assertEquals(0, node0.getChildCount());
106:       assertFalse(node0.isGetProp());
107:       assertFalse(node0.isComma());
108:       assertFalse(node0.isDefaultCase());
109:       assertFalse(node0.isAssign());
110:       assertFalse(node0.isEmpty());
111:       assertFalse(node0.isGetElem());
112:       assertFalse(node0.isName());
113:       assertFalse(node0.isDelProp());
114:       assertFalse(node0.isBreak());
115:       assertFalse(node0.hasChildren());
116:       assertFalse(node0.isDec());
117:       assertFalse(node0.isTypeOf());
118:       assertFalse(node0.isCall());
119:       assertFalse(node0.isOr());
120:       assertFalse(node0.isVoid());
121:       assertFalse(node0.isTrue());
122:       assertFalse(node0.isNull());
123:       assertNotNull(node0);
124:       
125:       Iterable<Node> iterable0 = node0.children();
126:       assertFalse(iterable0.contains(node0));
127:       assertEquals(4095, Node.COLUMN_MASK);
128:       assertEquals(43, Node.IS_CONSTANT_NAME);
129:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
130:       assertEquals(8, Node.FLAG_NO_THROWS);
131:       assertEquals(39, Node.EMPTY_BLOCK);
132:       assertEquals(36, Node.QUOTED_PROP);
133:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
134:       assertEquals(53, Node.INPUT_ID);
135:       assertEquals(55, Node.INFERRED_FUNCTION);
136:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
137:       assertEquals(56, Node.CHANGE_TIME);
138:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
139:       assertEquals(57, Node.REFLECTED_OBJECT);
140:       assertEquals(37, Node.OPT_ARG_NAME);
141:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
142:       assertEquals(48, Node.DIRECTIVES);
143:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
144:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
145:       assertEquals(51, Node.STATIC_SOURCE_FILE);
146:       assertEquals(1, Node.DECR_FLAG);
147:       assertEquals(30, Node.VAR_ARGS_NAME);
148:       assertEquals(49, Node.DIRECT_EVAL);
149:       assertEquals(32, Node.INCRDECR_PROP);
150:       assertEquals(57, Node.LAST_PROP);
151:       assertEquals(12, Node.COLUMN_BITS);
152:       assertEquals(46, Node.IS_NAMESPACE);
153:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
154:       assertEquals(52, Node.LENGTH);
155:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
156:       assertEquals(15, Node.NO_SIDE_EFFECTS);
157:       assertEquals(29, Node.JSDOC_INFO_PROP);
158:       assertEquals(40, Node.ORIGINALNAME_PROP);
159:       assertEquals(50, Node.FREE_CALL);
160:       assertEquals(47, Node.IS_DISPATCHER);
161:       assertEquals(54, Node.SLASH_V);
162:       assertEquals(2, Node.POST_FLAG);
163:       assertFalse(node0.isCase());
164:       assertFalse(node0.isInc());
165:       assertFalse(node0.isIn());
166:       assertFalse(node0.isHook());
167:       assertFalse(node0.isThrow());
168:       assertFalse(node0.isFalse());
169:       assertFalse(node0.isGetterDef());
170:       assertEquals((-1), node0.getCharno());
171:       assertFalse(node0.isDebugger());
172:       assertFalse(node0.isArrayLit());
173:       assertFalse(node0.isSwitch());
174:       assertFalse(node0.isAnd());
175:       assertFalse(node0.isWith());
176:       assertEquals(40, node0.getType());
177:       assertFalse(node0.isCatch());
178:       assertFalse(node0.isScript());
179:       assertFalse(node0.isFunction());
180:       assertFalse(node0.isRegExp());
181:       assertFalse(node0.isInstanceOf());
182:       assertFalse(node0.isTry());
183:       assertFalse(node0.hasOneChild());
184:       assertFalse(node0.isThis());
185:       assertFalse(node0.isFor());
186:       assertFalse(node0.isSetterDef());
187:       assertEquals((-1), node0.getLineno());
188:       assertFalse(node0.isNE());
189:       assertFalse(node0.isIf());
190:       assertFalse(node0.isDo());
191:       assertFalse(node0.hasMoreThanOneChild());
192:       assertFalse(node0.isContinue());
193:       assertFalse(node0.isLabel());
194:       assertFalse(node0.isAdd());
195:       assertFalse(node0.isAssignAdd());
196:       assertFalse(node0.isBlock());
197:       assertTrue(node0.isString());
198:       assertFalse(node0.isReturn());
199:       assertFalse(node0.isNew());
200:       assertFalse(node0.isVar());
201:       assertFalse(node0.isWhile());
202:       assertFalse(node0.isLabelName());
203:       assertEquals((-1), node0.getSourcePosition());
204:       assertFalse(node0.isCast());
205:       assertFalse(node0.isNumber());
206:       assertFalse(node0.isParamList());
207:       assertFalse(node0.isStringKey());
208:       assertFalse(node0.isNot());
209:       assertFalse(node0.isExprResult());
210:       assertFalse(node0.isObjectLit());
211:       assertEquals(0, node0.getChildCount());
212:       assertFalse(node0.isGetProp());
213:       assertFalse(node0.isComma());
214:       assertFalse(node0.isDefaultCase());
215:       assertFalse(node0.isAssign());
216:       assertFalse(node0.isEmpty());
217:       assertFalse(node0.isGetElem());
218:       assertFalse(node0.isName());
219:       assertFalse(node0.isDelProp());
220:       assertFalse(node0.isBreak());
221:       assertFalse(node0.hasChildren());
222:       assertFalse(node0.isDec());
223:       assertFalse(node0.isTypeOf());
224:       assertFalse(node0.isCall());
225:       assertFalse(node0.isOr());
226:       assertFalse(node0.isVoid());
227:       assertFalse(node0.isTrue());
228:       assertFalse(node0.isNull());
229:       assertNotNull(iterable0);
230:       
231:       String string0 = node0.toString();
232:       assertEquals(4095, Node.COLUMN_MASK);
233:       assertEquals(43, Node.IS_CONSTANT_NAME);
234:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
235:       assertEquals(8, Node.FLAG_NO_THROWS);
236:       assertEquals(39, Node.EMPTY_BLOCK);
237:       assertEquals(36, Node.QUOTED_PROP);
238:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
239:       assertEquals(53, Node.INPUT_ID);
240:       assertEquals(55, Node.INFERRED_FUNCTION);
241:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
242:       assertEquals(56, Node.CHANGE_TIME);
243:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
244:       assertEquals(57, Node.REFLECTED_OBJECT);
245:       assertEquals(37, Node.OPT_ARG_NAME);
246:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
247:       assertEquals(48, Node.DIRECTIVES);
248:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
249:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
250:       assertEquals(51, Node.STATIC_SOURCE_FILE);
251:       assertEquals(1, Node.DECR_FLAG);
252:       assertEquals(30, Node.VAR_ARGS_NAME);
253:       assertEquals(49, Node.DIRECT_EVAL);
254:       assertEquals(32, Node.INCRDECR_PROP);
255:       assertEquals(57, Node.LAST_PROP);
256:       assertEquals(12, Node.COLUMN_BITS);
257:       assertEquals(46, Node.IS_NAMESPACE);
258:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
259:       assertEquals(52, Node.LENGTH);
260:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
261:       assertEquals(15, Node.NO_SIDE_EFFECTS);
262:       assertEquals(29, Node.JSDOC_INFO_PROP);
263:       assertEquals(40, Node.ORIGINALNAME_PROP);
264:       assertEquals(50, Node.FREE_CALL);
265:       assertEquals(47, Node.IS_DISPATCHER);
266:       assertEquals(54, Node.SLASH_V);
267:       assertEquals(2, Node.POST_FLAG);
268:       assertEquals("STRING .", string0);
269:       assertFalse(node0.isCase());
270:       assertFalse(node0.isInc());
271:       assertFalse(node0.isIn());
272:       assertFalse(node0.isHook());
273:       assertFalse(node0.isThrow());
274:       assertFalse(node0.isFalse());
275:       assertFalse(node0.isGetterDef());
276:       assertEquals((-1), node0.getCharno());
277:       assertFalse(node0.isDebugger());
278:       assertFalse(node0.isArrayLit());
279:       assertFalse(node0.isSwitch());
280:       assertFalse(node0.isAnd());
281:       assertFalse(node0.isWith());
282:       assertEquals(40, node0.getType());
283:       assertFalse(node0.isCatch());
284:       assertFalse(node0.isScript());
285:       assertFalse(node0.isFunction());
286:       assertFalse(node0.isRegExp());
287:       assertFalse(node0.isInstanceOf());
288:       assertFalse(node0.isTry());
289:       assertFalse(node0.hasOneChild());
290:       assertFalse(node0.isThis());
291:       assertFalse(node0.isFor());
292:       assertFalse(node0.isSetterDef());
293:       assertEquals((-1), node0.getLineno());
294:       assertFalse(node0.isNE());
295:       assertFalse(node0.isIf());
296:       assertFalse(node0.isDo());
297:       assertFalse(node0.hasMoreThanOneChild());
298:       assertFalse(node0.isContinue());
299:       assertFalse(node0.isLabel());
300:       assertFalse(node0.isAdd());
301:       assertFalse(node0.isAssignAdd());
302:       assertFalse(node0.isBlock());
303:       assertTrue(node0.isString());
304:       assertFalse(node0.isReturn());
305:       assertFalse(node0.isNew());
306:       assertFalse(node0.isVar());
307:       assertFalse(node0.isWhile());
308:       assertFalse(node0.isLabelName());
309:       assertEquals((-1), node0.getSourcePosition());
310:       assertFalse(node0.isCast());
311:       assertFalse(node0.isNumber());
312:       assertFalse(node0.isParamList());
313:       assertFalse(node0.isStringKey());
314:       assertFalse(node0.isNot());
315:       assertFalse(node0.isExprResult());
316:       assertFalse(node0.isObjectLit());
317:       assertEquals(0, node0.getChildCount());
318:       assertFalse(node0.isGetProp());
319:       assertFalse(node0.isComma());
320:       assertFalse(node0.isDefaultCase());
321:       assertFalse(node0.isAssign());
322:       assertFalse(node0.isEmpty());
323:       assertFalse(node0.isGetElem());
324:       assertFalse(node0.isName());
325:       assertFalse(node0.isDelProp());
326:       assertFalse(node0.isBreak());
327:       assertFalse(node0.hasChildren());
328:       assertFalse(node0.isDec());
329:       assertFalse(node0.isTypeOf());
330:       assertFalse(node0.isCall());
331:       assertFalse(node0.isOr());
332:       assertFalse(node0.isVoid());
333:       assertFalse(node0.isTrue());
334:       assertFalse(node0.isNull());
335:       assertNotNull(string0);
336:       
337:       Node node1 = new Node(37, 55, 47);
338:       assertFalse(node1.equals((Object)node0));
339:       assertEquals(4095, Node.COLUMN_MASK);
340:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
341:       assertEquals(55, Node.INFERRED_FUNCTION);
342:       assertEquals(8, Node.FLAG_NO_THROWS);
343:       assertEquals(39, Node.EMPTY_BLOCK);
344:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
345:       assertEquals(53, Node.INPUT_ID);
346:       assertEquals(40, Node.ORIGINALNAME_PROP);
347:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
348:       assertEquals(50, Node.FREE_CALL);
349:       assertEquals(2, Node.POST_FLAG);
350:       assertEquals(54, Node.SLASH_V);
351:       assertEquals(43, Node.IS_CONSTANT_NAME);
352:       assertEquals(12, Node.COLUMN_BITS);
353:       assertEquals(46, Node.IS_NAMESPACE);
354:       assertEquals(30, Node.VAR_ARGS_NAME);
355:       assertEquals(51, Node.STATIC_SOURCE_FILE);
356:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
357:       assertEquals(15, Node.NO_SIDE_EFFECTS);
358:       assertEquals(57, Node.LAST_PROP);
359:       assertEquals(47, Node.IS_DISPATCHER);
360:       assertEquals(29, Node.JSDOC_INFO_PROP);
361:       assertEquals(32, Node.INCRDECR_PROP);
362:       assertEquals(1, Node.DECR_FLAG);
363:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
364:       assertEquals(57, Node.REFLECTED_OBJECT);
365:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
366:       assertEquals(52, Node.LENGTH);
367:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
368:       assertEquals(36, Node.QUOTED_PROP);
369:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
370:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
371:       assertEquals(56, Node.CHANGE_TIME);
372:       assertEquals(49, Node.DIRECT_EVAL);
373:       assertEquals(37, Node.OPT_ARG_NAME);
374:       assertEquals(48, Node.DIRECTIVES);
375:       assertFalse(node1.isString());
376:       assertFalse(node1.isInc());
377:       assertFalse(node1.isCase());
378:       assertFalse(node1.isHook());
379:       assertEquals(37, node1.getType());
380:       assertFalse(node1.isThrow());
381:       assertFalse(node1.isEmpty());
382:       assertFalse(node1.isIf());
383:       assertFalse(node1.isDelProp());
384:       assertFalse(node1.isBreak());
385:       assertFalse(node1.isTrue());
386:       assertFalse(node1.isVoid());
387:       assertFalse(node1.isIn());
388:       assertTrue(node1.isCall());
389:       assertFalse(node1.isNE());
390:       assertEquals(55, node1.getLineno());
391:       assertFalse(node1.isCatch());
392:       assertFalse(node1.isWith());
393:       assertFalse(node1.isDefaultCase());
394:       assertFalse(node1.isInstanceOf());
395:       assertFalse(node1.isScript());
396:       assertFalse(node1.isTry());
397:       assertFalse(node1.isRegExp());
398:       assertEquals(0, node1.getChildCount());
399:       assertFalse(node1.isThis());
400:       assertFalse(node1.isStringKey());
401:       assertFalse(node1.isFor());
402:       assertFalse(node1.isLabelName());
403:       assertFalse(node1.hasOneChild());
404:       assertFalse(node1.isArrayLit());
405:       assertFalse(node1.isParamList());
406:       assertEquals(225327, node1.getSourcePosition());
407:       assertFalse(node1.isSwitch());
408:       assertFalse(node1.isNumber());
409:       assertFalse(node1.isGetterDef());
410:       assertFalse(node1.isDo());
411:       assertFalse(node1.hasMoreThanOneChild());
412:       assertFalse(node1.isWhile());
413:       assertFalse(node1.isContinue());
414:       assertFalse(node1.isBlock());
415:       assertFalse(node1.isNew());
416:       assertFalse(node1.isAssignAdd());
417:       assertFalse(node1.isDec());
418:       assertFalse(node1.isTypeOf());
419:       assertFalse(node1.isVar());
420:       assertFalse(node1.isReturn());
421:       assertFalse(node1.hasChildren());
422:       assertFalse(node1.isLabel());
423:       assertFalse(node1.isGetElem());
424:       assertFalse(node1.isAssign());
425:       assertFalse(node1.isName());
426:       assertFalse(node1.isSetterDef());
427:       assertFalse(node1.isOr());
428:       assertFalse(node1.isAdd());
429:       assertFalse(node1.isNull());
430:       assertFalse(node1.isNot());
431:       assertFalse(node1.isObjectLit());
432:       assertFalse(node1.isAnd());
433:       assertFalse(node1.isExprResult());
434:       assertFalse(node1.isFunction());
435:       assertFalse(node1.isComma());
436:       assertEquals(47, node1.getCharno());
437:       assertFalse(node1.isFalse());
438:       assertFalse(node1.isCast());
439:       assertFalse(node1.isGetProp());
440:       assertFalse(node1.isDebugger());
441:       assertNotNull(node1);
442:       
443:       Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
444:       assertFalse(node0.equals((Object)node1));
445:       assertFalse(node1.equals((Object)node0));
446:       assertEquals(4095, Node.COLUMN_MASK);
447:       assertEquals(43, Node.IS_CONSTANT_NAME);
448:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
449:       assertEquals(8, Node.FLAG_NO_THROWS);
450:       assertEquals(39, Node.EMPTY_BLOCK);
451:       assertEquals(36, Node.QUOTED_PROP);
452:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
453:       assertEquals(53, Node.INPUT_ID);
454:       assertEquals(55, Node.INFERRED_FUNCTION);
455:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
456:       assertEquals(56, Node.CHANGE_TIME);
457:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
458:       assertEquals(57, Node.REFLECTED_OBJECT);
459:       assertEquals(37, Node.OPT_ARG_NAME);
460:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
461:       assertEquals(48, Node.DIRECTIVES);
462:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
463:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
464:       assertEquals(51, Node.STATIC_SOURCE_FILE);
465:       assertEquals(1, Node.DECR_FLAG);
466:       assertEquals(30, Node.VAR_ARGS_NAME);
467:       assertEquals(49, Node.DIRECT_EVAL);
468:       assertEquals(32, Node.INCRDECR_PROP);
469:       assertEquals(57, Node.LAST_PROP);
470:       assertEquals(12, Node.COLUMN_BITS);
471:       assertEquals(46, Node.IS_NAMESPACE);
472:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
473:       assertEquals(52, Node.LENGTH);
474:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
475:       assertEquals(15, Node.NO_SIDE_EFFECTS);
476:       assertEquals(29, Node.JSDOC_INFO_PROP);
477:       assertEquals(40, Node.ORIGINALNAME_PROP);
478:       assertEquals(50, Node.FREE_CALL);
479:       assertEquals(47, Node.IS_DISPATCHER);
480:       assertEquals(54, Node.SLASH_V);
481:       assertEquals(2, Node.POST_FLAG);
482:       assertEquals(4095, Node.COLUMN_MASK);
483:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
484:       assertEquals(55, Node.INFERRED_FUNCTION);
485:       assertEquals(8, Node.FLAG_NO_THROWS);
486:       assertEquals(39, Node.EMPTY_BLOCK);
487:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
488:       assertEquals(53, Node.INPUT_ID);
489:       assertEquals(40, Node.ORIGINALNAME_PROP);
490:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
491:       assertEquals(50, Node.FREE_CALL);
492:       assertEquals(2, Node.POST_FLAG);
493:       assertEquals(54, Node.SLASH_V);
494:       assertEquals(43, Node.IS_CONSTANT_NAME);
495:       assertEquals(12, Node.COLUMN_BITS);
496:       assertEquals(46, Node.IS_NAMESPACE);
497:       assertEquals(30, Node.VAR_ARGS_NAME);
498:       assertEquals(51, Node.STATIC_SOURCE_FILE);
499:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
500:       assertEquals(15, Node.NO_SIDE_EFFECTS);
501:       assertEquals(57, Node.LAST_PROP);
502:       assertEquals(47, Node.IS_DISPATCHER);
503:       assertEquals(29, Node.JSDOC_INFO_PROP);
504:       assertEquals(32, Node.INCRDECR_PROP);
505:       assertEquals(1, Node.DECR_FLAG);
506:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
507:       assertEquals(57, Node.REFLECTED_OBJECT);
508:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
509:       assertEquals(52, Node.LENGTH);
510:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
511:       assertEquals(36, Node.QUOTED_PROP);
512:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
513:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
514:       assertEquals(56, Node.CHANGE_TIME);
515:       assertEquals(49, Node.DIRECT_EVAL);
516:       assertEquals(37, Node.OPT_ARG_NAME);
517:       assertEquals(48, Node.DIRECTIVES);
518:       assertFalse(node0.isCase());
519:       assertFalse(node0.isInc());
520:       assertFalse(node0.isIn());
521:       assertFalse(node0.isHook());
522:       assertFalse(node0.isThrow());
523:       assertFalse(node0.isFalse());
524:       assertFalse(node0.isGetterDef());
525:       assertEquals((-1), node0.getCharno());
526:       assertFalse(node0.isDebugger());
527:       assertFalse(node0.isArrayLit());
528:       assertFalse(node0.isSwitch());
529:       assertFalse(node0.isAnd());
530:       assertFalse(node0.isWith());
531:       assertEquals(40, node0.getType());
532:       assertFalse(node0.isCatch());
533:       assertFalse(node0.isScript());
534:       assertFalse(node0.isFunction());
535:       assertFalse(node0.isRegExp());
536:       assertFalse(node0.isInstanceOf());
537:       assertFalse(node0.isTry());
538:       assertFalse(node0.hasOneChild());
539:       assertFalse(node0.isThis());
540:       assertFalse(node0.isFor());
541:       assertFalse(node0.isSetterDef());
542:       assertEquals((-1), node0.getLineno());
543:       assertFalse(node0.isNE());
544:       assertFalse(node0.isIf());
545:       assertFalse(node0.isDo());
546:       assertFalse(node0.hasMoreThanOneChild());
547:       assertFalse(node0.isContinue());
548:       assertFalse(node0.isLabel());
549:       assertFalse(node0.isAdd());
550:       assertFalse(node0.isAssignAdd());
551:       assertFalse(node0.isBlock());
552:       assertTrue(node0.isString());
553:       assertFalse(node0.isReturn());
554:       assertFalse(node0.isNew());
555:       assertFalse(node0.isVar());
556:       assertFalse(node0.isWhile());
557:       assertFalse(node0.isLabelName());
558:       assertEquals((-1), node0.getSourcePosition());
559:       assertFalse(node0.isCast());
560:       assertFalse(node0.isNumber());
561:       assertFalse(node0.isParamList());
562:       assertFalse(node0.isStringKey());
563:       assertFalse(node0.isNot());
564:       assertFalse(node0.isExprResult());
565:       assertFalse(node0.isObjectLit());
566:       assertEquals(0, node0.getChildCount());
567:       assertFalse(node0.isGetProp());
568:       assertFalse(node0.isComma());
569:       assertFalse(node0.isDefaultCase());
570:       assertFalse(node0.isAssign());
571:       assertFalse(node0.isEmpty());
572:       assertFalse(node0.isGetElem());
573:       assertFalse(node0.isName());
574:       assertFalse(node0.isDelProp());
575:       assertFalse(node0.isBreak());
576:       assertFalse(node0.hasChildren());
577:       assertFalse(node0.isDec());
578:       assertFalse(node0.isTypeOf());
579:       assertFalse(node0.isCall());
580:       assertFalse(node0.isOr());
581:       assertFalse(node0.isVoid());
582:       assertFalse(node0.isTrue());
583:       assertFalse(node0.isNull());
584:       assertFalse(node1.isString());
585:       assertFalse(node1.isInc());
586:       assertFalse(node1.isCase());
587:       assertFalse(node1.isHook());
588:       assertEquals(37, node1.getType());
589:       assertFalse(node1.isThrow());
590:       assertFalse(node1.isEmpty());
591:       assertFalse(node1.isIf());
592:       assertFalse(node1.isDelProp());
593:       assertFalse(node1.isBreak());
594:       assertFalse(node1.isTrue());
595:       assertFalse(node1.isVoid());
596:       assertFalse(node1.isIn());
597:       assertTrue(node1.isCall());
598:       assertFalse(node1.isNE());
599:       assertEquals(55, node1.getLineno());
600:       assertFalse(node1.isCatch());
601:       assertFalse(node1.isWith());
602:       assertFalse(node1.isDefaultCase());
603:       assertFalse(node1.isInstanceOf());
604:       assertFalse(node1.isScript());
605:       assertFalse(node1.isTry());
606:       assertFalse(node1.isRegExp());
607:       assertEquals(0, node1.getChildCount());
608:       assertFalse(node1.isThis());
609:       assertFalse(node1.isStringKey());
610:       assertFalse(node1.isFor());
611:       assertFalse(node1.isLabelName());
612:       assertFalse(node1.hasOneChild());
613:       assertFalse(node1.isArrayLit());
614:       assertFalse(node1.isParamList());
615:       assertEquals(225327, node1.getSourcePosition());
616:       assertFalse(node1.isSwitch());
617:       assertFalse(node1.isNumber());
618:       assertFalse(node1.isGetterDef());
619:       assertFalse(node1.isDo());
620:       assertFalse(node1.hasMoreThanOneChild());
621:       assertFalse(node1.isWhile());
622:       assertFalse(node1.isContinue());
623:       assertFalse(node1.isBlock());
624:       assertFalse(node1.isNew());
625:       assertFalse(node1.isAssignAdd());
626:       assertFalse(node1.isDec());
627:       assertFalse(node1.isTypeOf());
628:       assertFalse(node1.isVar());
629:       assertFalse(node1.isReturn());
630:       assertFalse(node1.hasChildren());
631:       assertFalse(node1.isLabel());
632:       assertFalse(node1.isGetElem());
633:       assertFalse(node1.isAssign());
634:       assertFalse(node1.isName());
635:       assertFalse(node1.isSetterDef());
636:       assertFalse(node1.isOr());
637:       assertFalse(node1.isAdd());
638:       assertFalse(node1.isNull());
639:       assertFalse(node1.isNot());
640:       assertFalse(node1.isObjectLit());
641:       assertFalse(node1.isAnd());
642:       assertFalse(node1.isExprResult());
643:       assertFalse(node1.isFunction());
644:       assertFalse(node1.isComma());
645:       assertEquals(47, node1.getCharno());
646:       assertFalse(node1.isFalse());
647:       assertFalse(node1.isCast());
648:       assertFalse(node1.isGetProp());
649:       assertFalse(node1.isDebugger());
650:       assertNotNull(node_NodeMismatch0);
651:       
652:       boolean boolean0 = node1.isEquivalentToTyped(node0);
653:       assertFalse(node0.equals((Object)node1));
654:       assertFalse(node1.equals((Object)node0));
655:       assertEquals(4095, Node.COLUMN_MASK);
656:       assertEquals(43, Node.IS_CONSTANT_NAME);
657:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
658:       assertEquals(8, Node.FLAG_NO_THROWS);
659:       assertEquals(39, Node.EMPTY_BLOCK);
660:       assertEquals(36, Node.QUOTED_PROP);
661:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
662:       assertEquals(53, Node.INPUT_ID);
663:       assertEquals(55, Node.INFERRED_FUNCTION);
664:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
665:       assertEquals(56, Node.CHANGE_TIME);
666:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
667:       assertEquals(57, Node.REFLECTED_OBJECT);
668:       assertEquals(37, Node.OPT_ARG_NAME);
669:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
670:       assertEquals(48, Node.DIRECTIVES);
671:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
672:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
673:       assertEquals(51, Node.STATIC_SOURCE_FILE);
674:       assertEquals(1, Node.DECR_FLAG);
675:       assertEquals(30, Node.VAR_ARGS_NAME);
676:       assertEquals(49, Node.DIRECT_EVAL);
677:       assertEquals(32, Node.INCRDECR_PROP);
678:       assertEquals(57, Node.LAST_PROP);
679:       assertEquals(12, Node.COLUMN_BITS);
680:       assertEquals(46, Node.IS_NAMESPACE);
681:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
682:       assertEquals(52, Node.LENGTH);
683:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
684:       assertEquals(15, Node.NO_SIDE_EFFECTS);
685:       assertEquals(29, Node.JSDOC_INFO_PROP);
686:       assertEquals(40, Node.ORIGINALNAME_PROP);
687:       assertEquals(50, Node.FREE_CALL);
688:       assertEquals(47, Node.IS_DISPATCHER);
689:       assertEquals(54, Node.SLASH_V);
690:       assertEquals(2, Node.POST_FLAG);
691:       assertEquals(4095, Node.COLUMN_MASK);
692:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
693:       assertEquals(55, Node.INFERRED_FUNCTION);
694:       assertEquals(8, Node.FLAG_NO_THROWS);
695:       assertEquals(39, Node.EMPTY_BLOCK);
696:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
697:       assertEquals(53, Node.INPUT_ID);
698:       assertEquals(40, Node.ORIGINALNAME_PROP);
699:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
700:       assertEquals(50, Node.FREE_CALL);
701:       assertEquals(2, Node.POST_FLAG);
702:       assertEquals(54, Node.SLASH_V);
703:       assertEquals(43, Node.IS_CONSTANT_NAME);
704:       assertEquals(12, Node.COLUMN_BITS);
705:       assertEquals(46, Node.IS_NAMESPACE);
706:       assertEquals(30, Node.VAR_ARGS_NAME);
707:       assertEquals(51, Node.STATIC_SOURCE_FILE);
708:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
709:       assertEquals(15, Node.NO_SIDE_EFFECTS);
710:       assertEquals(57, Node.LAST_PROP);
711:       assertEquals(47, Node.IS_DISPATCHER);
712:       assertEquals(29, Node.JSDOC_INFO_PROP);
713:       assertEquals(32, Node.INCRDECR_PROP);
714:       assertEquals(1, Node.DECR_FLAG);
715:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
716:       assertEquals(57, Node.REFLECTED_OBJECT);
717:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
718:       assertEquals(52, Node.LENGTH);
719:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
720:       assertEquals(36, Node.QUOTED_PROP);
721:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
722:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
723:       assertEquals(56, Node.CHANGE_TIME);
724:       assertEquals(49, Node.DIRECT_EVAL);
725:       assertEquals(37, Node.OPT_ARG_NAME);
726:       assertEquals(48, Node.DIRECTIVES);
727:       assertFalse(boolean0);
728:       assertFalse(node0.isCase());
729:       assertFalse(node0.isInc());
730:       assertFalse(node0.isIn());
731:       assertFalse(node0.isHook());
732:       assertFalse(node0.isThrow());
733:       assertFalse(node0.isFalse());
734:       assertFalse(node0.isGetterDef());
735:       assertEquals((-1), node0.getCharno());
736:       assertFalse(node0.isDebugger());
737:       assertFalse(node0.isArrayLit());
738:       assertFalse(node0.isSwitch());
739:       assertFalse(node0.isAnd());
740:       assertFalse(node0.isWith());
741:       assertEquals(40, node0.getType());
742:       assertFalse(node0.isCatch());
743:       assertFalse(node0.isScript());
744:       assertFalse(node0.isFunction());
745:       assertFalse(node0.isRegExp());
746:       assertFalse(node0.isInstanceOf());
747:       assertFalse(node0.isTry());
748:       assertFalse(node0.hasOneChild());
749:       assertFalse(node0.isThis());
750:       assertFalse(node0.isFor());
751:       assertFalse(node0.isSetterDef());
752:       assertEquals((-1), node0.getLineno());
753:       assertFalse(node0.isNE());
754:       assertFalse(node0.isIf());
755:       assertFalse(node0.isDo());
756:       assertFalse(node0.hasMoreThanOneChild());
757:       assertFalse(node0.isContinue());
758:       assertFalse(node0.isLabel());
759:       assertFalse(node0.isAdd());
760:       assertFalse(node0.isAssignAdd());
761:       assertFalse(node0.isBlock());
762:       assertTrue(node0.isString());
763:       assertFalse(node0.isReturn());
764:       assertFalse(node0.isNew());
765:       assertFalse(node0.isVar());
766:       assertFalse(node0.isWhile());
767:       assertFalse(node0.isLabelName());
768:       assertEquals((-1), node0.getSourcePosition());
769:       assertFalse(node0.isCast());
770:       assertFalse(node0.isNumber());
771:       assertFalse(node0.isParamList());
772:       assertFalse(node0.isStringKey());
773:       assertFalse(node0.isNot());
774:       assertFalse(node0.isExprResult());
775:       assertFalse(node0.isObjectLit());
776:       assertEquals(0, node0.getChildCount());
777:       assertFalse(node0.isGetProp());
778:       assertFalse(node0.isComma());
779:       assertFalse(node0.isDefaultCase());
780:       assertFalse(node0.isAssign());
781:       assertFalse(node0.isEmpty());
782:       assertFalse(node0.isGetElem());
783:       assertFalse(node0.isName());
784:       assertFalse(node0.isDelProp());
785:       assertFalse(node0.isBreak());
786:       assertFalse(node0.hasChildren());
787:       assertFalse(node0.isDec());
788:       assertFalse(node0.isTypeOf());
789:       assertFalse(node0.isCall());
790:       assertFalse(node0.isOr());
791:       assertFalse(node0.isVoid());
792:       assertFalse(node0.isTrue());
793:       assertFalse(node0.isNull());
794:       assertFalse(node1.isString());
795:       assertFalse(node1.isInc());
796:       assertFalse(node1.isCase());
797:       assertFalse(node1.isHook());
798:       assertEquals(37, node1.getType());
799:       assertFalse(node1.isThrow());
800:       assertFalse(node1.isEmpty());
801:       assertFalse(node1.isIf());
802:       assertFalse(node1.isDelProp());
803:       assertFalse(node1.isBreak());
804:       assertFalse(node1.isTrue());
805:       assertFalse(node1.isVoid());
806:       assertFalse(node1.isIn());
807:       assertTrue(node1.isCall());
808:       assertFalse(node1.isNE());
809:       assertEquals(55, node1.getLineno());
810:       assertFalse(node1.isCatch());
811:       assertFalse(node1.isWith());
812:       assertFalse(node1.isDefaultCase());
813:       assertFalse(node1.isInstanceOf());
814:       assertFalse(node1.isScript());
815:       assertFalse(node1.isTry());
816:       assertFalse(node1.isRegExp());
817:       assertEquals(0, node1.getChildCount());
818:       assertFalse(node1.isThis());
819:       assertFalse(node1.isStringKey());
820:       assertFalse(node1.isFor());
821:       assertFalse(node1.isLabelName());
822:       assertFalse(node1.hasOneChild());
823:       assertFalse(node1.isArrayLit());
824:       assertFalse(node1.isParamList());
825:       assertEquals(225327, node1.getSourcePosition());
826:       assertFalse(node1.isSwitch());
827:       assertFalse(node1.isNumber());
828:       assertFalse(node1.isGetterDef());
829:       assertFalse(node1.isDo());
830:       assertFalse(node1.hasMoreThanOneChild());
831:       assertFalse(node1.isWhile());
832:       assertFalse(node1.isContinue());
833:       assertFalse(node1.isBlock());
834:       assertFalse(node1.isNew());
835:       assertFalse(node1.isAssignAdd());
836:       assertFalse(node1.isDec());
837:       assertFalse(node1.isTypeOf());
838:       assertFalse(node1.isVar());
839:       assertFalse(node1.isReturn());
840:       assertFalse(node1.hasChildren());
841:       assertFalse(node1.isLabel());
842:       assertFalse(node1.isGetElem());
843:       assertFalse(node1.isAssign());
844:       assertFalse(node1.isName());
845:       assertFalse(node1.isSetterDef());
846:       assertFalse(node1.isOr());
847:       assertFalse(node1.isAdd());
848:       assertFalse(node1.isNull());
849:       assertFalse(node1.isNot());
850:       assertFalse(node1.isObjectLit());
851:       assertFalse(node1.isAnd());
852:       assertFalse(node1.isExprResult());
853:       assertFalse(node1.isFunction());
854:       assertFalse(node1.isComma());
855:       assertEquals(47, node1.getCharno());
856:       assertFalse(node1.isFalse());
857:       assertFalse(node1.isCast());
858:       assertFalse(node1.isGetProp());
859:       assertFalse(node1.isDebugger());
860:       
861:       boolean boolean1 = node1.isCall();
862:       assertFalse(node1.equals((Object)node0));
863:       assertFalse(boolean1 == boolean0);
864:       assertEquals(4095, Node.COLUMN_MASK);
865:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
866:       assertEquals(55, Node.INFERRED_FUNCTION);
867:       assertEquals(8, Node.FLAG_NO_THROWS);
868:       assertEquals(39, Node.EMPTY_BLOCK);
869:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
870:       assertEquals(53, Node.INPUT_ID);
871:       assertEquals(40, Node.ORIGINALNAME_PROP);
872:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
873:       assertEquals(50, Node.FREE_CALL);
874:       assertEquals(2, Node.POST_FLAG);
875:       assertEquals(54, Node.SLASH_V);
876:       assertEquals(43, Node.IS_CONSTANT_NAME);
877:       assertEquals(12, Node.COLUMN_BITS);
878:       assertEquals(46, Node.IS_NAMESPACE);
879:       assertEquals(30, Node.VAR_ARGS_NAME);
880:       assertEquals(51, Node.STATIC_SOURCE_FILE);
881:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
882:       assertEquals(15, Node.NO_SIDE_EFFECTS);
883:       assertEquals(57, Node.LAST_PROP);
884:       assertEquals(47, Node.IS_DISPATCHER);
885:       assertEquals(29, Node.JSDOC_INFO_PROP);
886:       assertEquals(32, Node.INCRDECR_PROP);
887:       assertEquals(1, Node.DECR_FLAG);
888:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
889:       assertEquals(57, Node.REFLECTED_OBJECT);
890:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
891:       assertEquals(52, Node.LENGTH);
892:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
893:       assertEquals(36, Node.QUOTED_PROP);
894:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
895:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
896:       assertEquals(56, Node.CHANGE_TIME);
897:       assertEquals(49, Node.DIRECT_EVAL);
898:       assertEquals(37, Node.OPT_ARG_NAME);
899:       assertEquals(48, Node.DIRECTIVES);
900:       assertTrue(boolean1);
901:       assertFalse(node1.isString());
902:       assertFalse(node1.isInc());
903:       assertFalse(node1.isCase());
904:       assertFalse(node1.isHook());
905:       assertEquals(37, node1.getType());
906:       assertFalse(node1.isThrow());
907:       assertFalse(node1.isEmpty());
908:       assertFalse(node1.isIf());
909:       assertFalse(node1.isDelProp());
910:       assertFalse(node1.isBreak());
911:       assertFalse(node1.isTrue());
912:       assertFalse(node1.isVoid());
913:       assertFalse(node1.isIn());
914:       assertTrue(node1.isCall());
915:       assertFalse(node1.isNE());
916:       assertEquals(55, node1.getLineno());
917:       assertFalse(node1.isCatch());
918:       assertFalse(node1.isWith());
919:       assertFalse(node1.isDefaultCase());
920:       assertFalse(node1.isInstanceOf());
921:       assertFalse(node1.isScript());
922:       assertFalse(node1.isTry());
923:       assertFalse(node1.isRegExp());
924:       assertEquals(0, node1.getChildCount());
925:       assertFalse(node1.isThis());
926:       assertFalse(node1.isStringKey());
927:       assertFalse(node1.isFor());
928:       assertFalse(node1.isLabelName());
929:       assertFalse(node1.hasOneChild());
930:       assertFalse(node1.isArrayLit());
931:       assertFalse(node1.isParamList());
932:       assertEquals(225327, node1.getSourcePosition());
933:       assertFalse(node1.isSwitch());
934:       assertFalse(node1.isNumber());
935:       assertFalse(node1.isGetterDef());
936:       assertFalse(node1.isDo());
937:       assertFalse(node1.hasMoreThanOneChild());
938:       assertFalse(node1.isWhile());
939:       assertFalse(node1.isContinue());
940:       assertFalse(node1.isBlock());
941:       assertFalse(node1.isNew());
942:       assertFalse(node1.isAssignAdd());
943:       assertFalse(node1.isDec());
944:       assertFalse(node1.isTypeOf());
945:       assertFalse(node1.isVar());
946:       assertFalse(node1.isReturn());
947:       assertFalse(node1.hasChildren());
948:       assertFalse(node1.isLabel());
949:       assertFalse(node1.isGetElem());
950:       assertFalse(node1.isAssign());
951:       assertFalse(node1.isName());
952:       assertFalse(node1.isSetterDef());
953:       assertFalse(node1.isOr());
954:       assertFalse(node1.isAdd());
955:       assertFalse(node1.isNull());
956:       assertFalse(node1.isNot());
957:       assertFalse(node1.isObjectLit());
958:       assertFalse(node1.isAnd());
959:       assertFalse(node1.isExprResult());
960:       assertFalse(node1.isFunction());
961:       assertFalse(node1.isComma());
962:       assertEquals(47, node1.getCharno());
963:       assertFalse(node1.isFalse());
964:       assertFalse(node1.isCast());
965:       assertFalse(node1.isGetProp());
966:       assertFalse(node1.isDebugger());
967:       
968:       Node node2 = node1.getFirstChild();
969:       assertFalse(node1.equals((Object)node0));
970:       assertEquals(4095, Node.COLUMN_MASK);
971:       assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
972:       assertEquals(55, Node.INFERRED_FUNCTION);
973:       assertEquals(8, Node.FLAG_NO_THROWS);
974:       assertEquals(39, Node.EMPTY_BLOCK);
975:       assertEquals(42, Node.SIDE_EFFECT_FLAGS);
976:       assertEquals(53, Node.INPUT_ID);
977:       assertEquals(40, Node.ORIGINALNAME_PROP);
978:       assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
979:       assertEquals(50, Node.FREE_CALL);
980:       assertEquals(2, Node.POST_FLAG);
981:       assertEquals(54, Node.SLASH_V);
982:       assertEquals(43, Node.IS_CONSTANT_NAME);
983:       assertEquals(12, Node.COLUMN_BITS);
984:       assertEquals(46, Node.IS_NAMESPACE);
985:       assertEquals(30, Node.VAR_ARGS_NAME);
986:       assertEquals(51, Node.STATIC_SOURCE_FILE);
987:       assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
988:       assertEquals(15, Node.NO_SIDE_EFFECTS);
989:       assertEquals(57, Node.LAST_PROP);
990:       assertEquals(47, Node.IS_DISPATCHER);
991:       assertEquals(29, Node.JSDOC_INFO_PROP);
992:       assertEquals(32, Node.INCRDECR_PROP);
993:       assertEquals(1, Node.DECR_FLAG);
994:       assertEquals(0, Node.SIDE_EFFECTS_ALL);
995:       assertEquals(57, Node.REFLECTED_OBJECT);
996:       assertEquals(4095, Node.MAX_COLUMN_NUMBER);
997:       assertEquals(52, Node.LENGTH);
998:       assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
999:       assertEquals(36, Node.QUOTED_PROP);
1000:       assertEquals(16, Node.FLAG_LOCAL_RESULTS);
1001:       assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
1002:       assertEquals(56, Node.CHANGE_TIME);
1003:       assertEquals(49, Node.DIRECT_EVAL);
1004:       assertEquals(37, Node.OPT_ARG_NAME);
1005:       assertEquals(48, Node.DIRECTIVES);
1006:       assertFalse(node1.isString());
1007:       assertFalse(node1.isInc());
1008:       assertFalse(node1.isCase());
1009:       assertFalse(node1.isHook());
1010:       assertEquals(37, node1.getType());
1011:       assertFalse(node1.isThrow());
1012:       assertFalse(node1.isEmpty());
1013:       assertFalse(node1.isIf());
1014:       assertFalse(node1.isDelProp());
1015:       assertFalse(node1.isBreak());
1016:       assertFalse(node1.isTrue());
1017:       assertFalse(node1.isVoid());
1018:       assertFalse(node1.isIn());
1019:       assertTrue(node1.isCall());
1020:       assertFalse(node1.isNE());
1021:       assertEquals(55, node1.getLineno());
1022:       assertFalse(node1.isCatch());
1023:       assertFalse(node1.isWith());
1024:       assertFalse(node1.isDefaultCase());
1025:       assertFalse(node1.isInstanceOf());
1026:       assertFalse(node1.isScript());
1027:       assertFalse(node1.isTry());
1028:       assertFalse(node1.isRegExp());
1029:       assertEquals(0, node1.getChildCount());
1030:       assertFalse(node1.isThis());
1031:       assertFalse(node1.isStringKey());
1032:       assertFalse(node1.isFor());
1033:       assertFalse(node1.isLabelName());
1034:       assertFalse(node1.hasOneChild());
1035:       assertFalse(node1.isArrayLit());
1036:       assertFalse(node1.isParamList());
1037:       assertEquals(225327, node1.getSourcePosition());
1038:       assertFalse(node1.isSwitch());
1039:       assertFalse(node1.isNumber());
1040:       assertFalse(node1.isGetterDef());
1041:       assertFalse(node1.isDo());
1042:       assertFalse(node1.hasMoreThanOneChild());
1043:       assertFalse(node1.isWhile());
1044:       assertFalse(node1.isContinue());
1045:       assertFalse(node1.isBlock());
1046:       assertFalse(node1.isNew());
1047:       assertFalse(node1.isAssignAdd());
1048:       assertFalse(node1.isDec());
1049:       assertFalse(node1.isTypeOf());
1050:       assertFalse(node1.isVar());
1051:       assertFalse(node1.isReturn());
1052:       assertFalse(node1.hasChildren());
1053:       assertFalse(node1.isLabel());
1054:       assertFalse(node1.isGetElem());
1055:       assertFalse(node1.isAssign());
1056:       assertFalse(node1.isName());
1057:       assertFalse(node1.isSetterDef());
1058:       assertFalse(node1.isOr());
1059:       assertFalse(node1.isAdd());
1060:       assertFalse(node1.isNull());
1061:       assertFalse(node1.isNot());
1062:       assertFalse(node1.isObjectLit());
1063:       assertFalse(node1.isAnd());
1064:       assertFalse(node1.isExprResult());
1065:       assertFalse(node1.isFunction());
1066:       assertFalse(node1.isComma());
1067:       assertEquals(47, node1.getCharno());
1068:       assertFalse(node1.isFalse());
1069:       assertFalse(node1.isCast());
1070:       assertFalse(node1.isGetProp());
1071:       assertFalse(node1.isDebugger());
1072:       assertNull(node2);
1073:   }
1074: }
RegularFileObject[/tmp/EvoSuite_187_1628256097748/com/google/javascript/rhino/Node_187_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Fri Aug 06 13:21:37 GMT 2021
5:  */
6: 
7: package com.google.javascript.rhino;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.evosuite.runtime.sandbox.Sandbox;
14: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
15: 
16: @EvoSuiteClassExclude
17: public class Node_187_tmp__ESTest_scaffolding {
18: 
19:   @org.junit.Rule 
20:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
21: 
22:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
23: 
24: 
25:   @BeforeClass 
26:   public static void initEvoSuiteFramework() { 
27:     org.evosuite.runtime.RuntimeSettings.className = "com.google.javascript.rhino.Node"; 
28:     org.evosuite.runtime.GuiSupport.initialize(); 
29:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
30:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
31:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
32:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
33:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
34:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
35:     setSystemProperties();
36:     initializeClasses();
37:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
38:   } 
39: 
40:   @Before 
41:   public void initTestCase(){ 
42:     threadStopper.storeCurrentThreads();
43:     threadStopper.startRecordingTime();
44:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
45:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
46:     org.evosuite.runtime.GuiSupport.setHeadless(); 
47:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
48:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
49:   } 
50: 
51:   @After 
52:   public void doneWithTestCase(){ 
53:     threadStopper.killAndJoinClientThreads();
54:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
55:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
56:     resetClasses(); 
57:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
59:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
60:   } 
61: 
62:   public static void setSystemProperties() {
63:  
64:     /*No java.lang.System property to set*/
65:   }
66: 
67:   private static void initializeClasses() {
68:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Node_187_tmp__ESTest_scaffolding.class.getClassLoader() ,
69:       "com.google.common.collect.ArrayListMultimap",
70:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
71:       "com.google.common.collect.ImmutableList$SubList",
72:       "com.google.javascript.rhino.jstype.NoType",
73:       "com.google.javascript.rhino.JSDocInfo$Visibility",
74:       "com.google.common.collect.ListMultimap",
75:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
76:       "com.google.javascript.rhino.jstype.ArrowType",
77:       "com.google.javascript.rhino.SimpleErrorReporter",
78:       "com.google.common.collect.Lists$RandomAccessPartition",
79:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
80:       "com.google.common.collect.Collections2",
81:       "com.google.javascript.rhino.jstype.NumberType",
82:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
83:       "com.google.common.collect.PeekingIterator",
84:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
85:       "com.google.common.collect.RegularImmutableList",
86:       "com.google.common.collect.LinkedHashMultimap$ValueSetLink",
87:       "com.google.javascript.rhino.jstype.StaticScope",
88:       "com.google.javascript.rhino.jstype.InstanceObjectType",
89:       "com.google.common.collect.Lists$TransformingRandomAccessList",
90:       "com.google.javascript.rhino.Node$PropListItem",
91:       "com.google.javascript.rhino.Node$IntPropListItem",
92:       "com.google.common.collect.Sets$2",
93:       "com.google.common.collect.Maps$KeySet",
94:       "com.google.common.collect.Sets$3",
95:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
96:       "com.google.common.collect.LinkedHashMultimap",
97:       "com.google.javascript.rhino.Node",
98:       "com.google.javascript.rhino.jstype.ObjectType",
99:       "com.google.common.collect.Sets$1",
100:       "com.google.common.collect.ImmutableMapKeySet",
101:       "com.google.javascript.rhino.JSDocInfo$Marker",
102:       "com.google.common.collect.RegularImmutableMap",
103:       "com.google.common.collect.RegularImmutableBiMap",
104:       "com.google.javascript.rhino.Node$NodeMismatch",
105:       "com.google.javascript.rhino.jstype.RecordType",
106:       "com.google.common.collect.SortedMapDifference",
107:       "com.google.javascript.rhino.jstype.ModificationVisitor",
108:       "com.google.javascript.rhino.jstype.PropertyMap$1",
109:       "com.google.common.collect.AbstractMapEntry",
110:       "com.google.javascript.rhino.Node$AncestorIterable$1",
111:       "com.google.common.collect.Iterators$12",
112:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
113:       "com.google.common.collect.Iterators$11",
114:       "com.google.javascript.rhino.jstype.JSType$1",
115:       "com.google.common.collect.EmptyImmutableBiMap",
116:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
117:       "com.google.common.base.Predicate",
118:       "com.google.javascript.rhino.jstype.JSType$2",
119:       "com.google.javascript.rhino.jstype.VoidType",
120:       "com.google.common.base.Joiner",
121:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
122:       "com.google.common.collect.AbstractListMultimap",
123:       "com.google.common.collect.Iterables",
124:       "com.google.javascript.rhino.jstype.JSType",
125:       "com.google.common.collect.ImmutableAsList",
126:       "com.google.javascript.rhino.Node$StringNode",
127:       "com.google.javascript.rhino.jstype.ProxyObjectType",
128:       "com.google.common.collect.Sets$SetView",
129:       "com.google.common.collect.RegularImmutableAsList",
130:       "com.google.javascript.rhino.jstype.TemplateType",
131:       "com.google.javascript.rhino.jstype.NamedType",
132:       "com.google.common.collect.Iterators$13",
133:       "com.google.javascript.rhino.InputId",
134:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
135:       "com.google.javascript.rhino.jstype.RelationshipVisitor",
136:       "com.google.common.collect.AbstractMapBasedMultimap",
137:       "com.google.common.collect.Lists$Partition",
138:       "com.google.common.collect.Lists",
139:       "com.google.javascript.rhino.Node$SideEffectFlags",
140:       "com.google.common.collect.UnmodifiableListIterator",
141:       "com.google.javascript.rhino.jstype.NullType",
142:       "com.google.common.collect.Lists$TransformingSequentialList",
143:       "com.google.javascript.rhino.ErrorReporter",
144:       "com.google.javascript.rhino.jstype.UnknownType",
145:       "com.google.common.collect.AbstractMapBasedMultimap$AsMap",
146:       "com.google.javascript.rhino.jstype.ValueType",
147:       "com.google.javascript.rhino.jstype.PropertyMap",
148:       "com.google.javascript.rhino.Token",
149:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
150:       "com.google.common.collect.ObjectArrays",
151:       "com.google.javascript.rhino.jstype.StaticSourceFile",
152:       "com.google.javascript.rhino.jstype.BooleanType",
153:       "com.google.javascript.rhino.jstype.NoObjectType",
154:       "com.google.common.collect.AbstractIterator",
155:       "com.google.javascript.rhino.jstype.FunctionBuilder",
156:       "com.google.javascript.rhino.jstype.JSType$TypePair",
157:       "com.google.common.base.Joiner$MapJoiner",
158:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
159:       "com.google.common.collect.ImmutableList$1",
160:       "com.google.common.collect.MapDifference",
161:       "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
162:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
163:       "com.google.common.collect.Sets$ImprovedAbstractSet",
164:       "com.google.javascript.rhino.jstype.FunctionType",
165:       "com.google.common.base.Preconditions",
166:       "com.google.common.collect.UnmodifiableIterator",
167:       "com.google.javascript.rhino.JSDocInfo",
168:       "com.google.common.collect.AbstractMapBasedMultimap$RandomAccessWrappedList",
169:       "com.google.javascript.rhino.jstype.Property",
170:       "com.google.common.collect.ImmutableMapValues",
171:       "com.google.common.collect.ImmutableEntry",
172:       "com.google.common.base.Joiner$1",
173:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
174:       "com.google.common.base.Joiner$2",
175:       "com.google.common.collect.ImmutableCollection",
176:       "com.google.common.collect.ImmutableEnumMap",
177:       "com.google.javascript.rhino.jstype.TernaryValue",
178:       "com.google.javascript.rhino.Node$AncestorIterable",
179:       "com.google.common.collect.AbstractMapBasedMultimap$KeySet",
180:       "com.google.common.collect.Lists$RandomAccessListWrapper",
181:       "com.google.common.collect.ImmutableEnumSet",
182:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedList",
183:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
184:       "com.google.javascript.rhino.jstype.EnumElementType",
185:       "com.google.javascript.rhino.jstype.UnionType",
186:       "com.google.common.base.Objects",
187:       "com.google.javascript.rhino.Node$NumberNode",
188:       "com.google.common.collect.SingletonImmutableList",
189:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
190:       "com.google.common.collect.ImmutableCollection$Builder",
191:       "com.google.javascript.rhino.jstype.StaticSlot",
192:       "com.google.common.collect.Iterators$6",
193:       "com.google.common.collect.BiMap",
194:       "com.google.common.collect.Iterators$7",
195:       "com.google.common.collect.AbstractSetMultimap",
196:       "com.google.common.base.Function",
197:       "com.google.common.collect.ImmutableSet",
198:       "com.google.common.collect.Lists$AbstractListWrapper",
199:       "com.google.common.collect.ImmutableMap",
200:       "com.google.common.collect.AbstractIndexedListIterator",
201:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
202:       "com.google.common.collect.Maps$1",
203:       "com.google.javascript.rhino.jstype.EnumType",
204:       "com.google.common.collect.Iterators$1",
205:       "com.google.common.collect.Iterators$2",
206:       "com.google.javascript.rhino.jstype.NamespaceType",
207:       "com.google.common.collect.Iterators$3",
208:       "com.google.common.collect.Sets",
209:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
210:       "com.google.javascript.rhino.Node$ObjectPropListItem",
211:       "com.google.common.collect.Lists$StringAsImmutableList",
212:       "com.google.common.collect.Lists$2",
213:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
214:       "com.google.common.collect.ImmutableList$Builder",
215:       "com.google.common.collect.Lists$1",
216:       "com.google.javascript.rhino.jstype.StaticReference",
217:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
218:       "com.google.common.collect.Multiset",
219:       "com.google.common.collect.AbstractMultimap",
220:       "com.google.common.collect.Multimap",
221:       "com.google.common.collect.Iterators",
222:       "com.google.common.collect.Maps$ImprovedAbstractMap",
223:       "com.google.common.collect.ImmutableBiMap",
224:       "com.google.common.collect.AbstractMapBasedMultimap$SortedAsMap",
225:       "com.google.common.collect.ImmutableList",
226:       "com.google.common.collect.SingletonImmutableBiMap",
227:       "com.google.common.collect.AbstractMapBasedMultimap$SortedKeySet",
228:       "com.google.javascript.rhino.jstype.StringType",
229:       "com.google.javascript.rhino.Node$AbstractPropListItem",
230:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
231:       "com.google.javascript.rhino.jstype.TemplatizedType",
232:       "com.google.javascript.rhino.jstype.Visitor",
233:       "com.google.javascript.rhino.jstype.NoResolvedType",
234:       "com.google.javascript.rhino.jstype.JSTypeNative",
235:       "com.google.javascript.rhino.jstype.AllType",
236:       "com.google.common.collect.Maps",
237:       "com.google.common.collect.SetMultimap",
238:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
239:       "com.google.common.collect.Maps$EntryTransformer",
240:       "com.google.javascript.rhino.JSTypeExpression",
241:       "com.google.common.collect.Iterators$MergingIterator"
242:     );
243:   } 
244: 
245:   private static void resetClasses() {
246:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Node_187_tmp__ESTest_scaffolding.class.getClassLoader()); 
247: 
248:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
249:       "com.google.javascript.rhino.Node",
250:       "com.google.javascript.rhino.Node$NumberNode",
251:       "com.google.javascript.rhino.Node$StringNode",
252:       "com.google.javascript.rhino.Node$AbstractPropListItem",
253:       "com.google.javascript.rhino.Node$ObjectPropListItem",
254:       "com.google.javascript.rhino.Node$IntPropListItem",
255:       "com.google.javascript.rhino.Node$SiblingNodeIterable",
256:       "com.google.javascript.rhino.Node$AncestorIterable",
257:       "com.google.javascript.rhino.Node$NodeMismatch",
258:       "com.google.javascript.rhino.Node$FileLevelJsDocBuilder",
259:       "com.google.javascript.rhino.Node$SideEffectFlags",
260:       "com.google.javascript.rhino.SimpleErrorReporter",
261:       "com.google.javascript.rhino.jstype.JSTypeRegistry",
262:       "com.google.common.base.Joiner",
263:       "com.google.common.base.Preconditions",
264:       "com.google.common.base.Joiner$1",
265:       "com.google.common.collect.Collections2",
266:       "com.google.common.base.Joiner$MapJoiner",
267:       "com.google.common.collect.Maps",
268:       "com.google.common.collect.AbstractMultimap",
269:       "com.google.common.collect.AbstractMapBasedMultimap",
270:       "com.google.common.collect.AbstractSetMultimap",
271:       "com.google.common.collect.LinkedHashMultimap",
272:       "com.google.common.collect.AbstractMapEntry",
273:       "com.google.common.collect.ImmutableEntry",
274:       "com.google.common.collect.LinkedHashMultimap$ValueEntry",
275:       "com.google.common.collect.AbstractListMultimap",
276:       "com.google.common.collect.ArrayListMultimap",
277:       "com.google.javascript.rhino.jstype.TemplateTypeMap",
278:       "com.google.common.collect.ImmutableCollection",
279:       "com.google.common.collect.RegularImmutableList",
280:       "com.google.common.collect.ObjectArrays",
281:       "com.google.common.collect.ImmutableList",
282:       "com.google.javascript.rhino.jstype.ModificationVisitor",
283:       "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
284:       "com.google.common.collect.ImmutableCollection$Builder",
285:       "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
286:       "com.google.common.collect.ImmutableList$Builder",
287:       "com.google.common.collect.UnmodifiableIterator",
288:       "com.google.common.collect.UnmodifiableListIterator",
289:       "com.google.common.collect.Iterators$1",
290:       "com.google.common.collect.Iterators$2",
291:       "com.google.common.collect.Iterators",
292:       "com.google.javascript.rhino.jstype.CanCastToVisitor",
293:       "com.google.javascript.rhino.jstype.JSType$1",
294:       "com.google.javascript.rhino.jstype.JSType",
295:       "com.google.javascript.rhino.jstype.ObjectType",
296:       "com.google.javascript.rhino.jstype.ProxyObjectType",
297:       "com.google.javascript.rhino.jstype.TemplateType",
298:       "com.google.javascript.rhino.jstype.ValueType",
299:       "com.google.javascript.rhino.jstype.BooleanType",
300:       "com.google.javascript.rhino.jstype.NullType",
301:       "com.google.javascript.rhino.jstype.NumberType",
302:       "com.google.javascript.rhino.jstype.StringType",
303:       "com.google.javascript.rhino.jstype.UnknownType",
304:       "com.google.javascript.rhino.jstype.VoidType",
305:       "com.google.javascript.rhino.jstype.AllType",
306:       "com.google.javascript.rhino.jstype.PrototypeObjectType",
307:       "com.google.common.collect.ImmutableMap",
308:       "com.google.common.collect.ImmutableBiMap",
309:       "com.google.common.collect.EmptyImmutableBiMap",
310:       "com.google.javascript.rhino.jstype.PropertyMap$1",
311:       "com.google.javascript.rhino.jstype.PropertyMap",
312:       "com.google.javascript.rhino.jstype.FunctionType",
313:       "com.google.javascript.rhino.jstype.FunctionParamBuilder",
314:       "com.google.javascript.rhino.Token",
315:       "com.google.javascript.rhino.jstype.ArrowType",
316:       "com.google.javascript.rhino.jstype.FunctionType$Kind",
317:       "com.google.javascript.rhino.jstype.FunctionType$PropAccess",
318:       "com.google.javascript.rhino.jstype.InstanceObjectType",
319:       "com.google.javascript.rhino.jstype.Property",
320:       "com.google.common.collect.Lists",
321:       "com.google.javascript.rhino.jstype.NoObjectType",
322:       "com.google.javascript.rhino.jstype.NoType",
323:       "com.google.javascript.rhino.jstype.NoResolvedType",
324:       "com.google.common.collect.SingletonImmutableList",
325:       "com.google.javascript.rhino.jstype.ErrorFunctionType",
326:       "com.google.javascript.rhino.jstype.UnionTypeBuilder",
327:       "com.google.javascript.rhino.jstype.EquivalenceMethod",
328:       "com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch",
329:       "com.google.javascript.rhino.jstype.UnionType",
330:       "com.google.javascript.rhino.jstype.FunctionBuilder",
331:       "com.google.javascript.rhino.jstype.JSTypeRegistry$1",
332:       "com.google.javascript.rhino.jstype.EnumType",
333:       "com.google.javascript.rhino.jstype.EnumElementType",
334:       "com.google.javascript.rhino.JSDocInfo",
335:       "com.google.javascript.rhino.JSDocInfo$LazilyInitializedInfo",
336:       "com.google.common.collect.Sets",
337:       "com.google.javascript.rhino.jstype.SimpleSourceFile",
338:       "com.google.javascript.rhino.InputId",
339:       "com.google.common.base.Objects",
340:       "com.google.javascript.rhino.Node$AncestorIterable$1",
341:       "com.google.common.collect.Iterables",
342:       "com.google.common.collect.AbstractIndexedListIterator",
343:       "com.google.common.collect.Iterators$11",
344:       "com.google.javascript.rhino.jstype.TemplatizedType",
345:       "com.google.common.collect.ImmutableSet",
346:       "com.google.common.collect.EmptyImmutableSet",
347:       "com.google.javascript.rhino.jstype.JSType$TypePair",
348:       "com.google.javascript.rhino.jstype.NamedType",
349:       "com.google.javascript.rhino.jstype.BooleanLiteralSet",
350:       "com.google.javascript.rhino.jstype.TernaryValue",
351:       "com.google.javascript.rhino.jstype.JSType$2",
352:       "com.google.common.collect.Platform",
353:       "com.google.common.collect.ImmutableList$ReverseImmutableList",
354:       "com.google.common.collect.AbstractMultimap$Values",
355:       "com.google.common.collect.AbstractMapBasedMultimap$Itr",
356:       "com.google.common.collect.AbstractMapBasedMultimap$1",
357:       "com.google.common.collect.Multimaps$Entries",
358:       "com.google.common.collect.AbstractMultimap$Entries",
359:       "com.google.common.collect.AbstractMapBasedMultimap$2",
360:       "com.google.common.collect.Sets$ImprovedAbstractSet",
361:       "com.google.common.collect.LinkedHashMultimap$ValueSet",
362:       "com.google.common.collect.Hashing",
363:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedCollection",
364:       "com.google.common.collect.AbstractMapBasedMultimap$WrappedSet",
365:       "com.google.javascript.rhino.JSTypeExpression"
366:     );
367:   }
368: }

[MASTER] 13:21:37.890 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
Node node0 = Node.newString(".");
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(node0);

Iterable<Node> iterable0 = node0.children();
assertFalse(iterable0.contains(node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(iterable0);

String string0 = node0.toString();
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals("STRING .", string0);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertNotNull(string0);

Node node1 = new Node(37, 55, 47);
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(37, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertEquals(55, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertNotNull(node1);

Node.NodeMismatch node_NodeMismatch0 = node1.checkTreeEqualsImpl(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(37, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertEquals(55, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertNotNull(node_NodeMismatch0);

boolean boolean0 = node1.isEquivalentToTyped(node0);
assertFalse(node0.equals((Object)node1));
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(53, Node.INPUT_ID);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(48, Node.DIRECTIVES);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(1, Node.DECR_FLAG);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(57, Node.LAST_PROP);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(52, Node.LENGTH);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(50, Node.FREE_CALL);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(54, Node.SLASH_V);
assertEquals(2, Node.POST_FLAG);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(boolean0);
assertFalse(node0.isCase());
assertFalse(node0.isInc());
assertFalse(node0.isIn());
assertFalse(node0.isHook());
assertFalse(node0.isThrow());
assertFalse(node0.isFalse());
assertFalse(node0.isGetterDef());
assertEquals((-1), node0.getCharno());
assertFalse(node0.isDebugger());
assertFalse(node0.isArrayLit());
assertFalse(node0.isSwitch());
assertFalse(node0.isAnd());
assertFalse(node0.isWith());
assertEquals(40, node0.getType());
assertFalse(node0.isCatch());
assertFalse(node0.isScript());
assertFalse(node0.isFunction());
assertFalse(node0.isRegExp());
assertFalse(node0.isInstanceOf());
assertFalse(node0.isTry());
assertFalse(node0.hasOneChild());
assertFalse(node0.isThis());
assertFalse(node0.isFor());
assertFalse(node0.isSetterDef());
assertEquals((-1), node0.getLineno());
assertFalse(node0.isNE());
assertFalse(node0.isIf());
assertFalse(node0.isDo());
assertFalse(node0.hasMoreThanOneChild());
assertFalse(node0.isContinue());
assertFalse(node0.isLabel());
assertFalse(node0.isAdd());
assertFalse(node0.isAssignAdd());
assertFalse(node0.isBlock());
assertTrue(node0.isString());
assertFalse(node0.isReturn());
assertFalse(node0.isNew());
assertFalse(node0.isVar());
assertFalse(node0.isWhile());
assertFalse(node0.isLabelName());
assertEquals((-1), node0.getSourcePosition());
assertFalse(node0.isCast());
assertFalse(node0.isNumber());
assertFalse(node0.isParamList());
assertFalse(node0.isStringKey());
assertFalse(node0.isNot());
assertFalse(node0.isExprResult());
assertFalse(node0.isObjectLit());
assertEquals(0, node0.getChildCount());
assertFalse(node0.isGetProp());
assertFalse(node0.isComma());
assertFalse(node0.isDefaultCase());
assertFalse(node0.isAssign());
assertFalse(node0.isEmpty());
assertFalse(node0.isGetElem());
assertFalse(node0.isName());
assertFalse(node0.isDelProp());
assertFalse(node0.isBreak());
assertFalse(node0.hasChildren());
assertFalse(node0.isDec());
assertFalse(node0.isTypeOf());
assertFalse(node0.isCall());
assertFalse(node0.isOr());
assertFalse(node0.isVoid());
assertFalse(node0.isTrue());
assertFalse(node0.isNull());
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(37, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertEquals(55, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());

boolean boolean1 = node1.isCall();
assertFalse(node1.equals((Object)node0));
assertFalse(boolean1 == boolean0);
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertTrue(boolean1);
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(37, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertEquals(55, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());

Node node2 = node1.getFirstChild();
assertFalse(node1.equals((Object)node0));
assertEquals(4095, Node.COLUMN_MASK);
assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
assertEquals(55, Node.INFERRED_FUNCTION);
assertEquals(8, Node.FLAG_NO_THROWS);
assertEquals(39, Node.EMPTY_BLOCK);
assertEquals(42, Node.SIDE_EFFECT_FLAGS);
assertEquals(53, Node.INPUT_ID);
assertEquals(40, Node.ORIGINALNAME_PROP);
assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
assertEquals(50, Node.FREE_CALL);
assertEquals(2, Node.POST_FLAG);
assertEquals(54, Node.SLASH_V);
assertEquals(43, Node.IS_CONSTANT_NAME);
assertEquals(12, Node.COLUMN_BITS);
assertEquals(46, Node.IS_NAMESPACE);
assertEquals(30, Node.VAR_ARGS_NAME);
assertEquals(51, Node.STATIC_SOURCE_FILE);
assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
assertEquals(15, Node.NO_SIDE_EFFECTS);
assertEquals(57, Node.LAST_PROP);
assertEquals(47, Node.IS_DISPATCHER);
assertEquals(29, Node.JSDOC_INFO_PROP);
assertEquals(32, Node.INCRDECR_PROP);
assertEquals(1, Node.DECR_FLAG);
assertEquals(0, Node.SIDE_EFFECTS_ALL);
assertEquals(57, Node.REFLECTED_OBJECT);
assertEquals(4095, Node.MAX_COLUMN_NUMBER);
assertEquals(52, Node.LENGTH);
assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
assertEquals(36, Node.QUOTED_PROP);
assertEquals(16, Node.FLAG_LOCAL_RESULTS);
assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
assertEquals(56, Node.CHANGE_TIME);
assertEquals(49, Node.DIRECT_EVAL);
assertEquals(37, Node.OPT_ARG_NAME);
assertEquals(48, Node.DIRECTIVES);
assertFalse(node1.isString());
assertFalse(node1.isInc());
assertFalse(node1.isCase());
assertFalse(node1.isHook());
assertEquals(37, node1.getType());
assertFalse(node1.isThrow());
assertFalse(node1.isEmpty());
assertFalse(node1.isIf());
assertFalse(node1.isDelProp());
assertFalse(node1.isBreak());
assertFalse(node1.isTrue());
assertFalse(node1.isVoid());
assertFalse(node1.isIn());
assertTrue(node1.isCall());
assertFalse(node1.isNE());
assertEquals(55, node1.getLineno());
assertFalse(node1.isCatch());
assertFalse(node1.isWith());
assertFalse(node1.isDefaultCase());
assertFalse(node1.isInstanceOf());
assertFalse(node1.isScript());
assertFalse(node1.isTry());
assertFalse(node1.isRegExp());
assertEquals(0, node1.getChildCount());
assertFalse(node1.isThis());
assertFalse(node1.isStringKey());
assertFalse(node1.isFor());
assertFalse(node1.isLabelName());
assertFalse(node1.hasOneChild());
assertFalse(node1.isArrayLit());
assertFalse(node1.isParamList());
assertEquals(225327, node1.getSourcePosition());
assertFalse(node1.isSwitch());
assertFalse(node1.isNumber());
assertFalse(node1.isGetterDef());
assertFalse(node1.isDo());
assertFalse(node1.hasMoreThanOneChild());
assertFalse(node1.isWhile());
assertFalse(node1.isContinue());
assertFalse(node1.isBlock());
assertFalse(node1.isNew());
assertFalse(node1.isAssignAdd());
assertFalse(node1.isDec());
assertFalse(node1.isTypeOf());
assertFalse(node1.isVar());
assertFalse(node1.isReturn());
assertFalse(node1.hasChildren());
assertFalse(node1.isLabel());
assertFalse(node1.isGetElem());
assertFalse(node1.isAssign());
assertFalse(node1.isName());
assertFalse(node1.isSetterDef());
assertFalse(node1.isOr());
assertFalse(node1.isAdd());
assertFalse(node1.isNull());
assertFalse(node1.isNot());
assertFalse(node1.isObjectLit());
assertFalse(node1.isAnd());
assertFalse(node1.isExprResult());
assertFalse(node1.isFunction());
assertFalse(node1.isComma());
assertEquals(47, node1.getCharno());
assertFalse(node1.isFalse());
assertFalse(node1.isCast());
assertFalse(node1.isGetProp());
assertFalse(node1.isDebugger());
assertNull(node2);


[MASTER] 13:21:53.175 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:53.574 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:53.956 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:54.454 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:54.781 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:55.046 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:55.270 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:55.487 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:55.690 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:55.919 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:56.133 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:56.400 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:56.620 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:56.875 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:57.112 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:57.348 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:57.591 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:58.627 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:58.911 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:59.153 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:59.392 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:59.602 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:21:59.853 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:00.089 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:00.375 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:00.708 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:00.940 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:01.178 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:01.410 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:01.648 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:01.861 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:02.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:02.317 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:02.541 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:02.803 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:02.995 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:03.232 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:03.463 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:03.736 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:04.042 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:04.400 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 13:22:04.641 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Node_ESTest' to results/Closure-110/com.google.javascript.rhino.Node/BBC-F0-100/tests/28
* Done!

* Computation finished
